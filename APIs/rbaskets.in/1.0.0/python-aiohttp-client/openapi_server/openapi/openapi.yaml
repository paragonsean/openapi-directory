openapi: 3.0.1
info:
  contact:
    name: darklynx
    url: https://github.com/darklynx
  description: |
    RESTful API of [Request Baskets](https://rbaskets.in) service.

    Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful
    API or web UI.

    Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description.
  license:
    name: MIT
    url: https://github.com/darklynx/request-baskets/blob/master/LICENSE
  title: Request Baskets API
  version: 1.0.0
  x-apisguru-categories:
  - developer_tools
  - monitoring
  x-logo:
    url: https://raw.githubusercontent.com/darklynx/request-baskets/master/doc/logo.svg
  x-origin:
  - format: swagger
    url: https://raw.githubusercontent.com/darklynx/request-baskets/master/doc/api-swagger.yaml
    version: "2.0"
  x-providerName: rbaskets.in
servers:
- url: https://rbaskets.in/
tags:
- description: Service information
  name: service
- description: Manage baskets
  name: baskets
- description: Configure basket responses
  name: responses
- description: Manage collected requests
  name: requests
paths:
  /api/baskets:
    get:
      description: Fetches a list of basket names managed by service. Require master
        token.
      operationId: api_baskets_get
      parameters:
      - description: Maximum number of basket names to return; default 20
        in: query
        name: max
        schema:
          type: integer
      - description: Number of basket names to skip; default 0
        in: query
        name: skip
        schema:
          type: integer
      - description: "Query string to filter result, only those basket names that\
          \ match the query will be included in response"
        in: query
        name: q
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Baskets'
          description: OK. Returns list of available baskets.
        "204":
          content: {}
          description: No Content. No baskets available for specified limits
        "401":
          content: {}
          description: Unauthorized. Invalid or missing master token
      security:
      - service_token: []
      summary: Get baskets
      tags:
      - baskets
      x-openapi-router-controller: openapi_server.controllers.baskets_controller
  /api/baskets/{name}:
    delete:
      description: Permanently deletes this basket and all collected requests.
      operationId: api_baskets_name_delete
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content. Basket is deleted
        "401":
          content: {}
          description: Unauthorized. Invalid or missing basket token
        "404":
          content: {}
          description: Not Found. No basket with such name
      security:
      - basket_token: []
      summary: Delete basket
      tags:
      - baskets
      x-openapi-router-controller: openapi_server.controllers.baskets_controller
    get:
      description: Retrieves configuration settings of this basket.
      operationId: api_baskets_name_get
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
          description: OK. Returns basket configuration
        "401":
          content: {}
          description: Unauthorized. Invalid or missing basket token
        "404":
          content: {}
          description: Not Found. No basket with such name
      security:
      - basket_token: []
      summary: Get basket settings
      tags:
      - baskets
      x-openapi-router-controller: openapi_server.controllers.baskets_controller
    post:
      description: Creates a new basket with this name.
      operationId: api_baskets_name_post
      parameters:
      - description: The name of new basket
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
        description: Basket configuration
        required: false
        x-body-name: config
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: Created. Indicates that basket is successfully created
        "400":
          content: {}
          description: Bad Request. Failed to parse JSON into basket configuration
            object.
        "403":
          content: {}
          description: "Forbidden. Indicates that basket name conflicts with reserved\
            \ paths; e.g. `baskets`, `web`, etc."
        "409":
          content: {}
          description: Conflict. Indicates that basket with such name already exists
        "422":
          content: {}
          description: Unprocessable Entity. Basket configuration is not valid.
      summary: Create new basket
      tags:
      - baskets
      x-codegen-request-body-name: config
      x-openapi-router-controller: openapi_server.controllers.baskets_controller
    put:
      description: |
        Updates configuration settings of this basket.

        Special configuration parameters for request forwarding:
          * `insecure_tls` controls certificate verification when forwarding requests. Setting this parameter to `true`
          allows to forward collected HTTP requests via HTTPS protocol even if the forward end-point is configured with
          self-signed TLS/SSL certificate. **Warning:** enabling this feature has known security implications.
          * `expand_path` changes the logic of constructing taget URL when forwarding requests. If this parameter is
          set to `true` the forward URL path will be expanded when original HTTP request contains compound path. For
          example, a basket with name **server1** is configured to forward all requests to `http://server1.intranet:8001/myservice`
          and it has received an HTTP request like `GET http://baskets.example.com/server1/component/123/events?status=OK`
          then depending on `expand_path` settings the request will be forwarded to:
            * `true` => `GET http://server1.intranet:8001/myservice/component/123/events?status=OK`
            * `false` => `GET http://server1.intranet:8001/myservice?status=OK`
      operationId: api_baskets_name_put
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
        description: New configuration to apply
        required: true
        x-body-name: config
      responses:
        "204":
          content: {}
          description: No Content. Basket configuration is updated
        "400":
          content: {}
          description: Bad Request. Failed to parse JSON into basket configuration
            object.
        "401":
          content: {}
          description: Unauthorized. Invalid or missing basket token
        "404":
          content: {}
          description: Not Found. No basket with such name
        "422":
          content: {}
          description: Unprocessable Entity. Basket configuration is not valid.
      security:
      - basket_token: []
      summary: Update basket settings
      tags:
      - baskets
      x-codegen-request-body-name: config
      x-openapi-router-controller: openapi_server.controllers.baskets_controller
  /api/baskets/{name}/requests:
    delete:
      description: Deletes all requests collected by this basket.
      operationId: api_baskets_name_requests_delete
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content. Basket requests are cleared
        "401":
          content: {}
          description: Unauthorized. Invalid or missing basket token
        "404":
          content: {}
          description: Not Found. No basket with such name
      security:
      - basket_token: []
      summary: Delete all requests
      tags:
      - requests
      x-openapi-router-controller: openapi_server.controllers.requests_controller
    get:
      description: Fetches collection of requests collected by this basket.
      operationId: api_baskets_name_requests_get
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: Maximum number of requests to return; default 20
        in: query
        name: max
        schema:
          type: integer
      - description: Number of requests to skip; default 0
        in: query
        name: skip
        schema:
          type: integer
      - description: "Query string to filter result, only requests that match the\
          \ query will be included in response"
        in: query
        name: q
        schema:
          type: string
      - description: |
          Defines what is taken into account when filtering is applied: `body` - search in content body of collected requests,
          `query` - search among query parameters of collected requests, `headers` - search among request header values,
          `any` - search anywhere; default `any`
        in: query
        name: in
        schema:
          enum:
          - any
          - body
          - query
          - headers
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requests'
          description: OK. Returns list of basket requests.
        "204":
          content: {}
          description: No Content. No requests found for specified limits
        "401":
          content: {}
          description: Unauthorized. Invalid or missing basket token
        "404":
          content: {}
          description: Not Found. No basket with such name
      security:
      - basket_token: []
      summary: Get collected requests
      tags:
      - requests
      x-openapi-router-controller: openapi_server.controllers.requests_controller
  /api/baskets/{name}/responses/{method}:
    get:
      description: |
        Retrieves information about configured response of the basket. Service will reply with this response to any
        HTTP request sent to the basket with appropriate HTTP method.

        If nothing is configured, the default response is HTTP 200 - OK with empty content.
      operationId: api_baskets_name_responses_method_get
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: The HTTP method this response is configured for
        in: path
        name: method
        required: true
        schema:
          enum:
          - GET
          - HEAD
          - POST
          - PUT
          - PATCH
          - DELETE
          - CONNECT
          - OPTIONS
          - TRACE
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: OK. Returns configured response information
        "401":
          content: {}
          description: Unauthorized. Invalid or missing basket token
        "404":
          content: {}
          description: Not Found. No basket with such name
      security:
      - basket_token: []
      summary: Get response settings
      tags:
      - responses
      x-openapi-router-controller: openapi_server.controllers.responses_controller
    put:
      description: |
        Allows to configure HTTP response of this basket. The service will reply with configured response to any HTTP
        request sent to the basket with appropriate HTTP method.

        If nothing is configured, the default response is HTTP 200 - OK with empty content.
      operationId: api_baskets_name_responses_method_put
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: The HTTP method this response is configured for
        in: path
        name: method
        required: true
        schema:
          enum:
          - GET
          - HEAD
          - POST
          - PUT
          - PATCH
          - DELETE
          - CONNECT
          - OPTIONS
          - TRACE
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Response'
        description: HTTP response configuration
        required: true
        x-body-name: response
      responses:
        "204":
          content: {}
          description: No Content. Response configuration is updated
        "400":
          content: {}
          description: Bad Request. Failed to parse JSON into response configuration
            object.
        "401":
          content: {}
          description: Unauthorized. Invalid or missing basket token
        "404":
          content: {}
          description: Not Found. No basket with such name
        "422":
          content: {}
          description: Unprocessable Entity. Response configuration is not valid.
      security:
      - basket_token: []
      summary: Update response settings
      tags:
      - responses
      x-codegen-request-body-name: response
      x-openapi-router-controller: openapi_server.controllers.responses_controller
  /api/stats:
    get:
      description: Get service statistics about baskets and collected HTTP requests.
        Require master token.
      operationId: api_stats_get
      parameters:
      - description: Maximum number of basket names to return; default 5
        in: query
        name: max
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceStats'
          description: OK. Returns service statistics.
        "401":
          content: {}
          description: Unauthorized. Invalid or missing master token
      security:
      - service_token: []
      summary: Get baskets statistics
      tags:
      - baskets
      x-openapi-router-controller: openapi_server.controllers.baskets_controller
  /api/version:
    get:
      description: Get service version.
      operationId: api_version_get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
          description: OK. Returns service version.
      summary: Get service version
      tags:
      - service
      x-openapi-router-controller: openapi_server.controllers.service_controller
  /baskets:
    get:
      deprecated: true
      description: Fetches a list of basket names managed by service. Require master
        token.
      operationId: baskets_get
      parameters:
      - description: Maximum number of basket names to return; default 20
        in: query
        name: max
        schema:
          type: integer
      - description: Number of basket names to skip; default 0
        in: query
        name: skip
        schema:
          type: integer
      - description: "Query string to filter result, only those basket names that\
          \ match the query will be included in response"
        in: query
        name: q
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Baskets'
          description: OK. Returns list of available baskets.
        "204":
          content: {}
          description: No Content. No baskets available for specified limits
        "401":
          content: {}
          description: Unauthorized. Invalid or missing master token
      security:
      - service_token: []
      summary: Get baskets
      tags:
      - baskets
      x-openapi-router-controller: openapi_server.controllers.baskets_controller
  /baskets/{name}:
    delete:
      deprecated: true
      description: Permanently deletes this basket and all collected requests.
      operationId: baskets_name_delete
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content. Basket is deleted
        "401":
          content: {}
          description: Unauthorized. Invalid or missing basket token
        "404":
          content: {}
          description: Not Found. No basket with such name
      security:
      - basket_token: []
      summary: Delete basket
      tags:
      - baskets
      x-openapi-router-controller: openapi_server.controllers.baskets_controller
    get:
      deprecated: true
      description: Retrieves configuration settings of this basket.
      operationId: baskets_name_get
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
          description: OK. Returns basket configuration
        "401":
          content: {}
          description: Unauthorized. Invalid or missing basket token
        "404":
          content: {}
          description: Not Found. No basket with such name
      security:
      - basket_token: []
      summary: Get basket settings
      tags:
      - baskets
      x-openapi-router-controller: openapi_server.controllers.baskets_controller
    post:
      deprecated: true
      description: Creates a new basket with this name.
      operationId: baskets_name_post
      parameters:
      - description: The name of new basket
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
        description: Basket configuration
        required: false
        x-body-name: config
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: Created. Indicates that basket is successfully created
        "400":
          content: {}
          description: Bad Request. Failed to parse JSON into basket configuration
            object.
        "403":
          content: {}
          description: "Forbidden. Indicates that basket name conflicts with reserved\
            \ paths; e.g. `baskets`, `web`, etc."
        "409":
          content: {}
          description: Conflict. Indicates that basket with such name already exists
        "422":
          content: {}
          description: Unprocessable Entity. Basket configuration is not valid.
      summary: Create new basket
      tags:
      - baskets
      x-codegen-request-body-name: config
      x-openapi-router-controller: openapi_server.controllers.baskets_controller
    put:
      deprecated: true
      description: |
        Updates configuration settings of this basket.

        Special configuration parameters for request forwarding:
          * `insecure_tls` controls certificate verification when forwarding requests. Setting this parameter to `true`
          allows to forward collected HTTP requests via HTTPS protocol even if the forward end-point is configured with
          self-signed TLS/SSL certificate. **Warning:** enabling this feature has known security implications.
          * `expand_path` changes the logic of constructing taget URL when forwarding requests. If this parameter is
          set to `true` the forward URL path will be expanded when original HTTP request contains compound path. For
          example, a basket with name **server1** is configured to forward all requests to `http://server1.intranet:8001/myservice`
          and it has received an HTTP request like `GET http://baskets.example.com/server1/component/123/events?status=OK`
          then depending on `expand_path` settings the request will be forwarded to:
            * `true` => `GET http://server1.intranet:8001/myservice/component/123/events?status=OK`
            * `false` => `GET http://server1.intranet:8001/myservice?status=OK`
      operationId: baskets_name_put
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
        description: New configuration to apply
        required: true
        x-body-name: config
      responses:
        "204":
          content: {}
          description: No Content. Basket configuration is updated
        "400":
          content: {}
          description: Bad Request. Failed to parse JSON into basket configuration
            object.
        "401":
          content: {}
          description: Unauthorized. Invalid or missing basket token
        "404":
          content: {}
          description: Not Found. No basket with such name
        "422":
          content: {}
          description: Unprocessable Entity. Basket configuration is not valid.
      security:
      - basket_token: []
      summary: Update basket settings
      tags:
      - baskets
      x-codegen-request-body-name: config
      x-openapi-router-controller: openapi_server.controllers.baskets_controller
  /baskets/{name}/requests:
    delete:
      deprecated: true
      description: Deletes all requests collected by this basket.
      operationId: baskets_name_requests_delete
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content. Basket requests are cleared
        "401":
          content: {}
          description: Unauthorized. Invalid or missing basket token
        "404":
          content: {}
          description: Not Found. No basket with such name
      security:
      - basket_token: []
      summary: Delete all requests
      tags:
      - requests
      x-openapi-router-controller: openapi_server.controllers.requests_controller
    get:
      deprecated: true
      description: Fetches collection of requests collected by this basket.
      operationId: baskets_name_requests_get
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: Maximum number of requests to return; default 20
        in: query
        name: max
        schema:
          type: integer
      - description: Number of requests to skip; default 0
        in: query
        name: skip
        schema:
          type: integer
      - description: "Query string to filter result, only requests that match the\
          \ query will be included in response"
        in: query
        name: q
        schema:
          type: string
      - description: |
          Defines what is taken into account when filtering is applied: `body` - search in content body of collected requests,
          `query` - search among query parameters of collected requests, `headers` - search among request header values,
          `any` - search anywhere; default `any`
        in: query
        name: in
        schema:
          enum:
          - any
          - body
          - query
          - headers
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Requests'
          description: OK. Returns list of basket requests.
        "204":
          content: {}
          description: No Content. No requests found for specified limits
        "401":
          content: {}
          description: Unauthorized. Invalid or missing basket token
        "404":
          content: {}
          description: Not Found. No basket with such name
      security:
      - basket_token: []
      summary: Get collected requests
      tags:
      - requests
      x-openapi-router-controller: openapi_server.controllers.requests_controller
  /baskets/{name}/responses/{method}:
    get:
      deprecated: true
      description: |
        Retrieves information about configured response of the basket. Service will reply with this response to any
        HTTP request sent to the basket with appropriate HTTP method.

        If nothing is configured, the default response is HTTP 200 - OK with empty content.
      operationId: baskets_name_responses_method_get
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: The HTTP method this response is configured for
        in: path
        name: method
        required: true
        schema:
          enum:
          - GET
          - HEAD
          - POST
          - PUT
          - PATCH
          - DELETE
          - CONNECT
          - OPTIONS
          - TRACE
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: OK. Returns configured response information
        "401":
          content: {}
          description: Unauthorized. Invalid or missing basket token
        "404":
          content: {}
          description: Not Found. No basket with such name
      security:
      - basket_token: []
      summary: Get response settings
      tags:
      - responses
      x-openapi-router-controller: openapi_server.controllers.responses_controller
    put:
      deprecated: true
      description: |
        Allows to configure HTTP response of this basket. The service will reply with configured response to any HTTP
        request sent to the basket with appropriate HTTP method.

        If nothing is configured, the default response is HTTP 200 - OK with empty content.
      operationId: baskets_name_responses_method_put
      parameters:
      - description: The basket name
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: The HTTP method this response is configured for
        in: path
        name: method
        required: true
        schema:
          enum:
          - GET
          - HEAD
          - POST
          - PUT
          - PATCH
          - DELETE
          - CONNECT
          - OPTIONS
          - TRACE
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Response'
        description: HTTP response configuration
        required: true
        x-body-name: response
      responses:
        "204":
          content: {}
          description: No Content. Response configuration is updated
        "400":
          content: {}
          description: Bad Request. Failed to parse JSON into response configuration
            object.
        "401":
          content: {}
          description: Unauthorized. Invalid or missing basket token
        "404":
          content: {}
          description: Not Found. No basket with such name
        "422":
          content: {}
          description: Unprocessable Entity. Response configuration is not valid.
      security:
      - basket_token: []
      summary: Update response settings
      tags:
      - responses
      x-codegen-request-body-name: response
      x-openapi-router-controller: openapi_server.controllers.responses_controller
components:
  schemas:
    BasketInfo:
      example:
        requests_count: 62
        requests_total_count: 315
        last_request_date: 1550106301288
        name: basket22
      properties:
        last_request_date:
          description: |
            Date and time of last request processed through this basket in Unix time ms.
            format (number of milliseconds elapsed since January 1, 1970 UTC).

            If no requests were collected by this basket `0` is returned.
          example: 1550106301288
          format: int64
          title: last_request_date
          type: integer
        name:
          description: Basket name
          example: basket22
          title: name
          type: string
        requests_count:
          description: Current number of collected HTTP requests held by basket
          example: 62
          title: requests_count
          type: integer
        requests_total_count:
          description: Total number of all HTTP requests passed through this basket
          example: 315
          title: requests_total_count
          type: integer
      title: BasketInfo
      type: object
    Baskets:
      example:
        names:
        - basket22
        - mybasket
        - test123
        count: 118
        has_more: true
      properties:
        count:
          description: Total number of baskets in the system; not present if query
            is applied
          example: 118
          title: count
          type: integer
        has_more:
          description: Indicates if there are more baskets to fetch
          example: true
          title: has_more
          type: boolean
        names:
          description: Collection of basket names
          example:
          - basket22
          - mybasket
          - test123
          items:
            type: string
          title: names
          type: array
      required:
      - has_more
      - names
      title: Baskets
      type: object
    Config:
      example:
        expand_path: true
        insecure_tls: false
        forward_url: https://myservice.example.com/events-collector
        proxy_response: false
        capacity: 250
      properties:
        capacity:
          description: "Baskets capacity, defines maximum number of requests to store"
          example: 250
          title: capacity
          type: integer
        expand_path:
          description: If set to `true` the forward URL path will be expanded when
            original HTTP request contains compound path.
          example: true
          title: expand_path
          type: boolean
        forward_url:
          description: "URL to forward all incoming requests of the basket, `empty`\
            \ value disables forwarding"
          example: https://myservice.example.com/events-collector
          title: forward_url
          type: string
        insecure_tls:
          description: |
            If set to `true` the certificate verification will be disabled if forward URL indicates HTTPS scheme.
            **Warning:** enabling this feature has known security implications.
          example: false
          title: insecure_tls
          type: boolean
        proxy_response:
          description: |
            If set to `true` this basket behaves as a full proxy: responses from underlying service configured in `forward_url`
            are passed back to clients of original requests. The configuration of basket responses is ignored in this case.
          example: false
          title: proxy_response
          type: boolean
      title: Config
      type: object
    Headers:
      additionalProperties:
        description: Collection of header values
        items:
          type: string
        type: array
      description: "Map of HTTP headers, key represents name, value is array of values"
      example:
        Accept:
        - application/json
        - application/xml
        Connection:
        - close
        Content-Type:
        - application/json
      title: headers
      type: object
    Request:
      example:
        date: 1550300604712
        headers:
          Accept:
          - application/json
          - application/xml
          Connection:
          - close
          Content-Type:
          - application/json
        path: /basket1/data
        method: POST
        query: name=basket1&version=12
        body: user=abc_test&status=200
        content_length: 24
      properties:
        body:
          description: Content of request body
          example: user=abc_test&status=200
          title: body
          type: string
        content_length:
          description: Content length of request
          example: 24
          title: content_length
          type: integer
        date:
          description: "Date and time of request in Unix time ms. format (number of\
            \ milliseconds elapsed since January 1, 1970 UTC)"
          example: 1550300604712
          format: int64
          title: date
          type: integer
        headers:
          additionalProperties:
            description: Collection of header values
            items:
              type: string
            type: array
          description: "Map of HTTP headers, key represents name, value is array of\
            \ values"
          example:
            Accept:
            - application/json
            - application/xml
            Connection:
            - close
            Content-Type:
            - application/json
          title: headers
          type: object
        method:
          description: HTTP method of request
          example: POST
          title: method
          type: string
        path:
          description: URL path of request
          example: /basket1/data
          title: path
          type: string
        query:
          description: Query parameters of request
          example: name=basket1&version=12
          title: query
          type: string
      title: Request
      type: object
    Requests:
      example:
        total_count: 3023
        count: 200
        has_more: true
        requests:
        - date: 1550300604712
          headers:
            Accept:
            - application/json
            - application/xml
            Connection:
            - close
            Content-Type:
            - application/json
          path: /basket1/data
          method: POST
          query: name=basket1&version=12
          body: user=abc_test&status=200
          content_length: 24
        - date: 1550300604712
          headers:
            Accept:
            - application/json
            - application/xml
            Connection:
            - close
            Content-Type:
            - application/json
          path: /basket1/data
          method: POST
          query: name=basket1&version=12
          body: user=abc_test&status=200
          content_length: 24
      properties:
        count:
          description: Current number of collected requests hold by basket; not present
            if query is applied
          example: 200
          title: count
          type: integer
        has_more:
          description: Indicates if there are more requests collected by basket to
            fetch
          example: true
          title: has_more
          type: boolean
        requests:
          description: Collection of collected requests
          items:
            $ref: '#/components/schemas/Request'
          title: requests
          type: array
        total_count:
          description: Total number of all requests passed through this basket; not
            present if query is applied
          example: 3023
          title: total_count
          type: integer
      required:
      - has_more
      - requests
      title: Requests
      type: object
    Response:
      example:
        headers:
          Accept:
          - application/json
          - application/xml
          Connection:
          - close
          Content-Type:
          - application/json
        is_template: false
        body: Success
        status: 200
      properties:
        body:
          description: Content of response body
          example: Success
          title: body
          type: string
        headers:
          additionalProperties:
            description: Collection of header values
            items:
              type: string
            type: array
          description: "Map of HTTP headers, key represents name, value is array of\
            \ values"
          example:
            Accept:
            - application/json
            - application/xml
            Connection:
            - close
            Content-Type:
            - application/json
          title: headers
          type: object
        is_template:
          description: |
            If set to `true` the body is treated as [HTML template](https://golang.org/pkg/html/template) that accepts
            input from request parameters.
          example: false
          title: is_template
          type: boolean
        status:
          description: The HTTP status code to reply with
          example: 200
          title: status
          type: integer
      title: Response
      type: object
    ServiceStats:
      example:
        requests_count: 5120
        requests_total_count: 21847
        baskets_count: 28
        top_baskets_size:
        - requests_count: 62
          requests_total_count: 315
          last_request_date: 1550106301288
          name: basket22
        - requests_count: 62
          requests_total_count: 315
          last_request_date: 1550106301288
          name: basket22
        empty_baskets_count: 12
        avg_basket_size: 217
        max_basket_size: 1027
        top_baskets_recent:
        - requests_count: 62
          requests_total_count: 315
          last_request_date: 1550106301288
          name: basket22
        - requests_count: 62
          requests_total_count: 315
          last_request_date: 1550106301288
          name: basket22
      properties:
        avg_basket_size:
          description: "Average size of a basket in the system, empty baskets are\
            \ not taken into account"
          example: 217
          title: avg_basket_size
          type: integer
        baskets_count:
          description: Total number of baskets managed by service
          example: 28
          title: baskets_count
          type: integer
        empty_baskets_count:
          description: Number of empty baskets
          example: 12
          title: empty_baskets_count
          type: integer
        max_basket_size:
          description: Size of the biggest basket that processed the top most number
            of HTTP requests
          example: 1027
          title: max_basket_size
          type: integer
        requests_count:
          description: Number of HTTP requests currently stored by service
          example: 5120
          title: requests_count
          type: integer
        requests_total_count:
          description: Total number of HTTP requests processed by service
          example: 21847
          title: requests_total_count
          type: integer
        top_baskets_recent:
          description: Collection of top baskets recently active
          items:
            $ref: '#/components/schemas/BasketInfo'
          title: top_baskets_recent
          type: array
        top_baskets_size:
          description: Collection of top basket by size
          items:
            $ref: '#/components/schemas/BasketInfo'
          title: top_baskets_size
          type: array
      title: ServiceStats
      type: object
    Token:
      example:
        token: MJeIzgE1D6aze...
      properties:
        token:
          description: "Secure token to manage the basket, generated by system"
          example: MJeIzgE1D6aze...
          title: token
          type: string
      required:
      - token
      title: Token
      type: object
    Version:
      example:
        commit_short: 4cc0843
        commit: 4cc08434223ff04fbe2e45f2f6eeb9b0a39a279e
        name: request-baskets
        source_code: https://github.com/darklynx/request-baskets
        version: v1.0.0
      properties:
        commit:
          description: Git commit this service is build from
          example: 4cc08434223ff04fbe2e45f2f6eeb9b0a39a279e
          title: commit
          type: string
        commit_short:
          description: Short form of git commit this service is build from
          example: 4cc0843
          title: commit_short
          type: string
        name:
          description: Service name
          example: request-baskets
          title: name
          type: string
        source_code:
          description: URL of the source code repository
          example: https://github.com/darklynx/request-baskets
          title: source_code
          type: string
        version:
          description: Service version
          example: v1.0.0
          title: version
          type: string
      title: Version
      type: object
  securitySchemes:
    basket_token:
      description: Basket assigned secure token
      in: header
      name: Authorization
      type: apiKey
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_basket_token
    service_token:
      description: Service master token
      in: header
      name: Authorization
      type: apiKey
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_service_token
x-original-swagger-version: "2.0"
