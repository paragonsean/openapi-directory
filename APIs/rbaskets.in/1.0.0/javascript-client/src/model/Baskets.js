/**
 * Request Baskets API
 * RESTful API of [Request Baskets](https://rbaskets.in) service.  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful API or web UI.  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Baskets model module.
 * @module model/Baskets
 * @version 1.0.0
 */
class Baskets {
    /**
     * Constructs a new <code>Baskets</code>.
     * @alias module:model/Baskets
     * @param hasMore {Boolean} Indicates if there are more baskets to fetch
     * @param names {Array.<String>} Collection of basket names
     */
    constructor(hasMore, names) { 
        
        Baskets.initialize(this, hasMore, names);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, hasMore, names) { 
        obj['has_more'] = hasMore;
        obj['names'] = names;
    }

    /**
     * Constructs a <code>Baskets</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Baskets} obj Optional instance to populate.
     * @return {module:model/Baskets} The populated <code>Baskets</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Baskets();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('has_more')) {
                obj['has_more'] = ApiClient.convertToType(data['has_more'], 'Boolean');
            }
            if (data.hasOwnProperty('names')) {
                obj['names'] = ApiClient.convertToType(data['names'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Baskets</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Baskets</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Baskets.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['names'])) {
            throw new Error("Expected the field `names` to be an array in the JSON data but got " + data['names']);
        }

        return true;
    }


}

Baskets.RequiredProperties = ["has_more", "names"];

/**
 * Total number of baskets in the system; not present if query is applied
 * @member {Number} count
 */
Baskets.prototype['count'] = undefined;

/**
 * Indicates if there are more baskets to fetch
 * @member {Boolean} has_more
 */
Baskets.prototype['has_more'] = undefined;

/**
 * Collection of basket names
 * @member {Array.<String>} names
 */
Baskets.prototype['names'] = undefined;






export default Baskets;

