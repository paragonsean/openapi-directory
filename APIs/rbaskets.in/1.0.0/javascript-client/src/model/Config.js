/**
 * Request Baskets API
 * RESTful API of [Request Baskets](https://rbaskets.in) service.  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful API or web UI.  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Config model module.
 * @module model/Config
 * @version 1.0.0
 */
class Config {
    /**
     * Constructs a new <code>Config</code>.
     * @alias module:model/Config
     */
    constructor() { 
        
        Config.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Config</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Config} obj Optional instance to populate.
     * @return {module:model/Config} The populated <code>Config</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Config();

            if (data.hasOwnProperty('capacity')) {
                obj['capacity'] = ApiClient.convertToType(data['capacity'], 'Number');
            }
            if (data.hasOwnProperty('expand_path')) {
                obj['expand_path'] = ApiClient.convertToType(data['expand_path'], 'Boolean');
            }
            if (data.hasOwnProperty('forward_url')) {
                obj['forward_url'] = ApiClient.convertToType(data['forward_url'], 'String');
            }
            if (data.hasOwnProperty('insecure_tls')) {
                obj['insecure_tls'] = ApiClient.convertToType(data['insecure_tls'], 'Boolean');
            }
            if (data.hasOwnProperty('proxy_response')) {
                obj['proxy_response'] = ApiClient.convertToType(data['proxy_response'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Config</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Config</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['forward_url'] && !(typeof data['forward_url'] === 'string' || data['forward_url'] instanceof String)) {
            throw new Error("Expected the field `forward_url` to be a primitive type in the JSON string but got " + data['forward_url']);
        }

        return true;
    }


}



/**
 * Baskets capacity, defines maximum number of requests to store
 * @member {Number} capacity
 */
Config.prototype['capacity'] = undefined;

/**
 * If set to `true` the forward URL path will be expanded when original HTTP request contains compound path.
 * @member {Boolean} expand_path
 */
Config.prototype['expand_path'] = undefined;

/**
 * URL to forward all incoming requests of the basket, `empty` value disables forwarding
 * @member {String} forward_url
 */
Config.prototype['forward_url'] = undefined;

/**
 * If set to `true` the certificate verification will be disabled if forward URL indicates HTTPS scheme. **Warning:** enabling this feature has known security implications. 
 * @member {Boolean} insecure_tls
 */
Config.prototype['insecure_tls'] = undefined;

/**
 * If set to `true` this basket behaves as a full proxy: responses from underlying service configured in `forward_url` are passed back to clients of original requests. The configuration of basket responses is ignored in this case. 
 * @member {Boolean} proxy_response
 */
Config.prototype['proxy_response'] = undefined;






export default Config;

