/**
 * Request Baskets API
 * RESTful API of [Request Baskets](https://rbaskets.in) service.  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful API or web UI.  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BasketInfo model module.
 * @module model/BasketInfo
 * @version 1.0.0
 */
class BasketInfo {
    /**
     * Constructs a new <code>BasketInfo</code>.
     * @alias module:model/BasketInfo
     */
    constructor() { 
        
        BasketInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BasketInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BasketInfo} obj Optional instance to populate.
     * @return {module:model/BasketInfo} The populated <code>BasketInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BasketInfo();

            if (data.hasOwnProperty('last_request_date')) {
                obj['last_request_date'] = ApiClient.convertToType(data['last_request_date'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('requests_count')) {
                obj['requests_count'] = ApiClient.convertToType(data['requests_count'], 'Number');
            }
            if (data.hasOwnProperty('requests_total_count')) {
                obj['requests_total_count'] = ApiClient.convertToType(data['requests_total_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BasketInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BasketInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Date and time of last request processed through this basket in Unix time ms. format (number of milliseconds elapsed since January 1, 1970 UTC).  If no requests were collected by this basket `0` is returned. 
 * @member {Number} last_request_date
 */
BasketInfo.prototype['last_request_date'] = undefined;

/**
 * Basket name
 * @member {String} name
 */
BasketInfo.prototype['name'] = undefined;

/**
 * Current number of collected HTTP requests held by basket
 * @member {Number} requests_count
 */
BasketInfo.prototype['requests_count'] = undefined;

/**
 * Total number of all HTTP requests passed through this basket
 * @member {Number} requests_total_count
 */
BasketInfo.prototype['requests_total_count'] = undefined;






export default BasketInfo;

