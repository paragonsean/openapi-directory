/**
 * Request Baskets API
 * RESTful API of [Request Baskets](https://rbaskets.in) service.  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful API or web UI.  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Response from '../model/Response';

/**
* Responses service.
* @module api/ResponsesApi
* @version 1.0.0
*/
export default class ResponsesApi {

    /**
    * Constructs a new ResponsesApi. 
    * @alias module:api/ResponsesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiBasketsNameResponsesMethodGet operation.
     * @callback module:api/ResponsesApi~apiBasketsNameResponsesMethodGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get response settings
     * Retrieves information about configured response of the basket. Service will reply with this response to any HTTP request sent to the basket with appropriate HTTP method.  If nothing is configured, the default response is HTTP 200 - OK with empty content. 
     * @param {String} name The basket name
     * @param {module:model/String} method The HTTP method this response is configured for
     * @param {module:api/ResponsesApi~apiBasketsNameResponsesMethodGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    apiBasketsNameResponsesMethodGet(name, method, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling apiBasketsNameResponsesMethodGet");
      }
      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling apiBasketsNameResponsesMethodGet");
      }

      let pathParams = {
        'name': name,
        'method': method
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basket_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/api/baskets/{name}/responses/{method}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBasketsNameResponsesMethodPut operation.
     * @callback module:api/ResponsesApi~apiBasketsNameResponsesMethodPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update response settings
     * Allows to configure HTTP response of this basket. The service will reply with configured response to any HTTP request sent to the basket with appropriate HTTP method.  If nothing is configured, the default response is HTTP 200 - OK with empty content. 
     * @param {String} name The basket name
     * @param {module:model/String} method The HTTP method this response is configured for
     * @param {module:model/Response} response HTTP response configuration
     * @param {module:api/ResponsesApi~apiBasketsNameResponsesMethodPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiBasketsNameResponsesMethodPut(name, method, response, callback) {
      let postBody = response;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling apiBasketsNameResponsesMethodPut");
      }
      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling apiBasketsNameResponsesMethodPut");
      }
      // verify the required parameter 'response' is set
      if (response === undefined || response === null) {
        throw new Error("Missing the required parameter 'response' when calling apiBasketsNameResponsesMethodPut");
      }

      let pathParams = {
        'name': name,
        'method': method
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basket_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/baskets/{name}/responses/{method}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the basketsNameResponsesMethodGet operation.
     * @callback module:api/ResponsesApi~basketsNameResponsesMethodGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get response settings
     * Retrieves information about configured response of the basket. Service will reply with this response to any HTTP request sent to the basket with appropriate HTTP method.  If nothing is configured, the default response is HTTP 200 - OK with empty content. 
     * @param {String} name The basket name
     * @param {module:model/String} method The HTTP method this response is configured for
     * @param {module:api/ResponsesApi~basketsNameResponsesMethodGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    basketsNameResponsesMethodGet(name, method, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling basketsNameResponsesMethodGet");
      }
      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling basketsNameResponsesMethodGet");
      }

      let pathParams = {
        'name': name,
        'method': method
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basket_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/baskets/{name}/responses/{method}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the basketsNameResponsesMethodPut operation.
     * @callback module:api/ResponsesApi~basketsNameResponsesMethodPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update response settings
     * Allows to configure HTTP response of this basket. The service will reply with configured response to any HTTP request sent to the basket with appropriate HTTP method.  If nothing is configured, the default response is HTTP 200 - OK with empty content. 
     * @param {String} name The basket name
     * @param {module:model/String} method The HTTP method this response is configured for
     * @param {module:model/Response} response HTTP response configuration
     * @param {module:api/ResponsesApi~basketsNameResponsesMethodPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    basketsNameResponsesMethodPut(name, method, response, callback) {
      let postBody = response;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling basketsNameResponsesMethodPut");
      }
      // verify the required parameter 'method' is set
      if (method === undefined || method === null) {
        throw new Error("Missing the required parameter 'method' when calling basketsNameResponsesMethodPut");
      }
      // verify the required parameter 'response' is set
      if (response === undefined || response === null) {
        throw new Error("Missing the required parameter 'response' when calling basketsNameResponsesMethodPut");
      }

      let pathParams = {
        'name': name,
        'method': method
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basket_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/baskets/{name}/responses/{method}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
