/**
 * Request Baskets API
 * RESTful API of [Request Baskets](https://rbaskets.in) service.  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful API or web UI.  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Requests from '../model/Requests';

/**
* Requests service.
* @module api/RequestsApi
* @version 1.0.0
*/
export default class RequestsApi {

    /**
    * Constructs a new RequestsApi. 
    * @alias module:api/RequestsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiBasketsNameRequestsDelete operation.
     * @callback module:api/RequestsApi~apiBasketsNameRequestsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all requests
     * Deletes all requests collected by this basket.
     * @param {String} name The basket name
     * @param {module:api/RequestsApi~apiBasketsNameRequestsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiBasketsNameRequestsDelete(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling apiBasketsNameRequestsDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basket_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/baskets/{name}/requests', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBasketsNameRequestsGet operation.
     * @callback module:api/RequestsApi~apiBasketsNameRequestsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Requests} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collected requests
     * Fetches collection of requests collected by this basket.
     * @param {String} name The basket name
     * @param {Object} opts Optional parameters
     * @param {Number} [max] Maximum number of requests to return; default 20
     * @param {Number} [skip] Number of requests to skip; default 0
     * @param {String} [q] Query string to filter result, only requests that match the query will be included in response
     * @param {module:model/String} [_in] Defines what is taken into account when filtering is applied: `body` - search in content body of collected requests, `query` - search among query parameters of collected requests, `headers` - search among request header values, `any` - search anywhere; default `any` 
     * @param {module:api/RequestsApi~apiBasketsNameRequestsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Requests}
     */
    apiBasketsNameRequestsGet(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling apiBasketsNameRequestsGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'max': opts['max'],
        'skip': opts['skip'],
        'q': opts['q'],
        'in': opts['_in']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basket_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Requests;
      return this.apiClient.callApi(
        '/api/baskets/{name}/requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the basketsNameRequestsDelete operation.
     * @callback module:api/RequestsApi~basketsNameRequestsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all requests
     * Deletes all requests collected by this basket.
     * @param {String} name The basket name
     * @param {module:api/RequestsApi~basketsNameRequestsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    basketsNameRequestsDelete(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling basketsNameRequestsDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basket_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/baskets/{name}/requests', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the basketsNameRequestsGet operation.
     * @callback module:api/RequestsApi~basketsNameRequestsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Requests} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get collected requests
     * Fetches collection of requests collected by this basket.
     * @param {String} name The basket name
     * @param {Object} opts Optional parameters
     * @param {Number} [max] Maximum number of requests to return; default 20
     * @param {Number} [skip] Number of requests to skip; default 0
     * @param {String} [q] Query string to filter result, only requests that match the query will be included in response
     * @param {module:model/String} [_in] Defines what is taken into account when filtering is applied: `body` - search in content body of collected requests, `query` - search among query parameters of collected requests, `headers` - search among request header values, `any` - search anywhere; default `any` 
     * @param {module:api/RequestsApi~basketsNameRequestsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Requests}
     */
    basketsNameRequestsGet(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling basketsNameRequestsGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'max': opts['max'],
        'skip': opts['skip'],
        'q': opts['q'],
        'in': opts['_in']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basket_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Requests;
      return this.apiClient.callApi(
        '/baskets/{name}/requests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
