/**
 * Request Baskets API
 * RESTful API of [Request Baskets](https://rbaskets.in) service.  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful API or web UI.  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Baskets from '../model/Baskets';
import Config from '../model/Config';
import ServiceStats from '../model/ServiceStats';
import Token from '../model/Token';

/**
* Baskets service.
* @module api/BasketsApi
* @version 1.0.0
*/
export default class BasketsApi {

    /**
    * Constructs a new BasketsApi. 
    * @alias module:api/BasketsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiBasketsGet operation.
     * @callback module:api/BasketsApi~apiBasketsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Baskets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get baskets
     * Fetches a list of basket names managed by service. Require master token.
     * @param {Object} opts Optional parameters
     * @param {Number} [max] Maximum number of basket names to return; default 20
     * @param {Number} [skip] Number of basket names to skip; default 0
     * @param {String} [q] Query string to filter result, only those basket names that match the query will be included in response
     * @param {module:api/BasketsApi~apiBasketsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Baskets}
     */
    apiBasketsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'skip': opts['skip'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['service_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Baskets;
      return this.apiClient.callApi(
        '/api/baskets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBasketsNameDelete operation.
     * @callback module:api/BasketsApi~apiBasketsNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete basket
     * Permanently deletes this basket and all collected requests.
     * @param {String} name The basket name
     * @param {module:api/BasketsApi~apiBasketsNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiBasketsNameDelete(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling apiBasketsNameDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basket_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/baskets/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBasketsNameGet operation.
     * @callback module:api/BasketsApi~apiBasketsNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Config} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get basket settings
     * Retrieves configuration settings of this basket.
     * @param {String} name The basket name
     * @param {module:api/BasketsApi~apiBasketsNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Config}
     */
    apiBasketsNameGet(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling apiBasketsNameGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basket_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Config;
      return this.apiClient.callApi(
        '/api/baskets/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBasketsNamePost operation.
     * @callback module:api/BasketsApi~apiBasketsNamePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Token} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new basket
     * Creates a new basket with this name.
     * @param {String} name The name of new basket
     * @param {Object} opts Optional parameters
     * @param {module:model/Config} [config] Basket configuration
     * @param {module:api/BasketsApi~apiBasketsNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Token}
     */
    apiBasketsNamePost(name, opts, callback) {
      opts = opts || {};
      let postBody = opts['config'];
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling apiBasketsNamePost");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/api/baskets/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBasketsNamePut operation.
     * @callback module:api/BasketsApi~apiBasketsNamePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update basket settings
     * Updates configuration settings of this basket.  Special configuration parameters for request forwarding:   * `insecure_tls` controls certificate verification when forwarding requests. Setting this parameter to `true`   allows to forward collected HTTP requests via HTTPS protocol even if the forward end-point is configured with   self-signed TLS/SSL certificate. **Warning:** enabling this feature has known security implications.   * `expand_path` changes the logic of constructing taget URL when forwarding requests. If this parameter is   set to `true` the forward URL path will be expanded when original HTTP request contains compound path. For   example, a basket with name **server1** is configured to forward all requests to `http://server1.intranet:8001/myservice`   and it has received an HTTP request like `GET http://baskets.example.com/server1/component/123/events?status=OK`   then depending on `expand_path` settings the request will be forwarded to:     * `true` => `GET http://server1.intranet:8001/myservice/component/123/events?status=OK`     * `false` => `GET http://server1.intranet:8001/myservice?status=OK` 
     * @param {String} name The basket name
     * @param {module:model/Config} config New configuration to apply
     * @param {module:api/BasketsApi~apiBasketsNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiBasketsNamePut(name, config, callback) {
      let postBody = config;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling apiBasketsNamePut");
      }
      // verify the required parameter 'config' is set
      if (config === undefined || config === null) {
        throw new Error("Missing the required parameter 'config' when calling apiBasketsNamePut");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basket_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/baskets/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiStatsGet operation.
     * @callback module:api/BasketsApi~apiStatsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServiceStats} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get baskets statistics
     * Get service statistics about baskets and collected HTTP requests. Require master token.
     * @param {Object} opts Optional parameters
     * @param {Number} [max] Maximum number of basket names to return; default 5
     * @param {module:api/BasketsApi~apiStatsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServiceStats}
     */
    apiStatsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['service_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServiceStats;
      return this.apiClient.callApi(
        '/api/stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the basketsGet operation.
     * @callback module:api/BasketsApi~basketsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Baskets} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get baskets
     * Fetches a list of basket names managed by service. Require master token.
     * @param {Object} opts Optional parameters
     * @param {Number} [max] Maximum number of basket names to return; default 20
     * @param {Number} [skip] Number of basket names to skip; default 0
     * @param {String} [q] Query string to filter result, only those basket names that match the query will be included in response
     * @param {module:api/BasketsApi~basketsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Baskets}
     */
    basketsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'skip': opts['skip'],
        'q': opts['q']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['service_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Baskets;
      return this.apiClient.callApi(
        '/baskets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the basketsNameDelete operation.
     * @callback module:api/BasketsApi~basketsNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete basket
     * Permanently deletes this basket and all collected requests.
     * @param {String} name The basket name
     * @param {module:api/BasketsApi~basketsNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    basketsNameDelete(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling basketsNameDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basket_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/baskets/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the basketsNameGet operation.
     * @callback module:api/BasketsApi~basketsNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Config} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get basket settings
     * Retrieves configuration settings of this basket.
     * @param {String} name The basket name
     * @param {module:api/BasketsApi~basketsNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Config}
     */
    basketsNameGet(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling basketsNameGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basket_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Config;
      return this.apiClient.callApi(
        '/baskets/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the basketsNamePost operation.
     * @callback module:api/BasketsApi~basketsNamePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Token} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new basket
     * Creates a new basket with this name.
     * @param {String} name The name of new basket
     * @param {Object} opts Optional parameters
     * @param {module:model/Config} [config] Basket configuration
     * @param {module:api/BasketsApi~basketsNamePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Token}
     */
    basketsNamePost(name, opts, callback) {
      opts = opts || {};
      let postBody = opts['config'];
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling basketsNamePost");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/baskets/{name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the basketsNamePut operation.
     * @callback module:api/BasketsApi~basketsNamePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update basket settings
     * Updates configuration settings of this basket.  Special configuration parameters for request forwarding:   * `insecure_tls` controls certificate verification when forwarding requests. Setting this parameter to `true`   allows to forward collected HTTP requests via HTTPS protocol even if the forward end-point is configured with   self-signed TLS/SSL certificate. **Warning:** enabling this feature has known security implications.   * `expand_path` changes the logic of constructing taget URL when forwarding requests. If this parameter is   set to `true` the forward URL path will be expanded when original HTTP request contains compound path. For   example, a basket with name **server1** is configured to forward all requests to `http://server1.intranet:8001/myservice`   and it has received an HTTP request like `GET http://baskets.example.com/server1/component/123/events?status=OK`   then depending on `expand_path` settings the request will be forwarded to:     * `true` => `GET http://server1.intranet:8001/myservice/component/123/events?status=OK`     * `false` => `GET http://server1.intranet:8001/myservice?status=OK` 
     * @param {String} name The basket name
     * @param {module:model/Config} config New configuration to apply
     * @param {module:api/BasketsApi~basketsNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    basketsNamePut(name, config, callback) {
      let postBody = config;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling basketsNamePut");
      }
      // verify the required parameter 'config' is set
      if (config === undefined || config === null) {
        throw new Error("Missing the required parameter 'config' when calling basketsNamePut");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basket_token'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/baskets/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
