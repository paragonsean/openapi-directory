/*
 * Request Baskets API
 * RESTful API of [Request Baskets](https://rbaskets.in) service.  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful API or web UI.  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BasketInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:30.520850-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BasketInfo {
  public static final String SERIALIZED_NAME_LAST_REQUEST_DATE = "last_request_date";
  @SerializedName(SERIALIZED_NAME_LAST_REQUEST_DATE)
  private Long lastRequestDate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REQUESTS_COUNT = "requests_count";
  @SerializedName(SERIALIZED_NAME_REQUESTS_COUNT)
  private Integer requestsCount;

  public static final String SERIALIZED_NAME_REQUESTS_TOTAL_COUNT = "requests_total_count";
  @SerializedName(SERIALIZED_NAME_REQUESTS_TOTAL_COUNT)
  private Integer requestsTotalCount;

  public BasketInfo() {
  }

  public BasketInfo lastRequestDate(Long lastRequestDate) {
    this.lastRequestDate = lastRequestDate;
    return this;
  }

  /**
   * Date and time of last request processed through this basket in Unix time ms. format (number of milliseconds elapsed since January 1, 1970 UTC).  If no requests were collected by this basket &#x60;0&#x60; is returned. 
   * @return lastRequestDate
   */
  @javax.annotation.Nullable
  public Long getLastRequestDate() {
    return lastRequestDate;
  }

  public void setLastRequestDate(Long lastRequestDate) {
    this.lastRequestDate = lastRequestDate;
  }


  public BasketInfo name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Basket name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public BasketInfo requestsCount(Integer requestsCount) {
    this.requestsCount = requestsCount;
    return this;
  }

  /**
   * Current number of collected HTTP requests held by basket
   * @return requestsCount
   */
  @javax.annotation.Nullable
  public Integer getRequestsCount() {
    return requestsCount;
  }

  public void setRequestsCount(Integer requestsCount) {
    this.requestsCount = requestsCount;
  }


  public BasketInfo requestsTotalCount(Integer requestsTotalCount) {
    this.requestsTotalCount = requestsTotalCount;
    return this;
  }

  /**
   * Total number of all HTTP requests passed through this basket
   * @return requestsTotalCount
   */
  @javax.annotation.Nullable
  public Integer getRequestsTotalCount() {
    return requestsTotalCount;
  }

  public void setRequestsTotalCount(Integer requestsTotalCount) {
    this.requestsTotalCount = requestsTotalCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BasketInfo basketInfo = (BasketInfo) o;
    return Objects.equals(this.lastRequestDate, basketInfo.lastRequestDate) &&
        Objects.equals(this.name, basketInfo.name) &&
        Objects.equals(this.requestsCount, basketInfo.requestsCount) &&
        Objects.equals(this.requestsTotalCount, basketInfo.requestsTotalCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastRequestDate, name, requestsCount, requestsTotalCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BasketInfo {\n");
    sb.append("    lastRequestDate: ").append(toIndentedString(lastRequestDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    requestsCount: ").append(toIndentedString(requestsCount)).append("\n");
    sb.append("    requestsTotalCount: ").append(toIndentedString(requestsTotalCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("last_request_date");
    openapiFields.add("name");
    openapiFields.add("requests_count");
    openapiFields.add("requests_total_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BasketInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BasketInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BasketInfo is not found in the empty JSON string", BasketInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BasketInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BasketInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BasketInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BasketInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BasketInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BasketInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BasketInfo>() {
           @Override
           public void write(JsonWriter out, BasketInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BasketInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BasketInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BasketInfo
   * @throws IOException if the JSON string is invalid with respect to BasketInfo
   */
  public static BasketInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BasketInfo.class);
  }

  /**
   * Convert an instance of BasketInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

