/*
 * Request Baskets API
 * RESTful API of [Request Baskets](https://rbaskets.in) service.  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful API or web UI.  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Baskets;
import org.openapitools.client.model.Config;
import org.openapitools.client.model.ServiceStats;
import org.openapitools.client.model.Token;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BasketsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BasketsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BasketsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiBasketsGet
     * @param max Maximum number of basket names to return; default 20 (optional)
     * @param skip Number of basket names to skip; default 0 (optional)
     * @param q Query string to filter result, only those basket names that match the query will be included in response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of available baskets. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. No baskets available for specified limits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing master token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBasketsGetCall(Integer max, Integer skip, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/baskets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "service_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiBasketsGetValidateBeforeCall(Integer max, Integer skip, String q, final ApiCallback _callback) throws ApiException {
        return apiBasketsGetCall(max, skip, q, _callback);

    }

    /**
     * Get baskets
     * Fetches a list of basket names managed by service. Require master token.
     * @param max Maximum number of basket names to return; default 20 (optional)
     * @param skip Number of basket names to skip; default 0 (optional)
     * @param q Query string to filter result, only those basket names that match the query will be included in response (optional)
     * @return Baskets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of available baskets. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. No baskets available for specified limits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing master token </td><td>  -  </td></tr>
     </table>
     */
    public Baskets apiBasketsGet(Integer max, Integer skip, String q) throws ApiException {
        ApiResponse<Baskets> localVarResp = apiBasketsGetWithHttpInfo(max, skip, q);
        return localVarResp.getData();
    }

    /**
     * Get baskets
     * Fetches a list of basket names managed by service. Require master token.
     * @param max Maximum number of basket names to return; default 20 (optional)
     * @param skip Number of basket names to skip; default 0 (optional)
     * @param q Query string to filter result, only those basket names that match the query will be included in response (optional)
     * @return ApiResponse&lt;Baskets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of available baskets. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. No baskets available for specified limits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing master token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Baskets> apiBasketsGetWithHttpInfo(Integer max, Integer skip, String q) throws ApiException {
        okhttp3.Call localVarCall = apiBasketsGetValidateBeforeCall(max, skip, q, null);
        Type localVarReturnType = new TypeToken<Baskets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get baskets (asynchronously)
     * Fetches a list of basket names managed by service. Require master token.
     * @param max Maximum number of basket names to return; default 20 (optional)
     * @param skip Number of basket names to skip; default 0 (optional)
     * @param q Query string to filter result, only those basket names that match the query will be included in response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of available baskets. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. No baskets available for specified limits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing master token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBasketsGetAsync(Integer max, Integer skip, String q, final ApiCallback<Baskets> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiBasketsGetValidateBeforeCall(max, skip, q, _callback);
        Type localVarReturnType = new TypeToken<Baskets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiBasketsNameDelete
     * @param name The basket name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket is deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBasketsNameDeleteCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/baskets/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basket_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiBasketsNameDeleteValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling apiBasketsNameDelete(Async)");
        }

        return apiBasketsNameDeleteCall(name, _callback);

    }

    /**
     * Delete basket
     * Permanently deletes this basket and all collected requests.
     * @param name The basket name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket is deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     */
    public void apiBasketsNameDelete(String name) throws ApiException {
        apiBasketsNameDeleteWithHttpInfo(name);
    }

    /**
     * Delete basket
     * Permanently deletes this basket and all collected requests.
     * @param name The basket name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket is deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiBasketsNameDeleteWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = apiBasketsNameDeleteValidateBeforeCall(name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete basket (asynchronously)
     * Permanently deletes this basket and all collected requests.
     * @param name The basket name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket is deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBasketsNameDeleteAsync(String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiBasketsNameDeleteValidateBeforeCall(name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiBasketsNameGet
     * @param name The basket name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns basket configuration </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBasketsNameGetCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/baskets/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basket_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiBasketsNameGetValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling apiBasketsNameGet(Async)");
        }

        return apiBasketsNameGetCall(name, _callback);

    }

    /**
     * Get basket settings
     * Retrieves configuration settings of this basket.
     * @param name The basket name (required)
     * @return Config
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns basket configuration </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     */
    public Config apiBasketsNameGet(String name) throws ApiException {
        ApiResponse<Config> localVarResp = apiBasketsNameGetWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Get basket settings
     * Retrieves configuration settings of this basket.
     * @param name The basket name (required)
     * @return ApiResponse&lt;Config&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns basket configuration </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Config> apiBasketsNameGetWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = apiBasketsNameGetValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Config>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get basket settings (asynchronously)
     * Retrieves configuration settings of this basket.
     * @param name The basket name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns basket configuration </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBasketsNameGetAsync(String name, final ApiCallback<Config> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiBasketsNameGetValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Config>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiBasketsNamePost
     * @param name The name of new basket (required)
     * @param config Basket configuration (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Indicates that basket is successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into basket configuration object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Indicates that basket name conflicts with reserved paths; e.g. &#x60;baskets&#x60;, &#x60;web&#x60;, etc. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Indicates that basket with such name already exists </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Basket configuration is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBasketsNamePostCall(String name, Config config, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = config;

        // create path and map variables
        String localVarPath = "/api/baskets/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiBasketsNamePostValidateBeforeCall(String name, Config config, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling apiBasketsNamePost(Async)");
        }

        return apiBasketsNamePostCall(name, config, _callback);

    }

    /**
     * Create new basket
     * Creates a new basket with this name.
     * @param name The name of new basket (required)
     * @param config Basket configuration (optional)
     * @return Token
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Indicates that basket is successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into basket configuration object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Indicates that basket name conflicts with reserved paths; e.g. &#x60;baskets&#x60;, &#x60;web&#x60;, etc. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Indicates that basket with such name already exists </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Basket configuration is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public Token apiBasketsNamePost(String name, Config config) throws ApiException {
        ApiResponse<Token> localVarResp = apiBasketsNamePostWithHttpInfo(name, config);
        return localVarResp.getData();
    }

    /**
     * Create new basket
     * Creates a new basket with this name.
     * @param name The name of new basket (required)
     * @param config Basket configuration (optional)
     * @return ApiResponse&lt;Token&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Indicates that basket is successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into basket configuration object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Indicates that basket name conflicts with reserved paths; e.g. &#x60;baskets&#x60;, &#x60;web&#x60;, etc. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Indicates that basket with such name already exists </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Basket configuration is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Token> apiBasketsNamePostWithHttpInfo(String name, Config config) throws ApiException {
        okhttp3.Call localVarCall = apiBasketsNamePostValidateBeforeCall(name, config, null);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new basket (asynchronously)
     * Creates a new basket with this name.
     * @param name The name of new basket (required)
     * @param config Basket configuration (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Indicates that basket is successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into basket configuration object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Indicates that basket name conflicts with reserved paths; e.g. &#x60;baskets&#x60;, &#x60;web&#x60;, etc. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Indicates that basket with such name already exists </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Basket configuration is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBasketsNamePostAsync(String name, Config config, final ApiCallback<Token> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiBasketsNamePostValidateBeforeCall(name, config, _callback);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiBasketsNamePut
     * @param name The basket name (required)
     * @param config New configuration to apply (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket configuration is updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into basket configuration object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Basket configuration is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBasketsNamePutCall(String name, Config config, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = config;

        // create path and map variables
        String localVarPath = "/api/baskets/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basket_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiBasketsNamePutValidateBeforeCall(String name, Config config, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling apiBasketsNamePut(Async)");
        }

        // verify the required parameter 'config' is set
        if (config == null) {
            throw new ApiException("Missing the required parameter 'config' when calling apiBasketsNamePut(Async)");
        }

        return apiBasketsNamePutCall(name, config, _callback);

    }

    /**
     * Update basket settings
     * Updates configuration settings of this basket.  Special configuration parameters for request forwarding:   * &#x60;insecure_tls&#x60; controls certificate verification when forwarding requests. Setting this parameter to &#x60;true&#x60;   allows to forward collected HTTP requests via HTTPS protocol even if the forward end-point is configured with   self-signed TLS/SSL certificate. **Warning:** enabling this feature has known security implications.   * &#x60;expand_path&#x60; changes the logic of constructing taget URL when forwarding requests. If this parameter is   set to &#x60;true&#x60; the forward URL path will be expanded when original HTTP request contains compound path. For   example, a basket with name **server1** is configured to forward all requests to &#x60;http://server1.intranet:8001/myservice&#x60;   and it has received an HTTP request like &#x60;GET http://baskets.example.com/server1/component/123/events?status&#x3D;OK&#x60;   then depending on &#x60;expand_path&#x60; settings the request will be forwarded to:     * &#x60;true&#x60; &#x3D;&gt; &#x60;GET http://server1.intranet:8001/myservice/component/123/events?status&#x3D;OK&#x60;     * &#x60;false&#x60; &#x3D;&gt; &#x60;GET http://server1.intranet:8001/myservice?status&#x3D;OK&#x60; 
     * @param name The basket name (required)
     * @param config New configuration to apply (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket configuration is updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into basket configuration object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Basket configuration is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public void apiBasketsNamePut(String name, Config config) throws ApiException {
        apiBasketsNamePutWithHttpInfo(name, config);
    }

    /**
     * Update basket settings
     * Updates configuration settings of this basket.  Special configuration parameters for request forwarding:   * &#x60;insecure_tls&#x60; controls certificate verification when forwarding requests. Setting this parameter to &#x60;true&#x60;   allows to forward collected HTTP requests via HTTPS protocol even if the forward end-point is configured with   self-signed TLS/SSL certificate. **Warning:** enabling this feature has known security implications.   * &#x60;expand_path&#x60; changes the logic of constructing taget URL when forwarding requests. If this parameter is   set to &#x60;true&#x60; the forward URL path will be expanded when original HTTP request contains compound path. For   example, a basket with name **server1** is configured to forward all requests to &#x60;http://server1.intranet:8001/myservice&#x60;   and it has received an HTTP request like &#x60;GET http://baskets.example.com/server1/component/123/events?status&#x3D;OK&#x60;   then depending on &#x60;expand_path&#x60; settings the request will be forwarded to:     * &#x60;true&#x60; &#x3D;&gt; &#x60;GET http://server1.intranet:8001/myservice/component/123/events?status&#x3D;OK&#x60;     * &#x60;false&#x60; &#x3D;&gt; &#x60;GET http://server1.intranet:8001/myservice?status&#x3D;OK&#x60; 
     * @param name The basket name (required)
     * @param config New configuration to apply (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket configuration is updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into basket configuration object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Basket configuration is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiBasketsNamePutWithHttpInfo(String name, Config config) throws ApiException {
        okhttp3.Call localVarCall = apiBasketsNamePutValidateBeforeCall(name, config, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update basket settings (asynchronously)
     * Updates configuration settings of this basket.  Special configuration parameters for request forwarding:   * &#x60;insecure_tls&#x60; controls certificate verification when forwarding requests. Setting this parameter to &#x60;true&#x60;   allows to forward collected HTTP requests via HTTPS protocol even if the forward end-point is configured with   self-signed TLS/SSL certificate. **Warning:** enabling this feature has known security implications.   * &#x60;expand_path&#x60; changes the logic of constructing taget URL when forwarding requests. If this parameter is   set to &#x60;true&#x60; the forward URL path will be expanded when original HTTP request contains compound path. For   example, a basket with name **server1** is configured to forward all requests to &#x60;http://server1.intranet:8001/myservice&#x60;   and it has received an HTTP request like &#x60;GET http://baskets.example.com/server1/component/123/events?status&#x3D;OK&#x60;   then depending on &#x60;expand_path&#x60; settings the request will be forwarded to:     * &#x60;true&#x60; &#x3D;&gt; &#x60;GET http://server1.intranet:8001/myservice/component/123/events?status&#x3D;OK&#x60;     * &#x60;false&#x60; &#x3D;&gt; &#x60;GET http://server1.intranet:8001/myservice?status&#x3D;OK&#x60; 
     * @param name The basket name (required)
     * @param config New configuration to apply (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket configuration is updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into basket configuration object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Basket configuration is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBasketsNamePutAsync(String name, Config config, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiBasketsNamePutValidateBeforeCall(name, config, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiStatsGet
     * @param max Maximum number of basket names to return; default 5 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns service statistics. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing master token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiStatsGetCall(Integer max, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "service_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiStatsGetValidateBeforeCall(Integer max, final ApiCallback _callback) throws ApiException {
        return apiStatsGetCall(max, _callback);

    }

    /**
     * Get baskets statistics
     * Get service statistics about baskets and collected HTTP requests. Require master token.
     * @param max Maximum number of basket names to return; default 5 (optional)
     * @return ServiceStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns service statistics. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing master token </td><td>  -  </td></tr>
     </table>
     */
    public ServiceStats apiStatsGet(Integer max) throws ApiException {
        ApiResponse<ServiceStats> localVarResp = apiStatsGetWithHttpInfo(max);
        return localVarResp.getData();
    }

    /**
     * Get baskets statistics
     * Get service statistics about baskets and collected HTTP requests. Require master token.
     * @param max Maximum number of basket names to return; default 5 (optional)
     * @return ApiResponse&lt;ServiceStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns service statistics. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing master token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServiceStats> apiStatsGetWithHttpInfo(Integer max) throws ApiException {
        okhttp3.Call localVarCall = apiStatsGetValidateBeforeCall(max, null);
        Type localVarReturnType = new TypeToken<ServiceStats>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get baskets statistics (asynchronously)
     * Get service statistics about baskets and collected HTTP requests. Require master token.
     * @param max Maximum number of basket names to return; default 5 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns service statistics. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing master token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiStatsGetAsync(Integer max, final ApiCallback<ServiceStats> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiStatsGetValidateBeforeCall(max, _callback);
        Type localVarReturnType = new TypeToken<ServiceStats>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for basketsGet
     * @param max Maximum number of basket names to return; default 20 (optional)
     * @param skip Number of basket names to skip; default 0 (optional)
     * @param q Query string to filter result, only those basket names that match the query will be included in response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of available baskets. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. No baskets available for specified limits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing master token </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call basketsGetCall(Integer max, Integer skip, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/baskets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "service_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call basketsGetValidateBeforeCall(Integer max, Integer skip, String q, final ApiCallback _callback) throws ApiException {
        return basketsGetCall(max, skip, q, _callback);

    }

    /**
     * Get baskets
     * Fetches a list of basket names managed by service. Require master token.
     * @param max Maximum number of basket names to return; default 20 (optional)
     * @param skip Number of basket names to skip; default 0 (optional)
     * @param q Query string to filter result, only those basket names that match the query will be included in response (optional)
     * @return Baskets
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of available baskets. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. No baskets available for specified limits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing master token </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Baskets basketsGet(Integer max, Integer skip, String q) throws ApiException {
        ApiResponse<Baskets> localVarResp = basketsGetWithHttpInfo(max, skip, q);
        return localVarResp.getData();
    }

    /**
     * Get baskets
     * Fetches a list of basket names managed by service. Require master token.
     * @param max Maximum number of basket names to return; default 20 (optional)
     * @param skip Number of basket names to skip; default 0 (optional)
     * @param q Query string to filter result, only those basket names that match the query will be included in response (optional)
     * @return ApiResponse&lt;Baskets&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of available baskets. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. No baskets available for specified limits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing master token </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Baskets> basketsGetWithHttpInfo(Integer max, Integer skip, String q) throws ApiException {
        okhttp3.Call localVarCall = basketsGetValidateBeforeCall(max, skip, q, null);
        Type localVarReturnType = new TypeToken<Baskets>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get baskets (asynchronously)
     * Fetches a list of basket names managed by service. Require master token.
     * @param max Maximum number of basket names to return; default 20 (optional)
     * @param skip Number of basket names to skip; default 0 (optional)
     * @param q Query string to filter result, only those basket names that match the query will be included in response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of available baskets. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. No baskets available for specified limits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing master token </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call basketsGetAsync(Integer max, Integer skip, String q, final ApiCallback<Baskets> _callback) throws ApiException {

        okhttp3.Call localVarCall = basketsGetValidateBeforeCall(max, skip, q, _callback);
        Type localVarReturnType = new TypeToken<Baskets>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for basketsNameDelete
     * @param name The basket name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket is deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call basketsNameDeleteCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/baskets/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basket_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call basketsNameDeleteValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling basketsNameDelete(Async)");
        }

        return basketsNameDeleteCall(name, _callback);

    }

    /**
     * Delete basket
     * Permanently deletes this basket and all collected requests.
     * @param name The basket name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket is deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void basketsNameDelete(String name) throws ApiException {
        basketsNameDeleteWithHttpInfo(name);
    }

    /**
     * Delete basket
     * Permanently deletes this basket and all collected requests.
     * @param name The basket name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket is deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> basketsNameDeleteWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = basketsNameDeleteValidateBeforeCall(name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete basket (asynchronously)
     * Permanently deletes this basket and all collected requests.
     * @param name The basket name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket is deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call basketsNameDeleteAsync(String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = basketsNameDeleteValidateBeforeCall(name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for basketsNameGet
     * @param name The basket name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns basket configuration </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call basketsNameGetCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/baskets/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basket_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call basketsNameGetValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling basketsNameGet(Async)");
        }

        return basketsNameGetCall(name, _callback);

    }

    /**
     * Get basket settings
     * Retrieves configuration settings of this basket.
     * @param name The basket name (required)
     * @return Config
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns basket configuration </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Config basketsNameGet(String name) throws ApiException {
        ApiResponse<Config> localVarResp = basketsNameGetWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * Get basket settings
     * Retrieves configuration settings of this basket.
     * @param name The basket name (required)
     * @return ApiResponse&lt;Config&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns basket configuration </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Config> basketsNameGetWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = basketsNameGetValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<Config>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get basket settings (asynchronously)
     * Retrieves configuration settings of this basket.
     * @param name The basket name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns basket configuration </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call basketsNameGetAsync(String name, final ApiCallback<Config> _callback) throws ApiException {

        okhttp3.Call localVarCall = basketsNameGetValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<Config>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for basketsNamePost
     * @param name The name of new basket (required)
     * @param config Basket configuration (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Indicates that basket is successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into basket configuration object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Indicates that basket name conflicts with reserved paths; e.g. &#x60;baskets&#x60;, &#x60;web&#x60;, etc. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Indicates that basket with such name already exists </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Basket configuration is not valid. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call basketsNamePostCall(String name, Config config, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = config;

        // create path and map variables
        String localVarPath = "/baskets/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call basketsNamePostValidateBeforeCall(String name, Config config, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling basketsNamePost(Async)");
        }

        return basketsNamePostCall(name, config, _callback);

    }

    /**
     * Create new basket
     * Creates a new basket with this name.
     * @param name The name of new basket (required)
     * @param config Basket configuration (optional)
     * @return Token
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Indicates that basket is successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into basket configuration object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Indicates that basket name conflicts with reserved paths; e.g. &#x60;baskets&#x60;, &#x60;web&#x60;, etc. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Indicates that basket with such name already exists </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Basket configuration is not valid. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Token basketsNamePost(String name, Config config) throws ApiException {
        ApiResponse<Token> localVarResp = basketsNamePostWithHttpInfo(name, config);
        return localVarResp.getData();
    }

    /**
     * Create new basket
     * Creates a new basket with this name.
     * @param name The name of new basket (required)
     * @param config Basket configuration (optional)
     * @return ApiResponse&lt;Token&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Indicates that basket is successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into basket configuration object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Indicates that basket name conflicts with reserved paths; e.g. &#x60;baskets&#x60;, &#x60;web&#x60;, etc. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Indicates that basket with such name already exists </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Basket configuration is not valid. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Token> basketsNamePostWithHttpInfo(String name, Config config) throws ApiException {
        okhttp3.Call localVarCall = basketsNamePostValidateBeforeCall(name, config, null);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create new basket (asynchronously)
     * Creates a new basket with this name.
     * @param name The name of new basket (required)
     * @param config Basket configuration (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Indicates that basket is successfully created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into basket configuration object. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Indicates that basket name conflicts with reserved paths; e.g. &#x60;baskets&#x60;, &#x60;web&#x60;, etc. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Indicates that basket with such name already exists </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Basket configuration is not valid. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call basketsNamePostAsync(String name, Config config, final ApiCallback<Token> _callback) throws ApiException {

        okhttp3.Call localVarCall = basketsNamePostValidateBeforeCall(name, config, _callback);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for basketsNamePut
     * @param name The basket name (required)
     * @param config New configuration to apply (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket configuration is updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into basket configuration object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Basket configuration is not valid. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call basketsNamePutCall(String name, Config config, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = config;

        // create path and map variables
        String localVarPath = "/baskets/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basket_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call basketsNamePutValidateBeforeCall(String name, Config config, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling basketsNamePut(Async)");
        }

        // verify the required parameter 'config' is set
        if (config == null) {
            throw new ApiException("Missing the required parameter 'config' when calling basketsNamePut(Async)");
        }

        return basketsNamePutCall(name, config, _callback);

    }

    /**
     * Update basket settings
     * Updates configuration settings of this basket.  Special configuration parameters for request forwarding:   * &#x60;insecure_tls&#x60; controls certificate verification when forwarding requests. Setting this parameter to &#x60;true&#x60;   allows to forward collected HTTP requests via HTTPS protocol even if the forward end-point is configured with   self-signed TLS/SSL certificate. **Warning:** enabling this feature has known security implications.   * &#x60;expand_path&#x60; changes the logic of constructing taget URL when forwarding requests. If this parameter is   set to &#x60;true&#x60; the forward URL path will be expanded when original HTTP request contains compound path. For   example, a basket with name **server1** is configured to forward all requests to &#x60;http://server1.intranet:8001/myservice&#x60;   and it has received an HTTP request like &#x60;GET http://baskets.example.com/server1/component/123/events?status&#x3D;OK&#x60;   then depending on &#x60;expand_path&#x60; settings the request will be forwarded to:     * &#x60;true&#x60; &#x3D;&gt; &#x60;GET http://server1.intranet:8001/myservice/component/123/events?status&#x3D;OK&#x60;     * &#x60;false&#x60; &#x3D;&gt; &#x60;GET http://server1.intranet:8001/myservice?status&#x3D;OK&#x60; 
     * @param name The basket name (required)
     * @param config New configuration to apply (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket configuration is updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into basket configuration object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Basket configuration is not valid. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void basketsNamePut(String name, Config config) throws ApiException {
        basketsNamePutWithHttpInfo(name, config);
    }

    /**
     * Update basket settings
     * Updates configuration settings of this basket.  Special configuration parameters for request forwarding:   * &#x60;insecure_tls&#x60; controls certificate verification when forwarding requests. Setting this parameter to &#x60;true&#x60;   allows to forward collected HTTP requests via HTTPS protocol even if the forward end-point is configured with   self-signed TLS/SSL certificate. **Warning:** enabling this feature has known security implications.   * &#x60;expand_path&#x60; changes the logic of constructing taget URL when forwarding requests. If this parameter is   set to &#x60;true&#x60; the forward URL path will be expanded when original HTTP request contains compound path. For   example, a basket with name **server1** is configured to forward all requests to &#x60;http://server1.intranet:8001/myservice&#x60;   and it has received an HTTP request like &#x60;GET http://baskets.example.com/server1/component/123/events?status&#x3D;OK&#x60;   then depending on &#x60;expand_path&#x60; settings the request will be forwarded to:     * &#x60;true&#x60; &#x3D;&gt; &#x60;GET http://server1.intranet:8001/myservice/component/123/events?status&#x3D;OK&#x60;     * &#x60;false&#x60; &#x3D;&gt; &#x60;GET http://server1.intranet:8001/myservice?status&#x3D;OK&#x60; 
     * @param name The basket name (required)
     * @param config New configuration to apply (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket configuration is updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into basket configuration object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Basket configuration is not valid. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> basketsNamePutWithHttpInfo(String name, Config config) throws ApiException {
        okhttp3.Call localVarCall = basketsNamePutValidateBeforeCall(name, config, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update basket settings (asynchronously)
     * Updates configuration settings of this basket.  Special configuration parameters for request forwarding:   * &#x60;insecure_tls&#x60; controls certificate verification when forwarding requests. Setting this parameter to &#x60;true&#x60;   allows to forward collected HTTP requests via HTTPS protocol even if the forward end-point is configured with   self-signed TLS/SSL certificate. **Warning:** enabling this feature has known security implications.   * &#x60;expand_path&#x60; changes the logic of constructing taget URL when forwarding requests. If this parameter is   set to &#x60;true&#x60; the forward URL path will be expanded when original HTTP request contains compound path. For   example, a basket with name **server1** is configured to forward all requests to &#x60;http://server1.intranet:8001/myservice&#x60;   and it has received an HTTP request like &#x60;GET http://baskets.example.com/server1/component/123/events?status&#x3D;OK&#x60;   then depending on &#x60;expand_path&#x60; settings the request will be forwarded to:     * &#x60;true&#x60; &#x3D;&gt; &#x60;GET http://server1.intranet:8001/myservice/component/123/events?status&#x3D;OK&#x60;     * &#x60;false&#x60; &#x3D;&gt; &#x60;GET http://server1.intranet:8001/myservice?status&#x3D;OK&#x60; 
     * @param name The basket name (required)
     * @param config New configuration to apply (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket configuration is updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into basket configuration object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Basket configuration is not valid. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call basketsNamePutAsync(String name, Config config, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = basketsNamePutValidateBeforeCall(name, config, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
