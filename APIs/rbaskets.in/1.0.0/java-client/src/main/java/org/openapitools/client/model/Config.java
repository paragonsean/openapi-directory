/*
 * Request Baskets API
 * RESTful API of [Request Baskets](https://rbaskets.in) service.  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful API or web UI.  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Config
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:30.520850-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Config {
  public static final String SERIALIZED_NAME_CAPACITY = "capacity";
  @SerializedName(SERIALIZED_NAME_CAPACITY)
  private Integer capacity;

  public static final String SERIALIZED_NAME_EXPAND_PATH = "expand_path";
  @SerializedName(SERIALIZED_NAME_EXPAND_PATH)
  private Boolean expandPath;

  public static final String SERIALIZED_NAME_FORWARD_URL = "forward_url";
  @SerializedName(SERIALIZED_NAME_FORWARD_URL)
  private String forwardUrl;

  public static final String SERIALIZED_NAME_INSECURE_TLS = "insecure_tls";
  @SerializedName(SERIALIZED_NAME_INSECURE_TLS)
  private Boolean insecureTls;

  public static final String SERIALIZED_NAME_PROXY_RESPONSE = "proxy_response";
  @SerializedName(SERIALIZED_NAME_PROXY_RESPONSE)
  private Boolean proxyResponse;

  public Config() {
  }

  public Config capacity(Integer capacity) {
    this.capacity = capacity;
    return this;
  }

  /**
   * Baskets capacity, defines maximum number of requests to store
   * @return capacity
   */
  @javax.annotation.Nullable
  public Integer getCapacity() {
    return capacity;
  }

  public void setCapacity(Integer capacity) {
    this.capacity = capacity;
  }


  public Config expandPath(Boolean expandPath) {
    this.expandPath = expandPath;
    return this;
  }

  /**
   * If set to &#x60;true&#x60; the forward URL path will be expanded when original HTTP request contains compound path.
   * @return expandPath
   */
  @javax.annotation.Nullable
  public Boolean getExpandPath() {
    return expandPath;
  }

  public void setExpandPath(Boolean expandPath) {
    this.expandPath = expandPath;
  }


  public Config forwardUrl(String forwardUrl) {
    this.forwardUrl = forwardUrl;
    return this;
  }

  /**
   * URL to forward all incoming requests of the basket, &#x60;empty&#x60; value disables forwarding
   * @return forwardUrl
   */
  @javax.annotation.Nullable
  public String getForwardUrl() {
    return forwardUrl;
  }

  public void setForwardUrl(String forwardUrl) {
    this.forwardUrl = forwardUrl;
  }


  public Config insecureTls(Boolean insecureTls) {
    this.insecureTls = insecureTls;
    return this;
  }

  /**
   * If set to &#x60;true&#x60; the certificate verification will be disabled if forward URL indicates HTTPS scheme. **Warning:** enabling this feature has known security implications. 
   * @return insecureTls
   */
  @javax.annotation.Nullable
  public Boolean getInsecureTls() {
    return insecureTls;
  }

  public void setInsecureTls(Boolean insecureTls) {
    this.insecureTls = insecureTls;
  }


  public Config proxyResponse(Boolean proxyResponse) {
    this.proxyResponse = proxyResponse;
    return this;
  }

  /**
   * If set to &#x60;true&#x60; this basket behaves as a full proxy: responses from underlying service configured in &#x60;forward_url&#x60; are passed back to clients of original requests. The configuration of basket responses is ignored in this case. 
   * @return proxyResponse
   */
  @javax.annotation.Nullable
  public Boolean getProxyResponse() {
    return proxyResponse;
  }

  public void setProxyResponse(Boolean proxyResponse) {
    this.proxyResponse = proxyResponse;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Config config = (Config) o;
    return Objects.equals(this.capacity, config.capacity) &&
        Objects.equals(this.expandPath, config.expandPath) &&
        Objects.equals(this.forwardUrl, config.forwardUrl) &&
        Objects.equals(this.insecureTls, config.insecureTls) &&
        Objects.equals(this.proxyResponse, config.proxyResponse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capacity, expandPath, forwardUrl, insecureTls, proxyResponse);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Config {\n");
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    expandPath: ").append(toIndentedString(expandPath)).append("\n");
    sb.append("    forwardUrl: ").append(toIndentedString(forwardUrl)).append("\n");
    sb.append("    insecureTls: ").append(toIndentedString(insecureTls)).append("\n");
    sb.append("    proxyResponse: ").append(toIndentedString(proxyResponse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("capacity");
    openapiFields.add("expand_path");
    openapiFields.add("forward_url");
    openapiFields.add("insecure_tls");
    openapiFields.add("proxy_response");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Config
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Config.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Config is not found in the empty JSON string", Config.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Config.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Config` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("forward_url") != null && !jsonObj.get("forward_url").isJsonNull()) && !jsonObj.get("forward_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forward_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forward_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Config.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Config' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Config> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Config.class));

       return (TypeAdapter<T>) new TypeAdapter<Config>() {
           @Override
           public void write(JsonWriter out, Config value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Config read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Config given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Config
   * @throws IOException if the JSON string is invalid with respect to Config
   */
  public static Config fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Config.class);
  }

  /**
   * Convert an instance of Config to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

