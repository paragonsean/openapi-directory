/*
 * Request Baskets API
 * RESTful API of [Request Baskets](https://rbaskets.in) service.  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful API or web UI.  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResponsesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResponsesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResponsesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiBasketsNameResponsesMethodGet
     * @param name The basket name (required)
     * @param method The HTTP method this response is configured for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns configured response information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBasketsNameResponsesMethodGetCall(String name, String method, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/baskets/{name}/responses/{method}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "method" + "}", localVarApiClient.escapeString(method.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basket_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiBasketsNameResponsesMethodGetValidateBeforeCall(String name, String method, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling apiBasketsNameResponsesMethodGet(Async)");
        }

        // verify the required parameter 'method' is set
        if (method == null) {
            throw new ApiException("Missing the required parameter 'method' when calling apiBasketsNameResponsesMethodGet(Async)");
        }

        return apiBasketsNameResponsesMethodGetCall(name, method, _callback);

    }

    /**
     * Get response settings
     * Retrieves information about configured response of the basket. Service will reply with this response to any HTTP request sent to the basket with appropriate HTTP method.  If nothing is configured, the default response is HTTP 200 - OK with empty content. 
     * @param name The basket name (required)
     * @param method The HTTP method this response is configured for (required)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns configured response information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     */
    public Response apiBasketsNameResponsesMethodGet(String name, String method) throws ApiException {
        ApiResponse<Response> localVarResp = apiBasketsNameResponsesMethodGetWithHttpInfo(name, method);
        return localVarResp.getData();
    }

    /**
     * Get response settings
     * Retrieves information about configured response of the basket. Service will reply with this response to any HTTP request sent to the basket with appropriate HTTP method.  If nothing is configured, the default response is HTTP 200 - OK with empty content. 
     * @param name The basket name (required)
     * @param method The HTTP method this response is configured for (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns configured response information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Response> apiBasketsNameResponsesMethodGetWithHttpInfo(String name, String method) throws ApiException {
        okhttp3.Call localVarCall = apiBasketsNameResponsesMethodGetValidateBeforeCall(name, method, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get response settings (asynchronously)
     * Retrieves information about configured response of the basket. Service will reply with this response to any HTTP request sent to the basket with appropriate HTTP method.  If nothing is configured, the default response is HTTP 200 - OK with empty content. 
     * @param name The basket name (required)
     * @param method The HTTP method this response is configured for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns configured response information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBasketsNameResponsesMethodGetAsync(String name, String method, final ApiCallback<Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiBasketsNameResponsesMethodGetValidateBeforeCall(name, method, _callback);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiBasketsNameResponsesMethodPut
     * @param name The basket name (required)
     * @param method The HTTP method this response is configured for (required)
     * @param response HTTP response configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Response configuration is updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into response configuration object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Response configuration is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBasketsNameResponsesMethodPutCall(String name, String method, Response response, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = response;

        // create path and map variables
        String localVarPath = "/api/baskets/{name}/responses/{method}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "method" + "}", localVarApiClient.escapeString(method.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basket_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiBasketsNameResponsesMethodPutValidateBeforeCall(String name, String method, Response response, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling apiBasketsNameResponsesMethodPut(Async)");
        }

        // verify the required parameter 'method' is set
        if (method == null) {
            throw new ApiException("Missing the required parameter 'method' when calling apiBasketsNameResponsesMethodPut(Async)");
        }

        // verify the required parameter 'response' is set
        if (response == null) {
            throw new ApiException("Missing the required parameter 'response' when calling apiBasketsNameResponsesMethodPut(Async)");
        }

        return apiBasketsNameResponsesMethodPutCall(name, method, response, _callback);

    }

    /**
     * Update response settings
     * Allows to configure HTTP response of this basket. The service will reply with configured response to any HTTP request sent to the basket with appropriate HTTP method.  If nothing is configured, the default response is HTTP 200 - OK with empty content. 
     * @param name The basket name (required)
     * @param method The HTTP method this response is configured for (required)
     * @param response HTTP response configuration (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Response configuration is updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into response configuration object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Response configuration is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public void apiBasketsNameResponsesMethodPut(String name, String method, Response response) throws ApiException {
        apiBasketsNameResponsesMethodPutWithHttpInfo(name, method, response);
    }

    /**
     * Update response settings
     * Allows to configure HTTP response of this basket. The service will reply with configured response to any HTTP request sent to the basket with appropriate HTTP method.  If nothing is configured, the default response is HTTP 200 - OK with empty content. 
     * @param name The basket name (required)
     * @param method The HTTP method this response is configured for (required)
     * @param response HTTP response configuration (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Response configuration is updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into response configuration object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Response configuration is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiBasketsNameResponsesMethodPutWithHttpInfo(String name, String method, Response response) throws ApiException {
        okhttp3.Call localVarCall = apiBasketsNameResponsesMethodPutValidateBeforeCall(name, method, response, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update response settings (asynchronously)
     * Allows to configure HTTP response of this basket. The service will reply with configured response to any HTTP request sent to the basket with appropriate HTTP method.  If nothing is configured, the default response is HTTP 200 - OK with empty content. 
     * @param name The basket name (required)
     * @param method The HTTP method this response is configured for (required)
     * @param response HTTP response configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Response configuration is updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into response configuration object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Response configuration is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBasketsNameResponsesMethodPutAsync(String name, String method, Response response, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiBasketsNameResponsesMethodPutValidateBeforeCall(name, method, response, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for basketsNameResponsesMethodGet
     * @param name The basket name (required)
     * @param method The HTTP method this response is configured for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns configured response information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call basketsNameResponsesMethodGetCall(String name, String method, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/baskets/{name}/responses/{method}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "method" + "}", localVarApiClient.escapeString(method.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basket_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call basketsNameResponsesMethodGetValidateBeforeCall(String name, String method, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling basketsNameResponsesMethodGet(Async)");
        }

        // verify the required parameter 'method' is set
        if (method == null) {
            throw new ApiException("Missing the required parameter 'method' when calling basketsNameResponsesMethodGet(Async)");
        }

        return basketsNameResponsesMethodGetCall(name, method, _callback);

    }

    /**
     * Get response settings
     * Retrieves information about configured response of the basket. Service will reply with this response to any HTTP request sent to the basket with appropriate HTTP method.  If nothing is configured, the default response is HTTP 200 - OK with empty content. 
     * @param name The basket name (required)
     * @param method The HTTP method this response is configured for (required)
     * @return Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns configured response information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Response basketsNameResponsesMethodGet(String name, String method) throws ApiException {
        ApiResponse<Response> localVarResp = basketsNameResponsesMethodGetWithHttpInfo(name, method);
        return localVarResp.getData();
    }

    /**
     * Get response settings
     * Retrieves information about configured response of the basket. Service will reply with this response to any HTTP request sent to the basket with appropriate HTTP method.  If nothing is configured, the default response is HTTP 200 - OK with empty content. 
     * @param name The basket name (required)
     * @param method The HTTP method this response is configured for (required)
     * @return ApiResponse&lt;Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns configured response information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Response> basketsNameResponsesMethodGetWithHttpInfo(String name, String method) throws ApiException {
        okhttp3.Call localVarCall = basketsNameResponsesMethodGetValidateBeforeCall(name, method, null);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get response settings (asynchronously)
     * Retrieves information about configured response of the basket. Service will reply with this response to any HTTP request sent to the basket with appropriate HTTP method.  If nothing is configured, the default response is HTTP 200 - OK with empty content. 
     * @param name The basket name (required)
     * @param method The HTTP method this response is configured for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns configured response information </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call basketsNameResponsesMethodGetAsync(String name, String method, final ApiCallback<Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = basketsNameResponsesMethodGetValidateBeforeCall(name, method, _callback);
        Type localVarReturnType = new TypeToken<Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for basketsNameResponsesMethodPut
     * @param name The basket name (required)
     * @param method The HTTP method this response is configured for (required)
     * @param response HTTP response configuration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Response configuration is updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into response configuration object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Response configuration is not valid. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call basketsNameResponsesMethodPutCall(String name, String method, Response response, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = response;

        // create path and map variables
        String localVarPath = "/baskets/{name}/responses/{method}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "method" + "}", localVarApiClient.escapeString(method.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basket_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call basketsNameResponsesMethodPutValidateBeforeCall(String name, String method, Response response, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling basketsNameResponsesMethodPut(Async)");
        }

        // verify the required parameter 'method' is set
        if (method == null) {
            throw new ApiException("Missing the required parameter 'method' when calling basketsNameResponsesMethodPut(Async)");
        }

        // verify the required parameter 'response' is set
        if (response == null) {
            throw new ApiException("Missing the required parameter 'response' when calling basketsNameResponsesMethodPut(Async)");
        }

        return basketsNameResponsesMethodPutCall(name, method, response, _callback);

    }

    /**
     * Update response settings
     * Allows to configure HTTP response of this basket. The service will reply with configured response to any HTTP request sent to the basket with appropriate HTTP method.  If nothing is configured, the default response is HTTP 200 - OK with empty content. 
     * @param name The basket name (required)
     * @param method The HTTP method this response is configured for (required)
     * @param response HTTP response configuration (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Response configuration is updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into response configuration object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Response configuration is not valid. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void basketsNameResponsesMethodPut(String name, String method, Response response) throws ApiException {
        basketsNameResponsesMethodPutWithHttpInfo(name, method, response);
    }

    /**
     * Update response settings
     * Allows to configure HTTP response of this basket. The service will reply with configured response to any HTTP request sent to the basket with appropriate HTTP method.  If nothing is configured, the default response is HTTP 200 - OK with empty content. 
     * @param name The basket name (required)
     * @param method The HTTP method this response is configured for (required)
     * @param response HTTP response configuration (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Response configuration is updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into response configuration object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Response configuration is not valid. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> basketsNameResponsesMethodPutWithHttpInfo(String name, String method, Response response) throws ApiException {
        okhttp3.Call localVarCall = basketsNameResponsesMethodPutValidateBeforeCall(name, method, response, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update response settings (asynchronously)
     * Allows to configure HTTP response of this basket. The service will reply with configured response to any HTTP request sent to the basket with appropriate HTTP method.  If nothing is configured, the default response is HTTP 200 - OK with empty content. 
     * @param name The basket name (required)
     * @param method The HTTP method this response is configured for (required)
     * @param response HTTP response configuration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Response configuration is updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Failed to parse JSON into response configuration object. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity. Response configuration is not valid. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call basketsNameResponsesMethodPutAsync(String name, String method, Response response, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = basketsNameResponsesMethodPutValidateBeforeCall(name, method, response, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
