/*
 * Request Baskets API
 * RESTful API of [Request Baskets](https://rbaskets.in) service.  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful API or web UI.  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BasketInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceStats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:02:30.520850-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceStats {
  public static final String SERIALIZED_NAME_AVG_BASKET_SIZE = "avg_basket_size";
  @SerializedName(SERIALIZED_NAME_AVG_BASKET_SIZE)
  private Integer avgBasketSize;

  public static final String SERIALIZED_NAME_BASKETS_COUNT = "baskets_count";
  @SerializedName(SERIALIZED_NAME_BASKETS_COUNT)
  private Integer basketsCount;

  public static final String SERIALIZED_NAME_EMPTY_BASKETS_COUNT = "empty_baskets_count";
  @SerializedName(SERIALIZED_NAME_EMPTY_BASKETS_COUNT)
  private Integer emptyBasketsCount;

  public static final String SERIALIZED_NAME_MAX_BASKET_SIZE = "max_basket_size";
  @SerializedName(SERIALIZED_NAME_MAX_BASKET_SIZE)
  private Integer maxBasketSize;

  public static final String SERIALIZED_NAME_REQUESTS_COUNT = "requests_count";
  @SerializedName(SERIALIZED_NAME_REQUESTS_COUNT)
  private Integer requestsCount;

  public static final String SERIALIZED_NAME_REQUESTS_TOTAL_COUNT = "requests_total_count";
  @SerializedName(SERIALIZED_NAME_REQUESTS_TOTAL_COUNT)
  private Integer requestsTotalCount;

  public static final String SERIALIZED_NAME_TOP_BASKETS_RECENT = "top_baskets_recent";
  @SerializedName(SERIALIZED_NAME_TOP_BASKETS_RECENT)
  private List<BasketInfo> topBasketsRecent = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOP_BASKETS_SIZE = "top_baskets_size";
  @SerializedName(SERIALIZED_NAME_TOP_BASKETS_SIZE)
  private List<BasketInfo> topBasketsSize = new ArrayList<>();

  public ServiceStats() {
  }

  public ServiceStats avgBasketSize(Integer avgBasketSize) {
    this.avgBasketSize = avgBasketSize;
    return this;
  }

  /**
   * Average size of a basket in the system, empty baskets are not taken into account
   * @return avgBasketSize
   */
  @javax.annotation.Nullable
  public Integer getAvgBasketSize() {
    return avgBasketSize;
  }

  public void setAvgBasketSize(Integer avgBasketSize) {
    this.avgBasketSize = avgBasketSize;
  }


  public ServiceStats basketsCount(Integer basketsCount) {
    this.basketsCount = basketsCount;
    return this;
  }

  /**
   * Total number of baskets managed by service
   * @return basketsCount
   */
  @javax.annotation.Nullable
  public Integer getBasketsCount() {
    return basketsCount;
  }

  public void setBasketsCount(Integer basketsCount) {
    this.basketsCount = basketsCount;
  }


  public ServiceStats emptyBasketsCount(Integer emptyBasketsCount) {
    this.emptyBasketsCount = emptyBasketsCount;
    return this;
  }

  /**
   * Number of empty baskets
   * @return emptyBasketsCount
   */
  @javax.annotation.Nullable
  public Integer getEmptyBasketsCount() {
    return emptyBasketsCount;
  }

  public void setEmptyBasketsCount(Integer emptyBasketsCount) {
    this.emptyBasketsCount = emptyBasketsCount;
  }


  public ServiceStats maxBasketSize(Integer maxBasketSize) {
    this.maxBasketSize = maxBasketSize;
    return this;
  }

  /**
   * Size of the biggest basket that processed the top most number of HTTP requests
   * @return maxBasketSize
   */
  @javax.annotation.Nullable
  public Integer getMaxBasketSize() {
    return maxBasketSize;
  }

  public void setMaxBasketSize(Integer maxBasketSize) {
    this.maxBasketSize = maxBasketSize;
  }


  public ServiceStats requestsCount(Integer requestsCount) {
    this.requestsCount = requestsCount;
    return this;
  }

  /**
   * Number of HTTP requests currently stored by service
   * @return requestsCount
   */
  @javax.annotation.Nullable
  public Integer getRequestsCount() {
    return requestsCount;
  }

  public void setRequestsCount(Integer requestsCount) {
    this.requestsCount = requestsCount;
  }


  public ServiceStats requestsTotalCount(Integer requestsTotalCount) {
    this.requestsTotalCount = requestsTotalCount;
    return this;
  }

  /**
   * Total number of HTTP requests processed by service
   * @return requestsTotalCount
   */
  @javax.annotation.Nullable
  public Integer getRequestsTotalCount() {
    return requestsTotalCount;
  }

  public void setRequestsTotalCount(Integer requestsTotalCount) {
    this.requestsTotalCount = requestsTotalCount;
  }


  public ServiceStats topBasketsRecent(List<BasketInfo> topBasketsRecent) {
    this.topBasketsRecent = topBasketsRecent;
    return this;
  }

  public ServiceStats addTopBasketsRecentItem(BasketInfo topBasketsRecentItem) {
    if (this.topBasketsRecent == null) {
      this.topBasketsRecent = new ArrayList<>();
    }
    this.topBasketsRecent.add(topBasketsRecentItem);
    return this;
  }

  /**
   * Collection of top baskets recently active
   * @return topBasketsRecent
   */
  @javax.annotation.Nullable
  public List<BasketInfo> getTopBasketsRecent() {
    return topBasketsRecent;
  }

  public void setTopBasketsRecent(List<BasketInfo> topBasketsRecent) {
    this.topBasketsRecent = topBasketsRecent;
  }


  public ServiceStats topBasketsSize(List<BasketInfo> topBasketsSize) {
    this.topBasketsSize = topBasketsSize;
    return this;
  }

  public ServiceStats addTopBasketsSizeItem(BasketInfo topBasketsSizeItem) {
    if (this.topBasketsSize == null) {
      this.topBasketsSize = new ArrayList<>();
    }
    this.topBasketsSize.add(topBasketsSizeItem);
    return this;
  }

  /**
   * Collection of top basket by size
   * @return topBasketsSize
   */
  @javax.annotation.Nullable
  public List<BasketInfo> getTopBasketsSize() {
    return topBasketsSize;
  }

  public void setTopBasketsSize(List<BasketInfo> topBasketsSize) {
    this.topBasketsSize = topBasketsSize;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceStats serviceStats = (ServiceStats) o;
    return Objects.equals(this.avgBasketSize, serviceStats.avgBasketSize) &&
        Objects.equals(this.basketsCount, serviceStats.basketsCount) &&
        Objects.equals(this.emptyBasketsCount, serviceStats.emptyBasketsCount) &&
        Objects.equals(this.maxBasketSize, serviceStats.maxBasketSize) &&
        Objects.equals(this.requestsCount, serviceStats.requestsCount) &&
        Objects.equals(this.requestsTotalCount, serviceStats.requestsTotalCount) &&
        Objects.equals(this.topBasketsRecent, serviceStats.topBasketsRecent) &&
        Objects.equals(this.topBasketsSize, serviceStats.topBasketsSize);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avgBasketSize, basketsCount, emptyBasketsCount, maxBasketSize, requestsCount, requestsTotalCount, topBasketsRecent, topBasketsSize);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceStats {\n");
    sb.append("    avgBasketSize: ").append(toIndentedString(avgBasketSize)).append("\n");
    sb.append("    basketsCount: ").append(toIndentedString(basketsCount)).append("\n");
    sb.append("    emptyBasketsCount: ").append(toIndentedString(emptyBasketsCount)).append("\n");
    sb.append("    maxBasketSize: ").append(toIndentedString(maxBasketSize)).append("\n");
    sb.append("    requestsCount: ").append(toIndentedString(requestsCount)).append("\n");
    sb.append("    requestsTotalCount: ").append(toIndentedString(requestsTotalCount)).append("\n");
    sb.append("    topBasketsRecent: ").append(toIndentedString(topBasketsRecent)).append("\n");
    sb.append("    topBasketsSize: ").append(toIndentedString(topBasketsSize)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avg_basket_size");
    openapiFields.add("baskets_count");
    openapiFields.add("empty_baskets_count");
    openapiFields.add("max_basket_size");
    openapiFields.add("requests_count");
    openapiFields.add("requests_total_count");
    openapiFields.add("top_baskets_recent");
    openapiFields.add("top_baskets_size");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceStats is not found in the empty JSON string", ServiceStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("top_baskets_recent") != null && !jsonObj.get("top_baskets_recent").isJsonNull()) {
        JsonArray jsonArraytopBasketsRecent = jsonObj.getAsJsonArray("top_baskets_recent");
        if (jsonArraytopBasketsRecent != null) {
          // ensure the json data is an array
          if (!jsonObj.get("top_baskets_recent").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `top_baskets_recent` to be an array in the JSON string but got `%s`", jsonObj.get("top_baskets_recent").toString()));
          }

          // validate the optional field `top_baskets_recent` (array)
          for (int i = 0; i < jsonArraytopBasketsRecent.size(); i++) {
            BasketInfo.validateJsonElement(jsonArraytopBasketsRecent.get(i));
          };
        }
      }
      if (jsonObj.get("top_baskets_size") != null && !jsonObj.get("top_baskets_size").isJsonNull()) {
        JsonArray jsonArraytopBasketsSize = jsonObj.getAsJsonArray("top_baskets_size");
        if (jsonArraytopBasketsSize != null) {
          // ensure the json data is an array
          if (!jsonObj.get("top_baskets_size").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `top_baskets_size` to be an array in the JSON string but got `%s`", jsonObj.get("top_baskets_size").toString()));
          }

          // validate the optional field `top_baskets_size` (array)
          for (int i = 0; i < jsonArraytopBasketsSize.size(); i++) {
            BasketInfo.validateJsonElement(jsonArraytopBasketsSize.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceStats.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceStats>() {
           @Override
           public void write(JsonWriter out, ServiceStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceStats
   * @throws IOException if the JSON string is invalid with respect to ServiceStats
   */
  public static ServiceStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceStats.class);
  }

  /**
   * Convert an instance of ServiceStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

