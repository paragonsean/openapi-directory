/*
 * Request Baskets API
 * RESTful API of [Request Baskets](https://rbaskets.in) service.  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful API or web UI.  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Requests;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RequestsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RequestsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RequestsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiBasketsNameRequestsDelete
     * @param name The basket name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket requests are cleared </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBasketsNameRequestsDeleteCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/baskets/{name}/requests"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basket_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiBasketsNameRequestsDeleteValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling apiBasketsNameRequestsDelete(Async)");
        }

        return apiBasketsNameRequestsDeleteCall(name, _callback);

    }

    /**
     * Delete all requests
     * Deletes all requests collected by this basket.
     * @param name The basket name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket requests are cleared </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     */
    public void apiBasketsNameRequestsDelete(String name) throws ApiException {
        apiBasketsNameRequestsDeleteWithHttpInfo(name);
    }

    /**
     * Delete all requests
     * Deletes all requests collected by this basket.
     * @param name The basket name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket requests are cleared </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiBasketsNameRequestsDeleteWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = apiBasketsNameRequestsDeleteValidateBeforeCall(name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all requests (asynchronously)
     * Deletes all requests collected by this basket.
     * @param name The basket name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket requests are cleared </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBasketsNameRequestsDeleteAsync(String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiBasketsNameRequestsDeleteValidateBeforeCall(name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiBasketsNameRequestsGet
     * @param name The basket name (required)
     * @param max Maximum number of requests to return; default 20 (optional)
     * @param skip Number of requests to skip; default 0 (optional)
     * @param q Query string to filter result, only requests that match the query will be included in response (optional)
     * @param in Defines what is taken into account when filtering is applied: &#x60;body&#x60; - search in content body of collected requests, &#x60;query&#x60; - search among query parameters of collected requests, &#x60;headers&#x60; - search among request header values, &#x60;any&#x60; - search anywhere; default &#x60;any&#x60;  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of basket requests. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. No requests found for specified limits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBasketsNameRequestsGetCall(String name, Integer max, Integer skip, String q, String in, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/baskets/{name}/requests"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (in != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("in", in));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basket_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiBasketsNameRequestsGetValidateBeforeCall(String name, Integer max, Integer skip, String q, String in, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling apiBasketsNameRequestsGet(Async)");
        }

        return apiBasketsNameRequestsGetCall(name, max, skip, q, in, _callback);

    }

    /**
     * Get collected requests
     * Fetches collection of requests collected by this basket.
     * @param name The basket name (required)
     * @param max Maximum number of requests to return; default 20 (optional)
     * @param skip Number of requests to skip; default 0 (optional)
     * @param q Query string to filter result, only requests that match the query will be included in response (optional)
     * @param in Defines what is taken into account when filtering is applied: &#x60;body&#x60; - search in content body of collected requests, &#x60;query&#x60; - search among query parameters of collected requests, &#x60;headers&#x60; - search among request header values, &#x60;any&#x60; - search anywhere; default &#x60;any&#x60;  (optional)
     * @return Requests
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of basket requests. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. No requests found for specified limits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     */
    public Requests apiBasketsNameRequestsGet(String name, Integer max, Integer skip, String q, String in) throws ApiException {
        ApiResponse<Requests> localVarResp = apiBasketsNameRequestsGetWithHttpInfo(name, max, skip, q, in);
        return localVarResp.getData();
    }

    /**
     * Get collected requests
     * Fetches collection of requests collected by this basket.
     * @param name The basket name (required)
     * @param max Maximum number of requests to return; default 20 (optional)
     * @param skip Number of requests to skip; default 0 (optional)
     * @param q Query string to filter result, only requests that match the query will be included in response (optional)
     * @param in Defines what is taken into account when filtering is applied: &#x60;body&#x60; - search in content body of collected requests, &#x60;query&#x60; - search among query parameters of collected requests, &#x60;headers&#x60; - search among request header values, &#x60;any&#x60; - search anywhere; default &#x60;any&#x60;  (optional)
     * @return ApiResponse&lt;Requests&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of basket requests. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. No requests found for specified limits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Requests> apiBasketsNameRequestsGetWithHttpInfo(String name, Integer max, Integer skip, String q, String in) throws ApiException {
        okhttp3.Call localVarCall = apiBasketsNameRequestsGetValidateBeforeCall(name, max, skip, q, in, null);
        Type localVarReturnType = new TypeToken<Requests>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get collected requests (asynchronously)
     * Fetches collection of requests collected by this basket.
     * @param name The basket name (required)
     * @param max Maximum number of requests to return; default 20 (optional)
     * @param skip Number of requests to skip; default 0 (optional)
     * @param q Query string to filter result, only requests that match the query will be included in response (optional)
     * @param in Defines what is taken into account when filtering is applied: &#x60;body&#x60; - search in content body of collected requests, &#x60;query&#x60; - search among query parameters of collected requests, &#x60;headers&#x60; - search among request header values, &#x60;any&#x60; - search anywhere; default &#x60;any&#x60;  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of basket requests. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. No requests found for specified limits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiBasketsNameRequestsGetAsync(String name, Integer max, Integer skip, String q, String in, final ApiCallback<Requests> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiBasketsNameRequestsGetValidateBeforeCall(name, max, skip, q, in, _callback);
        Type localVarReturnType = new TypeToken<Requests>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for basketsNameRequestsDelete
     * @param name The basket name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket requests are cleared </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call basketsNameRequestsDeleteCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/baskets/{name}/requests"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basket_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call basketsNameRequestsDeleteValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling basketsNameRequestsDelete(Async)");
        }

        return basketsNameRequestsDeleteCall(name, _callback);

    }

    /**
     * Delete all requests
     * Deletes all requests collected by this basket.
     * @param name The basket name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket requests are cleared </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void basketsNameRequestsDelete(String name) throws ApiException {
        basketsNameRequestsDeleteWithHttpInfo(name);
    }

    /**
     * Delete all requests
     * Deletes all requests collected by this basket.
     * @param name The basket name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket requests are cleared </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> basketsNameRequestsDeleteWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = basketsNameRequestsDeleteValidateBeforeCall(name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all requests (asynchronously)
     * Deletes all requests collected by this basket.
     * @param name The basket name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content. Basket requests are cleared </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call basketsNameRequestsDeleteAsync(String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = basketsNameRequestsDeleteValidateBeforeCall(name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for basketsNameRequestsGet
     * @param name The basket name (required)
     * @param max Maximum number of requests to return; default 20 (optional)
     * @param skip Number of requests to skip; default 0 (optional)
     * @param q Query string to filter result, only requests that match the query will be included in response (optional)
     * @param in Defines what is taken into account when filtering is applied: &#x60;body&#x60; - search in content body of collected requests, &#x60;query&#x60; - search among query parameters of collected requests, &#x60;headers&#x60; - search among request header values, &#x60;any&#x60; - search anywhere; default &#x60;any&#x60;  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of basket requests. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. No requests found for specified limits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call basketsNameRequestsGetCall(String name, Integer max, Integer skip, String q, String in, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/baskets/{name}/requests"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (in != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("in", in));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basket_token" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call basketsNameRequestsGetValidateBeforeCall(String name, Integer max, Integer skip, String q, String in, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling basketsNameRequestsGet(Async)");
        }

        return basketsNameRequestsGetCall(name, max, skip, q, in, _callback);

    }

    /**
     * Get collected requests
     * Fetches collection of requests collected by this basket.
     * @param name The basket name (required)
     * @param max Maximum number of requests to return; default 20 (optional)
     * @param skip Number of requests to skip; default 0 (optional)
     * @param q Query string to filter result, only requests that match the query will be included in response (optional)
     * @param in Defines what is taken into account when filtering is applied: &#x60;body&#x60; - search in content body of collected requests, &#x60;query&#x60; - search among query parameters of collected requests, &#x60;headers&#x60; - search among request header values, &#x60;any&#x60; - search anywhere; default &#x60;any&#x60;  (optional)
     * @return Requests
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of basket requests. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. No requests found for specified limits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Requests basketsNameRequestsGet(String name, Integer max, Integer skip, String q, String in) throws ApiException {
        ApiResponse<Requests> localVarResp = basketsNameRequestsGetWithHttpInfo(name, max, skip, q, in);
        return localVarResp.getData();
    }

    /**
     * Get collected requests
     * Fetches collection of requests collected by this basket.
     * @param name The basket name (required)
     * @param max Maximum number of requests to return; default 20 (optional)
     * @param skip Number of requests to skip; default 0 (optional)
     * @param q Query string to filter result, only requests that match the query will be included in response (optional)
     * @param in Defines what is taken into account when filtering is applied: &#x60;body&#x60; - search in content body of collected requests, &#x60;query&#x60; - search among query parameters of collected requests, &#x60;headers&#x60; - search among request header values, &#x60;any&#x60; - search anywhere; default &#x60;any&#x60;  (optional)
     * @return ApiResponse&lt;Requests&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of basket requests. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. No requests found for specified limits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Requests> basketsNameRequestsGetWithHttpInfo(String name, Integer max, Integer skip, String q, String in) throws ApiException {
        okhttp3.Call localVarCall = basketsNameRequestsGetValidateBeforeCall(name, max, skip, q, in, null);
        Type localVarReturnType = new TypeToken<Requests>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get collected requests (asynchronously)
     * Fetches collection of requests collected by this basket.
     * @param name The basket name (required)
     * @param max Maximum number of requests to return; default 20 (optional)
     * @param skip Number of requests to skip; default 0 (optional)
     * @param q Query string to filter result, only requests that match the query will be included in response (optional)
     * @param in Defines what is taken into account when filtering is applied: &#x60;body&#x60; - search in content body of collected requests, &#x60;query&#x60; - search among query parameters of collected requests, &#x60;headers&#x60; - search among request header values, &#x60;any&#x60; - search anywhere; default &#x60;any&#x60;  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of basket requests. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content. No requests found for specified limits </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. Invalid or missing basket token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. No basket with such name </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call basketsNameRequestsGetAsync(String name, Integer max, Integer skip, String q, String in, final ApiCallback<Requests> _callback) throws ApiException {

        okhttp3.Call localVarCall = basketsNameRequestsGetValidateBeforeCall(name, max, skip, q, in, _callback);
        Type localVarReturnType = new TypeToken<Requests>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
