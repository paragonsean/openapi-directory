/*
 * Request Baskets API
 * RESTful API of [Request Baskets](https://rbaskets.in) service.  Request Baskets is an open source project of a service to collect HTTP requests and inspect them via RESTful API or web UI.  Check out the [project page](https://github.com/darklynx/request-baskets) for more detailed description. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Baskets;
import org.openapitools.client.model.Config;
import org.openapitools.client.model.ServiceStats;
import org.openapitools.client.model.Token;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BasketsApi
 */
@Disabled
public class BasketsApiTest {

    private final BasketsApi api = new BasketsApi();

    /**
     * Get baskets
     *
     * Fetches a list of basket names managed by service. Require master token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiBasketsGetTest() throws ApiException {
        Integer max = null;
        Integer skip = null;
        String q = null;
        Baskets response = api.apiBasketsGet(max, skip, q);
        // TODO: test validations
    }

    /**
     * Delete basket
     *
     * Permanently deletes this basket and all collected requests.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiBasketsNameDeleteTest() throws ApiException {
        String name = null;
        api.apiBasketsNameDelete(name);
        // TODO: test validations
    }

    /**
     * Get basket settings
     *
     * Retrieves configuration settings of this basket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiBasketsNameGetTest() throws ApiException {
        String name = null;
        Config response = api.apiBasketsNameGet(name);
        // TODO: test validations
    }

    /**
     * Create new basket
     *
     * Creates a new basket with this name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiBasketsNamePostTest() throws ApiException {
        String name = null;
        Config config = null;
        Token response = api.apiBasketsNamePost(name, config);
        // TODO: test validations
    }

    /**
     * Update basket settings
     *
     * Updates configuration settings of this basket.  Special configuration parameters for request forwarding:   * &#x60;insecure_tls&#x60; controls certificate verification when forwarding requests. Setting this parameter to &#x60;true&#x60;   allows to forward collected HTTP requests via HTTPS protocol even if the forward end-point is configured with   self-signed TLS/SSL certificate. **Warning:** enabling this feature has known security implications.   * &#x60;expand_path&#x60; changes the logic of constructing taget URL when forwarding requests. If this parameter is   set to &#x60;true&#x60; the forward URL path will be expanded when original HTTP request contains compound path. For   example, a basket with name **server1** is configured to forward all requests to &#x60;http://server1.intranet:8001/myservice&#x60;   and it has received an HTTP request like &#x60;GET http://baskets.example.com/server1/component/123/events?status&#x3D;OK&#x60;   then depending on &#x60;expand_path&#x60; settings the request will be forwarded to:     * &#x60;true&#x60; &#x3D;&gt; &#x60;GET http://server1.intranet:8001/myservice/component/123/events?status&#x3D;OK&#x60;     * &#x60;false&#x60; &#x3D;&gt; &#x60;GET http://server1.intranet:8001/myservice?status&#x3D;OK&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiBasketsNamePutTest() throws ApiException {
        String name = null;
        Config config = null;
        api.apiBasketsNamePut(name, config);
        // TODO: test validations
    }

    /**
     * Get baskets statistics
     *
     * Get service statistics about baskets and collected HTTP requests. Require master token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void apiStatsGetTest() throws ApiException {
        Integer max = null;
        ServiceStats response = api.apiStatsGet(max);
        // TODO: test validations
    }

    /**
     * Get baskets
     *
     * Fetches a list of basket names managed by service. Require master token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void basketsGetTest() throws ApiException {
        Integer max = null;
        Integer skip = null;
        String q = null;
        Baskets response = api.basketsGet(max, skip, q);
        // TODO: test validations
    }

    /**
     * Delete basket
     *
     * Permanently deletes this basket and all collected requests.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void basketsNameDeleteTest() throws ApiException {
        String name = null;
        api.basketsNameDelete(name);
        // TODO: test validations
    }

    /**
     * Get basket settings
     *
     * Retrieves configuration settings of this basket.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void basketsNameGetTest() throws ApiException {
        String name = null;
        Config response = api.basketsNameGet(name);
        // TODO: test validations
    }

    /**
     * Create new basket
     *
     * Creates a new basket with this name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void basketsNamePostTest() throws ApiException {
        String name = null;
        Config config = null;
        Token response = api.basketsNamePost(name, config);
        // TODO: test validations
    }

    /**
     * Update basket settings
     *
     * Updates configuration settings of this basket.  Special configuration parameters for request forwarding:   * &#x60;insecure_tls&#x60; controls certificate verification when forwarding requests. Setting this parameter to &#x60;true&#x60;   allows to forward collected HTTP requests via HTTPS protocol even if the forward end-point is configured with   self-signed TLS/SSL certificate. **Warning:** enabling this feature has known security implications.   * &#x60;expand_path&#x60; changes the logic of constructing taget URL when forwarding requests. If this parameter is   set to &#x60;true&#x60; the forward URL path will be expanded when original HTTP request contains compound path. For   example, a basket with name **server1** is configured to forward all requests to &#x60;http://server1.intranet:8001/myservice&#x60;   and it has received an HTTP request like &#x60;GET http://baskets.example.com/server1/component/123/events?status&#x3D;OK&#x60;   then depending on &#x60;expand_path&#x60; settings the request will be forwarded to:     * &#x60;true&#x60; &#x3D;&gt; &#x60;GET http://server1.intranet:8001/myservice/component/123/events?status&#x3D;OK&#x60;     * &#x60;false&#x60; &#x3D;&gt; &#x60;GET http://server1.intranet:8001/myservice?status&#x3D;OK&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void basketsNamePutTest() throws ApiException {
        String name = null;
        Config config = null;
        api.basketsNamePut(name, config);
        // TODO: test validations
    }

}
