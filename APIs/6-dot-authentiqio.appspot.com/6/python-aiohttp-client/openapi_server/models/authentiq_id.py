# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthentiqID(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, devtoken: str=None, sub: str=None):
        """AuthentiqID - a model defined in OpenAPI

        :param devtoken: The devtoken of this AuthentiqID.
        :param sub: The sub of this AuthentiqID.
        """
        self.openapi_types = {
            'devtoken': str,
            'sub': str
        }

        self.attribute_map = {
            'devtoken': 'devtoken',
            'sub': 'sub'
        }

        self._devtoken = devtoken
        self._sub = sub

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthentiqID':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthentiqID of this AuthentiqID.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def devtoken(self):
        """Gets the devtoken of this AuthentiqID.

        device token for push messages

        :return: The devtoken of this AuthentiqID.
        :rtype: str
        """
        return self._devtoken

    @devtoken.setter
    def devtoken(self, devtoken):
        """Sets the devtoken of this AuthentiqID.

        device token for push messages

        :param devtoken: The devtoken of this AuthentiqID.
        :type devtoken: str
        """

        self._devtoken = devtoken

    @property
    def sub(self):
        """Gets the sub of this AuthentiqID.

        UUID and public signing key

        :return: The sub of this AuthentiqID.
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub):
        """Sets the sub of this AuthentiqID.

        UUID and public signing key

        :param sub: The sub of this AuthentiqID.
        :type sub: str
        """
        if sub is None:
            raise ValueError("Invalid value for `sub`, must not be `None`")

        self._sub = sub
