# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PushToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aud: str=None, exp: int=None, iat: int=None, iss: str=None, nbf: int=None, sub: str=None):
        """PushToken - a model defined in OpenAPI

        :param aud: The aud of this PushToken.
        :param exp: The exp of this PushToken.
        :param iat: The iat of this PushToken.
        :param iss: The iss of this PushToken.
        :param nbf: The nbf of this PushToken.
        :param sub: The sub of this PushToken.
        """
        self.openapi_types = {
            'aud': str,
            'exp': int,
            'iat': int,
            'iss': str,
            'nbf': int,
            'sub': str
        }

        self.attribute_map = {
            'aud': 'aud',
            'exp': 'exp',
            'iat': 'iat',
            'iss': 'iss',
            'nbf': 'nbf',
            'sub': 'sub'
        }

        self._aud = aud
        self._exp = exp
        self._iat = iat
        self._iss = iss
        self._nbf = nbf
        self._sub = sub

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PushToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PushToken of this PushToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aud(self):
        """Gets the aud of this PushToken.

        audience (URI)

        :return: The aud of this PushToken.
        :rtype: str
        """
        return self._aud

    @aud.setter
    def aud(self, aud):
        """Sets the aud of this PushToken.

        audience (URI)

        :param aud: The aud of this PushToken.
        :type aud: str
        """
        if aud is None:
            raise ValueError("Invalid value for `aud`, must not be `None`")

        self._aud = aud

    @property
    def exp(self):
        """Gets the exp of this PushToken.


        :return: The exp of this PushToken.
        :rtype: int
        """
        return self._exp

    @exp.setter
    def exp(self, exp):
        """Sets the exp of this PushToken.


        :param exp: The exp of this PushToken.
        :type exp: int
        """

        self._exp = exp

    @property
    def iat(self):
        """Gets the iat of this PushToken.


        :return: The iat of this PushToken.
        :rtype: int
        """
        return self._iat

    @iat.setter
    def iat(self, iat):
        """Sets the iat of this PushToken.


        :param iat: The iat of this PushToken.
        :type iat: int
        """

        self._iat = iat

    @property
    def iss(self):
        """Gets the iss of this PushToken.

        issuer (URI)

        :return: The iss of this PushToken.
        :rtype: str
        """
        return self._iss

    @iss.setter
    def iss(self, iss):
        """Sets the iss of this PushToken.

        issuer (URI)

        :param iss: The iss of this PushToken.
        :type iss: str
        """
        if iss is None:
            raise ValueError("Invalid value for `iss`, must not be `None`")

        self._iss = iss

    @property
    def nbf(self):
        """Gets the nbf of this PushToken.


        :return: The nbf of this PushToken.
        :rtype: int
        """
        return self._nbf

    @nbf.setter
    def nbf(self, nbf):
        """Sets the nbf of this PushToken.


        :param nbf: The nbf of this PushToken.
        :type nbf: int
        """

        self._nbf = nbf

    @property
    def sub(self):
        """Gets the sub of this PushToken.

        UUID and public signing key

        :return: The sub of this PushToken.
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub):
        """Sets the sub of this PushToken.

        UUID and public signing key

        :param sub: The sub of this PushToken.
        :type sub: str
        """
        if sub is None:
            raise ValueError("Invalid value for `sub`, must not be `None`")

        self._sub = sub
