# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Claims(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, phone: str=None, scope: str=None, sub: str=None, type: str=None):
        """Claims - a model defined in OpenAPI

        :param email: The email of this Claims.
        :param phone: The phone of this Claims.
        :param scope: The scope of this Claims.
        :param sub: The sub of this Claims.
        :param type: The type of this Claims.
        """
        self.openapi_types = {
            'email': str,
            'phone': str,
            'scope': str,
            'sub': str,
            'type': str
        }

        self.attribute_map = {
            'email': 'email',
            'phone': 'phone',
            'scope': 'scope',
            'sub': 'sub',
            'type': 'type'
        }

        self._email = email
        self._phone = phone
        self._scope = scope
        self._sub = sub
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Claims':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Claims of this Claims.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this Claims.

        

        :return: The email of this Claims.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Claims.

        

        :param email: The email of this Claims.
        :type email: str
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this Claims.

        

        :return: The phone of this Claims.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Claims.

        

        :param phone: The phone of this Claims.
        :type phone: str
        """

        self._phone = phone

    @property
    def scope(self):
        """Gets the scope of this Claims.

        claim scope

        :return: The scope of this Claims.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this Claims.

        claim scope

        :param scope: The scope of this Claims.
        :type scope: str
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")

        self._scope = scope

    @property
    def sub(self):
        """Gets the sub of this Claims.

        UUID

        :return: The sub of this Claims.
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub):
        """Sets the sub of this Claims.

        UUID

        :param sub: The sub of this Claims.
        :type sub: str
        """
        if sub is None:
            raise ValueError("Invalid value for `sub`, must not be `None`")

        self._sub = sub

    @property
    def type(self):
        """Gets the type of this Claims.

        

        :return: The type of this Claims.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Claims.

        

        :param type: The type of this Claims.
        :type type: str
        """

        self._type = type
