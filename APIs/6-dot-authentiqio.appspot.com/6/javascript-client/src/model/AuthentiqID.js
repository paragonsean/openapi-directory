/**
 * Authentiq API
 * Strong authentication, without the passwords.
 *
 * The version of the OpenAPI document: 6
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AuthentiqID model module.
 * @module model/AuthentiqID
 * @version 6
 */
class AuthentiqID {
    /**
     * Constructs a new <code>AuthentiqID</code>.
     * Authentiq ID in JWT format, self-signed. 
     * @alias module:model/AuthentiqID
     * @param sub {String} UUID and public signing key
     */
    constructor(sub) { 
        
        AuthentiqID.initialize(this, sub);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sub) { 
        obj['sub'] = sub;
    }

    /**
     * Constructs a <code>AuthentiqID</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthentiqID} obj Optional instance to populate.
     * @return {module:model/AuthentiqID} The populated <code>AuthentiqID</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthentiqID();

            if (data.hasOwnProperty('devtoken')) {
                obj['devtoken'] = ApiClient.convertToType(data['devtoken'], 'String');
            }
            if (data.hasOwnProperty('sub')) {
                obj['sub'] = ApiClient.convertToType(data['sub'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthentiqID</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthentiqID</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AuthentiqID.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['devtoken'] && !(typeof data['devtoken'] === 'string' || data['devtoken'] instanceof String)) {
            throw new Error("Expected the field `devtoken` to be a primitive type in the JSON string but got " + data['devtoken']);
        }
        // ensure the json data is a string
        if (data['sub'] && !(typeof data['sub'] === 'string' || data['sub'] instanceof String)) {
            throw new Error("Expected the field `sub` to be a primitive type in the JSON string but got " + data['sub']);
        }

        return true;
    }


}

AuthentiqID.RequiredProperties = ["sub"];

/**
 * device token for push messages
 * @member {String} devtoken
 */
AuthentiqID.prototype['devtoken'] = undefined;

/**
 * UUID and public signing key
 * @member {String} sub
 */
AuthentiqID.prototype['sub'] = undefined;






export default AuthentiqID;

