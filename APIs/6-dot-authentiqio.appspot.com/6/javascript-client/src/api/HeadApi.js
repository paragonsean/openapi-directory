/**
 * Authentiq API
 * Strong authentication, without the passwords.
 *
 * The version of the OpenAPI document: 6
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';

/**
* Head service.
* @module api/HeadApi
* @version 6
*/
export default class HeadApi {

    /**
    * Constructs a new HeadApi. 
    * @alias module:api/HeadApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the keyPKHead_0 operation.
     * @callback module:api/HeadApi~keyPKHead_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * HEAD info on Authentiq ID 
     * @param {String} PK Public Signing Key - Authentiq ID (43 chars)
     * @param {module:api/HeadApi~keyPKHead_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    keyPKHead_0(PK, callback) {
      let postBody = null;
      // verify the required parameter 'PK' is set
      if (PK === undefined || PK === null) {
        throw new Error("Missing the required parameter 'PK' when calling keyPKHead_0");
      }

      let pathParams = {
        'PK': PK
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/key/{PK}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signRetrieveHead_0 operation.
     * @callback module:api/HeadApi~signRetrieveHead_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * HEAD to get the status of a verification job
     * @param {String} job Job ID (20 chars)
     * @param {module:api/HeadApi~signRetrieveHead_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    signRetrieveHead_0(job, callback) {
      let postBody = null;
      // verify the required parameter 'job' is set
      if (job === undefined || job === null) {
        throw new Error("Missing the required parameter 'job' when calling signRetrieveHead_0");
      }

      let pathParams = {
        'job': job
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/scope/{job}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
