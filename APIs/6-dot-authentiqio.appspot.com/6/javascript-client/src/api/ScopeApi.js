/**
 * Authentiq API
 * Strong authentication, without the passwords.
 *
 * The version of the OpenAPI document: 6
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Claims from '../model/Claims';
import Error from '../model/Error';
import JWT1 from '../model/JWT1';
import KeyBind200Response from '../model/KeyBind200Response';
import KeyRevoke200Response from '../model/KeyRevoke200Response';
import SignRequest201Response from '../model/SignRequest201Response';
import SignUpdate200Response from '../model/SignUpdate200Response';

/**
* Scope service.
* @module api/ScopeApi
* @version 6
*/
export default class ScopeApi {

    /**
    * Constructs a new ScopeApi. 
    * @alias module:api/ScopeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the signConfirm operation.
     * @callback module:api/ScopeApi~signConfirmCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyBind200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * this is a scope confirmation
     * @param {String} job Job ID (20 chars)
     * @param {module:api/ScopeApi~signConfirmCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyBind200Response}
     */
    signConfirm(job, callback) {
      let postBody = null;
      // verify the required parameter 'job' is set
      if (job === undefined || job === null) {
        throw new Error("Missing the required parameter 'job' when calling signConfirm");
      }

      let pathParams = {
        'job': job
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = KeyBind200Response;
      return this.apiClient.callApi(
        '/scope/{job}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signDelete operation.
     * @callback module:api/ScopeApi~signDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyRevoke200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * delete a verification job
     * @param {String} job Job ID (20 chars)
     * @param {module:api/ScopeApi~signDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyRevoke200Response}
     */
    signDelete(job, callback) {
      let postBody = null;
      // verify the required parameter 'job' is set
      if (job === undefined || job === null) {
        throw new Error("Missing the required parameter 'job' when calling signDelete");
      }

      let pathParams = {
        'job': job
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = KeyRevoke200Response;
      return this.apiClient.callApi(
        '/scope/{job}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signRequest operation.
     * @callback module:api/ScopeApi~signRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignRequest201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * scope verification request See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param {module:model/Claims} claims Claims of scope
     * @param {Object} opts Optional parameters
     * @param {Number} [test] test only mode, using test issuer
     * @param {module:api/ScopeApi~signRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignRequest201Response}
     */
    signRequest(claims, opts, callback) {
      opts = opts || {};
      let postBody = claims;
      // verify the required parameter 'claims' is set
      if (claims === undefined || claims === null) {
        throw new Error("Missing the required parameter 'claims' when calling signRequest");
      }

      let pathParams = {
      };
      let queryParams = {
        'test': opts['test']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/jwt'];
      let accepts = ['application/json', '*/*'];
      let returnType = SignRequest201Response;
      return this.apiClient.callApi(
        '/scope', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signRetrieve operation.
     * @callback module:api/ScopeApi~signRetrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JWT1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the status / current content of a verification job
     * @param {String} job Job ID (20 chars)
     * @param {module:api/ScopeApi~signRetrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JWT1}
     */
    signRetrieve(job, callback) {
      let postBody = null;
      // verify the required parameter 'job' is set
      if (job === undefined || job === null) {
        throw new Error("Missing the required parameter 'job' when calling signRetrieve");
      }

      let pathParams = {
        'job': job
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/jwt', '*/*'];
      let returnType = JWT1;
      return this.apiClient.callApi(
        '/scope/{job}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signRetrieveHead operation.
     * @callback module:api/ScopeApi~signRetrieveHeadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * HEAD to get the status of a verification job
     * @param {String} job Job ID (20 chars)
     * @param {module:api/ScopeApi~signRetrieveHeadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    signRetrieveHead(job, callback) {
      let postBody = null;
      // verify the required parameter 'job' is set
      if (job === undefined || job === null) {
        throw new Error("Missing the required parameter 'job' when calling signRetrieveHead");
      }

      let pathParams = {
        'job': job
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/scope/{job}', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signUpdate operation.
     * @callback module:api/ScopeApi~signUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * authority updates a JWT with its signature See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param {String} job Job ID (20 chars)
     * @param {module:api/ScopeApi~signUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignUpdate200Response}
     */
    signUpdate(job, callback) {
      let postBody = null;
      // verify the required parameter 'job' is set
      if (job === undefined || job === null) {
        throw new Error("Missing the required parameter 'job' when calling signUpdate");
      }

      let pathParams = {
        'job': job
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/jwt', '*/*'];
      let returnType = SignUpdate200Response;
      return this.apiClient.callApi(
        '/scope/{job}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
