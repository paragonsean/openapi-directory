/**
 * Authentiq API
 * Strong authentication, without the passwords.
 *
 * The version of the OpenAPI document: 6
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthentiqID from '../model/AuthentiqID';
import Claims from '../model/Claims';
import Error from '../model/Error';
import KeyBind200Response from '../model/KeyBind200Response';
import KeyRegister201Response from '../model/KeyRegister201Response';
import PushLoginRequest200Response from '../model/PushLoginRequest200Response';
import PushToken from '../model/PushToken';
import SignRequest201Response from '../model/SignRequest201Response';

/**
* Post service.
* @module api/PostApi
* @version 6
*/
export default class PostApi {

    /**
    * Constructs a new PostApi. 
    * @alias module:api/PostApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the keyRegister_0 operation.
     * @callback module:api/PostApi~keyRegister_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyRegister201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a new ID `JWT(sub, devtoken)`  v5: `JWT(sub, pk, devtoken, ...)`  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param {module:model/AuthentiqID} authentiqID Authentiq ID to register
     * @param {module:api/PostApi~keyRegister_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyRegister201Response}
     */
    keyRegister_0(authentiqID, callback) {
      let postBody = authentiqID;
      // verify the required parameter 'authentiqID' is set
      if (authentiqID === undefined || authentiqID === null) {
        throw new Error("Missing the required parameter 'authentiqID' when calling keyRegister_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/jwt'];
      let accepts = ['application/json', '*/*'];
      let returnType = KeyRegister201Response;
      return this.apiClient.callApi(
        '/key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the keyUpdate_0 operation.
     * @callback module:api/PostApi~keyUpdate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyBind200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * update properties of an Authentiq ID. (not operational in v4; use PUT for now)  v5: POST issuer-signed email & phone scopes in a self-signed JWT  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param {String} PK Public Signing Key - Authentiq ID (43 chars)
     * @param {module:model/AuthentiqID} authentiqID Authentiq ID to register
     * @param {module:api/PostApi~keyUpdate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyBind200Response}
     */
    keyUpdate_0(PK, authentiqID, callback) {
      let postBody = authentiqID;
      // verify the required parameter 'PK' is set
      if (PK === undefined || PK === null) {
        throw new Error("Missing the required parameter 'PK' when calling keyUpdate_0");
      }
      // verify the required parameter 'authentiqID' is set
      if (authentiqID === undefined || authentiqID === null) {
        throw new Error("Missing the required parameter 'authentiqID' when calling keyUpdate_0");
      }

      let pathParams = {
        'PK': PK
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/jwt'];
      let accepts = ['application/json', '*/*'];
      let returnType = KeyBind200Response;
      return this.apiClient.callApi(
        '/key/{PK}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pushLoginRequest_0 operation.
     * @callback module:api/PostApi~pushLoginRequest_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PushLoginRequest200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * push sign-in request See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param {String} callback URI App will connect to
     * @param {module:model/PushToken} pushToken Push Token.
     * @param {module:api/PostApi~pushLoginRequest_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PushLoginRequest200Response}
     */
    pushLoginRequest_0(callback, pushToken, callback) {
      let postBody = pushToken;
      // verify the required parameter 'callback' is set
      if (callback === undefined || callback === null) {
        throw new Error("Missing the required parameter 'callback' when calling pushLoginRequest_0");
      }
      // verify the required parameter 'pushToken' is set
      if (pushToken === undefined || pushToken === null) {
        throw new Error("Missing the required parameter 'pushToken' when calling pushLoginRequest_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'callback': callback
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/jwt'];
      let accepts = ['application/json', '*/*'];
      let returnType = PushLoginRequest200Response;
      return this.apiClient.callApi(
        '/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signConfirm_0 operation.
     * @callback module:api/PostApi~signConfirm_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyBind200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * this is a scope confirmation
     * @param {String} job Job ID (20 chars)
     * @param {module:api/PostApi~signConfirm_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyBind200Response}
     */
    signConfirm_0(job, callback) {
      let postBody = null;
      // verify the required parameter 'job' is set
      if (job === undefined || job === null) {
        throw new Error("Missing the required parameter 'job' when calling signConfirm_0");
      }

      let pathParams = {
        'job': job
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = KeyBind200Response;
      return this.apiClient.callApi(
        '/scope/{job}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signRequest_0 operation.
     * @callback module:api/PostApi~signRequest_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SignRequest201Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * scope verification request See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param {module:model/Claims} claims Claims of scope
     * @param {Object} opts Optional parameters
     * @param {Number} [test] test only mode, using test issuer
     * @param {module:api/PostApi~signRequest_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignRequest201Response}
     */
    signRequest_0(claims, opts, callback) {
      opts = opts || {};
      let postBody = claims;
      // verify the required parameter 'claims' is set
      if (claims === undefined || claims === null) {
        throw new Error("Missing the required parameter 'claims' when calling signRequest_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'test': opts['test']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/jwt'];
      let accepts = ['application/json', '*/*'];
      let returnType = SignRequest201Response;
      return this.apiClient.callApi(
        '/scope', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
