/**
 * Authentiq API
 * Strong authentication, without the passwords.
 *
 * The version of the OpenAPI document: 6
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import JWT from '../model/JWT';
import JWT1 from '../model/JWT1';

/**
* Get service.
* @module api/GetApi
* @version 6
*/
export default class GetApi {

    /**
    * Constructs a new GetApi. 
    * @alias module:api/GetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the keyRetrieve_0 operation.
     * @callback module:api/GetApi~keyRetrieve_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/JWT} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get public details of an Authentiq ID. 
     * @param {String} PK Public Signing Key - Authentiq ID (43 chars)
     * @param {module:api/GetApi~keyRetrieve_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JWT}
     */
    keyRetrieve_0(PK, callback) {
      let postBody = null;
      // verify the required parameter 'PK' is set
      if (PK === undefined || PK === null) {
        throw new Error("Missing the required parameter 'PK' when calling keyRetrieve_0");
      }

      let pathParams = {
        'PK': PK
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', '*/*'];
      let returnType = JWT;
      return this.apiClient.callApi(
        '/key/{PK}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signRetrieve_0 operation.
     * @callback module:api/GetApi~signRetrieve_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/JWT1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * get the status / current content of a verification job
     * @param {String} job Job ID (20 chars)
     * @param {module:api/GetApi~signRetrieve_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JWT1}
     */
    signRetrieve_0(job, callback) {
      let postBody = null;
      // verify the required parameter 'job' is set
      if (job === undefined || job === null) {
        throw new Error("Missing the required parameter 'job' when calling signRetrieve_0");
      }

      let pathParams = {
        'job': job
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'application/jwt', '*/*'];
      let returnType = JWT1;
      return this.apiClient.callApi(
        '/scope/{job}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
