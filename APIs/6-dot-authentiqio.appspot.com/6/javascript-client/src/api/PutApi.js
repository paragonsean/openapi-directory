/**
 * Authentiq API
 * Strong authentication, without the passwords.
 *
 * The version of the OpenAPI document: 6
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthentiqID from '../model/AuthentiqID';
import Error from '../model/Error';
import KeyBind200Response from '../model/KeyBind200Response';
import SignUpdate200Response from '../model/SignUpdate200Response';

/**
* Put service.
* @module api/PutApi
* @version 6
*/
export default class PutApi {

    /**
    * Constructs a new PutApi. 
    * @alias module:api/PutApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the keyBind_0 operation.
     * @callback module:api/PutApi~keyBind_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/KeyBind200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Authentiq ID by replacing the object.  v4: `JWT(sub,email,phone)` to bind email/phone hash;   v5: POST issuer-signed email & phone scopes and PUT to update registration `JWT(sub, pk, devtoken, ...)`  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param {String} PK Public Signing Key - Authentiq ID (43 chars)
     * @param {module:model/AuthentiqID} authentiqID Authentiq ID to register
     * @param {module:api/PutApi~keyBind_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeyBind200Response}
     */
    keyBind_0(PK, authentiqID, callback) {
      let postBody = authentiqID;
      // verify the required parameter 'PK' is set
      if (PK === undefined || PK === null) {
        throw new Error("Missing the required parameter 'PK' when calling keyBind_0");
      }
      // verify the required parameter 'authentiqID' is set
      if (authentiqID === undefined || authentiqID === null) {
        throw new Error("Missing the required parameter 'authentiqID' when calling keyBind_0");
      }

      let pathParams = {
        'PK': PK
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/jwt'];
      let accepts = ['application/json', '*/*'];
      let returnType = KeyBind200Response;
      return this.apiClient.callApi(
        '/key/{PK}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signUpdate_0 operation.
     * @callback module:api/PutApi~signUpdate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SignUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * authority updates a JWT with its signature See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param {String} job Job ID (20 chars)
     * @param {module:api/PutApi~signUpdate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignUpdate200Response}
     */
    signUpdate_0(job, callback) {
      let postBody = null;
      // verify the required parameter 'job' is set
      if (job === undefined || job === null) {
        throw new Error("Missing the required parameter 'job' when calling signUpdate_0");
      }

      let pathParams = {
        'job': job
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/jwt', '*/*'];
      let returnType = SignUpdate200Response;
      return this.apiClient.callApi(
        '/scope/{job}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
