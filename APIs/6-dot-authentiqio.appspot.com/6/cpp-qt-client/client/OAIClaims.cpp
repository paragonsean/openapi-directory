/**
 * Authentiq API
 * Strong authentication, without the passwords.
 *
 * The version of the OpenAPI document: 6
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClaims.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClaims::OAIClaims(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClaims::OAIClaims() {
    this->initializeModel();
}

OAIClaims::~OAIClaims() {}

void OAIClaims::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;

    m_sub_isSet = false;
    m_sub_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIClaims::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClaims::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;

    m_sub_isValid = ::OpenAPI::fromJsonValue(m_sub, json[QString("sub")]);
    m_sub_isSet = !json[QString("sub")].isNull() && m_sub_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIClaims::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClaims::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_scope_isSet) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    if (m_sub_isSet) {
        obj.insert(QString("sub"), ::OpenAPI::toJsonValue(m_sub));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIClaims::getEmail() const {
    return m_email;
}
void OAIClaims::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIClaims::is_email_Set() const{
    return m_email_isSet;
}

bool OAIClaims::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIClaims::getPhone() const {
    return m_phone;
}
void OAIClaims::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIClaims::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIClaims::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIClaims::getScope() const {
    return m_scope;
}
void OAIClaims::setScope(const QString &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIClaims::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIClaims::is_scope_Valid() const{
    return m_scope_isValid;
}

QString OAIClaims::getSub() const {
    return m_sub;
}
void OAIClaims::setSub(const QString &sub) {
    m_sub = sub;
    m_sub_isSet = true;
}

bool OAIClaims::is_sub_Set() const{
    return m_sub_isSet;
}

bool OAIClaims::is_sub_Valid() const{
    return m_sub_isValid;
}

QString OAIClaims::getType() const {
    return m_type;
}
void OAIClaims::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIClaims::is_type_Set() const{
    return m_type_isSet;
}

bool OAIClaims::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIClaims::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClaims::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_scope_isValid && m_sub_isValid && true;
}

} // namespace OpenAPI
