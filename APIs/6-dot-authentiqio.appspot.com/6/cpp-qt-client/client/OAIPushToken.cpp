/**
 * Authentiq API
 * Strong authentication, without the passwords.
 *
 * The version of the OpenAPI document: 6
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPushToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPushToken::OAIPushToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPushToken::OAIPushToken() {
    this->initializeModel();
}

OAIPushToken::~OAIPushToken() {}

void OAIPushToken::initializeModel() {

    m_aud_isSet = false;
    m_aud_isValid = false;

    m_exp_isSet = false;
    m_exp_isValid = false;

    m_iat_isSet = false;
    m_iat_isValid = false;

    m_iss_isSet = false;
    m_iss_isValid = false;

    m_nbf_isSet = false;
    m_nbf_isValid = false;

    m_sub_isSet = false;
    m_sub_isValid = false;
}

void OAIPushToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPushToken::fromJsonObject(QJsonObject json) {

    m_aud_isValid = ::OpenAPI::fromJsonValue(m_aud, json[QString("aud")]);
    m_aud_isSet = !json[QString("aud")].isNull() && m_aud_isValid;

    m_exp_isValid = ::OpenAPI::fromJsonValue(m_exp, json[QString("exp")]);
    m_exp_isSet = !json[QString("exp")].isNull() && m_exp_isValid;

    m_iat_isValid = ::OpenAPI::fromJsonValue(m_iat, json[QString("iat")]);
    m_iat_isSet = !json[QString("iat")].isNull() && m_iat_isValid;

    m_iss_isValid = ::OpenAPI::fromJsonValue(m_iss, json[QString("iss")]);
    m_iss_isSet = !json[QString("iss")].isNull() && m_iss_isValid;

    m_nbf_isValid = ::OpenAPI::fromJsonValue(m_nbf, json[QString("nbf")]);
    m_nbf_isSet = !json[QString("nbf")].isNull() && m_nbf_isValid;

    m_sub_isValid = ::OpenAPI::fromJsonValue(m_sub, json[QString("sub")]);
    m_sub_isSet = !json[QString("sub")].isNull() && m_sub_isValid;
}

QString OAIPushToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPushToken::asJsonObject() const {
    QJsonObject obj;
    if (m_aud_isSet) {
        obj.insert(QString("aud"), ::OpenAPI::toJsonValue(m_aud));
    }
    if (m_exp_isSet) {
        obj.insert(QString("exp"), ::OpenAPI::toJsonValue(m_exp));
    }
    if (m_iat_isSet) {
        obj.insert(QString("iat"), ::OpenAPI::toJsonValue(m_iat));
    }
    if (m_iss_isSet) {
        obj.insert(QString("iss"), ::OpenAPI::toJsonValue(m_iss));
    }
    if (m_nbf_isSet) {
        obj.insert(QString("nbf"), ::OpenAPI::toJsonValue(m_nbf));
    }
    if (m_sub_isSet) {
        obj.insert(QString("sub"), ::OpenAPI::toJsonValue(m_sub));
    }
    return obj;
}

QString OAIPushToken::getAud() const {
    return m_aud;
}
void OAIPushToken::setAud(const QString &aud) {
    m_aud = aud;
    m_aud_isSet = true;
}

bool OAIPushToken::is_aud_Set() const{
    return m_aud_isSet;
}

bool OAIPushToken::is_aud_Valid() const{
    return m_aud_isValid;
}

qint32 OAIPushToken::getExp() const {
    return m_exp;
}
void OAIPushToken::setExp(const qint32 &exp) {
    m_exp = exp;
    m_exp_isSet = true;
}

bool OAIPushToken::is_exp_Set() const{
    return m_exp_isSet;
}

bool OAIPushToken::is_exp_Valid() const{
    return m_exp_isValid;
}

qint32 OAIPushToken::getIat() const {
    return m_iat;
}
void OAIPushToken::setIat(const qint32 &iat) {
    m_iat = iat;
    m_iat_isSet = true;
}

bool OAIPushToken::is_iat_Set() const{
    return m_iat_isSet;
}

bool OAIPushToken::is_iat_Valid() const{
    return m_iat_isValid;
}

QString OAIPushToken::getIss() const {
    return m_iss;
}
void OAIPushToken::setIss(const QString &iss) {
    m_iss = iss;
    m_iss_isSet = true;
}

bool OAIPushToken::is_iss_Set() const{
    return m_iss_isSet;
}

bool OAIPushToken::is_iss_Valid() const{
    return m_iss_isValid;
}

qint32 OAIPushToken::getNbf() const {
    return m_nbf;
}
void OAIPushToken::setNbf(const qint32 &nbf) {
    m_nbf = nbf;
    m_nbf_isSet = true;
}

bool OAIPushToken::is_nbf_Set() const{
    return m_nbf_isSet;
}

bool OAIPushToken::is_nbf_Valid() const{
    return m_nbf_isValid;
}

QString OAIPushToken::getSub() const {
    return m_sub;
}
void OAIPushToken::setSub(const QString &sub) {
    m_sub = sub;
    m_sub_isSet = true;
}

bool OAIPushToken::is_sub_Set() const{
    return m_sub_isSet;
}

bool OAIPushToken::is_sub_Valid() const{
    return m_sub_isValid;
}

bool OAIPushToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aud_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nbf_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPushToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_aud_isValid && m_iss_isValid && m_sub_isValid && true;
}

} // namespace OpenAPI
