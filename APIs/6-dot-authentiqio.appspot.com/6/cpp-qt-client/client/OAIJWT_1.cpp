/**
 * Authentiq API
 * Strong authentication, without the passwords.
 *
 * The version of the OpenAPI document: 6
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJWT_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJWT_1::OAIJWT_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJWT_1::OAIJWT_1() {
    this->initializeModel();
}

OAIJWT_1::~OAIJWT_1() {}

void OAIJWT_1::initializeModel() {

    m_exp_isSet = false;
    m_exp_isValid = false;

    m_field_isSet = false;
    m_field_isValid = false;

    m_sub_isSet = false;
    m_sub_isValid = false;
}

void OAIJWT_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJWT_1::fromJsonObject(QJsonObject json) {

    m_exp_isValid = ::OpenAPI::fromJsonValue(m_exp, json[QString("exp")]);
    m_exp_isSet = !json[QString("exp")].isNull() && m_exp_isValid;

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_sub_isValid = ::OpenAPI::fromJsonValue(m_sub, json[QString("sub")]);
    m_sub_isSet = !json[QString("sub")].isNull() && m_sub_isValid;
}

QString OAIJWT_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJWT_1::asJsonObject() const {
    QJsonObject obj;
    if (m_exp_isSet) {
        obj.insert(QString("exp"), ::OpenAPI::toJsonValue(m_exp));
    }
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_sub_isSet) {
        obj.insert(QString("sub"), ::OpenAPI::toJsonValue(m_sub));
    }
    return obj;
}

qint32 OAIJWT_1::getExp() const {
    return m_exp;
}
void OAIJWT_1::setExp(const qint32 &exp) {
    m_exp = exp;
    m_exp_isSet = true;
}

bool OAIJWT_1::is_exp_Set() const{
    return m_exp_isSet;
}

bool OAIJWT_1::is_exp_Valid() const{
    return m_exp_isValid;
}

QString OAIJWT_1::getField() const {
    return m_field;
}
void OAIJWT_1::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIJWT_1::is_field_Set() const{
    return m_field_isSet;
}

bool OAIJWT_1::is_field_Valid() const{
    return m_field_isValid;
}

QString OAIJWT_1::getSub() const {
    return m_sub;
}
void OAIJWT_1::setSub(const QString &sub) {
    m_sub = sub;
    m_sub_isSet = true;
}

bool OAIJWT_1::is_sub_Set() const{
    return m_sub_isSet;
}

bool OAIJWT_1::is_sub_Valid() const{
    return m_sub_isValid;
}

bool OAIJWT_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJWT_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
