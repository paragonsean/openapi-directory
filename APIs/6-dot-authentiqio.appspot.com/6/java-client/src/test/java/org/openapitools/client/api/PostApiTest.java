/*
 * Authentiq API
 * Strong authentication, without the passwords.
 *
 * The version of the OpenAPI document: 6
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AuthentiqID;
import org.openapitools.client.model.Claims;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.KeyBind200Response;
import org.openapitools.client.model.KeyRegister201Response;
import org.openapitools.client.model.PushLoginRequest200Response;
import org.openapitools.client.model.PushToken;
import org.openapitools.client.model.SignRequest201Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PostApi
 */
@Disabled
public class PostApiTest {

    private final PostApi api = new PostApi();

    /**
     * Register a new ID &#x60;JWT(sub, devtoken)&#x60;  v5: &#x60;JWT(sub, pk, devtoken, ...)&#x60;  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keyRegister_0Test() throws ApiException {
        AuthentiqID authentiqID = null;
        KeyRegister201Response response = api.keyRegister_0(authentiqID);
        // TODO: test validations
    }

    /**
     * update properties of an Authentiq ID. (not operational in v4; use PUT for now)  v5: POST issuer-signed email &amp; phone scopes in a self-signed JWT  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keyUpdate_0Test() throws ApiException {
        String PK = null;
        AuthentiqID authentiqID = null;
        KeyBind200Response response = api.keyUpdate_0(PK, authentiqID);
        // TODO: test validations
    }

    /**
     * push sign-in request See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pushLoginRequest_0Test() throws ApiException {
        String paramCallback = null;
        PushToken pushToken = null;
        PushLoginRequest200Response response = api.pushLoginRequest_0(paramCallback, pushToken);
        // TODO: test validations
    }

    /**
     * this is a scope confirmation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signConfirm_0Test() throws ApiException {
        String job = null;
        KeyBind200Response response = api.signConfirm_0(job);
        // TODO: test validations
    }

    /**
     * scope verification request See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signRequest_0Test() throws ApiException {
        Claims claims = null;
        Integer test = null;
        SignRequest201Response response = api.signRequest_0(claims, test);
        // TODO: test validations
    }

}
