/*
 * Authentiq API
 * Strong authentication, without the passwords.
 *
 * The version of the OpenAPI document: 6
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AuthentiqID;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.JWT;
import org.openapitools.client.model.KeyBind200Response;
import org.openapitools.client.model.KeyRegister201Response;
import org.openapitools.client.model.KeyRevoke200Response;
import org.openapitools.client.model.KeyRevokeNosecret200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for KeyApi
 */
@Disabled
public class KeyApiTest {

    private final KeyApi api = new KeyApi();

    /**
     * Update Authentiq ID by replacing the object.  v4: &#x60;JWT(sub,email,phone)&#x60; to bind email/phone hash;   v5: POST issuer-signed email &amp; phone scopes and PUT to update registration &#x60;JWT(sub, pk, devtoken, ...)&#x60;  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keyBindTest() throws ApiException {
        String PK = null;
        AuthentiqID authentiqID = null;
        KeyBind200Response response = api.keyBind(PK, authentiqID);
        // TODO: test validations
    }

    /**
     * HEAD info on Authentiq ID 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keyPKHeadTest() throws ApiException {
        String PK = null;
        api.keyPKHead(PK);
        // TODO: test validations
    }

    /**
     * Register a new ID &#x60;JWT(sub, devtoken)&#x60;  v5: &#x60;JWT(sub, pk, devtoken, ...)&#x60;  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keyRegisterTest() throws ApiException {
        AuthentiqID authentiqID = null;
        KeyRegister201Response response = api.keyRegister(authentiqID);
        // TODO: test validations
    }

    /**
     * Get public details of an Authentiq ID. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keyRetrieveTest() throws ApiException {
        String PK = null;
        JWT response = api.keyRetrieve(PK);
        // TODO: test validations
    }

    /**
     * Revoke an Identity (Key) with a revocation secret
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keyRevokeTest() throws ApiException {
        String PK = null;
        String secret = null;
        KeyRevoke200Response response = api.keyRevoke(PK, secret);
        // TODO: test validations
    }

    /**
     * Revoke an Authentiq ID using email &amp; phone.  If called with &#x60;email&#x60; and &#x60;phone&#x60; only, a verification code  will be sent by email. Do a second call adding &#x60;code&#x60; to  complete the revocation. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keyRevokeNosecretTest() throws ApiException {
        String email = null;
        String phone = null;
        String code = null;
        KeyRevokeNosecret200Response response = api.keyRevokeNosecret(email, phone, code);
        // TODO: test validations
    }

    /**
     * update properties of an Authentiq ID. (not operational in v4; use PUT for now)  v5: POST issuer-signed email &amp; phone scopes in a self-signed JWT  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keyUpdateTest() throws ApiException {
        String PK = null;
        AuthentiqID authentiqID = null;
        KeyBind200Response response = api.keyUpdate(PK, authentiqID);
        // TODO: test validations
    }

}
