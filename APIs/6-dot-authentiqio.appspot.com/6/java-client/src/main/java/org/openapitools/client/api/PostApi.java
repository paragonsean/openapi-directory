/*
 * Authentiq API
 * Strong authentication, without the passwords.
 *
 * The version of the OpenAPI document: 6
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthentiqID;
import org.openapitools.client.model.Claims;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.KeyBind200Response;
import org.openapitools.client.model.KeyRegister201Response;
import org.openapitools.client.model.PushLoginRequest200Response;
import org.openapitools.client.model.PushToken;
import org.openapitools.client.model.SignRequest201Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PostApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PostApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PostApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for keyRegister_0
     * @param authentiqID Authentiq ID to register (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully registered </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Key already registered &#x60;duplicate-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyRegister_0Call(AuthentiqID authentiqID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authentiqID;

        // create path and map variables
        String localVarPath = "/key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/jwt"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyRegister_0ValidateBeforeCall(AuthentiqID authentiqID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authentiqID' is set
        if (authentiqID == null) {
            throw new ApiException("Missing the required parameter 'authentiqID' when calling keyRegister_0(Async)");
        }

        return keyRegister_0Call(authentiqID, _callback);

    }

    /**
     * 
     * Register a new ID &#x60;JWT(sub, devtoken)&#x60;  v5: &#x60;JWT(sub, pk, devtoken, ...)&#x60;  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param authentiqID Authentiq ID to register (required)
     * @return KeyRegister201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully registered </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Key already registered &#x60;duplicate-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public KeyRegister201Response keyRegister_0(AuthentiqID authentiqID) throws ApiException {
        ApiResponse<KeyRegister201Response> localVarResp = keyRegister_0WithHttpInfo(authentiqID);
        return localVarResp.getData();
    }

    /**
     * 
     * Register a new ID &#x60;JWT(sub, devtoken)&#x60;  v5: &#x60;JWT(sub, pk, devtoken, ...)&#x60;  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param authentiqID Authentiq ID to register (required)
     * @return ApiResponse&lt;KeyRegister201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully registered </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Key already registered &#x60;duplicate-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyRegister201Response> keyRegister_0WithHttpInfo(AuthentiqID authentiqID) throws ApiException {
        okhttp3.Call localVarCall = keyRegister_0ValidateBeforeCall(authentiqID, null);
        Type localVarReturnType = new TypeToken<KeyRegister201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Register a new ID &#x60;JWT(sub, devtoken)&#x60;  v5: &#x60;JWT(sub, pk, devtoken, ...)&#x60;  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param authentiqID Authentiq ID to register (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully registered </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Key already registered &#x60;duplicate-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyRegister_0Async(AuthentiqID authentiqID, final ApiCallback<KeyRegister201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyRegister_0ValidateBeforeCall(authentiqID, _callback);
        Type localVarReturnType = new TypeToken<KeyRegister201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keyUpdate_0
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param authentiqID Authentiq ID to register (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyUpdate_0Call(String PK, AuthentiqID authentiqID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authentiqID;

        // create path and map variables
        String localVarPath = "/key/{PK}"
            .replace("{" + "PK" + "}", localVarApiClient.escapeString(PK.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/jwt"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyUpdate_0ValidateBeforeCall(String PK, AuthentiqID authentiqID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'PK' is set
        if (PK == null) {
            throw new ApiException("Missing the required parameter 'PK' when calling keyUpdate_0(Async)");
        }

        // verify the required parameter 'authentiqID' is set
        if (authentiqID == null) {
            throw new ApiException("Missing the required parameter 'authentiqID' when calling keyUpdate_0(Async)");
        }

        return keyUpdate_0Call(PK, authentiqID, _callback);

    }

    /**
     * 
     * update properties of an Authentiq ID. (not operational in v4; use PUT for now)  v5: POST issuer-signed email &amp; phone scopes in a self-signed JWT  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param authentiqID Authentiq ID to register (required)
     * @return KeyBind200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public KeyBind200Response keyUpdate_0(String PK, AuthentiqID authentiqID) throws ApiException {
        ApiResponse<KeyBind200Response> localVarResp = keyUpdate_0WithHttpInfo(PK, authentiqID);
        return localVarResp.getData();
    }

    /**
     * 
     * update properties of an Authentiq ID. (not operational in v4; use PUT for now)  v5: POST issuer-signed email &amp; phone scopes in a self-signed JWT  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param authentiqID Authentiq ID to register (required)
     * @return ApiResponse&lt;KeyBind200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyBind200Response> keyUpdate_0WithHttpInfo(String PK, AuthentiqID authentiqID) throws ApiException {
        okhttp3.Call localVarCall = keyUpdate_0ValidateBeforeCall(PK, authentiqID, null);
        Type localVarReturnType = new TypeToken<KeyBind200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update properties of an Authentiq ID. (not operational in v4; use PUT for now)  v5: POST issuer-signed email &amp; phone scopes in a self-signed JWT  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param authentiqID Authentiq ID to register (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyUpdate_0Async(String PK, AuthentiqID authentiqID, final ApiCallback<KeyBind200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyUpdate_0ValidateBeforeCall(PK, authentiqID, _callback);
        Type localVarReturnType = new TypeToken<KeyBind200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pushLoginRequest_0
     * @param paramCallback URI App will connect to (required)
     * @param pushToken Push Token. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for this callback audience &#x60;aud-error&#x60; or JWT should be self-signed &#x60;auth-error&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pushLoginRequest_0Call(String paramCallback, PushToken pushToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pushToken;

        // create path and map variables
        String localVarPath = "/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/jwt"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pushLoginRequest_0ValidateBeforeCall(String paramCallback, PushToken pushToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'paramCallback' is set
        if (paramCallback == null) {
            throw new ApiException("Missing the required parameter 'paramCallback' when calling pushLoginRequest_0(Async)");
        }

        // verify the required parameter 'pushToken' is set
        if (pushToken == null) {
            throw new ApiException("Missing the required parameter 'pushToken' when calling pushLoginRequest_0(Async)");
        }

        return pushLoginRequest_0Call(paramCallback, pushToken, _callback);

    }

    /**
     * 
     * push sign-in request See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param paramCallback URI App will connect to (required)
     * @param pushToken Push Token. (required)
     * @return PushLoginRequest200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for this callback audience &#x60;aud-error&#x60; or JWT should be self-signed &#x60;auth-error&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public PushLoginRequest200Response pushLoginRequest_0(String paramCallback, PushToken pushToken) throws ApiException {
        ApiResponse<PushLoginRequest200Response> localVarResp = pushLoginRequest_0WithHttpInfo(paramCallback, pushToken);
        return localVarResp.getData();
    }

    /**
     * 
     * push sign-in request See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param paramCallback URI App will connect to (required)
     * @param pushToken Push Token. (required)
     * @return ApiResponse&lt;PushLoginRequest200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for this callback audience &#x60;aud-error&#x60; or JWT should be self-signed &#x60;auth-error&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PushLoginRequest200Response> pushLoginRequest_0WithHttpInfo(String paramCallback, PushToken pushToken) throws ApiException {
        okhttp3.Call localVarCall = pushLoginRequest_0ValidateBeforeCall(paramCallback, pushToken, null);
        Type localVarReturnType = new TypeToken<PushLoginRequest200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * push sign-in request See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param paramCallback URI App will connect to (required)
     * @param pushToken Push Token. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized for this callback audience &#x60;aud-error&#x60; or JWT should be self-signed &#x60;auth-error&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pushLoginRequest_0Async(String paramCallback, PushToken pushToken, final ApiCallback<PushLoginRequest200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = pushLoginRequest_0ValidateBeforeCall(paramCallback, pushToken, _callback);
        Type localVarReturnType = new TypeToken<PushLoginRequest200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signConfirm_0
     * @param job Job ID (20 chars) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully confirmed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Confirmation error &#x60;auth-error&#x60; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> JWT POSTed to scope &#x60;not-supported&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signConfirm_0Call(String job, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scope/{job}"
            .replace("{" + "job" + "}", localVarApiClient.escapeString(job.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signConfirm_0ValidateBeforeCall(String job, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'job' is set
        if (job == null) {
            throw new ApiException("Missing the required parameter 'job' when calling signConfirm_0(Async)");
        }

        return signConfirm_0Call(job, _callback);

    }

    /**
     * 
     * this is a scope confirmation
     * @param job Job ID (20 chars) (required)
     * @return KeyBind200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully confirmed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Confirmation error &#x60;auth-error&#x60; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> JWT POSTed to scope &#x60;not-supported&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public KeyBind200Response signConfirm_0(String job) throws ApiException {
        ApiResponse<KeyBind200Response> localVarResp = signConfirm_0WithHttpInfo(job);
        return localVarResp.getData();
    }

    /**
     * 
     * this is a scope confirmation
     * @param job Job ID (20 chars) (required)
     * @return ApiResponse&lt;KeyBind200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully confirmed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Confirmation error &#x60;auth-error&#x60; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> JWT POSTed to scope &#x60;not-supported&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyBind200Response> signConfirm_0WithHttpInfo(String job) throws ApiException {
        okhttp3.Call localVarCall = signConfirm_0ValidateBeforeCall(job, null);
        Type localVarReturnType = new TypeToken<KeyBind200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * this is a scope confirmation
     * @param job Job ID (20 chars) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully confirmed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Confirmation error &#x60;auth-error&#x60; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> JWT POSTed to scope &#x60;not-supported&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signConfirm_0Async(String job, final ApiCallback<KeyBind200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = signConfirm_0ValidateBeforeCall(job, _callback);
        Type localVarReturnType = new TypeToken<KeyBind200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signRequest_0
     * @param claims Claims of scope (required)
     * @param test test only mode, using test issuer (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests on same address / number &#x60;rate-limit&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signRequest_0Call(Claims claims, Integer test, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = claims;

        // create path and map variables
        String localVarPath = "/scope";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (test != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("test", test));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/jwt"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signRequest_0ValidateBeforeCall(Claims claims, Integer test, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'claims' is set
        if (claims == null) {
            throw new ApiException("Missing the required parameter 'claims' when calling signRequest_0(Async)");
        }

        return signRequest_0Call(claims, test, _callback);

    }

    /**
     * 
     * scope verification request See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param claims Claims of scope (required)
     * @param test test only mode, using test issuer (optional)
     * @return SignRequest201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests on same address / number &#x60;rate-limit&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public SignRequest201Response signRequest_0(Claims claims, Integer test) throws ApiException {
        ApiResponse<SignRequest201Response> localVarResp = signRequest_0WithHttpInfo(claims, test);
        return localVarResp.getData();
    }

    /**
     * 
     * scope verification request See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param claims Claims of scope (required)
     * @param test test only mode, using test issuer (optional)
     * @return ApiResponse&lt;SignRequest201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests on same address / number &#x60;rate-limit&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignRequest201Response> signRequest_0WithHttpInfo(Claims claims, Integer test) throws ApiException {
        okhttp3.Call localVarCall = signRequest_0ValidateBeforeCall(claims, test, null);
        Type localVarReturnType = new TypeToken<SignRequest201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * scope verification request See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param claims Claims of scope (required)
     * @param test test only mode, using test issuer (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests on same address / number &#x60;rate-limit&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signRequest_0Async(Claims claims, Integer test, final ApiCallback<SignRequest201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = signRequest_0ValidateBeforeCall(claims, test, _callback);
        Type localVarReturnType = new TypeToken<SignRequest201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
