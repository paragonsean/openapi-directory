/*
 * Authentiq API
 * Strong authentication, without the passwords.
 *
 * The version of the OpenAPI document: 6
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HeadApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HeadApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HeadApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for keyPKHead_0
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Key is revoked &#x60;revoked-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyPKHead_0Call(String PK, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/key/{PK}"
            .replace("{" + "PK" + "}", localVarApiClient.escapeString(PK.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyPKHead_0ValidateBeforeCall(String PK, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'PK' is set
        if (PK == null) {
            throw new ApiException("Missing the required parameter 'PK' when calling keyPKHead_0(Async)");
        }

        return keyPKHead_0Call(PK, _callback);

    }

    /**
     * 
     * HEAD info on Authentiq ID 
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Key is revoked &#x60;revoked-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public void keyPKHead_0(String PK) throws ApiException {
        keyPKHead_0WithHttpInfo(PK);
    }

    /**
     * 
     * HEAD info on Authentiq ID 
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Key is revoked &#x60;revoked-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> keyPKHead_0WithHttpInfo(String PK) throws ApiException {
        okhttp3.Call localVarCall = keyPKHead_0ValidateBeforeCall(PK, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * HEAD info on Authentiq ID 
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Key is revoked &#x60;revoked-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyPKHead_0Async(String PK, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyPKHead_0ValidateBeforeCall(PK, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for signRetrieveHead_0
     * @param job Job ID (20 chars) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmed and signed </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Confirmed, waiting for signing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signRetrieveHead_0Call(String job, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scope/{job}"
            .replace("{" + "job" + "}", localVarApiClient.escapeString(job.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signRetrieveHead_0ValidateBeforeCall(String job, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'job' is set
        if (job == null) {
            throw new ApiException("Missing the required parameter 'job' when calling signRetrieveHead_0(Async)");
        }

        return signRetrieveHead_0Call(job, _callback);

    }

    /**
     * 
     * HEAD to get the status of a verification job
     * @param job Job ID (20 chars) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmed and signed </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Confirmed, waiting for signing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public void signRetrieveHead_0(String job) throws ApiException {
        signRetrieveHead_0WithHttpInfo(job);
    }

    /**
     * 
     * HEAD to get the status of a verification job
     * @param job Job ID (20 chars) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmed and signed </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Confirmed, waiting for signing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> signRetrieveHead_0WithHttpInfo(String job) throws ApiException {
        okhttp3.Call localVarCall = signRetrieveHead_0ValidateBeforeCall(job, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * HEAD to get the status of a verification job
     * @param job Job ID (20 chars) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmed and signed </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Confirmed, waiting for signing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signRetrieveHead_0Async(String job, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = signRetrieveHead_0ValidateBeforeCall(job, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
