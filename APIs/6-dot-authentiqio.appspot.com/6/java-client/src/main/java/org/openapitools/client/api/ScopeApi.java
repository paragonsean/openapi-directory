/*
 * Authentiq API
 * Strong authentication, without the passwords.
 *
 * The version of the OpenAPI document: 6
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Claims;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.JWT1;
import org.openapitools.client.model.KeyBind200Response;
import org.openapitools.client.model.KeyRevoke200Response;
import org.openapitools.client.model.SignRequest201Response;
import org.openapitools.client.model.SignUpdate200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScopeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ScopeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScopeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for signConfirm
     * @param job Job ID (20 chars) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully confirmed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Confirmation error &#x60;auth-error&#x60; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> JWT POSTed to scope &#x60;not-supported&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signConfirmCall(String job, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scope/{job}"
            .replace("{" + "job" + "}", localVarApiClient.escapeString(job.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signConfirmValidateBeforeCall(String job, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'job' is set
        if (job == null) {
            throw new ApiException("Missing the required parameter 'job' when calling signConfirm(Async)");
        }

        return signConfirmCall(job, _callback);

    }

    /**
     * 
     * this is a scope confirmation
     * @param job Job ID (20 chars) (required)
     * @return KeyBind200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully confirmed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Confirmation error &#x60;auth-error&#x60; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> JWT POSTed to scope &#x60;not-supported&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public KeyBind200Response signConfirm(String job) throws ApiException {
        ApiResponse<KeyBind200Response> localVarResp = signConfirmWithHttpInfo(job);
        return localVarResp.getData();
    }

    /**
     * 
     * this is a scope confirmation
     * @param job Job ID (20 chars) (required)
     * @return ApiResponse&lt;KeyBind200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully confirmed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Confirmation error &#x60;auth-error&#x60; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> JWT POSTed to scope &#x60;not-supported&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyBind200Response> signConfirmWithHttpInfo(String job) throws ApiException {
        okhttp3.Call localVarCall = signConfirmValidateBeforeCall(job, null);
        Type localVarReturnType = new TypeToken<KeyBind200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * this is a scope confirmation
     * @param job Job ID (20 chars) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Successfully confirmed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Confirmation error &#x60;auth-error&#x60; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> JWT POSTed to scope &#x60;not-supported&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signConfirmAsync(String job, final ApiCallback<KeyBind200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = signConfirmValidateBeforeCall(job, _callback);
        Type localVarReturnType = new TypeToken<KeyBind200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signDelete
     * @param job Job ID (20 chars) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signDeleteCall(String job, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scope/{job}"
            .replace("{" + "job" + "}", localVarApiClient.escapeString(job.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signDeleteValidateBeforeCall(String job, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'job' is set
        if (job == null) {
            throw new ApiException("Missing the required parameter 'job' when calling signDelete(Async)");
        }

        return signDeleteCall(job, _callback);

    }

    /**
     * 
     * delete a verification job
     * @param job Job ID (20 chars) (required)
     * @return KeyRevoke200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public KeyRevoke200Response signDelete(String job) throws ApiException {
        ApiResponse<KeyRevoke200Response> localVarResp = signDeleteWithHttpInfo(job);
        return localVarResp.getData();
    }

    /**
     * 
     * delete a verification job
     * @param job Job ID (20 chars) (required)
     * @return ApiResponse&lt;KeyRevoke200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyRevoke200Response> signDeleteWithHttpInfo(String job) throws ApiException {
        okhttp3.Call localVarCall = signDeleteValidateBeforeCall(job, null);
        Type localVarReturnType = new TypeToken<KeyRevoke200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete a verification job
     * @param job Job ID (20 chars) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signDeleteAsync(String job, final ApiCallback<KeyRevoke200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = signDeleteValidateBeforeCall(job, _callback);
        Type localVarReturnType = new TypeToken<KeyRevoke200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signRequest
     * @param claims Claims of scope (required)
     * @param test test only mode, using test issuer (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests on same address / number &#x60;rate-limit&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signRequestCall(Claims claims, Integer test, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = claims;

        // create path and map variables
        String localVarPath = "/scope";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (test != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("test", test));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/jwt"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signRequestValidateBeforeCall(Claims claims, Integer test, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'claims' is set
        if (claims == null) {
            throw new ApiException("Missing the required parameter 'claims' when calling signRequest(Async)");
        }

        return signRequestCall(claims, test, _callback);

    }

    /**
     * 
     * scope verification request See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param claims Claims of scope (required)
     * @param test test only mode, using test issuer (optional)
     * @return SignRequest201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests on same address / number &#x60;rate-limit&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public SignRequest201Response signRequest(Claims claims, Integer test) throws ApiException {
        ApiResponse<SignRequest201Response> localVarResp = signRequestWithHttpInfo(claims, test);
        return localVarResp.getData();
    }

    /**
     * 
     * scope verification request See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param claims Claims of scope (required)
     * @param test test only mode, using test issuer (optional)
     * @return ApiResponse&lt;SignRequest201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests on same address / number &#x60;rate-limit&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignRequest201Response> signRequestWithHttpInfo(Claims claims, Integer test) throws ApiException {
        okhttp3.Call localVarCall = signRequestValidateBeforeCall(claims, test, null);
        Type localVarReturnType = new TypeToken<SignRequest201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * scope verification request See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param claims Claims of scope (required)
     * @param test test only mode, using test issuer (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests on same address / number &#x60;rate-limit&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signRequestAsync(Claims claims, Integer test, final ApiCallback<SignRequest201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = signRequestValidateBeforeCall(claims, test, _callback);
        Type localVarReturnType = new TypeToken<SignRequest201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signRetrieve
     * @param job Job ID (20 chars) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response (JWT) </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Confirmed, waiting for signing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signRetrieveCall(String job, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scope/{job}"
            .replace("{" + "job" + "}", localVarApiClient.escapeString(job.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/jwt",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signRetrieveValidateBeforeCall(String job, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'job' is set
        if (job == null) {
            throw new ApiException("Missing the required parameter 'job' when calling signRetrieve(Async)");
        }

        return signRetrieveCall(job, _callback);

    }

    /**
     * 
     * get the status / current content of a verification job
     * @param job Job ID (20 chars) (required)
     * @return JWT1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response (JWT) </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Confirmed, waiting for signing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public JWT1 signRetrieve(String job) throws ApiException {
        ApiResponse<JWT1> localVarResp = signRetrieveWithHttpInfo(job);
        return localVarResp.getData();
    }

    /**
     * 
     * get the status / current content of a verification job
     * @param job Job ID (20 chars) (required)
     * @return ApiResponse&lt;JWT1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response (JWT) </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Confirmed, waiting for signing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JWT1> signRetrieveWithHttpInfo(String job) throws ApiException {
        okhttp3.Call localVarCall = signRetrieveValidateBeforeCall(job, null);
        Type localVarReturnType = new TypeToken<JWT1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get the status / current content of a verification job
     * @param job Job ID (20 chars) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response (JWT) </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Confirmed, waiting for signing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signRetrieveAsync(String job, final ApiCallback<JWT1> _callback) throws ApiException {

        okhttp3.Call localVarCall = signRetrieveValidateBeforeCall(job, _callback);
        Type localVarReturnType = new TypeToken<JWT1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signRetrieveHead
     * @param job Job ID (20 chars) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmed and signed </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Confirmed, waiting for signing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signRetrieveHeadCall(String job, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scope/{job}"
            .replace("{" + "job" + "}", localVarApiClient.escapeString(job.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signRetrieveHeadValidateBeforeCall(String job, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'job' is set
        if (job == null) {
            throw new ApiException("Missing the required parameter 'job' when calling signRetrieveHead(Async)");
        }

        return signRetrieveHeadCall(job, _callback);

    }

    /**
     * 
     * HEAD to get the status of a verification job
     * @param job Job ID (20 chars) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmed and signed </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Confirmed, waiting for signing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public void signRetrieveHead(String job) throws ApiException {
        signRetrieveHeadWithHttpInfo(job);
    }

    /**
     * 
     * HEAD to get the status of a verification job
     * @param job Job ID (20 chars) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmed and signed </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Confirmed, waiting for signing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> signRetrieveHeadWithHttpInfo(String job) throws ApiException {
        okhttp3.Call localVarCall = signRetrieveHeadValidateBeforeCall(job, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * HEAD to get the status of a verification job
     * @param job Job ID (20 chars) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Confirmed and signed </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Confirmed, waiting for signing </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signRetrieveHeadAsync(String job, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = signRetrieveHeadValidateBeforeCall(job, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for signUpdate
     * @param job Job ID (20 chars) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Job not confirmed yet &#x60;confirm-first&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signUpdateCall(String job, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/scope/{job}"
            .replace("{" + "job" + "}", localVarApiClient.escapeString(job.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/jwt",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signUpdateValidateBeforeCall(String job, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'job' is set
        if (job == null) {
            throw new ApiException("Missing the required parameter 'job' when calling signUpdate(Async)");
        }

        return signUpdateCall(job, _callback);

    }

    /**
     * 
     * authority updates a JWT with its signature See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param job Job ID (20 chars) (required)
     * @return SignUpdate200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Job not confirmed yet &#x60;confirm-first&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public SignUpdate200Response signUpdate(String job) throws ApiException {
        ApiResponse<SignUpdate200Response> localVarResp = signUpdateWithHttpInfo(job);
        return localVarResp.getData();
    }

    /**
     * 
     * authority updates a JWT with its signature See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param job Job ID (20 chars) (required)
     * @return ApiResponse&lt;SignUpdate200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Job not confirmed yet &#x60;confirm-first&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignUpdate200Response> signUpdateWithHttpInfo(String job) throws ApiException {
        okhttp3.Call localVarCall = signUpdateValidateBeforeCall(job, null);
        Type localVarReturnType = new TypeToken<SignUpdate200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * authority updates a JWT with its signature See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param job Job ID (20 chars) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job not found &#x60;unknown-job&#x60; </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Job not confirmed yet &#x60;confirm-first&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signUpdateAsync(String job, final ApiCallback<SignUpdate200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = signUpdateValidateBeforeCall(job, _callback);
        Type localVarReturnType = new TypeToken<SignUpdate200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
