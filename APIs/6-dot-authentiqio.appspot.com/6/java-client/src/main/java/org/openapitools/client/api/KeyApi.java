/*
 * Authentiq API
 * Strong authentication, without the passwords.
 *
 * The version of the OpenAPI document: 6
 * Contact: hello@authentiq.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AuthentiqID;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.JWT;
import org.openapitools.client.model.KeyBind200Response;
import org.openapitools.client.model.KeyRegister201Response;
import org.openapitools.client.model.KeyRevoke200Response;
import org.openapitools.client.model.KeyRevokeNosecret200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class KeyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public KeyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public KeyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for keyBind
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param authentiqID Authentiq ID to register (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already bound to another key &#x60;duplicate-hash&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyBindCall(String PK, AuthentiqID authentiqID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authentiqID;

        // create path and map variables
        String localVarPath = "/key/{PK}"
            .replace("{" + "PK" + "}", localVarApiClient.escapeString(PK.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/jwt"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyBindValidateBeforeCall(String PK, AuthentiqID authentiqID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'PK' is set
        if (PK == null) {
            throw new ApiException("Missing the required parameter 'PK' when calling keyBind(Async)");
        }

        // verify the required parameter 'authentiqID' is set
        if (authentiqID == null) {
            throw new ApiException("Missing the required parameter 'authentiqID' when calling keyBind(Async)");
        }

        return keyBindCall(PK, authentiqID, _callback);

    }

    /**
     * 
     * Update Authentiq ID by replacing the object.  v4: &#x60;JWT(sub,email,phone)&#x60; to bind email/phone hash;   v5: POST issuer-signed email &amp; phone scopes and PUT to update registration &#x60;JWT(sub, pk, devtoken, ...)&#x60;  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param authentiqID Authentiq ID to register (required)
     * @return KeyBind200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already bound to another key &#x60;duplicate-hash&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public KeyBind200Response keyBind(String PK, AuthentiqID authentiqID) throws ApiException {
        ApiResponse<KeyBind200Response> localVarResp = keyBindWithHttpInfo(PK, authentiqID);
        return localVarResp.getData();
    }

    /**
     * 
     * Update Authentiq ID by replacing the object.  v4: &#x60;JWT(sub,email,phone)&#x60; to bind email/phone hash;   v5: POST issuer-signed email &amp; phone scopes and PUT to update registration &#x60;JWT(sub, pk, devtoken, ...)&#x60;  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param authentiqID Authentiq ID to register (required)
     * @return ApiResponse&lt;KeyBind200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already bound to another key &#x60;duplicate-hash&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyBind200Response> keyBindWithHttpInfo(String PK, AuthentiqID authentiqID) throws ApiException {
        okhttp3.Call localVarCall = keyBindValidateBeforeCall(PK, authentiqID, null);
        Type localVarReturnType = new TypeToken<KeyBind200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update Authentiq ID by replacing the object.  v4: &#x60;JWT(sub,email,phone)&#x60; to bind email/phone hash;   v5: POST issuer-signed email &amp; phone scopes and PUT to update registration &#x60;JWT(sub, pk, devtoken, ...)&#x60;  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param authentiqID Authentiq ID to register (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Already bound to another key &#x60;duplicate-hash&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyBindAsync(String PK, AuthentiqID authentiqID, final ApiCallback<KeyBind200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyBindValidateBeforeCall(PK, authentiqID, _callback);
        Type localVarReturnType = new TypeToken<KeyBind200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keyPKHead
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Key is revoked &#x60;revoked-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyPKHeadCall(String PK, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/key/{PK}"
            .replace("{" + "PK" + "}", localVarApiClient.escapeString(PK.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyPKHeadValidateBeforeCall(String PK, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'PK' is set
        if (PK == null) {
            throw new ApiException("Missing the required parameter 'PK' when calling keyPKHead(Async)");
        }

        return keyPKHeadCall(PK, _callback);

    }

    /**
     * 
     * HEAD info on Authentiq ID 
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Key is revoked &#x60;revoked-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public void keyPKHead(String PK) throws ApiException {
        keyPKHeadWithHttpInfo(PK);
    }

    /**
     * 
     * HEAD info on Authentiq ID 
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Key is revoked &#x60;revoked-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> keyPKHeadWithHttpInfo(String PK) throws ApiException {
        okhttp3.Call localVarCall = keyPKHeadValidateBeforeCall(PK, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * HEAD info on Authentiq ID 
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Key exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Key is revoked &#x60;revoked-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyPKHeadAsync(String PK, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyPKHeadValidateBeforeCall(PK, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for keyRegister
     * @param authentiqID Authentiq ID to register (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully registered </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Key already registered &#x60;duplicate-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyRegisterCall(AuthentiqID authentiqID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authentiqID;

        // create path and map variables
        String localVarPath = "/key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/jwt"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyRegisterValidateBeforeCall(AuthentiqID authentiqID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authentiqID' is set
        if (authentiqID == null) {
            throw new ApiException("Missing the required parameter 'authentiqID' when calling keyRegister(Async)");
        }

        return keyRegisterCall(authentiqID, _callback);

    }

    /**
     * 
     * Register a new ID &#x60;JWT(sub, devtoken)&#x60;  v5: &#x60;JWT(sub, pk, devtoken, ...)&#x60;  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param authentiqID Authentiq ID to register (required)
     * @return KeyRegister201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully registered </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Key already registered &#x60;duplicate-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public KeyRegister201Response keyRegister(AuthentiqID authentiqID) throws ApiException {
        ApiResponse<KeyRegister201Response> localVarResp = keyRegisterWithHttpInfo(authentiqID);
        return localVarResp.getData();
    }

    /**
     * 
     * Register a new ID &#x60;JWT(sub, devtoken)&#x60;  v5: &#x60;JWT(sub, pk, devtoken, ...)&#x60;  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param authentiqID Authentiq ID to register (required)
     * @return ApiResponse&lt;KeyRegister201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully registered </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Key already registered &#x60;duplicate-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyRegister201Response> keyRegisterWithHttpInfo(AuthentiqID authentiqID) throws ApiException {
        okhttp3.Call localVarCall = keyRegisterValidateBeforeCall(authentiqID, null);
        Type localVarReturnType = new TypeToken<KeyRegister201Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Register a new ID &#x60;JWT(sub, devtoken)&#x60;  v5: &#x60;JWT(sub, pk, devtoken, ...)&#x60;  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param authentiqID Authentiq ID to register (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully registered </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Key already registered &#x60;duplicate-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyRegisterAsync(AuthentiqID authentiqID, final ApiCallback<KeyRegister201Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyRegisterValidateBeforeCall(authentiqID, _callback);
        Type localVarReturnType = new TypeToken<KeyRegister201Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keyRetrieve
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Key is revoked (gone). &#x60;revoked-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyRetrieveCall(String PK, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/key/{PK}"
            .replace("{" + "PK" + "}", localVarApiClient.escapeString(PK.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyRetrieveValidateBeforeCall(String PK, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'PK' is set
        if (PK == null) {
            throw new ApiException("Missing the required parameter 'PK' when calling keyRetrieve(Async)");
        }

        return keyRetrieveCall(PK, _callback);

    }

    /**
     * 
     * Get public details of an Authentiq ID. 
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @return JWT
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Key is revoked (gone). &#x60;revoked-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public JWT keyRetrieve(String PK) throws ApiException {
        ApiResponse<JWT> localVarResp = keyRetrieveWithHttpInfo(PK);
        return localVarResp.getData();
    }

    /**
     * 
     * Get public details of an Authentiq ID. 
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @return ApiResponse&lt;JWT&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Key is revoked (gone). &#x60;revoked-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JWT> keyRetrieveWithHttpInfo(String PK) throws ApiException {
        okhttp3.Call localVarCall = keyRetrieveValidateBeforeCall(PK, null);
        Type localVarReturnType = new TypeToken<JWT>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get public details of an Authentiq ID. 
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> Key is revoked (gone). &#x60;revoked-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyRetrieveAsync(String PK, final ApiCallback<JWT> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyRetrieveValidateBeforeCall(PK, _callback);
        Type localVarReturnType = new TypeToken<JWT>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keyRevoke
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param secret revokation secret (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Key not found / wrong code &#x60;auth-error&#x60; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyRevokeCall(String PK, String secret, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/key/{PK}"
            .replace("{" + "PK" + "}", localVarApiClient.escapeString(PK.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (secret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret", secret));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyRevokeValidateBeforeCall(String PK, String secret, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'PK' is set
        if (PK == null) {
            throw new ApiException("Missing the required parameter 'PK' when calling keyRevoke(Async)");
        }

        // verify the required parameter 'secret' is set
        if (secret == null) {
            throw new ApiException("Missing the required parameter 'secret' when calling keyRevoke(Async)");
        }

        return keyRevokeCall(PK, secret, _callback);

    }

    /**
     * 
     * Revoke an Identity (Key) with a revocation secret
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param secret revokation secret (required)
     * @return KeyRevoke200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Key not found / wrong code &#x60;auth-error&#x60; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public KeyRevoke200Response keyRevoke(String PK, String secret) throws ApiException {
        ApiResponse<KeyRevoke200Response> localVarResp = keyRevokeWithHttpInfo(PK, secret);
        return localVarResp.getData();
    }

    /**
     * 
     * Revoke an Identity (Key) with a revocation secret
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param secret revokation secret (required)
     * @return ApiResponse&lt;KeyRevoke200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Key not found / wrong code &#x60;auth-error&#x60; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyRevoke200Response> keyRevokeWithHttpInfo(String PK, String secret) throws ApiException {
        okhttp3.Call localVarCall = keyRevokeValidateBeforeCall(PK, secret, null);
        Type localVarReturnType = new TypeToken<KeyRevoke200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Revoke an Identity (Key) with a revocation secret
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param secret revokation secret (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Key not found / wrong code &#x60;auth-error&#x60; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyRevokeAsync(String PK, String secret, final ApiCallback<KeyRevoke200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyRevokeValidateBeforeCall(PK, secret, _callback);
        Type localVarReturnType = new TypeToken<KeyRevoke200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keyRevokeNosecret
     * @param email primary email associated to Key (ID) (required)
     * @param phone primary phone number, international representation (required)
     * @param code verification code sent by email (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error &#x60;auth-error&#x60; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Confirm with code sent &#x60;confirm-first&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyRevokeNosecretCall(String email, String phone, String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (phone != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone", phone));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyRevokeNosecretValidateBeforeCall(String email, String phone, String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling keyRevokeNosecret(Async)");
        }

        // verify the required parameter 'phone' is set
        if (phone == null) {
            throw new ApiException("Missing the required parameter 'phone' when calling keyRevokeNosecret(Async)");
        }

        return keyRevokeNosecretCall(email, phone, code, _callback);

    }

    /**
     * 
     * Revoke an Authentiq ID using email &amp; phone.  If called with &#x60;email&#x60; and &#x60;phone&#x60; only, a verification code  will be sent by email. Do a second call adding &#x60;code&#x60; to  complete the revocation. 
     * @param email primary email associated to Key (ID) (required)
     * @param phone primary phone number, international representation (required)
     * @param code verification code sent by email (optional)
     * @return KeyRevokeNosecret200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error &#x60;auth-error&#x60; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Confirm with code sent &#x60;confirm-first&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public KeyRevokeNosecret200Response keyRevokeNosecret(String email, String phone, String code) throws ApiException {
        ApiResponse<KeyRevokeNosecret200Response> localVarResp = keyRevokeNosecretWithHttpInfo(email, phone, code);
        return localVarResp.getData();
    }

    /**
     * 
     * Revoke an Authentiq ID using email &amp; phone.  If called with &#x60;email&#x60; and &#x60;phone&#x60; only, a verification code  will be sent by email. Do a second call adding &#x60;code&#x60; to  complete the revocation. 
     * @param email primary email associated to Key (ID) (required)
     * @param phone primary phone number, international representation (required)
     * @param code verification code sent by email (optional)
     * @return ApiResponse&lt;KeyRevokeNosecret200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error &#x60;auth-error&#x60; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Confirm with code sent &#x60;confirm-first&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyRevokeNosecret200Response> keyRevokeNosecretWithHttpInfo(String email, String phone, String code) throws ApiException {
        okhttp3.Call localVarCall = keyRevokeNosecretValidateBeforeCall(email, phone, code, null);
        Type localVarReturnType = new TypeToken<KeyRevokeNosecret200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Revoke an Authentiq ID using email &amp; phone.  If called with &#x60;email&#x60; and &#x60;phone&#x60; only, a verification code  will be sent by email. Do a second call adding &#x60;code&#x60; to  complete the revocation. 
     * @param email primary email associated to Key (ID) (required)
     * @param phone primary phone number, international representation (required)
     * @param code verification code sent by email (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error &#x60;auth-error&#x60; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Confirm with code sent &#x60;confirm-first&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyRevokeNosecretAsync(String email, String phone, String code, final ApiCallback<KeyRevokeNosecret200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyRevokeNosecretValidateBeforeCall(email, phone, code, _callback);
        Type localVarReturnType = new TypeToken<KeyRevokeNosecret200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keyUpdate
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param authentiqID Authentiq ID to register (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyUpdateCall(String PK, AuthentiqID authentiqID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = authentiqID;

        // create path and map variables
        String localVarPath = "/key/{PK}"
            .replace("{" + "PK" + "}", localVarApiClient.escapeString(PK.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/jwt"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keyUpdateValidateBeforeCall(String PK, AuthentiqID authentiqID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'PK' is set
        if (PK == null) {
            throw new ApiException("Missing the required parameter 'PK' when calling keyUpdate(Async)");
        }

        // verify the required parameter 'authentiqID' is set
        if (authentiqID == null) {
            throw new ApiException("Missing the required parameter 'authentiqID' when calling keyUpdate(Async)");
        }

        return keyUpdateCall(PK, authentiqID, _callback);

    }

    /**
     * 
     * update properties of an Authentiq ID. (not operational in v4; use PUT for now)  v5: POST issuer-signed email &amp; phone scopes in a self-signed JWT  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param authentiqID Authentiq ID to register (required)
     * @return KeyBind200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public KeyBind200Response keyUpdate(String PK, AuthentiqID authentiqID) throws ApiException {
        ApiResponse<KeyBind200Response> localVarResp = keyUpdateWithHttpInfo(PK, authentiqID);
        return localVarResp.getData();
    }

    /**
     * 
     * update properties of an Authentiq ID. (not operational in v4; use PUT for now)  v5: POST issuer-signed email &amp; phone scopes in a self-signed JWT  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param authentiqID Authentiq ID to register (required)
     * @return ApiResponse&lt;KeyBind200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeyBind200Response> keyUpdateWithHttpInfo(String PK, AuthentiqID authentiqID) throws ApiException {
        okhttp3.Call localVarCall = keyUpdateValidateBeforeCall(PK, authentiqID, null);
        Type localVarReturnType = new TypeToken<KeyBind200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * update properties of an Authentiq ID. (not operational in v4; use PUT for now)  v5: POST issuer-signed email &amp; phone scopes in a self-signed JWT  See: https://github.com/skion/authentiq/wiki/JWT-Examples 
     * @param PK Public Signing Key - Authentiq ID (43 chars) (required)
     * @param authentiqID Authentiq ID to register (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown key &#x60;unknown-key&#x60; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keyUpdateAsync(String PK, AuthentiqID authentiqID, final ApiCallback<KeyBind200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = keyUpdateValidateBeforeCall(PK, authentiqID, _callback);
        Type localVarReturnType = new TypeToken<KeyBind200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
