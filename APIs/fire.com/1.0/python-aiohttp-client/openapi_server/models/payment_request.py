# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server.models.order_details import OrderDetails
from openapi_server import util


class PaymentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: str=None, amount: int=None, collect_fields: str=None, currency: Currency=None, description: str=None, expiry: datetime=None, ican_to: int=None, mandatory_fields: str=None, max_number_payments: int=None, my_ref: str=None, order_details: OrderDetails=None, payment_request_code: str=None, payment_uuid: str=None, return_url: str=None, status: str=None, transaction_type: str=None, type: str=None, webhook_url: str=None):
        """PaymentRequest - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this PaymentRequest.
        :param amount: The amount of this PaymentRequest.
        :param collect_fields: The collect_fields of this PaymentRequest.
        :param currency: The currency of this PaymentRequest.
        :param description: The description of this PaymentRequest.
        :param expiry: The expiry of this PaymentRequest.
        :param ican_to: The ican_to of this PaymentRequest.
        :param mandatory_fields: The mandatory_fields of this PaymentRequest.
        :param max_number_payments: The max_number_payments of this PaymentRequest.
        :param my_ref: The my_ref of this PaymentRequest.
        :param order_details: The order_details of this PaymentRequest.
        :param payment_request_code: The payment_request_code of this PaymentRequest.
        :param payment_uuid: The payment_uuid of this PaymentRequest.
        :param return_url: The return_url of this PaymentRequest.
        :param status: The status of this PaymentRequest.
        :param transaction_type: The transaction_type of this PaymentRequest.
        :param type: The type of this PaymentRequest.
        :param webhook_url: The webhook_url of this PaymentRequest.
        """
        self.openapi_types = {
            'additional_fields': str,
            'amount': int,
            'collect_fields': str,
            'currency': Currency,
            'description': str,
            'expiry': datetime,
            'ican_to': int,
            'mandatory_fields': str,
            'max_number_payments': int,
            'my_ref': str,
            'order_details': OrderDetails,
            'payment_request_code': str,
            'payment_uuid': str,
            'return_url': str,
            'status': str,
            'transaction_type': str,
            'type': str,
            'webhook_url': str
        }

        self.attribute_map = {
            'additional_fields': 'additionalFields',
            'amount': 'amount',
            'collect_fields': 'collectFields',
            'currency': 'currency',
            'description': 'description',
            'expiry': 'expiry',
            'ican_to': 'icanTo',
            'mandatory_fields': 'mandatoryFields',
            'max_number_payments': 'maxNumberPayments',
            'my_ref': 'myRef',
            'order_details': 'orderDetails',
            'payment_request_code': 'paymentRequestCode',
            'payment_uuid': 'paymentUuid',
            'return_url': 'returnUrl',
            'status': 'status',
            'transaction_type': 'transactionType',
            'type': 'type',
            'webhook_url': 'webhookUrl'
        }

        self._additional_fields = additional_fields
        self._amount = amount
        self._collect_fields = collect_fields
        self._currency = currency
        self._description = description
        self._expiry = expiry
        self._ican_to = ican_to
        self._mandatory_fields = mandatory_fields
        self._max_number_payments = max_number_payments
        self._my_ref = my_ref
        self._order_details = order_details
        self._payment_request_code = payment_request_code
        self._payment_uuid = payment_uuid
        self._return_url = return_url
        self._status = status
        self._transaction_type = transaction_type
        self._type = type
        self._webhook_url = webhook_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The paymentRequest of this PaymentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this PaymentRequest.

        These fields will be dispalyed to the payer when using the hosted option. You can choose to display any of `ORDER_ID`, `PRODUCT_ID`, `CUSTOMER_ID`, `CUSTOMER_NUMBER` and `COMMENT2` to the payer.

        :return: The additional_fields of this PaymentRequest.
        :rtype: str
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this PaymentRequest.

        These fields will be dispalyed to the payer when using the hosted option. You can choose to display any of `ORDER_ID`, `PRODUCT_ID`, `CUSTOMER_ID`, `CUSTOMER_NUMBER` and `COMMENT2` to the payer.

        :param additional_fields: The additional_fields of this PaymentRequest.
        :type additional_fields: str
        """

        self._additional_fields = additional_fields

    @property
    def amount(self):
        """Gets the amount of this PaymentRequest.

        The requested amount to pay. Note the last two digits represent pennies/cents, (e.g., £1.00 = 100).

        :return: The amount of this PaymentRequest.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentRequest.

        The requested amount to pay. Note the last two digits represent pennies/cents, (e.g., £1.00 = 100).

        :param amount: The amount of this PaymentRequest.
        :type amount: int
        """

        self._amount = amount

    @property
    def collect_fields(self):
        """Gets the collect_fields of this PaymentRequest.

        For the hosted option, the payer will be asked to fill in these fields but they will not be mandatory. You can choose to collect any of the payer's `ADDRESS`, `REFERENCE` and/or `COMMENT1`. If you choose to collect these fields from the payer, you cannot set 'delivery’, 'variableReference’ or 'comment1’ fields respectively.

        :return: The collect_fields of this PaymentRequest.
        :rtype: str
        """
        return self._collect_fields

    @collect_fields.setter
    def collect_fields(self, collect_fields):
        """Sets the collect_fields of this PaymentRequest.

        For the hosted option, the payer will be asked to fill in these fields but they will not be mandatory. You can choose to collect any of the payer's `ADDRESS`, `REFERENCE` and/or `COMMENT1`. If you choose to collect these fields from the payer, you cannot set 'delivery’, 'variableReference’ or 'comment1’ fields respectively.

        :param collect_fields: The collect_fields of this PaymentRequest.
        :type collect_fields: str
        """

        self._collect_fields = collect_fields

    @property
    def currency(self):
        """Gets the currency of this PaymentRequest.


        :return: The currency of this PaymentRequest.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PaymentRequest.


        :param currency: The currency of this PaymentRequest.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this PaymentRequest.

        A public facing description of the request. This will be shown to the user when they tap or scan the request.

        :return: The description of this PaymentRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentRequest.

        A public facing description of the request. This will be shown to the user when they tap or scan the request.

        :param description: The description of this PaymentRequest.
        :type description: str
        """

        self._description = description

    @property
    def expiry(self):
        """Gets the expiry of this PaymentRequest.

        This is the expiry of the payment request. After this time, the payment cannot be paid.

        :return: The expiry of this PaymentRequest.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this PaymentRequest.

        This is the expiry of the payment request. After this time, the payment cannot be paid.

        :param expiry: The expiry of this PaymentRequest.
        :type expiry: datetime
        """

        self._expiry = expiry

    @property
    def ican_to(self):
        """Gets the ican_to of this PaymentRequest.

        The ican of the account to collect the funds into. Must be one of your fire.com Accounts.

        :return: The ican_to of this PaymentRequest.
        :rtype: int
        """
        return self._ican_to

    @ican_to.setter
    def ican_to(self, ican_to):
        """Sets the ican_to of this PaymentRequest.

        The ican of the account to collect the funds into. Must be one of your fire.com Accounts.

        :param ican_to: The ican_to of this PaymentRequest.
        :type ican_to: int
        """

        self._ican_to = ican_to

    @property
    def mandatory_fields(self):
        """Gets the mandatory_fields of this PaymentRequest.

        For the hosted option, these fields will be madatory for the payer to fill in on the hosted payment page. You can choose to collect any the payer's `ADDRESS`, `REFERENCE` and/or `COMMENT1`. If you choose to collect these fields from the payer, you cannot set 'delivery’, 'variableReference’ or 'comment1’ fields respectively.

        :return: The mandatory_fields of this PaymentRequest.
        :rtype: str
        """
        return self._mandatory_fields

    @mandatory_fields.setter
    def mandatory_fields(self, mandatory_fields):
        """Sets the mandatory_fields of this PaymentRequest.

        For the hosted option, these fields will be madatory for the payer to fill in on the hosted payment page. You can choose to collect any the payer's `ADDRESS`, `REFERENCE` and/or `COMMENT1`. If you choose to collect these fields from the payer, you cannot set 'delivery’, 'variableReference’ or 'comment1’ fields respectively.

        :param mandatory_fields: The mandatory_fields of this PaymentRequest.
        :type mandatory_fields: str
        """

        self._mandatory_fields = mandatory_fields

    @property
    def max_number_payments(self):
        """Gets the max_number_payments of this PaymentRequest.

        The max number of people who can pay this request. Must be set to 1 for the ECOMMERCE_GOODS and ECOMMERCE_SERVICES types.

        :return: The max_number_payments of this PaymentRequest.
        :rtype: int
        """
        return self._max_number_payments

    @max_number_payments.setter
    def max_number_payments(self, max_number_payments):
        """Sets the max_number_payments of this PaymentRequest.

        The max number of people who can pay this request. Must be set to 1 for the ECOMMERCE_GOODS and ECOMMERCE_SERVICES types.

        :param max_number_payments: The max_number_payments of this PaymentRequest.
        :type max_number_payments: int
        """

        self._max_number_payments = max_number_payments

    @property
    def my_ref(self):
        """Gets the my_ref of this PaymentRequest.

        An internal description of the request.

        :return: The my_ref of this PaymentRequest.
        :rtype: str
        """
        return self._my_ref

    @my_ref.setter
    def my_ref(self, my_ref):
        """Sets the my_ref of this PaymentRequest.

        An internal description of the request.

        :param my_ref: The my_ref of this PaymentRequest.
        :type my_ref: str
        """

        self._my_ref = my_ref

    @property
    def order_details(self):
        """Gets the order_details of this PaymentRequest.


        :return: The order_details of this PaymentRequest.
        :rtype: OrderDetails
        """
        return self._order_details

    @order_details.setter
    def order_details(self, order_details):
        """Sets the order_details of this PaymentRequest.


        :param order_details: The order_details of this PaymentRequest.
        :type order_details: OrderDetails
        """

        self._order_details = order_details

    @property
    def payment_request_code(self):
        """Gets the payment_request_code of this PaymentRequest.

        The code that was returned when you created the payment request.

        :return: The payment_request_code of this PaymentRequest.
        :rtype: str
        """
        return self._payment_request_code

    @payment_request_code.setter
    def payment_request_code(self, payment_request_code):
        """Sets the payment_request_code of this PaymentRequest.

        The code that was returned when you created the payment request.

        :param payment_request_code: The payment_request_code of this PaymentRequest.
        :type payment_request_code: str
        """
        if payment_request_code is not None and len(payment_request_code) > 8:
            raise ValueError("Invalid value for `payment_request_code`, length must be less than or equal to `8`")
        if payment_request_code is not None and len(payment_request_code) < 8:
            raise ValueError("Invalid value for `payment_request_code`, length must be greater than or equal to `8`")

        self._payment_request_code = payment_request_code

    @property
    def payment_uuid(self):
        """Gets the payment_uuid of this PaymentRequest.

        A unique id for the transaction.

        :return: The payment_uuid of this PaymentRequest.
        :rtype: str
        """
        return self._payment_uuid

    @payment_uuid.setter
    def payment_uuid(self, payment_uuid):
        """Sets the payment_uuid of this PaymentRequest.

        A unique id for the transaction.

        :param payment_uuid: The payment_uuid of this PaymentRequest.
        :type payment_uuid: str
        """

        self._payment_uuid = payment_uuid

    @property
    def return_url(self):
        """Gets the return_url of this PaymentRequest.

        The merchant return URL where the customer will be re-directed to with the result of the transaction.

        :return: The return_url of this PaymentRequest.
        :rtype: str
        """
        return self._return_url

    @return_url.setter
    def return_url(self, return_url):
        """Sets the return_url of this PaymentRequest.

        The merchant return URL where the customer will be re-directed to with the result of the transaction.

        :param return_url: The return_url of this PaymentRequest.
        :type return_url: str
        """

        self._return_url = return_url

    @property
    def status(self):
        """Gets the status of this PaymentRequest.

        The status of the transaction

        :return: The status of this PaymentRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentRequest.

        The status of the transaction

        :param status: The status of this PaymentRequest.
        :type status: str
        """
        allowed_values = ["AWAITING_AUTHORISATION", "AUTHORISED", "AWAITING_MULTI_AUTHORISATION", "NOT_AUTHORISED", "PAID", "REJECTED", "ACCEPTED", "RECEIVED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def transaction_type(self):
        """Gets the transaction_type of this PaymentRequest.

        The type of payment request payment

        :return: The transaction_type of this PaymentRequest.
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this PaymentRequest.

        The type of payment request payment

        :param transaction_type: The transaction_type of this PaymentRequest.
        :type transaction_type: str
        """
        allowed_values = ["REFUND_REQUEST", "PAYMENT"]  # noqa: E501
        if transaction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_type` ({0}), must be one of {1}"
                .format(transaction_type, allowed_values)
            )

        self._transaction_type = transaction_type

    @property
    def type(self):
        """Gets the type of this PaymentRequest.

        The type of Fire Open Payment that was created

        :return: The type of this PaymentRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentRequest.

        The type of Fire Open Payment that was created

        :param type: The type of this PaymentRequest.
        :type type: str
        """
        allowed_values = ["OTHER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def webhook_url(self):
        """Gets the webhook_url of this PaymentRequest.

        A URL to be called in the background with the details of the payment after the payment is complete

        :return: The webhook_url of this PaymentRequest.
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """Sets the webhook_url of this PaymentRequest.

        A URL to be called in the background with the details of the payment after the payment is complete

        :param webhook_url: The webhook_url of this PaymentRequest.
        :type webhook_url: str
        """

        self._webhook_url = webhook_url
