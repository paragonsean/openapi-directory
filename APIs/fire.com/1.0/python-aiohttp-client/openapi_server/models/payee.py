# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server import util


class Payee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_name: str=None, account_name: str=None, account_number: str=None, bic: str=None, created_by: str=None, currency: Currency=None, date_created: datetime=None, iban: str=None, id: int=None, nsc: str=None, status: str=None):
        """Payee - a model defined in OpenAPI

        :param account_holder_name: The account_holder_name of this Payee.
        :param account_name: The account_name of this Payee.
        :param account_number: The account_number of this Payee.
        :param bic: The bic of this Payee.
        :param created_by: The created_by of this Payee.
        :param currency: The currency of this Payee.
        :param date_created: The date_created of this Payee.
        :param iban: The iban of this Payee.
        :param id: The id of this Payee.
        :param nsc: The nsc of this Payee.
        :param status: The status of this Payee.
        """
        self.openapi_types = {
            'account_holder_name': str,
            'account_name': str,
            'account_number': str,
            'bic': str,
            'created_by': str,
            'currency': Currency,
            'date_created': datetime,
            'iban': str,
            'id': int,
            'nsc': str,
            'status': str
        }

        self.attribute_map = {
            'account_holder_name': 'accountHolderName',
            'account_name': 'accountName',
            'account_number': 'accountNumber',
            'bic': 'bic',
            'created_by': 'createdBy',
            'currency': 'currency',
            'date_created': 'dateCreated',
            'iban': 'iban',
            'id': 'id',
            'nsc': 'nsc',
            'status': 'status'
        }

        self._account_holder_name = account_holder_name
        self._account_name = account_name
        self._account_number = account_number
        self._bic = bic
        self._created_by = created_by
        self._currency = currency
        self._date_created = date_created
        self._iban = iban
        self._id = id
        self._nsc = nsc
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Payee':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The payee of this Payee.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_name(self):
        """Gets the account_holder_name of this Payee.

        The name on the payee bank account.

        :return: The account_holder_name of this Payee.
        :rtype: str
        """
        return self._account_holder_name

    @account_holder_name.setter
    def account_holder_name(self, account_holder_name):
        """Sets the account_holder_name of this Payee.

        The name on the payee bank account.

        :param account_holder_name: The account_holder_name of this Payee.
        :type account_holder_name: str
        """

        self._account_holder_name = account_holder_name

    @property
    def account_name(self):
        """Gets the account_name of this Payee.

        The alias attributed to the payee, usually set by the user when creating the payee.

        :return: The account_name of this Payee.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this Payee.

        The alias attributed to the payee, usually set by the user when creating the payee.

        :param account_name: The account_name of this Payee.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def account_number(self):
        """Gets the account_number of this Payee.

        The Account Number of the account if currency is GBP.

        :return: The account_number of this Payee.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this Payee.

        The Account Number of the account if currency is GBP.

        :param account_number: The account_number of this Payee.
        :type account_number: str
        """

        self._account_number = account_number

    @property
    def bic(self):
        """Gets the bic of this Payee.

        The BIC of the account if currency is EUR.

        :return: The bic of this Payee.
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this Payee.

        The BIC of the account if currency is EUR.

        :param bic: The bic of this Payee.
        :type bic: str
        """

        self._bic = bic

    @property
    def created_by(self):
        """Gets the created_by of this Payee.

        The creation source of the payee.

        :return: The created_by of this Payee.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Payee.

        The creation source of the payee.

        :param created_by: The created_by of this Payee.
        :type created_by: str
        """
        allowed_values = ["CUSTOMER", "LODGEMENT", "DIRECT DEBIT", "OPEN BANKING", "FIRE OPEN PAYMENT", "FIRE DIRECT"]  # noqa: E501
        if created_by not in allowed_values:
            raise ValueError(
                "Invalid value for `created_by` ({0}), must be one of {1}"
                .format(created_by, allowed_values)
            )

        self._created_by = created_by

    @property
    def currency(self):
        """Gets the currency of this Payee.


        :return: The currency of this Payee.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Payee.


        :param currency: The currency of this Payee.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def date_created(self):
        """Gets the date_created of this Payee.

        The date the payee was created. ISO Date Time.

        :return: The date_created of this Payee.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Payee.

        The date the payee was created. ISO Date Time.

        :param date_created: The date_created of this Payee.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def iban(self):
        """Gets the iban of this Payee.

        The IBAN of the account if currency is EUR.

        :return: The iban of this Payee.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this Payee.

        The IBAN of the account if currency is EUR.

        :param iban: The iban of this Payee.
        :type iban: str
        """

        self._iban = iban

    @property
    def id(self):
        """Gets the id of this Payee.

        Identifier for the fire.com payee bank account (assigned by fire.com).

        :return: The id of this Payee.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Payee.

        Identifier for the fire.com payee bank account (assigned by fire.com).

        :param id: The id of this Payee.
        :type id: int
        """

        self._id = id

    @property
    def nsc(self):
        """Gets the nsc of this Payee.

        The Sort Code of the account if currency is GBP.

        :return: The nsc of this Payee.
        :rtype: str
        """
        return self._nsc

    @nsc.setter
    def nsc(self, nsc):
        """Sets the nsc of this Payee.

        The Sort Code of the account if currency is GBP.

        :param nsc: The nsc of this Payee.
        :type nsc: str
        """

        self._nsc = nsc

    @property
    def status(self):
        """Gets the status of this Payee.

        The status of the payee. Only payees in LIVE status can be selected as a destination account for an outgoing payment.   * 'CREATED' - The payee has been set-up via Bank Transfer Received, Direct Debit, or Open Banking. This payee must be converted to LIVE status to select as a destination account for an outgoing payment.   * 'LIVE' - The payee can be selected as a destination account for an outgoing payment.   * 'CLOSED'   * 'ARCHIVED' - The payee has been deleted and must be added again to be selected as a destination account for an outgoing payment. 

        :return: The status of this Payee.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Payee.

        The status of the payee. Only payees in LIVE status can be selected as a destination account for an outgoing payment.   * 'CREATED' - The payee has been set-up via Bank Transfer Received, Direct Debit, or Open Banking. This payee must be converted to LIVE status to select as a destination account for an outgoing payment.   * 'LIVE' - The payee can be selected as a destination account for an outgoing payment.   * 'CLOSED'   * 'ARCHIVED' - The payee has been deleted and must be added again to be selected as a destination account for an outgoing payment. 

        :param status: The status of this Payee.
        :type status: str
        """
        allowed_values = ["CREATED", "LIVE", "CLOSED", "ARCHIVED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
