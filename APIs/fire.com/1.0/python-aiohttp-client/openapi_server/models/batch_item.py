# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_item_result import BatchItemResult
from openapi_server import util


class BatchItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, amount_after_charges: int=None, batch_item_uuid: str=None, date_created: datetime=None, fee_amount: int=None, ican_from: int=None, ican_to: int=None, last_updated: datetime=None, ref: str=None, ref_id: int=None, result: BatchItemResult=None, status: str=None, tax_amount: int=None):
        """BatchItem - a model defined in OpenAPI

        :param amount: The amount of this BatchItem.
        :param amount_after_charges: The amount_after_charges of this BatchItem.
        :param batch_item_uuid: The batch_item_uuid of this BatchItem.
        :param date_created: The date_created of this BatchItem.
        :param fee_amount: The fee_amount of this BatchItem.
        :param ican_from: The ican_from of this BatchItem.
        :param ican_to: The ican_to of this BatchItem.
        :param last_updated: The last_updated of this BatchItem.
        :param ref: The ref of this BatchItem.
        :param ref_id: The ref_id of this BatchItem.
        :param result: The result of this BatchItem.
        :param status: The status of this BatchItem.
        :param tax_amount: The tax_amount of this BatchItem.
        """
        self.openapi_types = {
            'amount': int,
            'amount_after_charges': int,
            'batch_item_uuid': str,
            'date_created': datetime,
            'fee_amount': int,
            'ican_from': int,
            'ican_to': int,
            'last_updated': datetime,
            'ref': str,
            'ref_id': int,
            'result': BatchItemResult,
            'status': str,
            'tax_amount': int
        }

        self.attribute_map = {
            'amount': 'amount',
            'amount_after_charges': 'amountAfterCharges',
            'batch_item_uuid': 'batchItemUuid',
            'date_created': 'dateCreated',
            'fee_amount': 'feeAmount',
            'ican_from': 'icanFrom',
            'ican_to': 'icanTo',
            'last_updated': 'lastUpdated',
            'ref': 'ref',
            'ref_id': 'refId',
            'result': 'result',
            'status': 'status',
            'tax_amount': 'taxAmount'
        }

        self._amount = amount
        self._amount_after_charges = amount_after_charges
        self._batch_item_uuid = batch_item_uuid
        self._date_created = date_created
        self._fee_amount = fee_amount
        self._ican_from = ican_from
        self._ican_to = ican_to
        self._last_updated = last_updated
        self._ref = ref
        self._ref_id = ref_id
        self._result = result
        self._status = status
        self._tax_amount = tax_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The batchItem of this BatchItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this BatchItem.

        The amount of funds to send. In cent or pence

        :return: The amount of this BatchItem.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BatchItem.

        The amount of funds to send. In cent or pence

        :param amount: The amount of this BatchItem.
        :type amount: int
        """

        self._amount = amount

    @property
    def amount_after_charges(self):
        """Gets the amount_after_charges of this BatchItem.

        The amount of the transfer after fees and taxes. in pence or cent.

        :return: The amount_after_charges of this BatchItem.
        :rtype: int
        """
        return self._amount_after_charges

    @amount_after_charges.setter
    def amount_after_charges(self, amount_after_charges):
        """Sets the amount_after_charges of this BatchItem.

        The amount of the transfer after fees and taxes. in pence or cent.

        :param amount_after_charges: The amount_after_charges of this BatchItem.
        :type amount_after_charges: int
        """

        self._amount_after_charges = amount_after_charges

    @property
    def batch_item_uuid(self):
        """Gets the batch_item_uuid of this BatchItem.

        A UUID for this item.

        :return: The batch_item_uuid of this BatchItem.
        :rtype: str
        """
        return self._batch_item_uuid

    @batch_item_uuid.setter
    def batch_item_uuid(self, batch_item_uuid):
        """Sets the batch_item_uuid of this BatchItem.

        A UUID for this item.

        :param batch_item_uuid: The batch_item_uuid of this BatchItem.
        :type batch_item_uuid: str
        """

        self._batch_item_uuid = batch_item_uuid

    @property
    def date_created(self):
        """Gets the date_created of this BatchItem.

        The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z

        :return: The date_created of this BatchItem.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this BatchItem.

        The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z

        :param date_created: The date_created of this BatchItem.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def fee_amount(self):
        """Gets the fee_amount of this BatchItem.

        The fee charged by fire.com for the payment. In pence or cent.

        :return: The fee_amount of this BatchItem.
        :rtype: int
        """
        return self._fee_amount

    @fee_amount.setter
    def fee_amount(self, fee_amount):
        """Sets the fee_amount of this BatchItem.

        The fee charged by fire.com for the payment. In pence or cent.

        :param fee_amount: The fee_amount of this BatchItem.
        :type fee_amount: int
        """

        self._fee_amount = fee_amount

    @property
    def ican_from(self):
        """Gets the ican_from of this BatchItem.

        The Fire account ID of the source account.

        :return: The ican_from of this BatchItem.
        :rtype: int
        """
        return self._ican_from

    @ican_from.setter
    def ican_from(self, ican_from):
        """Sets the ican_from of this BatchItem.

        The Fire account ID of the source account.

        :param ican_from: The ican_from of this BatchItem.
        :type ican_from: int
        """

        self._ican_from = ican_from

    @property
    def ican_to(self):
        """Gets the ican_to of this BatchItem.

        The Fire account ID for the fire.com account the funds are sent to.

        :return: The ican_to of this BatchItem.
        :rtype: int
        """
        return self._ican_to

    @ican_to.setter
    def ican_to(self, ican_to):
        """Sets the ican_to of this BatchItem.

        The Fire account ID for the fire.com account the funds are sent to.

        :param ican_to: The ican_to of this BatchItem.
        :type ican_to: int
        """

        self._ican_to = ican_to

    @property
    def last_updated(self):
        """Gets the last_updated of this BatchItem.

        The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z

        :return: The last_updated of this BatchItem.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this BatchItem.

        The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z

        :param last_updated: The last_updated of this BatchItem.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def ref(self):
        """Gets the ref of this BatchItem.

        The reference on the transaction.

        :return: The ref of this BatchItem.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this BatchItem.

        The reference on the transaction.

        :param ref: The ref of this BatchItem.
        :type ref: str
        """

        self._ref = ref

    @property
    def ref_id(self):
        """Gets the ref_id of this BatchItem.

        The ID of the resulting payment in your account. Can be used to retrieve the transaction using the https://api.fire.com/business/v1/accounts/{accountId}/transactions/{refId} endpoint.

        :return: The ref_id of this BatchItem.
        :rtype: int
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this BatchItem.

        The ID of the resulting payment in your account. Can be used to retrieve the transaction using the https://api.fire.com/business/v1/accounts/{accountId}/transactions/{refId} endpoint.

        :param ref_id: The ref_id of this BatchItem.
        :type ref_id: int
        """

        self._ref_id = ref_id

    @property
    def result(self):
        """Gets the result of this BatchItem.


        :return: The result of this BatchItem.
        :rtype: BatchItemResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this BatchItem.


        :param result: The result of this BatchItem.
        :type result: BatchItemResult
        """

        self._result = result

    @property
    def status(self):
        """Gets the status of this BatchItem.

        status of the batch if internal trasnfer

        :return: The status of this BatchItem.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BatchItem.

        status of the batch if internal trasnfer

        :param status: The status of this BatchItem.
        :type status: str
        """
        allowed_values = ["SUBMITTED", "REMOVED", "SUCCEEDED", "FAILED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tax_amount(self):
        """Gets the tax_amount of this BatchItem.

        Any taxes/duty collected by fire.com for this payments (e.g. stamp duty etc). In pence or cent.

        :return: The tax_amount of this BatchItem.
        :rtype: int
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this BatchItem.

        Any taxes/duty collected by fire.com for this payments (e.g. stamp duty etc). In pence or cent.

        :param tax_amount: The tax_amount of this BatchItem.
        :type tax_amount: int
        """

        self._tax_amount = tax_amount
