# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewCardResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_id: int=None, expiry_date: datetime=None, masked_pan: str=None, status: str=None):
        """NewCardResponse - a model defined in OpenAPI

        :param card_id: The card_id of this NewCardResponse.
        :param expiry_date: The expiry_date of this NewCardResponse.
        :param masked_pan: The masked_pan of this NewCardResponse.
        :param status: The status of this NewCardResponse.
        """
        self.openapi_types = {
            'card_id': int,
            'expiry_date': datetime,
            'masked_pan': str,
            'status': str
        }

        self.attribute_map = {
            'card_id': 'cardId',
            'expiry_date': 'expiryDate',
            'masked_pan': 'maskedPan',
            'status': 'status'
        }

        self._card_id = card_id
        self._expiry_date = expiry_date
        self._masked_pan = masked_pan
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewCardResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The newCardResponse of this NewCardResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_id(self):
        """Gets the card_id of this NewCardResponse.


        :return: The card_id of this NewCardResponse.
        :rtype: int
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this NewCardResponse.


        :param card_id: The card_id of this NewCardResponse.
        :type card_id: int
        """

        self._card_id = card_id

    @property
    def expiry_date(self):
        """Gets the expiry_date of this NewCardResponse.


        :return: The expiry_date of this NewCardResponse.
        :rtype: datetime
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this NewCardResponse.


        :param expiry_date: The expiry_date of this NewCardResponse.
        :type expiry_date: datetime
        """

        self._expiry_date = expiry_date

    @property
    def masked_pan(self):
        """Gets the masked_pan of this NewCardResponse.


        :return: The masked_pan of this NewCardResponse.
        :rtype: str
        """
        return self._masked_pan

    @masked_pan.setter
    def masked_pan(self, masked_pan):
        """Sets the masked_pan of this NewCardResponse.


        :param masked_pan: The masked_pan of this NewCardResponse.
        :type masked_pan: str
        """

        self._masked_pan = masked_pan

    @property
    def status(self):
        """Gets the status of this NewCardResponse.


        :return: The status of this NewCardResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NewCardResponse.


        :param status: The status of this NewCardResponse.
        :type status: str
        """
        allowed_values = ["CREATED_ACTIVE", "CREATED_INACTIVE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
