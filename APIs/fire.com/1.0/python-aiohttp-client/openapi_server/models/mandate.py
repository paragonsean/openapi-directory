# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server import util


class Mandate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, currency: Currency=None, date_cancelled: datetime=None, date_completed: datetime=None, date_created: datetime=None, fire_rejection_reason: str=None, last_updated: datetime=None, latest_direct_debit_amount: int=None, latest_direct_debit_date: datetime=None, mandate_reference: str=None, mandate_uuid: str=None, number_of_direct_debit_collected: int=None, originator_alias: str=None, originator_logo_url_large: str=None, originator_logo_url_small: str=None, originator_name: str=None, originator_reference: str=None, scheme_cancel_reason: str=None, scheme_cancel_reason_code: str=None, status: str=None, target_ican: int=None, value_of_direct_debit_collected: int=None):
        """Mandate - a model defined in OpenAPI

        :param alias: The alias of this Mandate.
        :param currency: The currency of this Mandate.
        :param date_cancelled: The date_cancelled of this Mandate.
        :param date_completed: The date_completed of this Mandate.
        :param date_created: The date_created of this Mandate.
        :param fire_rejection_reason: The fire_rejection_reason of this Mandate.
        :param last_updated: The last_updated of this Mandate.
        :param latest_direct_debit_amount: The latest_direct_debit_amount of this Mandate.
        :param latest_direct_debit_date: The latest_direct_debit_date of this Mandate.
        :param mandate_reference: The mandate_reference of this Mandate.
        :param mandate_uuid: The mandate_uuid of this Mandate.
        :param number_of_direct_debit_collected: The number_of_direct_debit_collected of this Mandate.
        :param originator_alias: The originator_alias of this Mandate.
        :param originator_logo_url_large: The originator_logo_url_large of this Mandate.
        :param originator_logo_url_small: The originator_logo_url_small of this Mandate.
        :param originator_name: The originator_name of this Mandate.
        :param originator_reference: The originator_reference of this Mandate.
        :param scheme_cancel_reason: The scheme_cancel_reason of this Mandate.
        :param scheme_cancel_reason_code: The scheme_cancel_reason_code of this Mandate.
        :param status: The status of this Mandate.
        :param target_ican: The target_ican of this Mandate.
        :param value_of_direct_debit_collected: The value_of_direct_debit_collected of this Mandate.
        """
        self.openapi_types = {
            'alias': str,
            'currency': Currency,
            'date_cancelled': datetime,
            'date_completed': datetime,
            'date_created': datetime,
            'fire_rejection_reason': str,
            'last_updated': datetime,
            'latest_direct_debit_amount': int,
            'latest_direct_debit_date': datetime,
            'mandate_reference': str,
            'mandate_uuid': str,
            'number_of_direct_debit_collected': int,
            'originator_alias': str,
            'originator_logo_url_large': str,
            'originator_logo_url_small': str,
            'originator_name': str,
            'originator_reference': str,
            'scheme_cancel_reason': str,
            'scheme_cancel_reason_code': str,
            'status': str,
            'target_ican': int,
            'value_of_direct_debit_collected': int
        }

        self.attribute_map = {
            'alias': 'alias',
            'currency': 'currency',
            'date_cancelled': 'dateCancelled',
            'date_completed': 'dateCompleted',
            'date_created': 'dateCreated',
            'fire_rejection_reason': 'fireRejectionReason',
            'last_updated': 'lastUpdated',
            'latest_direct_debit_amount': 'latestDirectDebitAmount',
            'latest_direct_debit_date': 'latestDirectDebitDate',
            'mandate_reference': 'mandateReference',
            'mandate_uuid': 'mandateUuid',
            'number_of_direct_debit_collected': 'numberOfDirectDebitCollected',
            'originator_alias': 'originatorAlias',
            'originator_logo_url_large': 'originatorLogoUrlLarge',
            'originator_logo_url_small': 'originatorLogoUrlSmall',
            'originator_name': 'originatorName',
            'originator_reference': 'originatorReference',
            'scheme_cancel_reason': 'schemeCancelReason',
            'scheme_cancel_reason_code': 'schemeCancelReasonCode',
            'status': 'status',
            'target_ican': 'targetIcan',
            'value_of_direct_debit_collected': 'valueOfDirectDebitCollected'
        }

        self._alias = alias
        self._currency = currency
        self._date_cancelled = date_cancelled
        self._date_completed = date_completed
        self._date_created = date_created
        self._fire_rejection_reason = fire_rejection_reason
        self._last_updated = last_updated
        self._latest_direct_debit_amount = latest_direct_debit_amount
        self._latest_direct_debit_date = latest_direct_debit_date
        self._mandate_reference = mandate_reference
        self._mandate_uuid = mandate_uuid
        self._number_of_direct_debit_collected = number_of_direct_debit_collected
        self._originator_alias = originator_alias
        self._originator_logo_url_large = originator_logo_url_large
        self._originator_logo_url_small = originator_logo_url_small
        self._originator_name = originator_name
        self._originator_reference = originator_reference
        self._scheme_cancel_reason = scheme_cancel_reason
        self._scheme_cancel_reason_code = scheme_cancel_reason_code
        self._status = status
        self._target_ican = target_ican
        self._value_of_direct_debit_collected = value_of_direct_debit_collected

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Mandate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The mandate of this Mandate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this Mandate.

        The name of the alias

        :return: The alias of this Mandate.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this Mandate.

        The name of the alias

        :param alias: The alias of this Mandate.
        :type alias: str
        """

        self._alias = alias

    @property
    def currency(self):
        """Gets the currency of this Mandate.


        :return: The currency of this Mandate.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Mandate.


        :param currency: The currency of this Mandate.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def date_cancelled(self):
        """Gets the date_cancelled of this Mandate.

        Date the direct debit was canceled. Milliseconds since the epoch (1970).

        :return: The date_cancelled of this Mandate.
        :rtype: datetime
        """
        return self._date_cancelled

    @date_cancelled.setter
    def date_cancelled(self, date_cancelled):
        """Sets the date_cancelled of this Mandate.

        Date the direct debit was canceled. Milliseconds since the epoch (1970).

        :param date_cancelled: The date_cancelled of this Mandate.
        :type date_cancelled: datetime
        """

        self._date_cancelled = date_cancelled

    @property
    def date_completed(self):
        """Gets the date_completed of this Mandate.

        Date the direct debit was completed. Milliseconds since the epoch (1970).

        :return: The date_completed of this Mandate.
        :rtype: datetime
        """
        return self._date_completed

    @date_completed.setter
    def date_completed(self, date_completed):
        """Sets the date_completed of this Mandate.

        Date the direct debit was completed. Milliseconds since the epoch (1970).

        :param date_completed: The date_completed of this Mandate.
        :type date_completed: datetime
        """

        self._date_completed = date_completed

    @property
    def date_created(self):
        """Gets the date_created of this Mandate.

        Date the direct debit was created. Milliseconds since the epoch (1970).

        :return: The date_created of this Mandate.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Mandate.

        Date the direct debit was created. Milliseconds since the epoch (1970).

        :param date_created: The date_created of this Mandate.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def fire_rejection_reason(self):
        """Gets the fire_rejection_reason of this Mandate.

        Rejection reason if transaction is rejected

        :return: The fire_rejection_reason of this Mandate.
        :rtype: str
        """
        return self._fire_rejection_reason

    @fire_rejection_reason.setter
    def fire_rejection_reason(self, fire_rejection_reason):
        """Sets the fire_rejection_reason of this Mandate.

        Rejection reason if transaction is rejected

        :param fire_rejection_reason: The fire_rejection_reason of this Mandate.
        :type fire_rejection_reason: str
        """
        allowed_values = ["ACCOUNT_DOES_NOT_ACCEPT_DIRECT_DEBITS", "DDIC", "ACCOUNT_NOT_FOUND", "ACCOUNT_NOT_LIVE", "CUSTOMER_NOT_FOUND", "BUSINESS_NOT_LIVE", "BUSINESS_NOT_FULL", "PERSONAL_USER_NOT_LIVE", "PERSONAL_USER_NOT_FULL", "MANDATE_ALREADY_EXISTS", "MANDATE_WITH_DIFERENT_ACCOUNT", "NULL_MANDATE_REFERENCE", "INVALID_ACCOUNT_CURRENCY", "INVALID_MANDATE_REFERENCE", "REQUESTED_BY_CUSTOMER_VIA_SUPPORT", "CUSTOMER_ACCOUNT_CLOSED", "CUSTOMER_DECEASED", "ACCOUNT_TRANSFERRED", "MANDATE_NOT_FOUND", "ACCOUNT_TRANSFERRED_TO_DIFFERENT_ACCOUNT", "INVALID_ACCOUNT_TYPE", "MANDATE_EXPIRED", "MANDATE_CANCELLED", "REQUESTED_BY_CUSTOMER"]  # noqa: E501
        if fire_rejection_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `fire_rejection_reason` ({0}), must be one of {1}"
                .format(fire_rejection_reason, allowed_values)
            )

        self._fire_rejection_reason = fire_rejection_reason

    @property
    def last_updated(self):
        """Gets the last_updated of this Mandate.

        Date the direct debit was last updated. Milliseconds since the epoch (1970).

        :return: The last_updated of this Mandate.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Mandate.

        Date the direct debit was last updated. Milliseconds since the epoch (1970).

        :param last_updated: The last_updated of this Mandate.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def latest_direct_debit_amount(self):
        """Gets the latest_direct_debit_amount of this Mandate.

        The value of largest direct debit collected

        :return: The latest_direct_debit_amount of this Mandate.
        :rtype: int
        """
        return self._latest_direct_debit_amount

    @latest_direct_debit_amount.setter
    def latest_direct_debit_amount(self, latest_direct_debit_amount):
        """Sets the latest_direct_debit_amount of this Mandate.

        The value of largest direct debit collected

        :param latest_direct_debit_amount: The latest_direct_debit_amount of this Mandate.
        :type latest_direct_debit_amount: int
        """

        self._latest_direct_debit_amount = latest_direct_debit_amount

    @property
    def latest_direct_debit_date(self):
        """Gets the latest_direct_debit_date of this Mandate.

        The date of latest direct debit collected

        :return: The latest_direct_debit_date of this Mandate.
        :rtype: datetime
        """
        return self._latest_direct_debit_date

    @latest_direct_debit_date.setter
    def latest_direct_debit_date(self, latest_direct_debit_date):
        """Sets the latest_direct_debit_date of this Mandate.

        The date of latest direct debit collected

        :param latest_direct_debit_date: The latest_direct_debit_date of this Mandate.
        :type latest_direct_debit_date: datetime
        """

        self._latest_direct_debit_date = latest_direct_debit_date

    @property
    def mandate_reference(self):
        """Gets the mandate_reference of this Mandate.

        the reference of the mandate

        :return: The mandate_reference of this Mandate.
        :rtype: str
        """
        return self._mandate_reference

    @mandate_reference.setter
    def mandate_reference(self, mandate_reference):
        """Sets the mandate_reference of this Mandate.

        the reference of the mandate

        :param mandate_reference: The mandate_reference of this Mandate.
        :type mandate_reference: str
        """

        self._mandate_reference = mandate_reference

    @property
    def mandate_uuid(self):
        """Gets the mandate_uuid of this Mandate.

        The UUID for the mandate

        :return: The mandate_uuid of this Mandate.
        :rtype: str
        """
        return self._mandate_uuid

    @mandate_uuid.setter
    def mandate_uuid(self, mandate_uuid):
        """Sets the mandate_uuid of this Mandate.

        The UUID for the mandate

        :param mandate_uuid: The mandate_uuid of this Mandate.
        :type mandate_uuid: str
        """

        self._mandate_uuid = mandate_uuid

    @property
    def number_of_direct_debit_collected(self):
        """Gets the number_of_direct_debit_collected of this Mandate.

        The number of direct debits collected

        :return: The number_of_direct_debit_collected of this Mandate.
        :rtype: int
        """
        return self._number_of_direct_debit_collected

    @number_of_direct_debit_collected.setter
    def number_of_direct_debit_collected(self, number_of_direct_debit_collected):
        """Sets the number_of_direct_debit_collected of this Mandate.

        The number of direct debits collected

        :param number_of_direct_debit_collected: The number_of_direct_debit_collected of this Mandate.
        :type number_of_direct_debit_collected: int
        """

        self._number_of_direct_debit_collected = number_of_direct_debit_collected

    @property
    def originator_alias(self):
        """Gets the originator_alias of this Mandate.

        The name of the alias

        :return: The originator_alias of this Mandate.
        :rtype: str
        """
        return self._originator_alias

    @originator_alias.setter
    def originator_alias(self, originator_alias):
        """Sets the originator_alias of this Mandate.

        The name of the alias

        :param originator_alias: The originator_alias of this Mandate.
        :type originator_alias: str
        """

        self._originator_alias = originator_alias

    @property
    def originator_logo_url_large(self):
        """Gets the originator_logo_url_large of this Mandate.

        Logo url from party who sets up the direct debit.

        :return: The originator_logo_url_large of this Mandate.
        :rtype: str
        """
        return self._originator_logo_url_large

    @originator_logo_url_large.setter
    def originator_logo_url_large(self, originator_logo_url_large):
        """Sets the originator_logo_url_large of this Mandate.

        Logo url from party who sets up the direct debit.

        :param originator_logo_url_large: The originator_logo_url_large of this Mandate.
        :type originator_logo_url_large: str
        """

        self._originator_logo_url_large = originator_logo_url_large

    @property
    def originator_logo_url_small(self):
        """Gets the originator_logo_url_small of this Mandate.

        Logo url from party who sets up the direct debit.

        :return: The originator_logo_url_small of this Mandate.
        :rtype: str
        """
        return self._originator_logo_url_small

    @originator_logo_url_small.setter
    def originator_logo_url_small(self, originator_logo_url_small):
        """Sets the originator_logo_url_small of this Mandate.

        Logo url from party who sets up the direct debit.

        :param originator_logo_url_small: The originator_logo_url_small of this Mandate.
        :type originator_logo_url_small: str
        """

        self._originator_logo_url_small = originator_logo_url_small

    @property
    def originator_name(self):
        """Gets the originator_name of this Mandate.

        The creator of the party who sets up the direct debit.

        :return: The originator_name of this Mandate.
        :rtype: str
        """
        return self._originator_name

    @originator_name.setter
    def originator_name(self, originator_name):
        """Sets the originator_name of this Mandate.

        The creator of the party who sets up the direct debit.

        :param originator_name: The originator_name of this Mandate.
        :type originator_name: str
        """

        self._originator_name = originator_name

    @property
    def originator_reference(self):
        """Gets the originator_reference of this Mandate.

        Set by party who sets up the direct debit.

        :return: The originator_reference of this Mandate.
        :rtype: str
        """
        return self._originator_reference

    @originator_reference.setter
    def originator_reference(self, originator_reference):
        """Sets the originator_reference of this Mandate.

        Set by party who sets up the direct debit.

        :param originator_reference: The originator_reference of this Mandate.
        :type originator_reference: str
        """

        self._originator_reference = originator_reference

    @property
    def scheme_cancel_reason(self):
        """Gets the scheme_cancel_reason of this Mandate.

        Reason for cancelation

        :return: The scheme_cancel_reason of this Mandate.
        :rtype: str
        """
        return self._scheme_cancel_reason

    @scheme_cancel_reason.setter
    def scheme_cancel_reason(self, scheme_cancel_reason):
        """Sets the scheme_cancel_reason of this Mandate.

        Reason for cancelation

        :param scheme_cancel_reason: The scheme_cancel_reason of this Mandate.
        :type scheme_cancel_reason: str
        """

        self._scheme_cancel_reason = scheme_cancel_reason

    @property
    def scheme_cancel_reason_code(self):
        """Gets the scheme_cancel_reason_code of this Mandate.

        The cancelation code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason.

        :return: The scheme_cancel_reason_code of this Mandate.
        :rtype: str
        """
        return self._scheme_cancel_reason_code

    @scheme_cancel_reason_code.setter
    def scheme_cancel_reason_code(self, scheme_cancel_reason_code):
        """Sets the scheme_cancel_reason_code of this Mandate.

        The cancelation code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason.

        :param scheme_cancel_reason_code: The scheme_cancel_reason_code of this Mandate.
        :type scheme_cancel_reason_code: str
        """

        self._scheme_cancel_reason_code = scheme_cancel_reason_code

    @property
    def status(self):
        """Gets the status of this Mandate.

        The status of the mandate. * 'CREATED' * 'LIVE' * 'REJECT_REQUESTED' * 'REJECT_RECORD_IN_PROGRESS' * 'REJECT_RECORDED' * 'REJECT_FILE_CREATED' * 'REJECT_FILE_SENT' * 'CANCEL_REQUESTED' * 'CANCEL_RECORD_IN_PROGRESS' * 'CANCEL_RECORDED' * 'CANCEL_FILE_CREATED' * 'CANCEL_FILE_SENT' * 'COMPLETE' * 'DORMANT' 

        :return: The status of this Mandate.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Mandate.

        The status of the mandate. * 'CREATED' * 'LIVE' * 'REJECT_REQUESTED' * 'REJECT_RECORD_IN_PROGRESS' * 'REJECT_RECORDED' * 'REJECT_FILE_CREATED' * 'REJECT_FILE_SENT' * 'CANCEL_REQUESTED' * 'CANCEL_RECORD_IN_PROGRESS' * 'CANCEL_RECORDED' * 'CANCEL_FILE_CREATED' * 'CANCEL_FILE_SENT' * 'COMPLETE' * 'DORMANT' 

        :param status: The status of this Mandate.
        :type status: str
        """
        allowed_values = ["CREATED", "LIVE", "REJECT_REQUESTED", "REJECT_RECORD_IN_PROGRESS", "REJECT_RECORDED", "REJECT_FILE_CREATED", "REJECT_FILE_SENT", "CANCEL_REQUESTED", "CANCEL_RECORD_IN_PROGRESS", "CANCEL_RECORDED", "CANCEL_FILE_CREATED", "CANCEL_FILE_SENT", "COMPLETE", "DORMANT"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def target_ican(self):
        """Gets the target_ican of this Mandate.

        Identifier for the fire.com account (assigned by fire.com)

        :return: The target_ican of this Mandate.
        :rtype: int
        """
        return self._target_ican

    @target_ican.setter
    def target_ican(self, target_ican):
        """Sets the target_ican of this Mandate.

        Identifier for the fire.com account (assigned by fire.com)

        :param target_ican: The target_ican of this Mandate.
        :type target_ican: int
        """

        self._target_ican = target_ican

    @property
    def value_of_direct_debit_collected(self):
        """Gets the value_of_direct_debit_collected of this Mandate.

        The value of direct debits collected

        :return: The value_of_direct_debit_collected of this Mandate.
        :rtype: int
        """
        return self._value_of_direct_debit_collected

    @value_of_direct_debit_collected.setter
    def value_of_direct_debit_collected(self, value_of_direct_debit_collected):
        """Sets the value_of_direct_debit_collected of this Mandate.

        The value of direct debits collected

        :param value_of_direct_debit_collected: The value_of_direct_debit_collected of this Mandate.
        :type value_of_direct_debit_collected: int
        """

        self._value_of_direct_debit_collected = value_of_direct_debit_collected
