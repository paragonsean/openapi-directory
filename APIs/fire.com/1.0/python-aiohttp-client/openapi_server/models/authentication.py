# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Authentication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, client_secret: str=None, grant_type: str=None, nonce: int=None, refresh_token: str=None):
        """Authentication - a model defined in OpenAPI

        :param client_id: The client_id of this Authentication.
        :param client_secret: The client_secret of this Authentication.
        :param grant_type: The grant_type of this Authentication.
        :param nonce: The nonce of this Authentication.
        :param refresh_token: The refresh_token of this Authentication.
        """
        self.openapi_types = {
            'client_id': str,
            'client_secret': str,
            'grant_type': str,
            'nonce': int,
            'refresh_token': str
        }

        self.attribute_map = {
            'client_id': 'clientId',
            'client_secret': 'clientSecret',
            'grant_type': 'grantType',
            'nonce': 'nonce',
            'refresh_token': 'refreshToken'
        }

        self._client_id = client_id
        self._client_secret = client_secret
        self._grant_type = grant_type
        self._nonce = nonce
        self._refresh_token = refresh_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Authentication':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The authentication of this Authentication.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this Authentication.

        The Client ID for this API Application

        :return: The client_id of this Authentication.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Authentication.

        The Client ID for this API Application

        :param client_id: The client_id of this Authentication.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this Authentication.

        The SHA256 hash of the nonce above and the app’s Client Key. The Client Key will only be shown to you when you create the app, so don’t forget to save it somewhere safe. SECRET=( `/bin/echo -n $NONCE$CLIENT_KEY | sha256sum` ).

        :return: The client_secret of this Authentication.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this Authentication.

        The SHA256 hash of the nonce above and the app’s Client Key. The Client Key will only be shown to you when you create the app, so don’t forget to save it somewhere safe. SECRET=( `/bin/echo -n $NONCE$CLIENT_KEY | sha256sum` ).

        :param client_secret: The client_secret of this Authentication.
        :type client_secret: str
        """

        self._client_secret = client_secret

    @property
    def grant_type(self):
        """Gets the grant_type of this Authentication.

        Always `AccessToken`. (This will change to `refresh_token` in a future release.)

        :return: The grant_type of this Authentication.
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        """Sets the grant_type of this Authentication.

        Always `AccessToken`. (This will change to `refresh_token` in a future release.)

        :param grant_type: The grant_type of this Authentication.
        :type grant_type: str
        """
        allowed_values = ["AccessToken"]  # noqa: E501
        if grant_type not in allowed_values:
            raise ValueError(
                "Invalid value for `grant_type` ({0}), must be one of {1}"
                .format(grant_type, allowed_values)
            )

        self._grant_type = grant_type

    @property
    def nonce(self):
        """Gets the nonce of this Authentication.

        A random non-repeating number used as a salt for the `clientSecret` below. The simplest nonce is a unix time.

        :return: The nonce of this Authentication.
        :rtype: int
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this Authentication.

        A random non-repeating number used as a salt for the `clientSecret` below. The simplest nonce is a unix time.

        :param nonce: The nonce of this Authentication.
        :type nonce: int
        """

        self._nonce = nonce

    @property
    def refresh_token(self):
        """Gets the refresh_token of this Authentication.

        The Refresh Token for this API Application

        :return: The refresh_token of this Authentication.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this Authentication.

        The Refresh Token for this API Application

        :param refresh_token: The refresh_token of this Authentication.
        :type refresh_token: str
        """

        self._refresh_token = refresh_token
