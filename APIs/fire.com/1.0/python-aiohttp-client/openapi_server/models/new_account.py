# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_fees_and_charges: bool=None, account_name: str=None, currency: str=None):
        """NewAccount - a model defined in OpenAPI

        :param accept_fees_and_charges: The accept_fees_and_charges of this NewAccount.
        :param account_name: The account_name of this NewAccount.
        :param currency: The currency of this NewAccount.
        """
        self.openapi_types = {
            'accept_fees_and_charges': bool,
            'account_name': str,
            'currency': str
        }

        self.attribute_map = {
            'accept_fees_and_charges': 'acceptFeesAndCharges',
            'account_name': 'accountName',
            'currency': 'currency'
        }

        self._accept_fees_and_charges = accept_fees_and_charges
        self._account_name = account_name
        self._currency = currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The newAccount of this NewAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_fees_and_charges(self):
        """Gets the accept_fees_and_charges of this NewAccount.

        a field to indicate you accept the fee for a new account

        :return: The accept_fees_and_charges of this NewAccount.
        :rtype: bool
        """
        return self._accept_fees_and_charges

    @accept_fees_and_charges.setter
    def accept_fees_and_charges(self, accept_fees_and_charges):
        """Sets the accept_fees_and_charges of this NewAccount.

        a field to indicate you accept the fee for a new account

        :param accept_fees_and_charges: The accept_fees_and_charges of this NewAccount.
        :type accept_fees_and_charges: bool
        """

        self._accept_fees_and_charges = accept_fees_and_charges

    @property
    def account_name(self):
        """Gets the account_name of this NewAccount.

        Name to give the new account

        :return: The account_name of this NewAccount.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this NewAccount.

        Name to give the new account

        :param account_name: The account_name of this NewAccount.
        :type account_name: str
        """
        if account_name is not None and len(account_name) > 50:
            raise ValueError("Invalid value for `account_name`, length must be less than or equal to `50`")

        self._account_name = account_name

    @property
    def currency(self):
        """Gets the currency of this NewAccount.

        The currency of the new account

        :return: The currency of this NewAccount.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this NewAccount.

        The currency of the new account

        :param currency: The currency of this NewAccount.
        :type currency: str
        """
        allowed_values = ["EUR", "GBP"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency
