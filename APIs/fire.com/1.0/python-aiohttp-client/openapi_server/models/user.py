# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.mobile_application import MobileApplication
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_address: str=None, first_name: str=None, id: int=None, last_name: str=None, lastlogin: str=None, mobile_application_details: MobileApplication=None, mobile_number: str=None, role: str=None, status: str=None, user_cvl: str=None):
        """User - a model defined in OpenAPI

        :param email_address: The email_address of this User.
        :param first_name: The first_name of this User.
        :param id: The id of this User.
        :param last_name: The last_name of this User.
        :param lastlogin: The lastlogin of this User.
        :param mobile_application_details: The mobile_application_details of this User.
        :param mobile_number: The mobile_number of this User.
        :param role: The role of this User.
        :param status: The status of this User.
        :param user_cvl: The user_cvl of this User.
        """
        self.openapi_types = {
            'email_address': str,
            'first_name': str,
            'id': int,
            'last_name': str,
            'lastlogin': str,
            'mobile_application_details': MobileApplication,
            'mobile_number': str,
            'role': str,
            'status': str,
            'user_cvl': str
        }

        self.attribute_map = {
            'email_address': 'emailAddress',
            'first_name': 'firstName',
            'id': 'id',
            'last_name': 'lastName',
            'lastlogin': 'lastlogin',
            'mobile_application_details': 'mobileApplicationDetails',
            'mobile_number': 'mobileNumber',
            'role': 'role',
            'status': 'status',
            'user_cvl': 'userCvl'
        }

        self._email_address = email_address
        self._first_name = first_name
        self._id = id
        self._last_name = last_name
        self._lastlogin = lastlogin
        self._mobile_application_details = mobile_application_details
        self._mobile_number = mobile_number
        self._role = role
        self._status = status
        self._user_cvl = user_cvl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The user of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_address(self):
        """Gets the email_address of this User.

        email address for user

        :return: The email_address of this User.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this User.

        email address for user

        :param email_address: The email_address of this User.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def first_name(self):
        """Gets the first_name of this User.

        User first name

        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        User first name

        :param first_name: The first_name of this User.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this User.

        The User ID for this User

        :return: The id of this User.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        The User ID for this User

        :param id: The id of this User.
        :type id: int
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this User.

        User second name

        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        User second name

        :param last_name: The last_name of this User.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def lastlogin(self):
        """Gets the lastlogin of this User.

        Timestamp on when user last logged in.

        :return: The lastlogin of this User.
        :rtype: str
        """
        return self._lastlogin

    @lastlogin.setter
    def lastlogin(self, lastlogin):
        """Sets the lastlogin of this User.

        Timestamp on when user last logged in.

        :param lastlogin: The lastlogin of this User.
        :type lastlogin: str
        """

        self._lastlogin = lastlogin

    @property
    def mobile_application_details(self):
        """Gets the mobile_application_details of this User.


        :return: The mobile_application_details of this User.
        :rtype: MobileApplication
        """
        return self._mobile_application_details

    @mobile_application_details.setter
    def mobile_application_details(self, mobile_application_details):
        """Sets the mobile_application_details of this User.


        :param mobile_application_details: The mobile_application_details of this User.
        :type mobile_application_details: MobileApplication
        """

        self._mobile_application_details = mobile_application_details

    @property
    def mobile_number(self):
        """Gets the mobile_number of this User.

        User mobile number

        :return: The mobile_number of this User.
        :rtype: str
        """
        return self._mobile_number

    @mobile_number.setter
    def mobile_number(self, mobile_number):
        """Sets the mobile_number of this User.

        User mobile number

        :param mobile_number: The mobile_number of this User.
        :type mobile_number: str
        """

        self._mobile_number = mobile_number

    @property
    def role(self):
        """Gets the role of this User.

        User role

        :return: The role of this User.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this User.

        User role

        :param role: The role of this User.
        :type role: str
        """
        allowed_values = ["ADMIN", "FULL_USER", "READ_ONLY", "CARD_ONLY"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def status(self):
        """Gets the status of this User.

        Status of user

        :return: The status of this User.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this User.

        Status of user

        :param status: The status of this User.
        :type status: str
        """
        allowed_values = ["LIVE", "CLOSED", "FROZEN", "INVITE_SENT", "SMS_CODE_SENT"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def user_cvl(self):
        """Gets the user_cvl of this User.

        Users Cvl type ID (shows up when status is LIVE)

        :return: The user_cvl of this User.
        :rtype: str
        """
        return self._user_cvl

    @user_cvl.setter
    def user_cvl(self, user_cvl):
        """Sets the user_cvl of this User.

        Users Cvl type ID (shows up when status is LIVE)

        :param user_cvl: The user_cvl of this User.
        :type user_cvl: str
        """

        self._user_cvl = user_cvl
