# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server import util


class DirectDebit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, currency: Currency=None, date_created: datetime=None, direct_debit_reference: str=None, direct_debit_uuid: str=None, is_ddic: bool=None, last_updated: datetime=None, mandate_u_uid: str=None, originator_alias: str=None, originator_name: str=None, originator_reference: str=None, scheme_reject_reason: str=None, scheme_reject_reason_code: str=None, status: str=None, target_ican: int=None, target_payee_id: int=None, type: str=None):
        """DirectDebit - a model defined in OpenAPI

        :param amount: The amount of this DirectDebit.
        :param currency: The currency of this DirectDebit.
        :param date_created: The date_created of this DirectDebit.
        :param direct_debit_reference: The direct_debit_reference of this DirectDebit.
        :param direct_debit_uuid: The direct_debit_uuid of this DirectDebit.
        :param is_ddic: The is_ddic of this DirectDebit.
        :param last_updated: The last_updated of this DirectDebit.
        :param mandate_u_uid: The mandate_u_uid of this DirectDebit.
        :param originator_alias: The originator_alias of this DirectDebit.
        :param originator_name: The originator_name of this DirectDebit.
        :param originator_reference: The originator_reference of this DirectDebit.
        :param scheme_reject_reason: The scheme_reject_reason of this DirectDebit.
        :param scheme_reject_reason_code: The scheme_reject_reason_code of this DirectDebit.
        :param status: The status of this DirectDebit.
        :param target_ican: The target_ican of this DirectDebit.
        :param target_payee_id: The target_payee_id of this DirectDebit.
        :param type: The type of this DirectDebit.
        """
        self.openapi_types = {
            'amount': int,
            'currency': Currency,
            'date_created': datetime,
            'direct_debit_reference': str,
            'direct_debit_uuid': str,
            'is_ddic': bool,
            'last_updated': datetime,
            'mandate_u_uid': str,
            'originator_alias': str,
            'originator_name': str,
            'originator_reference': str,
            'scheme_reject_reason': str,
            'scheme_reject_reason_code': str,
            'status': str,
            'target_ican': int,
            'target_payee_id': int,
            'type': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency': 'currency',
            'date_created': 'dateCreated',
            'direct_debit_reference': 'directDebitReference',
            'direct_debit_uuid': 'directDebitUuid',
            'is_ddic': 'isDDIC',
            'last_updated': 'lastUpdated',
            'mandate_u_uid': 'mandateUUid',
            'originator_alias': 'originatorAlias',
            'originator_name': 'originatorName',
            'originator_reference': 'originatorReference',
            'scheme_reject_reason': 'schemeRejectReason',
            'scheme_reject_reason_code': 'schemeRejectReasonCode',
            'status': 'status',
            'target_ican': 'targetIcan',
            'target_payee_id': 'targetPayeeId',
            'type': 'type'
        }

        self._amount = amount
        self._currency = currency
        self._date_created = date_created
        self._direct_debit_reference = direct_debit_reference
        self._direct_debit_uuid = direct_debit_uuid
        self._is_ddic = is_ddic
        self._last_updated = last_updated
        self._mandate_u_uid = mandate_u_uid
        self._originator_alias = originator_alias
        self._originator_name = originator_name
        self._originator_reference = originator_reference
        self._scheme_reject_reason = scheme_reject_reason
        self._scheme_reject_reason_code = scheme_reject_reason_code
        self._status = status
        self._target_ican = target_ican
        self._target_payee_id = target_payee_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DirectDebit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The directDebit of this DirectDebit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this DirectDebit.

        Value of the payment

        :return: The amount of this DirectDebit.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DirectDebit.

        Value of the payment

        :param amount: The amount of this DirectDebit.
        :type amount: int
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this DirectDebit.


        :return: The currency of this DirectDebit.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this DirectDebit.


        :param currency: The currency of this DirectDebit.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def date_created(self):
        """Gets the date_created of this DirectDebit.

        Date the direct debit was created. Milliseconds since the epoch (1970).

        :return: The date_created of this DirectDebit.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this DirectDebit.

        Date the direct debit was created. Milliseconds since the epoch (1970).

        :param date_created: The date_created of this DirectDebit.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def direct_debit_reference(self):
        """Gets the direct_debit_reference of this DirectDebit.

        The direct debit reference.

        :return: The direct_debit_reference of this DirectDebit.
        :rtype: str
        """
        return self._direct_debit_reference

    @direct_debit_reference.setter
    def direct_debit_reference(self, direct_debit_reference):
        """Sets the direct_debit_reference of this DirectDebit.

        The direct debit reference.

        :param direct_debit_reference: The direct_debit_reference of this DirectDebit.
        :type direct_debit_reference: str
        """

        self._direct_debit_reference = direct_debit_reference

    @property
    def direct_debit_uuid(self):
        """Gets the direct_debit_uuid of this DirectDebit.

        The UUID for the direct debit payment

        :return: The direct_debit_uuid of this DirectDebit.
        :rtype: str
        """
        return self._direct_debit_uuid

    @direct_debit_uuid.setter
    def direct_debit_uuid(self, direct_debit_uuid):
        """Sets the direct_debit_uuid of this DirectDebit.

        The UUID for the direct debit payment

        :param direct_debit_uuid: The direct_debit_uuid of this DirectDebit.
        :type direct_debit_uuid: str
        """

        self._direct_debit_uuid = direct_debit_uuid

    @property
    def is_ddic(self):
        """Gets the is_ddic of this DirectDebit.

        DDIC is a Direct Debit Indemnity Claim (i.e.a refund). If if the DD is requested to be refunded it is marked isDDIC true.

        :return: The is_ddic of this DirectDebit.
        :rtype: bool
        """
        return self._is_ddic

    @is_ddic.setter
    def is_ddic(self, is_ddic):
        """Sets the is_ddic of this DirectDebit.

        DDIC is a Direct Debit Indemnity Claim (i.e.a refund). If if the DD is requested to be refunded it is marked isDDIC true.

        :param is_ddic: The is_ddic of this DirectDebit.
        :type is_ddic: bool
        """

        self._is_ddic = is_ddic

    @property
    def last_updated(self):
        """Gets the last_updated of this DirectDebit.

        Date the direct debit was last updated. Milliseconds since the epoch (1970).

        :return: The last_updated of this DirectDebit.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this DirectDebit.

        Date the direct debit was last updated. Milliseconds since the epoch (1970).

        :param last_updated: The last_updated of this DirectDebit.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def mandate_u_uid(self):
        """Gets the mandate_u_uid of this DirectDebit.

        The UUID for the mandate

        :return: The mandate_u_uid of this DirectDebit.
        :rtype: str
        """
        return self._mandate_u_uid

    @mandate_u_uid.setter
    def mandate_u_uid(self, mandate_u_uid):
        """Sets the mandate_u_uid of this DirectDebit.

        The UUID for the mandate

        :param mandate_u_uid: The mandate_u_uid of this DirectDebit.
        :type mandate_u_uid: str
        """

        self._mandate_u_uid = mandate_u_uid

    @property
    def originator_alias(self):
        """Gets the originator_alias of this DirectDebit.

        The Alias of the party who sets up the direct debit.

        :return: The originator_alias of this DirectDebit.
        :rtype: str
        """
        return self._originator_alias

    @originator_alias.setter
    def originator_alias(self, originator_alias):
        """Sets the originator_alias of this DirectDebit.

        The Alias of the party who sets up the direct debit.

        :param originator_alias: The originator_alias of this DirectDebit.
        :type originator_alias: str
        """

        self._originator_alias = originator_alias

    @property
    def originator_name(self):
        """Gets the originator_name of this DirectDebit.

        The creator of the party who sets up the direct debit.

        :return: The originator_name of this DirectDebit.
        :rtype: str
        """
        return self._originator_name

    @originator_name.setter
    def originator_name(self, originator_name):
        """Sets the originator_name of this DirectDebit.

        The creator of the party who sets up the direct debit.

        :param originator_name: The originator_name of this DirectDebit.
        :type originator_name: str
        """

        self._originator_name = originator_name

    @property
    def originator_reference(self):
        """Gets the originator_reference of this DirectDebit.

        Set by party who sets up the direct debit.

        :return: The originator_reference of this DirectDebit.
        :rtype: str
        """
        return self._originator_reference

    @originator_reference.setter
    def originator_reference(self, originator_reference):
        """Sets the originator_reference of this DirectDebit.

        Set by party who sets up the direct debit.

        :param originator_reference: The originator_reference of this DirectDebit.
        :type originator_reference: str
        """

        self._originator_reference = originator_reference

    @property
    def scheme_reject_reason(self):
        """Gets the scheme_reject_reason of this DirectDebit.

        Reason why rejected

        :return: The scheme_reject_reason of this DirectDebit.
        :rtype: str
        """
        return self._scheme_reject_reason

    @scheme_reject_reason.setter
    def scheme_reject_reason(self, scheme_reject_reason):
        """Sets the scheme_reject_reason of this DirectDebit.

        Reason why rejected

        :param scheme_reject_reason: The scheme_reject_reason of this DirectDebit.
        :type scheme_reject_reason: str
        """

        self._scheme_reject_reason = scheme_reject_reason

    @property
    def scheme_reject_reason_code(self):
        """Gets the scheme_reject_reason_code of this DirectDebit.

        The reject code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason.

        :return: The scheme_reject_reason_code of this DirectDebit.
        :rtype: str
        """
        return self._scheme_reject_reason_code

    @scheme_reject_reason_code.setter
    def scheme_reject_reason_code(self, scheme_reject_reason_code):
        """Sets the scheme_reject_reason_code of this DirectDebit.

        The reject code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason.

        :param scheme_reject_reason_code: The scheme_reject_reason_code of this DirectDebit.
        :type scheme_reject_reason_code: str
        """
        allowed_values = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B"]  # noqa: E501
        if scheme_reject_reason_code not in allowed_values:
            raise ValueError(
                "Invalid value for `scheme_reject_reason_code` ({0}), must be one of {1}"
                .format(scheme_reject_reason_code, allowed_values)
            )

        self._scheme_reject_reason_code = scheme_reject_reason_code

    @property
    def status(self):
        """Gets the status of this DirectDebit.

        The statuses of the direct debit payments associated with the mandate. * 'RECIEVED' - Direct Debit has been recieved * 'REJECT_REQUESTED' - The direct debit has a rejected request associated with it * 'REJECT_READY_FOR_PROCESSING'  * 'REJECT_RECORD_IN_PROGRESS' * 'REJECT_RECORDED' * 'REJECT_FILE_CREATED' * 'REJECT_FILE_SENT' * 'COLLECTED' - Direct debit collected * 'REFUND_REQUESTED' - Refund requested on direct debit * 'REFUND_RECORD_IN_PROGRESS' - Refund in progress on direct debit * 'REFUND_RECORDED' * 'REFUND_FILE_CREATED' * 'REFUND_FILE_SENT'  

        :return: The status of this DirectDebit.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DirectDebit.

        The statuses of the direct debit payments associated with the mandate. * 'RECIEVED' - Direct Debit has been recieved * 'REJECT_REQUESTED' - The direct debit has a rejected request associated with it * 'REJECT_READY_FOR_PROCESSING'  * 'REJECT_RECORD_IN_PROGRESS' * 'REJECT_RECORDED' * 'REJECT_FILE_CREATED' * 'REJECT_FILE_SENT' * 'COLLECTED' - Direct debit collected * 'REFUND_REQUESTED' - Refund requested on direct debit * 'REFUND_RECORD_IN_PROGRESS' - Refund in progress on direct debit * 'REFUND_RECORDED' * 'REFUND_FILE_CREATED' * 'REFUND_FILE_SENT'  

        :param status: The status of this DirectDebit.
        :type status: str
        """
        allowed_values = ["RECIEVED", "REJECT_REQUESTED", "REJECT_READY_FOR_PROCESSING", "REJECT_RECORD_IN_PROGRESS", "REJECT_RECORDED", "REJECT_FILE_CREATED", "REJECT_FILE_SENT", "COLLECTED", "REFUND_REQUESTED", "REFUND_RECORD_IN_PROGRESS", "REFUND_RECORDED", "REFUND_FILE_CREATED", "REFUND_FILE_SENT"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def target_ican(self):
        """Gets the target_ican of this DirectDebit.

        The ican of your fire account that the money was taken from

        :return: The target_ican of this DirectDebit.
        :rtype: int
        """
        return self._target_ican

    @target_ican.setter
    def target_ican(self, target_ican):
        """Sets the target_ican of this DirectDebit.

        The ican of your fire account that the money was taken from

        :param target_ican: The target_ican of this DirectDebit.
        :type target_ican: int
        """

        self._target_ican = target_ican

    @property
    def target_payee_id(self):
        """Gets the target_payee_id of this DirectDebit.

        The payee that was created when the DD was processed

        :return: The target_payee_id of this DirectDebit.
        :rtype: int
        """
        return self._target_payee_id

    @target_payee_id.setter
    def target_payee_id(self, target_payee_id):
        """Sets the target_payee_id of this DirectDebit.

        The payee that was created when the DD was processed

        :param target_payee_id: The target_payee_id of this DirectDebit.
        :type target_payee_id: int
        """

        self._target_payee_id = target_payee_id

    @property
    def type(self):
        """Gets the type of this DirectDebit.

        The type of the direct debit.

        :return: The type of this DirectDebit.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DirectDebit.

        The type of the direct debit.

        :param type: The type of this DirectDebit.
        :type type: str
        """
        allowed_values = ["FIRST_COLLECTION", "ONGOING_COLLECTION", "REPRESENTED_COLLECTION", "FINAL_COLLECTION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
