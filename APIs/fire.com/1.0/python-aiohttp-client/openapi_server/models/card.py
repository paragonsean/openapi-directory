# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Card(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blocked: bool=None, card_id: int=None, date_created: datetime=None, email_address: str=None, eur_ican: int=None, expiry_date: datetime=None, first_name: str=None, gbp_ican: int=None, last_name: str=None, masked_pan: str=None, provider: str=None, status: str=None, status_reason: str=None, user_id: int=None):
        """Card - a model defined in OpenAPI

        :param blocked: The blocked of this Card.
        :param card_id: The card_id of this Card.
        :param date_created: The date_created of this Card.
        :param email_address: The email_address of this Card.
        :param eur_ican: The eur_ican of this Card.
        :param expiry_date: The expiry_date of this Card.
        :param first_name: The first_name of this Card.
        :param gbp_ican: The gbp_ican of this Card.
        :param last_name: The last_name of this Card.
        :param masked_pan: The masked_pan of this Card.
        :param provider: The provider of this Card.
        :param status: The status of this Card.
        :param status_reason: The status_reason of this Card.
        :param user_id: The user_id of this Card.
        """
        self.openapi_types = {
            'blocked': bool,
            'card_id': int,
            'date_created': datetime,
            'email_address': str,
            'eur_ican': int,
            'expiry_date': datetime,
            'first_name': str,
            'gbp_ican': int,
            'last_name': str,
            'masked_pan': str,
            'provider': str,
            'status': str,
            'status_reason': str,
            'user_id': int
        }

        self.attribute_map = {
            'blocked': 'blocked',
            'card_id': 'cardId',
            'date_created': 'dateCreated',
            'email_address': 'emailAddress',
            'eur_ican': 'eurIcan',
            'expiry_date': 'expiryDate',
            'first_name': 'firstName',
            'gbp_ican': 'gbpIcan',
            'last_name': 'lastName',
            'masked_pan': 'maskedPan',
            'provider': 'provider',
            'status': 'status',
            'status_reason': 'statusReason',
            'user_id': 'userId'
        }

        self._blocked = blocked
        self._card_id = card_id
        self._date_created = date_created
        self._email_address = email_address
        self._eur_ican = eur_ican
        self._expiry_date = expiry_date
        self._first_name = first_name
        self._gbp_ican = gbp_ican
        self._last_name = last_name
        self._masked_pan = masked_pan
        self._provider = provider
        self._status = status
        self._status_reason = status_reason
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Card':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The card of this Card.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blocked(self):
        """Gets the blocked of this Card.

        Whether the card is blocked or not

        :return: The blocked of this Card.
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this Card.

        Whether the card is blocked or not

        :param blocked: The blocked of this Card.
        :type blocked: bool
        """

        self._blocked = blocked

    @property
    def card_id(self):
        """Gets the card_id of this Card.

        card id assigned by fire.com

        :return: The card_id of this Card.
        :rtype: int
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this Card.

        card id assigned by fire.com

        :param card_id: The card_id of this Card.
        :type card_id: int
        """

        self._card_id = card_id

    @property
    def date_created(self):
        """Gets the date_created of this Card.

        The date-time the card was created

        :return: The date_created of this Card.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Card.

        The date-time the card was created

        :param date_created: The date_created of this Card.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def email_address(self):
        """Gets the email_address of this Card.

        card user email address

        :return: The email_address of this Card.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this Card.

        card user email address

        :param email_address: The email_address of this Card.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def eur_ican(self):
        """Gets the eur_ican of this Card.

        identifier for the eur fire.com account (assigned by fire.com)

        :return: The eur_ican of this Card.
        :rtype: int
        """
        return self._eur_ican

    @eur_ican.setter
    def eur_ican(self, eur_ican):
        """Sets the eur_ican of this Card.

        identifier for the eur fire.com account (assigned by fire.com)

        :param eur_ican: The eur_ican of this Card.
        :type eur_ican: int
        """

        self._eur_ican = eur_ican

    @property
    def expiry_date(self):
        """Gets the expiry_date of this Card.

        card expiry date

        :return: The expiry_date of this Card.
        :rtype: datetime
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this Card.

        card expiry date

        :param expiry_date: The expiry_date of this Card.
        :type expiry_date: datetime
        """

        self._expiry_date = expiry_date

    @property
    def first_name(self):
        """Gets the first_name of this Card.

        card user first name

        :return: The first_name of this Card.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Card.

        card user first name

        :param first_name: The first_name of this Card.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def gbp_ican(self):
        """Gets the gbp_ican of this Card.

        identifier for the gbp fire.com account (assigned by fire.com)

        :return: The gbp_ican of this Card.
        :rtype: int
        """
        return self._gbp_ican

    @gbp_ican.setter
    def gbp_ican(self, gbp_ican):
        """Sets the gbp_ican of this Card.

        identifier for the gbp fire.com account (assigned by fire.com)

        :param gbp_ican: The gbp_ican of this Card.
        :type gbp_ican: int
        """

        self._gbp_ican = gbp_ican

    @property
    def last_name(self):
        """Gets the last_name of this Card.

        card user last name

        :return: The last_name of this Card.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Card.

        card user last name

        :param last_name: The last_name of this Card.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def masked_pan(self):
        """Gets the masked_pan of this Card.

        card number (masked)

        :return: The masked_pan of this Card.
        :rtype: str
        """
        return self._masked_pan

    @masked_pan.setter
    def masked_pan(self, masked_pan):
        """Sets the masked_pan of this Card.

        card number (masked)

        :param masked_pan: The masked_pan of this Card.
        :type masked_pan: str
        """

        self._masked_pan = masked_pan

    @property
    def provider(self):
        """Gets the provider of this Card.

        card provider

        :return: The provider of this Card.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Card.

        card provider

        :param provider: The provider of this Card.
        :type provider: str
        """
        allowed_values = ["MASTERCARD"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def status(self):
        """Gets the status of this Card.

        card status

        :return: The status of this Card.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Card.

        card status

        :param status: The status of this Card.
        :type status: str
        """
        allowed_values = ["LIVE", "CREATED_ACTIVE", "CREATED_INACTIVE", "DEACTIVATED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_reason(self):
        """Gets the status_reason of this Card.

        reason for card status

        :return: The status_reason of this Card.
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this Card.

        reason for card status

        :param status_reason: The status_reason of this Card.
        :type status_reason: str
        """
        allowed_values = ["LOST_CARD", "STOLEN_CARD", "CARD_DESTROYED"]  # noqa: E501
        if status_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `status_reason` ({0}), must be one of {1}"
                .format(status_reason, allowed_values)
            )

        self._status_reason = status_reason

    @property
    def user_id(self):
        """Gets the user_id of this Card.

        card user id assigned by fire.com

        :return: The user_id of this Card.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Card.

        card user id assigned by fire.com

        :param user_id: The user_id of this Card.
        :type user_id: int
        """

        self._user_id = user_id
