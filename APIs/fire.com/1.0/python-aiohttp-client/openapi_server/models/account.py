# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance: int=None, cbic: str=None, ccan: str=None, ciban: str=None, cnsc: str=None, colour: str=None, currency: Currency=None, default_account: bool=None, direct_debits_allowed: bool=None, fop_only: bool=None, ican: int=None, name: str=None, status: str=None):
        """Account - a model defined in OpenAPI

        :param balance: The balance of this Account.
        :param cbic: The cbic of this Account.
        :param ccan: The ccan of this Account.
        :param ciban: The ciban of this Account.
        :param cnsc: The cnsc of this Account.
        :param colour: The colour of this Account.
        :param currency: The currency of this Account.
        :param default_account: The default_account of this Account.
        :param direct_debits_allowed: The direct_debits_allowed of this Account.
        :param fop_only: The fop_only of this Account.
        :param ican: The ican of this Account.
        :param name: The name of this Account.
        :param status: The status of this Account.
        """
        self.openapi_types = {
            'balance': int,
            'cbic': str,
            'ccan': str,
            'ciban': str,
            'cnsc': str,
            'colour': str,
            'currency': Currency,
            'default_account': bool,
            'direct_debits_allowed': bool,
            'fop_only': bool,
            'ican': int,
            'name': str,
            'status': str
        }

        self.attribute_map = {
            'balance': 'balance',
            'cbic': 'cbic',
            'ccan': 'ccan',
            'ciban': 'ciban',
            'cnsc': 'cnsc',
            'colour': 'colour',
            'currency': 'currency',
            'default_account': 'defaultAccount',
            'direct_debits_allowed': 'directDebitsAllowed',
            'fop_only': 'fopOnly',
            'ican': 'ican',
            'name': 'name',
            'status': 'status'
        }

        self._balance = balance
        self._cbic = cbic
        self._ccan = ccan
        self._ciban = ciban
        self._cnsc = cnsc
        self._colour = colour
        self._currency = currency
        self._default_account = default_account
        self._direct_debits_allowed = direct_debits_allowed
        self._fop_only = fop_only
        self._ican = ican
        self._name = name
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance(self):
        """Gets the balance of this Account.

        the balance of the account (in minor currency units - pence, cent etc. 434050 == 4,340.50 GBP for a GBP account).

        :return: The balance of this Account.
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Account.

        the balance of the account (in minor currency units - pence, cent etc. 434050 == 4,340.50 GBP for a GBP account).

        :param balance: The balance of this Account.
        :type balance: int
        """

        self._balance = balance

    @property
    def cbic(self):
        """Gets the cbic of this Account.

        the BIC of the account (provided if currency is EUR).

        :return: The cbic of this Account.
        :rtype: str
        """
        return self._cbic

    @cbic.setter
    def cbic(self, cbic):
        """Sets the cbic of this Account.

        the BIC of the account (provided if currency is EUR).

        :param cbic: The cbic of this Account.
        :type cbic: str
        """

        self._cbic = cbic

    @property
    def ccan(self):
        """Gets the ccan of this Account.

        the Account Number of the account.

        :return: The ccan of this Account.
        :rtype: str
        """
        return self._ccan

    @ccan.setter
    def ccan(self, ccan):
        """Sets the ccan of this Account.

        the Account Number of the account.

        :param ccan: The ccan of this Account.
        :type ccan: str
        """

        self._ccan = ccan

    @property
    def ciban(self):
        """Gets the ciban of this Account.

        the IBAN of the account (provided if currency is EUR).

        :return: The ciban of this Account.
        :rtype: str
        """
        return self._ciban

    @ciban.setter
    def ciban(self, ciban):
        """Sets the ciban of this Account.

        the IBAN of the account (provided if currency is EUR).

        :param ciban: The ciban of this Account.
        :type ciban: str
        """

        self._ciban = ciban

    @property
    def cnsc(self):
        """Gets the cnsc of this Account.

        the Sort Code of the account.

        :return: The cnsc of this Account.
        :rtype: str
        """
        return self._cnsc

    @cnsc.setter
    def cnsc(self, cnsc):
        """Sets the cnsc of this Account.

        the Sort Code of the account.

        :param cnsc: The cnsc of this Account.
        :type cnsc: str
        """

        self._cnsc = cnsc

    @property
    def colour(self):
        """Gets the colour of this Account.

        Internal Use

        :return: The colour of this Account.
        :rtype: str
        """
        return self._colour

    @colour.setter
    def colour(self, colour):
        """Sets the colour of this Account.

        Internal Use

        :param colour: The colour of this Account.
        :type colour: str
        """

        self._colour = colour

    @property
    def currency(self):
        """Gets the currency of this Account.


        :return: The currency of this Account.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Account.


        :param currency: The currency of this Account.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def default_account(self):
        """Gets the default_account of this Account.

        true if this is the default account for this currency. This will be the account that general fees are taken from (as opposed to per-transaction fees).

        :return: The default_account of this Account.
        :rtype: bool
        """
        return self._default_account

    @default_account.setter
    def default_account(self, default_account):
        """Sets the default_account of this Account.

        true if this is the default account for this currency. This will be the account that general fees are taken from (as opposed to per-transaction fees).

        :param default_account: The default_account of this Account.
        :type default_account: bool
        """

        self._default_account = default_account

    @property
    def direct_debits_allowed(self):
        """Gets the direct_debits_allowed of this Account.

        Whether or not direct debits can be set up on this account.

        :return: The direct_debits_allowed of this Account.
        :rtype: bool
        """
        return self._direct_debits_allowed

    @direct_debits_allowed.setter
    def direct_debits_allowed(self, direct_debits_allowed):
        """Sets the direct_debits_allowed of this Account.

        Whether or not direct debits can be set up on this account.

        :param direct_debits_allowed: The direct_debits_allowed of this Account.
        :type direct_debits_allowed: bool
        """

        self._direct_debits_allowed = direct_debits_allowed

    @property
    def fop_only(self):
        """Gets the fop_only of this Account.

        Indicates that this account is for collecting Fire Open Payments only. All other payments to this account will be returned.

        :return: The fop_only of this Account.
        :rtype: bool
        """
        return self._fop_only

    @fop_only.setter
    def fop_only(self, fop_only):
        """Sets the fop_only of this Account.

        Indicates that this account is for collecting Fire Open Payments only. All other payments to this account will be returned.

        :param fop_only: The fop_only of this Account.
        :type fop_only: bool
        """

        self._fop_only = fop_only

    @property
    def ican(self):
        """Gets the ican of this Account.

        identifier for the fire.com account (assigned by fire.com)

        :return: The ican of this Account.
        :rtype: int
        """
        return self._ican

    @ican.setter
    def ican(self, ican):
        """Sets the ican of this Account.

        identifier for the fire.com account (assigned by fire.com)

        :param ican: The ican of this Account.
        :type ican: int
        """

        self._ican = ican

    @property
    def name(self):
        """Gets the name of this Account.

        the name the user gives to the account to help them identify it.

        :return: The name of this Account.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.

        the name the user gives to the account to help them identify it.

        :param name: The name of this Account.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this Account.

        Live accounts can be used as normal. Migrated accounts were used before Brexit and are read-only.

        :return: The status of this Account.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Account.

        Live accounts can be used as normal. Migrated accounts were used before Brexit and are read-only.

        :param status: The status of this Account.
        :type status: str
        """
        allowed_values = ["LIVE", "BREXIT_MIGRATED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
