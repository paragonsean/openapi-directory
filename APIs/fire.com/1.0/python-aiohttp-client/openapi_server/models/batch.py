# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Batch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch_name: str=None, batch_uuid: str=None, callback_url: str=None, currency: str=None, date_created: datetime=None, job_number: str=None, last_updated: datetime=None, number_of_items_failed: int=None, number_of_items_submitted: int=None, number_of_items_succeeded: int=None, source_name: str=None, status: str=None, type: str=None, value_of_items_failed: int=None, value_of_items_submitted: int=None, value_of_items_succeeded: int=None):
        """Batch - a model defined in OpenAPI

        :param batch_name: The batch_name of this Batch.
        :param batch_uuid: The batch_uuid of this Batch.
        :param callback_url: The callback_url of this Batch.
        :param currency: The currency of this Batch.
        :param date_created: The date_created of this Batch.
        :param job_number: The job_number of this Batch.
        :param last_updated: The last_updated of this Batch.
        :param number_of_items_failed: The number_of_items_failed of this Batch.
        :param number_of_items_submitted: The number_of_items_submitted of this Batch.
        :param number_of_items_succeeded: The number_of_items_succeeded of this Batch.
        :param source_name: The source_name of this Batch.
        :param status: The status of this Batch.
        :param type: The type of this Batch.
        :param value_of_items_failed: The value_of_items_failed of this Batch.
        :param value_of_items_submitted: The value_of_items_submitted of this Batch.
        :param value_of_items_succeeded: The value_of_items_succeeded of this Batch.
        """
        self.openapi_types = {
            'batch_name': str,
            'batch_uuid': str,
            'callback_url': str,
            'currency': str,
            'date_created': datetime,
            'job_number': str,
            'last_updated': datetime,
            'number_of_items_failed': int,
            'number_of_items_submitted': int,
            'number_of_items_succeeded': int,
            'source_name': str,
            'status': str,
            'type': str,
            'value_of_items_failed': int,
            'value_of_items_submitted': int,
            'value_of_items_succeeded': int
        }

        self.attribute_map = {
            'batch_name': 'batchName',
            'batch_uuid': 'batchUuid',
            'callback_url': 'callbackUrl',
            'currency': 'currency',
            'date_created': 'dateCreated',
            'job_number': 'jobNumber',
            'last_updated': 'lastUpdated',
            'number_of_items_failed': 'numberOfItemsFailed',
            'number_of_items_submitted': 'numberOfItemsSubmitted',
            'number_of_items_succeeded': 'numberOfItemsSucceeded',
            'source_name': 'sourceName',
            'status': 'status',
            'type': 'type',
            'value_of_items_failed': 'valueOfItemsFailed',
            'value_of_items_submitted': 'valueOfItemsSubmitted',
            'value_of_items_succeeded': 'valueOfItemsSucceeded'
        }

        self._batch_name = batch_name
        self._batch_uuid = batch_uuid
        self._callback_url = callback_url
        self._currency = currency
        self._date_created = date_created
        self._job_number = job_number
        self._last_updated = last_updated
        self._number_of_items_failed = number_of_items_failed
        self._number_of_items_submitted = number_of_items_submitted
        self._number_of_items_succeeded = number_of_items_succeeded
        self._source_name = source_name
        self._status = status
        self._type = type
        self._value_of_items_failed = value_of_items_failed
        self._value_of_items_submitted = value_of_items_submitted
        self._value_of_items_succeeded = value_of_items_succeeded

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Batch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The batch of this Batch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_name(self):
        """Gets the batch_name of this Batch.

        An optional name you give to the batch at creation time

        :return: The batch_name of this Batch.
        :rtype: str
        """
        return self._batch_name

    @batch_name.setter
    def batch_name(self, batch_name):
        """Sets the batch_name of this Batch.

        An optional name you give to the batch at creation time

        :param batch_name: The batch_name of this Batch.
        :type batch_name: str
        """

        self._batch_name = batch_name

    @property
    def batch_uuid(self):
        """Gets the batch_uuid of this Batch.

        A UUID for this item.

        :return: The batch_uuid of this Batch.
        :rtype: str
        """
        return self._batch_uuid

    @batch_uuid.setter
    def batch_uuid(self, batch_uuid):
        """Sets the batch_uuid of this Batch.

        A UUID for this item.

        :param batch_uuid: The batch_uuid of this Batch.
        :type batch_uuid: str
        """

        self._batch_uuid = batch_uuid

    @property
    def callback_url(self):
        """Gets the callback_url of this Batch.

        An optional POST URL that all events for this batch will be sent to.

        :return: The callback_url of this Batch.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this Batch.

        An optional POST URL that all events for this batch will be sent to.

        :param callback_url: The callback_url of this Batch.
        :type callback_url: str
        """

        self._callback_url = callback_url

    @property
    def currency(self):
        """Gets the currency of this Batch.

        All payments in the batch must be the same currency.

        :return: The currency of this Batch.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Batch.

        All payments in the batch must be the same currency.

        :param currency: The currency of this Batch.
        :type currency: str
        """

        self._currency = currency

    @property
    def date_created(self):
        """Gets the date_created of this Batch.

        The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z

        :return: The date_created of this Batch.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Batch.

        The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z

        :param date_created: The date_created of this Batch.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def job_number(self):
        """Gets the job_number of this Batch.

        An optional job number you can give to the batch to help link it to your own system.

        :return: The job_number of this Batch.
        :rtype: str
        """
        return self._job_number

    @job_number.setter
    def job_number(self, job_number):
        """Sets the job_number of this Batch.

        An optional job number you can give to the batch to help link it to your own system.

        :param job_number: The job_number of this Batch.
        :type job_number: str
        """

        self._job_number = job_number

    @property
    def last_updated(self):
        """Gets the last_updated of this Batch.

        The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z

        :return: The last_updated of this Batch.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Batch.

        The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z

        :param last_updated: The last_updated of this Batch.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def number_of_items_failed(self):
        """Gets the number_of_items_failed of this Batch.

        Once processed, a count of the number of items that didn’t process successfully.

        :return: The number_of_items_failed of this Batch.
        :rtype: int
        """
        return self._number_of_items_failed

    @number_of_items_failed.setter
    def number_of_items_failed(self, number_of_items_failed):
        """Sets the number_of_items_failed of this Batch.

        Once processed, a count of the number of items that didn’t process successfully.

        :param number_of_items_failed: The number_of_items_failed of this Batch.
        :type number_of_items_failed: int
        """

        self._number_of_items_failed = number_of_items_failed

    @property
    def number_of_items_submitted(self):
        """Gets the number_of_items_submitted of this Batch.

        A count of the number of items in the batch

        :return: The number_of_items_submitted of this Batch.
        :rtype: int
        """
        return self._number_of_items_submitted

    @number_of_items_submitted.setter
    def number_of_items_submitted(self, number_of_items_submitted):
        """Sets the number_of_items_submitted of this Batch.

        A count of the number of items in the batch

        :param number_of_items_submitted: The number_of_items_submitted of this Batch.
        :type number_of_items_submitted: int
        """

        self._number_of_items_submitted = number_of_items_submitted

    @property
    def number_of_items_succeeded(self):
        """Gets the number_of_items_succeeded of this Batch.

        Once processed, a count of the number of items that processed successfully.

        :return: The number_of_items_succeeded of this Batch.
        :rtype: int
        """
        return self._number_of_items_succeeded

    @number_of_items_succeeded.setter
    def number_of_items_succeeded(self, number_of_items_succeeded):
        """Sets the number_of_items_succeeded of this Batch.

        Once processed, a count of the number of items that processed successfully.

        :param number_of_items_succeeded: The number_of_items_succeeded of this Batch.
        :type number_of_items_succeeded: int
        """

        self._number_of_items_succeeded = number_of_items_succeeded

    @property
    def source_name(self):
        """Gets the source_name of this Batch.

        A string describing where the batch originated - for instance the name of the API token that was used, or showing that the batch was automatically created by fire.com (in the case of a new payee batch).

        :return: The source_name of this Batch.
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this Batch.

        A string describing where the batch originated - for instance the name of the API token that was used, or showing that the batch was automatically created by fire.com (in the case of a new payee batch).

        :param source_name: The source_name of this Batch.
        :type source_name: str
        """

        self._source_name = source_name

    @property
    def status(self):
        """Gets the status of this Batch.

        status of the batch object

        :return: The status of this Batch.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Batch.

        status of the batch object

        :param status: The status of this Batch.
        :type status: str
        """
        allowed_values = ["PENDING_APPROVAL", "REJECTED", "COMPLETE", "OPEN", "CANCELLED", "PENDING_PARENT_BATCH_APPROVAL", "READY_FOR_PROCESSING", "PROCESSING"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this Batch.

        The type of the batch - can be one of the listed enums

        :return: The type of this Batch.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Batch.

        The type of the batch - can be one of the listed enums

        :param type: The type of this Batch.
        :type type: str
        """
        allowed_values = ["INTERNAL_TRANSFER", "BANK_TRANSFER", "INTERNATIONAL_TRANSFER", "NEW_PAYEE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value_of_items_failed(self):
        """Gets the value_of_items_failed of this Batch.

        Once processed, a sum of the value of items that didn’t process successfully. Specified in pence or cent.

        :return: The value_of_items_failed of this Batch.
        :rtype: int
        """
        return self._value_of_items_failed

    @value_of_items_failed.setter
    def value_of_items_failed(self, value_of_items_failed):
        """Sets the value_of_items_failed of this Batch.

        Once processed, a sum of the value of items that didn’t process successfully. Specified in pence or cent.

        :param value_of_items_failed: The value_of_items_failed of this Batch.
        :type value_of_items_failed: int
        """

        self._value_of_items_failed = value_of_items_failed

    @property
    def value_of_items_submitted(self):
        """Gets the value_of_items_submitted of this Batch.

        A sum of the value of items in the batch. Specified in pence or cent.

        :return: The value_of_items_submitted of this Batch.
        :rtype: int
        """
        return self._value_of_items_submitted

    @value_of_items_submitted.setter
    def value_of_items_submitted(self, value_of_items_submitted):
        """Sets the value_of_items_submitted of this Batch.

        A sum of the value of items in the batch. Specified in pence or cent.

        :param value_of_items_submitted: The value_of_items_submitted of this Batch.
        :type value_of_items_submitted: int
        """

        self._value_of_items_submitted = value_of_items_submitted

    @property
    def value_of_items_succeeded(self):
        """Gets the value_of_items_succeeded of this Batch.

        Once processed, a sum of the value of items that processed successfully. Specified in pence or cent.

        :return: The value_of_items_succeeded of this Batch.
        :rtype: int
        """
        return self._value_of_items_succeeded

    @value_of_items_succeeded.setter
    def value_of_items_succeeded(self, value_of_items_succeeded):
        """Sets the value_of_items_succeeded of this Batch.

        Once processed, a sum of the value of items that processed successfully. Specified in pence or cent.

        :param value_of_items_succeeded: The value_of_items_succeeded of this Batch.
        :type value_of_items_succeeded: int
        """

        self._value_of_items_succeeded = value_of_items_succeeded
