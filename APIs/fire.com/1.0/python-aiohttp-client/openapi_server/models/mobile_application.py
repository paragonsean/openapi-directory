# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MobileApplication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, os: str=None, business_user_id: int=None, client_id: str=None, device_name: str=None, device_os_version: str=None, mobile_application_id: int=None, status: str=None):
        """MobileApplication - a model defined in OpenAPI

        :param os: The os of this MobileApplication.
        :param business_user_id: The business_user_id of this MobileApplication.
        :param client_id: The client_id of this MobileApplication.
        :param device_name: The device_name of this MobileApplication.
        :param device_os_version: The device_os_version of this MobileApplication.
        :param mobile_application_id: The mobile_application_id of this MobileApplication.
        :param status: The status of this MobileApplication.
        """
        self.openapi_types = {
            'os': str,
            'business_user_id': int,
            'client_id': str,
            'device_name': str,
            'device_os_version': str,
            'mobile_application_id': int,
            'status': str
        }

        self.attribute_map = {
            'os': 'OS',
            'business_user_id': 'businessUserId',
            'client_id': 'clientID',
            'device_name': 'deviceName',
            'device_os_version': 'deviceOSVersion',
            'mobile_application_id': 'mobileApplicationId',
            'status': 'status'
        }

        self._os = os
        self._business_user_id = business_user_id
        self._client_id = client_id
        self._device_name = device_name
        self._device_os_version = device_os_version
        self._mobile_application_id = mobile_application_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MobileApplication':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The mobileApplication of this MobileApplication.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def os(self):
        """Gets the os of this MobileApplication.

        Operating system of device.

        :return: The os of this MobileApplication.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os):
        """Sets the os of this MobileApplication.

        Operating system of device.

        :param os: The os of this MobileApplication.
        :type os: str
        """
        allowed_values = ["Android", "IOS", "OTHER"]  # noqa: E501
        if os not in allowed_values:
            raise ValueError(
                "Invalid value for `os` ({0}), must be one of {1}"
                .format(os, allowed_values)
            )

        self._os = os

    @property
    def business_user_id(self):
        """Gets the business_user_id of this MobileApplication.

        Business user ID

        :return: The business_user_id of this MobileApplication.
        :rtype: int
        """
        return self._business_user_id

    @business_user_id.setter
    def business_user_id(self, business_user_id):
        """Sets the business_user_id of this MobileApplication.

        Business user ID

        :param business_user_id: The business_user_id of this MobileApplication.
        :type business_user_id: int
        """

        self._business_user_id = business_user_id

    @property
    def client_id(self):
        """Gets the client_id of this MobileApplication.

        Client ID of user.

        :return: The client_id of this MobileApplication.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this MobileApplication.

        Client ID of user.

        :param client_id: The client_id of this MobileApplication.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def device_name(self):
        """Gets the device_name of this MobileApplication.

        type of device.

        :return: The device_name of this MobileApplication.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this MobileApplication.

        type of device.

        :param device_name: The device_name of this MobileApplication.
        :type device_name: str
        """
        allowed_values = ["iPhone", "Android", "Other"]  # noqa: E501
        if device_name not in allowed_values:
            raise ValueError(
                "Invalid value for `device_name` ({0}), must be one of {1}"
                .format(device_name, allowed_values)
            )

        self._device_name = device_name

    @property
    def device_os_version(self):
        """Gets the device_os_version of this MobileApplication.

        OS version for device.

        :return: The device_os_version of this MobileApplication.
        :rtype: str
        """
        return self._device_os_version

    @device_os_version.setter
    def device_os_version(self, device_os_version):
        """Sets the device_os_version of this MobileApplication.

        OS version for device.

        :param device_os_version: The device_os_version of this MobileApplication.
        :type device_os_version: str
        """

        self._device_os_version = device_os_version

    @property
    def mobile_application_id(self):
        """Gets the mobile_application_id of this MobileApplication.

        Mobile application id for user.

        :return: The mobile_application_id of this MobileApplication.
        :rtype: int
        """
        return self._mobile_application_id

    @mobile_application_id.setter
    def mobile_application_id(self, mobile_application_id):
        """Sets the mobile_application_id of this MobileApplication.

        Mobile application id for user.

        :param mobile_application_id: The mobile_application_id of this MobileApplication.
        :type mobile_application_id: int
        """

        self._mobile_application_id = mobile_application_id

    @property
    def status(self):
        """Gets the status of this MobileApplication.

        Status of user

        :return: The status of this MobileApplication.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MobileApplication.

        Status of user

        :param status: The status of this MobileApplication.
        :type status: str
        """
        allowed_values = ["LIVE", "CLOSED", "LOCKED", "SMS_SENT"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
