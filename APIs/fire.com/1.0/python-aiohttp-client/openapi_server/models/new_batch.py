# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewBatch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, batch_name: str=None, callback_url: str=None, currency: str=None, job_number: str=None, type: str=None):
        """NewBatch - a model defined in OpenAPI

        :param batch_name: The batch_name of this NewBatch.
        :param callback_url: The callback_url of this NewBatch.
        :param currency: The currency of this NewBatch.
        :param job_number: The job_number of this NewBatch.
        :param type: The type of this NewBatch.
        """
        self.openapi_types = {
            'batch_name': str,
            'callback_url': str,
            'currency': str,
            'job_number': str,
            'type': str
        }

        self.attribute_map = {
            'batch_name': 'batchName',
            'callback_url': 'callbackUrl',
            'currency': 'currency',
            'job_number': 'jobNumber',
            'type': 'type'
        }

        self._batch_name = batch_name
        self._callback_url = callback_url
        self._currency = currency
        self._job_number = job_number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewBatch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The newBatch of this NewBatch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def batch_name(self):
        """Gets the batch_name of this NewBatch.

        An optional name you give to the batch at creation time.

        :return: The batch_name of this NewBatch.
        :rtype: str
        """
        return self._batch_name

    @batch_name.setter
    def batch_name(self, batch_name):
        """Sets the batch_name of this NewBatch.

        An optional name you give to the batch at creation time.

        :param batch_name: The batch_name of this NewBatch.
        :type batch_name: str
        """

        self._batch_name = batch_name

    @property
    def callback_url(self):
        """Gets the callback_url of this NewBatch.

        An optional POST URL that all events for this batch will be sent to.

        :return: The callback_url of this NewBatch.
        :rtype: str
        """
        return self._callback_url

    @callback_url.setter
    def callback_url(self, callback_url):
        """Sets the callback_url of this NewBatch.

        An optional POST URL that all events for this batch will be sent to.

        :param callback_url: The callback_url of this NewBatch.
        :type callback_url: str
        """

        self._callback_url = callback_url

    @property
    def currency(self):
        """Gets the currency of this NewBatch.

        3 digit ISO code for the currency you wish to send - GBP, EUR, USD, CAD, etc...

        :return: The currency of this NewBatch.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this NewBatch.

        3 digit ISO code for the currency you wish to send - GBP, EUR, USD, CAD, etc...

        :param currency: The currency of this NewBatch.
        :type currency: str
        """

        self._currency = currency

    @property
    def job_number(self):
        """Gets the job_number of this NewBatch.

        An optional job number you can give to the batch to help link it to your own system.

        :return: The job_number of this NewBatch.
        :rtype: str
        """
        return self._job_number

    @job_number.setter
    def job_number(self, job_number):
        """Sets the job_number of this NewBatch.

        An optional job number you can give to the batch to help link it to your own system.

        :param job_number: The job_number of this NewBatch.
        :type job_number: str
        """

        self._job_number = job_number

    @property
    def type(self):
        """Gets the type of this NewBatch.

        The type of the batch - can be one of the listed 3

        :return: The type of this NewBatch.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NewBatch.

        The type of the batch - can be one of the listed 3

        :param type: The type of this NewBatch.
        :type type: str
        """
        allowed_values = ["BANK_TRANSFER", "INTERNAL_TRANSFER", "INTERNATIONAL_TRANSFER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
