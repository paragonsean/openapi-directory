# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchItemInternalTransfer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, ican_from: int=None, ican_to: int=None, ref: str=None):
        """BatchItemInternalTransfer - a model defined in OpenAPI

        :param amount: The amount of this BatchItemInternalTransfer.
        :param ican_from: The ican_from of this BatchItemInternalTransfer.
        :param ican_to: The ican_to of this BatchItemInternalTransfer.
        :param ref: The ref of this BatchItemInternalTransfer.
        """
        self.openapi_types = {
            'amount': int,
            'ican_from': int,
            'ican_to': int,
            'ref': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'ican_from': 'icanFrom',
            'ican_to': 'icanTo',
            'ref': 'ref'
        }

        self._amount = amount
        self._ican_from = ican_from
        self._ican_to = ican_to
        self._ref = ref

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchItemInternalTransfer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The batchItemInternalTransfer of this BatchItemInternalTransfer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this BatchItemInternalTransfer.

        amount of funds to be transfered

        :return: The amount of this BatchItemInternalTransfer.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BatchItemInternalTransfer.

        amount of funds to be transfered

        :param amount: The amount of this BatchItemInternalTransfer.
        :type amount: int
        """

        self._amount = amount

    @property
    def ican_from(self):
        """Gets the ican_from of this BatchItemInternalTransfer.

        The account ID for the fire.com account the funds are taken from

        :return: The ican_from of this BatchItemInternalTransfer.
        :rtype: int
        """
        return self._ican_from

    @ican_from.setter
    def ican_from(self, ican_from):
        """Sets the ican_from of this BatchItemInternalTransfer.

        The account ID for the fire.com account the funds are taken from

        :param ican_from: The ican_from of this BatchItemInternalTransfer.
        :type ican_from: int
        """

        self._ican_from = ican_from

    @property
    def ican_to(self):
        """Gets the ican_to of this BatchItemInternalTransfer.

        The account ID for the fire.com account the funds are directed to

        :return: The ican_to of this BatchItemInternalTransfer.
        :rtype: int
        """
        return self._ican_to

    @ican_to.setter
    def ican_to(self, ican_to):
        """Sets the ican_to of this BatchItemInternalTransfer.

        The account ID for the fire.com account the funds are directed to

        :param ican_to: The ican_to of this BatchItemInternalTransfer.
        :type ican_to: int
        """

        self._ican_to = ican_to

    @property
    def ref(self):
        """Gets the ref of this BatchItemInternalTransfer.

        The reference on the transaction

        :return: The ref of this BatchItemInternalTransfer.
        :rtype: str
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this BatchItemInternalTransfer.

        The reference on the transaction

        :param ref: The ref of this BatchItemInternalTransfer.
        :type ref: str
        """

        self._ref = ref
