# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.country import Country
from openapi_server.models.currency import Currency
from openapi_server import util


class Aspsp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, aspsp_uuid: str=None, country: Country=None, currency: Currency=None, date_created: datetime=None, last_updated: datetime=None, logo_url: str=None):
        """Aspsp - a model defined in OpenAPI

        :param alias: The alias of this Aspsp.
        :param aspsp_uuid: The aspsp_uuid of this Aspsp.
        :param country: The country of this Aspsp.
        :param currency: The currency of this Aspsp.
        :param date_created: The date_created of this Aspsp.
        :param last_updated: The last_updated of this Aspsp.
        :param logo_url: The logo_url of this Aspsp.
        """
        self.openapi_types = {
            'alias': str,
            'aspsp_uuid': str,
            'country': Country,
            'currency': Currency,
            'date_created': datetime,
            'last_updated': datetime,
            'logo_url': str
        }

        self.attribute_map = {
            'alias': 'alias',
            'aspsp_uuid': 'aspspUuid',
            'country': 'country',
            'currency': 'currency',
            'date_created': 'dateCreated',
            'last_updated': 'lastUpdated',
            'logo_url': 'logoUrl'
        }

        self._alias = alias
        self._aspsp_uuid = aspsp_uuid
        self._country = country
        self._currency = currency
        self._date_created = date_created
        self._last_updated = last_updated
        self._logo_url = logo_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Aspsp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The aspsp of this Aspsp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this Aspsp.

        The name of the ASPSP / bank.

        :return: The alias of this Aspsp.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this Aspsp.

        The name of the ASPSP / bank.

        :param alias: The alias of this Aspsp.
        :type alias: str
        """

        self._alias = alias

    @property
    def aspsp_uuid(self):
        """Gets the aspsp_uuid of this Aspsp.

        The UUID associated with the ASPSP / bank.

        :return: The aspsp_uuid of this Aspsp.
        :rtype: str
        """
        return self._aspsp_uuid

    @aspsp_uuid.setter
    def aspsp_uuid(self, aspsp_uuid):
        """Sets the aspsp_uuid of this Aspsp.

        The UUID associated with the ASPSP / bank.

        :param aspsp_uuid: The aspsp_uuid of this Aspsp.
        :type aspsp_uuid: str
        """

        self._aspsp_uuid = aspsp_uuid

    @property
    def country(self):
        """Gets the country of this Aspsp.


        :return: The country of this Aspsp.
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Aspsp.


        :param country: The country of this Aspsp.
        :type country: Country
        """

        self._country = country

    @property
    def currency(self):
        """Gets the currency of this Aspsp.


        :return: The currency of this Aspsp.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Aspsp.


        :param currency: The currency of this Aspsp.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def date_created(self):
        """Gets the date_created of this Aspsp.

        The date the ASPSP / bank was created.

        :return: The date_created of this Aspsp.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Aspsp.

        The date the ASPSP / bank was created.

        :param date_created: The date_created of this Aspsp.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def last_updated(self):
        """Gets the last_updated of this Aspsp.

        The date the ASPSP / bank was last updated.

        :return: The last_updated of this Aspsp.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this Aspsp.

        The date the ASPSP / bank was last updated.

        :param last_updated: The last_updated of this Aspsp.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def logo_url(self):
        """Gets the logo_url of this Aspsp.

        A link to the ASPSP / bank's logo in SVG format.

        :return: The logo_url of this Aspsp.
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this Aspsp.

        A link to the ASPSP / bank's logo in SVG format.

        :param logo_url: The logo_url of this Aspsp.
        :type logo_url: str
        """

        self._logo_url = logo_url
