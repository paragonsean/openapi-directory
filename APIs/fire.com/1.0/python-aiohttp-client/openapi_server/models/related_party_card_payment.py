# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.related_party_card_payment_card_merchant import RelatedPartyCardPaymentCardMerchant
from openapi_server import util


class RelatedPartyCardPayment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_merchant: RelatedPartyCardPaymentCardMerchant=None, type: str=None):
        """RelatedPartyCardPayment - a model defined in OpenAPI

        :param card_merchant: The card_merchant of this RelatedPartyCardPayment.
        :param type: The type of this RelatedPartyCardPayment.
        """
        self.openapi_types = {
            'card_merchant': RelatedPartyCardPaymentCardMerchant,
            'type': str
        }

        self.attribute_map = {
            'card_merchant': 'cardMerchant',
            'type': 'type'
        }

        self._card_merchant = card_merchant
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelatedPartyCardPayment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The relatedPartyCardPayment of this RelatedPartyCardPayment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_merchant(self):
        """Gets the card_merchant of this RelatedPartyCardPayment.


        :return: The card_merchant of this RelatedPartyCardPayment.
        :rtype: RelatedPartyCardPaymentCardMerchant
        """
        return self._card_merchant

    @card_merchant.setter
    def card_merchant(self, card_merchant):
        """Sets the card_merchant of this RelatedPartyCardPayment.


        :param card_merchant: The card_merchant of this RelatedPartyCardPayment.
        :type card_merchant: RelatedPartyCardPaymentCardMerchant
        """

        self._card_merchant = card_merchant

    @property
    def type(self):
        """Gets the type of this RelatedPartyCardPayment.


        :return: The type of this RelatedPartyCardPayment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RelatedPartyCardPayment.


        :param type: The type of this RelatedPartyCardPayment.
        :type type: str
        """
        allowed_values = ["CARD_MERCHANT", "CARD_ATM"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
