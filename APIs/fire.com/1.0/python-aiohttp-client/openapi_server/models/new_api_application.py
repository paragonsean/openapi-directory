# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewApiApplication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, enabled: bool=None, expiry: datetime=None, ican: int=None, number_of_payee_approvals_required: int=None, number_of_payment_approvals_required: int=None, permissions: List[str]=None):
        """NewApiApplication - a model defined in OpenAPI

        :param application_name: The application_name of this NewApiApplication.
        :param enabled: The enabled of this NewApiApplication.
        :param expiry: The expiry of this NewApiApplication.
        :param ican: The ican of this NewApiApplication.
        :param number_of_payee_approvals_required: The number_of_payee_approvals_required of this NewApiApplication.
        :param number_of_payment_approvals_required: The number_of_payment_approvals_required of this NewApiApplication.
        :param permissions: The permissions of this NewApiApplication.
        """
        self.openapi_types = {
            'application_name': str,
            'enabled': bool,
            'expiry': datetime,
            'ican': int,
            'number_of_payee_approvals_required': int,
            'number_of_payment_approvals_required': int,
            'permissions': List[str]
        }

        self.attribute_map = {
            'application_name': 'applicationName',
            'enabled': 'enabled',
            'expiry': 'expiry',
            'ican': 'ican',
            'number_of_payee_approvals_required': 'numberOfPayeeApprovalsRequired',
            'number_of_payment_approvals_required': 'numberOfPaymentApprovalsRequired',
            'permissions': 'permissions'
        }

        self._application_name = application_name
        self._enabled = enabled
        self._expiry = expiry
        self._ican = ican
        self._number_of_payee_approvals_required = number_of_payee_approvals_required
        self._number_of_payment_approvals_required = number_of_payment_approvals_required
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewApiApplication':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The newApiApplication of this NewApiApplication.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this NewApiApplication.

        A name for the API Application to help you identify it

        :return: The application_name of this NewApiApplication.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this NewApiApplication.

        A name for the API Application to help you identify it

        :param application_name: The application_name of this NewApiApplication.
        :type application_name: str
        """

        self._application_name = application_name

    @property
    def enabled(self):
        """Gets the enabled of this NewApiApplication.

        Whether or not this API Application can be used

        :return: The enabled of this NewApiApplication.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this NewApiApplication.

        Whether or not this API Application can be used

        :param enabled: The enabled of this NewApiApplication.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def expiry(self):
        """Gets the expiry of this NewApiApplication.

        The date that this API Application can no longer be used.

        :return: The expiry of this NewApiApplication.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this NewApiApplication.

        The date that this API Application can no longer be used.

        :param expiry: The expiry of this NewApiApplication.
        :type expiry: datetime
        """

        self._expiry = expiry

    @property
    def ican(self):
        """Gets the ican of this NewApiApplication.

        The ICAN of one of your Fire accounts. Restrict this API Application to a certan account.

        :return: The ican of this NewApiApplication.
        :rtype: int
        """
        return self._ican

    @ican.setter
    def ican(self, ican):
        """Sets the ican of this NewApiApplication.

        The ICAN of one of your Fire accounts. Restrict this API Application to a certan account.

        :param ican: The ican of this NewApiApplication.
        :type ican: int
        """

        self._ican = ican

    @property
    def number_of_payee_approvals_required(self):
        """Gets the number_of_payee_approvals_required of this NewApiApplication.

        Number of approvals required to create a payee in a batch

        :return: The number_of_payee_approvals_required of this NewApiApplication.
        :rtype: int
        """
        return self._number_of_payee_approvals_required

    @number_of_payee_approvals_required.setter
    def number_of_payee_approvals_required(self, number_of_payee_approvals_required):
        """Sets the number_of_payee_approvals_required of this NewApiApplication.

        Number of approvals required to create a payee in a batch

        :param number_of_payee_approvals_required: The number_of_payee_approvals_required of this NewApiApplication.
        :type number_of_payee_approvals_required: int
        """

        self._number_of_payee_approvals_required = number_of_payee_approvals_required

    @property
    def number_of_payment_approvals_required(self):
        """Gets the number_of_payment_approvals_required of this NewApiApplication.

        Number of approvals required to process a payment in a batch

        :return: The number_of_payment_approvals_required of this NewApiApplication.
        :rtype: int
        """
        return self._number_of_payment_approvals_required

    @number_of_payment_approvals_required.setter
    def number_of_payment_approvals_required(self, number_of_payment_approvals_required):
        """Sets the number_of_payment_approvals_required of this NewApiApplication.

        Number of approvals required to process a payment in a batch

        :param number_of_payment_approvals_required: The number_of_payment_approvals_required of this NewApiApplication.
        :type number_of_payment_approvals_required: int
        """

        self._number_of_payment_approvals_required = number_of_payment_approvals_required

    @property
    def permissions(self):
        """Gets the permissions of this NewApiApplication.

        The list of permissions required

        :return: The permissions of this NewApiApplication.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this NewApiApplication.

        The list of permissions required

        :param permissions: The permissions of this NewApiApplication.
        :type permissions: List[str]
        """

        self._permissions = permissions
