# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.related_party_card_payment import RelatedPartyCardPayment
from openapi_server.models.related_party_card_payment_card_merchant import RelatedPartyCardPaymentCardMerchant
from openapi_server.models.related_party_external_account import RelatedPartyExternalAccount
from openapi_server.models.related_party_fire_account import RelatedPartyFireAccount
from openapi_server.models.related_party_payee import RelatedPartyPayee
from openapi_server.models.related_party_payee_account import RelatedPartyPayeeAccount
from openapi_server import util


class RelatedParty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: RelatedPartyPayeeAccount=None, type: str=None, card_merchant: RelatedPartyCardPaymentCardMerchant=None):
        """RelatedParty - a model defined in OpenAPI

        :param account: The account of this RelatedParty.
        :param type: The type of this RelatedParty.
        :param card_merchant: The card_merchant of this RelatedParty.
        """
        self.openapi_types = {
            'account': RelatedPartyPayeeAccount,
            'type': str,
            'card_merchant': RelatedPartyCardPaymentCardMerchant
        }

        self.attribute_map = {
            'account': 'account',
            'type': 'type',
            'card_merchant': 'cardMerchant'
        }

        self._account = account
        self._type = type
        self._card_merchant = card_merchant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelatedParty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The relatedParty of this RelatedParty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this RelatedParty.


        :return: The account of this RelatedParty.
        :rtype: RelatedPartyPayeeAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this RelatedParty.


        :param account: The account of this RelatedParty.
        :type account: RelatedPartyPayeeAccount
        """

        self._account = account

    @property
    def type(self):
        """Gets the type of this RelatedParty.


        :return: The type of this RelatedParty.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RelatedParty.


        :param type: The type of this RelatedParty.
        :type type: str
        """
        allowed_values = ["FIRE_ACCOUNT", "EXTERNAL_ACCOUNT", "WITHDRAWAL_ACCOUNT", "CARD_MERCHANT", "CARD_ATM"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def card_merchant(self):
        """Gets the card_merchant of this RelatedParty.


        :return: The card_merchant of this RelatedParty.
        :rtype: RelatedPartyCardPaymentCardMerchant
        """
        return self._card_merchant

    @card_merchant.setter
    def card_merchant(self, card_merchant):
        """Sets the card_merchant of this RelatedParty.


        :param card_merchant: The card_merchant of this RelatedParty.
        :type card_merchant: RelatedPartyCardPaymentCardMerchant
        """

        self._card_merchant = card_merchant
