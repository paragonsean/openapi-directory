# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FxTrade(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, buy_amount: int=None, buy_currency: str=None, fixed_side: str=None, provider: str=None, rate4d: int=None, sell_amount: int=None, sell_currency: str=None):
        """FxTrade - a model defined in OpenAPI

        :param buy_amount: The buy_amount of this FxTrade.
        :param buy_currency: The buy_currency of this FxTrade.
        :param fixed_side: The fixed_side of this FxTrade.
        :param provider: The provider of this FxTrade.
        :param rate4d: The rate4d of this FxTrade.
        :param sell_amount: The sell_amount of this FxTrade.
        :param sell_currency: The sell_currency of this FxTrade.
        """
        self.openapi_types = {
            'buy_amount': int,
            'buy_currency': str,
            'fixed_side': str,
            'provider': str,
            'rate4d': int,
            'sell_amount': int,
            'sell_currency': str
        }

        self.attribute_map = {
            'buy_amount': 'buyAmount',
            'buy_currency': 'buyCurrency',
            'fixed_side': 'fixedSide',
            'provider': 'provider',
            'rate4d': 'rate4d',
            'sell_amount': 'sellAmount',
            'sell_currency': 'sellCurrency'
        }

        self._buy_amount = buy_amount
        self._buy_currency = buy_currency
        self._fixed_side = fixed_side
        self._provider = provider
        self._rate4d = rate4d
        self._sell_amount = sell_amount
        self._sell_currency = sell_currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FxTrade':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The fxTrade of this FxTrade.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def buy_amount(self):
        """Gets the buy_amount of this FxTrade.

        amount of buyCurrency being bought

        :return: The buy_amount of this FxTrade.
        :rtype: int
        """
        return self._buy_amount

    @buy_amount.setter
    def buy_amount(self, buy_amount):
        """Sets the buy_amount of this FxTrade.

        amount of buyCurrency being bought

        :param buy_amount: The buy_amount of this FxTrade.
        :type buy_amount: int
        """

        self._buy_amount = buy_amount

    @property
    def buy_currency(self):
        """Gets the buy_currency of this FxTrade.

        currency which is being bought

        :return: The buy_currency of this FxTrade.
        :rtype: str
        """
        return self._buy_currency

    @buy_currency.setter
    def buy_currency(self, buy_currency):
        """Sets the buy_currency of this FxTrade.

        currency which is being bought

        :param buy_currency: The buy_currency of this FxTrade.
        :type buy_currency: str
        """

        self._buy_currency = buy_currency

    @property
    def fixed_side(self):
        """Gets the fixed_side of this FxTrade.

        type of trade - BUY or SELL

        :return: The fixed_side of this FxTrade.
        :rtype: str
        """
        return self._fixed_side

    @fixed_side.setter
    def fixed_side(self, fixed_side):
        """Sets the fixed_side of this FxTrade.

        type of trade - BUY or SELL

        :param fixed_side: The fixed_side of this FxTrade.
        :type fixed_side: str
        """

        self._fixed_side = fixed_side

    @property
    def provider(self):
        """Gets the provider of this FxTrade.

        The FX provider used to make the trade.

        :return: The provider of this FxTrade.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this FxTrade.

        The FX provider used to make the trade.

        :param provider: The provider of this FxTrade.
        :type provider: str
        """

        self._provider = provider

    @property
    def rate4d(self):
        """Gets the rate4d of this FxTrade.

        exchange rate

        :return: The rate4d of this FxTrade.
        :rtype: int
        """
        return self._rate4d

    @rate4d.setter
    def rate4d(self, rate4d):
        """Sets the rate4d of this FxTrade.

        exchange rate

        :param rate4d: The rate4d of this FxTrade.
        :type rate4d: int
        """

        self._rate4d = rate4d

    @property
    def sell_amount(self):
        """Gets the sell_amount of this FxTrade.

        amount of sellCurrency being sold

        :return: The sell_amount of this FxTrade.
        :rtype: int
        """
        return self._sell_amount

    @sell_amount.setter
    def sell_amount(self, sell_amount):
        """Sets the sell_amount of this FxTrade.

        amount of sellCurrency being sold

        :param sell_amount: The sell_amount of this FxTrade.
        :type sell_amount: int
        """

        self._sell_amount = sell_amount

    @property
    def sell_currency(self):
        """Gets the sell_currency of this FxTrade.

        currency which is being sold

        :return: The sell_currency of this FxTrade.
        :rtype: str
        """
        return self._sell_currency

    @sell_currency.setter
    def sell_currency(self, sell_currency):
        """Sets the sell_currency of this FxTrade.

        currency which is being sold

        :param sell_currency: The sell_currency of this FxTrade.
        :type sell_currency: str
        """

        self._sell_currency = sell_currency
