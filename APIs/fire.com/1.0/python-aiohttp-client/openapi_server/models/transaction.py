# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_item_details import BatchItemDetails
from openapi_server.models.currency import Currency
from openapi_server.models.direct_debit_details import DirectDebitDetails
from openapi_server.models.fx_trade import FxTrade
from openapi_server.models.proprietary_scheme_details_inner import ProprietarySchemeDetailsInner
from openapi_server.models.related_card import RelatedCard
from openapi_server.models.related_party import RelatedParty
from openapi_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_after_charges: int=None, amount_before_charges: int=None, balance: int=None, batch_item_details: BatchItemDetails=None, card: RelatedCard=None, currency: Currency=None, _date: datetime=None, date_acknowledged: datetime=None, direct_debit_details: DirectDebitDetails=None, event_uuid: str=None, fee_amount: int=None, fx_trade_details: FxTrade=None, ican: int=None, my_ref: str=None, payment_request_public_code: str=None, proprietary_scheme_details: List[ProprietarySchemeDetailsInner]=None, ref_id: int=None, related_party: RelatedParty=None, tax_amount: int=None, txn_id: int=None, type: str=None, your_ref: str=None):
        """Transaction - a model defined in OpenAPI

        :param amount_after_charges: The amount_after_charges of this Transaction.
        :param amount_before_charges: The amount_before_charges of this Transaction.
        :param balance: The balance of this Transaction.
        :param batch_item_details: The batch_item_details of this Transaction.
        :param card: The card of this Transaction.
        :param currency: The currency of this Transaction.
        :param _date: The _date of this Transaction.
        :param date_acknowledged: The date_acknowledged of this Transaction.
        :param direct_debit_details: The direct_debit_details of this Transaction.
        :param event_uuid: The event_uuid of this Transaction.
        :param fee_amount: The fee_amount of this Transaction.
        :param fx_trade_details: The fx_trade_details of this Transaction.
        :param ican: The ican of this Transaction.
        :param my_ref: The my_ref of this Transaction.
        :param payment_request_public_code: The payment_request_public_code of this Transaction.
        :param proprietary_scheme_details: The proprietary_scheme_details of this Transaction.
        :param ref_id: The ref_id of this Transaction.
        :param related_party: The related_party of this Transaction.
        :param tax_amount: The tax_amount of this Transaction.
        :param txn_id: The txn_id of this Transaction.
        :param type: The type of this Transaction.
        :param your_ref: The your_ref of this Transaction.
        """
        self.openapi_types = {
            'amount_after_charges': int,
            'amount_before_charges': int,
            'balance': int,
            'batch_item_details': BatchItemDetails,
            'card': RelatedCard,
            'currency': Currency,
            '_date': datetime,
            'date_acknowledged': datetime,
            'direct_debit_details': DirectDebitDetails,
            'event_uuid': str,
            'fee_amount': int,
            'fx_trade_details': FxTrade,
            'ican': int,
            'my_ref': str,
            'payment_request_public_code': str,
            'proprietary_scheme_details': List[ProprietarySchemeDetailsInner],
            'ref_id': int,
            'related_party': RelatedParty,
            'tax_amount': int,
            'txn_id': int,
            'type': str,
            'your_ref': str
        }

        self.attribute_map = {
            'amount_after_charges': 'amountAfterCharges',
            'amount_before_charges': 'amountBeforeCharges',
            'balance': 'balance',
            'batch_item_details': 'batchItemDetails',
            'card': 'card',
            'currency': 'currency',
            '_date': 'date',
            'date_acknowledged': 'dateAcknowledged',
            'direct_debit_details': 'directDebitDetails',
            'event_uuid': 'eventUuid',
            'fee_amount': 'feeAmount',
            'fx_trade_details': 'fxTradeDetails',
            'ican': 'ican',
            'my_ref': 'myRef',
            'payment_request_public_code': 'paymentRequestPublicCode',
            'proprietary_scheme_details': 'proprietarySchemeDetails',
            'ref_id': 'refId',
            'related_party': 'relatedParty',
            'tax_amount': 'taxAmount',
            'txn_id': 'txnId',
            'type': 'type',
            'your_ref': 'yourRef'
        }

        self._amount_after_charges = amount_after_charges
        self._amount_before_charges = amount_before_charges
        self._balance = balance
        self._batch_item_details = batch_item_details
        self._card = card
        self._currency = currency
        self.__date = _date
        self._date_acknowledged = date_acknowledged
        self._direct_debit_details = direct_debit_details
        self._event_uuid = event_uuid
        self._fee_amount = fee_amount
        self._fx_trade_details = fx_trade_details
        self._ican = ican
        self._my_ref = my_ref
        self._payment_request_public_code = payment_request_public_code
        self._proprietary_scheme_details = proprietary_scheme_details
        self._ref_id = ref_id
        self._related_party = related_party
        self._tax_amount = tax_amount
        self._txn_id = txn_id
        self._type = type
        self._your_ref = your_ref

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The transaction of this Transaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_after_charges(self):
        """Gets the amount_after_charges of this Transaction.

        Net amount lodged or taken from the account after fees and charges were applied.

        :return: The amount_after_charges of this Transaction.
        :rtype: int
        """
        return self._amount_after_charges

    @amount_after_charges.setter
    def amount_after_charges(self, amount_after_charges):
        """Sets the amount_after_charges of this Transaction.

        Net amount lodged or taken from the account after fees and charges were applied.

        :param amount_after_charges: The amount_after_charges of this Transaction.
        :type amount_after_charges: int
        """

        self._amount_after_charges = amount_after_charges

    @property
    def amount_before_charges(self):
        """Gets the amount_before_charges of this Transaction.

        Amount of the transaction before the fees and taxes were applied.

        :return: The amount_before_charges of this Transaction.
        :rtype: int
        """
        return self._amount_before_charges

    @amount_before_charges.setter
    def amount_before_charges(self, amount_before_charges):
        """Sets the amount_before_charges of this Transaction.

        Amount of the transaction before the fees and taxes were applied.

        :param amount_before_charges: The amount_before_charges of this Transaction.
        :type amount_before_charges: int
        """

        self._amount_before_charges = amount_before_charges

    @property
    def balance(self):
        """Gets the balance of this Transaction.

        the balance of the account (in minor currency units - pence, cent etc. 434050 == 4,340.50 GBP for a GBP account).

        :return: The balance of this Transaction.
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Transaction.

        the balance of the account (in minor currency units - pence, cent etc. 434050 == 4,340.50 GBP for a GBP account).

        :param balance: The balance of this Transaction.
        :type balance: int
        """

        self._balance = balance

    @property
    def batch_item_details(self):
        """Gets the batch_item_details of this Transaction.


        :return: The batch_item_details of this Transaction.
        :rtype: BatchItemDetails
        """
        return self._batch_item_details

    @batch_item_details.setter
    def batch_item_details(self, batch_item_details):
        """Sets the batch_item_details of this Transaction.


        :param batch_item_details: The batch_item_details of this Transaction.
        :type batch_item_details: BatchItemDetails
        """

        self._batch_item_details = batch_item_details

    @property
    def card(self):
        """Gets the card of this Transaction.


        :return: The card of this Transaction.
        :rtype: RelatedCard
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this Transaction.


        :param card: The card of this Transaction.
        :type card: RelatedCard
        """

        self._card = card

    @property
    def currency(self):
        """Gets the currency of this Transaction.


        :return: The currency of this Transaction.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Transaction.


        :param currency: The currency of this Transaction.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def _date(self):
        """Gets the _date of this Transaction.

        Date of the transaction

        :return: The _date of this Transaction.
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Transaction.

        Date of the transaction

        :param _date: The _date of this Transaction.
        :type _date: datetime
        """

        self.__date = _date

    @property
    def date_acknowledged(self):
        """Gets the date_acknowledged of this Transaction.


        :return: The date_acknowledged of this Transaction.
        :rtype: datetime
        """
        return self._date_acknowledged

    @date_acknowledged.setter
    def date_acknowledged(self, date_acknowledged):
        """Sets the date_acknowledged of this Transaction.


        :param date_acknowledged: The date_acknowledged of this Transaction.
        :type date_acknowledged: datetime
        """

        self._date_acknowledged = date_acknowledged

    @property
    def direct_debit_details(self):
        """Gets the direct_debit_details of this Transaction.


        :return: The direct_debit_details of this Transaction.
        :rtype: DirectDebitDetails
        """
        return self._direct_debit_details

    @direct_debit_details.setter
    def direct_debit_details(self, direct_debit_details):
        """Sets the direct_debit_details of this Transaction.


        :param direct_debit_details: The direct_debit_details of this Transaction.
        :type direct_debit_details: DirectDebitDetails
        """

        self._direct_debit_details = direct_debit_details

    @property
    def event_uuid(self):
        """Gets the event_uuid of this Transaction.

        An internal Fire reference for the transaction (UUID)

        :return: The event_uuid of this Transaction.
        :rtype: str
        """
        return self._event_uuid

    @event_uuid.setter
    def event_uuid(self, event_uuid):
        """Sets the event_uuid of this Transaction.

        An internal Fire reference for the transaction (UUID)

        :param event_uuid: The event_uuid of this Transaction.
        :type event_uuid: str
        """

        self._event_uuid = event_uuid

    @property
    def fee_amount(self):
        """Gets the fee_amount of this Transaction.

        The amount of the fee, if any.

        :return: The fee_amount of this Transaction.
        :rtype: int
        """
        return self._fee_amount

    @fee_amount.setter
    def fee_amount(self, fee_amount):
        """Sets the fee_amount of this Transaction.

        The amount of the fee, if any.

        :param fee_amount: The fee_amount of this Transaction.
        :type fee_amount: int
        """

        self._fee_amount = fee_amount

    @property
    def fx_trade_details(self):
        """Gets the fx_trade_details of this Transaction.


        :return: The fx_trade_details of this Transaction.
        :rtype: FxTrade
        """
        return self._fx_trade_details

    @fx_trade_details.setter
    def fx_trade_details(self, fx_trade_details):
        """Sets the fx_trade_details of this Transaction.


        :param fx_trade_details: The fx_trade_details of this Transaction.
        :type fx_trade_details: FxTrade
        """

        self._fx_trade_details = fx_trade_details

    @property
    def ican(self):
        """Gets the ican of this Transaction.

        identifier for the fire.com account (assigned by fire.com) This field is only used in the condensed version.

        :return: The ican of this Transaction.
        :rtype: int
        """
        return self._ican

    @ican.setter
    def ican(self, ican):
        """Sets the ican of this Transaction.

        identifier for the fire.com account (assigned by fire.com) This field is only used in the condensed version.

        :param ican: The ican of this Transaction.
        :type ican: int
        """

        self._ican = ican

    @property
    def my_ref(self):
        """Gets the my_ref of this Transaction.

        The comment/reference on the transaction

        :return: The my_ref of this Transaction.
        :rtype: str
        """
        return self._my_ref

    @my_ref.setter
    def my_ref(self, my_ref):
        """Sets the my_ref of this Transaction.

        The comment/reference on the transaction

        :param my_ref: The my_ref of this Transaction.
        :type my_ref: str
        """

        self._my_ref = my_ref

    @property
    def payment_request_public_code(self):
        """Gets the payment_request_public_code of this Transaction.

        (FOP payments only) The FOP Payment Code that was used to make this payment.

        :return: The payment_request_public_code of this Transaction.
        :rtype: str
        """
        return self._payment_request_public_code

    @payment_request_public_code.setter
    def payment_request_public_code(self, payment_request_public_code):
        """Sets the payment_request_public_code of this Transaction.

        (FOP payments only) The FOP Payment Code that was used to make this payment.

        :param payment_request_public_code: The payment_request_public_code of this Transaction.
        :type payment_request_public_code: str
        """

        self._payment_request_public_code = payment_request_public_code

    @property
    def proprietary_scheme_details(self):
        """Gets the proprietary_scheme_details of this Transaction.

        Extra details about the transaction based on the scheme used to make the payment.

        :return: The proprietary_scheme_details of this Transaction.
        :rtype: List[ProprietarySchemeDetailsInner]
        """
        return self._proprietary_scheme_details

    @proprietary_scheme_details.setter
    def proprietary_scheme_details(self, proprietary_scheme_details):
        """Sets the proprietary_scheme_details of this Transaction.

        Extra details about the transaction based on the scheme used to make the payment.

        :param proprietary_scheme_details: The proprietary_scheme_details of this Transaction.
        :type proprietary_scheme_details: List[ProprietarySchemeDetailsInner]
        """

        self._proprietary_scheme_details = proprietary_scheme_details

    @property
    def ref_id(self):
        """Gets the ref_id of this Transaction.

        The id of the transaction.

        :return: The ref_id of this Transaction.
        :rtype: int
        """
        return self._ref_id

    @ref_id.setter
    def ref_id(self, ref_id):
        """Sets the ref_id of this Transaction.

        The id of the transaction.

        :param ref_id: The ref_id of this Transaction.
        :type ref_id: int
        """

        self._ref_id = ref_id

    @property
    def related_party(self):
        """Gets the related_party of this Transaction.


        :return: The related_party of this Transaction.
        :rtype: RelatedParty
        """
        return self._related_party

    @related_party.setter
    def related_party(self, related_party):
        """Sets the related_party of this Transaction.


        :param related_party: The related_party of this Transaction.
        :type related_party: RelatedParty
        """

        self._related_party = related_party

    @property
    def tax_amount(self):
        """Gets the tax_amount of this Transaction.

        The amount of the tax, if any (e.g. Stamp duty for ATM transactions)

        :return: The tax_amount of this Transaction.
        :rtype: int
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this Transaction.

        The amount of the tax, if any (e.g. Stamp duty for ATM transactions)

        :param tax_amount: The tax_amount of this Transaction.
        :type tax_amount: int
        """

        self._tax_amount = tax_amount

    @property
    def txn_id(self):
        """Gets the txn_id of this Transaction.

        The id of this side of the transaction (each transaction has two sides - a to and a from). This is used to get the details of the transaction.

        :return: The txn_id of this Transaction.
        :rtype: int
        """
        return self._txn_id

    @txn_id.setter
    def txn_id(self, txn_id):
        """Sets the txn_id of this Transaction.

        The id of this side of the transaction (each transaction has two sides - a to and a from). This is used to get the details of the transaction.

        :param txn_id: The txn_id of this Transaction.
        :type txn_id: int
        """

        self._txn_id = txn_id

    @property
    def type(self):
        """Gets the type of this Transaction.

        The type of the transaction: * `LODGEMENT` - Bank Transfer received * `PIS_LODGEMENT` - Fire Open Payments Lodgement received * `MANUAL_TRANSFER` - Manual Transfer to * `WITHDRAWAL` - Bank Transfer sent * `REVERSAL` - Credit Reversal * `DIRECT_DEBIT` - A direct debit. * `DIRECT_DEBIT_REPRESENTED` - A Direct Debit that was requested again after initially failing. * `DIRECT_DEBIT_REFUND` - A refund of a Direct debit. * `INTERNAL_TRANSFER_TO` - Internal Transfer sent (between two of my accounts of the same currency) * `INTERNAL_TRANSFER_FROM` - Internal Transfer received (between two of my accounts of the same currency) * `WITHDRAWAL_RETURNED` - Bank Transfer sent returned * `LODGEMENT_REVERSED` - Bank Transfer received returned * `FX_INTERNAL_TRANSFER_FROM` - FX Internal Transfer received (between two of my accounts of different currency) * `FX_INTERNAL_TRANSFER_TO` - FX Internal Transfer sent (between two of my accounts of different currency) * `CREATE_CARD` - The fee taken when a debit card is issued. * `ADD_ACCOUNT` - The fee taken when an account is created. * `CREATE_ADDITIONAL_USER` - The fee taken when an additional user is created.        * `CARD_POS_CONTACT_DEBIT` - Card used in store; read by magnetic stripe or pin * `CARD_POS_CONTACT_CREDIT` - Card used in store; read by magnetic stripe or pin * `CARD_POS_CONTACTLESS_DEBIT` - Card used in store; read by NFC * `CARD_POS_CONTACTLESS_CREDIT` - Card used in store; read by NFC * `CARD_ECOMMERCE_DEBIT` - Card used on the internet * `CARD_ECOMMERCE_CREDIT` - Card used on the internet * `CARD_ATM_DEBIT` - Card used in an ATM * `CARD_ATM_CREDIT` - Card used in an ATM * `CARD_INTERNATIONAL_POS_CONTACT_DEBIT` - Card used in store in non-processing currency; read by magnetic stripe or pin * `CARD_INTERNATIONAL_POS_CONTACT_CREDIT` - Card used in store in non-processing currency; read by magnetic stripe or pin * `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT` - Card used in store in non-processing currency; read by NFC * `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT` - Card used in store in non-processing currency; read by NFC * `CARD_INTERNATIONAL_ECOMMERCE_DEBIT ` - Card used on the internet in non-processing currency * `CARD_INTERNATIONAL_ECOMMERCE_CREDIT` - Card used on the internet in non-processing currency * `CARD_INTERNATIONAL_ATM_DEBIT` - Card used in an ATM in non-processing currency * `CARD_INTERNATIONAL_ATM_CREDIT` - Card used in an ATM in non-processing currency * `CARD_POS_CONTACT_DEBIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed * `CARD_POS_CONTACT_CREDIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed * `CARD_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store; read by NFC - reversed * `CARD_POS_CONTACTLESS_CREDIT_REVERSAL` - Card used in store; read by NFC - reversed * `CARD_ECOMMERCE_DEBIT_REVERSAL ` - Card used on the internet - reversed * `CARD_ECOMMERCE_CREDIT_REVERSAL` - Card used on the internet - reversed * `CARD_ATM_DEBIT_REVERSAL` - Card used in an ATM - reversed * `CARD_ATM_CREDIT_REVERSAL` - Card used in an ATM - reversed * `CARD_INTERNATIONAL_POS_CONTACT_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed * `CARD_INTERNATIONAL_POS_CONTACT_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed * `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed * `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT_REVERSAL` - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types. * `CARD_INTERNATIONAL_ECOMMERCE_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed * `CARD_INTERNATIONAL_ECOMMERCE_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed * `CARD_INTERNATIONAL_ATM_DEBIT_REVERSAL` - Card used on the internet in non-processing currency - reversed * `CARD_INTERNATIONAL_ATM_CREDIT_REVERSAL` - Card used on the internet in non-processing currency - reversed 

        :return: The type of this Transaction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Transaction.

        The type of the transaction: * `LODGEMENT` - Bank Transfer received * `PIS_LODGEMENT` - Fire Open Payments Lodgement received * `MANUAL_TRANSFER` - Manual Transfer to * `WITHDRAWAL` - Bank Transfer sent * `REVERSAL` - Credit Reversal * `DIRECT_DEBIT` - A direct debit. * `DIRECT_DEBIT_REPRESENTED` - A Direct Debit that was requested again after initially failing. * `DIRECT_DEBIT_REFUND` - A refund of a Direct debit. * `INTERNAL_TRANSFER_TO` - Internal Transfer sent (between two of my accounts of the same currency) * `INTERNAL_TRANSFER_FROM` - Internal Transfer received (between two of my accounts of the same currency) * `WITHDRAWAL_RETURNED` - Bank Transfer sent returned * `LODGEMENT_REVERSED` - Bank Transfer received returned * `FX_INTERNAL_TRANSFER_FROM` - FX Internal Transfer received (between two of my accounts of different currency) * `FX_INTERNAL_TRANSFER_TO` - FX Internal Transfer sent (between two of my accounts of different currency) * `CREATE_CARD` - The fee taken when a debit card is issued. * `ADD_ACCOUNT` - The fee taken when an account is created. * `CREATE_ADDITIONAL_USER` - The fee taken when an additional user is created.        * `CARD_POS_CONTACT_DEBIT` - Card used in store; read by magnetic stripe or pin * `CARD_POS_CONTACT_CREDIT` - Card used in store; read by magnetic stripe or pin * `CARD_POS_CONTACTLESS_DEBIT` - Card used in store; read by NFC * `CARD_POS_CONTACTLESS_CREDIT` - Card used in store; read by NFC * `CARD_ECOMMERCE_DEBIT` - Card used on the internet * `CARD_ECOMMERCE_CREDIT` - Card used on the internet * `CARD_ATM_DEBIT` - Card used in an ATM * `CARD_ATM_CREDIT` - Card used in an ATM * `CARD_INTERNATIONAL_POS_CONTACT_DEBIT` - Card used in store in non-processing currency; read by magnetic stripe or pin * `CARD_INTERNATIONAL_POS_CONTACT_CREDIT` - Card used in store in non-processing currency; read by magnetic stripe or pin * `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT` - Card used in store in non-processing currency; read by NFC * `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT` - Card used in store in non-processing currency; read by NFC * `CARD_INTERNATIONAL_ECOMMERCE_DEBIT ` - Card used on the internet in non-processing currency * `CARD_INTERNATIONAL_ECOMMERCE_CREDIT` - Card used on the internet in non-processing currency * `CARD_INTERNATIONAL_ATM_DEBIT` - Card used in an ATM in non-processing currency * `CARD_INTERNATIONAL_ATM_CREDIT` - Card used in an ATM in non-processing currency * `CARD_POS_CONTACT_DEBIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed * `CARD_POS_CONTACT_CREDIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed * `CARD_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store; read by NFC - reversed * `CARD_POS_CONTACTLESS_CREDIT_REVERSAL` - Card used in store; read by NFC - reversed * `CARD_ECOMMERCE_DEBIT_REVERSAL ` - Card used on the internet - reversed * `CARD_ECOMMERCE_CREDIT_REVERSAL` - Card used on the internet - reversed * `CARD_ATM_DEBIT_REVERSAL` - Card used in an ATM - reversed * `CARD_ATM_CREDIT_REVERSAL` - Card used in an ATM - reversed * `CARD_INTERNATIONAL_POS_CONTACT_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed * `CARD_INTERNATIONAL_POS_CONTACT_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed * `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed * `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT_REVERSAL` - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types. * `CARD_INTERNATIONAL_ECOMMERCE_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed * `CARD_INTERNATIONAL_ECOMMERCE_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed * `CARD_INTERNATIONAL_ATM_DEBIT_REVERSAL` - Card used on the internet in non-processing currency - reversed * `CARD_INTERNATIONAL_ATM_CREDIT_REVERSAL` - Card used on the internet in non-processing currency - reversed 

        :param type: The type of this Transaction.
        :type type: str
        """

        self._type = type

    @property
    def your_ref(self):
        """Gets the your_ref of this Transaction.

        The comment/reference on the transaction that appears on the recipients statement. Only for withdrawals

        :return: The your_ref of this Transaction.
        :rtype: str
        """
        return self._your_ref

    @your_ref.setter
    def your_ref(self, your_ref):
        """Sets the your_ref of this Transaction.

        The comment/reference on the transaction that appears on the recipients statement. Only for withdrawals

        :param your_ref: The your_ref of this Transaction.
        :type your_ref: str
        """

        self._your_ref = your_ref
