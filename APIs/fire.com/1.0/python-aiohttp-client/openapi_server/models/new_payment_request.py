# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.order_details import OrderDetails
from openapi_server import util


class NewPaymentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_fields: str=None, amount: int=None, collect_fields: str=None, currency: str=None, description: str=None, expiry: datetime=None, ican_to: int=None, mandatory_fields: str=None, max_number_payments: int=None, my_ref: str=None, order_details: OrderDetails=None, return_url: str=None, type: str=None):
        """NewPaymentRequest - a model defined in OpenAPI

        :param additional_fields: The additional_fields of this NewPaymentRequest.
        :param amount: The amount of this NewPaymentRequest.
        :param collect_fields: The collect_fields of this NewPaymentRequest.
        :param currency: The currency of this NewPaymentRequest.
        :param description: The description of this NewPaymentRequest.
        :param expiry: The expiry of this NewPaymentRequest.
        :param ican_to: The ican_to of this NewPaymentRequest.
        :param mandatory_fields: The mandatory_fields of this NewPaymentRequest.
        :param max_number_payments: The max_number_payments of this NewPaymentRequest.
        :param my_ref: The my_ref of this NewPaymentRequest.
        :param order_details: The order_details of this NewPaymentRequest.
        :param return_url: The return_url of this NewPaymentRequest.
        :param type: The type of this NewPaymentRequest.
        """
        self.openapi_types = {
            'additional_fields': str,
            'amount': int,
            'collect_fields': str,
            'currency': str,
            'description': str,
            'expiry': datetime,
            'ican_to': int,
            'mandatory_fields': str,
            'max_number_payments': int,
            'my_ref': str,
            'order_details': OrderDetails,
            'return_url': str,
            'type': str
        }

        self.attribute_map = {
            'additional_fields': 'additionalFields',
            'amount': 'amount',
            'collect_fields': 'collectFields',
            'currency': 'currency',
            'description': 'description',
            'expiry': 'expiry',
            'ican_to': 'icanTo',
            'mandatory_fields': 'mandatoryFields',
            'max_number_payments': 'maxNumberPayments',
            'my_ref': 'myRef',
            'order_details': 'orderDetails',
            'return_url': 'returnUrl',
            'type': 'type'
        }

        self._additional_fields = additional_fields
        self._amount = amount
        self._collect_fields = collect_fields
        self._currency = currency
        self._description = description
        self._expiry = expiry
        self._ican_to = ican_to
        self._mandatory_fields = mandatory_fields
        self._max_number_payments = max_number_payments
        self._my_ref = my_ref
        self._order_details = order_details
        self._return_url = return_url
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewPaymentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The newPaymentRequest of this NewPaymentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_fields(self):
        """Gets the additional_fields of this NewPaymentRequest.

        These fields will be dispalyed to the payer when using the hosted option. You can choose to display any of `ORDER_ID`, `PRODUCT_ID`, `CUSTOMER_ID`, `CUSTOMER_NUMBER` and `COMMENT2` to the payer.

        :return: The additional_fields of this NewPaymentRequest.
        :rtype: str
        """
        return self._additional_fields

    @additional_fields.setter
    def additional_fields(self, additional_fields):
        """Sets the additional_fields of this NewPaymentRequest.

        These fields will be dispalyed to the payer when using the hosted option. You can choose to display any of `ORDER_ID`, `PRODUCT_ID`, `CUSTOMER_ID`, `CUSTOMER_NUMBER` and `COMMENT2` to the payer.

        :param additional_fields: The additional_fields of this NewPaymentRequest.
        :type additional_fields: str
        """

        self._additional_fields = additional_fields

    @property
    def amount(self):
        """Gets the amount of this NewPaymentRequest.

        The requested amount to pay. Note the last two digits represent pennies/cents, (e.g., £1.00 = 100).

        :return: The amount of this NewPaymentRequest.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this NewPaymentRequest.

        The requested amount to pay. Note the last two digits represent pennies/cents, (e.g., £1.00 = 100).

        :param amount: The amount of this NewPaymentRequest.
        :type amount: int
        """

        self._amount = amount

    @property
    def collect_fields(self):
        """Gets the collect_fields of this NewPaymentRequest.

        For the hosted option, the payer will be asked to fill in these fields but they will not be mandatory. You can choose to collect any of the payer's `ADDRESS`, `REFERENCE` and/or `COMMENT1`. If you choose to collect these fields from the payer, you cannot set 'delivery’, 'variableReference’ or 'comment1’ fields respectively.

        :return: The collect_fields of this NewPaymentRequest.
        :rtype: str
        """
        return self._collect_fields

    @collect_fields.setter
    def collect_fields(self, collect_fields):
        """Sets the collect_fields of this NewPaymentRequest.

        For the hosted option, the payer will be asked to fill in these fields but they will not be mandatory. You can choose to collect any of the payer's `ADDRESS`, `REFERENCE` and/or `COMMENT1`. If you choose to collect these fields from the payer, you cannot set 'delivery’, 'variableReference’ or 'comment1’ fields respectively.

        :param collect_fields: The collect_fields of this NewPaymentRequest.
        :type collect_fields: str
        """

        self._collect_fields = collect_fields

    @property
    def currency(self):
        """Gets the currency of this NewPaymentRequest.

        Either `EUR` or `GBP`, and must correspond to the currency of the account the funds are being lodged into in the `icanTo`.

        :return: The currency of this NewPaymentRequest.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this NewPaymentRequest.

        Either `EUR` or `GBP`, and must correspond to the currency of the account the funds are being lodged into in the `icanTo`.

        :param currency: The currency of this NewPaymentRequest.
        :type currency: str
        """
        allowed_values = ["EUR", "GBP"]  # noqa: E501
        if currency not in allowed_values:
            raise ValueError(
                "Invalid value for `currency` ({0}), must be one of {1}"
                .format(currency, allowed_values)
            )

        self._currency = currency

    @property
    def description(self):
        """Gets the description of this NewPaymentRequest.

        A public facing description of the request. This will be shown to the user when they tap or scan the request.

        :return: The description of this NewPaymentRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this NewPaymentRequest.

        A public facing description of the request. This will be shown to the user when they tap or scan the request.

        :param description: The description of this NewPaymentRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def expiry(self):
        """Gets the expiry of this NewPaymentRequest.

        This is the expiry of the payment request. After this time, the payment cannot be paid.

        :return: The expiry of this NewPaymentRequest.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this NewPaymentRequest.

        This is the expiry of the payment request. After this time, the payment cannot be paid.

        :param expiry: The expiry of this NewPaymentRequest.
        :type expiry: datetime
        """

        self._expiry = expiry

    @property
    def ican_to(self):
        """Gets the ican_to of this NewPaymentRequest.

        The ican of the account to collect the funds into. Must be one of your fire.com Accounts.

        :return: The ican_to of this NewPaymentRequest.
        :rtype: int
        """
        return self._ican_to

    @ican_to.setter
    def ican_to(self, ican_to):
        """Sets the ican_to of this NewPaymentRequest.

        The ican of the account to collect the funds into. Must be one of your fire.com Accounts.

        :param ican_to: The ican_to of this NewPaymentRequest.
        :type ican_to: int
        """
        if ican_to is None:
            raise ValueError("Invalid value for `ican_to`, must not be `None`")

        self._ican_to = ican_to

    @property
    def mandatory_fields(self):
        """Gets the mandatory_fields of this NewPaymentRequest.

        For the hosted option, these fields will be madatory for the payer to fill in on the hosted payment page. You can choose to collect any the payer's `ADDRESS`, `REFERENCE` and/or `COMMENT1`. If you choose to collect these fields from the payer, you cannot set 'delivery’, 'variableReference’ or 'comment1’ fields respectively.

        :return: The mandatory_fields of this NewPaymentRequest.
        :rtype: str
        """
        return self._mandatory_fields

    @mandatory_fields.setter
    def mandatory_fields(self, mandatory_fields):
        """Sets the mandatory_fields of this NewPaymentRequest.

        For the hosted option, these fields will be madatory for the payer to fill in on the hosted payment page. You can choose to collect any the payer's `ADDRESS`, `REFERENCE` and/or `COMMENT1`. If you choose to collect these fields from the payer, you cannot set 'delivery’, 'variableReference’ or 'comment1’ fields respectively.

        :param mandatory_fields: The mandatory_fields of this NewPaymentRequest.
        :type mandatory_fields: str
        """

        self._mandatory_fields = mandatory_fields

    @property
    def max_number_payments(self):
        """Gets the max_number_payments of this NewPaymentRequest.

        The max number of people who can pay this request. Must be set to 1 for the ECOMMERCE_GOODS and ECOMMERCE_SERVICES types.

        :return: The max_number_payments of this NewPaymentRequest.
        :rtype: int
        """
        return self._max_number_payments

    @max_number_payments.setter
    def max_number_payments(self, max_number_payments):
        """Sets the max_number_payments of this NewPaymentRequest.

        The max number of people who can pay this request. Must be set to 1 for the ECOMMERCE_GOODS and ECOMMERCE_SERVICES types.

        :param max_number_payments: The max_number_payments of this NewPaymentRequest.
        :type max_number_payments: int
        """

        self._max_number_payments = max_number_payments

    @property
    def my_ref(self):
        """Gets the my_ref of this NewPaymentRequest.

        An internal description of the request.

        :return: The my_ref of this NewPaymentRequest.
        :rtype: str
        """
        return self._my_ref

    @my_ref.setter
    def my_ref(self, my_ref):
        """Sets the my_ref of this NewPaymentRequest.

        An internal description of the request.

        :param my_ref: The my_ref of this NewPaymentRequest.
        :type my_ref: str
        """
        if my_ref is None:
            raise ValueError("Invalid value for `my_ref`, must not be `None`")

        self._my_ref = my_ref

    @property
    def order_details(self):
        """Gets the order_details of this NewPaymentRequest.


        :return: The order_details of this NewPaymentRequest.
        :rtype: OrderDetails
        """
        return self._order_details

    @order_details.setter
    def order_details(self, order_details):
        """Sets the order_details of this NewPaymentRequest.


        :param order_details: The order_details of this NewPaymentRequest.
        :type order_details: OrderDetails
        """

        self._order_details = order_details

    @property
    def return_url(self):
        """Gets the return_url of this NewPaymentRequest.

        The merchant return URL where the customer will be re-directed to with the result of the transaction.

        :return: The return_url of this NewPaymentRequest.
        :rtype: str
        """
        return self._return_url

    @return_url.setter
    def return_url(self, return_url):
        """Sets the return_url of this NewPaymentRequest.

        The merchant return URL where the customer will be re-directed to with the result of the transaction.

        :param return_url: The return_url of this NewPaymentRequest.
        :type return_url: str
        """

        self._return_url = return_url

    @property
    def type(self):
        """Gets the type of this NewPaymentRequest.

        The type of Fire Open Payment that was created

        :return: The type of this NewPaymentRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NewPaymentRequest.

        The type of Fire Open Payment that was created

        :param type: The type of this NewPaymentRequest.
        :type type: str
        """
        allowed_values = ["OTHER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
