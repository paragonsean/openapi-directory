# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RelatedCard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias: str=None, card_id: int=None, emboss_business_name: str=None, emboss_card_name: str=None, expiry_date: datetime=None, masked_pan: str=None, provider: str=None):
        """RelatedCard - a model defined in OpenAPI

        :param alias: The alias of this RelatedCard.
        :param card_id: The card_id of this RelatedCard.
        :param emboss_business_name: The emboss_business_name of this RelatedCard.
        :param emboss_card_name: The emboss_card_name of this RelatedCard.
        :param expiry_date: The expiry_date of this RelatedCard.
        :param masked_pan: The masked_pan of this RelatedCard.
        :param provider: The provider of this RelatedCard.
        """
        self.openapi_types = {
            'alias': str,
            'card_id': int,
            'emboss_business_name': str,
            'emboss_card_name': str,
            'expiry_date': datetime,
            'masked_pan': str,
            'provider': str
        }

        self.attribute_map = {
            'alias': 'alias',
            'card_id': 'cardId',
            'emboss_business_name': 'embossBusinessName',
            'emboss_card_name': 'embossCardName',
            'expiry_date': 'expiryDate',
            'masked_pan': 'maskedPan',
            'provider': 'provider'
        }

        self._alias = alias
        self._card_id = card_id
        self._emboss_business_name = emboss_business_name
        self._emboss_card_name = emboss_card_name
        self._expiry_date = expiry_date
        self._masked_pan = masked_pan
        self._provider = provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelatedCard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The relatedCard of this RelatedCard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self):
        """Gets the alias of this RelatedCard.


        :return: The alias of this RelatedCard.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this RelatedCard.


        :param alias: The alias of this RelatedCard.
        :type alias: str
        """

        self._alias = alias

    @property
    def card_id(self):
        """Gets the card_id of this RelatedCard.


        :return: The card_id of this RelatedCard.
        :rtype: int
        """
        return self._card_id

    @card_id.setter
    def card_id(self, card_id):
        """Sets the card_id of this RelatedCard.


        :param card_id: The card_id of this RelatedCard.
        :type card_id: int
        """

        self._card_id = card_id

    @property
    def emboss_business_name(self):
        """Gets the emboss_business_name of this RelatedCard.


        :return: The emboss_business_name of this RelatedCard.
        :rtype: str
        """
        return self._emboss_business_name

    @emboss_business_name.setter
    def emboss_business_name(self, emboss_business_name):
        """Sets the emboss_business_name of this RelatedCard.


        :param emboss_business_name: The emboss_business_name of this RelatedCard.
        :type emboss_business_name: str
        """

        self._emboss_business_name = emboss_business_name

    @property
    def emboss_card_name(self):
        """Gets the emboss_card_name of this RelatedCard.


        :return: The emboss_card_name of this RelatedCard.
        :rtype: str
        """
        return self._emboss_card_name

    @emboss_card_name.setter
    def emboss_card_name(self, emboss_card_name):
        """Sets the emboss_card_name of this RelatedCard.


        :param emboss_card_name: The emboss_card_name of this RelatedCard.
        :type emboss_card_name: str
        """

        self._emboss_card_name = emboss_card_name

    @property
    def expiry_date(self):
        """Gets the expiry_date of this RelatedCard.


        :return: The expiry_date of this RelatedCard.
        :rtype: datetime
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this RelatedCard.


        :param expiry_date: The expiry_date of this RelatedCard.
        :type expiry_date: datetime
        """

        self._expiry_date = expiry_date

    @property
    def masked_pan(self):
        """Gets the masked_pan of this RelatedCard.


        :return: The masked_pan of this RelatedCard.
        :rtype: str
        """
        return self._masked_pan

    @masked_pan.setter
    def masked_pan(self, masked_pan):
        """Sets the masked_pan of this RelatedCard.


        :param masked_pan: The masked_pan of this RelatedCard.
        :type masked_pan: str
        """

        self._masked_pan = masked_pan

    @property
    def provider(self):
        """Gets the provider of this RelatedCard.


        :return: The provider of this RelatedCard.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this RelatedCard.


        :param provider: The provider of this RelatedCard.
        :type provider: str
        """

        self._provider = provider
