# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, api_application_id: int=None, business_id: int=None, expiry: datetime=None, permissions: List[str]=None):
        """AccessToken - a model defined in OpenAPI

        :param access_token: The access_token of this AccessToken.
        :param api_application_id: The api_application_id of this AccessToken.
        :param business_id: The business_id of this AccessToken.
        :param expiry: The expiry of this AccessToken.
        :param permissions: The permissions of this AccessToken.
        """
        self.openapi_types = {
            'access_token': str,
            'api_application_id': int,
            'business_id': int,
            'expiry': datetime,
            'permissions': List[str]
        }

        self.attribute_map = {
            'access_token': 'accessToken',
            'api_application_id': 'apiApplicationId',
            'business_id': 'businessId',
            'expiry': 'expiry',
            'permissions': 'permissions'
        }

        self._access_token = access_token
        self._api_application_id = api_application_id
        self._business_id = business_id
        self._expiry = expiry
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The accessToken of this AccessToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this AccessToken.

        The App Bearer Access Token you can use in further API calls.

        :return: The access_token of this AccessToken.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this AccessToken.

        The App Bearer Access Token you can use in further API calls.

        :param access_token: The access_token of this AccessToken.
        :type access_token: str
        """

        self._access_token = access_token

    @property
    def api_application_id(self):
        """Gets the api_application_id of this AccessToken.

        The ID of the application you are using.

        :return: The api_application_id of this AccessToken.
        :rtype: int
        """
        return self._api_application_id

    @api_application_id.setter
    def api_application_id(self, api_application_id):
        """Sets the api_application_id of this AccessToken.

        The ID of the application you are using.

        :param api_application_id: The api_application_id of this AccessToken.
        :type api_application_id: int
        """

        self._api_application_id = api_application_id

    @property
    def business_id(self):
        """Gets the business_id of this AccessToken.

        The business ID for the business.

        :return: The business_id of this AccessToken.
        :rtype: int
        """
        return self._business_id

    @business_id.setter
    def business_id(self, business_id):
        """Sets the business_id of this AccessToken.

        The business ID for the business.

        :param business_id: The business_id of this AccessToken.
        :type business_id: int
        """

        self._business_id = business_id

    @property
    def expiry(self):
        """Gets the expiry of this AccessToken.

        The expiry date and time for this token (ISO-8601).

        :return: The expiry of this AccessToken.
        :rtype: datetime
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this AccessToken.

        The expiry date and time for this token (ISO-8601).

        :param expiry: The expiry of this AccessToken.
        :type expiry: datetime
        """

        self._expiry = expiry

    @property
    def permissions(self):
        """Gets the permissions of this AccessToken.

        The permissions assigned to the Access Token as an array of strings. This provides information on what API access it is allowed. See the section on Scope below.

        :return: The permissions of this AccessToken.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this AccessToken.

        The permissions assigned to the Access Token as an array of strings. This provides information on what API access it is allowed. See the section on Scope below.

        :param permissions: The permissions of this AccessToken.
        :type permissions: List[str]
        """

        self._permissions = permissions
