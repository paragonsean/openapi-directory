/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BatchItemDetails;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.DirectDebitDetails;
import org.openapitools.client.model.FxTrade;
import org.openapitools.client.model.ProprietarySchemeDetailsInner;
import org.openapitools.client.model.RelatedCard;
import org.openapitools.client.model.RelatedParty;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Transaction
 */
public class TransactionTest {
    private final Transaction model = new Transaction();

    /**
     * Model tests for Transaction
     */
    @Test
    public void testTransaction() {
        // TODO: test Transaction
    }

    /**
     * Test the property 'amountAfterCharges'
     */
    @Test
    public void amountAfterChargesTest() {
        // TODO: test amountAfterCharges
    }

    /**
     * Test the property 'amountBeforeCharges'
     */
    @Test
    public void amountBeforeChargesTest() {
        // TODO: test amountBeforeCharges
    }

    /**
     * Test the property 'balance'
     */
    @Test
    public void balanceTest() {
        // TODO: test balance
    }

    /**
     * Test the property 'batchItemDetails'
     */
    @Test
    public void batchItemDetailsTest() {
        // TODO: test batchItemDetails
    }

    /**
     * Test the property 'card'
     */
    @Test
    public void cardTest() {
        // TODO: test card
    }

    /**
     * Test the property 'currency'
     */
    @Test
    public void currencyTest() {
        // TODO: test currency
    }

    /**
     * Test the property 'date'
     */
    @Test
    public void dateTest() {
        // TODO: test date
    }

    /**
     * Test the property 'dateAcknowledged'
     */
    @Test
    public void dateAcknowledgedTest() {
        // TODO: test dateAcknowledged
    }

    /**
     * Test the property 'directDebitDetails'
     */
    @Test
    public void directDebitDetailsTest() {
        // TODO: test directDebitDetails
    }

    /**
     * Test the property 'eventUuid'
     */
    @Test
    public void eventUuidTest() {
        // TODO: test eventUuid
    }

    /**
     * Test the property 'feeAmount'
     */
    @Test
    public void feeAmountTest() {
        // TODO: test feeAmount
    }

    /**
     * Test the property 'fxTradeDetails'
     */
    @Test
    public void fxTradeDetailsTest() {
        // TODO: test fxTradeDetails
    }

    /**
     * Test the property 'ican'
     */
    @Test
    public void icanTest() {
        // TODO: test ican
    }

    /**
     * Test the property 'myRef'
     */
    @Test
    public void myRefTest() {
        // TODO: test myRef
    }

    /**
     * Test the property 'paymentRequestPublicCode'
     */
    @Test
    public void paymentRequestPublicCodeTest() {
        // TODO: test paymentRequestPublicCode
    }

    /**
     * Test the property 'proprietarySchemeDetails'
     */
    @Test
    public void proprietarySchemeDetailsTest() {
        // TODO: test proprietarySchemeDetails
    }

    /**
     * Test the property 'refId'
     */
    @Test
    public void refIdTest() {
        // TODO: test refId
    }

    /**
     * Test the property 'relatedParty'
     */
    @Test
    public void relatedPartyTest() {
        // TODO: test relatedParty
    }

    /**
     * Test the property 'taxAmount'
     */
    @Test
    public void taxAmountTest() {
        // TODO: test taxAmount
    }

    /**
     * Test the property 'txnId'
     */
    @Test
    public void txnIdTest() {
        // TODO: test txnId
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'yourRef'
     */
    @Test
    public void yourRefTest() {
        // TODO: test yourRef
    }

}
