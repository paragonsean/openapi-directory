/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.OrderDetails;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for PaymentRequest
 */
public class PaymentRequestTest {
    private final PaymentRequest model = new PaymentRequest();

    /**
     * Model tests for PaymentRequest
     */
    @Test
    public void testPaymentRequest() {
        // TODO: test PaymentRequest
    }

    /**
     * Test the property 'additionalFields'
     */
    @Test
    public void additionalFieldsTest() {
        // TODO: test additionalFields
    }

    /**
     * Test the property 'amount'
     */
    @Test
    public void amountTest() {
        // TODO: test amount
    }

    /**
     * Test the property 'collectFields'
     */
    @Test
    public void collectFieldsTest() {
        // TODO: test collectFields
    }

    /**
     * Test the property 'currency'
     */
    @Test
    public void currencyTest() {
        // TODO: test currency
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'expiry'
     */
    @Test
    public void expiryTest() {
        // TODO: test expiry
    }

    /**
     * Test the property 'icanTo'
     */
    @Test
    public void icanToTest() {
        // TODO: test icanTo
    }

    /**
     * Test the property 'mandatoryFields'
     */
    @Test
    public void mandatoryFieldsTest() {
        // TODO: test mandatoryFields
    }

    /**
     * Test the property 'maxNumberPayments'
     */
    @Test
    public void maxNumberPaymentsTest() {
        // TODO: test maxNumberPayments
    }

    /**
     * Test the property 'myRef'
     */
    @Test
    public void myRefTest() {
        // TODO: test myRef
    }

    /**
     * Test the property 'orderDetails'
     */
    @Test
    public void orderDetailsTest() {
        // TODO: test orderDetails
    }

    /**
     * Test the property 'paymentRequestCode'
     */
    @Test
    public void paymentRequestCodeTest() {
        // TODO: test paymentRequestCode
    }

    /**
     * Test the property 'paymentUuid'
     */
    @Test
    public void paymentUuidTest() {
        // TODO: test paymentUuid
    }

    /**
     * Test the property 'returnUrl'
     */
    @Test
    public void returnUrlTest() {
        // TODO: test returnUrl
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'transactionType'
     */
    @Test
    public void transactionTypeTest() {
        // TODO: test transactionType
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'webhookUrl'
     */
    @Test
    public void webhookUrlTest() {
        // TODO: test webhookUrl
    }

}
