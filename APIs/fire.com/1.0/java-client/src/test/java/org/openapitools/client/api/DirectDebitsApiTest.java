/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DirectDebit;
import org.openapitools.client.model.DirectDebits;
import org.openapitools.client.model.Mandate;
import org.openapitools.client.model.Mandates;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DirectDebitsApi
 */
@Disabled
public class DirectDebitsApiTest {

    private final DirectDebitsApi api = new DirectDebitsApi();

    /**
     * Activate a direct debit mandate
     *
     * This endpoint can only be used to activate a direct debit mandate when it is in the status REJECT_REQUESTED (even if the account has direct debits disabled). This action will also enable the account for direct debits if it was previously set to be disabled. The permision needed to access this endpoint is PERM_BUSINESS_POST_MANDATE_ACTIVATE 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateMandateTest() throws ApiException {
        String mandateUuid = null;
        api.activateMandate(mandateUuid);
        // TODO: test validations
    }

    /**
     * Cancel a direct debit mandate
     *
     * This endpoint allows you to cancel a direct debit mandate. The permision needed to access this endpoint is PERM_BUSINESS_POST_MANDATE_CANCEL 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelMandateByUuidTest() throws ApiException {
        String mandateUuid = null;
        api.cancelMandateByUuid(mandateUuid);
        // TODO: test validations
    }

    /**
     * Get the details of a direct debit
     *
     * Retrieve all details of a single direct debit collection/payment, whether successful or not. The permision needed to access this endpoint is **PERM_BUSINESS_GET_DIRECT_DEBIT** 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDirectDebitByUuidTest() throws ApiException {
        String directDebitUuid = null;
        DirectDebit response = api.getDirectDebitByUuid(directDebitUuid);
        // TODO: test validations
    }

    /**
     * List all direct debit mandates
     *
     * The permision needed to access this endpoint is PERM_BUSINESS_GET_MANDATES 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDirectDebitMandatesTest() throws ApiException {
        Mandates response = api.getDirectDebitMandates();
        // TODO: test validations
    }

    /**
     * Get all DD payments associated with a direct debit mandate
     *
     * Retrieve all direct debit payments associated with a direct debit mandate. The permision needed to access this endpoint is PERM_BUSINESS_GET_DIRECT_DEBITS 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDirectDebitsForMandateUuidTest() throws ApiException {
        String mandateUuid = null;
        DirectDebits response = api.getDirectDebitsForMandateUuid(mandateUuid);
        // TODO: test validations
    }

    /**
     * Get direct debit mandate details
     *
     * Retrieve all details for a direct debit mandate. The permision needed to access this endpoint is PERM_BUSINESS_GET_MANDATE 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMandateTest() throws ApiException {
        String mandateUuid = null;
        Mandate response = api.getMandate(mandateUuid);
        // TODO: test validations
    }

    /**
     * Reject a direct debit payment
     *
     * This endpoint allows you to reject a direct debit payment where the status is still set to RECEIVED. Permission name PERM_BUSINESS_POST_DIRECT_DEBIT_REJECT 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rejectDirectDebitTest() throws ApiException {
        String directDebitUuid = null;
        api.rejectDirectDebit(directDebitUuid);
        // TODO: test validations
    }

    /**
     * Update a direct debit mandate alias
     *
     * Update Direct Debit Mandate Alias The permision needed to access this endpoint is PERM_BUSINESS_PUT_MANDATE 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMandateAliasTest() throws ApiException {
        String mandateUuid = null;
        api.updateMandateAlias(mandateUuid);
        // TODO: test validations
    }

}
