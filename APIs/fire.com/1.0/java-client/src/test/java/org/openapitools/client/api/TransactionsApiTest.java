/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CardTransactionsv1;
import org.openapitools.client.model.CardTransactionsv3;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionsApi
 */
@Disabled
public class TransactionsApiTest {

    private final TransactionsApi api = new TransactionsApi();

    /**
     * Filtered list of transactions for an account (v1)
     *
     * Retrieve a filtered list of transactions against an account. Recommended to use the v3 endpoint instead. * &#x60;dateRangeFrom&#x60; - A millisecond epoch time specifying the date range start date. * &#x60;dateRangeTo&#x60; - A millisecond epoch time specifying the date range end date. * &#x60;searchKeyword&#x60; - Search term to filter by from the reference field (&#x60;myRef&#x60;). * &#x60;transactionTypes&#x60; - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types. * &#x60;offset&#x60; - The page offset. Defaults to 0. This is the record number that the returned list will start at. E.g. offset &#x3D; 40 and limit &#x3D; 20 will return records 40 to 59. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransactionsByAccountIdFilteredTest() throws ApiException {
        Long ican = null;
        Long dateRangeFrom = null;
        Long dateRangeTo = null;
        String searchKeyword = null;
        List<String> transactionTypes = null;
        Long offset = null;
        CardTransactionsv1 response = api.getTransactionsByAccountIdFiltered(ican, dateRangeFrom, dateRangeTo, searchKeyword, transactionTypes, offset);
        // TODO: test validations
    }

    /**
     * List transactions for an account (v1)
     *
     * Retrieve a list of transactions against an account. Recommended to use the v3 endpoint instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransactionsByAccountIdv1Test() throws ApiException {
        Long ican = null;
        Long limit = null;
        Long offset = null;
        CardTransactionsv1 response = api.getTransactionsByAccountIdv1(ican, limit, offset);
        // TODO: test validations
    }

    /**
     * List transactions for an account (v3)
     *
     * Retrieve a list of transactions against an account. Initially, use the optional &#x60;limit&#x60;, &#x60;dateRangeFrom&#x60; and &#x60;dateRangeTo&#x60; query params to limit your query, then use the embedded &#x60;next&#x60; or &#x60;prev&#x60; links in the response to get newer or older pages. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransactionsByAccountIdv3Test() throws ApiException {
        Long ican = null;
        Long limit = null;
        Long dateRangeFrom = null;
        Long dateRangeTo = null;
        String startAfter = null;
        CardTransactionsv3 response = api.getTransactionsByAccountIdv3(ican, limit, dateRangeFrom, dateRangeTo, startAfter);
        // TODO: test validations
    }

}
