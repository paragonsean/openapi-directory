/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ApiApplication
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:07.131817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiApplication {
  public static final String SERIALIZED_NAME_APPLICATION_ID = "applicationId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_ID)
  private Long applicationId;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_KEY = "clientKey";
  @SerializedName(SERIALIZED_NAME_CLIENT_KEY)
  private String clientKey;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_EXPIRY = "expiry";
  @SerializedName(SERIALIZED_NAME_EXPIRY)
  private OffsetDateTime expiry;

  public static final String SERIALIZED_NAME_ICAN = "ican";
  @SerializedName(SERIALIZED_NAME_ICAN)
  private Long ican;

  public static final String SERIALIZED_NAME_NUMBER_OF_PAYEE_APPROVALS_REQUIRED = "numberOfPayeeApprovalsRequired";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PAYEE_APPROVALS_REQUIRED)
  private Integer numberOfPayeeApprovalsRequired;

  public static final String SERIALIZED_NAME_NUMBER_OF_PAYMENT_APPROVALS_REQUIRED = "numberOfPaymentApprovalsRequired";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PAYMENT_APPROVALS_REQUIRED)
  private Integer numberOfPaymentApprovalsRequired;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN = "refreshToken";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN)
  private String refreshToken;

  public ApiApplication() {
  }

  public ApiApplication applicationId(Long applicationId) {
    this.applicationId = applicationId;
    return this;
  }

  /**
   * The ID of the API Application
   * @return applicationId
   */
  @javax.annotation.Nullable
  public Long getApplicationId() {
    return applicationId;
  }

  public void setApplicationId(Long applicationId) {
    this.applicationId = applicationId;
  }


  public ApiApplication clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * The Client ID of the new API Application
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public ApiApplication clientKey(String clientKey) {
    this.clientKey = clientKey;
    return this;
  }

  /**
   * The Client Key of the new API Application
   * @return clientKey
   */
  @javax.annotation.Nullable
  public String getClientKey() {
    return clientKey;
  }

  public void setClientKey(String clientKey) {
    this.clientKey = clientKey;
  }


  public ApiApplication enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether or not this API Application can be used
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ApiApplication expiry(OffsetDateTime expiry) {
    this.expiry = expiry;
    return this;
  }

  /**
   * The date that this API Application can no longer be used.
   * @return expiry
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiry() {
    return expiry;
  }

  public void setExpiry(OffsetDateTime expiry) {
    this.expiry = expiry;
  }


  public ApiApplication ican(Long ican) {
    this.ican = ican;
    return this;
  }

  /**
   * The ICAN of one of your Fire accounts. Restrict this API Application to a certan account.
   * @return ican
   */
  @javax.annotation.Nullable
  public Long getIcan() {
    return ican;
  }

  public void setIcan(Long ican) {
    this.ican = ican;
  }


  public ApiApplication numberOfPayeeApprovalsRequired(Integer numberOfPayeeApprovalsRequired) {
    this.numberOfPayeeApprovalsRequired = numberOfPayeeApprovalsRequired;
    return this;
  }

  /**
   * Number of approvals required to create a payee in a batch
   * @return numberOfPayeeApprovalsRequired
   */
  @javax.annotation.Nullable
  public Integer getNumberOfPayeeApprovalsRequired() {
    return numberOfPayeeApprovalsRequired;
  }

  public void setNumberOfPayeeApprovalsRequired(Integer numberOfPayeeApprovalsRequired) {
    this.numberOfPayeeApprovalsRequired = numberOfPayeeApprovalsRequired;
  }


  public ApiApplication numberOfPaymentApprovalsRequired(Integer numberOfPaymentApprovalsRequired) {
    this.numberOfPaymentApprovalsRequired = numberOfPaymentApprovalsRequired;
    return this;
  }

  /**
   * Number of approvals required to process a payment in a batch
   * @return numberOfPaymentApprovalsRequired
   */
  @javax.annotation.Nullable
  public Integer getNumberOfPaymentApprovalsRequired() {
    return numberOfPaymentApprovalsRequired;
  }

  public void setNumberOfPaymentApprovalsRequired(Integer numberOfPaymentApprovalsRequired) {
    this.numberOfPaymentApprovalsRequired = numberOfPaymentApprovalsRequired;
  }


  public ApiApplication refreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
    return this;
  }

  /**
   * The Refresh Token of the new API Application
   * @return refreshToken
   */
  @javax.annotation.Nullable
  public String getRefreshToken() {
    return refreshToken;
  }

  public void setRefreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiApplication apiApplication = (ApiApplication) o;
    return Objects.equals(this.applicationId, apiApplication.applicationId) &&
        Objects.equals(this.clientId, apiApplication.clientId) &&
        Objects.equals(this.clientKey, apiApplication.clientKey) &&
        Objects.equals(this.enabled, apiApplication.enabled) &&
        Objects.equals(this.expiry, apiApplication.expiry) &&
        Objects.equals(this.ican, apiApplication.ican) &&
        Objects.equals(this.numberOfPayeeApprovalsRequired, apiApplication.numberOfPayeeApprovalsRequired) &&
        Objects.equals(this.numberOfPaymentApprovalsRequired, apiApplication.numberOfPaymentApprovalsRequired) &&
        Objects.equals(this.refreshToken, apiApplication.refreshToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, clientId, clientKey, enabled, expiry, ican, numberOfPayeeApprovalsRequired, numberOfPaymentApprovalsRequired, refreshToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiApplication {\n");
    sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientKey: ").append(toIndentedString(clientKey)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
    sb.append("    ican: ").append(toIndentedString(ican)).append("\n");
    sb.append("    numberOfPayeeApprovalsRequired: ").append(toIndentedString(numberOfPayeeApprovalsRequired)).append("\n");
    sb.append("    numberOfPaymentApprovalsRequired: ").append(toIndentedString(numberOfPaymentApprovalsRequired)).append("\n");
    sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationId");
    openapiFields.add("clientId");
    openapiFields.add("clientKey");
    openapiFields.add("enabled");
    openapiFields.add("expiry");
    openapiFields.add("ican");
    openapiFields.add("numberOfPayeeApprovalsRequired");
    openapiFields.add("numberOfPaymentApprovalsRequired");
    openapiFields.add("refreshToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiApplication
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiApplication.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiApplication is not found in the empty JSON string", ApiApplication.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiApplication.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiApplication` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("clientKey") != null && !jsonObj.get("clientKey").isJsonNull()) && !jsonObj.get("clientKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientKey").toString()));
      }
      if ((jsonObj.get("refreshToken") != null && !jsonObj.get("refreshToken").isJsonNull()) && !jsonObj.get("refreshToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refreshToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refreshToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiApplication.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiApplication' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiApplication> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiApplication.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiApplication>() {
           @Override
           public void write(JsonWriter out, ApiApplication value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiApplication read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiApplication given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiApplication
   * @throws IOException if the JSON string is invalid with respect to ApiApplication
   */
  public static ApiApplication fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiApplication.class);
  }

  /**
   * Convert an instance of ApiApplication to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

