/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of the batch run if this transaction was part of a batch.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:07.131817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchItemDetails {
  public static final String SERIALIZED_NAME_BATCH_ITEM_PUBLIC_UUID = "batchItemPublicUuid";
  @SerializedName(SERIALIZED_NAME_BATCH_ITEM_PUBLIC_UUID)
  private String batchItemPublicUuid;

  public static final String SERIALIZED_NAME_BATCH_NAME = "batchName";
  @SerializedName(SERIALIZED_NAME_BATCH_NAME)
  private String batchName;

  public static final String SERIALIZED_NAME_BATCH_PUBLIC_UUID = "batchPublicUuid";
  @SerializedName(SERIALIZED_NAME_BATCH_PUBLIC_UUID)
  private String batchPublicUuid;

  public static final String SERIALIZED_NAME_JOB_NUMBER = "jobNumber";
  @SerializedName(SERIALIZED_NAME_JOB_NUMBER)
  private String jobNumber;

  public BatchItemDetails() {
  }

  public BatchItemDetails batchItemPublicUuid(String batchItemPublicUuid) {
    this.batchItemPublicUuid = batchItemPublicUuid;
    return this;
  }

  /**
   * The UUID for this item in the batch.
   * @return batchItemPublicUuid
   */
  @javax.annotation.Nullable
  public String getBatchItemPublicUuid() {
    return batchItemPublicUuid;
  }

  public void setBatchItemPublicUuid(String batchItemPublicUuid) {
    this.batchItemPublicUuid = batchItemPublicUuid;
  }


  public BatchItemDetails batchName(String batchName) {
    this.batchName = batchName;
    return this;
  }

  /**
   * The optional name given to the batch at creation time.
   * @return batchName
   */
  @javax.annotation.Nullable
  public String getBatchName() {
    return batchName;
  }

  public void setBatchName(String batchName) {
    this.batchName = batchName;
  }


  public BatchItemDetails batchPublicUuid(String batchPublicUuid) {
    this.batchPublicUuid = batchPublicUuid;
    return this;
  }

  /**
   * The UUID for this batch.
   * @return batchPublicUuid
   */
  @javax.annotation.Nullable
  public String getBatchPublicUuid() {
    return batchPublicUuid;
  }

  public void setBatchPublicUuid(String batchPublicUuid) {
    this.batchPublicUuid = batchPublicUuid;
  }


  public BatchItemDetails jobNumber(String jobNumber) {
    this.jobNumber = jobNumber;
    return this;
  }

  /**
   * The optional job number given to the batch to link it to your own system.
   * @return jobNumber
   */
  @javax.annotation.Nullable
  public String getJobNumber() {
    return jobNumber;
  }

  public void setJobNumber(String jobNumber) {
    this.jobNumber = jobNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchItemDetails batchItemDetails = (BatchItemDetails) o;
    return Objects.equals(this.batchItemPublicUuid, batchItemDetails.batchItemPublicUuid) &&
        Objects.equals(this.batchName, batchItemDetails.batchName) &&
        Objects.equals(this.batchPublicUuid, batchItemDetails.batchPublicUuid) &&
        Objects.equals(this.jobNumber, batchItemDetails.jobNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchItemPublicUuid, batchName, batchPublicUuid, jobNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchItemDetails {\n");
    sb.append("    batchItemPublicUuid: ").append(toIndentedString(batchItemPublicUuid)).append("\n");
    sb.append("    batchName: ").append(toIndentedString(batchName)).append("\n");
    sb.append("    batchPublicUuid: ").append(toIndentedString(batchPublicUuid)).append("\n");
    sb.append("    jobNumber: ").append(toIndentedString(jobNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("batchItemPublicUuid");
    openapiFields.add("batchName");
    openapiFields.add("batchPublicUuid");
    openapiFields.add("jobNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchItemDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchItemDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchItemDetails is not found in the empty JSON string", BatchItemDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchItemDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchItemDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("batchItemPublicUuid") != null && !jsonObj.get("batchItemPublicUuid").isJsonNull()) && !jsonObj.get("batchItemPublicUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchItemPublicUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchItemPublicUuid").toString()));
      }
      if ((jsonObj.get("batchName") != null && !jsonObj.get("batchName").isJsonNull()) && !jsonObj.get("batchName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchName").toString()));
      }
      if ((jsonObj.get("batchPublicUuid") != null && !jsonObj.get("batchPublicUuid").isJsonNull()) && !jsonObj.get("batchPublicUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchPublicUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchPublicUuid").toString()));
      }
      if ((jsonObj.get("jobNumber") != null && !jsonObj.get("jobNumber").isJsonNull()) && !jsonObj.get("jobNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchItemDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchItemDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchItemDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchItemDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchItemDetails>() {
           @Override
           public void write(JsonWriter out, BatchItemDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchItemDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchItemDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchItemDetails
   * @throws IOException if the JSON string is invalid with respect to BatchItemDetails
   */
  public static BatchItemDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchItemDetails.class);
  }

  /**
   * Convert an instance of BatchItemDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

