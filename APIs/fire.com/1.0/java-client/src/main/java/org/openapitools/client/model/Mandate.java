/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Currency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Mandate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:07.131817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Mandate {
  public static final String SERIALIZED_NAME_ALIAS = "alias";
  @SerializedName(SERIALIZED_NAME_ALIAS)
  private String alias;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Currency currency;

  public static final String SERIALIZED_NAME_DATE_CANCELLED = "dateCancelled";
  @SerializedName(SERIALIZED_NAME_DATE_CANCELLED)
  private OffsetDateTime dateCancelled;

  public static final String SERIALIZED_NAME_DATE_COMPLETED = "dateCompleted";
  @SerializedName(SERIALIZED_NAME_DATE_COMPLETED)
  private OffsetDateTime dateCompleted;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  /**
   * Rejection reason if transaction is rejected
   */
  @JsonAdapter(FireRejectionReasonEnum.Adapter.class)
  public enum FireRejectionReasonEnum {
    ACCOUNT_DOES_NOT_ACCEPT_DIRECT_DEBITS("ACCOUNT_DOES_NOT_ACCEPT_DIRECT_DEBITS"),
    
    DDIC("DDIC"),
    
    ACCOUNT_NOT_FOUND("ACCOUNT_NOT_FOUND"),
    
    ACCOUNT_NOT_LIVE("ACCOUNT_NOT_LIVE"),
    
    CUSTOMER_NOT_FOUND("CUSTOMER_NOT_FOUND"),
    
    BUSINESS_NOT_LIVE("BUSINESS_NOT_LIVE"),
    
    BUSINESS_NOT_FULL("BUSINESS_NOT_FULL"),
    
    PERSONAL_USER_NOT_LIVE("PERSONAL_USER_NOT_LIVE"),
    
    PERSONAL_USER_NOT_FULL("PERSONAL_USER_NOT_FULL"),
    
    MANDATE_ALREADY_EXISTS("MANDATE_ALREADY_EXISTS"),
    
    MANDATE_WITH_DIFERENT_ACCOUNT("MANDATE_WITH_DIFERENT_ACCOUNT"),
    
    NULL_MANDATE_REFERENCE("NULL_MANDATE_REFERENCE"),
    
    INVALID_ACCOUNT_CURRENCY("INVALID_ACCOUNT_CURRENCY"),
    
    INVALID_MANDATE_REFERENCE("INVALID_MANDATE_REFERENCE"),
    
    REQUESTED_BY_CUSTOMER_VIA_SUPPORT("REQUESTED_BY_CUSTOMER_VIA_SUPPORT"),
    
    CUSTOMER_ACCOUNT_CLOSED("CUSTOMER_ACCOUNT_CLOSED"),
    
    CUSTOMER_DECEASED("CUSTOMER_DECEASED"),
    
    ACCOUNT_TRANSFERRED("ACCOUNT_TRANSFERRED"),
    
    MANDATE_NOT_FOUND("MANDATE_NOT_FOUND"),
    
    ACCOUNT_TRANSFERRED_TO_DIFFERENT_ACCOUNT("ACCOUNT_TRANSFERRED_TO_DIFFERENT_ACCOUNT"),
    
    INVALID_ACCOUNT_TYPE("INVALID_ACCOUNT_TYPE"),
    
    MANDATE_EXPIRED("MANDATE_EXPIRED"),
    
    MANDATE_CANCELLED("MANDATE_CANCELLED"),
    
    REQUESTED_BY_CUSTOMER("REQUESTED_BY_CUSTOMER");

    private String value;

    FireRejectionReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FireRejectionReasonEnum fromValue(String value) {
      for (FireRejectionReasonEnum b : FireRejectionReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FireRejectionReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FireRejectionReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FireRejectionReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FireRejectionReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FireRejectionReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FIRE_REJECTION_REASON = "fireRejectionReason";
  @SerializedName(SERIALIZED_NAME_FIRE_REJECTION_REASON)
  private FireRejectionReasonEnum fireRejectionReason;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_LATEST_DIRECT_DEBIT_AMOUNT = "latestDirectDebitAmount";
  @SerializedName(SERIALIZED_NAME_LATEST_DIRECT_DEBIT_AMOUNT)
  private Long latestDirectDebitAmount;

  public static final String SERIALIZED_NAME_LATEST_DIRECT_DEBIT_DATE = "latestDirectDebitDate";
  @SerializedName(SERIALIZED_NAME_LATEST_DIRECT_DEBIT_DATE)
  private OffsetDateTime latestDirectDebitDate;

  public static final String SERIALIZED_NAME_MANDATE_REFERENCE = "mandateReference";
  @SerializedName(SERIALIZED_NAME_MANDATE_REFERENCE)
  private String mandateReference;

  public static final String SERIALIZED_NAME_MANDATE_UUID = "mandateUuid";
  @SerializedName(SERIALIZED_NAME_MANDATE_UUID)
  private String mandateUuid;

  public static final String SERIALIZED_NAME_NUMBER_OF_DIRECT_DEBIT_COLLECTED = "numberOfDirectDebitCollected";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_DIRECT_DEBIT_COLLECTED)
  private Long numberOfDirectDebitCollected;

  public static final String SERIALIZED_NAME_ORIGINATOR_ALIAS = "originatorAlias";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_ALIAS)
  private String originatorAlias;

  public static final String SERIALIZED_NAME_ORIGINATOR_LOGO_URL_LARGE = "originatorLogoUrlLarge";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_LOGO_URL_LARGE)
  private String originatorLogoUrlLarge;

  public static final String SERIALIZED_NAME_ORIGINATOR_LOGO_URL_SMALL = "originatorLogoUrlSmall";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_LOGO_URL_SMALL)
  private String originatorLogoUrlSmall;

  public static final String SERIALIZED_NAME_ORIGINATOR_NAME = "originatorName";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_NAME)
  private String originatorName;

  public static final String SERIALIZED_NAME_ORIGINATOR_REFERENCE = "originatorReference";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_REFERENCE)
  private String originatorReference;

  public static final String SERIALIZED_NAME_SCHEME_CANCEL_REASON = "schemeCancelReason";
  @SerializedName(SERIALIZED_NAME_SCHEME_CANCEL_REASON)
  private String schemeCancelReason;

  public static final String SERIALIZED_NAME_SCHEME_CANCEL_REASON_CODE = "schemeCancelReasonCode";
  @SerializedName(SERIALIZED_NAME_SCHEME_CANCEL_REASON_CODE)
  private String schemeCancelReasonCode;

  /**
   * The status of the mandate. * &#39;CREATED&#39; * &#39;LIVE&#39; * &#39;REJECT_REQUESTED&#39; * &#39;REJECT_RECORD_IN_PROGRESS&#39; * &#39;REJECT_RECORDED&#39; * &#39;REJECT_FILE_CREATED&#39; * &#39;REJECT_FILE_SENT&#39; * &#39;CANCEL_REQUESTED&#39; * &#39;CANCEL_RECORD_IN_PROGRESS&#39; * &#39;CANCEL_RECORDED&#39; * &#39;CANCEL_FILE_CREATED&#39; * &#39;CANCEL_FILE_SENT&#39; * &#39;COMPLETE&#39; * &#39;DORMANT&#39; 
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CREATED("CREATED"),
    
    LIVE("LIVE"),
    
    REJECT_REQUESTED("REJECT_REQUESTED"),
    
    REJECT_RECORD_IN_PROGRESS("REJECT_RECORD_IN_PROGRESS"),
    
    REJECT_RECORDED("REJECT_RECORDED"),
    
    REJECT_FILE_CREATED("REJECT_FILE_CREATED"),
    
    REJECT_FILE_SENT("REJECT_FILE_SENT"),
    
    CANCEL_REQUESTED("CANCEL_REQUESTED"),
    
    CANCEL_RECORD_IN_PROGRESS("CANCEL_RECORD_IN_PROGRESS"),
    
    CANCEL_RECORDED("CANCEL_RECORDED"),
    
    CANCEL_FILE_CREATED("CANCEL_FILE_CREATED"),
    
    CANCEL_FILE_SENT("CANCEL_FILE_SENT"),
    
    COMPLETE("COMPLETE"),
    
    DORMANT("DORMANT");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TARGET_ICAN = "targetIcan";
  @SerializedName(SERIALIZED_NAME_TARGET_ICAN)
  private Long targetIcan;

  public static final String SERIALIZED_NAME_VALUE_OF_DIRECT_DEBIT_COLLECTED = "valueOfDirectDebitCollected";
  @SerializedName(SERIALIZED_NAME_VALUE_OF_DIRECT_DEBIT_COLLECTED)
  private Long valueOfDirectDebitCollected;

  public Mandate() {
  }

  public Mandate alias(String alias) {
    this.alias = alias;
    return this;
  }

  /**
   * The name of the alias
   * @return alias
   */
  @javax.annotation.Nullable
  public String getAlias() {
    return alias;
  }

  public void setAlias(String alias) {
    this.alias = alias;
  }


  public Mandate currency(Currency currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public Currency getCurrency() {
    return currency;
  }

  public void setCurrency(Currency currency) {
    this.currency = currency;
  }


  public Mandate dateCancelled(OffsetDateTime dateCancelled) {
    this.dateCancelled = dateCancelled;
    return this;
  }

  /**
   * Date the direct debit was canceled. Milliseconds since the epoch (1970).
   * @return dateCancelled
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCancelled() {
    return dateCancelled;
  }

  public void setDateCancelled(OffsetDateTime dateCancelled) {
    this.dateCancelled = dateCancelled;
  }


  public Mandate dateCompleted(OffsetDateTime dateCompleted) {
    this.dateCompleted = dateCompleted;
    return this;
  }

  /**
   * Date the direct debit was completed. Milliseconds since the epoch (1970).
   * @return dateCompleted
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCompleted() {
    return dateCompleted;
  }

  public void setDateCompleted(OffsetDateTime dateCompleted) {
    this.dateCompleted = dateCompleted;
  }


  public Mandate dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Date the direct debit was created. Milliseconds since the epoch (1970).
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Mandate fireRejectionReason(FireRejectionReasonEnum fireRejectionReason) {
    this.fireRejectionReason = fireRejectionReason;
    return this;
  }

  /**
   * Rejection reason if transaction is rejected
   * @return fireRejectionReason
   */
  @javax.annotation.Nullable
  public FireRejectionReasonEnum getFireRejectionReason() {
    return fireRejectionReason;
  }

  public void setFireRejectionReason(FireRejectionReasonEnum fireRejectionReason) {
    this.fireRejectionReason = fireRejectionReason;
  }


  public Mandate lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Date the direct debit was last updated. Milliseconds since the epoch (1970).
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public Mandate latestDirectDebitAmount(Long latestDirectDebitAmount) {
    this.latestDirectDebitAmount = latestDirectDebitAmount;
    return this;
  }

  /**
   * The value of largest direct debit collected
   * @return latestDirectDebitAmount
   */
  @javax.annotation.Nullable
  public Long getLatestDirectDebitAmount() {
    return latestDirectDebitAmount;
  }

  public void setLatestDirectDebitAmount(Long latestDirectDebitAmount) {
    this.latestDirectDebitAmount = latestDirectDebitAmount;
  }


  public Mandate latestDirectDebitDate(OffsetDateTime latestDirectDebitDate) {
    this.latestDirectDebitDate = latestDirectDebitDate;
    return this;
  }

  /**
   * The date of latest direct debit collected
   * @return latestDirectDebitDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLatestDirectDebitDate() {
    return latestDirectDebitDate;
  }

  public void setLatestDirectDebitDate(OffsetDateTime latestDirectDebitDate) {
    this.latestDirectDebitDate = latestDirectDebitDate;
  }


  public Mandate mandateReference(String mandateReference) {
    this.mandateReference = mandateReference;
    return this;
  }

  /**
   * the reference of the mandate
   * @return mandateReference
   */
  @javax.annotation.Nullable
  public String getMandateReference() {
    return mandateReference;
  }

  public void setMandateReference(String mandateReference) {
    this.mandateReference = mandateReference;
  }


  public Mandate mandateUuid(String mandateUuid) {
    this.mandateUuid = mandateUuid;
    return this;
  }

  /**
   * The UUID for the mandate
   * @return mandateUuid
   */
  @javax.annotation.Nullable
  public String getMandateUuid() {
    return mandateUuid;
  }

  public void setMandateUuid(String mandateUuid) {
    this.mandateUuid = mandateUuid;
  }


  public Mandate numberOfDirectDebitCollected(Long numberOfDirectDebitCollected) {
    this.numberOfDirectDebitCollected = numberOfDirectDebitCollected;
    return this;
  }

  /**
   * The number of direct debits collected
   * @return numberOfDirectDebitCollected
   */
  @javax.annotation.Nullable
  public Long getNumberOfDirectDebitCollected() {
    return numberOfDirectDebitCollected;
  }

  public void setNumberOfDirectDebitCollected(Long numberOfDirectDebitCollected) {
    this.numberOfDirectDebitCollected = numberOfDirectDebitCollected;
  }


  public Mandate originatorAlias(String originatorAlias) {
    this.originatorAlias = originatorAlias;
    return this;
  }

  /**
   * The name of the alias
   * @return originatorAlias
   */
  @javax.annotation.Nullable
  public String getOriginatorAlias() {
    return originatorAlias;
  }

  public void setOriginatorAlias(String originatorAlias) {
    this.originatorAlias = originatorAlias;
  }


  public Mandate originatorLogoUrlLarge(String originatorLogoUrlLarge) {
    this.originatorLogoUrlLarge = originatorLogoUrlLarge;
    return this;
  }

  /**
   * Logo url from party who sets up the direct debit.
   * @return originatorLogoUrlLarge
   */
  @javax.annotation.Nullable
  public String getOriginatorLogoUrlLarge() {
    return originatorLogoUrlLarge;
  }

  public void setOriginatorLogoUrlLarge(String originatorLogoUrlLarge) {
    this.originatorLogoUrlLarge = originatorLogoUrlLarge;
  }


  public Mandate originatorLogoUrlSmall(String originatorLogoUrlSmall) {
    this.originatorLogoUrlSmall = originatorLogoUrlSmall;
    return this;
  }

  /**
   * Logo url from party who sets up the direct debit.
   * @return originatorLogoUrlSmall
   */
  @javax.annotation.Nullable
  public String getOriginatorLogoUrlSmall() {
    return originatorLogoUrlSmall;
  }

  public void setOriginatorLogoUrlSmall(String originatorLogoUrlSmall) {
    this.originatorLogoUrlSmall = originatorLogoUrlSmall;
  }


  public Mandate originatorName(String originatorName) {
    this.originatorName = originatorName;
    return this;
  }

  /**
   * The creator of the party who sets up the direct debit.
   * @return originatorName
   */
  @javax.annotation.Nullable
  public String getOriginatorName() {
    return originatorName;
  }

  public void setOriginatorName(String originatorName) {
    this.originatorName = originatorName;
  }


  public Mandate originatorReference(String originatorReference) {
    this.originatorReference = originatorReference;
    return this;
  }

  /**
   * Set by party who sets up the direct debit.
   * @return originatorReference
   */
  @javax.annotation.Nullable
  public String getOriginatorReference() {
    return originatorReference;
  }

  public void setOriginatorReference(String originatorReference) {
    this.originatorReference = originatorReference;
  }


  public Mandate schemeCancelReason(String schemeCancelReason) {
    this.schemeCancelReason = schemeCancelReason;
    return this;
  }

  /**
   * Reason for cancelation
   * @return schemeCancelReason
   */
  @javax.annotation.Nullable
  public String getSchemeCancelReason() {
    return schemeCancelReason;
  }

  public void setSchemeCancelReason(String schemeCancelReason) {
    this.schemeCancelReason = schemeCancelReason;
  }


  public Mandate schemeCancelReasonCode(String schemeCancelReasonCode) {
    this.schemeCancelReasonCode = schemeCancelReasonCode;
    return this;
  }

  /**
   * The cancelation code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason.
   * @return schemeCancelReasonCode
   */
  @javax.annotation.Nullable
  public String getSchemeCancelReasonCode() {
    return schemeCancelReasonCode;
  }

  public void setSchemeCancelReasonCode(String schemeCancelReasonCode) {
    this.schemeCancelReasonCode = schemeCancelReasonCode;
  }


  public Mandate status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the mandate. * &#39;CREATED&#39; * &#39;LIVE&#39; * &#39;REJECT_REQUESTED&#39; * &#39;REJECT_RECORD_IN_PROGRESS&#39; * &#39;REJECT_RECORDED&#39; * &#39;REJECT_FILE_CREATED&#39; * &#39;REJECT_FILE_SENT&#39; * &#39;CANCEL_REQUESTED&#39; * &#39;CANCEL_RECORD_IN_PROGRESS&#39; * &#39;CANCEL_RECORDED&#39; * &#39;CANCEL_FILE_CREATED&#39; * &#39;CANCEL_FILE_SENT&#39; * &#39;COMPLETE&#39; * &#39;DORMANT&#39; 
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Mandate targetIcan(Long targetIcan) {
    this.targetIcan = targetIcan;
    return this;
  }

  /**
   * Identifier for the fire.com account (assigned by fire.com)
   * @return targetIcan
   */
  @javax.annotation.Nullable
  public Long getTargetIcan() {
    return targetIcan;
  }

  public void setTargetIcan(Long targetIcan) {
    this.targetIcan = targetIcan;
  }


  public Mandate valueOfDirectDebitCollected(Long valueOfDirectDebitCollected) {
    this.valueOfDirectDebitCollected = valueOfDirectDebitCollected;
    return this;
  }

  /**
   * The value of direct debits collected
   * @return valueOfDirectDebitCollected
   */
  @javax.annotation.Nullable
  public Long getValueOfDirectDebitCollected() {
    return valueOfDirectDebitCollected;
  }

  public void setValueOfDirectDebitCollected(Long valueOfDirectDebitCollected) {
    this.valueOfDirectDebitCollected = valueOfDirectDebitCollected;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Mandate mandate = (Mandate) o;
    return Objects.equals(this.alias, mandate.alias) &&
        Objects.equals(this.currency, mandate.currency) &&
        Objects.equals(this.dateCancelled, mandate.dateCancelled) &&
        Objects.equals(this.dateCompleted, mandate.dateCompleted) &&
        Objects.equals(this.dateCreated, mandate.dateCreated) &&
        Objects.equals(this.fireRejectionReason, mandate.fireRejectionReason) &&
        Objects.equals(this.lastUpdated, mandate.lastUpdated) &&
        Objects.equals(this.latestDirectDebitAmount, mandate.latestDirectDebitAmount) &&
        Objects.equals(this.latestDirectDebitDate, mandate.latestDirectDebitDate) &&
        Objects.equals(this.mandateReference, mandate.mandateReference) &&
        Objects.equals(this.mandateUuid, mandate.mandateUuid) &&
        Objects.equals(this.numberOfDirectDebitCollected, mandate.numberOfDirectDebitCollected) &&
        Objects.equals(this.originatorAlias, mandate.originatorAlias) &&
        Objects.equals(this.originatorLogoUrlLarge, mandate.originatorLogoUrlLarge) &&
        Objects.equals(this.originatorLogoUrlSmall, mandate.originatorLogoUrlSmall) &&
        Objects.equals(this.originatorName, mandate.originatorName) &&
        Objects.equals(this.originatorReference, mandate.originatorReference) &&
        Objects.equals(this.schemeCancelReason, mandate.schemeCancelReason) &&
        Objects.equals(this.schemeCancelReasonCode, mandate.schemeCancelReasonCode) &&
        Objects.equals(this.status, mandate.status) &&
        Objects.equals(this.targetIcan, mandate.targetIcan) &&
        Objects.equals(this.valueOfDirectDebitCollected, mandate.valueOfDirectDebitCollected);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alias, currency, dateCancelled, dateCompleted, dateCreated, fireRejectionReason, lastUpdated, latestDirectDebitAmount, latestDirectDebitDate, mandateReference, mandateUuid, numberOfDirectDebitCollected, originatorAlias, originatorLogoUrlLarge, originatorLogoUrlSmall, originatorName, originatorReference, schemeCancelReason, schemeCancelReasonCode, status, targetIcan, valueOfDirectDebitCollected);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Mandate {\n");
    sb.append("    alias: ").append(toIndentedString(alias)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    dateCancelled: ").append(toIndentedString(dateCancelled)).append("\n");
    sb.append("    dateCompleted: ").append(toIndentedString(dateCompleted)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    fireRejectionReason: ").append(toIndentedString(fireRejectionReason)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    latestDirectDebitAmount: ").append(toIndentedString(latestDirectDebitAmount)).append("\n");
    sb.append("    latestDirectDebitDate: ").append(toIndentedString(latestDirectDebitDate)).append("\n");
    sb.append("    mandateReference: ").append(toIndentedString(mandateReference)).append("\n");
    sb.append("    mandateUuid: ").append(toIndentedString(mandateUuid)).append("\n");
    sb.append("    numberOfDirectDebitCollected: ").append(toIndentedString(numberOfDirectDebitCollected)).append("\n");
    sb.append("    originatorAlias: ").append(toIndentedString(originatorAlias)).append("\n");
    sb.append("    originatorLogoUrlLarge: ").append(toIndentedString(originatorLogoUrlLarge)).append("\n");
    sb.append("    originatorLogoUrlSmall: ").append(toIndentedString(originatorLogoUrlSmall)).append("\n");
    sb.append("    originatorName: ").append(toIndentedString(originatorName)).append("\n");
    sb.append("    originatorReference: ").append(toIndentedString(originatorReference)).append("\n");
    sb.append("    schemeCancelReason: ").append(toIndentedString(schemeCancelReason)).append("\n");
    sb.append("    schemeCancelReasonCode: ").append(toIndentedString(schemeCancelReasonCode)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    targetIcan: ").append(toIndentedString(targetIcan)).append("\n");
    sb.append("    valueOfDirectDebitCollected: ").append(toIndentedString(valueOfDirectDebitCollected)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alias");
    openapiFields.add("currency");
    openapiFields.add("dateCancelled");
    openapiFields.add("dateCompleted");
    openapiFields.add("dateCreated");
    openapiFields.add("fireRejectionReason");
    openapiFields.add("lastUpdated");
    openapiFields.add("latestDirectDebitAmount");
    openapiFields.add("latestDirectDebitDate");
    openapiFields.add("mandateReference");
    openapiFields.add("mandateUuid");
    openapiFields.add("numberOfDirectDebitCollected");
    openapiFields.add("originatorAlias");
    openapiFields.add("originatorLogoUrlLarge");
    openapiFields.add("originatorLogoUrlSmall");
    openapiFields.add("originatorName");
    openapiFields.add("originatorReference");
    openapiFields.add("schemeCancelReason");
    openapiFields.add("schemeCancelReasonCode");
    openapiFields.add("status");
    openapiFields.add("targetIcan");
    openapiFields.add("valueOfDirectDebitCollected");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Mandate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Mandate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Mandate is not found in the empty JSON string", Mandate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Mandate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Mandate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alias") != null && !jsonObj.get("alias").isJsonNull()) && !jsonObj.get("alias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alias").toString()));
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("currency"));
      }
      if ((jsonObj.get("fireRejectionReason") != null && !jsonObj.get("fireRejectionReason").isJsonNull()) && !jsonObj.get("fireRejectionReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fireRejectionReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fireRejectionReason").toString()));
      }
      // validate the optional field `fireRejectionReason`
      if (jsonObj.get("fireRejectionReason") != null && !jsonObj.get("fireRejectionReason").isJsonNull()) {
        FireRejectionReasonEnum.validateJsonElement(jsonObj.get("fireRejectionReason"));
      }
      if ((jsonObj.get("mandateReference") != null && !jsonObj.get("mandateReference").isJsonNull()) && !jsonObj.get("mandateReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mandateReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mandateReference").toString()));
      }
      if ((jsonObj.get("mandateUuid") != null && !jsonObj.get("mandateUuid").isJsonNull()) && !jsonObj.get("mandateUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mandateUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mandateUuid").toString()));
      }
      if ((jsonObj.get("originatorAlias") != null && !jsonObj.get("originatorAlias").isJsonNull()) && !jsonObj.get("originatorAlias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorAlias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorAlias").toString()));
      }
      if ((jsonObj.get("originatorLogoUrlLarge") != null && !jsonObj.get("originatorLogoUrlLarge").isJsonNull()) && !jsonObj.get("originatorLogoUrlLarge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorLogoUrlLarge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorLogoUrlLarge").toString()));
      }
      if ((jsonObj.get("originatorLogoUrlSmall") != null && !jsonObj.get("originatorLogoUrlSmall").isJsonNull()) && !jsonObj.get("originatorLogoUrlSmall").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorLogoUrlSmall` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorLogoUrlSmall").toString()));
      }
      if ((jsonObj.get("originatorName") != null && !jsonObj.get("originatorName").isJsonNull()) && !jsonObj.get("originatorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorName").toString()));
      }
      if ((jsonObj.get("originatorReference") != null && !jsonObj.get("originatorReference").isJsonNull()) && !jsonObj.get("originatorReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorReference").toString()));
      }
      if ((jsonObj.get("schemeCancelReason") != null && !jsonObj.get("schemeCancelReason").isJsonNull()) && !jsonObj.get("schemeCancelReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemeCancelReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemeCancelReason").toString()));
      }
      if ((jsonObj.get("schemeCancelReasonCode") != null && !jsonObj.get("schemeCancelReasonCode").isJsonNull()) && !jsonObj.get("schemeCancelReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemeCancelReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemeCancelReasonCode").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Mandate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Mandate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Mandate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Mandate.class));

       return (TypeAdapter<T>) new TypeAdapter<Mandate>() {
           @Override
           public void write(JsonWriter out, Mandate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Mandate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Mandate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Mandate
   * @throws IOException if the JSON string is invalid with respect to Mandate
   */
  public static Mandate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Mandate.class);
  }

  /**
   * Convert an instance of Mandate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

