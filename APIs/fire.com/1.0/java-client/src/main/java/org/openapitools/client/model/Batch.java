/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Batch
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:07.131817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Batch {
  public static final String SERIALIZED_NAME_BATCH_NAME = "batchName";
  @SerializedName(SERIALIZED_NAME_BATCH_NAME)
  private String batchName;

  public static final String SERIALIZED_NAME_BATCH_UUID = "batchUuid";
  @SerializedName(SERIALIZED_NAME_BATCH_UUID)
  private String batchUuid;

  public static final String SERIALIZED_NAME_CALLBACK_URL = "callbackUrl";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  private String callbackUrl;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_JOB_NUMBER = "jobNumber";
  @SerializedName(SERIALIZED_NAME_JOB_NUMBER)
  private String jobNumber;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_NUMBER_OF_ITEMS_FAILED = "numberOfItemsFailed";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_ITEMS_FAILED)
  private Long numberOfItemsFailed;

  public static final String SERIALIZED_NAME_NUMBER_OF_ITEMS_SUBMITTED = "numberOfItemsSubmitted";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_ITEMS_SUBMITTED)
  private Long numberOfItemsSubmitted;

  public static final String SERIALIZED_NAME_NUMBER_OF_ITEMS_SUCCEEDED = "numberOfItemsSucceeded";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_ITEMS_SUCCEEDED)
  private Long numberOfItemsSucceeded;

  public static final String SERIALIZED_NAME_SOURCE_NAME = "sourceName";
  @SerializedName(SERIALIZED_NAME_SOURCE_NAME)
  private String sourceName;

  /**
   * status of the batch object
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PENDING_APPROVAL("PENDING_APPROVAL"),
    
    REJECTED("REJECTED"),
    
    COMPLETE("COMPLETE"),
    
    OPEN("OPEN"),
    
    CANCELLED("CANCELLED"),
    
    PENDING_PARENT_BATCH_APPROVAL("PENDING_PARENT_BATCH_APPROVAL"),
    
    READY_FOR_PROCESSING("READY_FOR_PROCESSING"),
    
    PROCESSING("PROCESSING");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * The type of the batch - can be one of the listed enums
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    INTERNAL_TRANSFER("INTERNAL_TRANSFER"),
    
    BANK_TRANSFER("BANK_TRANSFER"),
    
    INTERNATIONAL_TRANSFER("INTERNATIONAL_TRANSFER"),
    
    NEW_PAYEE("NEW_PAYEE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VALUE_OF_ITEMS_FAILED = "valueOfItemsFailed";
  @SerializedName(SERIALIZED_NAME_VALUE_OF_ITEMS_FAILED)
  private Long valueOfItemsFailed;

  public static final String SERIALIZED_NAME_VALUE_OF_ITEMS_SUBMITTED = "valueOfItemsSubmitted";
  @SerializedName(SERIALIZED_NAME_VALUE_OF_ITEMS_SUBMITTED)
  private Long valueOfItemsSubmitted;

  public static final String SERIALIZED_NAME_VALUE_OF_ITEMS_SUCCEEDED = "valueOfItemsSucceeded";
  @SerializedName(SERIALIZED_NAME_VALUE_OF_ITEMS_SUCCEEDED)
  private Long valueOfItemsSucceeded;

  public Batch() {
  }

  public Batch batchName(String batchName) {
    this.batchName = batchName;
    return this;
  }

  /**
   * An optional name you give to the batch at creation time
   * @return batchName
   */
  @javax.annotation.Nullable
  public String getBatchName() {
    return batchName;
  }

  public void setBatchName(String batchName) {
    this.batchName = batchName;
  }


  public Batch batchUuid(String batchUuid) {
    this.batchUuid = batchUuid;
    return this;
  }

  /**
   * A UUID for this item.
   * @return batchUuid
   */
  @javax.annotation.Nullable
  public String getBatchUuid() {
    return batchUuid;
  }

  public void setBatchUuid(String batchUuid) {
    this.batchUuid = batchUuid;
  }


  public Batch callbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
    return this;
  }

  /**
   * An optional POST URL that all events for this batch will be sent to.
   * @return callbackUrl
   */
  @javax.annotation.Nullable
  public String getCallbackUrl() {
    return callbackUrl;
  }

  public void setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }


  public Batch currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * All payments in the batch must be the same currency.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public Batch dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Batch jobNumber(String jobNumber) {
    this.jobNumber = jobNumber;
    return this;
  }

  /**
   * An optional job number you can give to the batch to help link it to your own system.
   * @return jobNumber
   */
  @javax.annotation.Nullable
  public String getJobNumber() {
    return jobNumber;
  }

  public void setJobNumber(String jobNumber) {
    this.jobNumber = jobNumber;
  }


  public Batch lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public Batch numberOfItemsFailed(Long numberOfItemsFailed) {
    this.numberOfItemsFailed = numberOfItemsFailed;
    return this;
  }

  /**
   * Once processed, a count of the number of items that didn’t process successfully.
   * @return numberOfItemsFailed
   */
  @javax.annotation.Nullable
  public Long getNumberOfItemsFailed() {
    return numberOfItemsFailed;
  }

  public void setNumberOfItemsFailed(Long numberOfItemsFailed) {
    this.numberOfItemsFailed = numberOfItemsFailed;
  }


  public Batch numberOfItemsSubmitted(Long numberOfItemsSubmitted) {
    this.numberOfItemsSubmitted = numberOfItemsSubmitted;
    return this;
  }

  /**
   * A count of the number of items in the batch
   * @return numberOfItemsSubmitted
   */
  @javax.annotation.Nullable
  public Long getNumberOfItemsSubmitted() {
    return numberOfItemsSubmitted;
  }

  public void setNumberOfItemsSubmitted(Long numberOfItemsSubmitted) {
    this.numberOfItemsSubmitted = numberOfItemsSubmitted;
  }


  public Batch numberOfItemsSucceeded(Long numberOfItemsSucceeded) {
    this.numberOfItemsSucceeded = numberOfItemsSucceeded;
    return this;
  }

  /**
   * Once processed, a count of the number of items that processed successfully.
   * @return numberOfItemsSucceeded
   */
  @javax.annotation.Nullable
  public Long getNumberOfItemsSucceeded() {
    return numberOfItemsSucceeded;
  }

  public void setNumberOfItemsSucceeded(Long numberOfItemsSucceeded) {
    this.numberOfItemsSucceeded = numberOfItemsSucceeded;
  }


  public Batch sourceName(String sourceName) {
    this.sourceName = sourceName;
    return this;
  }

  /**
   * A string describing where the batch originated - for instance the name of the API token that was used, or showing that the batch was automatically created by fire.com (in the case of a new payee batch).
   * @return sourceName
   */
  @javax.annotation.Nullable
  public String getSourceName() {
    return sourceName;
  }

  public void setSourceName(String sourceName) {
    this.sourceName = sourceName;
  }


  public Batch status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * status of the batch object
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Batch type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the batch - can be one of the listed enums
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Batch valueOfItemsFailed(Long valueOfItemsFailed) {
    this.valueOfItemsFailed = valueOfItemsFailed;
    return this;
  }

  /**
   * Once processed, a sum of the value of items that didn’t process successfully. Specified in pence or cent.
   * @return valueOfItemsFailed
   */
  @javax.annotation.Nullable
  public Long getValueOfItemsFailed() {
    return valueOfItemsFailed;
  }

  public void setValueOfItemsFailed(Long valueOfItemsFailed) {
    this.valueOfItemsFailed = valueOfItemsFailed;
  }


  public Batch valueOfItemsSubmitted(Long valueOfItemsSubmitted) {
    this.valueOfItemsSubmitted = valueOfItemsSubmitted;
    return this;
  }

  /**
   * A sum of the value of items in the batch. Specified in pence or cent.
   * @return valueOfItemsSubmitted
   */
  @javax.annotation.Nullable
  public Long getValueOfItemsSubmitted() {
    return valueOfItemsSubmitted;
  }

  public void setValueOfItemsSubmitted(Long valueOfItemsSubmitted) {
    this.valueOfItemsSubmitted = valueOfItemsSubmitted;
  }


  public Batch valueOfItemsSucceeded(Long valueOfItemsSucceeded) {
    this.valueOfItemsSucceeded = valueOfItemsSucceeded;
    return this;
  }

  /**
   * Once processed, a sum of the value of items that processed successfully. Specified in pence or cent.
   * @return valueOfItemsSucceeded
   */
  @javax.annotation.Nullable
  public Long getValueOfItemsSucceeded() {
    return valueOfItemsSucceeded;
  }

  public void setValueOfItemsSucceeded(Long valueOfItemsSucceeded) {
    this.valueOfItemsSucceeded = valueOfItemsSucceeded;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Batch batch = (Batch) o;
    return Objects.equals(this.batchName, batch.batchName) &&
        Objects.equals(this.batchUuid, batch.batchUuid) &&
        Objects.equals(this.callbackUrl, batch.callbackUrl) &&
        Objects.equals(this.currency, batch.currency) &&
        Objects.equals(this.dateCreated, batch.dateCreated) &&
        Objects.equals(this.jobNumber, batch.jobNumber) &&
        Objects.equals(this.lastUpdated, batch.lastUpdated) &&
        Objects.equals(this.numberOfItemsFailed, batch.numberOfItemsFailed) &&
        Objects.equals(this.numberOfItemsSubmitted, batch.numberOfItemsSubmitted) &&
        Objects.equals(this.numberOfItemsSucceeded, batch.numberOfItemsSucceeded) &&
        Objects.equals(this.sourceName, batch.sourceName) &&
        Objects.equals(this.status, batch.status) &&
        Objects.equals(this.type, batch.type) &&
        Objects.equals(this.valueOfItemsFailed, batch.valueOfItemsFailed) &&
        Objects.equals(this.valueOfItemsSubmitted, batch.valueOfItemsSubmitted) &&
        Objects.equals(this.valueOfItemsSucceeded, batch.valueOfItemsSucceeded);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchName, batchUuid, callbackUrl, currency, dateCreated, jobNumber, lastUpdated, numberOfItemsFailed, numberOfItemsSubmitted, numberOfItemsSucceeded, sourceName, status, type, valueOfItemsFailed, valueOfItemsSubmitted, valueOfItemsSucceeded);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Batch {\n");
    sb.append("    batchName: ").append(toIndentedString(batchName)).append("\n");
    sb.append("    batchUuid: ").append(toIndentedString(batchUuid)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    jobNumber: ").append(toIndentedString(jobNumber)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    numberOfItemsFailed: ").append(toIndentedString(numberOfItemsFailed)).append("\n");
    sb.append("    numberOfItemsSubmitted: ").append(toIndentedString(numberOfItemsSubmitted)).append("\n");
    sb.append("    numberOfItemsSucceeded: ").append(toIndentedString(numberOfItemsSucceeded)).append("\n");
    sb.append("    sourceName: ").append(toIndentedString(sourceName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    valueOfItemsFailed: ").append(toIndentedString(valueOfItemsFailed)).append("\n");
    sb.append("    valueOfItemsSubmitted: ").append(toIndentedString(valueOfItemsSubmitted)).append("\n");
    sb.append("    valueOfItemsSucceeded: ").append(toIndentedString(valueOfItemsSucceeded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("batchName");
    openapiFields.add("batchUuid");
    openapiFields.add("callbackUrl");
    openapiFields.add("currency");
    openapiFields.add("dateCreated");
    openapiFields.add("jobNumber");
    openapiFields.add("lastUpdated");
    openapiFields.add("numberOfItemsFailed");
    openapiFields.add("numberOfItemsSubmitted");
    openapiFields.add("numberOfItemsSucceeded");
    openapiFields.add("sourceName");
    openapiFields.add("status");
    openapiFields.add("type");
    openapiFields.add("valueOfItemsFailed");
    openapiFields.add("valueOfItemsSubmitted");
    openapiFields.add("valueOfItemsSucceeded");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Batch
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Batch.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Batch is not found in the empty JSON string", Batch.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Batch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Batch` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("batchName") != null && !jsonObj.get("batchName").isJsonNull()) && !jsonObj.get("batchName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchName").toString()));
      }
      if ((jsonObj.get("batchUuid") != null && !jsonObj.get("batchUuid").isJsonNull()) && !jsonObj.get("batchUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchUuid").toString()));
      }
      if ((jsonObj.get("callbackUrl") != null && !jsonObj.get("callbackUrl").isJsonNull()) && !jsonObj.get("callbackUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callbackUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callbackUrl").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("jobNumber") != null && !jsonObj.get("jobNumber").isJsonNull()) && !jsonObj.get("jobNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobNumber").toString()));
      }
      if ((jsonObj.get("sourceName") != null && !jsonObj.get("sourceName").isJsonNull()) && !jsonObj.get("sourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceName").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Batch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Batch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Batch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Batch.class));

       return (TypeAdapter<T>) new TypeAdapter<Batch>() {
           @Override
           public void write(JsonWriter out, Batch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Batch read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Batch given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Batch
   * @throws IOException if the JSON string is invalid with respect to Batch
   */
  public static Batch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Batch.class);
  }

  /**
   * Convert an instance of Batch to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

