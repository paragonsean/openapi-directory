/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CardTransactionsv1;
import org.openapitools.client.model.Cards;
import org.openapitools.client.model.NewCard;
import org.openapitools.client.model.NewCardResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CardsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CardsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CardsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for blockCard
     * @param cardId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body is returned - “Status 204 No Content” signifies the call was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockCardCall(Long cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/block"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call blockCardValidateBeforeCall(Long cardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling blockCard(Async)");
        }

        return blockCardCall(cardId, _callback);

    }

    /**
     * Block a card
     * Updates status of an existing card to block which prevents any transactions being carried out with that card.
     * @param cardId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body is returned - “Status 204 No Content” signifies the call was successful. </td><td>  -  </td></tr>
     </table>
     */
    public void blockCard(Long cardId) throws ApiException {
        blockCardWithHttpInfo(cardId);
    }

    /**
     * Block a card
     * Updates status of an existing card to block which prevents any transactions being carried out with that card.
     * @param cardId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body is returned - “Status 204 No Content” signifies the call was successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> blockCardWithHttpInfo(Long cardId) throws ApiException {
        okhttp3.Call localVarCall = blockCardValidateBeforeCall(cardId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Block a card (asynchronously)
     * Updates status of an existing card to block which prevents any transactions being carried out with that card.
     * @param cardId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body is returned - “Status 204 No Content” signifies the call was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call blockCardAsync(Long cardId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = blockCardValidateBeforeCall(cardId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNewCard
     * @param newCard Details of the new card (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card created successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNewCardCall(NewCard newCard, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newCard;

        // create path and map variables
        String localVarPath = "/v1/cards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewCardValidateBeforeCall(NewCard newCard, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'newCard' is set
        if (newCard == null) {
            throw new ApiException("Missing the required parameter 'newCard' when calling createNewCard(Async)");
        }

        return createNewCardCall(newCard, _callback);

    }

    /**
     * Create a new debit card.
     * You can create multiple debit cards which can be linked to your fire.com accounts.
     * @param newCard Details of the new card (required)
     * @return NewCardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card created successfully </td><td>  -  </td></tr>
     </table>
     */
    public NewCardResponse createNewCard(NewCard newCard) throws ApiException {
        ApiResponse<NewCardResponse> localVarResp = createNewCardWithHttpInfo(newCard);
        return localVarResp.getData();
    }

    /**
     * Create a new debit card.
     * You can create multiple debit cards which can be linked to your fire.com accounts.
     * @param newCard Details of the new card (required)
     * @return ApiResponse&lt;NewCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card created successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NewCardResponse> createNewCardWithHttpInfo(NewCard newCard) throws ApiException {
        okhttp3.Call localVarCall = createNewCardValidateBeforeCall(newCard, null);
        Type localVarReturnType = new TypeToken<NewCardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new debit card. (asynchronously)
     * You can create multiple debit cards which can be linked to your fire.com accounts.
     * @param newCard Details of the new card (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Card created successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNewCardAsync(NewCard newCard, final ApiCallback<NewCardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewCardValidateBeforeCall(newCard, _callback);
        Type localVarReturnType = new TypeToken<NewCardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getListofCardTransactions
     * @param cardId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListofCardTransactionsCall(Long cardId, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/transactions"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListofCardTransactionsValidateBeforeCall(Long cardId, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling getListofCardTransactions(Async)");
        }

        return getListofCardTransactionsCall(cardId, limit, offset, _callback);

    }

    /**
     * List Card Transactions.
     * Returns a list of cards transactions related to your fire.com card.
     * @param cardId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @return List&lt;CardTransactionsv1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
     </table>
     */
    public List<CardTransactionsv1> getListofCardTransactions(Long cardId, Long limit, Long offset) throws ApiException {
        ApiResponse<List<CardTransactionsv1>> localVarResp = getListofCardTransactionsWithHttpInfo(cardId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * List Card Transactions.
     * Returns a list of cards transactions related to your fire.com card.
     * @param cardId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @return ApiResponse&lt;List&lt;CardTransactionsv1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CardTransactionsv1>> getListofCardTransactionsWithHttpInfo(Long cardId, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getListofCardTransactionsValidateBeforeCall(cardId, limit, offset, null);
        Type localVarReturnType = new TypeToken<List<CardTransactionsv1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Card Transactions. (asynchronously)
     * Returns a list of cards transactions related to your fire.com card.
     * @param cardId  (required)
     * @param limit  (optional)
     * @param offset  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListofCardTransactionsAsync(Long cardId, Long limit, Long offset, final ApiCallback<List<CardTransactionsv1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListofCardTransactionsValidateBeforeCall(cardId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<CardTransactionsv1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getListofCards
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListofCardsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListofCardsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getListofCardsCall(_callback);

    }

    /**
     * View List of Cards.
     * Returns a list of cards related to your fire.com account.
     * @return Cards
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
     </table>
     */
    public Cards getListofCards() throws ApiException {
        ApiResponse<Cards> localVarResp = getListofCardsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * View List of Cards.
     * Returns a list of cards related to your fire.com account.
     * @return ApiResponse&lt;Cards&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Cards> getListofCardsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getListofCardsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Cards>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View List of Cards. (asynchronously)
     * Returns a list of cards related to your fire.com account.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListofCardsAsync(final ApiCallback<Cards> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListofCardsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Cards>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unblockCard
     * @param cardId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body is returned - “Status 204 No Content” signifies the call was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unblockCardCall(Long cardId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cards/{cardId}/unblock"
            .replace("{" + "cardId" + "}", localVarApiClient.escapeString(cardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unblockCardValidateBeforeCall(Long cardId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cardId' is set
        if (cardId == null) {
            throw new ApiException("Missing the required parameter 'cardId' when calling unblockCard(Async)");
        }

        return unblockCardCall(cardId, _callback);

    }

    /**
     * Unblock a card
     * Updates status of an existing card to unblock which means that transactions can be carried out with that card.
     * @param cardId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body is returned - “Status 204 No Content” signifies the call was successful. </td><td>  -  </td></tr>
     </table>
     */
    public void unblockCard(Long cardId) throws ApiException {
        unblockCardWithHttpInfo(cardId);
    }

    /**
     * Unblock a card
     * Updates status of an existing card to unblock which means that transactions can be carried out with that card.
     * @param cardId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body is returned - “Status 204 No Content” signifies the call was successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unblockCardWithHttpInfo(Long cardId) throws ApiException {
        okhttp3.Call localVarCall = unblockCardValidateBeforeCall(cardId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unblock a card (asynchronously)
     * Updates status of an existing card to unblock which means that transactions can be carried out with that card.
     * @param cardId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body is returned - “Status 204 No Content” signifies the call was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unblockCardAsync(Long cardId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unblockCardValidateBeforeCall(cardId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
