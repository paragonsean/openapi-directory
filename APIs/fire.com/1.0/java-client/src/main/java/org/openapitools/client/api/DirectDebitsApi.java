/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DirectDebit;
import org.openapitools.client.model.DirectDebits;
import org.openapitools.client.model.Mandate;
import org.openapitools.client.model.Mandates;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DirectDebitsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DirectDebitsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DirectDebitsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activateMandate
     * @param mandateUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateMandateCall(String mandateUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/mandates/{mandateUuid}/activate"
            .replace("{" + "mandateUuid" + "}", localVarApiClient.escapeString(mandateUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateMandateValidateBeforeCall(String mandateUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mandateUuid' is set
        if (mandateUuid == null) {
            throw new ApiException("Missing the required parameter 'mandateUuid' when calling activateMandate(Async)");
        }

        return activateMandateCall(mandateUuid, _callback);

    }

    /**
     * Activate a direct debit mandate
     * This endpoint can only be used to activate a direct debit mandate when it is in the status REJECT_REQUESTED (even if the account has direct debits disabled). This action will also enable the account for direct debits if it was previously set to be disabled. The permision needed to access this endpoint is PERM_BUSINESS_POST_MANDATE_ACTIVATE 
     * @param mandateUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public void activateMandate(String mandateUuid) throws ApiException {
        activateMandateWithHttpInfo(mandateUuid);
    }

    /**
     * Activate a direct debit mandate
     * This endpoint can only be used to activate a direct debit mandate when it is in the status REJECT_REQUESTED (even if the account has direct debits disabled). This action will also enable the account for direct debits if it was previously set to be disabled. The permision needed to access this endpoint is PERM_BUSINESS_POST_MANDATE_ACTIVATE 
     * @param mandateUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> activateMandateWithHttpInfo(String mandateUuid) throws ApiException {
        okhttp3.Call localVarCall = activateMandateValidateBeforeCall(mandateUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Activate a direct debit mandate (asynchronously)
     * This endpoint can only be used to activate a direct debit mandate when it is in the status REJECT_REQUESTED (even if the account has direct debits disabled). This action will also enable the account for direct debits if it was previously set to be disabled. The permision needed to access this endpoint is PERM_BUSINESS_POST_MANDATE_ACTIVATE 
     * @param mandateUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateMandateAsync(String mandateUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateMandateValidateBeforeCall(mandateUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelMandateByUuid
     * @param mandateUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelMandateByUuidCall(String mandateUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/mandates/{mandateUuid}/cancel"
            .replace("{" + "mandateUuid" + "}", localVarApiClient.escapeString(mandateUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelMandateByUuidValidateBeforeCall(String mandateUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mandateUuid' is set
        if (mandateUuid == null) {
            throw new ApiException("Missing the required parameter 'mandateUuid' when calling cancelMandateByUuid(Async)");
        }

        return cancelMandateByUuidCall(mandateUuid, _callback);

    }

    /**
     * Cancel a direct debit mandate
     * This endpoint allows you to cancel a direct debit mandate. The permision needed to access this endpoint is PERM_BUSINESS_POST_MANDATE_CANCEL 
     * @param mandateUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public void cancelMandateByUuid(String mandateUuid) throws ApiException {
        cancelMandateByUuidWithHttpInfo(mandateUuid);
    }

    /**
     * Cancel a direct debit mandate
     * This endpoint allows you to cancel a direct debit mandate. The permision needed to access this endpoint is PERM_BUSINESS_POST_MANDATE_CANCEL 
     * @param mandateUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelMandateByUuidWithHttpInfo(String mandateUuid) throws ApiException {
        okhttp3.Call localVarCall = cancelMandateByUuidValidateBeforeCall(mandateUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel a direct debit mandate (asynchronously)
     * This endpoint allows you to cancel a direct debit mandate. The permision needed to access this endpoint is PERM_BUSINESS_POST_MANDATE_CANCEL 
     * @param mandateUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelMandateByUuidAsync(String mandateUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelMandateByUuidValidateBeforeCall(mandateUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDirectDebitByUuid
     * @param directDebitUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all details of a single direct debit collection/payment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDirectDebitByUuidCall(String directDebitUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/directdebits/{directDebitUuid}"
            .replace("{" + "directDebitUuid" + "}", localVarApiClient.escapeString(directDebitUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDirectDebitByUuidValidateBeforeCall(String directDebitUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directDebitUuid' is set
        if (directDebitUuid == null) {
            throw new ApiException("Missing the required parameter 'directDebitUuid' when calling getDirectDebitByUuid(Async)");
        }

        return getDirectDebitByUuidCall(directDebitUuid, _callback);

    }

    /**
     * Get the details of a direct debit
     * Retrieve all details of a single direct debit collection/payment, whether successful or not. The permision needed to access this endpoint is **PERM_BUSINESS_GET_DIRECT_DEBIT** 
     * @param directDebitUuid  (required)
     * @return DirectDebit
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all details of a single direct debit collection/payment </td><td>  -  </td></tr>
     </table>
     */
    public DirectDebit getDirectDebitByUuid(String directDebitUuid) throws ApiException {
        ApiResponse<DirectDebit> localVarResp = getDirectDebitByUuidWithHttpInfo(directDebitUuid);
        return localVarResp.getData();
    }

    /**
     * Get the details of a direct debit
     * Retrieve all details of a single direct debit collection/payment, whether successful or not. The permision needed to access this endpoint is **PERM_BUSINESS_GET_DIRECT_DEBIT** 
     * @param directDebitUuid  (required)
     * @return ApiResponse&lt;DirectDebit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all details of a single direct debit collection/payment </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DirectDebit> getDirectDebitByUuidWithHttpInfo(String directDebitUuid) throws ApiException {
        okhttp3.Call localVarCall = getDirectDebitByUuidValidateBeforeCall(directDebitUuid, null);
        Type localVarReturnType = new TypeToken<DirectDebit>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of a direct debit (asynchronously)
     * Retrieve all details of a single direct debit collection/payment, whether successful or not. The permision needed to access this endpoint is **PERM_BUSINESS_GET_DIRECT_DEBIT** 
     * @param directDebitUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all details of a single direct debit collection/payment </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDirectDebitByUuidAsync(String directDebitUuid, final ApiCallback<DirectDebit> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDirectDebitByUuidValidateBeforeCall(directDebitUuid, _callback);
        Type localVarReturnType = new TypeToken<DirectDebit>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDirectDebitMandates
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all direct debit mandates. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDirectDebitMandatesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/mandates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDirectDebitMandatesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDirectDebitMandatesCall(_callback);

    }

    /**
     * List all direct debit mandates
     * The permision needed to access this endpoint is PERM_BUSINESS_GET_MANDATES 
     * @return Mandates
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all direct debit mandates. </td><td>  -  </td></tr>
     </table>
     */
    public Mandates getDirectDebitMandates() throws ApiException {
        ApiResponse<Mandates> localVarResp = getDirectDebitMandatesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all direct debit mandates
     * The permision needed to access this endpoint is PERM_BUSINESS_GET_MANDATES 
     * @return ApiResponse&lt;Mandates&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all direct debit mandates. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Mandates> getDirectDebitMandatesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDirectDebitMandatesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Mandates>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all direct debit mandates (asynchronously)
     * The permision needed to access this endpoint is PERM_BUSINESS_GET_MANDATES 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all direct debit mandates. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDirectDebitMandatesAsync(final ApiCallback<Mandates> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDirectDebitMandatesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Mandates>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDirectDebitsForMandateUuid
     * @param mandateUuid The mandate UUID to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all direct debit payments associated with a direct debit mandate. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDirectDebitsForMandateUuidCall(String mandateUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/directdebits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mandateUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mandateUuid", mandateUuid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDirectDebitsForMandateUuidValidateBeforeCall(String mandateUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mandateUuid' is set
        if (mandateUuid == null) {
            throw new ApiException("Missing the required parameter 'mandateUuid' when calling getDirectDebitsForMandateUuid(Async)");
        }

        return getDirectDebitsForMandateUuidCall(mandateUuid, _callback);

    }

    /**
     * Get all DD payments associated with a direct debit mandate
     * Retrieve all direct debit payments associated with a direct debit mandate. The permision needed to access this endpoint is PERM_BUSINESS_GET_DIRECT_DEBITS 
     * @param mandateUuid The mandate UUID to retrieve (required)
     * @return DirectDebits
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all direct debit payments associated with a direct debit mandate. </td><td>  -  </td></tr>
     </table>
     */
    public DirectDebits getDirectDebitsForMandateUuid(String mandateUuid) throws ApiException {
        ApiResponse<DirectDebits> localVarResp = getDirectDebitsForMandateUuidWithHttpInfo(mandateUuid);
        return localVarResp.getData();
    }

    /**
     * Get all DD payments associated with a direct debit mandate
     * Retrieve all direct debit payments associated with a direct debit mandate. The permision needed to access this endpoint is PERM_BUSINESS_GET_DIRECT_DEBITS 
     * @param mandateUuid The mandate UUID to retrieve (required)
     * @return ApiResponse&lt;DirectDebits&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all direct debit payments associated with a direct debit mandate. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DirectDebits> getDirectDebitsForMandateUuidWithHttpInfo(String mandateUuid) throws ApiException {
        okhttp3.Call localVarCall = getDirectDebitsForMandateUuidValidateBeforeCall(mandateUuid, null);
        Type localVarReturnType = new TypeToken<DirectDebits>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all DD payments associated with a direct debit mandate (asynchronously)
     * Retrieve all direct debit payments associated with a direct debit mandate. The permision needed to access this endpoint is PERM_BUSINESS_GET_DIRECT_DEBITS 
     * @param mandateUuid The mandate UUID to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all direct debit payments associated with a direct debit mandate. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDirectDebitsForMandateUuidAsync(String mandateUuid, final ApiCallback<DirectDebits> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDirectDebitsForMandateUuidValidateBeforeCall(mandateUuid, _callback);
        Type localVarReturnType = new TypeToken<DirectDebits>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMandate
     * @param mandateUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all details for a direct debit mandate. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMandateCall(String mandateUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/mandates/{mandateUuid}"
            .replace("{" + "mandateUuid" + "}", localVarApiClient.escapeString(mandateUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMandateValidateBeforeCall(String mandateUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mandateUuid' is set
        if (mandateUuid == null) {
            throw new ApiException("Missing the required parameter 'mandateUuid' when calling getMandate(Async)");
        }

        return getMandateCall(mandateUuid, _callback);

    }

    /**
     * Get direct debit mandate details
     * Retrieve all details for a direct debit mandate. The permision needed to access this endpoint is PERM_BUSINESS_GET_MANDATE 
     * @param mandateUuid  (required)
     * @return Mandate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all details for a direct debit mandate. </td><td>  -  </td></tr>
     </table>
     */
    public Mandate getMandate(String mandateUuid) throws ApiException {
        ApiResponse<Mandate> localVarResp = getMandateWithHttpInfo(mandateUuid);
        return localVarResp.getData();
    }

    /**
     * Get direct debit mandate details
     * Retrieve all details for a direct debit mandate. The permision needed to access this endpoint is PERM_BUSINESS_GET_MANDATE 
     * @param mandateUuid  (required)
     * @return ApiResponse&lt;Mandate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all details for a direct debit mandate. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Mandate> getMandateWithHttpInfo(String mandateUuid) throws ApiException {
        okhttp3.Call localVarCall = getMandateValidateBeforeCall(mandateUuid, null);
        Type localVarReturnType = new TypeToken<Mandate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get direct debit mandate details (asynchronously)
     * Retrieve all details for a direct debit mandate. The permision needed to access this endpoint is PERM_BUSINESS_GET_MANDATE 
     * @param mandateUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve all details for a direct debit mandate. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMandateAsync(String mandateUuid, final ApiCallback<Mandate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMandateValidateBeforeCall(mandateUuid, _callback);
        Type localVarReturnType = new TypeToken<Mandate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rejectDirectDebit
     * @param directDebitUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectDirectDebitCall(String directDebitUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/directdebits/{directDebitUuid}/reject"
            .replace("{" + "directDebitUuid" + "}", localVarApiClient.escapeString(directDebitUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejectDirectDebitValidateBeforeCall(String directDebitUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'directDebitUuid' is set
        if (directDebitUuid == null) {
            throw new ApiException("Missing the required parameter 'directDebitUuid' when calling rejectDirectDebit(Async)");
        }

        return rejectDirectDebitCall(directDebitUuid, _callback);

    }

    /**
     * Reject a direct debit payment
     * This endpoint allows you to reject a direct debit payment where the status is still set to RECEIVED. Permission name PERM_BUSINESS_POST_DIRECT_DEBIT_REJECT 
     * @param directDebitUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public void rejectDirectDebit(String directDebitUuid) throws ApiException {
        rejectDirectDebitWithHttpInfo(directDebitUuid);
    }

    /**
     * Reject a direct debit payment
     * This endpoint allows you to reject a direct debit payment where the status is still set to RECEIVED. Permission name PERM_BUSINESS_POST_DIRECT_DEBIT_REJECT 
     * @param directDebitUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> rejectDirectDebitWithHttpInfo(String directDebitUuid) throws ApiException {
        okhttp3.Call localVarCall = rejectDirectDebitValidateBeforeCall(directDebitUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reject a direct debit payment (asynchronously)
     * This endpoint allows you to reject a direct debit payment where the status is still set to RECEIVED. Permission name PERM_BUSINESS_POST_DIRECT_DEBIT_REJECT 
     * @param directDebitUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejectDirectDebitAsync(String directDebitUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejectDirectDebitValidateBeforeCall(directDebitUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMandateAlias
     * @param mandateUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMandateAliasCall(String mandateUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/mandates/{mandateUuid}"
            .replace("{" + "mandateUuid" + "}", localVarApiClient.escapeString(mandateUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMandateAliasValidateBeforeCall(String mandateUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mandateUuid' is set
        if (mandateUuid == null) {
            throw new ApiException("Missing the required parameter 'mandateUuid' when calling updateMandateAlias(Async)");
        }

        return updateMandateAliasCall(mandateUuid, _callback);

    }

    /**
     * Update a direct debit mandate alias
     * Update Direct Debit Mandate Alias The permision needed to access this endpoint is PERM_BUSINESS_PUT_MANDATE 
     * @param mandateUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public void updateMandateAlias(String mandateUuid) throws ApiException {
        updateMandateAliasWithHttpInfo(mandateUuid);
    }

    /**
     * Update a direct debit mandate alias
     * Update Direct Debit Mandate Alias The permision needed to access this endpoint is PERM_BUSINESS_PUT_MANDATE 
     * @param mandateUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateMandateAliasWithHttpInfo(String mandateUuid) throws ApiException {
        okhttp3.Call localVarCall = updateMandateAliasValidateBeforeCall(mandateUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update a direct debit mandate alias (asynchronously)
     * Update Direct Debit Mandate Alias The permision needed to access this endpoint is PERM_BUSINESS_PUT_MANDATE 
     * @param mandateUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> 204 no content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMandateAliasAsync(String mandateUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMandateAliasValidateBeforeCall(mandateUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
