/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Account;
import org.openapitools.client.model.Accounts;
import org.openapitools.client.model.NewAccount;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addAccount
     * @param newAccount Details of the new account (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The details of the new account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccountCall(NewAccount newAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newAccount;

        // create path and map variables
        String localVarPath = "/v1/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAccountValidateBeforeCall(NewAccount newAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'newAccount' is set
        if (newAccount == null) {
            throw new ApiException("Missing the required parameter 'newAccount' when calling addAccount(Async)");
        }

        return addAccountCall(newAccount, _callback);

    }

    /**
     * Add a new account
     * Creates a new fire.com account.  **Please note there is a charge associated with creating a new account.** 
     * @param newAccount Details of the new account (required)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The details of the new account </td><td>  -  </td></tr>
     </table>
     */
    public Account addAccount(NewAccount newAccount) throws ApiException {
        ApiResponse<Account> localVarResp = addAccountWithHttpInfo(newAccount);
        return localVarResp.getData();
    }

    /**
     * Add a new account
     * Creates a new fire.com account.  **Please note there is a charge associated with creating a new account.** 
     * @param newAccount Details of the new account (required)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The details of the new account </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> addAccountWithHttpInfo(NewAccount newAccount) throws ApiException {
        okhttp3.Call localVarCall = addAccountValidateBeforeCall(newAccount, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a new account (asynchronously)
     * Creates a new fire.com account.  **Please note there is a charge associated with creating a new account.** 
     * @param newAccount Details of the new account (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The details of the new account </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccountAsync(NewAccount newAccount, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAccountValidateBeforeCall(newAccount, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountById
     * @param ican  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of account objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountByIdCall(Long ican, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/accounts/{ican}"
            .replace("{" + "ican" + "}", localVarApiClient.escapeString(ican.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountByIdValidateBeforeCall(Long ican, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ican' is set
        if (ican == null) {
            throw new ApiException("Missing the required parameter 'ican' when calling getAccountById(Async)");
        }

        return getAccountByIdCall(ican, _callback);

    }

    /**
     * Retrieve the details of a fire.com Account
     * You can retrieve the details of a fire.com Account by its &#x60;ican&#x60;.
     * @param ican  (required)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of account objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
     </table>
     */
    public Account getAccountById(Long ican) throws ApiException {
        ApiResponse<Account> localVarResp = getAccountByIdWithHttpInfo(ican);
        return localVarResp.getData();
    }

    /**
     * Retrieve the details of a fire.com Account
     * You can retrieve the details of a fire.com Account by its &#x60;ican&#x60;.
     * @param ican  (required)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of account objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> getAccountByIdWithHttpInfo(Long ican) throws ApiException {
        okhttp3.Call localVarCall = getAccountByIdValidateBeforeCall(ican, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the details of a fire.com Account (asynchronously)
     * You can retrieve the details of a fire.com Account by its &#x60;ican&#x60;.
     * @param ican  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of account objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountByIdAsync(Long ican, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountByIdValidateBeforeCall(ican, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccounts
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of account objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAccountsCall(_callback);

    }

    /**
     * List all fire.com Accounts
     * Returns all your fire.com Accounts. Ordered by Alias ascending. Can be paginated.
     * @return Accounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of account objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
     </table>
     */
    public Accounts getAccounts() throws ApiException {
        ApiResponse<Accounts> localVarResp = getAccountsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List all fire.com Accounts
     * Returns all your fire.com Accounts. Ordered by Alias ascending. Can be paginated.
     * @return ApiResponse&lt;Accounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of account objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Accounts> getAccountsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAccountsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all fire.com Accounts (asynchronously)
     * Returns all your fire.com Accounts. Ordered by Alias ascending. Can be paginated.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of account objects. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Access Token is Invalid or missing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountsAsync(final ApiCallback<Accounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
