/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MobileApplication
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:07.131817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MobileApplication {
  /**
   * Operating system of device.
   */
  @JsonAdapter(OSEnum.Adapter.class)
  public enum OSEnum {
    ANDROID("Android"),
    
    IOS("IOS"),
    
    OTHER("OTHER");

    private String value;

    OSEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OSEnum fromValue(String value) {
      for (OSEnum b : OSEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OSEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OSEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OSEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OSEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OSEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_O_S = "OS";
  @SerializedName(SERIALIZED_NAME_O_S)
  private OSEnum OS;

  public static final String SERIALIZED_NAME_BUSINESS_USER_ID = "businessUserId";
  @SerializedName(SERIALIZED_NAME_BUSINESS_USER_ID)
  private Long businessUserId;

  public static final String SERIALIZED_NAME_CLIENT_I_D = "clientID";
  @SerializedName(SERIALIZED_NAME_CLIENT_I_D)
  private String clientID;

  /**
   * type of device.
   */
  @JsonAdapter(DeviceNameEnum.Adapter.class)
  public enum DeviceNameEnum {
    I_PHONE("iPhone"),
    
    ANDROID("Android"),
    
    OTHER("Other");

    private String value;

    DeviceNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeviceNameEnum fromValue(String value) {
      for (DeviceNameEnum b : DeviceNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeviceNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeviceNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeviceNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeviceNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeviceNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEVICE_NAME = "deviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private DeviceNameEnum deviceName;

  public static final String SERIALIZED_NAME_DEVICE_O_S_VERSION = "deviceOSVersion";
  @SerializedName(SERIALIZED_NAME_DEVICE_O_S_VERSION)
  private String deviceOSVersion;

  public static final String SERIALIZED_NAME_MOBILE_APPLICATION_ID = "mobileApplicationId";
  @SerializedName(SERIALIZED_NAME_MOBILE_APPLICATION_ID)
  private Long mobileApplicationId;

  /**
   * Status of user
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    LIVE("LIVE"),
    
    CLOSED("CLOSED"),
    
    LOCKED("LOCKED"),
    
    SMS_SENT("SMS_SENT");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public MobileApplication() {
  }

  public MobileApplication OS(OSEnum OS) {
    this.OS = OS;
    return this;
  }

  /**
   * Operating system of device.
   * @return OS
   */
  @javax.annotation.Nullable
  public OSEnum getOS() {
    return OS;
  }

  public void setOS(OSEnum OS) {
    this.OS = OS;
  }


  public MobileApplication businessUserId(Long businessUserId) {
    this.businessUserId = businessUserId;
    return this;
  }

  /**
   * Business user ID
   * @return businessUserId
   */
  @javax.annotation.Nullable
  public Long getBusinessUserId() {
    return businessUserId;
  }

  public void setBusinessUserId(Long businessUserId) {
    this.businessUserId = businessUserId;
  }


  public MobileApplication clientID(String clientID) {
    this.clientID = clientID;
    return this;
  }

  /**
   * Client ID of user.
   * @return clientID
   */
  @javax.annotation.Nullable
  public String getClientID() {
    return clientID;
  }

  public void setClientID(String clientID) {
    this.clientID = clientID;
  }


  public MobileApplication deviceName(DeviceNameEnum deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * type of device.
   * @return deviceName
   */
  @javax.annotation.Nullable
  public DeviceNameEnum getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(DeviceNameEnum deviceName) {
    this.deviceName = deviceName;
  }


  public MobileApplication deviceOSVersion(String deviceOSVersion) {
    this.deviceOSVersion = deviceOSVersion;
    return this;
  }

  /**
   * OS version for device.
   * @return deviceOSVersion
   */
  @javax.annotation.Nullable
  public String getDeviceOSVersion() {
    return deviceOSVersion;
  }

  public void setDeviceOSVersion(String deviceOSVersion) {
    this.deviceOSVersion = deviceOSVersion;
  }


  public MobileApplication mobileApplicationId(Long mobileApplicationId) {
    this.mobileApplicationId = mobileApplicationId;
    return this;
  }

  /**
   * Mobile application id for user.
   * @return mobileApplicationId
   */
  @javax.annotation.Nullable
  public Long getMobileApplicationId() {
    return mobileApplicationId;
  }

  public void setMobileApplicationId(Long mobileApplicationId) {
    this.mobileApplicationId = mobileApplicationId;
  }


  public MobileApplication status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of user
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MobileApplication mobileApplication = (MobileApplication) o;
    return Objects.equals(this.OS, mobileApplication.OS) &&
        Objects.equals(this.businessUserId, mobileApplication.businessUserId) &&
        Objects.equals(this.clientID, mobileApplication.clientID) &&
        Objects.equals(this.deviceName, mobileApplication.deviceName) &&
        Objects.equals(this.deviceOSVersion, mobileApplication.deviceOSVersion) &&
        Objects.equals(this.mobileApplicationId, mobileApplication.mobileApplicationId) &&
        Objects.equals(this.status, mobileApplication.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(OS, businessUserId, clientID, deviceName, deviceOSVersion, mobileApplicationId, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MobileApplication {\n");
    sb.append("    OS: ").append(toIndentedString(OS)).append("\n");
    sb.append("    businessUserId: ").append(toIndentedString(businessUserId)).append("\n");
    sb.append("    clientID: ").append(toIndentedString(clientID)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    deviceOSVersion: ").append(toIndentedString(deviceOSVersion)).append("\n");
    sb.append("    mobileApplicationId: ").append(toIndentedString(mobileApplicationId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OS");
    openapiFields.add("businessUserId");
    openapiFields.add("clientID");
    openapiFields.add("deviceName");
    openapiFields.add("deviceOSVersion");
    openapiFields.add("mobileApplicationId");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MobileApplication
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MobileApplication.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MobileApplication is not found in the empty JSON string", MobileApplication.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MobileApplication.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MobileApplication` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("OS") != null && !jsonObj.get("OS").isJsonNull()) && !jsonObj.get("OS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OS").toString()));
      }
      // validate the optional field `OS`
      if (jsonObj.get("OS") != null && !jsonObj.get("OS").isJsonNull()) {
        OSEnum.validateJsonElement(jsonObj.get("OS"));
      }
      if ((jsonObj.get("clientID") != null && !jsonObj.get("clientID").isJsonNull()) && !jsonObj.get("clientID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientID").toString()));
      }
      if ((jsonObj.get("deviceName") != null && !jsonObj.get("deviceName").isJsonNull()) && !jsonObj.get("deviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceName").toString()));
      }
      // validate the optional field `deviceName`
      if (jsonObj.get("deviceName") != null && !jsonObj.get("deviceName").isJsonNull()) {
        DeviceNameEnum.validateJsonElement(jsonObj.get("deviceName"));
      }
      if ((jsonObj.get("deviceOSVersion") != null && !jsonObj.get("deviceOSVersion").isJsonNull()) && !jsonObj.get("deviceOSVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceOSVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceOSVersion").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MobileApplication.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MobileApplication' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MobileApplication> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MobileApplication.class));

       return (TypeAdapter<T>) new TypeAdapter<MobileApplication>() {
           @Override
           public void write(JsonWriter out, MobileApplication value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MobileApplication read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MobileApplication given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MobileApplication
   * @throws IOException if the JSON string is invalid with respect to MobileApplication
   */
  public static MobileApplication fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MobileApplication.class);
  }

  /**
   * Convert an instance of MobileApplication to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

