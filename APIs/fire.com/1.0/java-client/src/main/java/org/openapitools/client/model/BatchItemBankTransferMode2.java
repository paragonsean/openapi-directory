/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BatchItemBankTransferMode2
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:07.131817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchItemBankTransferMode2 {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Long amount;

  public static final String SERIALIZED_NAME_DEST_ACCOUNT_HOLDER_NAME = "destAccountHolderName";
  @SerializedName(SERIALIZED_NAME_DEST_ACCOUNT_HOLDER_NAME)
  private String destAccountHolderName;

  public static final String SERIALIZED_NAME_DEST_ACCOUNT_NUMBER = "destAccountNumber";
  @SerializedName(SERIALIZED_NAME_DEST_ACCOUNT_NUMBER)
  private String destAccountNumber;

  public static final String SERIALIZED_NAME_DEST_IBAN = "destIban";
  @SerializedName(SERIALIZED_NAME_DEST_IBAN)
  private String destIban;

  public static final String SERIALIZED_NAME_DEST_NSC = "destNsc";
  @SerializedName(SERIALIZED_NAME_DEST_NSC)
  private String destNsc;

  public static final String SERIALIZED_NAME_ICAN_FROM = "icanFrom";
  @SerializedName(SERIALIZED_NAME_ICAN_FROM)
  private Long icanFrom;

  public static final String SERIALIZED_NAME_MY_REF = "myRef";
  @SerializedName(SERIALIZED_NAME_MY_REF)
  private String myRef;

  /**
   * Use ACCOUNT_DETAILS if you are providing account numbers/sort codes/IBANs (Mode 2). Specify the account details in the destIban, destAccountHolderName, destNsc or destAccountNumber fields as appropriate.
   */
  @JsonAdapter(PayeeTypeEnum.Adapter.class)
  public enum PayeeTypeEnum {
    ACCOUNT_DETAILS("ACCOUNT_DETAILS");

    private String value;

    PayeeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PayeeTypeEnum fromValue(String value) {
      for (PayeeTypeEnum b : PayeeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PayeeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PayeeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PayeeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PayeeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PayeeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYEE_TYPE = "payeeType";
  @SerializedName(SERIALIZED_NAME_PAYEE_TYPE)
  private PayeeTypeEnum payeeType;

  public static final String SERIALIZED_NAME_YOUR_REF = "yourRef";
  @SerializedName(SERIALIZED_NAME_YOUR_REF)
  private String yourRef;

  public BatchItemBankTransferMode2() {
  }

  public BatchItemBankTransferMode2 amount(Long amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The value of the transaction
   * @return amount
   */
  @javax.annotation.Nullable
  public Long getAmount() {
    return amount;
  }

  public void setAmount(Long amount) {
    this.amount = amount;
  }


  public BatchItemBankTransferMode2 destAccountHolderName(String destAccountHolderName) {
    this.destAccountHolderName = destAccountHolderName;
    return this;
  }

  /**
   * The destination account holder name
   * @return destAccountHolderName
   */
  @javax.annotation.Nullable
  public String getDestAccountHolderName() {
    return destAccountHolderName;
  }

  public void setDestAccountHolderName(String destAccountHolderName) {
    this.destAccountHolderName = destAccountHolderName;
  }


  public BatchItemBankTransferMode2 destAccountNumber(String destAccountNumber) {
    this.destAccountNumber = destAccountNumber;
    return this;
  }

  /**
   * The destination Account Number if a GBP bank transfer
   * @return destAccountNumber
   */
  @javax.annotation.Nullable
  public String getDestAccountNumber() {
    return destAccountNumber;
  }

  public void setDestAccountNumber(String destAccountNumber) {
    this.destAccountNumber = destAccountNumber;
  }


  public BatchItemBankTransferMode2 destIban(String destIban) {
    this.destIban = destIban;
    return this;
  }

  /**
   * The destination IBAN if a Euro Bank transfer
   * @return destIban
   */
  @javax.annotation.Nullable
  public String getDestIban() {
    return destIban;
  }

  public void setDestIban(String destIban) {
    this.destIban = destIban;
  }


  public BatchItemBankTransferMode2 destNsc(String destNsc) {
    this.destNsc = destNsc;
    return this;
  }

  /**
   * The destination Nsc if a GBP bank transfer
   * @return destNsc
   */
  @javax.annotation.Nullable
  public String getDestNsc() {
    return destNsc;
  }

  public void setDestNsc(String destNsc) {
    this.destNsc = destNsc;
  }


  public BatchItemBankTransferMode2 icanFrom(Long icanFrom) {
    this.icanFrom = icanFrom;
    return this;
  }

  /**
   * The Fire account ID for the fire.com account the funds are taken from.
   * @return icanFrom
   */
  @javax.annotation.Nullable
  public Long getIcanFrom() {
    return icanFrom;
  }

  public void setIcanFrom(Long icanFrom) {
    this.icanFrom = icanFrom;
  }


  public BatchItemBankTransferMode2 myRef(String myRef) {
    this.myRef = myRef;
    return this;
  }

  /**
   * The reference on the transaction for your records - not shown to the beneficiary.
   * @return myRef
   */
  @javax.annotation.Nullable
  public String getMyRef() {
    return myRef;
  }

  public void setMyRef(String myRef) {
    this.myRef = myRef;
  }


  public BatchItemBankTransferMode2 payeeType(PayeeTypeEnum payeeType) {
    this.payeeType = payeeType;
    return this;
  }

  /**
   * Use ACCOUNT_DETAILS if you are providing account numbers/sort codes/IBANs (Mode 2). Specify the account details in the destIban, destAccountHolderName, destNsc or destAccountNumber fields as appropriate.
   * @return payeeType
   */
  @javax.annotation.Nullable
  public PayeeTypeEnum getPayeeType() {
    return payeeType;
  }

  public void setPayeeType(PayeeTypeEnum payeeType) {
    this.payeeType = payeeType;
  }


  public BatchItemBankTransferMode2 yourRef(String yourRef) {
    this.yourRef = yourRef;
    return this;
  }

  /**
   * The reference on the transaction - displayed on the beneficiary bank statement.
   * @return yourRef
   */
  @javax.annotation.Nullable
  public String getYourRef() {
    return yourRef;
  }

  public void setYourRef(String yourRef) {
    this.yourRef = yourRef;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchItemBankTransferMode2 batchItemBankTransferMode2 = (BatchItemBankTransferMode2) o;
    return Objects.equals(this.amount, batchItemBankTransferMode2.amount) &&
        Objects.equals(this.destAccountHolderName, batchItemBankTransferMode2.destAccountHolderName) &&
        Objects.equals(this.destAccountNumber, batchItemBankTransferMode2.destAccountNumber) &&
        Objects.equals(this.destIban, batchItemBankTransferMode2.destIban) &&
        Objects.equals(this.destNsc, batchItemBankTransferMode2.destNsc) &&
        Objects.equals(this.icanFrom, batchItemBankTransferMode2.icanFrom) &&
        Objects.equals(this.myRef, batchItemBankTransferMode2.myRef) &&
        Objects.equals(this.payeeType, batchItemBankTransferMode2.payeeType) &&
        Objects.equals(this.yourRef, batchItemBankTransferMode2.yourRef);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, destAccountHolderName, destAccountNumber, destIban, destNsc, icanFrom, myRef, payeeType, yourRef);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchItemBankTransferMode2 {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    destAccountHolderName: ").append(toIndentedString(destAccountHolderName)).append("\n");
    sb.append("    destAccountNumber: ").append(toIndentedString(destAccountNumber)).append("\n");
    sb.append("    destIban: ").append(toIndentedString(destIban)).append("\n");
    sb.append("    destNsc: ").append(toIndentedString(destNsc)).append("\n");
    sb.append("    icanFrom: ").append(toIndentedString(icanFrom)).append("\n");
    sb.append("    myRef: ").append(toIndentedString(myRef)).append("\n");
    sb.append("    payeeType: ").append(toIndentedString(payeeType)).append("\n");
    sb.append("    yourRef: ").append(toIndentedString(yourRef)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("destAccountHolderName");
    openapiFields.add("destAccountNumber");
    openapiFields.add("destIban");
    openapiFields.add("destNsc");
    openapiFields.add("icanFrom");
    openapiFields.add("myRef");
    openapiFields.add("payeeType");
    openapiFields.add("yourRef");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchItemBankTransferMode2
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchItemBankTransferMode2.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchItemBankTransferMode2 is not found in the empty JSON string", BatchItemBankTransferMode2.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchItemBankTransferMode2.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchItemBankTransferMode2` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("destAccountHolderName") != null && !jsonObj.get("destAccountHolderName").isJsonNull()) && !jsonObj.get("destAccountHolderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destAccountHolderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destAccountHolderName").toString()));
      }
      if ((jsonObj.get("destAccountNumber") != null && !jsonObj.get("destAccountNumber").isJsonNull()) && !jsonObj.get("destAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destAccountNumber").toString()));
      }
      if ((jsonObj.get("destIban") != null && !jsonObj.get("destIban").isJsonNull()) && !jsonObj.get("destIban").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destIban` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destIban").toString()));
      }
      if ((jsonObj.get("destNsc") != null && !jsonObj.get("destNsc").isJsonNull()) && !jsonObj.get("destNsc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destNsc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destNsc").toString()));
      }
      if ((jsonObj.get("myRef") != null && !jsonObj.get("myRef").isJsonNull()) && !jsonObj.get("myRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `myRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("myRef").toString()));
      }
      if ((jsonObj.get("payeeType") != null && !jsonObj.get("payeeType").isJsonNull()) && !jsonObj.get("payeeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payeeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payeeType").toString()));
      }
      // validate the optional field `payeeType`
      if (jsonObj.get("payeeType") != null && !jsonObj.get("payeeType").isJsonNull()) {
        PayeeTypeEnum.validateJsonElement(jsonObj.get("payeeType"));
      }
      if ((jsonObj.get("yourRef") != null && !jsonObj.get("yourRef").isJsonNull()) && !jsonObj.get("yourRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yourRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yourRef").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchItemBankTransferMode2.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchItemBankTransferMode2' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchItemBankTransferMode2> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchItemBankTransferMode2.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchItemBankTransferMode2>() {
           @Override
           public void write(JsonWriter out, BatchItemBankTransferMode2 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchItemBankTransferMode2 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchItemBankTransferMode2 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchItemBankTransferMode2
   * @throws IOException if the JSON string is invalid with respect to BatchItemBankTransferMode2
   */
  public static BatchItemBankTransferMode2 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchItemBankTransferMode2.class);
  }

  /**
   * Convert an instance of BatchItemBankTransferMode2 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

