/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details of the direct debit (if applicable)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:07.131817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DirectDebitDetails {
  public static final String SERIALIZED_NAME_DIRECT_DEBIT_REFERENCE = "directDebitReference";
  @SerializedName(SERIALIZED_NAME_DIRECT_DEBIT_REFERENCE)
  private String directDebitReference;

  public static final String SERIALIZED_NAME_DIRECT_DEBIT_UUID = "directDebitUuid";
  @SerializedName(SERIALIZED_NAME_DIRECT_DEBIT_UUID)
  private String directDebitUuid;

  public static final String SERIALIZED_NAME_MANDATE_REFERENCE = "mandateReference";
  @SerializedName(SERIALIZED_NAME_MANDATE_REFERENCE)
  private String mandateReference;

  public static final String SERIALIZED_NAME_MANDATE_U_UID = "mandateUUid";
  @SerializedName(SERIALIZED_NAME_MANDATE_U_UID)
  private String mandateUUid;

  public static final String SERIALIZED_NAME_MANDATE_UUID = "mandateUuid";
  @SerializedName(SERIALIZED_NAME_MANDATE_UUID)
  private String mandateUuid;

  public static final String SERIALIZED_NAME_ORIGINATOR_ALIAS = "originatorAlias";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_ALIAS)
  private String originatorAlias;

  public static final String SERIALIZED_NAME_ORIGINATOR_LOGO_URL_LARGE = "originatorLogoUrlLarge";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_LOGO_URL_LARGE)
  private String originatorLogoUrlLarge;

  public static final String SERIALIZED_NAME_ORIGINATOR_LOGO_URL_SMALL = "originatorLogoUrlSmall";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_LOGO_URL_SMALL)
  private String originatorLogoUrlSmall;

  public static final String SERIALIZED_NAME_ORIGINATOR_NAME = "originatorName";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_NAME)
  private String originatorName;

  public static final String SERIALIZED_NAME_ORIGINATOR_REFERENCE = "originatorReference";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_REFERENCE)
  private String originatorReference;

  public DirectDebitDetails() {
  }

  public DirectDebitDetails directDebitReference(String directDebitReference) {
    this.directDebitReference = directDebitReference;
    return this;
  }

  /**
   * The direct debit reference.
   * @return directDebitReference
   */
  @javax.annotation.Nullable
  public String getDirectDebitReference() {
    return directDebitReference;
  }

  public void setDirectDebitReference(String directDebitReference) {
    this.directDebitReference = directDebitReference;
  }


  public DirectDebitDetails directDebitUuid(String directDebitUuid) {
    this.directDebitUuid = directDebitUuid;
    return this;
  }

  /**
   * The UUID for the direct debit payment
   * @return directDebitUuid
   */
  @javax.annotation.Nullable
  public String getDirectDebitUuid() {
    return directDebitUuid;
  }

  public void setDirectDebitUuid(String directDebitUuid) {
    this.directDebitUuid = directDebitUuid;
  }


  public DirectDebitDetails mandateReference(String mandateReference) {
    this.mandateReference = mandateReference;
    return this;
  }

  /**
   * the reference of the mandate
   * @return mandateReference
   */
  @javax.annotation.Nullable
  public String getMandateReference() {
    return mandateReference;
  }

  public void setMandateReference(String mandateReference) {
    this.mandateReference = mandateReference;
  }


  public DirectDebitDetails mandateUUid(String mandateUUid) {
    this.mandateUUid = mandateUUid;
    return this;
  }

  /**
   * The UUID for the mandate
   * @return mandateUUid
   */
  @javax.annotation.Nullable
  public String getMandateUUid() {
    return mandateUUid;
  }

  public void setMandateUUid(String mandateUUid) {
    this.mandateUUid = mandateUUid;
  }


  public DirectDebitDetails mandateUuid(String mandateUuid) {
    this.mandateUuid = mandateUuid;
    return this;
  }

  /**
   * The UUID for the mandate
   * @return mandateUuid
   */
  @javax.annotation.Nullable
  public String getMandateUuid() {
    return mandateUuid;
  }

  public void setMandateUuid(String mandateUuid) {
    this.mandateUuid = mandateUuid;
  }


  public DirectDebitDetails originatorAlias(String originatorAlias) {
    this.originatorAlias = originatorAlias;
    return this;
  }

  /**
   * The Alias of the party who sets up the direct debit.
   * @return originatorAlias
   */
  @javax.annotation.Nullable
  public String getOriginatorAlias() {
    return originatorAlias;
  }

  public void setOriginatorAlias(String originatorAlias) {
    this.originatorAlias = originatorAlias;
  }


  public DirectDebitDetails originatorLogoUrlLarge(String originatorLogoUrlLarge) {
    this.originatorLogoUrlLarge = originatorLogoUrlLarge;
    return this;
  }

  /**
   * URL pointing to a large version of the Originator Logo (if available)
   * @return originatorLogoUrlLarge
   */
  @javax.annotation.Nullable
  public String getOriginatorLogoUrlLarge() {
    return originatorLogoUrlLarge;
  }

  public void setOriginatorLogoUrlLarge(String originatorLogoUrlLarge) {
    this.originatorLogoUrlLarge = originatorLogoUrlLarge;
  }


  public DirectDebitDetails originatorLogoUrlSmall(String originatorLogoUrlSmall) {
    this.originatorLogoUrlSmall = originatorLogoUrlSmall;
    return this;
  }

  /**
   * URL pointing to a small version of the Originator Logo (if available)
   * @return originatorLogoUrlSmall
   */
  @javax.annotation.Nullable
  public String getOriginatorLogoUrlSmall() {
    return originatorLogoUrlSmall;
  }

  public void setOriginatorLogoUrlSmall(String originatorLogoUrlSmall) {
    this.originatorLogoUrlSmall = originatorLogoUrlSmall;
  }


  public DirectDebitDetails originatorName(String originatorName) {
    this.originatorName = originatorName;
    return this;
  }

  /**
   * The creator of the party who sets up the direct debit.
   * @return originatorName
   */
  @javax.annotation.Nullable
  public String getOriginatorName() {
    return originatorName;
  }

  public void setOriginatorName(String originatorName) {
    this.originatorName = originatorName;
  }


  public DirectDebitDetails originatorReference(String originatorReference) {
    this.originatorReference = originatorReference;
    return this;
  }

  /**
   * Set by party who sets up the direct debit.
   * @return originatorReference
   */
  @javax.annotation.Nullable
  public String getOriginatorReference() {
    return originatorReference;
  }

  public void setOriginatorReference(String originatorReference) {
    this.originatorReference = originatorReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectDebitDetails directDebitDetails = (DirectDebitDetails) o;
    return Objects.equals(this.directDebitReference, directDebitDetails.directDebitReference) &&
        Objects.equals(this.directDebitUuid, directDebitDetails.directDebitUuid) &&
        Objects.equals(this.mandateReference, directDebitDetails.mandateReference) &&
        Objects.equals(this.mandateUUid, directDebitDetails.mandateUUid) &&
        Objects.equals(this.mandateUuid, directDebitDetails.mandateUuid) &&
        Objects.equals(this.originatorAlias, directDebitDetails.originatorAlias) &&
        Objects.equals(this.originatorLogoUrlLarge, directDebitDetails.originatorLogoUrlLarge) &&
        Objects.equals(this.originatorLogoUrlSmall, directDebitDetails.originatorLogoUrlSmall) &&
        Objects.equals(this.originatorName, directDebitDetails.originatorName) &&
        Objects.equals(this.originatorReference, directDebitDetails.originatorReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(directDebitReference, directDebitUuid, mandateReference, mandateUUid, mandateUuid, originatorAlias, originatorLogoUrlLarge, originatorLogoUrlSmall, originatorName, originatorReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectDebitDetails {\n");
    sb.append("    directDebitReference: ").append(toIndentedString(directDebitReference)).append("\n");
    sb.append("    directDebitUuid: ").append(toIndentedString(directDebitUuid)).append("\n");
    sb.append("    mandateReference: ").append(toIndentedString(mandateReference)).append("\n");
    sb.append("    mandateUUid: ").append(toIndentedString(mandateUUid)).append("\n");
    sb.append("    mandateUuid: ").append(toIndentedString(mandateUuid)).append("\n");
    sb.append("    originatorAlias: ").append(toIndentedString(originatorAlias)).append("\n");
    sb.append("    originatorLogoUrlLarge: ").append(toIndentedString(originatorLogoUrlLarge)).append("\n");
    sb.append("    originatorLogoUrlSmall: ").append(toIndentedString(originatorLogoUrlSmall)).append("\n");
    sb.append("    originatorName: ").append(toIndentedString(originatorName)).append("\n");
    sb.append("    originatorReference: ").append(toIndentedString(originatorReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("directDebitReference");
    openapiFields.add("directDebitUuid");
    openapiFields.add("mandateReference");
    openapiFields.add("mandateUUid");
    openapiFields.add("mandateUuid");
    openapiFields.add("originatorAlias");
    openapiFields.add("originatorLogoUrlLarge");
    openapiFields.add("originatorLogoUrlSmall");
    openapiFields.add("originatorName");
    openapiFields.add("originatorReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DirectDebitDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DirectDebitDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DirectDebitDetails is not found in the empty JSON string", DirectDebitDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DirectDebitDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DirectDebitDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("directDebitReference") != null && !jsonObj.get("directDebitReference").isJsonNull()) && !jsonObj.get("directDebitReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directDebitReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directDebitReference").toString()));
      }
      if ((jsonObj.get("directDebitUuid") != null && !jsonObj.get("directDebitUuid").isJsonNull()) && !jsonObj.get("directDebitUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directDebitUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directDebitUuid").toString()));
      }
      if ((jsonObj.get("mandateReference") != null && !jsonObj.get("mandateReference").isJsonNull()) && !jsonObj.get("mandateReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mandateReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mandateReference").toString()));
      }
      if ((jsonObj.get("mandateUUid") != null && !jsonObj.get("mandateUUid").isJsonNull()) && !jsonObj.get("mandateUUid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mandateUUid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mandateUUid").toString()));
      }
      if ((jsonObj.get("mandateUuid") != null && !jsonObj.get("mandateUuid").isJsonNull()) && !jsonObj.get("mandateUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mandateUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mandateUuid").toString()));
      }
      if ((jsonObj.get("originatorAlias") != null && !jsonObj.get("originatorAlias").isJsonNull()) && !jsonObj.get("originatorAlias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorAlias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorAlias").toString()));
      }
      if ((jsonObj.get("originatorLogoUrlLarge") != null && !jsonObj.get("originatorLogoUrlLarge").isJsonNull()) && !jsonObj.get("originatorLogoUrlLarge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorLogoUrlLarge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorLogoUrlLarge").toString()));
      }
      if ((jsonObj.get("originatorLogoUrlSmall") != null && !jsonObj.get("originatorLogoUrlSmall").isJsonNull()) && !jsonObj.get("originatorLogoUrlSmall").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorLogoUrlSmall` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorLogoUrlSmall").toString()));
      }
      if ((jsonObj.get("originatorName") != null && !jsonObj.get("originatorName").isJsonNull()) && !jsonObj.get("originatorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorName").toString()));
      }
      if ((jsonObj.get("originatorReference") != null && !jsonObj.get("originatorReference").isJsonNull()) && !jsonObj.get("originatorReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorReference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DirectDebitDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DirectDebitDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DirectDebitDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DirectDebitDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<DirectDebitDetails>() {
           @Override
           public void write(JsonWriter out, DirectDebitDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DirectDebitDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DirectDebitDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DirectDebitDetails
   * @throws IOException if the JSON string is invalid with respect to DirectDebitDetails
   */
  public static DirectDebitDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DirectDebitDetails.class);
  }

  /**
   * Convert an instance of DirectDebitDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

