/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddBankTransferBatchPaymentRequest;
import org.openapitools.client.model.Batch;
import org.openapitools.client.model.BatchApprovers;
import org.openapitools.client.model.BatchItemInternalTransfer;
import org.openapitools.client.model.BatchItemInternationalTransferMode1;
import org.openapitools.client.model.BatchItems;
import org.openapitools.client.model.NewBatch;
import org.openapitools.client.model.NewBatchItemResponse;
import org.openapitools.client.model.NewBatchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentBatchesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentBatchesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentBatchesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addBankTransferBatchPayment
     * @param batchUuid  (required)
     * @param addBankTransferBatchPaymentRequest Details of **Mode 1** &amp; **Mode 2**. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment added successfully. **Note*** Please use batchUuid when submitting a batch, not batchItemUuid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBankTransferBatchPaymentCall(String batchUuid, AddBankTransferBatchPaymentRequest addBankTransferBatchPaymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addBankTransferBatchPaymentRequest;

        // create path and map variables
        String localVarPath = "/v1/batches/{batchUuid}/banktransfers"
            .replace("{" + "batchUuid" + "}", localVarApiClient.escapeString(batchUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBankTransferBatchPaymentValidateBeforeCall(String batchUuid, AddBankTransferBatchPaymentRequest addBankTransferBatchPaymentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchUuid' is set
        if (batchUuid == null) {
            throw new ApiException("Missing the required parameter 'batchUuid' when calling addBankTransferBatchPayment(Async)");
        }

        // verify the required parameter 'addBankTransferBatchPaymentRequest' is set
        if (addBankTransferBatchPaymentRequest == null) {
            throw new ApiException("Missing the required parameter 'addBankTransferBatchPaymentRequest' when calling addBankTransferBatchPayment(Async)");
        }

        return addBankTransferBatchPaymentCall(batchUuid, addBankTransferBatchPaymentRequest, _callback);

    }

    /**
     * Add a bank transfer payment to the batch.
     * There are two ways to process bank transfers - by Payee ID (**Mode 1**) or by Payee Account Details (**Mode 2**).  **Mode 1:** Use the payee IDs of existing approved payees set up against your account. These batches can be approved in the normal manner.  **Mode 2:** Use the account details of the payee. In the event that these details correspond to an existing approved payee, the batch can be approved as normal. If the account details are new, a batch of New Payees will automatically be created. This batch will need to be approved before the Payment batch can be approved. These payees will then exist as approved payees for future batches. 
     * @param batchUuid  (required)
     * @param addBankTransferBatchPaymentRequest Details of **Mode 1** &amp; **Mode 2**. (required)
     * @return NewBatchItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment added successfully. **Note*** Please use batchUuid when submitting a batch, not batchItemUuid. </td><td>  -  </td></tr>
     </table>
     */
    public NewBatchItemResponse addBankTransferBatchPayment(String batchUuid, AddBankTransferBatchPaymentRequest addBankTransferBatchPaymentRequest) throws ApiException {
        ApiResponse<NewBatchItemResponse> localVarResp = addBankTransferBatchPaymentWithHttpInfo(batchUuid, addBankTransferBatchPaymentRequest);
        return localVarResp.getData();
    }

    /**
     * Add a bank transfer payment to the batch.
     * There are two ways to process bank transfers - by Payee ID (**Mode 1**) or by Payee Account Details (**Mode 2**).  **Mode 1:** Use the payee IDs of existing approved payees set up against your account. These batches can be approved in the normal manner.  **Mode 2:** Use the account details of the payee. In the event that these details correspond to an existing approved payee, the batch can be approved as normal. If the account details are new, a batch of New Payees will automatically be created. This batch will need to be approved before the Payment batch can be approved. These payees will then exist as approved payees for future batches. 
     * @param batchUuid  (required)
     * @param addBankTransferBatchPaymentRequest Details of **Mode 1** &amp; **Mode 2**. (required)
     * @return ApiResponse&lt;NewBatchItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment added successfully. **Note*** Please use batchUuid when submitting a batch, not batchItemUuid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NewBatchItemResponse> addBankTransferBatchPaymentWithHttpInfo(String batchUuid, AddBankTransferBatchPaymentRequest addBankTransferBatchPaymentRequest) throws ApiException {
        okhttp3.Call localVarCall = addBankTransferBatchPaymentValidateBeforeCall(batchUuid, addBankTransferBatchPaymentRequest, null);
        Type localVarReturnType = new TypeToken<NewBatchItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a bank transfer payment to the batch. (asynchronously)
     * There are two ways to process bank transfers - by Payee ID (**Mode 1**) or by Payee Account Details (**Mode 2**).  **Mode 1:** Use the payee IDs of existing approved payees set up against your account. These batches can be approved in the normal manner.  **Mode 2:** Use the account details of the payee. In the event that these details correspond to an existing approved payee, the batch can be approved as normal. If the account details are new, a batch of New Payees will automatically be created. This batch will need to be approved before the Payment batch can be approved. These payees will then exist as approved payees for future batches. 
     * @param batchUuid  (required)
     * @param addBankTransferBatchPaymentRequest Details of **Mode 1** &amp; **Mode 2**. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment added successfully. **Note*** Please use batchUuid when submitting a batch, not batchItemUuid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addBankTransferBatchPaymentAsync(String batchUuid, AddBankTransferBatchPaymentRequest addBankTransferBatchPaymentRequest, final ApiCallback<NewBatchItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBankTransferBatchPaymentValidateBeforeCall(batchUuid, addBankTransferBatchPaymentRequest, _callback);
        Type localVarReturnType = new TypeToken<NewBatchItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addInternalTransferBatchPayment
     * @param batchUuid  (required)
     * @param batchItemInternalTransfer Details of the source account, destination account, amount and a reference. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment added successfully. Note* Please use batchUuid when submitting a batch, not batchItemUuid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addInternalTransferBatchPaymentCall(String batchUuid, BatchItemInternalTransfer batchItemInternalTransfer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchItemInternalTransfer;

        // create path and map variables
        String localVarPath = "/v1/batches/{batchUuid}/internaltransfers"
            .replace("{" + "batchUuid" + "}", localVarApiClient.escapeString(batchUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addInternalTransferBatchPaymentValidateBeforeCall(String batchUuid, BatchItemInternalTransfer batchItemInternalTransfer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchUuid' is set
        if (batchUuid == null) {
            throw new ApiException("Missing the required parameter 'batchUuid' when calling addInternalTransferBatchPayment(Async)");
        }

        // verify the required parameter 'batchItemInternalTransfer' is set
        if (batchItemInternalTransfer == null) {
            throw new ApiException("Missing the required parameter 'batchItemInternalTransfer' when calling addInternalTransferBatchPayment(Async)");
        }

        return addInternalTransferBatchPaymentCall(batchUuid, batchItemInternalTransfer, _callback);

    }

    /**
     * Add an internal transfer payment to the batch
     * Simply specify the source account, destination account, amount and a reference.
     * @param batchUuid  (required)
     * @param batchItemInternalTransfer Details of the source account, destination account, amount and a reference. (required)
     * @return NewBatchItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment added successfully. Note* Please use batchUuid when submitting a batch, not batchItemUuid. </td><td>  -  </td></tr>
     </table>
     */
    public NewBatchItemResponse addInternalTransferBatchPayment(String batchUuid, BatchItemInternalTransfer batchItemInternalTransfer) throws ApiException {
        ApiResponse<NewBatchItemResponse> localVarResp = addInternalTransferBatchPaymentWithHttpInfo(batchUuid, batchItemInternalTransfer);
        return localVarResp.getData();
    }

    /**
     * Add an internal transfer payment to the batch
     * Simply specify the source account, destination account, amount and a reference.
     * @param batchUuid  (required)
     * @param batchItemInternalTransfer Details of the source account, destination account, amount and a reference. (required)
     * @return ApiResponse&lt;NewBatchItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment added successfully. Note* Please use batchUuid when submitting a batch, not batchItemUuid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NewBatchItemResponse> addInternalTransferBatchPaymentWithHttpInfo(String batchUuid, BatchItemInternalTransfer batchItemInternalTransfer) throws ApiException {
        okhttp3.Call localVarCall = addInternalTransferBatchPaymentValidateBeforeCall(batchUuid, batchItemInternalTransfer, null);
        Type localVarReturnType = new TypeToken<NewBatchItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an internal transfer payment to the batch (asynchronously)
     * Simply specify the source account, destination account, amount and a reference.
     * @param batchUuid  (required)
     * @param batchItemInternalTransfer Details of the source account, destination account, amount and a reference. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment added successfully. Note* Please use batchUuid when submitting a batch, not batchItemUuid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addInternalTransferBatchPaymentAsync(String batchUuid, BatchItemInternalTransfer batchItemInternalTransfer, final ApiCallback<NewBatchItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addInternalTransferBatchPaymentValidateBeforeCall(batchUuid, batchItemInternalTransfer, _callback);
        Type localVarReturnType = new TypeToken<NewBatchItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addInternationalTransferBatchPayment
     * @param batchUuid  (required)
     * @param batchItemInternationalTransferMode1 Details of **Mode 1** (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment added successfully. **Note*** Please use batchUuid when submitting a batch, not batchItemUuid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addInternationalTransferBatchPaymentCall(String batchUuid, BatchItemInternationalTransferMode1 batchItemInternationalTransferMode1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchItemInternationalTransferMode1;

        // create path and map variables
        String localVarPath = "/v2/batches/{batchUuid}/internationaltransfers"
            .replace("{" + "batchUuid" + "}", localVarApiClient.escapeString(batchUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addInternationalTransferBatchPaymentValidateBeforeCall(String batchUuid, BatchItemInternationalTransferMode1 batchItemInternationalTransferMode1, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchUuid' is set
        if (batchUuid == null) {
            throw new ApiException("Missing the required parameter 'batchUuid' when calling addInternationalTransferBatchPayment(Async)");
        }

        // verify the required parameter 'batchItemInternationalTransferMode1' is set
        if (batchItemInternationalTransferMode1 == null) {
            throw new ApiException("Missing the required parameter 'batchItemInternationalTransferMode1' when calling addInternationalTransferBatchPayment(Async)");
        }

        return addInternationalTransferBatchPaymentCall(batchUuid, batchItemInternationalTransferMode1, _callback);

    }

    /**
     * Add an international transfer payment to the batch.
     * International transfers must be added to a batch using the Payee ID (**Mode 1**). Payees must be set up using the web application.  **Mode 1:** Use the payee IDs of existing approved payees set up against your account. These batches can be approved in the normal manner. 
     * @param batchUuid  (required)
     * @param batchItemInternationalTransferMode1 Details of **Mode 1** (required)
     * @return NewBatchItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment added successfully. **Note*** Please use batchUuid when submitting a batch, not batchItemUuid. </td><td>  -  </td></tr>
     </table>
     */
    public NewBatchItemResponse addInternationalTransferBatchPayment(String batchUuid, BatchItemInternationalTransferMode1 batchItemInternationalTransferMode1) throws ApiException {
        ApiResponse<NewBatchItemResponse> localVarResp = addInternationalTransferBatchPaymentWithHttpInfo(batchUuid, batchItemInternationalTransferMode1);
        return localVarResp.getData();
    }

    /**
     * Add an international transfer payment to the batch.
     * International transfers must be added to a batch using the Payee ID (**Mode 1**). Payees must be set up using the web application.  **Mode 1:** Use the payee IDs of existing approved payees set up against your account. These batches can be approved in the normal manner. 
     * @param batchUuid  (required)
     * @param batchItemInternationalTransferMode1 Details of **Mode 1** (required)
     * @return ApiResponse&lt;NewBatchItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment added successfully. **Note*** Please use batchUuid when submitting a batch, not batchItemUuid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NewBatchItemResponse> addInternationalTransferBatchPaymentWithHttpInfo(String batchUuid, BatchItemInternationalTransferMode1 batchItemInternationalTransferMode1) throws ApiException {
        okhttp3.Call localVarCall = addInternationalTransferBatchPaymentValidateBeforeCall(batchUuid, batchItemInternationalTransferMode1, null);
        Type localVarReturnType = new TypeToken<NewBatchItemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add an international transfer payment to the batch. (asynchronously)
     * International transfers must be added to a batch using the Payee ID (**Mode 1**). Payees must be set up using the web application.  **Mode 1:** Use the payee IDs of existing approved payees set up against your account. These batches can be approved in the normal manner. 
     * @param batchUuid  (required)
     * @param batchItemInternationalTransferMode1 Details of **Mode 1** (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment added successfully. **Note*** Please use batchUuid when submitting a batch, not batchItemUuid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addInternationalTransferBatchPaymentAsync(String batchUuid, BatchItemInternationalTransferMode1 batchItemInternationalTransferMode1, final ApiCallback<NewBatchItemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addInternationalTransferBatchPaymentValidateBeforeCall(batchUuid, batchItemInternationalTransferMode1, _callback);
        Type localVarReturnType = new TypeToken<NewBatchItemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelBatchPayment
     * @param batchUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelBatchPaymentCall(String batchUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/batches/{batchUuid}"
            .replace("{" + "batchUuid" + "}", localVarApiClient.escapeString(batchUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelBatchPaymentValidateBeforeCall(String batchUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchUuid' is set
        if (batchUuid == null) {
            throw new ApiException("Missing the required parameter 'batchUuid' when calling cancelBatchPayment(Async)");
        }

        return cancelBatchPaymentCall(batchUuid, _callback);

    }

    /**
     * Cancel a batch
     * Cancels the Batch. You can only cancel a batch before it is submitted for approval (while it is in the OPEN state).
     * @param batchUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void cancelBatchPayment(String batchUuid) throws ApiException {
        cancelBatchPaymentWithHttpInfo(batchUuid);
    }

    /**
     * Cancel a batch
     * Cancels the Batch. You can only cancel a batch before it is submitted for approval (while it is in the OPEN state).
     * @param batchUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelBatchPaymentWithHttpInfo(String batchUuid) throws ApiException {
        okhttp3.Call localVarCall = cancelBatchPaymentValidateBeforeCall(batchUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel a batch (asynchronously)
     * Cancels the Batch. You can only cancel a batch before it is submitted for approval (while it is in the OPEN state).
     * @param batchUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelBatchPaymentAsync(String batchUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelBatchPaymentValidateBeforeCall(batchUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBatchPayment
     * @param newBatch Details of the batch payment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch created successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBatchPaymentCall(NewBatch newBatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newBatch;

        // create path and map variables
        String localVarPath = "/v1/batches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBatchPaymentValidateBeforeCall(NewBatch newBatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'newBatch' is set
        if (newBatch == null) {
            throw new ApiException("Missing the required parameter 'newBatch' when calling createBatchPayment(Async)");
        }

        return createBatchPaymentCall(newBatch, _callback);

    }

    /**
     * Create a new batch of payments
     * The fire.com API allows businesses to automate payments between their accounts or to third parties across the UK and Europe.  For added security, the API can only set up the payments in batches. These batches must be approved by an authorised user via the firework mobile app.   The process is as follows:  **1.**Create a new batch  **2.**Add payments to the batch  **3.**Submit the batch for approval  Once the batch is submitted, the authorised users will receive notifications to their firework mobile apps. They can review the contents of the batch and then approve or reject it. If approved, the batch is then processed. You can avail of enhanced security by using Dual Authorisation to verify payments if you wish. Dual Authorisation can be enabled by you when setting up your API application in firework online.  **Batch Life Cycle Events**  A batch webhook can be specified to receive details of all the payments as they are processed. This webhook receives notifications for every event in the batch lifecycle.  The following events are triggered during a batch:  **batch.opened:** Contains the details of the batch opened. Checks that the callback URL exists - unless a HTTP 200 response is returned, the callback URL will not be configured.  **batch.item-added:** Details of the item added to the batch  **batch.item-removed:** Details of the item removed from the batch  **batch.cancelled:** Notifies that the batch was cancelled.  **batch.submitted:** Notifes that the batch was submitted  **batch.approved:** Notifies that the batch was approved.  **batch.rejected:** Notifies that the batch was rejected.  **batch.failed:** Notifies that the batch failed - includes the details of the failure (insufficient funds etc)  **batch.completed:** Notifies that the batch completed successfully. Includes a summary.  Push notifications are sent to the firework mobile app for many of these events too - these can be configured from within the app.  This is the first step in creating a batch payment. 
     * @param newBatch Details of the batch payment (required)
     * @return NewBatchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch created successfully </td><td>  -  </td></tr>
     </table>
     */
    public NewBatchResponse createBatchPayment(NewBatch newBatch) throws ApiException {
        ApiResponse<NewBatchResponse> localVarResp = createBatchPaymentWithHttpInfo(newBatch);
        return localVarResp.getData();
    }

    /**
     * Create a new batch of payments
     * The fire.com API allows businesses to automate payments between their accounts or to third parties across the UK and Europe.  For added security, the API can only set up the payments in batches. These batches must be approved by an authorised user via the firework mobile app.   The process is as follows:  **1.**Create a new batch  **2.**Add payments to the batch  **3.**Submit the batch for approval  Once the batch is submitted, the authorised users will receive notifications to their firework mobile apps. They can review the contents of the batch and then approve or reject it. If approved, the batch is then processed. You can avail of enhanced security by using Dual Authorisation to verify payments if you wish. Dual Authorisation can be enabled by you when setting up your API application in firework online.  **Batch Life Cycle Events**  A batch webhook can be specified to receive details of all the payments as they are processed. This webhook receives notifications for every event in the batch lifecycle.  The following events are triggered during a batch:  **batch.opened:** Contains the details of the batch opened. Checks that the callback URL exists - unless a HTTP 200 response is returned, the callback URL will not be configured.  **batch.item-added:** Details of the item added to the batch  **batch.item-removed:** Details of the item removed from the batch  **batch.cancelled:** Notifies that the batch was cancelled.  **batch.submitted:** Notifes that the batch was submitted  **batch.approved:** Notifies that the batch was approved.  **batch.rejected:** Notifies that the batch was rejected.  **batch.failed:** Notifies that the batch failed - includes the details of the failure (insufficient funds etc)  **batch.completed:** Notifies that the batch completed successfully. Includes a summary.  Push notifications are sent to the firework mobile app for many of these events too - these can be configured from within the app.  This is the first step in creating a batch payment. 
     * @param newBatch Details of the batch payment (required)
     * @return ApiResponse&lt;NewBatchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch created successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NewBatchResponse> createBatchPaymentWithHttpInfo(NewBatch newBatch) throws ApiException {
        okhttp3.Call localVarCall = createBatchPaymentValidateBeforeCall(newBatch, null);
        Type localVarReturnType = new TypeToken<NewBatchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new batch of payments (asynchronously)
     * The fire.com API allows businesses to automate payments between their accounts or to third parties across the UK and Europe.  For added security, the API can only set up the payments in batches. These batches must be approved by an authorised user via the firework mobile app.   The process is as follows:  **1.**Create a new batch  **2.**Add payments to the batch  **3.**Submit the batch for approval  Once the batch is submitted, the authorised users will receive notifications to their firework mobile apps. They can review the contents of the batch and then approve or reject it. If approved, the batch is then processed. You can avail of enhanced security by using Dual Authorisation to verify payments if you wish. Dual Authorisation can be enabled by you when setting up your API application in firework online.  **Batch Life Cycle Events**  A batch webhook can be specified to receive details of all the payments as they are processed. This webhook receives notifications for every event in the batch lifecycle.  The following events are triggered during a batch:  **batch.opened:** Contains the details of the batch opened. Checks that the callback URL exists - unless a HTTP 200 response is returned, the callback URL will not be configured.  **batch.item-added:** Details of the item added to the batch  **batch.item-removed:** Details of the item removed from the batch  **batch.cancelled:** Notifies that the batch was cancelled.  **batch.submitted:** Notifes that the batch was submitted  **batch.approved:** Notifies that the batch was approved.  **batch.rejected:** Notifies that the batch was rejected.  **batch.failed:** Notifies that the batch failed - includes the details of the failure (insufficient funds etc)  **batch.completed:** Notifies that the batch completed successfully. Includes a summary.  Push notifications are sent to the firework mobile app for many of these events too - these can be configured from within the app.  This is the first step in creating a batch payment. 
     * @param newBatch Details of the batch payment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch created successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBatchPaymentAsync(NewBatch newBatch, final ApiCallback<NewBatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBatchPaymentValidateBeforeCall(newBatch, _callback);
        Type localVarReturnType = new TypeToken<NewBatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteBankTransferBatchPayment
     * @param batchUuid  (required)
     * @param itemUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBankTransferBatchPaymentCall(String batchUuid, String itemUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/batches/{batchUuid}/banktransfers/{itemUuid}"
            .replace("{" + "batchUuid" + "}", localVarApiClient.escapeString(batchUuid.toString()))
            .replace("{" + "itemUuid" + "}", localVarApiClient.escapeString(itemUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBankTransferBatchPaymentValidateBeforeCall(String batchUuid, String itemUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchUuid' is set
        if (batchUuid == null) {
            throw new ApiException("Missing the required parameter 'batchUuid' when calling deleteBankTransferBatchPayment(Async)");
        }

        // verify the required parameter 'itemUuid' is set
        if (itemUuid == null) {
            throw new ApiException("Missing the required parameter 'itemUuid' when calling deleteBankTransferBatchPayment(Async)");
        }

        return deleteBankTransferBatchPaymentCall(batchUuid, itemUuid, _callback);

    }

    /**
     * Remove a Payment from the Batch (Bank Transfers)
     * Removes a Payment from the Batch (Bank Transfers). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
     * @param batchUuid  (required)
     * @param itemUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteBankTransferBatchPayment(String batchUuid, String itemUuid) throws ApiException {
        deleteBankTransferBatchPaymentWithHttpInfo(batchUuid, itemUuid);
    }

    /**
     * Remove a Payment from the Batch (Bank Transfers)
     * Removes a Payment from the Batch (Bank Transfers). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
     * @param batchUuid  (required)
     * @param itemUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteBankTransferBatchPaymentWithHttpInfo(String batchUuid, String itemUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteBankTransferBatchPaymentValidateBeforeCall(batchUuid, itemUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a Payment from the Batch (Bank Transfers) (asynchronously)
     * Removes a Payment from the Batch (Bank Transfers). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
     * @param batchUuid  (required)
     * @param itemUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteBankTransferBatchPaymentAsync(String batchUuid, String itemUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBankTransferBatchPaymentValidateBeforeCall(batchUuid, itemUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteInternalTransferBatchPayment
     * @param batchUuid  (required)
     * @param itemUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteInternalTransferBatchPaymentCall(String batchUuid, String itemUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/batches/{batchUuid}/internaltransfers/{itemUuid}"
            .replace("{" + "batchUuid" + "}", localVarApiClient.escapeString(batchUuid.toString()))
            .replace("{" + "itemUuid" + "}", localVarApiClient.escapeString(itemUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInternalTransferBatchPaymentValidateBeforeCall(String batchUuid, String itemUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchUuid' is set
        if (batchUuid == null) {
            throw new ApiException("Missing the required parameter 'batchUuid' when calling deleteInternalTransferBatchPayment(Async)");
        }

        // verify the required parameter 'itemUuid' is set
        if (itemUuid == null) {
            throw new ApiException("Missing the required parameter 'itemUuid' when calling deleteInternalTransferBatchPayment(Async)");
        }

        return deleteInternalTransferBatchPaymentCall(batchUuid, itemUuid, _callback);

    }

    /**
     * Remove a Payment from the Batch (Internal Transfer)
     * Removes a Payment from the Batch (Internal Transfer). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
     * @param batchUuid  (required)
     * @param itemUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteInternalTransferBatchPayment(String batchUuid, String itemUuid) throws ApiException {
        deleteInternalTransferBatchPaymentWithHttpInfo(batchUuid, itemUuid);
    }

    /**
     * Remove a Payment from the Batch (Internal Transfer)
     * Removes a Payment from the Batch (Internal Transfer). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
     * @param batchUuid  (required)
     * @param itemUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteInternalTransferBatchPaymentWithHttpInfo(String batchUuid, String itemUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteInternalTransferBatchPaymentValidateBeforeCall(batchUuid, itemUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a Payment from the Batch (Internal Transfer) (asynchronously)
     * Removes a Payment from the Batch (Internal Transfer). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
     * @param batchUuid  (required)
     * @param itemUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteInternalTransferBatchPaymentAsync(String batchUuid, String itemUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInternalTransferBatchPaymentValidateBeforeCall(batchUuid, itemUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteInternationalTransferBatchPayment
     * @param batchUuid  (required)
     * @param itemUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteInternationalTransferBatchPaymentCall(String batchUuid, String itemUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/batches/{batchUuid}/internationaltransfers/{itemUuid}"
            .replace("{" + "batchUuid" + "}", localVarApiClient.escapeString(batchUuid.toString()))
            .replace("{" + "itemUuid" + "}", localVarApiClient.escapeString(itemUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInternationalTransferBatchPaymentValidateBeforeCall(String batchUuid, String itemUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchUuid' is set
        if (batchUuid == null) {
            throw new ApiException("Missing the required parameter 'batchUuid' when calling deleteInternationalTransferBatchPayment(Async)");
        }

        // verify the required parameter 'itemUuid' is set
        if (itemUuid == null) {
            throw new ApiException("Missing the required parameter 'itemUuid' when calling deleteInternationalTransferBatchPayment(Async)");
        }

        return deleteInternationalTransferBatchPaymentCall(batchUuid, itemUuid, _callback);

    }

    /**
     * Remove a Payment from the Batch (International Transfers)
     * Removes a Payment from the Batch (International Transfers). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
     * @param batchUuid  (required)
     * @param itemUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteInternationalTransferBatchPayment(String batchUuid, String itemUuid) throws ApiException {
        deleteInternationalTransferBatchPaymentWithHttpInfo(batchUuid, itemUuid);
    }

    /**
     * Remove a Payment from the Batch (International Transfers)
     * Removes a Payment from the Batch (International Transfers). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
     * @param batchUuid  (required)
     * @param itemUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteInternationalTransferBatchPaymentWithHttpInfo(String batchUuid, String itemUuid) throws ApiException {
        okhttp3.Call localVarCall = deleteInternationalTransferBatchPaymentValidateBeforeCall(batchUuid, itemUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove a Payment from the Batch (International Transfers) (asynchronously)
     * Removes a Payment from the Batch (International Transfers). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
     * @param batchUuid  (required)
     * @param itemUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Batch payment deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteInternationalTransferBatchPaymentAsync(String batchUuid, String itemUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInternationalTransferBatchPaymentValidateBeforeCall(batchUuid, itemUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBatches
     * @param batchStatus  (optional)
     * @param batchTypes  (optional)
     * @param orderBy  (optional)
     * @param order  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all batches. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBatchesCall(String batchStatus, String batchTypes, String orderBy, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/batches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (batchStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("batchStatus", batchStatus));
        }

        if (batchTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("batchTypes", batchTypes));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBatchesValidateBeforeCall(String batchStatus, String batchTypes, String orderBy, String order, final ApiCallback _callback) throws ApiException {
        return getBatchesCall(batchStatus, batchTypes, orderBy, order, _callback);

    }

    /**
     * List batches
     * Returns the list of batch with the specified types and statuses. 
     * @param batchStatus  (optional)
     * @param batchTypes  (optional)
     * @param orderBy  (optional)
     * @param order  (optional)
     * @return BatchItems
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all batches. </td><td>  -  </td></tr>
     </table>
     */
    public BatchItems getBatches(String batchStatus, String batchTypes, String orderBy, String order) throws ApiException {
        ApiResponse<BatchItems> localVarResp = getBatchesWithHttpInfo(batchStatus, batchTypes, orderBy, order);
        return localVarResp.getData();
    }

    /**
     * List batches
     * Returns the list of batch with the specified types and statuses. 
     * @param batchStatus  (optional)
     * @param batchTypes  (optional)
     * @param orderBy  (optional)
     * @param order  (optional)
     * @return ApiResponse&lt;BatchItems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all batches. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchItems> getBatchesWithHttpInfo(String batchStatus, String batchTypes, String orderBy, String order) throws ApiException {
        okhttp3.Call localVarCall = getBatchesValidateBeforeCall(batchStatus, batchTypes, orderBy, order, null);
        Type localVarReturnType = new TypeToken<BatchItems>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List batches (asynchronously)
     * Returns the list of batch with the specified types and statuses. 
     * @param batchStatus  (optional)
     * @param batchTypes  (optional)
     * @param orderBy  (optional)
     * @param order  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List all batches. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBatchesAsync(String batchStatus, String batchTypes, String orderBy, String order, final ApiCallback<BatchItems> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBatchesValidateBeforeCall(batchStatus, batchTypes, orderBy, order, _callback);
        Type localVarReturnType = new TypeToken<BatchItems>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDetailsSingleBatch
     * @param batchUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details of the batch specified in the API endpoint - {batchUuid}. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDetailsSingleBatchCall(String batchUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/batches/{batchUuid}"
            .replace("{" + "batchUuid" + "}", localVarApiClient.escapeString(batchUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsSingleBatchValidateBeforeCall(String batchUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchUuid' is set
        if (batchUuid == null) {
            throw new ApiException("Missing the required parameter 'batchUuid' when calling getDetailsSingleBatch(Async)");
        }

        return getDetailsSingleBatchCall(batchUuid, _callback);

    }

    /**
     * Get details of a single Batch
     * Returns the details of the batch specified in the API endpoint - {batchUuid}.
     * @param batchUuid  (required)
     * @return Batch
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details of the batch specified in the API endpoint - {batchUuid}. </td><td>  -  </td></tr>
     </table>
     */
    public Batch getDetailsSingleBatch(String batchUuid) throws ApiException {
        ApiResponse<Batch> localVarResp = getDetailsSingleBatchWithHttpInfo(batchUuid);
        return localVarResp.getData();
    }

    /**
     * Get details of a single Batch
     * Returns the details of the batch specified in the API endpoint - {batchUuid}.
     * @param batchUuid  (required)
     * @return ApiResponse&lt;Batch&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details of the batch specified in the API endpoint - {batchUuid}. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Batch> getDetailsSingleBatchWithHttpInfo(String batchUuid) throws ApiException {
        okhttp3.Call localVarCall = getDetailsSingleBatchValidateBeforeCall(batchUuid, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details of a single Batch (asynchronously)
     * Returns the details of the batch specified in the API endpoint - {batchUuid}.
     * @param batchUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the details of the batch specified in the API endpoint - {batchUuid}. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDetailsSingleBatchAsync(String batchUuid, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsSingleBatchValidateBeforeCall(batchUuid, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItemsBatchBankTransfer
     * @param batchUuid  (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A fire.com list object of Batch Items (Internal transfers or Bank transfers). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemsBatchBankTransferCall(String batchUuid, Long offset, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/batches/{batchUuid}/banktransfers"
            .replace("{" + "batchUuid" + "}", localVarApiClient.escapeString(batchUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemsBatchBankTransferValidateBeforeCall(String batchUuid, Long offset, Long limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchUuid' is set
        if (batchUuid == null) {
            throw new ApiException("Missing the required parameter 'batchUuid' when calling getItemsBatchBankTransfer(Async)");
        }

        return getItemsBatchBankTransferCall(batchUuid, offset, limit, _callback);

    }

    /**
     * List items in a Batch (Bank Transfers)
     * Returns a paginated list of items in the specified batch.
     * @param batchUuid  (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @return BatchItems
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A fire.com list object of Batch Items (Internal transfers or Bank transfers). </td><td>  -  </td></tr>
     </table>
     */
    public BatchItems getItemsBatchBankTransfer(String batchUuid, Long offset, Long limit) throws ApiException {
        ApiResponse<BatchItems> localVarResp = getItemsBatchBankTransferWithHttpInfo(batchUuid, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List items in a Batch (Bank Transfers)
     * Returns a paginated list of items in the specified batch.
     * @param batchUuid  (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;BatchItems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A fire.com list object of Batch Items (Internal transfers or Bank transfers). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchItems> getItemsBatchBankTransferWithHttpInfo(String batchUuid, Long offset, Long limit) throws ApiException {
        okhttp3.Call localVarCall = getItemsBatchBankTransferValidateBeforeCall(batchUuid, offset, limit, null);
        Type localVarReturnType = new TypeToken<BatchItems>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List items in a Batch (Bank Transfers) (asynchronously)
     * Returns a paginated list of items in the specified batch.
     * @param batchUuid  (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A fire.com list object of Batch Items (Internal transfers or Bank transfers). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemsBatchBankTransferAsync(String batchUuid, Long offset, Long limit, final ApiCallback<BatchItems> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemsBatchBankTransferValidateBeforeCall(batchUuid, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<BatchItems>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItemsBatchInternalTrasnfer
     * @param batchUuid  (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A fire.com list object of Batch Items (Internal transfers or Bank transfers). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemsBatchInternalTrasnferCall(String batchUuid, Long offset, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/batches/{batchUuid}/internaltransfers"
            .replace("{" + "batchUuid" + "}", localVarApiClient.escapeString(batchUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemsBatchInternalTrasnferValidateBeforeCall(String batchUuid, Long offset, Long limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchUuid' is set
        if (batchUuid == null) {
            throw new ApiException("Missing the required parameter 'batchUuid' when calling getItemsBatchInternalTrasnfer(Async)");
        }

        return getItemsBatchInternalTrasnferCall(batchUuid, offset, limit, _callback);

    }

    /**
     * List items in a Batch (Internal Transfers)
     * Returns a paginated list of items in the specified batch.
     * @param batchUuid  (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @return BatchItems
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A fire.com list object of Batch Items (Internal transfers or Bank transfers). </td><td>  -  </td></tr>
     </table>
     */
    public BatchItems getItemsBatchInternalTrasnfer(String batchUuid, Long offset, Long limit) throws ApiException {
        ApiResponse<BatchItems> localVarResp = getItemsBatchInternalTrasnferWithHttpInfo(batchUuid, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List items in a Batch (Internal Transfers)
     * Returns a paginated list of items in the specified batch.
     * @param batchUuid  (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;BatchItems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A fire.com list object of Batch Items (Internal transfers or Bank transfers). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchItems> getItemsBatchInternalTrasnferWithHttpInfo(String batchUuid, Long offset, Long limit) throws ApiException {
        okhttp3.Call localVarCall = getItemsBatchInternalTrasnferValidateBeforeCall(batchUuid, offset, limit, null);
        Type localVarReturnType = new TypeToken<BatchItems>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List items in a Batch (Internal Transfers) (asynchronously)
     * Returns a paginated list of items in the specified batch.
     * @param batchUuid  (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A fire.com list object of Batch Items (Internal transfers or Bank transfers). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemsBatchInternalTrasnferAsync(String batchUuid, Long offset, Long limit, final ApiCallback<BatchItems> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemsBatchInternalTrasnferValidateBeforeCall(batchUuid, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<BatchItems>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getItemsBatchInternationalTransfer
     * @param batchUuid  (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A fire.com list object of Batch Items (Internal transfers, Bank transfers or International transfers). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemsBatchInternationalTransferCall(String batchUuid, Long offset, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/batches/{batchUuid}/internationaltransfers"
            .replace("{" + "batchUuid" + "}", localVarApiClient.escapeString(batchUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getItemsBatchInternationalTransferValidateBeforeCall(String batchUuid, Long offset, Long limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchUuid' is set
        if (batchUuid == null) {
            throw new ApiException("Missing the required parameter 'batchUuid' when calling getItemsBatchInternationalTransfer(Async)");
        }

        return getItemsBatchInternationalTransferCall(batchUuid, offset, limit, _callback);

    }

    /**
     * List items in a Batch (International Transfers)
     * Returns a paginated list of items in the specified batch.
     * @param batchUuid  (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @return BatchItems
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A fire.com list object of Batch Items (Internal transfers, Bank transfers or International transfers). </td><td>  -  </td></tr>
     </table>
     */
    public BatchItems getItemsBatchInternationalTransfer(String batchUuid, Long offset, Long limit) throws ApiException {
        ApiResponse<BatchItems> localVarResp = getItemsBatchInternationalTransferWithHttpInfo(batchUuid, offset, limit);
        return localVarResp.getData();
    }

    /**
     * List items in a Batch (International Transfers)
     * Returns a paginated list of items in the specified batch.
     * @param batchUuid  (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @return ApiResponse&lt;BatchItems&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A fire.com list object of Batch Items (Internal transfers, Bank transfers or International transfers). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchItems> getItemsBatchInternationalTransferWithHttpInfo(String batchUuid, Long offset, Long limit) throws ApiException {
        okhttp3.Call localVarCall = getItemsBatchInternationalTransferValidateBeforeCall(batchUuid, offset, limit, null);
        Type localVarReturnType = new TypeToken<BatchItems>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List items in a Batch (International Transfers) (asynchronously)
     * Returns a paginated list of items in the specified batch.
     * @param batchUuid  (required)
     * @param offset  (optional)
     * @param limit  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A fire.com list object of Batch Items (Internal transfers, Bank transfers or International transfers). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getItemsBatchInternationalTransferAsync(String batchUuid, Long offset, Long limit, final ApiCallback<BatchItems> _callback) throws ApiException {

        okhttp3.Call localVarCall = getItemsBatchInternationalTransferValidateBeforeCall(batchUuid, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<BatchItems>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getListofApproversForBatch
     * @param batchUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of approvers for this batch. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListofApproversForBatchCall(String batchUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/batches/{batchUuid}/approvals"
            .replace("{" + "batchUuid" + "}", localVarApiClient.escapeString(batchUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getListofApproversForBatchValidateBeforeCall(String batchUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchUuid' is set
        if (batchUuid == null) {
            throw new ApiException("Missing the required parameter 'batchUuid' when calling getListofApproversForBatch(Async)");
        }

        return getListofApproversForBatchCall(batchUuid, _callback);

    }

    /**
     * List Approvers for a Batch
     * Returns a list of approvers for this batch.
     * @param batchUuid  (required)
     * @return BatchApprovers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of approvers for this batch. </td><td>  -  </td></tr>
     </table>
     */
    public BatchApprovers getListofApproversForBatch(String batchUuid) throws ApiException {
        ApiResponse<BatchApprovers> localVarResp = getListofApproversForBatchWithHttpInfo(batchUuid);
        return localVarResp.getData();
    }

    /**
     * List Approvers for a Batch
     * Returns a list of approvers for this batch.
     * @param batchUuid  (required)
     * @return ApiResponse&lt;BatchApprovers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of approvers for this batch. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchApprovers> getListofApproversForBatchWithHttpInfo(String batchUuid) throws ApiException {
        okhttp3.Call localVarCall = getListofApproversForBatchValidateBeforeCall(batchUuid, null);
        Type localVarReturnType = new TypeToken<BatchApprovers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Approvers for a Batch (asynchronously)
     * Returns a list of approvers for this batch.
     * @param batchUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of approvers for this batch. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getListofApproversForBatchAsync(String batchUuid, final ApiCallback<BatchApprovers> _callback) throws ApiException {

        okhttp3.Call localVarCall = getListofApproversForBatchValidateBeforeCall(batchUuid, _callback);
        Type localVarReturnType = new TypeToken<BatchApprovers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for submitBatch
     * @param batchUuid  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body is returned - a HTTP 204 No Content response signifies the call was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitBatchCall(String batchUuid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/batches/{batchUuid}"
            .replace("{" + "batchUuid" + "}", localVarApiClient.escapeString(batchUuid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitBatchValidateBeforeCall(String batchUuid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchUuid' is set
        if (batchUuid == null) {
            throw new ApiException("Missing the required parameter 'batchUuid' when calling submitBatch(Async)");
        }

        return submitBatchCall(batchUuid, _callback);

    }

    /**
     * Submit a batch for approval
     * Submits the Batch (for approval in the case of a **BANK_TRANSFER** or **INTERNATIONAL_TRANSFER**). If this is an **INTERNAL_TRANSFER** batch, the transfers are immediately queued for processing. If this is a **BANK_TRANSFER** or **INTERNATIONAL_TRANSFER** batch, this will trigger requests for approval to the firework mobile apps of authorised users. Once those users approve the batch, it is queued for processing.  You can only submit a batch while it is in the OPEN state. 
     * @param batchUuid  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body is returned - a HTTP 204 No Content response signifies the call was successful. </td><td>  -  </td></tr>
     </table>
     */
    public void submitBatch(String batchUuid) throws ApiException {
        submitBatchWithHttpInfo(batchUuid);
    }

    /**
     * Submit a batch for approval
     * Submits the Batch (for approval in the case of a **BANK_TRANSFER** or **INTERNATIONAL_TRANSFER**). If this is an **INTERNAL_TRANSFER** batch, the transfers are immediately queued for processing. If this is a **BANK_TRANSFER** or **INTERNATIONAL_TRANSFER** batch, this will trigger requests for approval to the firework mobile apps of authorised users. Once those users approve the batch, it is queued for processing.  You can only submit a batch while it is in the OPEN state. 
     * @param batchUuid  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body is returned - a HTTP 204 No Content response signifies the call was successful. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> submitBatchWithHttpInfo(String batchUuid) throws ApiException {
        okhttp3.Call localVarCall = submitBatchValidateBeforeCall(batchUuid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Submit a batch for approval (asynchronously)
     * Submits the Batch (for approval in the case of a **BANK_TRANSFER** or **INTERNATIONAL_TRANSFER**). If this is an **INTERNAL_TRANSFER** batch, the transfers are immediately queued for processing. If this is a **BANK_TRANSFER** or **INTERNATIONAL_TRANSFER** batch, this will trigger requests for approval to the firework mobile apps of authorised users. Once those users approve the batch, it is queued for processing.  You can only submit a batch while it is in the OPEN state. 
     * @param batchUuid  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No body is returned - a HTTP 204 No Content response signifies the call was successful. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call submitBatchAsync(String batchUuid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitBatchValidateBeforeCall(batchUuid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
