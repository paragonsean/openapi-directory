/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CardTransactionsv1;
import org.openapitools.client.model.CardTransactionsv3;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getTransactionsByAccountIdFiltered
     * @param ican  (required)
     * @param dateRangeFrom  (required)
     * @param dateRangeTo  (required)
     * @param searchKeyword  (required)
     * @param transactionTypes  (required)
     * @param offset  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of transaction objects for the account with a count (&#x60;total&#x60;) filtered by the specified query parameter. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getTransactionsByAccountIdFilteredCall(Long ican, Long dateRangeFrom, Long dateRangeTo, String searchKeyword, List<String> transactionTypes, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/accounts/{ican}/transactions/filter"
            .replace("{" + "ican" + "}", localVarApiClient.escapeString(ican.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateRangeFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateRangeFrom", dateRangeFrom));
        }

        if (dateRangeTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateRangeTo", dateRangeTo));
        }

        if (searchKeyword != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchKeyword", searchKeyword));
        }

        if (transactionTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "transactionTypes", transactionTypes));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionsByAccountIdFilteredValidateBeforeCall(Long ican, Long dateRangeFrom, Long dateRangeTo, String searchKeyword, List<String> transactionTypes, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ican' is set
        if (ican == null) {
            throw new ApiException("Missing the required parameter 'ican' when calling getTransactionsByAccountIdFiltered(Async)");
        }

        // verify the required parameter 'dateRangeFrom' is set
        if (dateRangeFrom == null) {
            throw new ApiException("Missing the required parameter 'dateRangeFrom' when calling getTransactionsByAccountIdFiltered(Async)");
        }

        // verify the required parameter 'dateRangeTo' is set
        if (dateRangeTo == null) {
            throw new ApiException("Missing the required parameter 'dateRangeTo' when calling getTransactionsByAccountIdFiltered(Async)");
        }

        // verify the required parameter 'searchKeyword' is set
        if (searchKeyword == null) {
            throw new ApiException("Missing the required parameter 'searchKeyword' when calling getTransactionsByAccountIdFiltered(Async)");
        }

        // verify the required parameter 'transactionTypes' is set
        if (transactionTypes == null) {
            throw new ApiException("Missing the required parameter 'transactionTypes' when calling getTransactionsByAccountIdFiltered(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling getTransactionsByAccountIdFiltered(Async)");
        }

        return getTransactionsByAccountIdFilteredCall(ican, dateRangeFrom, dateRangeTo, searchKeyword, transactionTypes, offset, _callback);

    }

    /**
     * Filtered list of transactions for an account (v1)
     * Retrieve a filtered list of transactions against an account. Recommended to use the v3 endpoint instead. * &#x60;dateRangeFrom&#x60; - A millisecond epoch time specifying the date range start date. * &#x60;dateRangeTo&#x60; - A millisecond epoch time specifying the date range end date. * &#x60;searchKeyword&#x60; - Search term to filter by from the reference field (&#x60;myRef&#x60;). * &#x60;transactionTypes&#x60; - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types. * &#x60;offset&#x60; - The page offset. Defaults to 0. This is the record number that the returned list will start at. E.g. offset &#x3D; 40 and limit &#x3D; 20 will return records 40 to 59. 
     * @param ican  (required)
     * @param dateRangeFrom  (required)
     * @param dateRangeTo  (required)
     * @param searchKeyword  (required)
     * @param transactionTypes  (required)
     * @param offset  (required)
     * @return CardTransactionsv1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of transaction objects for the account with a count (&#x60;total&#x60;) filtered by the specified query parameter. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CardTransactionsv1 getTransactionsByAccountIdFiltered(Long ican, Long dateRangeFrom, Long dateRangeTo, String searchKeyword, List<String> transactionTypes, Long offset) throws ApiException {
        ApiResponse<CardTransactionsv1> localVarResp = getTransactionsByAccountIdFilteredWithHttpInfo(ican, dateRangeFrom, dateRangeTo, searchKeyword, transactionTypes, offset);
        return localVarResp.getData();
    }

    /**
     * Filtered list of transactions for an account (v1)
     * Retrieve a filtered list of transactions against an account. Recommended to use the v3 endpoint instead. * &#x60;dateRangeFrom&#x60; - A millisecond epoch time specifying the date range start date. * &#x60;dateRangeTo&#x60; - A millisecond epoch time specifying the date range end date. * &#x60;searchKeyword&#x60; - Search term to filter by from the reference field (&#x60;myRef&#x60;). * &#x60;transactionTypes&#x60; - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types. * &#x60;offset&#x60; - The page offset. Defaults to 0. This is the record number that the returned list will start at. E.g. offset &#x3D; 40 and limit &#x3D; 20 will return records 40 to 59. 
     * @param ican  (required)
     * @param dateRangeFrom  (required)
     * @param dateRangeTo  (required)
     * @param searchKeyword  (required)
     * @param transactionTypes  (required)
     * @param offset  (required)
     * @return ApiResponse&lt;CardTransactionsv1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of transaction objects for the account with a count (&#x60;total&#x60;) filtered by the specified query parameter. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CardTransactionsv1> getTransactionsByAccountIdFilteredWithHttpInfo(Long ican, Long dateRangeFrom, Long dateRangeTo, String searchKeyword, List<String> transactionTypes, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getTransactionsByAccountIdFilteredValidateBeforeCall(ican, dateRangeFrom, dateRangeTo, searchKeyword, transactionTypes, offset, null);
        Type localVarReturnType = new TypeToken<CardTransactionsv1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Filtered list of transactions for an account (v1) (asynchronously)
     * Retrieve a filtered list of transactions against an account. Recommended to use the v3 endpoint instead. * &#x60;dateRangeFrom&#x60; - A millisecond epoch time specifying the date range start date. * &#x60;dateRangeTo&#x60; - A millisecond epoch time specifying the date range end date. * &#x60;searchKeyword&#x60; - Search term to filter by from the reference field (&#x60;myRef&#x60;). * &#x60;transactionTypes&#x60; - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types. * &#x60;offset&#x60; - The page offset. Defaults to 0. This is the record number that the returned list will start at. E.g. offset &#x3D; 40 and limit &#x3D; 20 will return records 40 to 59. 
     * @param ican  (required)
     * @param dateRangeFrom  (required)
     * @param dateRangeTo  (required)
     * @param searchKeyword  (required)
     * @param transactionTypes  (required)
     * @param offset  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of transaction objects for the account with a count (&#x60;total&#x60;) filtered by the specified query parameter. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getTransactionsByAccountIdFilteredAsync(Long ican, Long dateRangeFrom, Long dateRangeTo, String searchKeyword, List<String> transactionTypes, Long offset, final ApiCallback<CardTransactionsv1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionsByAccountIdFilteredValidateBeforeCall(ican, dateRangeFrom, dateRangeTo, searchKeyword, transactionTypes, offset, _callback);
        Type localVarReturnType = new TypeToken<CardTransactionsv1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactionsByAccountIdv1
     * @param ican  (required)
     * @param limit  (required)
     * @param offset  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of transaction objects for the account with a count (&#x60;total&#x60;). </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getTransactionsByAccountIdv1Call(Long ican, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/accounts/{ican}/transactions"
            .replace("{" + "ican" + "}", localVarApiClient.escapeString(ican.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionsByAccountIdv1ValidateBeforeCall(Long ican, Long limit, Long offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ican' is set
        if (ican == null) {
            throw new ApiException("Missing the required parameter 'ican' when calling getTransactionsByAccountIdv1(Async)");
        }

        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling getTransactionsByAccountIdv1(Async)");
        }

        // verify the required parameter 'offset' is set
        if (offset == null) {
            throw new ApiException("Missing the required parameter 'offset' when calling getTransactionsByAccountIdv1(Async)");
        }

        return getTransactionsByAccountIdv1Call(ican, limit, offset, _callback);

    }

    /**
     * List transactions for an account (v1)
     * Retrieve a list of transactions against an account. Recommended to use the v3 endpoint instead.
     * @param ican  (required)
     * @param limit  (required)
     * @param offset  (required)
     * @return CardTransactionsv1
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of transaction objects for the account with a count (&#x60;total&#x60;). </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CardTransactionsv1 getTransactionsByAccountIdv1(Long ican, Long limit, Long offset) throws ApiException {
        ApiResponse<CardTransactionsv1> localVarResp = getTransactionsByAccountIdv1WithHttpInfo(ican, limit, offset);
        return localVarResp.getData();
    }

    /**
     * List transactions for an account (v1)
     * Retrieve a list of transactions against an account. Recommended to use the v3 endpoint instead.
     * @param ican  (required)
     * @param limit  (required)
     * @param offset  (required)
     * @return ApiResponse&lt;CardTransactionsv1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of transaction objects for the account with a count (&#x60;total&#x60;). </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CardTransactionsv1> getTransactionsByAccountIdv1WithHttpInfo(Long ican, Long limit, Long offset) throws ApiException {
        okhttp3.Call localVarCall = getTransactionsByAccountIdv1ValidateBeforeCall(ican, limit, offset, null);
        Type localVarReturnType = new TypeToken<CardTransactionsv1>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List transactions for an account (v1) (asynchronously)
     * Retrieve a list of transactions against an account. Recommended to use the v3 endpoint instead.
     * @param ican  (required)
     * @param limit  (required)
     * @param offset  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of transaction objects for the account with a count (&#x60;total&#x60;). </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getTransactionsByAccountIdv1Async(Long ican, Long limit, Long offset, final ApiCallback<CardTransactionsv1> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionsByAccountIdv1ValidateBeforeCall(ican, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<CardTransactionsv1>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactionsByAccountIdv3
     * @param ican  (required)
     * @param limit  (optional)
     * @param dateRangeFrom  (optional)
     * @param dateRangeTo  (optional)
     * @param startAfter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of transaction objects for the account with a count (&#x60;total&#x60;). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionsByAccountIdv3Call(Long ican, Long limit, Long dateRangeFrom, Long dateRangeTo, String startAfter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/accounts/{ican}/transactions"
            .replace("{" + "ican" + "}", localVarApiClient.escapeString(ican.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (dateRangeFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateRangeFrom", dateRangeFrom));
        }

        if (dateRangeTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateRangeTo", dateRangeTo));
        }

        if (startAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAfter", startAfter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionsByAccountIdv3ValidateBeforeCall(Long ican, Long limit, Long dateRangeFrom, Long dateRangeTo, String startAfter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ican' is set
        if (ican == null) {
            throw new ApiException("Missing the required parameter 'ican' when calling getTransactionsByAccountIdv3(Async)");
        }

        return getTransactionsByAccountIdv3Call(ican, limit, dateRangeFrom, dateRangeTo, startAfter, _callback);

    }

    /**
     * List transactions for an account (v3)
     * Retrieve a list of transactions against an account. Initially, use the optional &#x60;limit&#x60;, &#x60;dateRangeFrom&#x60; and &#x60;dateRangeTo&#x60; query params to limit your query, then use the embedded &#x60;next&#x60; or &#x60;prev&#x60; links in the response to get newer or older pages. 
     * @param ican  (required)
     * @param limit  (optional)
     * @param dateRangeFrom  (optional)
     * @param dateRangeTo  (optional)
     * @param startAfter  (optional)
     * @return CardTransactionsv3
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of transaction objects for the account with a count (&#x60;total&#x60;). </td><td>  -  </td></tr>
     </table>
     */
    public CardTransactionsv3 getTransactionsByAccountIdv3(Long ican, Long limit, Long dateRangeFrom, Long dateRangeTo, String startAfter) throws ApiException {
        ApiResponse<CardTransactionsv3> localVarResp = getTransactionsByAccountIdv3WithHttpInfo(ican, limit, dateRangeFrom, dateRangeTo, startAfter);
        return localVarResp.getData();
    }

    /**
     * List transactions for an account (v3)
     * Retrieve a list of transactions against an account. Initially, use the optional &#x60;limit&#x60;, &#x60;dateRangeFrom&#x60; and &#x60;dateRangeTo&#x60; query params to limit your query, then use the embedded &#x60;next&#x60; or &#x60;prev&#x60; links in the response to get newer or older pages. 
     * @param ican  (required)
     * @param limit  (optional)
     * @param dateRangeFrom  (optional)
     * @param dateRangeTo  (optional)
     * @param startAfter  (optional)
     * @return ApiResponse&lt;CardTransactionsv3&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of transaction objects for the account with a count (&#x60;total&#x60;). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardTransactionsv3> getTransactionsByAccountIdv3WithHttpInfo(Long ican, Long limit, Long dateRangeFrom, Long dateRangeTo, String startAfter) throws ApiException {
        okhttp3.Call localVarCall = getTransactionsByAccountIdv3ValidateBeforeCall(ican, limit, dateRangeFrom, dateRangeTo, startAfter, null);
        Type localVarReturnType = new TypeToken<CardTransactionsv3>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List transactions for an account (v3) (asynchronously)
     * Retrieve a list of transactions against an account. Initially, use the optional &#x60;limit&#x60;, &#x60;dateRangeFrom&#x60; and &#x60;dateRangeTo&#x60; query params to limit your query, then use the embedded &#x60;next&#x60; or &#x60;prev&#x60; links in the response to get newer or older pages. 
     * @param ican  (required)
     * @param limit  (optional)
     * @param dateRangeFrom  (optional)
     * @param dateRangeTo  (optional)
     * @param startAfter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An array of transaction objects for the account with a count (&#x60;total&#x60;). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionsByAccountIdv3Async(Long ican, Long limit, Long dateRangeFrom, Long dateRangeTo, String startAfter, final ApiCallback<CardTransactionsv3> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionsByAccountIdv3ValidateBeforeCall(ican, limit, dateRangeFrom, dateRangeTo, startAfter, _callback);
        Type localVarReturnType = new TypeToken<CardTransactionsv3>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
