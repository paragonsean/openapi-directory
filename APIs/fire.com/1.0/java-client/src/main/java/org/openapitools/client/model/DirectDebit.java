/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Currency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DirectDebit
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:07.131817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DirectDebit {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Long amount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Currency currency;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_DIRECT_DEBIT_REFERENCE = "directDebitReference";
  @SerializedName(SERIALIZED_NAME_DIRECT_DEBIT_REFERENCE)
  private String directDebitReference;

  public static final String SERIALIZED_NAME_DIRECT_DEBIT_UUID = "directDebitUuid";
  @SerializedName(SERIALIZED_NAME_DIRECT_DEBIT_UUID)
  private String directDebitUuid;

  public static final String SERIALIZED_NAME_IS_D_D_I_C = "isDDIC";
  @SerializedName(SERIALIZED_NAME_IS_D_D_I_C)
  private Boolean isDDIC;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_MANDATE_U_UID = "mandateUUid";
  @SerializedName(SERIALIZED_NAME_MANDATE_U_UID)
  private String mandateUUid;

  public static final String SERIALIZED_NAME_ORIGINATOR_ALIAS = "originatorAlias";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_ALIAS)
  private String originatorAlias;

  public static final String SERIALIZED_NAME_ORIGINATOR_NAME = "originatorName";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_NAME)
  private String originatorName;

  public static final String SERIALIZED_NAME_ORIGINATOR_REFERENCE = "originatorReference";
  @SerializedName(SERIALIZED_NAME_ORIGINATOR_REFERENCE)
  private String originatorReference;

  public static final String SERIALIZED_NAME_SCHEME_REJECT_REASON = "schemeRejectReason";
  @SerializedName(SERIALIZED_NAME_SCHEME_REJECT_REASON)
  private String schemeRejectReason;

  /**
   * The reject code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason.
   */
  @JsonAdapter(SchemeRejectReasonCodeEnum.Adapter.class)
  public enum SchemeRejectReasonCodeEnum {
    _0("0"),
    
    _1("1"),
    
    _2("2"),
    
    _3("3"),
    
    _4("4"),
    
    _5("5"),
    
    _6("6"),
    
    _7("7"),
    
    _8("8"),
    
    _9("9"),
    
    A("A"),
    
    B("B");

    private String value;

    SchemeRejectReasonCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SchemeRejectReasonCodeEnum fromValue(String value) {
      for (SchemeRejectReasonCodeEnum b : SchemeRejectReasonCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SchemeRejectReasonCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SchemeRejectReasonCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SchemeRejectReasonCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SchemeRejectReasonCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SchemeRejectReasonCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCHEME_REJECT_REASON_CODE = "schemeRejectReasonCode";
  @SerializedName(SERIALIZED_NAME_SCHEME_REJECT_REASON_CODE)
  private SchemeRejectReasonCodeEnum schemeRejectReasonCode;

  /**
   * The statuses of the direct debit payments associated with the mandate. * &#39;RECIEVED&#39; - Direct Debit has been recieved * &#39;REJECT_REQUESTED&#39; - The direct debit has a rejected request associated with it * &#39;REJECT_READY_FOR_PROCESSING&#39;  * &#39;REJECT_RECORD_IN_PROGRESS&#39; * &#39;REJECT_RECORDED&#39; * &#39;REJECT_FILE_CREATED&#39; * &#39;REJECT_FILE_SENT&#39; * &#39;COLLECTED&#39; - Direct debit collected * &#39;REFUND_REQUESTED&#39; - Refund requested on direct debit * &#39;REFUND_RECORD_IN_PROGRESS&#39; - Refund in progress on direct debit * &#39;REFUND_RECORDED&#39; * &#39;REFUND_FILE_CREATED&#39; * &#39;REFUND_FILE_SENT&#39;  
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    RECIEVED("RECIEVED"),
    
    REJECT_REQUESTED("REJECT_REQUESTED"),
    
    REJECT_READY_FOR_PROCESSING("REJECT_READY_FOR_PROCESSING"),
    
    REJECT_RECORD_IN_PROGRESS("REJECT_RECORD_IN_PROGRESS"),
    
    REJECT_RECORDED("REJECT_RECORDED"),
    
    REJECT_FILE_CREATED("REJECT_FILE_CREATED"),
    
    REJECT_FILE_SENT("REJECT_FILE_SENT"),
    
    COLLECTED("COLLECTED"),
    
    REFUND_REQUESTED("REFUND_REQUESTED"),
    
    REFUND_RECORD_IN_PROGRESS("REFUND_RECORD_IN_PROGRESS"),
    
    REFUND_RECORDED("REFUND_RECORDED"),
    
    REFUND_FILE_CREATED("REFUND_FILE_CREATED"),
    
    REFUND_FILE_SENT("REFUND_FILE_SENT");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TARGET_ICAN = "targetIcan";
  @SerializedName(SERIALIZED_NAME_TARGET_ICAN)
  private Long targetIcan;

  public static final String SERIALIZED_NAME_TARGET_PAYEE_ID = "targetPayeeId";
  @SerializedName(SERIALIZED_NAME_TARGET_PAYEE_ID)
  private Long targetPayeeId;

  /**
   * The type of the direct debit.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    FIRST_COLLECTION("FIRST_COLLECTION"),
    
    ONGOING_COLLECTION("ONGOING_COLLECTION"),
    
    REPRESENTED_COLLECTION("REPRESENTED_COLLECTION"),
    
    FINAL_COLLECTION("FINAL_COLLECTION");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public DirectDebit() {
  }

  public DirectDebit amount(Long amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Value of the payment
   * @return amount
   */
  @javax.annotation.Nullable
  public Long getAmount() {
    return amount;
  }

  public void setAmount(Long amount) {
    this.amount = amount;
  }


  public DirectDebit currency(Currency currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public Currency getCurrency() {
    return currency;
  }

  public void setCurrency(Currency currency) {
    this.currency = currency;
  }


  public DirectDebit dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Date the direct debit was created. Milliseconds since the epoch (1970).
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public DirectDebit directDebitReference(String directDebitReference) {
    this.directDebitReference = directDebitReference;
    return this;
  }

  /**
   * The direct debit reference.
   * @return directDebitReference
   */
  @javax.annotation.Nullable
  public String getDirectDebitReference() {
    return directDebitReference;
  }

  public void setDirectDebitReference(String directDebitReference) {
    this.directDebitReference = directDebitReference;
  }


  public DirectDebit directDebitUuid(String directDebitUuid) {
    this.directDebitUuid = directDebitUuid;
    return this;
  }

  /**
   * The UUID for the direct debit payment
   * @return directDebitUuid
   */
  @javax.annotation.Nullable
  public String getDirectDebitUuid() {
    return directDebitUuid;
  }

  public void setDirectDebitUuid(String directDebitUuid) {
    this.directDebitUuid = directDebitUuid;
  }


  public DirectDebit isDDIC(Boolean isDDIC) {
    this.isDDIC = isDDIC;
    return this;
  }

  /**
   * DDIC is a Direct Debit Indemnity Claim (i.e.a refund). If if the DD is requested to be refunded it is marked isDDIC true.
   * @return isDDIC
   */
  @javax.annotation.Nullable
  public Boolean getIsDDIC() {
    return isDDIC;
  }

  public void setIsDDIC(Boolean isDDIC) {
    this.isDDIC = isDDIC;
  }


  public DirectDebit lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Date the direct debit was last updated. Milliseconds since the epoch (1970).
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public DirectDebit mandateUUid(String mandateUUid) {
    this.mandateUUid = mandateUUid;
    return this;
  }

  /**
   * The UUID for the mandate
   * @return mandateUUid
   */
  @javax.annotation.Nullable
  public String getMandateUUid() {
    return mandateUUid;
  }

  public void setMandateUUid(String mandateUUid) {
    this.mandateUUid = mandateUUid;
  }


  public DirectDebit originatorAlias(String originatorAlias) {
    this.originatorAlias = originatorAlias;
    return this;
  }

  /**
   * The Alias of the party who sets up the direct debit.
   * @return originatorAlias
   */
  @javax.annotation.Nullable
  public String getOriginatorAlias() {
    return originatorAlias;
  }

  public void setOriginatorAlias(String originatorAlias) {
    this.originatorAlias = originatorAlias;
  }


  public DirectDebit originatorName(String originatorName) {
    this.originatorName = originatorName;
    return this;
  }

  /**
   * The creator of the party who sets up the direct debit.
   * @return originatorName
   */
  @javax.annotation.Nullable
  public String getOriginatorName() {
    return originatorName;
  }

  public void setOriginatorName(String originatorName) {
    this.originatorName = originatorName;
  }


  public DirectDebit originatorReference(String originatorReference) {
    this.originatorReference = originatorReference;
    return this;
  }

  /**
   * Set by party who sets up the direct debit.
   * @return originatorReference
   */
  @javax.annotation.Nullable
  public String getOriginatorReference() {
    return originatorReference;
  }

  public void setOriginatorReference(String originatorReference) {
    this.originatorReference = originatorReference;
  }


  public DirectDebit schemeRejectReason(String schemeRejectReason) {
    this.schemeRejectReason = schemeRejectReason;
    return this;
  }

  /**
   * Reason why rejected
   * @return schemeRejectReason
   */
  @javax.annotation.Nullable
  public String getSchemeRejectReason() {
    return schemeRejectReason;
  }

  public void setSchemeRejectReason(String schemeRejectReason) {
    this.schemeRejectReason = schemeRejectReason;
  }


  public DirectDebit schemeRejectReasonCode(SchemeRejectReasonCodeEnum schemeRejectReasonCode) {
    this.schemeRejectReasonCode = schemeRejectReasonCode;
    return this;
  }

  /**
   * The reject code returned by the bank indicating an issue with the direct debit. Each ARRUD code represents a rejection reason.
   * @return schemeRejectReasonCode
   */
  @javax.annotation.Nullable
  public SchemeRejectReasonCodeEnum getSchemeRejectReasonCode() {
    return schemeRejectReasonCode;
  }

  public void setSchemeRejectReasonCode(SchemeRejectReasonCodeEnum schemeRejectReasonCode) {
    this.schemeRejectReasonCode = schemeRejectReasonCode;
  }


  public DirectDebit status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The statuses of the direct debit payments associated with the mandate. * &#39;RECIEVED&#39; - Direct Debit has been recieved * &#39;REJECT_REQUESTED&#39; - The direct debit has a rejected request associated with it * &#39;REJECT_READY_FOR_PROCESSING&#39;  * &#39;REJECT_RECORD_IN_PROGRESS&#39; * &#39;REJECT_RECORDED&#39; * &#39;REJECT_FILE_CREATED&#39; * &#39;REJECT_FILE_SENT&#39; * &#39;COLLECTED&#39; - Direct debit collected * &#39;REFUND_REQUESTED&#39; - Refund requested on direct debit * &#39;REFUND_RECORD_IN_PROGRESS&#39; - Refund in progress on direct debit * &#39;REFUND_RECORDED&#39; * &#39;REFUND_FILE_CREATED&#39; * &#39;REFUND_FILE_SENT&#39;  
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public DirectDebit targetIcan(Long targetIcan) {
    this.targetIcan = targetIcan;
    return this;
  }

  /**
   * The ican of your fire account that the money was taken from
   * @return targetIcan
   */
  @javax.annotation.Nullable
  public Long getTargetIcan() {
    return targetIcan;
  }

  public void setTargetIcan(Long targetIcan) {
    this.targetIcan = targetIcan;
  }


  public DirectDebit targetPayeeId(Long targetPayeeId) {
    this.targetPayeeId = targetPayeeId;
    return this;
  }

  /**
   * The payee that was created when the DD was processed
   * @return targetPayeeId
   */
  @javax.annotation.Nullable
  public Long getTargetPayeeId() {
    return targetPayeeId;
  }

  public void setTargetPayeeId(Long targetPayeeId) {
    this.targetPayeeId = targetPayeeId;
  }


  public DirectDebit type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the direct debit.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectDebit directDebit = (DirectDebit) o;
    return Objects.equals(this.amount, directDebit.amount) &&
        Objects.equals(this.currency, directDebit.currency) &&
        Objects.equals(this.dateCreated, directDebit.dateCreated) &&
        Objects.equals(this.directDebitReference, directDebit.directDebitReference) &&
        Objects.equals(this.directDebitUuid, directDebit.directDebitUuid) &&
        Objects.equals(this.isDDIC, directDebit.isDDIC) &&
        Objects.equals(this.lastUpdated, directDebit.lastUpdated) &&
        Objects.equals(this.mandateUUid, directDebit.mandateUUid) &&
        Objects.equals(this.originatorAlias, directDebit.originatorAlias) &&
        Objects.equals(this.originatorName, directDebit.originatorName) &&
        Objects.equals(this.originatorReference, directDebit.originatorReference) &&
        Objects.equals(this.schemeRejectReason, directDebit.schemeRejectReason) &&
        Objects.equals(this.schemeRejectReasonCode, directDebit.schemeRejectReasonCode) &&
        Objects.equals(this.status, directDebit.status) &&
        Objects.equals(this.targetIcan, directDebit.targetIcan) &&
        Objects.equals(this.targetPayeeId, directDebit.targetPayeeId) &&
        Objects.equals(this.type, directDebit.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, currency, dateCreated, directDebitReference, directDebitUuid, isDDIC, lastUpdated, mandateUUid, originatorAlias, originatorName, originatorReference, schemeRejectReason, schemeRejectReasonCode, status, targetIcan, targetPayeeId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectDebit {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    directDebitReference: ").append(toIndentedString(directDebitReference)).append("\n");
    sb.append("    directDebitUuid: ").append(toIndentedString(directDebitUuid)).append("\n");
    sb.append("    isDDIC: ").append(toIndentedString(isDDIC)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    mandateUUid: ").append(toIndentedString(mandateUUid)).append("\n");
    sb.append("    originatorAlias: ").append(toIndentedString(originatorAlias)).append("\n");
    sb.append("    originatorName: ").append(toIndentedString(originatorName)).append("\n");
    sb.append("    originatorReference: ").append(toIndentedString(originatorReference)).append("\n");
    sb.append("    schemeRejectReason: ").append(toIndentedString(schemeRejectReason)).append("\n");
    sb.append("    schemeRejectReasonCode: ").append(toIndentedString(schemeRejectReasonCode)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    targetIcan: ").append(toIndentedString(targetIcan)).append("\n");
    sb.append("    targetPayeeId: ").append(toIndentedString(targetPayeeId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("currency");
    openapiFields.add("dateCreated");
    openapiFields.add("directDebitReference");
    openapiFields.add("directDebitUuid");
    openapiFields.add("isDDIC");
    openapiFields.add("lastUpdated");
    openapiFields.add("mandateUUid");
    openapiFields.add("originatorAlias");
    openapiFields.add("originatorName");
    openapiFields.add("originatorReference");
    openapiFields.add("schemeRejectReason");
    openapiFields.add("schemeRejectReasonCode");
    openapiFields.add("status");
    openapiFields.add("targetIcan");
    openapiFields.add("targetPayeeId");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DirectDebit
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DirectDebit.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DirectDebit is not found in the empty JSON string", DirectDebit.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DirectDebit.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DirectDebit` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("currency"));
      }
      if ((jsonObj.get("directDebitReference") != null && !jsonObj.get("directDebitReference").isJsonNull()) && !jsonObj.get("directDebitReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directDebitReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directDebitReference").toString()));
      }
      if ((jsonObj.get("directDebitUuid") != null && !jsonObj.get("directDebitUuid").isJsonNull()) && !jsonObj.get("directDebitUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directDebitUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directDebitUuid").toString()));
      }
      if ((jsonObj.get("mandateUUid") != null && !jsonObj.get("mandateUUid").isJsonNull()) && !jsonObj.get("mandateUUid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mandateUUid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mandateUUid").toString()));
      }
      if ((jsonObj.get("originatorAlias") != null && !jsonObj.get("originatorAlias").isJsonNull()) && !jsonObj.get("originatorAlias").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorAlias` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorAlias").toString()));
      }
      if ((jsonObj.get("originatorName") != null && !jsonObj.get("originatorName").isJsonNull()) && !jsonObj.get("originatorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorName").toString()));
      }
      if ((jsonObj.get("originatorReference") != null && !jsonObj.get("originatorReference").isJsonNull()) && !jsonObj.get("originatorReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originatorReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originatorReference").toString()));
      }
      if ((jsonObj.get("schemeRejectReason") != null && !jsonObj.get("schemeRejectReason").isJsonNull()) && !jsonObj.get("schemeRejectReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemeRejectReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemeRejectReason").toString()));
      }
      if ((jsonObj.get("schemeRejectReasonCode") != null && !jsonObj.get("schemeRejectReasonCode").isJsonNull()) && !jsonObj.get("schemeRejectReasonCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemeRejectReasonCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemeRejectReasonCode").toString()));
      }
      // validate the optional field `schemeRejectReasonCode`
      if (jsonObj.get("schemeRejectReasonCode") != null && !jsonObj.get("schemeRejectReasonCode").isJsonNull()) {
        SchemeRejectReasonCodeEnum.validateJsonElement(jsonObj.get("schemeRejectReasonCode"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DirectDebit.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DirectDebit' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DirectDebit> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DirectDebit.class));

       return (TypeAdapter<T>) new TypeAdapter<DirectDebit>() {
           @Override
           public void write(JsonWriter out, DirectDebit value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DirectDebit read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DirectDebit given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DirectDebit
   * @throws IOException if the JSON string is invalid with respect to DirectDebit
   */
  public static DirectDebit fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DirectDebit.class);
  }

  /**
   * Convert an instance of DirectDebit to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

