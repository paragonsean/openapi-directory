/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.OrderDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NewPaymentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:07.131817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NewPaymentRequest {
  public static final String SERIALIZED_NAME_ADDITIONAL_FIELDS = "additionalFields";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_FIELDS)
  private String additionalFields;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Long amount;

  public static final String SERIALIZED_NAME_COLLECT_FIELDS = "collectFields";
  @SerializedName(SERIALIZED_NAME_COLLECT_FIELDS)
  private String collectFields;

  /**
   * Either &#x60;EUR&#x60; or &#x60;GBP&#x60;, and must correspond to the currency of the account the funds are being lodged into in the &#x60;icanTo&#x60;.
   */
  @JsonAdapter(CurrencyEnum.Adapter.class)
  public enum CurrencyEnum {
    EUR("EUR"),
    
    GBP("GBP");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CurrencyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrencyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrencyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CurrencyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CurrencyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private CurrencyEnum currency;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EXPIRY = "expiry";
  @SerializedName(SERIALIZED_NAME_EXPIRY)
  private OffsetDateTime expiry;

  public static final String SERIALIZED_NAME_ICAN_TO = "icanTo";
  @SerializedName(SERIALIZED_NAME_ICAN_TO)
  private Long icanTo;

  public static final String SERIALIZED_NAME_MANDATORY_FIELDS = "mandatoryFields";
  @SerializedName(SERIALIZED_NAME_MANDATORY_FIELDS)
  private String mandatoryFields;

  public static final String SERIALIZED_NAME_MAX_NUMBER_PAYMENTS = "maxNumberPayments";
  @SerializedName(SERIALIZED_NAME_MAX_NUMBER_PAYMENTS)
  private Integer maxNumberPayments;

  public static final String SERIALIZED_NAME_MY_REF = "myRef";
  @SerializedName(SERIALIZED_NAME_MY_REF)
  private String myRef;

  public static final String SERIALIZED_NAME_ORDER_DETAILS = "orderDetails";
  @SerializedName(SERIALIZED_NAME_ORDER_DETAILS)
  private OrderDetails orderDetails;

  public static final String SERIALIZED_NAME_RETURN_URL = "returnUrl";
  @SerializedName(SERIALIZED_NAME_RETURN_URL)
  private String returnUrl;

  /**
   * The type of Fire Open Payment that was created
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    OTHER("OTHER");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public NewPaymentRequest() {
  }

  public NewPaymentRequest additionalFields(String additionalFields) {
    this.additionalFields = additionalFields;
    return this;
  }

  /**
   * These fields will be dispalyed to the payer when using the hosted option. You can choose to display any of &#x60;ORDER_ID&#x60;, &#x60;PRODUCT_ID&#x60;, &#x60;CUSTOMER_ID&#x60;, &#x60;CUSTOMER_NUMBER&#x60; and &#x60;COMMENT2&#x60; to the payer.
   * @return additionalFields
   */
  @javax.annotation.Nullable
  public String getAdditionalFields() {
    return additionalFields;
  }

  public void setAdditionalFields(String additionalFields) {
    this.additionalFields = additionalFields;
  }


  public NewPaymentRequest amount(Long amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The requested amount to pay. Note the last two digits represent pennies/cents, (e.g., £1.00 &#x3D; 100).
   * @return amount
   */
  @javax.annotation.Nullable
  public Long getAmount() {
    return amount;
  }

  public void setAmount(Long amount) {
    this.amount = amount;
  }


  public NewPaymentRequest collectFields(String collectFields) {
    this.collectFields = collectFields;
    return this;
  }

  /**
   * For the hosted option, the payer will be asked to fill in these fields but they will not be mandatory. You can choose to collect any of the payer&#39;s &#x60;ADDRESS&#x60;, &#x60;REFERENCE&#x60; and/or &#x60;COMMENT1&#x60;. If you choose to collect these fields from the payer, you cannot set &#39;delivery’, &#39;variableReference’ or &#39;comment1’ fields respectively.
   * @return collectFields
   */
  @javax.annotation.Nullable
  public String getCollectFields() {
    return collectFields;
  }

  public void setCollectFields(String collectFields) {
    this.collectFields = collectFields;
  }


  public NewPaymentRequest currency(CurrencyEnum currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Either &#x60;EUR&#x60; or &#x60;GBP&#x60;, and must correspond to the currency of the account the funds are being lodged into in the &#x60;icanTo&#x60;.
   * @return currency
   */
  @javax.annotation.Nonnull
  public CurrencyEnum getCurrency() {
    return currency;
  }

  public void setCurrency(CurrencyEnum currency) {
    this.currency = currency;
  }


  public NewPaymentRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A public facing description of the request. This will be shown to the user when they tap or scan the request.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public NewPaymentRequest expiry(OffsetDateTime expiry) {
    this.expiry = expiry;
    return this;
  }

  /**
   * This is the expiry of the payment request. After this time, the payment cannot be paid.
   * @return expiry
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiry() {
    return expiry;
  }

  public void setExpiry(OffsetDateTime expiry) {
    this.expiry = expiry;
  }


  public NewPaymentRequest icanTo(Long icanTo) {
    this.icanTo = icanTo;
    return this;
  }

  /**
   * The ican of the account to collect the funds into. Must be one of your fire.com Accounts.
   * @return icanTo
   */
  @javax.annotation.Nonnull
  public Long getIcanTo() {
    return icanTo;
  }

  public void setIcanTo(Long icanTo) {
    this.icanTo = icanTo;
  }


  public NewPaymentRequest mandatoryFields(String mandatoryFields) {
    this.mandatoryFields = mandatoryFields;
    return this;
  }

  /**
   * For the hosted option, these fields will be madatory for the payer to fill in on the hosted payment page. You can choose to collect any the payer&#39;s &#x60;ADDRESS&#x60;, &#x60;REFERENCE&#x60; and/or &#x60;COMMENT1&#x60;. If you choose to collect these fields from the payer, you cannot set &#39;delivery’, &#39;variableReference’ or &#39;comment1’ fields respectively.
   * @return mandatoryFields
   */
  @javax.annotation.Nullable
  public String getMandatoryFields() {
    return mandatoryFields;
  }

  public void setMandatoryFields(String mandatoryFields) {
    this.mandatoryFields = mandatoryFields;
  }


  public NewPaymentRequest maxNumberPayments(Integer maxNumberPayments) {
    this.maxNumberPayments = maxNumberPayments;
    return this;
  }

  /**
   * The max number of people who can pay this request. Must be set to 1 for the ECOMMERCE_GOODS and ECOMMERCE_SERVICES types.
   * @return maxNumberPayments
   */
  @javax.annotation.Nullable
  public Integer getMaxNumberPayments() {
    return maxNumberPayments;
  }

  public void setMaxNumberPayments(Integer maxNumberPayments) {
    this.maxNumberPayments = maxNumberPayments;
  }


  public NewPaymentRequest myRef(String myRef) {
    this.myRef = myRef;
    return this;
  }

  /**
   * An internal description of the request.
   * @return myRef
   */
  @javax.annotation.Nonnull
  public String getMyRef() {
    return myRef;
  }

  public void setMyRef(String myRef) {
    this.myRef = myRef;
  }


  public NewPaymentRequest orderDetails(OrderDetails orderDetails) {
    this.orderDetails = orderDetails;
    return this;
  }

  /**
   * Get orderDetails
   * @return orderDetails
   */
  @javax.annotation.Nullable
  public OrderDetails getOrderDetails() {
    return orderDetails;
  }

  public void setOrderDetails(OrderDetails orderDetails) {
    this.orderDetails = orderDetails;
  }


  public NewPaymentRequest returnUrl(String returnUrl) {
    this.returnUrl = returnUrl;
    return this;
  }

  /**
   * The merchant return URL where the customer will be re-directed to with the result of the transaction.
   * @return returnUrl
   */
  @javax.annotation.Nullable
  public String getReturnUrl() {
    return returnUrl;
  }

  public void setReturnUrl(String returnUrl) {
    this.returnUrl = returnUrl;
  }


  public NewPaymentRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of Fire Open Payment that was created
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewPaymentRequest newPaymentRequest = (NewPaymentRequest) o;
    return Objects.equals(this.additionalFields, newPaymentRequest.additionalFields) &&
        Objects.equals(this.amount, newPaymentRequest.amount) &&
        Objects.equals(this.collectFields, newPaymentRequest.collectFields) &&
        Objects.equals(this.currency, newPaymentRequest.currency) &&
        Objects.equals(this.description, newPaymentRequest.description) &&
        Objects.equals(this.expiry, newPaymentRequest.expiry) &&
        Objects.equals(this.icanTo, newPaymentRequest.icanTo) &&
        Objects.equals(this.mandatoryFields, newPaymentRequest.mandatoryFields) &&
        Objects.equals(this.maxNumberPayments, newPaymentRequest.maxNumberPayments) &&
        Objects.equals(this.myRef, newPaymentRequest.myRef) &&
        Objects.equals(this.orderDetails, newPaymentRequest.orderDetails) &&
        Objects.equals(this.returnUrl, newPaymentRequest.returnUrl) &&
        Objects.equals(this.type, newPaymentRequest.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalFields, amount, collectFields, currency, description, expiry, icanTo, mandatoryFields, maxNumberPayments, myRef, orderDetails, returnUrl, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewPaymentRequest {\n");
    sb.append("    additionalFields: ").append(toIndentedString(additionalFields)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    collectFields: ").append(toIndentedString(collectFields)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
    sb.append("    icanTo: ").append(toIndentedString(icanTo)).append("\n");
    sb.append("    mandatoryFields: ").append(toIndentedString(mandatoryFields)).append("\n");
    sb.append("    maxNumberPayments: ").append(toIndentedString(maxNumberPayments)).append("\n");
    sb.append("    myRef: ").append(toIndentedString(myRef)).append("\n");
    sb.append("    orderDetails: ").append(toIndentedString(orderDetails)).append("\n");
    sb.append("    returnUrl: ").append(toIndentedString(returnUrl)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalFields");
    openapiFields.add("amount");
    openapiFields.add("collectFields");
    openapiFields.add("currency");
    openapiFields.add("description");
    openapiFields.add("expiry");
    openapiFields.add("icanTo");
    openapiFields.add("mandatoryFields");
    openapiFields.add("maxNumberPayments");
    openapiFields.add("myRef");
    openapiFields.add("orderDetails");
    openapiFields.add("returnUrl");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currency");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("icanTo");
    openapiRequiredFields.add("myRef");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NewPaymentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewPaymentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewPaymentRequest is not found in the empty JSON string", NewPaymentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewPaymentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewPaymentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NewPaymentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("additionalFields") != null && !jsonObj.get("additionalFields").isJsonNull()) && !jsonObj.get("additionalFields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `additionalFields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("additionalFields").toString()));
      }
      if ((jsonObj.get("collectFields") != null && !jsonObj.get("collectFields").isJsonNull()) && !jsonObj.get("collectFields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collectFields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collectFields").toString()));
      }
      if (!jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      // validate the required field `currency`
      CurrencyEnum.validateJsonElement(jsonObj.get("currency"));
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("mandatoryFields") != null && !jsonObj.get("mandatoryFields").isJsonNull()) && !jsonObj.get("mandatoryFields").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mandatoryFields` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mandatoryFields").toString()));
      }
      if (!jsonObj.get("myRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `myRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("myRef").toString()));
      }
      // validate the optional field `orderDetails`
      if (jsonObj.get("orderDetails") != null && !jsonObj.get("orderDetails").isJsonNull()) {
        OrderDetails.validateJsonElement(jsonObj.get("orderDetails"));
      }
      if ((jsonObj.get("returnUrl") != null && !jsonObj.get("returnUrl").isJsonNull()) && !jsonObj.get("returnUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnUrl").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewPaymentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewPaymentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewPaymentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewPaymentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<NewPaymentRequest>() {
           @Override
           public void write(JsonWriter out, NewPaymentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewPaymentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NewPaymentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NewPaymentRequest
   * @throws IOException if the JSON string is invalid with respect to NewPaymentRequest
   */
  public static NewPaymentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewPaymentRequest.class);
  }

  /**
   * Convert an instance of NewPaymentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

