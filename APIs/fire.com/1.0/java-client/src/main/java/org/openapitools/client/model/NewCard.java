/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NewCard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:07.131817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NewCard {
  public static final String SERIALIZED_NAME_ACCEPT_FEES_AND_CHARGES = "acceptFeesAndCharges";
  @SerializedName(SERIALIZED_NAME_ACCEPT_FEES_AND_CHARGES)
  private Boolean acceptFeesAndCharges;

  /**
   * Gets or Sets addressType
   */
  @JsonAdapter(AddressTypeEnum.Adapter.class)
  public enum AddressTypeEnum {
    HOME("HOME"),
    
    BUSINESS("BUSINESS");

    private String value;

    AddressTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AddressTypeEnum fromValue(String value) {
      for (AddressTypeEnum b : AddressTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AddressTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AddressTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AddressTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AddressTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AddressTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADDRESS_TYPE = "addressType";
  @SerializedName(SERIALIZED_NAME_ADDRESS_TYPE)
  private AddressTypeEnum addressType;

  public static final String SERIALIZED_NAME_CARD_PIN = "cardPin";
  @SerializedName(SERIALIZED_NAME_CARD_PIN)
  private String cardPin;

  public static final String SERIALIZED_NAME_EUR_ICAN = "eurIcan";
  @SerializedName(SERIALIZED_NAME_EUR_ICAN)
  private Long eurIcan;

  public static final String SERIALIZED_NAME_GBP_ICAN = "gbpIcan";
  @SerializedName(SERIALIZED_NAME_GBP_ICAN)
  private Long gbpIcan;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Long userId;

  public NewCard() {
  }

  public NewCard acceptFeesAndCharges(Boolean acceptFeesAndCharges) {
    this.acceptFeesAndCharges = acceptFeesAndCharges;
    return this;
  }

  /**
   * Get acceptFeesAndCharges
   * @return acceptFeesAndCharges
   */
  @javax.annotation.Nullable
  public Boolean getAcceptFeesAndCharges() {
    return acceptFeesAndCharges;
  }

  public void setAcceptFeesAndCharges(Boolean acceptFeesAndCharges) {
    this.acceptFeesAndCharges = acceptFeesAndCharges;
  }


  public NewCard addressType(AddressTypeEnum addressType) {
    this.addressType = addressType;
    return this;
  }

  /**
   * Get addressType
   * @return addressType
   */
  @javax.annotation.Nullable
  public AddressTypeEnum getAddressType() {
    return addressType;
  }

  public void setAddressType(AddressTypeEnum addressType) {
    this.addressType = addressType;
  }


  public NewCard cardPin(String cardPin) {
    this.cardPin = cardPin;
    return this;
  }

  /**
   * Get cardPin
   * @return cardPin
   */
  @javax.annotation.Nullable
  public String getCardPin() {
    return cardPin;
  }

  public void setCardPin(String cardPin) {
    this.cardPin = cardPin;
  }


  public NewCard eurIcan(Long eurIcan) {
    this.eurIcan = eurIcan;
    return this;
  }

  /**
   * Get eurIcan
   * @return eurIcan
   */
  @javax.annotation.Nullable
  public Long getEurIcan() {
    return eurIcan;
  }

  public void setEurIcan(Long eurIcan) {
    this.eurIcan = eurIcan;
  }


  public NewCard gbpIcan(Long gbpIcan) {
    this.gbpIcan = gbpIcan;
    return this;
  }

  /**
   * Get gbpIcan
   * @return gbpIcan
   */
  @javax.annotation.Nullable
  public Long getGbpIcan() {
    return gbpIcan;
  }

  public void setGbpIcan(Long gbpIcan) {
    this.gbpIcan = gbpIcan;
  }


  public NewCard userId(Long userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public Long getUserId() {
    return userId;
  }

  public void setUserId(Long userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewCard newCard = (NewCard) o;
    return Objects.equals(this.acceptFeesAndCharges, newCard.acceptFeesAndCharges) &&
        Objects.equals(this.addressType, newCard.addressType) &&
        Objects.equals(this.cardPin, newCard.cardPin) &&
        Objects.equals(this.eurIcan, newCard.eurIcan) &&
        Objects.equals(this.gbpIcan, newCard.gbpIcan) &&
        Objects.equals(this.userId, newCard.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptFeesAndCharges, addressType, cardPin, eurIcan, gbpIcan, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewCard {\n");
    sb.append("    acceptFeesAndCharges: ").append(toIndentedString(acceptFeesAndCharges)).append("\n");
    sb.append("    addressType: ").append(toIndentedString(addressType)).append("\n");
    sb.append("    cardPin: ").append(toIndentedString(cardPin)).append("\n");
    sb.append("    eurIcan: ").append(toIndentedString(eurIcan)).append("\n");
    sb.append("    gbpIcan: ").append(toIndentedString(gbpIcan)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceptFeesAndCharges");
    openapiFields.add("addressType");
    openapiFields.add("cardPin");
    openapiFields.add("eurIcan");
    openapiFields.add("gbpIcan");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NewCard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewCard is not found in the empty JSON string", NewCard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewCard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("addressType") != null && !jsonObj.get("addressType").isJsonNull()) && !jsonObj.get("addressType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressType").toString()));
      }
      // validate the optional field `addressType`
      if (jsonObj.get("addressType") != null && !jsonObj.get("addressType").isJsonNull()) {
        AddressTypeEnum.validateJsonElement(jsonObj.get("addressType"));
      }
      if ((jsonObj.get("cardPin") != null && !jsonObj.get("cardPin").isJsonNull()) && !jsonObj.get("cardPin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardPin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardPin").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewCard.class));

       return (TypeAdapter<T>) new TypeAdapter<NewCard>() {
           @Override
           public void write(JsonWriter out, NewCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewCard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NewCard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NewCard
   * @throws IOException if the JSON string is invalid with respect to NewCard
   */
  public static NewCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewCard.class);
  }

  /**
   * Convert an instance of NewCard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

