/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BatchItemInternationalTransferMode1
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:07.131817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchItemInternationalTransferMode1 {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Long amount;

  public static final String SERIALIZED_NAME_ICAN_FROM = "icanFrom";
  @SerializedName(SERIALIZED_NAME_ICAN_FROM)
  private Long icanFrom;

  public static final String SERIALIZED_NAME_MY_REF = "myRef";
  @SerializedName(SERIALIZED_NAME_MY_REF)
  private String myRef;

  public static final String SERIALIZED_NAME_PAYEE_ID = "payeeId";
  @SerializedName(SERIALIZED_NAME_PAYEE_ID)
  private Long payeeId;

  public static final String SERIALIZED_NAME_PAYMENT_REASON = "paymentReason";
  @SerializedName(SERIALIZED_NAME_PAYMENT_REASON)
  private String paymentReason;

  public static final String SERIALIZED_NAME_YOUR_REF = "yourRef";
  @SerializedName(SERIALIZED_NAME_YOUR_REF)
  private String yourRef;

  public BatchItemInternationalTransferMode1() {
  }

  public BatchItemInternationalTransferMode1 amount(Long amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The value of the payment in the beneficiary currency.
   * @return amount
   */
  @javax.annotation.Nullable
  public Long getAmount() {
    return amount;
  }

  public void setAmount(Long amount) {
    this.amount = amount;
  }


  public BatchItemInternationalTransferMode1 icanFrom(Long icanFrom) {
    this.icanFrom = icanFrom;
    return this;
  }

  /**
   * The Fire account ID for the fire.com account the funds are taken from.
   * @return icanFrom
   */
  @javax.annotation.Nullable
  public Long getIcanFrom() {
    return icanFrom;
  }

  public void setIcanFrom(Long icanFrom) {
    this.icanFrom = icanFrom;
  }


  public BatchItemInternationalTransferMode1 myRef(String myRef) {
    this.myRef = myRef;
    return this;
  }

  /**
   * The reference on the transaction for your records - not shown to the beneficiary.
   * @return myRef
   */
  @javax.annotation.Nullable
  public String getMyRef() {
    return myRef;
  }

  public void setMyRef(String myRef) {
    this.myRef = myRef;
  }


  public BatchItemInternationalTransferMode1 payeeId(Long payeeId) {
    this.payeeId = payeeId;
    return this;
  }

  /**
   * The ID of the existing payee
   * @return payeeId
   */
  @javax.annotation.Nullable
  public Long getPayeeId() {
    return payeeId;
  }

  public void setPayeeId(Long payeeId) {
    this.payeeId = payeeId;
  }


  public BatchItemInternationalTransferMode1 paymentReason(String paymentReason) {
    this.paymentReason = paymentReason;
    return this;
  }

  /**
   * The reason for the payment, used for transaction monitoring purposes. Must be one of Invoice Payment|Salary/Dividend Payment|Expenses|Savings|Other
   * @return paymentReason
   */
  @javax.annotation.Nullable
  public String getPaymentReason() {
    return paymentReason;
  }

  public void setPaymentReason(String paymentReason) {
    this.paymentReason = paymentReason;
  }


  public BatchItemInternationalTransferMode1 yourRef(String yourRef) {
    this.yourRef = yourRef;
    return this;
  }

  /**
   * The reference on the transaction - displayed on the beneficiary bank statement.
   * @return yourRef
   */
  @javax.annotation.Nullable
  public String getYourRef() {
    return yourRef;
  }

  public void setYourRef(String yourRef) {
    this.yourRef = yourRef;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchItemInternationalTransferMode1 batchItemInternationalTransferMode1 = (BatchItemInternationalTransferMode1) o;
    return Objects.equals(this.amount, batchItemInternationalTransferMode1.amount) &&
        Objects.equals(this.icanFrom, batchItemInternationalTransferMode1.icanFrom) &&
        Objects.equals(this.myRef, batchItemInternationalTransferMode1.myRef) &&
        Objects.equals(this.payeeId, batchItemInternationalTransferMode1.payeeId) &&
        Objects.equals(this.paymentReason, batchItemInternationalTransferMode1.paymentReason) &&
        Objects.equals(this.yourRef, batchItemInternationalTransferMode1.yourRef);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, icanFrom, myRef, payeeId, paymentReason, yourRef);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchItemInternationalTransferMode1 {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    icanFrom: ").append(toIndentedString(icanFrom)).append("\n");
    sb.append("    myRef: ").append(toIndentedString(myRef)).append("\n");
    sb.append("    payeeId: ").append(toIndentedString(payeeId)).append("\n");
    sb.append("    paymentReason: ").append(toIndentedString(paymentReason)).append("\n");
    sb.append("    yourRef: ").append(toIndentedString(yourRef)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("icanFrom");
    openapiFields.add("myRef");
    openapiFields.add("payeeId");
    openapiFields.add("paymentReason");
    openapiFields.add("yourRef");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchItemInternationalTransferMode1
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchItemInternationalTransferMode1.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchItemInternationalTransferMode1 is not found in the empty JSON string", BatchItemInternationalTransferMode1.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchItemInternationalTransferMode1.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchItemInternationalTransferMode1` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("myRef") != null && !jsonObj.get("myRef").isJsonNull()) && !jsonObj.get("myRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `myRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("myRef").toString()));
      }
      if ((jsonObj.get("paymentReason") != null && !jsonObj.get("paymentReason").isJsonNull()) && !jsonObj.get("paymentReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentReason").toString()));
      }
      if ((jsonObj.get("yourRef") != null && !jsonObj.get("yourRef").isJsonNull()) && !jsonObj.get("yourRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yourRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yourRef").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchItemInternationalTransferMode1.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchItemInternationalTransferMode1' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchItemInternationalTransferMode1> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchItemInternationalTransferMode1.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchItemInternationalTransferMode1>() {
           @Override
           public void write(JsonWriter out, BatchItemInternationalTransferMode1 value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchItemInternationalTransferMode1 read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchItemInternationalTransferMode1 given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchItemInternationalTransferMode1
   * @throws IOException if the JSON string is invalid with respect to BatchItemInternationalTransferMode1
   */
  public static BatchItemInternationalTransferMode1 fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchItemInternationalTransferMode1.class);
  }

  /**
   * Convert an instance of BatchItemInternationalTransferMode1 to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

