/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Currency;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Account
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:07.131817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Account {
  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Long balance;

  public static final String SERIALIZED_NAME_CBIC = "cbic";
  @SerializedName(SERIALIZED_NAME_CBIC)
  private String cbic;

  public static final String SERIALIZED_NAME_CCAN = "ccan";
  @SerializedName(SERIALIZED_NAME_CCAN)
  private String ccan;

  public static final String SERIALIZED_NAME_CIBAN = "ciban";
  @SerializedName(SERIALIZED_NAME_CIBAN)
  private String ciban;

  public static final String SERIALIZED_NAME_CNSC = "cnsc";
  @SerializedName(SERIALIZED_NAME_CNSC)
  private String cnsc;

  public static final String SERIALIZED_NAME_COLOUR = "colour";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_COLOUR)
  private String colour;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Currency currency;

  public static final String SERIALIZED_NAME_DEFAULT_ACCOUNT = "defaultAccount";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ACCOUNT)
  private Boolean defaultAccount;

  public static final String SERIALIZED_NAME_DIRECT_DEBITS_ALLOWED = "directDebitsAllowed";
  @SerializedName(SERIALIZED_NAME_DIRECT_DEBITS_ALLOWED)
  private Boolean directDebitsAllowed;

  public static final String SERIALIZED_NAME_FOP_ONLY = "fopOnly";
  @SerializedName(SERIALIZED_NAME_FOP_ONLY)
  private Boolean fopOnly;

  public static final String SERIALIZED_NAME_ICAN = "ican";
  @SerializedName(SERIALIZED_NAME_ICAN)
  private Long ican;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Live accounts can be used as normal. Migrated accounts were used before Brexit and are read-only.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    LIVE("LIVE"),
    
    BREXIT_MIGRATED("BREXIT_MIGRATED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public Account() {
  }

  public Account balance(Long balance) {
    this.balance = balance;
    return this;
  }

  /**
   * the balance of the account (in minor currency units - pence, cent etc. 434050 &#x3D;&#x3D; 4,340.50 GBP for a GBP account).
   * @return balance
   */
  @javax.annotation.Nullable
  public Long getBalance() {
    return balance;
  }

  public void setBalance(Long balance) {
    this.balance = balance;
  }


  public Account cbic(String cbic) {
    this.cbic = cbic;
    return this;
  }

  /**
   * the BIC of the account (provided if currency is EUR).
   * @return cbic
   */
  @javax.annotation.Nullable
  public String getCbic() {
    return cbic;
  }

  public void setCbic(String cbic) {
    this.cbic = cbic;
  }


  public Account ccan(String ccan) {
    this.ccan = ccan;
    return this;
  }

  /**
   * the Account Number of the account.
   * @return ccan
   */
  @javax.annotation.Nullable
  public String getCcan() {
    return ccan;
  }

  public void setCcan(String ccan) {
    this.ccan = ccan;
  }


  public Account ciban(String ciban) {
    this.ciban = ciban;
    return this;
  }

  /**
   * the IBAN of the account (provided if currency is EUR).
   * @return ciban
   */
  @javax.annotation.Nullable
  public String getCiban() {
    return ciban;
  }

  public void setCiban(String ciban) {
    this.ciban = ciban;
  }


  public Account cnsc(String cnsc) {
    this.cnsc = cnsc;
    return this;
  }

  /**
   * the Sort Code of the account.
   * @return cnsc
   */
  @javax.annotation.Nullable
  public String getCnsc() {
    return cnsc;
  }

  public void setCnsc(String cnsc) {
    this.cnsc = cnsc;
  }


  @Deprecated
  public Account colour(String colour) {
    this.colour = colour;
    return this;
  }

  /**
   * Internal Use
   * @return colour
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getColour() {
    return colour;
  }

  @Deprecated
  public void setColour(String colour) {
    this.colour = colour;
  }


  public Account currency(Currency currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public Currency getCurrency() {
    return currency;
  }

  public void setCurrency(Currency currency) {
    this.currency = currency;
  }


  public Account defaultAccount(Boolean defaultAccount) {
    this.defaultAccount = defaultAccount;
    return this;
  }

  /**
   * true if this is the default account for this currency. This will be the account that general fees are taken from (as opposed to per-transaction fees).
   * @return defaultAccount
   */
  @javax.annotation.Nullable
  public Boolean getDefaultAccount() {
    return defaultAccount;
  }

  public void setDefaultAccount(Boolean defaultAccount) {
    this.defaultAccount = defaultAccount;
  }


  public Account directDebitsAllowed(Boolean directDebitsAllowed) {
    this.directDebitsAllowed = directDebitsAllowed;
    return this;
  }

  /**
   * Whether or not direct debits can be set up on this account.
   * @return directDebitsAllowed
   */
  @javax.annotation.Nullable
  public Boolean getDirectDebitsAllowed() {
    return directDebitsAllowed;
  }

  public void setDirectDebitsAllowed(Boolean directDebitsAllowed) {
    this.directDebitsAllowed = directDebitsAllowed;
  }


  public Account fopOnly(Boolean fopOnly) {
    this.fopOnly = fopOnly;
    return this;
  }

  /**
   * Indicates that this account is for collecting Fire Open Payments only. All other payments to this account will be returned.
   * @return fopOnly
   */
  @javax.annotation.Nullable
  public Boolean getFopOnly() {
    return fopOnly;
  }

  public void setFopOnly(Boolean fopOnly) {
    this.fopOnly = fopOnly;
  }


  public Account ican(Long ican) {
    this.ican = ican;
    return this;
  }

  /**
   * identifier for the fire.com account (assigned by fire.com)
   * @return ican
   */
  @javax.annotation.Nullable
  public Long getIcan() {
    return ican;
  }

  public void setIcan(Long ican) {
    this.ican = ican;
  }


  public Account name(String name) {
    this.name = name;
    return this;
  }

  /**
   * the name the user gives to the account to help them identify it.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Account status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Live accounts can be used as normal. Migrated accounts were used before Brexit and are read-only.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.balance, account.balance) &&
        Objects.equals(this.cbic, account.cbic) &&
        Objects.equals(this.ccan, account.ccan) &&
        Objects.equals(this.ciban, account.ciban) &&
        Objects.equals(this.cnsc, account.cnsc) &&
        Objects.equals(this.colour, account.colour) &&
        Objects.equals(this.currency, account.currency) &&
        Objects.equals(this.defaultAccount, account.defaultAccount) &&
        Objects.equals(this.directDebitsAllowed, account.directDebitsAllowed) &&
        Objects.equals(this.fopOnly, account.fopOnly) &&
        Objects.equals(this.ican, account.ican) &&
        Objects.equals(this.name, account.name) &&
        Objects.equals(this.status, account.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(balance, cbic, ccan, ciban, cnsc, colour, currency, defaultAccount, directDebitsAllowed, fopOnly, ican, name, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    cbic: ").append(toIndentedString(cbic)).append("\n");
    sb.append("    ccan: ").append(toIndentedString(ccan)).append("\n");
    sb.append("    ciban: ").append(toIndentedString(ciban)).append("\n");
    sb.append("    cnsc: ").append(toIndentedString(cnsc)).append("\n");
    sb.append("    colour: ").append(toIndentedString(colour)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    defaultAccount: ").append(toIndentedString(defaultAccount)).append("\n");
    sb.append("    directDebitsAllowed: ").append(toIndentedString(directDebitsAllowed)).append("\n");
    sb.append("    fopOnly: ").append(toIndentedString(fopOnly)).append("\n");
    sb.append("    ican: ").append(toIndentedString(ican)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("balance");
    openapiFields.add("cbic");
    openapiFields.add("ccan");
    openapiFields.add("ciban");
    openapiFields.add("cnsc");
    openapiFields.add("colour");
    openapiFields.add("currency");
    openapiFields.add("defaultAccount");
    openapiFields.add("directDebitsAllowed");
    openapiFields.add("fopOnly");
    openapiFields.add("ican");
    openapiFields.add("name");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Account
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Account` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cbic") != null && !jsonObj.get("cbic").isJsonNull()) && !jsonObj.get("cbic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cbic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cbic").toString()));
      }
      if ((jsonObj.get("ccan") != null && !jsonObj.get("ccan").isJsonNull()) && !jsonObj.get("ccan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ccan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ccan").toString()));
      }
      if ((jsonObj.get("ciban") != null && !jsonObj.get("ciban").isJsonNull()) && !jsonObj.get("ciban").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ciban` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ciban").toString()));
      }
      if ((jsonObj.get("cnsc") != null && !jsonObj.get("cnsc").isJsonNull()) && !jsonObj.get("cnsc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cnsc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cnsc").toString()));
      }
      if ((jsonObj.get("colour") != null && !jsonObj.get("colour").isJsonNull()) && !jsonObj.get("colour").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colour` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colour").toString()));
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("currency"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Account given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Account
   * @throws IOException if the JSON string is invalid with respect to Account
   */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

  /**
   * Convert an instance of Account to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

