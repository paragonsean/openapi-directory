/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BatchItemDetails;
import org.openapitools.client.model.Currency;
import org.openapitools.client.model.DirectDebitDetails;
import org.openapitools.client.model.FxTrade;
import org.openapitools.client.model.ProprietarySchemeDetailsInner;
import org.openapitools.client.model.RelatedCard;
import org.openapitools.client.model.RelatedParty;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Transaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:07.131817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Transaction {
  public static final String SERIALIZED_NAME_AMOUNT_AFTER_CHARGES = "amountAfterCharges";
  @SerializedName(SERIALIZED_NAME_AMOUNT_AFTER_CHARGES)
  private Long amountAfterCharges;

  public static final String SERIALIZED_NAME_AMOUNT_BEFORE_CHARGES = "amountBeforeCharges";
  @SerializedName(SERIALIZED_NAME_AMOUNT_BEFORE_CHARGES)
  private Long amountBeforeCharges;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Long balance;

  public static final String SERIALIZED_NAME_BATCH_ITEM_DETAILS = "batchItemDetails";
  @SerializedName(SERIALIZED_NAME_BATCH_ITEM_DETAILS)
  private BatchItemDetails batchItemDetails;

  public static final String SERIALIZED_NAME_CARD = "card";
  @SerializedName(SERIALIZED_NAME_CARD)
  private RelatedCard card;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private Currency currency;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_DATE_ACKNOWLEDGED = "dateAcknowledged";
  @SerializedName(SERIALIZED_NAME_DATE_ACKNOWLEDGED)
  private OffsetDateTime dateAcknowledged;

  public static final String SERIALIZED_NAME_DIRECT_DEBIT_DETAILS = "directDebitDetails";
  @SerializedName(SERIALIZED_NAME_DIRECT_DEBIT_DETAILS)
  private DirectDebitDetails directDebitDetails;

  public static final String SERIALIZED_NAME_EVENT_UUID = "eventUuid";
  @SerializedName(SERIALIZED_NAME_EVENT_UUID)
  private String eventUuid;

  public static final String SERIALIZED_NAME_FEE_AMOUNT = "feeAmount";
  @SerializedName(SERIALIZED_NAME_FEE_AMOUNT)
  private Long feeAmount;

  public static final String SERIALIZED_NAME_FX_TRADE_DETAILS = "fxTradeDetails";
  @SerializedName(SERIALIZED_NAME_FX_TRADE_DETAILS)
  private FxTrade fxTradeDetails;

  public static final String SERIALIZED_NAME_ICAN = "ican";
  @SerializedName(SERIALIZED_NAME_ICAN)
  private Long ican;

  public static final String SERIALIZED_NAME_MY_REF = "myRef";
  @SerializedName(SERIALIZED_NAME_MY_REF)
  private String myRef;

  public static final String SERIALIZED_NAME_PAYMENT_REQUEST_PUBLIC_CODE = "paymentRequestPublicCode";
  @SerializedName(SERIALIZED_NAME_PAYMENT_REQUEST_PUBLIC_CODE)
  private String paymentRequestPublicCode;

  public static final String SERIALIZED_NAME_PROPRIETARY_SCHEME_DETAILS = "proprietarySchemeDetails";
  @SerializedName(SERIALIZED_NAME_PROPRIETARY_SCHEME_DETAILS)
  private List<ProprietarySchemeDetailsInner> proprietarySchemeDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_REF_ID = "refId";
  @SerializedName(SERIALIZED_NAME_REF_ID)
  private Long refId;

  public static final String SERIALIZED_NAME_RELATED_PARTY = "relatedParty";
  @SerializedName(SERIALIZED_NAME_RELATED_PARTY)
  private RelatedParty relatedParty;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "taxAmount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private Long taxAmount;

  public static final String SERIALIZED_NAME_TXN_ID = "txnId";
  @SerializedName(SERIALIZED_NAME_TXN_ID)
  private Long txnId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_YOUR_REF = "yourRef";
  @SerializedName(SERIALIZED_NAME_YOUR_REF)
  private String yourRef;

  public Transaction() {
  }

  public Transaction amountAfterCharges(Long amountAfterCharges) {
    this.amountAfterCharges = amountAfterCharges;
    return this;
  }

  /**
   * Net amount lodged or taken from the account after fees and charges were applied.
   * @return amountAfterCharges
   */
  @javax.annotation.Nullable
  public Long getAmountAfterCharges() {
    return amountAfterCharges;
  }

  public void setAmountAfterCharges(Long amountAfterCharges) {
    this.amountAfterCharges = amountAfterCharges;
  }


  public Transaction amountBeforeCharges(Long amountBeforeCharges) {
    this.amountBeforeCharges = amountBeforeCharges;
    return this;
  }

  /**
   * Amount of the transaction before the fees and taxes were applied.
   * @return amountBeforeCharges
   */
  @javax.annotation.Nullable
  public Long getAmountBeforeCharges() {
    return amountBeforeCharges;
  }

  public void setAmountBeforeCharges(Long amountBeforeCharges) {
    this.amountBeforeCharges = amountBeforeCharges;
  }


  public Transaction balance(Long balance) {
    this.balance = balance;
    return this;
  }

  /**
   * the balance of the account (in minor currency units - pence, cent etc. 434050 &#x3D;&#x3D; 4,340.50 GBP for a GBP account).
   * @return balance
   */
  @javax.annotation.Nullable
  public Long getBalance() {
    return balance;
  }

  public void setBalance(Long balance) {
    this.balance = balance;
  }


  public Transaction batchItemDetails(BatchItemDetails batchItemDetails) {
    this.batchItemDetails = batchItemDetails;
    return this;
  }

  /**
   * Get batchItemDetails
   * @return batchItemDetails
   */
  @javax.annotation.Nullable
  public BatchItemDetails getBatchItemDetails() {
    return batchItemDetails;
  }

  public void setBatchItemDetails(BatchItemDetails batchItemDetails) {
    this.batchItemDetails = batchItemDetails;
  }


  public Transaction card(RelatedCard card) {
    this.card = card;
    return this;
  }

  /**
   * Get card
   * @return card
   */
  @javax.annotation.Nullable
  public RelatedCard getCard() {
    return card;
  }

  public void setCard(RelatedCard card) {
    this.card = card;
  }


  public Transaction currency(Currency currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public Currency getCurrency() {
    return currency;
  }

  public void setCurrency(Currency currency) {
    this.currency = currency;
  }


  public Transaction date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Date of the transaction
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public Transaction dateAcknowledged(OffsetDateTime dateAcknowledged) {
    this.dateAcknowledged = dateAcknowledged;
    return this;
  }

  /**
   * Get dateAcknowledged
   * @return dateAcknowledged
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateAcknowledged() {
    return dateAcknowledged;
  }

  public void setDateAcknowledged(OffsetDateTime dateAcknowledged) {
    this.dateAcknowledged = dateAcknowledged;
  }


  public Transaction directDebitDetails(DirectDebitDetails directDebitDetails) {
    this.directDebitDetails = directDebitDetails;
    return this;
  }

  /**
   * Get directDebitDetails
   * @return directDebitDetails
   */
  @javax.annotation.Nullable
  public DirectDebitDetails getDirectDebitDetails() {
    return directDebitDetails;
  }

  public void setDirectDebitDetails(DirectDebitDetails directDebitDetails) {
    this.directDebitDetails = directDebitDetails;
  }


  public Transaction eventUuid(String eventUuid) {
    this.eventUuid = eventUuid;
    return this;
  }

  /**
   * An internal Fire reference for the transaction (UUID)
   * @return eventUuid
   */
  @javax.annotation.Nullable
  public String getEventUuid() {
    return eventUuid;
  }

  public void setEventUuid(String eventUuid) {
    this.eventUuid = eventUuid;
  }


  public Transaction feeAmount(Long feeAmount) {
    this.feeAmount = feeAmount;
    return this;
  }

  /**
   * The amount of the fee, if any.
   * @return feeAmount
   */
  @javax.annotation.Nullable
  public Long getFeeAmount() {
    return feeAmount;
  }

  public void setFeeAmount(Long feeAmount) {
    this.feeAmount = feeAmount;
  }


  public Transaction fxTradeDetails(FxTrade fxTradeDetails) {
    this.fxTradeDetails = fxTradeDetails;
    return this;
  }

  /**
   * Get fxTradeDetails
   * @return fxTradeDetails
   */
  @javax.annotation.Nullable
  public FxTrade getFxTradeDetails() {
    return fxTradeDetails;
  }

  public void setFxTradeDetails(FxTrade fxTradeDetails) {
    this.fxTradeDetails = fxTradeDetails;
  }


  public Transaction ican(Long ican) {
    this.ican = ican;
    return this;
  }

  /**
   * identifier for the fire.com account (assigned by fire.com) This field is only used in the condensed version.
   * @return ican
   */
  @javax.annotation.Nullable
  public Long getIcan() {
    return ican;
  }

  public void setIcan(Long ican) {
    this.ican = ican;
  }


  public Transaction myRef(String myRef) {
    this.myRef = myRef;
    return this;
  }

  /**
   * The comment/reference on the transaction
   * @return myRef
   */
  @javax.annotation.Nullable
  public String getMyRef() {
    return myRef;
  }

  public void setMyRef(String myRef) {
    this.myRef = myRef;
  }


  public Transaction paymentRequestPublicCode(String paymentRequestPublicCode) {
    this.paymentRequestPublicCode = paymentRequestPublicCode;
    return this;
  }

  /**
   * (FOP payments only) The FOP Payment Code that was used to make this payment.
   * @return paymentRequestPublicCode
   */
  @javax.annotation.Nullable
  public String getPaymentRequestPublicCode() {
    return paymentRequestPublicCode;
  }

  public void setPaymentRequestPublicCode(String paymentRequestPublicCode) {
    this.paymentRequestPublicCode = paymentRequestPublicCode;
  }


  public Transaction proprietarySchemeDetails(List<ProprietarySchemeDetailsInner> proprietarySchemeDetails) {
    this.proprietarySchemeDetails = proprietarySchemeDetails;
    return this;
  }

  public Transaction addProprietarySchemeDetailsItem(ProprietarySchemeDetailsInner proprietarySchemeDetailsItem) {
    if (this.proprietarySchemeDetails == null) {
      this.proprietarySchemeDetails = new ArrayList<>();
    }
    this.proprietarySchemeDetails.add(proprietarySchemeDetailsItem);
    return this;
  }

  /**
   * Extra details about the transaction based on the scheme used to make the payment.
   * @return proprietarySchemeDetails
   */
  @javax.annotation.Nullable
  public List<ProprietarySchemeDetailsInner> getProprietarySchemeDetails() {
    return proprietarySchemeDetails;
  }

  public void setProprietarySchemeDetails(List<ProprietarySchemeDetailsInner> proprietarySchemeDetails) {
    this.proprietarySchemeDetails = proprietarySchemeDetails;
  }


  public Transaction refId(Long refId) {
    this.refId = refId;
    return this;
  }

  /**
   * The id of the transaction.
   * @return refId
   */
  @javax.annotation.Nullable
  public Long getRefId() {
    return refId;
  }

  public void setRefId(Long refId) {
    this.refId = refId;
  }


  public Transaction relatedParty(RelatedParty relatedParty) {
    this.relatedParty = relatedParty;
    return this;
  }

  /**
   * Get relatedParty
   * @return relatedParty
   */
  @javax.annotation.Nullable
  public RelatedParty getRelatedParty() {
    return relatedParty;
  }

  public void setRelatedParty(RelatedParty relatedParty) {
    this.relatedParty = relatedParty;
  }


  public Transaction taxAmount(Long taxAmount) {
    this.taxAmount = taxAmount;
    return this;
  }

  /**
   * The amount of the tax, if any (e.g. Stamp duty for ATM transactions)
   * @return taxAmount
   */
  @javax.annotation.Nullable
  public Long getTaxAmount() {
    return taxAmount;
  }

  public void setTaxAmount(Long taxAmount) {
    this.taxAmount = taxAmount;
  }


  public Transaction txnId(Long txnId) {
    this.txnId = txnId;
    return this;
  }

  /**
   * The id of this side of the transaction (each transaction has two sides - a to and a from). This is used to get the details of the transaction.
   * @return txnId
   */
  @javax.annotation.Nullable
  public Long getTxnId() {
    return txnId;
  }

  public void setTxnId(Long txnId) {
    this.txnId = txnId;
  }


  public Transaction type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the transaction: * &#x60;LODGEMENT&#x60; - Bank Transfer received * &#x60;PIS_LODGEMENT&#x60; - Fire Open Payments Lodgement received * &#x60;MANUAL_TRANSFER&#x60; - Manual Transfer to * &#x60;WITHDRAWAL&#x60; - Bank Transfer sent * &#x60;REVERSAL&#x60; - Credit Reversal * &#x60;DIRECT_DEBIT&#x60; - A direct debit. * &#x60;DIRECT_DEBIT_REPRESENTED&#x60; - A Direct Debit that was requested again after initially failing. * &#x60;DIRECT_DEBIT_REFUND&#x60; - A refund of a Direct debit. * &#x60;INTERNAL_TRANSFER_TO&#x60; - Internal Transfer sent (between two of my accounts of the same currency) * &#x60;INTERNAL_TRANSFER_FROM&#x60; - Internal Transfer received (between two of my accounts of the same currency) * &#x60;WITHDRAWAL_RETURNED&#x60; - Bank Transfer sent returned * &#x60;LODGEMENT_REVERSED&#x60; - Bank Transfer received returned * &#x60;FX_INTERNAL_TRANSFER_FROM&#x60; - FX Internal Transfer received (between two of my accounts of different currency) * &#x60;FX_INTERNAL_TRANSFER_TO&#x60; - FX Internal Transfer sent (between two of my accounts of different currency) * &#x60;CREATE_CARD&#x60; - The fee taken when a debit card is issued. * &#x60;ADD_ACCOUNT&#x60; - The fee taken when an account is created. * &#x60;CREATE_ADDITIONAL_USER&#x60; - The fee taken when an additional user is created.        * &#x60;CARD_POS_CONTACT_DEBIT&#x60; - Card used in store; read by magnetic stripe or pin * &#x60;CARD_POS_CONTACT_CREDIT&#x60; - Card used in store; read by magnetic stripe or pin * &#x60;CARD_POS_CONTACTLESS_DEBIT&#x60; - Card used in store; read by NFC * &#x60;CARD_POS_CONTACTLESS_CREDIT&#x60; - Card used in store; read by NFC * &#x60;CARD_ECOMMERCE_DEBIT&#x60; - Card used on the internet * &#x60;CARD_ECOMMERCE_CREDIT&#x60; - Card used on the internet * &#x60;CARD_ATM_DEBIT&#x60; - Card used in an ATM * &#x60;CARD_ATM_CREDIT&#x60; - Card used in an ATM * &#x60;CARD_INTERNATIONAL_POS_CONTACT_DEBIT&#x60; - Card used in store in non-processing currency; read by magnetic stripe or pin * &#x60;CARD_INTERNATIONAL_POS_CONTACT_CREDIT&#x60; - Card used in store in non-processing currency; read by magnetic stripe or pin * &#x60;CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT&#x60; - Card used in store in non-processing currency; read by NFC * &#x60;CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT&#x60; - Card used in store in non-processing currency; read by NFC * &#x60;CARD_INTERNATIONAL_ECOMMERCE_DEBIT &#x60; - Card used on the internet in non-processing currency * &#x60;CARD_INTERNATIONAL_ECOMMERCE_CREDIT&#x60; - Card used on the internet in non-processing currency * &#x60;CARD_INTERNATIONAL_ATM_DEBIT&#x60; - Card used in an ATM in non-processing currency * &#x60;CARD_INTERNATIONAL_ATM_CREDIT&#x60; - Card used in an ATM in non-processing currency * &#x60;CARD_POS_CONTACT_DEBIT_REVERSAL&#x60; - Card used in store; read by magnetic stripe or pin - reversed * &#x60;CARD_POS_CONTACT_CREDIT_REVERSAL&#x60; - Card used in store; read by magnetic stripe or pin - reversed * &#x60;CARD_POS_CONTACTLESS_DEBIT_REVERSAL&#x60; - Card used in store; read by NFC - reversed * &#x60;CARD_POS_CONTACTLESS_CREDIT_REVERSAL&#x60; - Card used in store; read by NFC - reversed * &#x60;CARD_ECOMMERCE_DEBIT_REVERSAL &#x60; - Card used on the internet - reversed * &#x60;CARD_ECOMMERCE_CREDIT_REVERSAL&#x60; - Card used on the internet - reversed * &#x60;CARD_ATM_DEBIT_REVERSAL&#x60; - Card used in an ATM - reversed * &#x60;CARD_ATM_CREDIT_REVERSAL&#x60; - Card used in an ATM - reversed * &#x60;CARD_INTERNATIONAL_POS_CONTACT_DEBIT_REVERSAL&#x60; - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed * &#x60;CARD_INTERNATIONAL_POS_CONTACT_CREDIT_REVERSAL&#x60; - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed * &#x60;CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT_REVERSAL&#x60; - Card used in store in non-processing currency; read by NFC - reversed * &#x60;CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT_REVERSAL&#x60; - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types. * &#x60;CARD_INTERNATIONAL_ECOMMERCE_DEBIT_REVERSAL&#x60; - Card used in store in non-processing currency; read by NFC - reversed * &#x60;CARD_INTERNATIONAL_ECOMMERCE_CREDIT_REVERSAL&#x60; - Card used in store in non-processing currency; read by NFC - reversed * &#x60;CARD_INTERNATIONAL_ATM_DEBIT_REVERSAL&#x60; - Card used on the internet in non-processing currency - reversed * &#x60;CARD_INTERNATIONAL_ATM_CREDIT_REVERSAL&#x60; - Card used on the internet in non-processing currency - reversed 
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Transaction yourRef(String yourRef) {
    this.yourRef = yourRef;
    return this;
  }

  /**
   * The comment/reference on the transaction that appears on the recipients statement. Only for withdrawals
   * @return yourRef
   */
  @javax.annotation.Nullable
  public String getYourRef() {
    return yourRef;
  }

  public void setYourRef(String yourRef) {
    this.yourRef = yourRef;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.amountAfterCharges, transaction.amountAfterCharges) &&
        Objects.equals(this.amountBeforeCharges, transaction.amountBeforeCharges) &&
        Objects.equals(this.balance, transaction.balance) &&
        Objects.equals(this.batchItemDetails, transaction.batchItemDetails) &&
        Objects.equals(this.card, transaction.card) &&
        Objects.equals(this.currency, transaction.currency) &&
        Objects.equals(this.date, transaction.date) &&
        Objects.equals(this.dateAcknowledged, transaction.dateAcknowledged) &&
        Objects.equals(this.directDebitDetails, transaction.directDebitDetails) &&
        Objects.equals(this.eventUuid, transaction.eventUuid) &&
        Objects.equals(this.feeAmount, transaction.feeAmount) &&
        Objects.equals(this.fxTradeDetails, transaction.fxTradeDetails) &&
        Objects.equals(this.ican, transaction.ican) &&
        Objects.equals(this.myRef, transaction.myRef) &&
        Objects.equals(this.paymentRequestPublicCode, transaction.paymentRequestPublicCode) &&
        Objects.equals(this.proprietarySchemeDetails, transaction.proprietarySchemeDetails) &&
        Objects.equals(this.refId, transaction.refId) &&
        Objects.equals(this.relatedParty, transaction.relatedParty) &&
        Objects.equals(this.taxAmount, transaction.taxAmount) &&
        Objects.equals(this.txnId, transaction.txnId) &&
        Objects.equals(this.type, transaction.type) &&
        Objects.equals(this.yourRef, transaction.yourRef);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountAfterCharges, amountBeforeCharges, balance, batchItemDetails, card, currency, date, dateAcknowledged, directDebitDetails, eventUuid, feeAmount, fxTradeDetails, ican, myRef, paymentRequestPublicCode, proprietarySchemeDetails, refId, relatedParty, taxAmount, txnId, type, yourRef);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    sb.append("    amountAfterCharges: ").append(toIndentedString(amountAfterCharges)).append("\n");
    sb.append("    amountBeforeCharges: ").append(toIndentedString(amountBeforeCharges)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    batchItemDetails: ").append(toIndentedString(batchItemDetails)).append("\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    dateAcknowledged: ").append(toIndentedString(dateAcknowledged)).append("\n");
    sb.append("    directDebitDetails: ").append(toIndentedString(directDebitDetails)).append("\n");
    sb.append("    eventUuid: ").append(toIndentedString(eventUuid)).append("\n");
    sb.append("    feeAmount: ").append(toIndentedString(feeAmount)).append("\n");
    sb.append("    fxTradeDetails: ").append(toIndentedString(fxTradeDetails)).append("\n");
    sb.append("    ican: ").append(toIndentedString(ican)).append("\n");
    sb.append("    myRef: ").append(toIndentedString(myRef)).append("\n");
    sb.append("    paymentRequestPublicCode: ").append(toIndentedString(paymentRequestPublicCode)).append("\n");
    sb.append("    proprietarySchemeDetails: ").append(toIndentedString(proprietarySchemeDetails)).append("\n");
    sb.append("    refId: ").append(toIndentedString(refId)).append("\n");
    sb.append("    relatedParty: ").append(toIndentedString(relatedParty)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    txnId: ").append(toIndentedString(txnId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    yourRef: ").append(toIndentedString(yourRef)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amountAfterCharges");
    openapiFields.add("amountBeforeCharges");
    openapiFields.add("balance");
    openapiFields.add("batchItemDetails");
    openapiFields.add("card");
    openapiFields.add("currency");
    openapiFields.add("date");
    openapiFields.add("dateAcknowledged");
    openapiFields.add("directDebitDetails");
    openapiFields.add("eventUuid");
    openapiFields.add("feeAmount");
    openapiFields.add("fxTradeDetails");
    openapiFields.add("ican");
    openapiFields.add("myRef");
    openapiFields.add("paymentRequestPublicCode");
    openapiFields.add("proprietarySchemeDetails");
    openapiFields.add("refId");
    openapiFields.add("relatedParty");
    openapiFields.add("taxAmount");
    openapiFields.add("txnId");
    openapiFields.add("type");
    openapiFields.add("yourRef");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Transaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transaction is not found in the empty JSON string", Transaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Transaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Transaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `batchItemDetails`
      if (jsonObj.get("batchItemDetails") != null && !jsonObj.get("batchItemDetails").isJsonNull()) {
        BatchItemDetails.validateJsonElement(jsonObj.get("batchItemDetails"));
      }
      // validate the optional field `card`
      if (jsonObj.get("card") != null && !jsonObj.get("card").isJsonNull()) {
        RelatedCard.validateJsonElement(jsonObj.get("card"));
      }
      // validate the optional field `currency`
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) {
        Currency.validateJsonElement(jsonObj.get("currency"));
      }
      // validate the optional field `directDebitDetails`
      if (jsonObj.get("directDebitDetails") != null && !jsonObj.get("directDebitDetails").isJsonNull()) {
        DirectDebitDetails.validateJsonElement(jsonObj.get("directDebitDetails"));
      }
      if ((jsonObj.get("eventUuid") != null && !jsonObj.get("eventUuid").isJsonNull()) && !jsonObj.get("eventUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventUuid").toString()));
      }
      // validate the optional field `fxTradeDetails`
      if (jsonObj.get("fxTradeDetails") != null && !jsonObj.get("fxTradeDetails").isJsonNull()) {
        FxTrade.validateJsonElement(jsonObj.get("fxTradeDetails"));
      }
      if ((jsonObj.get("myRef") != null && !jsonObj.get("myRef").isJsonNull()) && !jsonObj.get("myRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `myRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("myRef").toString()));
      }
      if ((jsonObj.get("paymentRequestPublicCode") != null && !jsonObj.get("paymentRequestPublicCode").isJsonNull()) && !jsonObj.get("paymentRequestPublicCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentRequestPublicCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentRequestPublicCode").toString()));
      }
      if (jsonObj.get("proprietarySchemeDetails") != null && !jsonObj.get("proprietarySchemeDetails").isJsonNull()) {
        JsonArray jsonArrayproprietarySchemeDetails = jsonObj.getAsJsonArray("proprietarySchemeDetails");
        if (jsonArrayproprietarySchemeDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("proprietarySchemeDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `proprietarySchemeDetails` to be an array in the JSON string but got `%s`", jsonObj.get("proprietarySchemeDetails").toString()));
          }

          // validate the optional field `proprietarySchemeDetails` (array)
          for (int i = 0; i < jsonArrayproprietarySchemeDetails.size(); i++) {
            ProprietarySchemeDetailsInner.validateJsonElement(jsonArrayproprietarySchemeDetails.get(i));
          };
        }
      }
      // validate the optional field `relatedParty`
      if (jsonObj.get("relatedParty") != null && !jsonObj.get("relatedParty").isJsonNull()) {
        RelatedParty.validateJsonElement(jsonObj.get("relatedParty"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("yourRef") != null && !jsonObj.get("yourRef").isJsonNull()) && !jsonObj.get("yourRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `yourRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("yourRef").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transaction.class));

       return (TypeAdapter<T>) new TypeAdapter<Transaction>() {
           @Override
           public void write(JsonWriter out, Transaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Transaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Transaction
   * @throws IOException if the JSON string is invalid with respect to Transaction
   */
  public static Transaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transaction.class);
  }

  /**
   * Convert an instance of Transaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

