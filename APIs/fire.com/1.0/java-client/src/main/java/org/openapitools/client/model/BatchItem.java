/*
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.BatchItemResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BatchItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:00:07.131817-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchItem {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Long amount;

  public static final String SERIALIZED_NAME_AMOUNT_AFTER_CHARGES = "amountAfterCharges";
  @SerializedName(SERIALIZED_NAME_AMOUNT_AFTER_CHARGES)
  private Long amountAfterCharges;

  public static final String SERIALIZED_NAME_BATCH_ITEM_UUID = "batchItemUuid";
  @SerializedName(SERIALIZED_NAME_BATCH_ITEM_UUID)
  private String batchItemUuid;

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_FEE_AMOUNT = "feeAmount";
  @SerializedName(SERIALIZED_NAME_FEE_AMOUNT)
  private Long feeAmount;

  public static final String SERIALIZED_NAME_ICAN_FROM = "icanFrom";
  @SerializedName(SERIALIZED_NAME_ICAN_FROM)
  private Long icanFrom;

  public static final String SERIALIZED_NAME_ICAN_TO = "icanTo";
  @SerializedName(SERIALIZED_NAME_ICAN_TO)
  private Long icanTo;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_REF = "ref";
  @SerializedName(SERIALIZED_NAME_REF)
  private String ref;

  public static final String SERIALIZED_NAME_REF_ID = "refId";
  @SerializedName(SERIALIZED_NAME_REF_ID)
  private Long refId;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private BatchItemResult result;

  /**
   * status of the batch if internal trasnfer
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SUBMITTED("SUBMITTED"),
    
    REMOVED("REMOVED"),
    
    SUCCEEDED("SUCCEEDED"),
    
    FAILED("FAILED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "taxAmount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private Long taxAmount;

  public BatchItem() {
  }

  public BatchItem amount(Long amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount of funds to send. In cent or pence
   * @return amount
   */
  @javax.annotation.Nullable
  public Long getAmount() {
    return amount;
  }

  public void setAmount(Long amount) {
    this.amount = amount;
  }


  public BatchItem amountAfterCharges(Long amountAfterCharges) {
    this.amountAfterCharges = amountAfterCharges;
    return this;
  }

  /**
   * The amount of the transfer after fees and taxes. in pence or cent.
   * @return amountAfterCharges
   */
  @javax.annotation.Nullable
  public Long getAmountAfterCharges() {
    return amountAfterCharges;
  }

  public void setAmountAfterCharges(Long amountAfterCharges) {
    this.amountAfterCharges = amountAfterCharges;
  }


  public BatchItem batchItemUuid(String batchItemUuid) {
    this.batchItemUuid = batchItemUuid;
    return this;
  }

  /**
   * A UUID for this item.
   * @return batchItemUuid
   */
  @javax.annotation.Nullable
  public String getBatchItemUuid() {
    return batchItemUuid;
  }

  public void setBatchItemUuid(String batchItemUuid) {
    this.batchItemUuid = batchItemUuid;
  }


  public BatchItem dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z
   * @return dateCreated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public BatchItem feeAmount(Long feeAmount) {
    this.feeAmount = feeAmount;
    return this;
  }

  /**
   * The fee charged by fire.com for the payment. In pence or cent.
   * @return feeAmount
   */
  @javax.annotation.Nullable
  public Long getFeeAmount() {
    return feeAmount;
  }

  public void setFeeAmount(Long feeAmount) {
    this.feeAmount = feeAmount;
  }


  public BatchItem icanFrom(Long icanFrom) {
    this.icanFrom = icanFrom;
    return this;
  }

  /**
   * The Fire account ID of the source account.
   * @return icanFrom
   */
  @javax.annotation.Nullable
  public Long getIcanFrom() {
    return icanFrom;
  }

  public void setIcanFrom(Long icanFrom) {
    this.icanFrom = icanFrom;
  }


  public BatchItem icanTo(Long icanTo) {
    this.icanTo = icanTo;
    return this;
  }

  /**
   * The Fire account ID for the fire.com account the funds are sent to.
   * @return icanTo
   */
  @javax.annotation.Nullable
  public Long getIcanTo() {
    return icanTo;
  }

  public void setIcanTo(Long icanTo) {
    this.icanTo = icanTo;
  }


  public BatchItem lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z
   * @return lastUpdated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public BatchItem ref(String ref) {
    this.ref = ref;
    return this;
  }

  /**
   * The reference on the transaction.
   * @return ref
   */
  @javax.annotation.Nullable
  public String getRef() {
    return ref;
  }

  public void setRef(String ref) {
    this.ref = ref;
  }


  public BatchItem refId(Long refId) {
    this.refId = refId;
    return this;
  }

  /**
   * The ID of the resulting payment in your account. Can be used to retrieve the transaction using the https://api.fire.com/business/v1/accounts/{accountId}/transactions/{refId} endpoint.
   * @return refId
   */
  @javax.annotation.Nullable
  public Long getRefId() {
    return refId;
  }

  public void setRefId(Long refId) {
    this.refId = refId;
  }


  public BatchItem result(BatchItemResult result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public BatchItemResult getResult() {
    return result;
  }

  public void setResult(BatchItemResult result) {
    this.result = result;
  }


  public BatchItem status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * status of the batch if internal trasnfer
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public BatchItem taxAmount(Long taxAmount) {
    this.taxAmount = taxAmount;
    return this;
  }

  /**
   * Any taxes/duty collected by fire.com for this payments (e.g. stamp duty etc). In pence or cent.
   * @return taxAmount
   */
  @javax.annotation.Nullable
  public Long getTaxAmount() {
    return taxAmount;
  }

  public void setTaxAmount(Long taxAmount) {
    this.taxAmount = taxAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchItem batchItem = (BatchItem) o;
    return Objects.equals(this.amount, batchItem.amount) &&
        Objects.equals(this.amountAfterCharges, batchItem.amountAfterCharges) &&
        Objects.equals(this.batchItemUuid, batchItem.batchItemUuid) &&
        Objects.equals(this.dateCreated, batchItem.dateCreated) &&
        Objects.equals(this.feeAmount, batchItem.feeAmount) &&
        Objects.equals(this.icanFrom, batchItem.icanFrom) &&
        Objects.equals(this.icanTo, batchItem.icanTo) &&
        Objects.equals(this.lastUpdated, batchItem.lastUpdated) &&
        Objects.equals(this.ref, batchItem.ref) &&
        Objects.equals(this.refId, batchItem.refId) &&
        Objects.equals(this.result, batchItem.result) &&
        Objects.equals(this.status, batchItem.status) &&
        Objects.equals(this.taxAmount, batchItem.taxAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, amountAfterCharges, batchItemUuid, dateCreated, feeAmount, icanFrom, icanTo, lastUpdated, ref, refId, result, status, taxAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchItem {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    amountAfterCharges: ").append(toIndentedString(amountAfterCharges)).append("\n");
    sb.append("    batchItemUuid: ").append(toIndentedString(batchItemUuid)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    feeAmount: ").append(toIndentedString(feeAmount)).append("\n");
    sb.append("    icanFrom: ").append(toIndentedString(icanFrom)).append("\n");
    sb.append("    icanTo: ").append(toIndentedString(icanTo)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    refId: ").append(toIndentedString(refId)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("amountAfterCharges");
    openapiFields.add("batchItemUuid");
    openapiFields.add("dateCreated");
    openapiFields.add("feeAmount");
    openapiFields.add("icanFrom");
    openapiFields.add("icanTo");
    openapiFields.add("lastUpdated");
    openapiFields.add("ref");
    openapiFields.add("refId");
    openapiFields.add("result");
    openapiFields.add("status");
    openapiFields.add("taxAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchItem is not found in the empty JSON string", BatchItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("batchItemUuid") != null && !jsonObj.get("batchItemUuid").isJsonNull()) && !jsonObj.get("batchItemUuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `batchItemUuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("batchItemUuid").toString()));
      }
      if ((jsonObj.get("ref") != null && !jsonObj.get("ref").isJsonNull()) && !jsonObj.get("ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref").toString()));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        BatchItemResult.validateJsonElement(jsonObj.get("result"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchItem.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchItem>() {
           @Override
           public void write(JsonWriter out, BatchItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchItem
   * @throws IOException if the JSON string is invalid with respect to BatchItem
   */
  public static BatchItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchItem.class);
  }

  /**
   * Convert an instance of BatchItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

