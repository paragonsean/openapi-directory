/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFxTrade.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFxTrade::OAIFxTrade(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFxTrade::OAIFxTrade() {
    this->initializeModel();
}

OAIFxTrade::~OAIFxTrade() {}

void OAIFxTrade::initializeModel() {

    m_buy_amount_isSet = false;
    m_buy_amount_isValid = false;

    m_buy_currency_isSet = false;
    m_buy_currency_isValid = false;

    m_fixed_side_isSet = false;
    m_fixed_side_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_rate4d_isSet = false;
    m_rate4d_isValid = false;

    m_sell_amount_isSet = false;
    m_sell_amount_isValid = false;

    m_sell_currency_isSet = false;
    m_sell_currency_isValid = false;
}

void OAIFxTrade::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFxTrade::fromJsonObject(QJsonObject json) {

    m_buy_amount_isValid = ::OpenAPI::fromJsonValue(m_buy_amount, json[QString("buyAmount")]);
    m_buy_amount_isSet = !json[QString("buyAmount")].isNull() && m_buy_amount_isValid;

    m_buy_currency_isValid = ::OpenAPI::fromJsonValue(m_buy_currency, json[QString("buyCurrency")]);
    m_buy_currency_isSet = !json[QString("buyCurrency")].isNull() && m_buy_currency_isValid;

    m_fixed_side_isValid = ::OpenAPI::fromJsonValue(m_fixed_side, json[QString("fixedSide")]);
    m_fixed_side_isSet = !json[QString("fixedSide")].isNull() && m_fixed_side_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_rate4d_isValid = ::OpenAPI::fromJsonValue(m_rate4d, json[QString("rate4d")]);
    m_rate4d_isSet = !json[QString("rate4d")].isNull() && m_rate4d_isValid;

    m_sell_amount_isValid = ::OpenAPI::fromJsonValue(m_sell_amount, json[QString("sellAmount")]);
    m_sell_amount_isSet = !json[QString("sellAmount")].isNull() && m_sell_amount_isValid;

    m_sell_currency_isValid = ::OpenAPI::fromJsonValue(m_sell_currency, json[QString("sellCurrency")]);
    m_sell_currency_isSet = !json[QString("sellCurrency")].isNull() && m_sell_currency_isValid;
}

QString OAIFxTrade::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFxTrade::asJsonObject() const {
    QJsonObject obj;
    if (m_buy_amount_isSet) {
        obj.insert(QString("buyAmount"), ::OpenAPI::toJsonValue(m_buy_amount));
    }
    if (m_buy_currency_isSet) {
        obj.insert(QString("buyCurrency"), ::OpenAPI::toJsonValue(m_buy_currency));
    }
    if (m_fixed_side_isSet) {
        obj.insert(QString("fixedSide"), ::OpenAPI::toJsonValue(m_fixed_side));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_rate4d_isSet) {
        obj.insert(QString("rate4d"), ::OpenAPI::toJsonValue(m_rate4d));
    }
    if (m_sell_amount_isSet) {
        obj.insert(QString("sellAmount"), ::OpenAPI::toJsonValue(m_sell_amount));
    }
    if (m_sell_currency_isSet) {
        obj.insert(QString("sellCurrency"), ::OpenAPI::toJsonValue(m_sell_currency));
    }
    return obj;
}

qint64 OAIFxTrade::getBuyAmount() const {
    return m_buy_amount;
}
void OAIFxTrade::setBuyAmount(const qint64 &buy_amount) {
    m_buy_amount = buy_amount;
    m_buy_amount_isSet = true;
}

bool OAIFxTrade::is_buy_amount_Set() const{
    return m_buy_amount_isSet;
}

bool OAIFxTrade::is_buy_amount_Valid() const{
    return m_buy_amount_isValid;
}

QString OAIFxTrade::getBuyCurrency() const {
    return m_buy_currency;
}
void OAIFxTrade::setBuyCurrency(const QString &buy_currency) {
    m_buy_currency = buy_currency;
    m_buy_currency_isSet = true;
}

bool OAIFxTrade::is_buy_currency_Set() const{
    return m_buy_currency_isSet;
}

bool OAIFxTrade::is_buy_currency_Valid() const{
    return m_buy_currency_isValid;
}

QString OAIFxTrade::getFixedSide() const {
    return m_fixed_side;
}
void OAIFxTrade::setFixedSide(const QString &fixed_side) {
    m_fixed_side = fixed_side;
    m_fixed_side_isSet = true;
}

bool OAIFxTrade::is_fixed_side_Set() const{
    return m_fixed_side_isSet;
}

bool OAIFxTrade::is_fixed_side_Valid() const{
    return m_fixed_side_isValid;
}

QString OAIFxTrade::getProvider() const {
    return m_provider;
}
void OAIFxTrade::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIFxTrade::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIFxTrade::is_provider_Valid() const{
    return m_provider_isValid;
}

qint64 OAIFxTrade::getRate4d() const {
    return m_rate4d;
}
void OAIFxTrade::setRate4d(const qint64 &rate4d) {
    m_rate4d = rate4d;
    m_rate4d_isSet = true;
}

bool OAIFxTrade::is_rate4d_Set() const{
    return m_rate4d_isSet;
}

bool OAIFxTrade::is_rate4d_Valid() const{
    return m_rate4d_isValid;
}

qint64 OAIFxTrade::getSellAmount() const {
    return m_sell_amount;
}
void OAIFxTrade::setSellAmount(const qint64 &sell_amount) {
    m_sell_amount = sell_amount;
    m_sell_amount_isSet = true;
}

bool OAIFxTrade::is_sell_amount_Set() const{
    return m_sell_amount_isSet;
}

bool OAIFxTrade::is_sell_amount_Valid() const{
    return m_sell_amount_isValid;
}

QString OAIFxTrade::getSellCurrency() const {
    return m_sell_currency;
}
void OAIFxTrade::setSellCurrency(const QString &sell_currency) {
    m_sell_currency = sell_currency;
    m_sell_currency_isSet = true;
}

bool OAIFxTrade::is_sell_currency_Set() const{
    return m_sell_currency_isSet;
}

bool OAIFxTrade::is_sell_currency_Valid() const{
    return m_sell_currency_isValid;
}

bool OAIFxTrade::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buy_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buy_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_side_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate4d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell_currency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFxTrade::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
