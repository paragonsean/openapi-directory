/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFxTrade.h
 *
 * Details of the FX trade (if applicable)
 */

#ifndef OAIFxTrade_H
#define OAIFxTrade_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFxTrade : public OAIObject {
public:
    OAIFxTrade();
    OAIFxTrade(QString json);
    ~OAIFxTrade() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getBuyAmount() const;
    void setBuyAmount(const qint64 &buy_amount);
    bool is_buy_amount_Set() const;
    bool is_buy_amount_Valid() const;

    QString getBuyCurrency() const;
    void setBuyCurrency(const QString &buy_currency);
    bool is_buy_currency_Set() const;
    bool is_buy_currency_Valid() const;

    QString getFixedSide() const;
    void setFixedSide(const QString &fixed_side);
    bool is_fixed_side_Set() const;
    bool is_fixed_side_Valid() const;

    QString getProvider() const;
    void setProvider(const QString &provider);
    bool is_provider_Set() const;
    bool is_provider_Valid() const;

    qint64 getRate4d() const;
    void setRate4d(const qint64 &rate4d);
    bool is_rate4d_Set() const;
    bool is_rate4d_Valid() const;

    qint64 getSellAmount() const;
    void setSellAmount(const qint64 &sell_amount);
    bool is_sell_amount_Set() const;
    bool is_sell_amount_Valid() const;

    QString getSellCurrency() const;
    void setSellCurrency(const QString &sell_currency);
    bool is_sell_currency_Set() const;
    bool is_sell_currency_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_buy_amount;
    bool m_buy_amount_isSet;
    bool m_buy_amount_isValid;

    QString m_buy_currency;
    bool m_buy_currency_isSet;
    bool m_buy_currency_isValid;

    QString m_fixed_side;
    bool m_fixed_side_isSet;
    bool m_fixed_side_isValid;

    QString m_provider;
    bool m_provider_isSet;
    bool m_provider_isValid;

    qint64 m_rate4d;
    bool m_rate4d_isSet;
    bool m_rate4d_isValid;

    qint64 m_sell_amount;
    bool m_sell_amount_isSet;
    bool m_sell_amount_isValid;

    QString m_sell_currency;
    bool m_sell_currency_isSet;
    bool m_sell_currency_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFxTrade)

#endif // OAIFxTrade_H
