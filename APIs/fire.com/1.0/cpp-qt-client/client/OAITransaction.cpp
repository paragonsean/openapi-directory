/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransaction::OAITransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransaction::OAITransaction() {
    this->initializeModel();
}

OAITransaction::~OAITransaction() {}

void OAITransaction::initializeModel() {

    m_amount_after_charges_isSet = false;
    m_amount_after_charges_isValid = false;

    m_amount_before_charges_isSet = false;
    m_amount_before_charges_isValid = false;

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_batch_item_details_isSet = false;
    m_batch_item_details_isValid = false;

    m_card_isSet = false;
    m_card_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_date_acknowledged_isSet = false;
    m_date_acknowledged_isValid = false;

    m_direct_debit_details_isSet = false;
    m_direct_debit_details_isValid = false;

    m_event_uuid_isSet = false;
    m_event_uuid_isValid = false;

    m_fee_amount_isSet = false;
    m_fee_amount_isValid = false;

    m_fx_trade_details_isSet = false;
    m_fx_trade_details_isValid = false;

    m_ican_isSet = false;
    m_ican_isValid = false;

    m_my_ref_isSet = false;
    m_my_ref_isValid = false;

    m_payment_request_public_code_isSet = false;
    m_payment_request_public_code_isValid = false;

    m_proprietary_scheme_details_isSet = false;
    m_proprietary_scheme_details_isValid = false;

    m_ref_id_isSet = false;
    m_ref_id_isValid = false;

    m_related_party_isSet = false;
    m_related_party_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_txn_id_isSet = false;
    m_txn_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_your_ref_isSet = false;
    m_your_ref_isValid = false;
}

void OAITransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransaction::fromJsonObject(QJsonObject json) {

    m_amount_after_charges_isValid = ::OpenAPI::fromJsonValue(m_amount_after_charges, json[QString("amountAfterCharges")]);
    m_amount_after_charges_isSet = !json[QString("amountAfterCharges")].isNull() && m_amount_after_charges_isValid;

    m_amount_before_charges_isValid = ::OpenAPI::fromJsonValue(m_amount_before_charges, json[QString("amountBeforeCharges")]);
    m_amount_before_charges_isSet = !json[QString("amountBeforeCharges")].isNull() && m_amount_before_charges_isValid;

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_batch_item_details_isValid = ::OpenAPI::fromJsonValue(m_batch_item_details, json[QString("batchItemDetails")]);
    m_batch_item_details_isSet = !json[QString("batchItemDetails")].isNull() && m_batch_item_details_isValid;

    m_card_isValid = ::OpenAPI::fromJsonValue(m_card, json[QString("card")]);
    m_card_isSet = !json[QString("card")].isNull() && m_card_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_date_acknowledged_isValid = ::OpenAPI::fromJsonValue(m_date_acknowledged, json[QString("dateAcknowledged")]);
    m_date_acknowledged_isSet = !json[QString("dateAcknowledged")].isNull() && m_date_acknowledged_isValid;

    m_direct_debit_details_isValid = ::OpenAPI::fromJsonValue(m_direct_debit_details, json[QString("directDebitDetails")]);
    m_direct_debit_details_isSet = !json[QString("directDebitDetails")].isNull() && m_direct_debit_details_isValid;

    m_event_uuid_isValid = ::OpenAPI::fromJsonValue(m_event_uuid, json[QString("eventUuid")]);
    m_event_uuid_isSet = !json[QString("eventUuid")].isNull() && m_event_uuid_isValid;

    m_fee_amount_isValid = ::OpenAPI::fromJsonValue(m_fee_amount, json[QString("feeAmount")]);
    m_fee_amount_isSet = !json[QString("feeAmount")].isNull() && m_fee_amount_isValid;

    m_fx_trade_details_isValid = ::OpenAPI::fromJsonValue(m_fx_trade_details, json[QString("fxTradeDetails")]);
    m_fx_trade_details_isSet = !json[QString("fxTradeDetails")].isNull() && m_fx_trade_details_isValid;

    m_ican_isValid = ::OpenAPI::fromJsonValue(m_ican, json[QString("ican")]);
    m_ican_isSet = !json[QString("ican")].isNull() && m_ican_isValid;

    m_my_ref_isValid = ::OpenAPI::fromJsonValue(m_my_ref, json[QString("myRef")]);
    m_my_ref_isSet = !json[QString("myRef")].isNull() && m_my_ref_isValid;

    m_payment_request_public_code_isValid = ::OpenAPI::fromJsonValue(m_payment_request_public_code, json[QString("paymentRequestPublicCode")]);
    m_payment_request_public_code_isSet = !json[QString("paymentRequestPublicCode")].isNull() && m_payment_request_public_code_isValid;

    m_proprietary_scheme_details_isValid = ::OpenAPI::fromJsonValue(m_proprietary_scheme_details, json[QString("proprietarySchemeDetails")]);
    m_proprietary_scheme_details_isSet = !json[QString("proprietarySchemeDetails")].isNull() && m_proprietary_scheme_details_isValid;

    m_ref_id_isValid = ::OpenAPI::fromJsonValue(m_ref_id, json[QString("refId")]);
    m_ref_id_isSet = !json[QString("refId")].isNull() && m_ref_id_isValid;

    m_related_party_isValid = ::OpenAPI::fromJsonValue(m_related_party, json[QString("relatedParty")]);
    m_related_party_isSet = !json[QString("relatedParty")].isNull() && m_related_party_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("taxAmount")]);
    m_tax_amount_isSet = !json[QString("taxAmount")].isNull() && m_tax_amount_isValid;

    m_txn_id_isValid = ::OpenAPI::fromJsonValue(m_txn_id, json[QString("txnId")]);
    m_txn_id_isSet = !json[QString("txnId")].isNull() && m_txn_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_your_ref_isValid = ::OpenAPI::fromJsonValue(m_your_ref, json[QString("yourRef")]);
    m_your_ref_isSet = !json[QString("yourRef")].isNull() && m_your_ref_isValid;
}

QString OAITransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_after_charges_isSet) {
        obj.insert(QString("amountAfterCharges"), ::OpenAPI::toJsonValue(m_amount_after_charges));
    }
    if (m_amount_before_charges_isSet) {
        obj.insert(QString("amountBeforeCharges"), ::OpenAPI::toJsonValue(m_amount_before_charges));
    }
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_batch_item_details.isSet()) {
        obj.insert(QString("batchItemDetails"), ::OpenAPI::toJsonValue(m_batch_item_details));
    }
    if (m_card.isSet()) {
        obj.insert(QString("card"), ::OpenAPI::toJsonValue(m_card));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_date_acknowledged_isSet) {
        obj.insert(QString("dateAcknowledged"), ::OpenAPI::toJsonValue(m_date_acknowledged));
    }
    if (m_direct_debit_details.isSet()) {
        obj.insert(QString("directDebitDetails"), ::OpenAPI::toJsonValue(m_direct_debit_details));
    }
    if (m_event_uuid_isSet) {
        obj.insert(QString("eventUuid"), ::OpenAPI::toJsonValue(m_event_uuid));
    }
    if (m_fee_amount_isSet) {
        obj.insert(QString("feeAmount"), ::OpenAPI::toJsonValue(m_fee_amount));
    }
    if (m_fx_trade_details.isSet()) {
        obj.insert(QString("fxTradeDetails"), ::OpenAPI::toJsonValue(m_fx_trade_details));
    }
    if (m_ican_isSet) {
        obj.insert(QString("ican"), ::OpenAPI::toJsonValue(m_ican));
    }
    if (m_my_ref_isSet) {
        obj.insert(QString("myRef"), ::OpenAPI::toJsonValue(m_my_ref));
    }
    if (m_payment_request_public_code_isSet) {
        obj.insert(QString("paymentRequestPublicCode"), ::OpenAPI::toJsonValue(m_payment_request_public_code));
    }
    if (m_proprietary_scheme_details.size() > 0) {
        obj.insert(QString("proprietarySchemeDetails"), ::OpenAPI::toJsonValue(m_proprietary_scheme_details));
    }
    if (m_ref_id_isSet) {
        obj.insert(QString("refId"), ::OpenAPI::toJsonValue(m_ref_id));
    }
    if (m_related_party.isSet()) {
        obj.insert(QString("relatedParty"), ::OpenAPI::toJsonValue(m_related_party));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("taxAmount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_txn_id_isSet) {
        obj.insert(QString("txnId"), ::OpenAPI::toJsonValue(m_txn_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_your_ref_isSet) {
        obj.insert(QString("yourRef"), ::OpenAPI::toJsonValue(m_your_ref));
    }
    return obj;
}

qint64 OAITransaction::getAmountAfterCharges() const {
    return m_amount_after_charges;
}
void OAITransaction::setAmountAfterCharges(const qint64 &amount_after_charges) {
    m_amount_after_charges = amount_after_charges;
    m_amount_after_charges_isSet = true;
}

bool OAITransaction::is_amount_after_charges_Set() const{
    return m_amount_after_charges_isSet;
}

bool OAITransaction::is_amount_after_charges_Valid() const{
    return m_amount_after_charges_isValid;
}

qint64 OAITransaction::getAmountBeforeCharges() const {
    return m_amount_before_charges;
}
void OAITransaction::setAmountBeforeCharges(const qint64 &amount_before_charges) {
    m_amount_before_charges = amount_before_charges;
    m_amount_before_charges_isSet = true;
}

bool OAITransaction::is_amount_before_charges_Set() const{
    return m_amount_before_charges_isSet;
}

bool OAITransaction::is_amount_before_charges_Valid() const{
    return m_amount_before_charges_isValid;
}

qint64 OAITransaction::getBalance() const {
    return m_balance;
}
void OAITransaction::setBalance(const qint64 &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAITransaction::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAITransaction::is_balance_Valid() const{
    return m_balance_isValid;
}

OAIBatchItemDetails OAITransaction::getBatchItemDetails() const {
    return m_batch_item_details;
}
void OAITransaction::setBatchItemDetails(const OAIBatchItemDetails &batch_item_details) {
    m_batch_item_details = batch_item_details;
    m_batch_item_details_isSet = true;
}

bool OAITransaction::is_batch_item_details_Set() const{
    return m_batch_item_details_isSet;
}

bool OAITransaction::is_batch_item_details_Valid() const{
    return m_batch_item_details_isValid;
}

OAIRelatedCard OAITransaction::getCard() const {
    return m_card;
}
void OAITransaction::setCard(const OAIRelatedCard &card) {
    m_card = card;
    m_card_isSet = true;
}

bool OAITransaction::is_card_Set() const{
    return m_card_isSet;
}

bool OAITransaction::is_card_Valid() const{
    return m_card_isValid;
}

OAICurrency OAITransaction::getCurrency() const {
    return m_currency;
}
void OAITransaction::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAITransaction::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAITransaction::is_currency_Valid() const{
    return m_currency_isValid;
}

QDateTime OAITransaction::getDate() const {
    return m_date;
}
void OAITransaction::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAITransaction::is_date_Set() const{
    return m_date_isSet;
}

bool OAITransaction::is_date_Valid() const{
    return m_date_isValid;
}

QDateTime OAITransaction::getDateAcknowledged() const {
    return m_date_acknowledged;
}
void OAITransaction::setDateAcknowledged(const QDateTime &date_acknowledged) {
    m_date_acknowledged = date_acknowledged;
    m_date_acknowledged_isSet = true;
}

bool OAITransaction::is_date_acknowledged_Set() const{
    return m_date_acknowledged_isSet;
}

bool OAITransaction::is_date_acknowledged_Valid() const{
    return m_date_acknowledged_isValid;
}

OAIDirectDebitDetails OAITransaction::getDirectDebitDetails() const {
    return m_direct_debit_details;
}
void OAITransaction::setDirectDebitDetails(const OAIDirectDebitDetails &direct_debit_details) {
    m_direct_debit_details = direct_debit_details;
    m_direct_debit_details_isSet = true;
}

bool OAITransaction::is_direct_debit_details_Set() const{
    return m_direct_debit_details_isSet;
}

bool OAITransaction::is_direct_debit_details_Valid() const{
    return m_direct_debit_details_isValid;
}

QString OAITransaction::getEventUuid() const {
    return m_event_uuid;
}
void OAITransaction::setEventUuid(const QString &event_uuid) {
    m_event_uuid = event_uuid;
    m_event_uuid_isSet = true;
}

bool OAITransaction::is_event_uuid_Set() const{
    return m_event_uuid_isSet;
}

bool OAITransaction::is_event_uuid_Valid() const{
    return m_event_uuid_isValid;
}

qint64 OAITransaction::getFeeAmount() const {
    return m_fee_amount;
}
void OAITransaction::setFeeAmount(const qint64 &fee_amount) {
    m_fee_amount = fee_amount;
    m_fee_amount_isSet = true;
}

bool OAITransaction::is_fee_amount_Set() const{
    return m_fee_amount_isSet;
}

bool OAITransaction::is_fee_amount_Valid() const{
    return m_fee_amount_isValid;
}

OAIFxTrade OAITransaction::getFxTradeDetails() const {
    return m_fx_trade_details;
}
void OAITransaction::setFxTradeDetails(const OAIFxTrade &fx_trade_details) {
    m_fx_trade_details = fx_trade_details;
    m_fx_trade_details_isSet = true;
}

bool OAITransaction::is_fx_trade_details_Set() const{
    return m_fx_trade_details_isSet;
}

bool OAITransaction::is_fx_trade_details_Valid() const{
    return m_fx_trade_details_isValid;
}

qint64 OAITransaction::getIcan() const {
    return m_ican;
}
void OAITransaction::setIcan(const qint64 &ican) {
    m_ican = ican;
    m_ican_isSet = true;
}

bool OAITransaction::is_ican_Set() const{
    return m_ican_isSet;
}

bool OAITransaction::is_ican_Valid() const{
    return m_ican_isValid;
}

QString OAITransaction::getMyRef() const {
    return m_my_ref;
}
void OAITransaction::setMyRef(const QString &my_ref) {
    m_my_ref = my_ref;
    m_my_ref_isSet = true;
}

bool OAITransaction::is_my_ref_Set() const{
    return m_my_ref_isSet;
}

bool OAITransaction::is_my_ref_Valid() const{
    return m_my_ref_isValid;
}

QString OAITransaction::getPaymentRequestPublicCode() const {
    return m_payment_request_public_code;
}
void OAITransaction::setPaymentRequestPublicCode(const QString &payment_request_public_code) {
    m_payment_request_public_code = payment_request_public_code;
    m_payment_request_public_code_isSet = true;
}

bool OAITransaction::is_payment_request_public_code_Set() const{
    return m_payment_request_public_code_isSet;
}

bool OAITransaction::is_payment_request_public_code_Valid() const{
    return m_payment_request_public_code_isValid;
}

QList<OAIProprietarySchemeDetails_inner> OAITransaction::getProprietarySchemeDetails() const {
    return m_proprietary_scheme_details;
}
void OAITransaction::setProprietarySchemeDetails(const QList<OAIProprietarySchemeDetails_inner> &proprietary_scheme_details) {
    m_proprietary_scheme_details = proprietary_scheme_details;
    m_proprietary_scheme_details_isSet = true;
}

bool OAITransaction::is_proprietary_scheme_details_Set() const{
    return m_proprietary_scheme_details_isSet;
}

bool OAITransaction::is_proprietary_scheme_details_Valid() const{
    return m_proprietary_scheme_details_isValid;
}

qint64 OAITransaction::getRefId() const {
    return m_ref_id;
}
void OAITransaction::setRefId(const qint64 &ref_id) {
    m_ref_id = ref_id;
    m_ref_id_isSet = true;
}

bool OAITransaction::is_ref_id_Set() const{
    return m_ref_id_isSet;
}

bool OAITransaction::is_ref_id_Valid() const{
    return m_ref_id_isValid;
}

OAIRelatedParty OAITransaction::getRelatedParty() const {
    return m_related_party;
}
void OAITransaction::setRelatedParty(const OAIRelatedParty &related_party) {
    m_related_party = related_party;
    m_related_party_isSet = true;
}

bool OAITransaction::is_related_party_Set() const{
    return m_related_party_isSet;
}

bool OAITransaction::is_related_party_Valid() const{
    return m_related_party_isValid;
}

qint64 OAITransaction::getTaxAmount() const {
    return m_tax_amount;
}
void OAITransaction::setTaxAmount(const qint64 &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAITransaction::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAITransaction::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

qint64 OAITransaction::getTxnId() const {
    return m_txn_id;
}
void OAITransaction::setTxnId(const qint64 &txn_id) {
    m_txn_id = txn_id;
    m_txn_id_isSet = true;
}

bool OAITransaction::is_txn_id_Set() const{
    return m_txn_id_isSet;
}

bool OAITransaction::is_txn_id_Valid() const{
    return m_txn_id_isValid;
}

QString OAITransaction::getType() const {
    return m_type;
}
void OAITransaction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITransaction::is_type_Set() const{
    return m_type_isSet;
}

bool OAITransaction::is_type_Valid() const{
    return m_type_isValid;
}

QString OAITransaction::getYourRef() const {
    return m_your_ref;
}
void OAITransaction::setYourRef(const QString &your_ref) {
    m_your_ref = your_ref;
    m_your_ref_isSet = true;
}

bool OAITransaction::is_your_ref_Set() const{
    return m_your_ref_isSet;
}

bool OAITransaction::is_your_ref_Valid() const{
    return m_your_ref_isValid;
}

bool OAITransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_after_charges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_before_charges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_item_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_acknowledged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_debit_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fx_trade_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ican_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_my_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_request_public_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proprietary_scheme_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_party.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_txn_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_your_ref_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
