/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICardsApi_H
#define OAI_OAICardsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICardTransactionsv1.h"
#include "OAICards.h"
#include "OAINewCard.h"
#include "OAINewCardResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICardsApi : public QObject {
    Q_OBJECT

public:
    OAICardsApi(const int timeOut = 0);
    ~OAICardsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  card_id qint64 [required]
    */
    virtual void blockCard(const qint64 &card_id);

    /**
    * @param[in]  oai_new_card OAINewCard [required]
    */
    virtual void createNewCard(const OAINewCard &oai_new_card);

    /**
    * @param[in]  card_id qint64 [required]
    * @param[in]  limit qint64 [optional]
    * @param[in]  offset qint64 [optional]
    */
    virtual void getListofCardTransactions(const qint64 &card_id, const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>());


    virtual void getListofCards();

    /**
    * @param[in]  card_id qint64 [required]
    */
    virtual void unblockCard(const qint64 &card_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void blockCardCallback(OAIHttpRequestWorker *worker);
    void createNewCardCallback(OAIHttpRequestWorker *worker);
    void getListofCardTransactionsCallback(OAIHttpRequestWorker *worker);
    void getListofCardsCallback(OAIHttpRequestWorker *worker);
    void unblockCardCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void blockCardSignal();
    void createNewCardSignal(OAINewCardResponse summary);
    void getListofCardTransactionsSignal(QList<OAICardTransactionsv1> summary);
    void getListofCardsSignal(OAICards summary);
    void unblockCardSignal();


    void blockCardSignalFull(OAIHttpRequestWorker *worker);
    void createNewCardSignalFull(OAIHttpRequestWorker *worker, OAINewCardResponse summary);
    void getListofCardTransactionsSignalFull(OAIHttpRequestWorker *worker, QList<OAICardTransactionsv1> summary);
    void getListofCardsSignalFull(OAIHttpRequestWorker *worker, OAICards summary);
    void unblockCardSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use blockCardSignalError() instead")
    void blockCardSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void blockCardSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNewCardSignalError() instead")
    void createNewCardSignalE(OAINewCardResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNewCardSignalError(OAINewCardResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListofCardTransactionsSignalError() instead")
    void getListofCardTransactionsSignalE(QList<OAICardTransactionsv1> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getListofCardTransactionsSignalError(QList<OAICardTransactionsv1> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListofCardsSignalError() instead")
    void getListofCardsSignalE(OAICards summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getListofCardsSignalError(OAICards summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unblockCardSignalError() instead")
    void unblockCardSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unblockCardSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use blockCardSignalErrorFull() instead")
    void blockCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void blockCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNewCardSignalErrorFull() instead")
    void createNewCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNewCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListofCardTransactionsSignalErrorFull() instead")
    void getListofCardTransactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getListofCardTransactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListofCardsSignalErrorFull() instead")
    void getListofCardsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getListofCardsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unblockCardSignalErrorFull() instead")
    void unblockCardSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unblockCardSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
