/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewCard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewCard::OAINewCard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewCard::OAINewCard() {
    this->initializeModel();
}

OAINewCard::~OAINewCard() {}

void OAINewCard::initializeModel() {

    m_accept_fees_and_charges_isSet = false;
    m_accept_fees_and_charges_isValid = false;

    m_address_type_isSet = false;
    m_address_type_isValid = false;

    m_card_pin_isSet = false;
    m_card_pin_isValid = false;

    m_eur_ican_isSet = false;
    m_eur_ican_isValid = false;

    m_gbp_ican_isSet = false;
    m_gbp_ican_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAINewCard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewCard::fromJsonObject(QJsonObject json) {

    m_accept_fees_and_charges_isValid = ::OpenAPI::fromJsonValue(m_accept_fees_and_charges, json[QString("acceptFeesAndCharges")]);
    m_accept_fees_and_charges_isSet = !json[QString("acceptFeesAndCharges")].isNull() && m_accept_fees_and_charges_isValid;

    m_address_type_isValid = ::OpenAPI::fromJsonValue(m_address_type, json[QString("addressType")]);
    m_address_type_isSet = !json[QString("addressType")].isNull() && m_address_type_isValid;

    m_card_pin_isValid = ::OpenAPI::fromJsonValue(m_card_pin, json[QString("cardPin")]);
    m_card_pin_isSet = !json[QString("cardPin")].isNull() && m_card_pin_isValid;

    m_eur_ican_isValid = ::OpenAPI::fromJsonValue(m_eur_ican, json[QString("eurIcan")]);
    m_eur_ican_isSet = !json[QString("eurIcan")].isNull() && m_eur_ican_isValid;

    m_gbp_ican_isValid = ::OpenAPI::fromJsonValue(m_gbp_ican, json[QString("gbpIcan")]);
    m_gbp_ican_isSet = !json[QString("gbpIcan")].isNull() && m_gbp_ican_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAINewCard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewCard::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_fees_and_charges_isSet) {
        obj.insert(QString("acceptFeesAndCharges"), ::OpenAPI::toJsonValue(m_accept_fees_and_charges));
    }
    if (m_address_type_isSet) {
        obj.insert(QString("addressType"), ::OpenAPI::toJsonValue(m_address_type));
    }
    if (m_card_pin_isSet) {
        obj.insert(QString("cardPin"), ::OpenAPI::toJsonValue(m_card_pin));
    }
    if (m_eur_ican_isSet) {
        obj.insert(QString("eurIcan"), ::OpenAPI::toJsonValue(m_eur_ican));
    }
    if (m_gbp_ican_isSet) {
        obj.insert(QString("gbpIcan"), ::OpenAPI::toJsonValue(m_gbp_ican));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

bool OAINewCard::isAcceptFeesAndCharges() const {
    return m_accept_fees_and_charges;
}
void OAINewCard::setAcceptFeesAndCharges(const bool &accept_fees_and_charges) {
    m_accept_fees_and_charges = accept_fees_and_charges;
    m_accept_fees_and_charges_isSet = true;
}

bool OAINewCard::is_accept_fees_and_charges_Set() const{
    return m_accept_fees_and_charges_isSet;
}

bool OAINewCard::is_accept_fees_and_charges_Valid() const{
    return m_accept_fees_and_charges_isValid;
}

QString OAINewCard::getAddressType() const {
    return m_address_type;
}
void OAINewCard::setAddressType(const QString &address_type) {
    m_address_type = address_type;
    m_address_type_isSet = true;
}

bool OAINewCard::is_address_type_Set() const{
    return m_address_type_isSet;
}

bool OAINewCard::is_address_type_Valid() const{
    return m_address_type_isValid;
}

QString OAINewCard::getCardPin() const {
    return m_card_pin;
}
void OAINewCard::setCardPin(const QString &card_pin) {
    m_card_pin = card_pin;
    m_card_pin_isSet = true;
}

bool OAINewCard::is_card_pin_Set() const{
    return m_card_pin_isSet;
}

bool OAINewCard::is_card_pin_Valid() const{
    return m_card_pin_isValid;
}

qint64 OAINewCard::getEurIcan() const {
    return m_eur_ican;
}
void OAINewCard::setEurIcan(const qint64 &eur_ican) {
    m_eur_ican = eur_ican;
    m_eur_ican_isSet = true;
}

bool OAINewCard::is_eur_ican_Set() const{
    return m_eur_ican_isSet;
}

bool OAINewCard::is_eur_ican_Valid() const{
    return m_eur_ican_isValid;
}

qint64 OAINewCard::getGbpIcan() const {
    return m_gbp_ican;
}
void OAINewCard::setGbpIcan(const qint64 &gbp_ican) {
    m_gbp_ican = gbp_ican;
    m_gbp_ican_isSet = true;
}

bool OAINewCard::is_gbp_ican_Set() const{
    return m_gbp_ican_isSet;
}

bool OAINewCard::is_gbp_ican_Valid() const{
    return m_gbp_ican_isValid;
}

qint64 OAINewCard::getUserId() const {
    return m_user_id;
}
void OAINewCard::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAINewCard::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAINewCard::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAINewCard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_fees_and_charges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_pin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eur_ican_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gbp_ican_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewCard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
