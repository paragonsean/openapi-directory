/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchItem::OAIBatchItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchItem::OAIBatchItem() {
    this->initializeModel();
}

OAIBatchItem::~OAIBatchItem() {}

void OAIBatchItem::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_amount_after_charges_isSet = false;
    m_amount_after_charges_isValid = false;

    m_batch_item_uuid_isSet = false;
    m_batch_item_uuid_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_fee_amount_isSet = false;
    m_fee_amount_isValid = false;

    m_ican_from_isSet = false;
    m_ican_from_isValid = false;

    m_ican_to_isSet = false;
    m_ican_to_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_ref_isSet = false;
    m_ref_isValid = false;

    m_ref_id_isSet = false;
    m_ref_id_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;
}

void OAIBatchItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchItem::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_amount_after_charges_isValid = ::OpenAPI::fromJsonValue(m_amount_after_charges, json[QString("amountAfterCharges")]);
    m_amount_after_charges_isSet = !json[QString("amountAfterCharges")].isNull() && m_amount_after_charges_isValid;

    m_batch_item_uuid_isValid = ::OpenAPI::fromJsonValue(m_batch_item_uuid, json[QString("batchItemUuid")]);
    m_batch_item_uuid_isSet = !json[QString("batchItemUuid")].isNull() && m_batch_item_uuid_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_fee_amount_isValid = ::OpenAPI::fromJsonValue(m_fee_amount, json[QString("feeAmount")]);
    m_fee_amount_isSet = !json[QString("feeAmount")].isNull() && m_fee_amount_isValid;

    m_ican_from_isValid = ::OpenAPI::fromJsonValue(m_ican_from, json[QString("icanFrom")]);
    m_ican_from_isSet = !json[QString("icanFrom")].isNull() && m_ican_from_isValid;

    m_ican_to_isValid = ::OpenAPI::fromJsonValue(m_ican_to, json[QString("icanTo")]);
    m_ican_to_isSet = !json[QString("icanTo")].isNull() && m_ican_to_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("ref")]);
    m_ref_isSet = !json[QString("ref")].isNull() && m_ref_isValid;

    m_ref_id_isValid = ::OpenAPI::fromJsonValue(m_ref_id, json[QString("refId")]);
    m_ref_id_isSet = !json[QString("refId")].isNull() && m_ref_id_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("taxAmount")]);
    m_tax_amount_isSet = !json[QString("taxAmount")].isNull() && m_tax_amount_isValid;
}

QString OAIBatchItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchItem::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_amount_after_charges_isSet) {
        obj.insert(QString("amountAfterCharges"), ::OpenAPI::toJsonValue(m_amount_after_charges));
    }
    if (m_batch_item_uuid_isSet) {
        obj.insert(QString("batchItemUuid"), ::OpenAPI::toJsonValue(m_batch_item_uuid));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_fee_amount_isSet) {
        obj.insert(QString("feeAmount"), ::OpenAPI::toJsonValue(m_fee_amount));
    }
    if (m_ican_from_isSet) {
        obj.insert(QString("icanFrom"), ::OpenAPI::toJsonValue(m_ican_from));
    }
    if (m_ican_to_isSet) {
        obj.insert(QString("icanTo"), ::OpenAPI::toJsonValue(m_ican_to));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_ref_isSet) {
        obj.insert(QString("ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    if (m_ref_id_isSet) {
        obj.insert(QString("refId"), ::OpenAPI::toJsonValue(m_ref_id));
    }
    if (m_result.isSet()) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("taxAmount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    return obj;
}

qint64 OAIBatchItem::getAmount() const {
    return m_amount;
}
void OAIBatchItem::setAmount(const qint64 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIBatchItem::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIBatchItem::is_amount_Valid() const{
    return m_amount_isValid;
}

qint64 OAIBatchItem::getAmountAfterCharges() const {
    return m_amount_after_charges;
}
void OAIBatchItem::setAmountAfterCharges(const qint64 &amount_after_charges) {
    m_amount_after_charges = amount_after_charges;
    m_amount_after_charges_isSet = true;
}

bool OAIBatchItem::is_amount_after_charges_Set() const{
    return m_amount_after_charges_isSet;
}

bool OAIBatchItem::is_amount_after_charges_Valid() const{
    return m_amount_after_charges_isValid;
}

QString OAIBatchItem::getBatchItemUuid() const {
    return m_batch_item_uuid;
}
void OAIBatchItem::setBatchItemUuid(const QString &batch_item_uuid) {
    m_batch_item_uuid = batch_item_uuid;
    m_batch_item_uuid_isSet = true;
}

bool OAIBatchItem::is_batch_item_uuid_Set() const{
    return m_batch_item_uuid_isSet;
}

bool OAIBatchItem::is_batch_item_uuid_Valid() const{
    return m_batch_item_uuid_isValid;
}

QDateTime OAIBatchItem::getDateCreated() const {
    return m_date_created;
}
void OAIBatchItem::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIBatchItem::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIBatchItem::is_date_created_Valid() const{
    return m_date_created_isValid;
}

qint64 OAIBatchItem::getFeeAmount() const {
    return m_fee_amount;
}
void OAIBatchItem::setFeeAmount(const qint64 &fee_amount) {
    m_fee_amount = fee_amount;
    m_fee_amount_isSet = true;
}

bool OAIBatchItem::is_fee_amount_Set() const{
    return m_fee_amount_isSet;
}

bool OAIBatchItem::is_fee_amount_Valid() const{
    return m_fee_amount_isValid;
}

qint64 OAIBatchItem::getIcanFrom() const {
    return m_ican_from;
}
void OAIBatchItem::setIcanFrom(const qint64 &ican_from) {
    m_ican_from = ican_from;
    m_ican_from_isSet = true;
}

bool OAIBatchItem::is_ican_from_Set() const{
    return m_ican_from_isSet;
}

bool OAIBatchItem::is_ican_from_Valid() const{
    return m_ican_from_isValid;
}

qint64 OAIBatchItem::getIcanTo() const {
    return m_ican_to;
}
void OAIBatchItem::setIcanTo(const qint64 &ican_to) {
    m_ican_to = ican_to;
    m_ican_to_isSet = true;
}

bool OAIBatchItem::is_ican_to_Set() const{
    return m_ican_to_isSet;
}

bool OAIBatchItem::is_ican_to_Valid() const{
    return m_ican_to_isValid;
}

QDateTime OAIBatchItem::getLastUpdated() const {
    return m_last_updated;
}
void OAIBatchItem::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIBatchItem::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIBatchItem::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIBatchItem::getRef() const {
    return m_ref;
}
void OAIBatchItem::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAIBatchItem::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAIBatchItem::is_ref_Valid() const{
    return m_ref_isValid;
}

qint64 OAIBatchItem::getRefId() const {
    return m_ref_id;
}
void OAIBatchItem::setRefId(const qint64 &ref_id) {
    m_ref_id = ref_id;
    m_ref_id_isSet = true;
}

bool OAIBatchItem::is_ref_id_Set() const{
    return m_ref_id_isSet;
}

bool OAIBatchItem::is_ref_id_Valid() const{
    return m_ref_id_isValid;
}

OAIBatchItem_result OAIBatchItem::getResult() const {
    return m_result;
}
void OAIBatchItem::setResult(const OAIBatchItem_result &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIBatchItem::is_result_Set() const{
    return m_result_isSet;
}

bool OAIBatchItem::is_result_Valid() const{
    return m_result_isValid;
}

QString OAIBatchItem::getStatus() const {
    return m_status;
}
void OAIBatchItem::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBatchItem::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBatchItem::is_status_Valid() const{
    return m_status_isValid;
}

qint64 OAIBatchItem::getTaxAmount() const {
    return m_tax_amount;
}
void OAIBatchItem::setTaxAmount(const qint64 &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAIBatchItem::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAIBatchItem::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

bool OAIBatchItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_after_charges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_item_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ican_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ican_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
