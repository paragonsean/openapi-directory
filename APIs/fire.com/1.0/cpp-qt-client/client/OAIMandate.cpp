/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMandate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMandate::OAIMandate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMandate::OAIMandate() {
    this->initializeModel();
}

OAIMandate::~OAIMandate() {}

void OAIMandate::initializeModel() {

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_cancelled_isSet = false;
    m_date_cancelled_isValid = false;

    m_date_completed_isSet = false;
    m_date_completed_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_fire_rejection_reason_isSet = false;
    m_fire_rejection_reason_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_latest_direct_debit_amount_isSet = false;
    m_latest_direct_debit_amount_isValid = false;

    m_latest_direct_debit_date_isSet = false;
    m_latest_direct_debit_date_isValid = false;

    m_mandate_reference_isSet = false;
    m_mandate_reference_isValid = false;

    m_mandate_uuid_isSet = false;
    m_mandate_uuid_isValid = false;

    m_number_of_direct_debit_collected_isSet = false;
    m_number_of_direct_debit_collected_isValid = false;

    m_originator_alias_isSet = false;
    m_originator_alias_isValid = false;

    m_originator_logo_url_large_isSet = false;
    m_originator_logo_url_large_isValid = false;

    m_originator_logo_url_small_isSet = false;
    m_originator_logo_url_small_isValid = false;

    m_originator_name_isSet = false;
    m_originator_name_isValid = false;

    m_originator_reference_isSet = false;
    m_originator_reference_isValid = false;

    m_scheme_cancel_reason_isSet = false;
    m_scheme_cancel_reason_isValid = false;

    m_scheme_cancel_reason_code_isSet = false;
    m_scheme_cancel_reason_code_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_ican_isSet = false;
    m_target_ican_isValid = false;

    m_value_of_direct_debit_collected_isSet = false;
    m_value_of_direct_debit_collected_isValid = false;
}

void OAIMandate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMandate::fromJsonObject(QJsonObject json) {

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_cancelled_isValid = ::OpenAPI::fromJsonValue(m_date_cancelled, json[QString("dateCancelled")]);
    m_date_cancelled_isSet = !json[QString("dateCancelled")].isNull() && m_date_cancelled_isValid;

    m_date_completed_isValid = ::OpenAPI::fromJsonValue(m_date_completed, json[QString("dateCompleted")]);
    m_date_completed_isSet = !json[QString("dateCompleted")].isNull() && m_date_completed_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_fire_rejection_reason_isValid = ::OpenAPI::fromJsonValue(m_fire_rejection_reason, json[QString("fireRejectionReason")]);
    m_fire_rejection_reason_isSet = !json[QString("fireRejectionReason")].isNull() && m_fire_rejection_reason_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_latest_direct_debit_amount_isValid = ::OpenAPI::fromJsonValue(m_latest_direct_debit_amount, json[QString("latestDirectDebitAmount")]);
    m_latest_direct_debit_amount_isSet = !json[QString("latestDirectDebitAmount")].isNull() && m_latest_direct_debit_amount_isValid;

    m_latest_direct_debit_date_isValid = ::OpenAPI::fromJsonValue(m_latest_direct_debit_date, json[QString("latestDirectDebitDate")]);
    m_latest_direct_debit_date_isSet = !json[QString("latestDirectDebitDate")].isNull() && m_latest_direct_debit_date_isValid;

    m_mandate_reference_isValid = ::OpenAPI::fromJsonValue(m_mandate_reference, json[QString("mandateReference")]);
    m_mandate_reference_isSet = !json[QString("mandateReference")].isNull() && m_mandate_reference_isValid;

    m_mandate_uuid_isValid = ::OpenAPI::fromJsonValue(m_mandate_uuid, json[QString("mandateUuid")]);
    m_mandate_uuid_isSet = !json[QString("mandateUuid")].isNull() && m_mandate_uuid_isValid;

    m_number_of_direct_debit_collected_isValid = ::OpenAPI::fromJsonValue(m_number_of_direct_debit_collected, json[QString("numberOfDirectDebitCollected")]);
    m_number_of_direct_debit_collected_isSet = !json[QString("numberOfDirectDebitCollected")].isNull() && m_number_of_direct_debit_collected_isValid;

    m_originator_alias_isValid = ::OpenAPI::fromJsonValue(m_originator_alias, json[QString("originatorAlias")]);
    m_originator_alias_isSet = !json[QString("originatorAlias")].isNull() && m_originator_alias_isValid;

    m_originator_logo_url_large_isValid = ::OpenAPI::fromJsonValue(m_originator_logo_url_large, json[QString("originatorLogoUrlLarge")]);
    m_originator_logo_url_large_isSet = !json[QString("originatorLogoUrlLarge")].isNull() && m_originator_logo_url_large_isValid;

    m_originator_logo_url_small_isValid = ::OpenAPI::fromJsonValue(m_originator_logo_url_small, json[QString("originatorLogoUrlSmall")]);
    m_originator_logo_url_small_isSet = !json[QString("originatorLogoUrlSmall")].isNull() && m_originator_logo_url_small_isValid;

    m_originator_name_isValid = ::OpenAPI::fromJsonValue(m_originator_name, json[QString("originatorName")]);
    m_originator_name_isSet = !json[QString("originatorName")].isNull() && m_originator_name_isValid;

    m_originator_reference_isValid = ::OpenAPI::fromJsonValue(m_originator_reference, json[QString("originatorReference")]);
    m_originator_reference_isSet = !json[QString("originatorReference")].isNull() && m_originator_reference_isValid;

    m_scheme_cancel_reason_isValid = ::OpenAPI::fromJsonValue(m_scheme_cancel_reason, json[QString("schemeCancelReason")]);
    m_scheme_cancel_reason_isSet = !json[QString("schemeCancelReason")].isNull() && m_scheme_cancel_reason_isValid;

    m_scheme_cancel_reason_code_isValid = ::OpenAPI::fromJsonValue(m_scheme_cancel_reason_code, json[QString("schemeCancelReasonCode")]);
    m_scheme_cancel_reason_code_isSet = !json[QString("schemeCancelReasonCode")].isNull() && m_scheme_cancel_reason_code_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_target_ican_isValid = ::OpenAPI::fromJsonValue(m_target_ican, json[QString("targetIcan")]);
    m_target_ican_isSet = !json[QString("targetIcan")].isNull() && m_target_ican_isValid;

    m_value_of_direct_debit_collected_isValid = ::OpenAPI::fromJsonValue(m_value_of_direct_debit_collected, json[QString("valueOfDirectDebitCollected")]);
    m_value_of_direct_debit_collected_isSet = !json[QString("valueOfDirectDebitCollected")].isNull() && m_value_of_direct_debit_collected_isValid;
}

QString OAIMandate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMandate::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_isSet) {
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date_cancelled_isSet) {
        obj.insert(QString("dateCancelled"), ::OpenAPI::toJsonValue(m_date_cancelled));
    }
    if (m_date_completed_isSet) {
        obj.insert(QString("dateCompleted"), ::OpenAPI::toJsonValue(m_date_completed));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_fire_rejection_reason_isSet) {
        obj.insert(QString("fireRejectionReason"), ::OpenAPI::toJsonValue(m_fire_rejection_reason));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_latest_direct_debit_amount_isSet) {
        obj.insert(QString("latestDirectDebitAmount"), ::OpenAPI::toJsonValue(m_latest_direct_debit_amount));
    }
    if (m_latest_direct_debit_date_isSet) {
        obj.insert(QString("latestDirectDebitDate"), ::OpenAPI::toJsonValue(m_latest_direct_debit_date));
    }
    if (m_mandate_reference_isSet) {
        obj.insert(QString("mandateReference"), ::OpenAPI::toJsonValue(m_mandate_reference));
    }
    if (m_mandate_uuid_isSet) {
        obj.insert(QString("mandateUuid"), ::OpenAPI::toJsonValue(m_mandate_uuid));
    }
    if (m_number_of_direct_debit_collected_isSet) {
        obj.insert(QString("numberOfDirectDebitCollected"), ::OpenAPI::toJsonValue(m_number_of_direct_debit_collected));
    }
    if (m_originator_alias_isSet) {
        obj.insert(QString("originatorAlias"), ::OpenAPI::toJsonValue(m_originator_alias));
    }
    if (m_originator_logo_url_large_isSet) {
        obj.insert(QString("originatorLogoUrlLarge"), ::OpenAPI::toJsonValue(m_originator_logo_url_large));
    }
    if (m_originator_logo_url_small_isSet) {
        obj.insert(QString("originatorLogoUrlSmall"), ::OpenAPI::toJsonValue(m_originator_logo_url_small));
    }
    if (m_originator_name_isSet) {
        obj.insert(QString("originatorName"), ::OpenAPI::toJsonValue(m_originator_name));
    }
    if (m_originator_reference_isSet) {
        obj.insert(QString("originatorReference"), ::OpenAPI::toJsonValue(m_originator_reference));
    }
    if (m_scheme_cancel_reason_isSet) {
        obj.insert(QString("schemeCancelReason"), ::OpenAPI::toJsonValue(m_scheme_cancel_reason));
    }
    if (m_scheme_cancel_reason_code_isSet) {
        obj.insert(QString("schemeCancelReasonCode"), ::OpenAPI::toJsonValue(m_scheme_cancel_reason_code));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_ican_isSet) {
        obj.insert(QString("targetIcan"), ::OpenAPI::toJsonValue(m_target_ican));
    }
    if (m_value_of_direct_debit_collected_isSet) {
        obj.insert(QString("valueOfDirectDebitCollected"), ::OpenAPI::toJsonValue(m_value_of_direct_debit_collected));
    }
    return obj;
}

QString OAIMandate::getAlias() const {
    return m_alias;
}
void OAIMandate::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIMandate::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIMandate::is_alias_Valid() const{
    return m_alias_isValid;
}

OAICurrency OAIMandate::getCurrency() const {
    return m_currency;
}
void OAIMandate::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIMandate::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIMandate::is_currency_Valid() const{
    return m_currency_isValid;
}

QDateTime OAIMandate::getDateCancelled() const {
    return m_date_cancelled;
}
void OAIMandate::setDateCancelled(const QDateTime &date_cancelled) {
    m_date_cancelled = date_cancelled;
    m_date_cancelled_isSet = true;
}

bool OAIMandate::is_date_cancelled_Set() const{
    return m_date_cancelled_isSet;
}

bool OAIMandate::is_date_cancelled_Valid() const{
    return m_date_cancelled_isValid;
}

QDateTime OAIMandate::getDateCompleted() const {
    return m_date_completed;
}
void OAIMandate::setDateCompleted(const QDateTime &date_completed) {
    m_date_completed = date_completed;
    m_date_completed_isSet = true;
}

bool OAIMandate::is_date_completed_Set() const{
    return m_date_completed_isSet;
}

bool OAIMandate::is_date_completed_Valid() const{
    return m_date_completed_isValid;
}

QDateTime OAIMandate::getDateCreated() const {
    return m_date_created;
}
void OAIMandate::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIMandate::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIMandate::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIMandate::getFireRejectionReason() const {
    return m_fire_rejection_reason;
}
void OAIMandate::setFireRejectionReason(const QString &fire_rejection_reason) {
    m_fire_rejection_reason = fire_rejection_reason;
    m_fire_rejection_reason_isSet = true;
}

bool OAIMandate::is_fire_rejection_reason_Set() const{
    return m_fire_rejection_reason_isSet;
}

bool OAIMandate::is_fire_rejection_reason_Valid() const{
    return m_fire_rejection_reason_isValid;
}

QDateTime OAIMandate::getLastUpdated() const {
    return m_last_updated;
}
void OAIMandate::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIMandate::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIMandate::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint64 OAIMandate::getLatestDirectDebitAmount() const {
    return m_latest_direct_debit_amount;
}
void OAIMandate::setLatestDirectDebitAmount(const qint64 &latest_direct_debit_amount) {
    m_latest_direct_debit_amount = latest_direct_debit_amount;
    m_latest_direct_debit_amount_isSet = true;
}

bool OAIMandate::is_latest_direct_debit_amount_Set() const{
    return m_latest_direct_debit_amount_isSet;
}

bool OAIMandate::is_latest_direct_debit_amount_Valid() const{
    return m_latest_direct_debit_amount_isValid;
}

QDateTime OAIMandate::getLatestDirectDebitDate() const {
    return m_latest_direct_debit_date;
}
void OAIMandate::setLatestDirectDebitDate(const QDateTime &latest_direct_debit_date) {
    m_latest_direct_debit_date = latest_direct_debit_date;
    m_latest_direct_debit_date_isSet = true;
}

bool OAIMandate::is_latest_direct_debit_date_Set() const{
    return m_latest_direct_debit_date_isSet;
}

bool OAIMandate::is_latest_direct_debit_date_Valid() const{
    return m_latest_direct_debit_date_isValid;
}

QString OAIMandate::getMandateReference() const {
    return m_mandate_reference;
}
void OAIMandate::setMandateReference(const QString &mandate_reference) {
    m_mandate_reference = mandate_reference;
    m_mandate_reference_isSet = true;
}

bool OAIMandate::is_mandate_reference_Set() const{
    return m_mandate_reference_isSet;
}

bool OAIMandate::is_mandate_reference_Valid() const{
    return m_mandate_reference_isValid;
}

QString OAIMandate::getMandateUuid() const {
    return m_mandate_uuid;
}
void OAIMandate::setMandateUuid(const QString &mandate_uuid) {
    m_mandate_uuid = mandate_uuid;
    m_mandate_uuid_isSet = true;
}

bool OAIMandate::is_mandate_uuid_Set() const{
    return m_mandate_uuid_isSet;
}

bool OAIMandate::is_mandate_uuid_Valid() const{
    return m_mandate_uuid_isValid;
}

qint64 OAIMandate::getNumberOfDirectDebitCollected() const {
    return m_number_of_direct_debit_collected;
}
void OAIMandate::setNumberOfDirectDebitCollected(const qint64 &number_of_direct_debit_collected) {
    m_number_of_direct_debit_collected = number_of_direct_debit_collected;
    m_number_of_direct_debit_collected_isSet = true;
}

bool OAIMandate::is_number_of_direct_debit_collected_Set() const{
    return m_number_of_direct_debit_collected_isSet;
}

bool OAIMandate::is_number_of_direct_debit_collected_Valid() const{
    return m_number_of_direct_debit_collected_isValid;
}

QString OAIMandate::getOriginatorAlias() const {
    return m_originator_alias;
}
void OAIMandate::setOriginatorAlias(const QString &originator_alias) {
    m_originator_alias = originator_alias;
    m_originator_alias_isSet = true;
}

bool OAIMandate::is_originator_alias_Set() const{
    return m_originator_alias_isSet;
}

bool OAIMandate::is_originator_alias_Valid() const{
    return m_originator_alias_isValid;
}

QString OAIMandate::getOriginatorLogoUrlLarge() const {
    return m_originator_logo_url_large;
}
void OAIMandate::setOriginatorLogoUrlLarge(const QString &originator_logo_url_large) {
    m_originator_logo_url_large = originator_logo_url_large;
    m_originator_logo_url_large_isSet = true;
}

bool OAIMandate::is_originator_logo_url_large_Set() const{
    return m_originator_logo_url_large_isSet;
}

bool OAIMandate::is_originator_logo_url_large_Valid() const{
    return m_originator_logo_url_large_isValid;
}

QString OAIMandate::getOriginatorLogoUrlSmall() const {
    return m_originator_logo_url_small;
}
void OAIMandate::setOriginatorLogoUrlSmall(const QString &originator_logo_url_small) {
    m_originator_logo_url_small = originator_logo_url_small;
    m_originator_logo_url_small_isSet = true;
}

bool OAIMandate::is_originator_logo_url_small_Set() const{
    return m_originator_logo_url_small_isSet;
}

bool OAIMandate::is_originator_logo_url_small_Valid() const{
    return m_originator_logo_url_small_isValid;
}

QString OAIMandate::getOriginatorName() const {
    return m_originator_name;
}
void OAIMandate::setOriginatorName(const QString &originator_name) {
    m_originator_name = originator_name;
    m_originator_name_isSet = true;
}

bool OAIMandate::is_originator_name_Set() const{
    return m_originator_name_isSet;
}

bool OAIMandate::is_originator_name_Valid() const{
    return m_originator_name_isValid;
}

QString OAIMandate::getOriginatorReference() const {
    return m_originator_reference;
}
void OAIMandate::setOriginatorReference(const QString &originator_reference) {
    m_originator_reference = originator_reference;
    m_originator_reference_isSet = true;
}

bool OAIMandate::is_originator_reference_Set() const{
    return m_originator_reference_isSet;
}

bool OAIMandate::is_originator_reference_Valid() const{
    return m_originator_reference_isValid;
}

QString OAIMandate::getSchemeCancelReason() const {
    return m_scheme_cancel_reason;
}
void OAIMandate::setSchemeCancelReason(const QString &scheme_cancel_reason) {
    m_scheme_cancel_reason = scheme_cancel_reason;
    m_scheme_cancel_reason_isSet = true;
}

bool OAIMandate::is_scheme_cancel_reason_Set() const{
    return m_scheme_cancel_reason_isSet;
}

bool OAIMandate::is_scheme_cancel_reason_Valid() const{
    return m_scheme_cancel_reason_isValid;
}

QString OAIMandate::getSchemeCancelReasonCode() const {
    return m_scheme_cancel_reason_code;
}
void OAIMandate::setSchemeCancelReasonCode(const QString &scheme_cancel_reason_code) {
    m_scheme_cancel_reason_code = scheme_cancel_reason_code;
    m_scheme_cancel_reason_code_isSet = true;
}

bool OAIMandate::is_scheme_cancel_reason_code_Set() const{
    return m_scheme_cancel_reason_code_isSet;
}

bool OAIMandate::is_scheme_cancel_reason_code_Valid() const{
    return m_scheme_cancel_reason_code_isValid;
}

QString OAIMandate::getStatus() const {
    return m_status;
}
void OAIMandate::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMandate::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMandate::is_status_Valid() const{
    return m_status_isValid;
}

qint64 OAIMandate::getTargetIcan() const {
    return m_target_ican;
}
void OAIMandate::setTargetIcan(const qint64 &target_ican) {
    m_target_ican = target_ican;
    m_target_ican_isSet = true;
}

bool OAIMandate::is_target_ican_Set() const{
    return m_target_ican_isSet;
}

bool OAIMandate::is_target_ican_Valid() const{
    return m_target_ican_isValid;
}

qint64 OAIMandate::getValueOfDirectDebitCollected() const {
    return m_value_of_direct_debit_collected;
}
void OAIMandate::setValueOfDirectDebitCollected(const qint64 &value_of_direct_debit_collected) {
    m_value_of_direct_debit_collected = value_of_direct_debit_collected;
    m_value_of_direct_debit_collected_isSet = true;
}

bool OAIMandate::is_value_of_direct_debit_collected_Set() const{
    return m_value_of_direct_debit_collected_isSet;
}

bool OAIMandate::is_value_of_direct_debit_collected_Valid() const{
    return m_value_of_direct_debit_collected_isValid;
}

bool OAIMandate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_cancelled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_completed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fire_rejection_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_direct_debit_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_direct_debit_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandate_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandate_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_direct_debit_collected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originator_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originator_logo_url_large_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originator_logo_url_small_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originator_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originator_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_cancel_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_cancel_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_ican_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_of_direct_debit_collected_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMandate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
