/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount::OAIAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount::OAIAccount() {
    this->initializeModel();
}

OAIAccount::~OAIAccount() {}

void OAIAccount::initializeModel() {

    m_balance_isSet = false;
    m_balance_isValid = false;

    m_cbic_isSet = false;
    m_cbic_isValid = false;

    m_ccan_isSet = false;
    m_ccan_isValid = false;

    m_ciban_isSet = false;
    m_ciban_isValid = false;

    m_cnsc_isSet = false;
    m_cnsc_isValid = false;

    m_colour_isSet = false;
    m_colour_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_default_account_isSet = false;
    m_default_account_isValid = false;

    m_direct_debits_allowed_isSet = false;
    m_direct_debits_allowed_isValid = false;

    m_fop_only_isSet = false;
    m_fop_only_isValid = false;

    m_ican_isSet = false;
    m_ican_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount::fromJsonObject(QJsonObject json) {

    m_balance_isValid = ::OpenAPI::fromJsonValue(m_balance, json[QString("balance")]);
    m_balance_isSet = !json[QString("balance")].isNull() && m_balance_isValid;

    m_cbic_isValid = ::OpenAPI::fromJsonValue(m_cbic, json[QString("cbic")]);
    m_cbic_isSet = !json[QString("cbic")].isNull() && m_cbic_isValid;

    m_ccan_isValid = ::OpenAPI::fromJsonValue(m_ccan, json[QString("ccan")]);
    m_ccan_isSet = !json[QString("ccan")].isNull() && m_ccan_isValid;

    m_ciban_isValid = ::OpenAPI::fromJsonValue(m_ciban, json[QString("ciban")]);
    m_ciban_isSet = !json[QString("ciban")].isNull() && m_ciban_isValid;

    m_cnsc_isValid = ::OpenAPI::fromJsonValue(m_cnsc, json[QString("cnsc")]);
    m_cnsc_isSet = !json[QString("cnsc")].isNull() && m_cnsc_isValid;

    m_colour_isValid = ::OpenAPI::fromJsonValue(m_colour, json[QString("colour")]);
    m_colour_isSet = !json[QString("colour")].isNull() && m_colour_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_default_account_isValid = ::OpenAPI::fromJsonValue(m_default_account, json[QString("defaultAccount")]);
    m_default_account_isSet = !json[QString("defaultAccount")].isNull() && m_default_account_isValid;

    m_direct_debits_allowed_isValid = ::OpenAPI::fromJsonValue(m_direct_debits_allowed, json[QString("directDebitsAllowed")]);
    m_direct_debits_allowed_isSet = !json[QString("directDebitsAllowed")].isNull() && m_direct_debits_allowed_isValid;

    m_fop_only_isValid = ::OpenAPI::fromJsonValue(m_fop_only, json[QString("fopOnly")]);
    m_fop_only_isSet = !json[QString("fopOnly")].isNull() && m_fop_only_isValid;

    m_ican_isValid = ::OpenAPI::fromJsonValue(m_ican, json[QString("ican")]);
    m_ican_isSet = !json[QString("ican")].isNull() && m_ican_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_balance_isSet) {
        obj.insert(QString("balance"), ::OpenAPI::toJsonValue(m_balance));
    }
    if (m_cbic_isSet) {
        obj.insert(QString("cbic"), ::OpenAPI::toJsonValue(m_cbic));
    }
    if (m_ccan_isSet) {
        obj.insert(QString("ccan"), ::OpenAPI::toJsonValue(m_ccan));
    }
    if (m_ciban_isSet) {
        obj.insert(QString("ciban"), ::OpenAPI::toJsonValue(m_ciban));
    }
    if (m_cnsc_isSet) {
        obj.insert(QString("cnsc"), ::OpenAPI::toJsonValue(m_cnsc));
    }
    if (m_colour_isSet) {
        obj.insert(QString("colour"), ::OpenAPI::toJsonValue(m_colour));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_default_account_isSet) {
        obj.insert(QString("defaultAccount"), ::OpenAPI::toJsonValue(m_default_account));
    }
    if (m_direct_debits_allowed_isSet) {
        obj.insert(QString("directDebitsAllowed"), ::OpenAPI::toJsonValue(m_direct_debits_allowed));
    }
    if (m_fop_only_isSet) {
        obj.insert(QString("fopOnly"), ::OpenAPI::toJsonValue(m_fop_only));
    }
    if (m_ican_isSet) {
        obj.insert(QString("ican"), ::OpenAPI::toJsonValue(m_ican));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint64 OAIAccount::getBalance() const {
    return m_balance;
}
void OAIAccount::setBalance(const qint64 &balance) {
    m_balance = balance;
    m_balance_isSet = true;
}

bool OAIAccount::is_balance_Set() const{
    return m_balance_isSet;
}

bool OAIAccount::is_balance_Valid() const{
    return m_balance_isValid;
}

QString OAIAccount::getCbic() const {
    return m_cbic;
}
void OAIAccount::setCbic(const QString &cbic) {
    m_cbic = cbic;
    m_cbic_isSet = true;
}

bool OAIAccount::is_cbic_Set() const{
    return m_cbic_isSet;
}

bool OAIAccount::is_cbic_Valid() const{
    return m_cbic_isValid;
}

QString OAIAccount::getCcan() const {
    return m_ccan;
}
void OAIAccount::setCcan(const QString &ccan) {
    m_ccan = ccan;
    m_ccan_isSet = true;
}

bool OAIAccount::is_ccan_Set() const{
    return m_ccan_isSet;
}

bool OAIAccount::is_ccan_Valid() const{
    return m_ccan_isValid;
}

QString OAIAccount::getCiban() const {
    return m_ciban;
}
void OAIAccount::setCiban(const QString &ciban) {
    m_ciban = ciban;
    m_ciban_isSet = true;
}

bool OAIAccount::is_ciban_Set() const{
    return m_ciban_isSet;
}

bool OAIAccount::is_ciban_Valid() const{
    return m_ciban_isValid;
}

QString OAIAccount::getCnsc() const {
    return m_cnsc;
}
void OAIAccount::setCnsc(const QString &cnsc) {
    m_cnsc = cnsc;
    m_cnsc_isSet = true;
}

bool OAIAccount::is_cnsc_Set() const{
    return m_cnsc_isSet;
}

bool OAIAccount::is_cnsc_Valid() const{
    return m_cnsc_isValid;
}

QString OAIAccount::getColour() const {
    return m_colour;
}
void OAIAccount::setColour(const QString &colour) {
    m_colour = colour;
    m_colour_isSet = true;
}

bool OAIAccount::is_colour_Set() const{
    return m_colour_isSet;
}

bool OAIAccount::is_colour_Valid() const{
    return m_colour_isValid;
}

OAICurrency OAIAccount::getCurrency() const {
    return m_currency;
}
void OAIAccount::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIAccount::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIAccount::is_currency_Valid() const{
    return m_currency_isValid;
}

bool OAIAccount::isDefaultAccount() const {
    return m_default_account;
}
void OAIAccount::setDefaultAccount(const bool &default_account) {
    m_default_account = default_account;
    m_default_account_isSet = true;
}

bool OAIAccount::is_default_account_Set() const{
    return m_default_account_isSet;
}

bool OAIAccount::is_default_account_Valid() const{
    return m_default_account_isValid;
}

bool OAIAccount::isDirectDebitsAllowed() const {
    return m_direct_debits_allowed;
}
void OAIAccount::setDirectDebitsAllowed(const bool &direct_debits_allowed) {
    m_direct_debits_allowed = direct_debits_allowed;
    m_direct_debits_allowed_isSet = true;
}

bool OAIAccount::is_direct_debits_allowed_Set() const{
    return m_direct_debits_allowed_isSet;
}

bool OAIAccount::is_direct_debits_allowed_Valid() const{
    return m_direct_debits_allowed_isValid;
}

bool OAIAccount::isFopOnly() const {
    return m_fop_only;
}
void OAIAccount::setFopOnly(const bool &fop_only) {
    m_fop_only = fop_only;
    m_fop_only_isSet = true;
}

bool OAIAccount::is_fop_only_Set() const{
    return m_fop_only_isSet;
}

bool OAIAccount::is_fop_only_Valid() const{
    return m_fop_only_isValid;
}

qint64 OAIAccount::getIcan() const {
    return m_ican;
}
void OAIAccount::setIcan(const qint64 &ican) {
    m_ican = ican;
    m_ican_isSet = true;
}

bool OAIAccount::is_ican_Set() const{
    return m_ican_isSet;
}

bool OAIAccount::is_ican_Valid() const{
    return m_ican_isValid;
}

QString OAIAccount::getName() const {
    return m_name;
}
void OAIAccount::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAccount::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAccount::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIAccount::getStatus() const {
    return m_status;
}
void OAIAccount::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAccount::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAccount::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cbic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ccan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ciban_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cnsc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_colour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_debits_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fop_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ican_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
