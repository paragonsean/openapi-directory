/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDirectDebit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDirectDebit::OAIDirectDebit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDirectDebit::OAIDirectDebit() {
    this->initializeModel();
}

OAIDirectDebit::~OAIDirectDebit() {}

void OAIDirectDebit::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_direct_debit_reference_isSet = false;
    m_direct_debit_reference_isValid = false;

    m_direct_debit_uuid_isSet = false;
    m_direct_debit_uuid_isValid = false;

    m_is_ddic_isSet = false;
    m_is_ddic_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_mandate_u_uid_isSet = false;
    m_mandate_u_uid_isValid = false;

    m_originator_alias_isSet = false;
    m_originator_alias_isValid = false;

    m_originator_name_isSet = false;
    m_originator_name_isValid = false;

    m_originator_reference_isSet = false;
    m_originator_reference_isValid = false;

    m_scheme_reject_reason_isSet = false;
    m_scheme_reject_reason_isValid = false;

    m_scheme_reject_reason_code_isSet = false;
    m_scheme_reject_reason_code_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_ican_isSet = false;
    m_target_ican_isValid = false;

    m_target_payee_id_isSet = false;
    m_target_payee_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDirectDebit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDirectDebit::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_direct_debit_reference_isValid = ::OpenAPI::fromJsonValue(m_direct_debit_reference, json[QString("directDebitReference")]);
    m_direct_debit_reference_isSet = !json[QString("directDebitReference")].isNull() && m_direct_debit_reference_isValid;

    m_direct_debit_uuid_isValid = ::OpenAPI::fromJsonValue(m_direct_debit_uuid, json[QString("directDebitUuid")]);
    m_direct_debit_uuid_isSet = !json[QString("directDebitUuid")].isNull() && m_direct_debit_uuid_isValid;

    m_is_ddic_isValid = ::OpenAPI::fromJsonValue(m_is_ddic, json[QString("isDDIC")]);
    m_is_ddic_isSet = !json[QString("isDDIC")].isNull() && m_is_ddic_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_mandate_u_uid_isValid = ::OpenAPI::fromJsonValue(m_mandate_u_uid, json[QString("mandateUUid")]);
    m_mandate_u_uid_isSet = !json[QString("mandateUUid")].isNull() && m_mandate_u_uid_isValid;

    m_originator_alias_isValid = ::OpenAPI::fromJsonValue(m_originator_alias, json[QString("originatorAlias")]);
    m_originator_alias_isSet = !json[QString("originatorAlias")].isNull() && m_originator_alias_isValid;

    m_originator_name_isValid = ::OpenAPI::fromJsonValue(m_originator_name, json[QString("originatorName")]);
    m_originator_name_isSet = !json[QString("originatorName")].isNull() && m_originator_name_isValid;

    m_originator_reference_isValid = ::OpenAPI::fromJsonValue(m_originator_reference, json[QString("originatorReference")]);
    m_originator_reference_isSet = !json[QString("originatorReference")].isNull() && m_originator_reference_isValid;

    m_scheme_reject_reason_isValid = ::OpenAPI::fromJsonValue(m_scheme_reject_reason, json[QString("schemeRejectReason")]);
    m_scheme_reject_reason_isSet = !json[QString("schemeRejectReason")].isNull() && m_scheme_reject_reason_isValid;

    m_scheme_reject_reason_code_isValid = ::OpenAPI::fromJsonValue(m_scheme_reject_reason_code, json[QString("schemeRejectReasonCode")]);
    m_scheme_reject_reason_code_isSet = !json[QString("schemeRejectReasonCode")].isNull() && m_scheme_reject_reason_code_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_target_ican_isValid = ::OpenAPI::fromJsonValue(m_target_ican, json[QString("targetIcan")]);
    m_target_ican_isSet = !json[QString("targetIcan")].isNull() && m_target_ican_isValid;

    m_target_payee_id_isValid = ::OpenAPI::fromJsonValue(m_target_payee_id, json[QString("targetPayeeId")]);
    m_target_payee_id_isSet = !json[QString("targetPayeeId")].isNull() && m_target_payee_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDirectDebit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDirectDebit::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_direct_debit_reference_isSet) {
        obj.insert(QString("directDebitReference"), ::OpenAPI::toJsonValue(m_direct_debit_reference));
    }
    if (m_direct_debit_uuid_isSet) {
        obj.insert(QString("directDebitUuid"), ::OpenAPI::toJsonValue(m_direct_debit_uuid));
    }
    if (m_is_ddic_isSet) {
        obj.insert(QString("isDDIC"), ::OpenAPI::toJsonValue(m_is_ddic));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_mandate_u_uid_isSet) {
        obj.insert(QString("mandateUUid"), ::OpenAPI::toJsonValue(m_mandate_u_uid));
    }
    if (m_originator_alias_isSet) {
        obj.insert(QString("originatorAlias"), ::OpenAPI::toJsonValue(m_originator_alias));
    }
    if (m_originator_name_isSet) {
        obj.insert(QString("originatorName"), ::OpenAPI::toJsonValue(m_originator_name));
    }
    if (m_originator_reference_isSet) {
        obj.insert(QString("originatorReference"), ::OpenAPI::toJsonValue(m_originator_reference));
    }
    if (m_scheme_reject_reason_isSet) {
        obj.insert(QString("schemeRejectReason"), ::OpenAPI::toJsonValue(m_scheme_reject_reason));
    }
    if (m_scheme_reject_reason_code_isSet) {
        obj.insert(QString("schemeRejectReasonCode"), ::OpenAPI::toJsonValue(m_scheme_reject_reason_code));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_ican_isSet) {
        obj.insert(QString("targetIcan"), ::OpenAPI::toJsonValue(m_target_ican));
    }
    if (m_target_payee_id_isSet) {
        obj.insert(QString("targetPayeeId"), ::OpenAPI::toJsonValue(m_target_payee_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint64 OAIDirectDebit::getAmount() const {
    return m_amount;
}
void OAIDirectDebit::setAmount(const qint64 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIDirectDebit::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIDirectDebit::is_amount_Valid() const{
    return m_amount_isValid;
}

OAICurrency OAIDirectDebit::getCurrency() const {
    return m_currency;
}
void OAIDirectDebit::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIDirectDebit::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIDirectDebit::is_currency_Valid() const{
    return m_currency_isValid;
}

QDateTime OAIDirectDebit::getDateCreated() const {
    return m_date_created;
}
void OAIDirectDebit::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIDirectDebit::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIDirectDebit::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIDirectDebit::getDirectDebitReference() const {
    return m_direct_debit_reference;
}
void OAIDirectDebit::setDirectDebitReference(const QString &direct_debit_reference) {
    m_direct_debit_reference = direct_debit_reference;
    m_direct_debit_reference_isSet = true;
}

bool OAIDirectDebit::is_direct_debit_reference_Set() const{
    return m_direct_debit_reference_isSet;
}

bool OAIDirectDebit::is_direct_debit_reference_Valid() const{
    return m_direct_debit_reference_isValid;
}

QString OAIDirectDebit::getDirectDebitUuid() const {
    return m_direct_debit_uuid;
}
void OAIDirectDebit::setDirectDebitUuid(const QString &direct_debit_uuid) {
    m_direct_debit_uuid = direct_debit_uuid;
    m_direct_debit_uuid_isSet = true;
}

bool OAIDirectDebit::is_direct_debit_uuid_Set() const{
    return m_direct_debit_uuid_isSet;
}

bool OAIDirectDebit::is_direct_debit_uuid_Valid() const{
    return m_direct_debit_uuid_isValid;
}

bool OAIDirectDebit::isIsDdic() const {
    return m_is_ddic;
}
void OAIDirectDebit::setIsDdic(const bool &is_ddic) {
    m_is_ddic = is_ddic;
    m_is_ddic_isSet = true;
}

bool OAIDirectDebit::is_is_ddic_Set() const{
    return m_is_ddic_isSet;
}

bool OAIDirectDebit::is_is_ddic_Valid() const{
    return m_is_ddic_isValid;
}

QDateTime OAIDirectDebit::getLastUpdated() const {
    return m_last_updated;
}
void OAIDirectDebit::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIDirectDebit::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIDirectDebit::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIDirectDebit::getMandateUUid() const {
    return m_mandate_u_uid;
}
void OAIDirectDebit::setMandateUUid(const QString &mandate_u_uid) {
    m_mandate_u_uid = mandate_u_uid;
    m_mandate_u_uid_isSet = true;
}

bool OAIDirectDebit::is_mandate_u_uid_Set() const{
    return m_mandate_u_uid_isSet;
}

bool OAIDirectDebit::is_mandate_u_uid_Valid() const{
    return m_mandate_u_uid_isValid;
}

QString OAIDirectDebit::getOriginatorAlias() const {
    return m_originator_alias;
}
void OAIDirectDebit::setOriginatorAlias(const QString &originator_alias) {
    m_originator_alias = originator_alias;
    m_originator_alias_isSet = true;
}

bool OAIDirectDebit::is_originator_alias_Set() const{
    return m_originator_alias_isSet;
}

bool OAIDirectDebit::is_originator_alias_Valid() const{
    return m_originator_alias_isValid;
}

QString OAIDirectDebit::getOriginatorName() const {
    return m_originator_name;
}
void OAIDirectDebit::setOriginatorName(const QString &originator_name) {
    m_originator_name = originator_name;
    m_originator_name_isSet = true;
}

bool OAIDirectDebit::is_originator_name_Set() const{
    return m_originator_name_isSet;
}

bool OAIDirectDebit::is_originator_name_Valid() const{
    return m_originator_name_isValid;
}

QString OAIDirectDebit::getOriginatorReference() const {
    return m_originator_reference;
}
void OAIDirectDebit::setOriginatorReference(const QString &originator_reference) {
    m_originator_reference = originator_reference;
    m_originator_reference_isSet = true;
}

bool OAIDirectDebit::is_originator_reference_Set() const{
    return m_originator_reference_isSet;
}

bool OAIDirectDebit::is_originator_reference_Valid() const{
    return m_originator_reference_isValid;
}

QString OAIDirectDebit::getSchemeRejectReason() const {
    return m_scheme_reject_reason;
}
void OAIDirectDebit::setSchemeRejectReason(const QString &scheme_reject_reason) {
    m_scheme_reject_reason = scheme_reject_reason;
    m_scheme_reject_reason_isSet = true;
}

bool OAIDirectDebit::is_scheme_reject_reason_Set() const{
    return m_scheme_reject_reason_isSet;
}

bool OAIDirectDebit::is_scheme_reject_reason_Valid() const{
    return m_scheme_reject_reason_isValid;
}

QString OAIDirectDebit::getSchemeRejectReasonCode() const {
    return m_scheme_reject_reason_code;
}
void OAIDirectDebit::setSchemeRejectReasonCode(const QString &scheme_reject_reason_code) {
    m_scheme_reject_reason_code = scheme_reject_reason_code;
    m_scheme_reject_reason_code_isSet = true;
}

bool OAIDirectDebit::is_scheme_reject_reason_code_Set() const{
    return m_scheme_reject_reason_code_isSet;
}

bool OAIDirectDebit::is_scheme_reject_reason_code_Valid() const{
    return m_scheme_reject_reason_code_isValid;
}

QString OAIDirectDebit::getStatus() const {
    return m_status;
}
void OAIDirectDebit::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDirectDebit::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDirectDebit::is_status_Valid() const{
    return m_status_isValid;
}

qint64 OAIDirectDebit::getTargetIcan() const {
    return m_target_ican;
}
void OAIDirectDebit::setTargetIcan(const qint64 &target_ican) {
    m_target_ican = target_ican;
    m_target_ican_isSet = true;
}

bool OAIDirectDebit::is_target_ican_Set() const{
    return m_target_ican_isSet;
}

bool OAIDirectDebit::is_target_ican_Valid() const{
    return m_target_ican_isValid;
}

qint64 OAIDirectDebit::getTargetPayeeId() const {
    return m_target_payee_id;
}
void OAIDirectDebit::setTargetPayeeId(const qint64 &target_payee_id) {
    m_target_payee_id = target_payee_id;
    m_target_payee_id_isSet = true;
}

bool OAIDirectDebit::is_target_payee_id_Set() const{
    return m_target_payee_id_isSet;
}

bool OAIDirectDebit::is_target_payee_id_Valid() const{
    return m_target_payee_id_isValid;
}

QString OAIDirectDebit::getType() const {
    return m_type;
}
void OAIDirectDebit::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDirectDebit::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDirectDebit::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDirectDebit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_debit_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direct_debit_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_ddic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandate_u_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originator_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originator_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_originator_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_reject_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_reject_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_ican_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_payee_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDirectDebit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
