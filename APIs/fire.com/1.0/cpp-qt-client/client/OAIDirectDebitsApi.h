/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDirectDebitsApi_H
#define OAI_OAIDirectDebitsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDirectDebit.h"
#include "OAIDirectDebits.h"
#include "OAIMandate.h"
#include "OAIMandates.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDirectDebitsApi : public QObject {
    Q_OBJECT

public:
    OAIDirectDebitsApi(const int timeOut = 0);
    ~OAIDirectDebitsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  mandate_uuid QString [required]
    */
    virtual void activateMandate(const QString &mandate_uuid);

    /**
    * @param[in]  mandate_uuid QString [required]
    */
    virtual void cancelMandateByUuid(const QString &mandate_uuid);

    /**
    * @param[in]  direct_debit_uuid QString [required]
    */
    virtual void getDirectDebitByUuid(const QString &direct_debit_uuid);


    virtual void getDirectDebitMandates();

    /**
    * @param[in]  mandate_uuid QString [required]
    */
    virtual void getDirectDebitsForMandateUuid(const QString &mandate_uuid);

    /**
    * @param[in]  mandate_uuid QString [required]
    */
    virtual void getMandate(const QString &mandate_uuid);

    /**
    * @param[in]  direct_debit_uuid QString [required]
    */
    virtual void rejectDirectDebit(const QString &direct_debit_uuid);

    /**
    * @param[in]  mandate_uuid QString [required]
    */
    virtual void updateMandateAlias(const QString &mandate_uuid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activateMandateCallback(OAIHttpRequestWorker *worker);
    void cancelMandateByUuidCallback(OAIHttpRequestWorker *worker);
    void getDirectDebitByUuidCallback(OAIHttpRequestWorker *worker);
    void getDirectDebitMandatesCallback(OAIHttpRequestWorker *worker);
    void getDirectDebitsForMandateUuidCallback(OAIHttpRequestWorker *worker);
    void getMandateCallback(OAIHttpRequestWorker *worker);
    void rejectDirectDebitCallback(OAIHttpRequestWorker *worker);
    void updateMandateAliasCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void activateMandateSignal();
    void cancelMandateByUuidSignal();
    void getDirectDebitByUuidSignal(OAIDirectDebit summary);
    void getDirectDebitMandatesSignal(OAIMandates summary);
    void getDirectDebitsForMandateUuidSignal(OAIDirectDebits summary);
    void getMandateSignal(OAIMandate summary);
    void rejectDirectDebitSignal();
    void updateMandateAliasSignal();


    void activateMandateSignalFull(OAIHttpRequestWorker *worker);
    void cancelMandateByUuidSignalFull(OAIHttpRequestWorker *worker);
    void getDirectDebitByUuidSignalFull(OAIHttpRequestWorker *worker, OAIDirectDebit summary);
    void getDirectDebitMandatesSignalFull(OAIHttpRequestWorker *worker, OAIMandates summary);
    void getDirectDebitsForMandateUuidSignalFull(OAIHttpRequestWorker *worker, OAIDirectDebits summary);
    void getMandateSignalFull(OAIHttpRequestWorker *worker, OAIMandate summary);
    void rejectDirectDebitSignalFull(OAIHttpRequestWorker *worker);
    void updateMandateAliasSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use activateMandateSignalError() instead")
    void activateMandateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void activateMandateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelMandateByUuidSignalError() instead")
    void cancelMandateByUuidSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelMandateByUuidSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDirectDebitByUuidSignalError() instead")
    void getDirectDebitByUuidSignalE(OAIDirectDebit summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDirectDebitByUuidSignalError(OAIDirectDebit summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDirectDebitMandatesSignalError() instead")
    void getDirectDebitMandatesSignalE(OAIMandates summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDirectDebitMandatesSignalError(OAIMandates summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDirectDebitsForMandateUuidSignalError() instead")
    void getDirectDebitsForMandateUuidSignalE(OAIDirectDebits summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDirectDebitsForMandateUuidSignalError(OAIDirectDebits summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMandateSignalError() instead")
    void getMandateSignalE(OAIMandate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMandateSignalError(OAIMandate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rejectDirectDebitSignalError() instead")
    void rejectDirectDebitSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rejectDirectDebitSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMandateAliasSignalError() instead")
    void updateMandateAliasSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateMandateAliasSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use activateMandateSignalErrorFull() instead")
    void activateMandateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activateMandateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelMandateByUuidSignalErrorFull() instead")
    void cancelMandateByUuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelMandateByUuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDirectDebitByUuidSignalErrorFull() instead")
    void getDirectDebitByUuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDirectDebitByUuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDirectDebitMandatesSignalErrorFull() instead")
    void getDirectDebitMandatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDirectDebitMandatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDirectDebitsForMandateUuidSignalErrorFull() instead")
    void getDirectDebitsForMandateUuidSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDirectDebitsForMandateUuidSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMandateSignalErrorFull() instead")
    void getMandateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMandateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rejectDirectDebitSignalErrorFull() instead")
    void rejectDirectDebitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rejectDirectDebitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMandateAliasSignalErrorFull() instead")
    void updateMandateAliasSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMandateAliasSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
