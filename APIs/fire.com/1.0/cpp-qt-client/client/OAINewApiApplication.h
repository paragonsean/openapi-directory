/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINewApiApplication.h
 *
 * 
 */

#ifndef OAINewApiApplication_H
#define OAINewApiApplication_H

#include <QJsonObject>

#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINewApiApplication : public OAIObject {
public:
    OAINewApiApplication();
    OAINewApiApplication(QString json);
    ~OAINewApiApplication() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApplicationName() const;
    void setApplicationName(const QString &application_name);
    bool is_application_name_Set() const;
    bool is_application_name_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QDateTime getExpiry() const;
    void setExpiry(const QDateTime &expiry);
    bool is_expiry_Set() const;
    bool is_expiry_Valid() const;

    qint64 getIcan() const;
    void setIcan(const qint64 &ican);
    bool is_ican_Set() const;
    bool is_ican_Valid() const;

    qint32 getNumberOfPayeeApprovalsRequired() const;
    void setNumberOfPayeeApprovalsRequired(const qint32 &number_of_payee_approvals_required);
    bool is_number_of_payee_approvals_required_Set() const;
    bool is_number_of_payee_approvals_required_Valid() const;

    qint32 getNumberOfPaymentApprovalsRequired() const;
    void setNumberOfPaymentApprovalsRequired(const qint32 &number_of_payment_approvals_required);
    bool is_number_of_payment_approvals_required_Set() const;
    bool is_number_of_payment_approvals_required_Valid() const;

    QList<QString> getPermissions() const;
    void setPermissions(const QList<QString> &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_application_name;
    bool m_application_name_isSet;
    bool m_application_name_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QDateTime m_expiry;
    bool m_expiry_isSet;
    bool m_expiry_isValid;

    qint64 m_ican;
    bool m_ican_isSet;
    bool m_ican_isValid;

    qint32 m_number_of_payee_approvals_required;
    bool m_number_of_payee_approvals_required_isSet;
    bool m_number_of_payee_approvals_required_isValid;

    qint32 m_number_of_payment_approvals_required;
    bool m_number_of_payment_approvals_required_isSet;
    bool m_number_of_payment_approvals_required_isValid;

    QList<QString> m_permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINewApiApplication)

#endif // OAINewApiApplication_H
