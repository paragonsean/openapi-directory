/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchApprovers_approvals_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchApprovers_approvals_inner::OAIBatchApprovers_approvals_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchApprovers_approvals_inner::OAIBatchApprovers_approvals_inner() {
    this->initializeModel();
}

OAIBatchApprovers_approvals_inner::~OAIBatchApprovers_approvals_inner() {}

void OAIBatchApprovers_approvals_inner::initializeModel() {

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_mobile_number_isSet = false;
    m_mobile_number_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIBatchApprovers_approvals_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchApprovers_approvals_inner::fromJsonObject(QJsonObject json) {

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("emailAddress")]);
    m_email_address_isSet = !json[QString("emailAddress")].isNull() && m_email_address_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_mobile_number_isValid = ::OpenAPI::fromJsonValue(m_mobile_number, json[QString("mobileNumber")]);
    m_mobile_number_isSet = !json[QString("mobileNumber")].isNull() && m_mobile_number_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIBatchApprovers_approvals_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchApprovers_approvals_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_email_address_isSet) {
        obj.insert(QString("emailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_mobile_number_isSet) {
        obj.insert(QString("mobileNumber"), ::OpenAPI::toJsonValue(m_mobile_number));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIBatchApprovers_approvals_inner::getEmailAddress() const {
    return m_email_address;
}
void OAIBatchApprovers_approvals_inner::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIBatchApprovers_approvals_inner::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIBatchApprovers_approvals_inner::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAIBatchApprovers_approvals_inner::getFirstName() const {
    return m_first_name;
}
void OAIBatchApprovers_approvals_inner::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIBatchApprovers_approvals_inner::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIBatchApprovers_approvals_inner::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIBatchApprovers_approvals_inner::getLastName() const {
    return m_last_name;
}
void OAIBatchApprovers_approvals_inner::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIBatchApprovers_approvals_inner::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIBatchApprovers_approvals_inner::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QDateTime OAIBatchApprovers_approvals_inner::getLastUpdated() const {
    return m_last_updated;
}
void OAIBatchApprovers_approvals_inner::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIBatchApprovers_approvals_inner::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIBatchApprovers_approvals_inner::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIBatchApprovers_approvals_inner::getMobileNumber() const {
    return m_mobile_number;
}
void OAIBatchApprovers_approvals_inner::setMobileNumber(const QString &mobile_number) {
    m_mobile_number = mobile_number;
    m_mobile_number_isSet = true;
}

bool OAIBatchApprovers_approvals_inner::is_mobile_number_Set() const{
    return m_mobile_number_isSet;
}

bool OAIBatchApprovers_approvals_inner::is_mobile_number_Valid() const{
    return m_mobile_number_isValid;
}

QString OAIBatchApprovers_approvals_inner::getStatus() const {
    return m_status;
}
void OAIBatchApprovers_approvals_inner::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBatchApprovers_approvals_inner::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBatchApprovers_approvals_inner::is_status_Valid() const{
    return m_status_isValid;
}

qint64 OAIBatchApprovers_approvals_inner::getUserId() const {
    return m_user_id;
}
void OAIBatchApprovers_approvals_inner::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIBatchApprovers_approvals_inner::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIBatchApprovers_approvals_inner::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIBatchApprovers_approvals_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchApprovers_approvals_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
