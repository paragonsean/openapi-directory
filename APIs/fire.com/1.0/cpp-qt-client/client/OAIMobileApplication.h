/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMobileApplication.h
 *
 * 
 */

#ifndef OAIMobileApplication_H
#define OAIMobileApplication_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMobileApplication : public OAIObject {
public:
    OAIMobileApplication();
    OAIMobileApplication(QString json);
    ~OAIMobileApplication() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getOs() const;
    void setOs(const QString &os);
    bool is_os_Set() const;
    bool is_os_Valid() const;

    qint64 getBusinessUserId() const;
    void setBusinessUserId(const qint64 &business_user_id);
    bool is_business_user_id_Set() const;
    bool is_business_user_id_Valid() const;

    QString getClientId() const;
    void setClientId(const QString &client_id);
    bool is_client_id_Set() const;
    bool is_client_id_Valid() const;

    QString getDeviceName() const;
    void setDeviceName(const QString &device_name);
    bool is_device_name_Set() const;
    bool is_device_name_Valid() const;

    QString getDeviceOsVersion() const;
    void setDeviceOsVersion(const QString &device_os_version);
    bool is_device_os_version_Set() const;
    bool is_device_os_version_Valid() const;

    qint64 getMobileApplicationId() const;
    void setMobileApplicationId(const qint64 &mobile_application_id);
    bool is_mobile_application_id_Set() const;
    bool is_mobile_application_id_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_os;
    bool m_os_isSet;
    bool m_os_isValid;

    qint64 m_business_user_id;
    bool m_business_user_id_isSet;
    bool m_business_user_id_isValid;

    QString m_client_id;
    bool m_client_id_isSet;
    bool m_client_id_isValid;

    QString m_device_name;
    bool m_device_name_isSet;
    bool m_device_name_isValid;

    QString m_device_os_version;
    bool m_device_os_version_isSet;
    bool m_device_os_version_isValid;

    qint64 m_mobile_application_id;
    bool m_mobile_application_id_isSet;
    bool m_mobile_application_id_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMobileApplication)

#endif // OAIMobileApplication_H
