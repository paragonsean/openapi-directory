/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiApplication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiApplication::OAIApiApplication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiApplication::OAIApiApplication() {
    this->initializeModel();
}

OAIApiApplication::~OAIApiApplication() {}

void OAIApiApplication::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_key_isSet = false;
    m_client_key_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_expiry_isSet = false;
    m_expiry_isValid = false;

    m_ican_isSet = false;
    m_ican_isValid = false;

    m_number_of_payee_approvals_required_isSet = false;
    m_number_of_payee_approvals_required_isValid = false;

    m_number_of_payment_approvals_required_isSet = false;
    m_number_of_payment_approvals_required_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;
}

void OAIApiApplication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiApplication::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationId")]);
    m_application_id_isSet = !json[QString("applicationId")].isNull() && m_application_id_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_key_isValid = ::OpenAPI::fromJsonValue(m_client_key, json[QString("clientKey")]);
    m_client_key_isSet = !json[QString("clientKey")].isNull() && m_client_key_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_expiry_isValid = ::OpenAPI::fromJsonValue(m_expiry, json[QString("expiry")]);
    m_expiry_isSet = !json[QString("expiry")].isNull() && m_expiry_isValid;

    m_ican_isValid = ::OpenAPI::fromJsonValue(m_ican, json[QString("ican")]);
    m_ican_isSet = !json[QString("ican")].isNull() && m_ican_isValid;

    m_number_of_payee_approvals_required_isValid = ::OpenAPI::fromJsonValue(m_number_of_payee_approvals_required, json[QString("numberOfPayeeApprovalsRequired")]);
    m_number_of_payee_approvals_required_isSet = !json[QString("numberOfPayeeApprovalsRequired")].isNull() && m_number_of_payee_approvals_required_isValid;

    m_number_of_payment_approvals_required_isValid = ::OpenAPI::fromJsonValue(m_number_of_payment_approvals_required, json[QString("numberOfPaymentApprovalsRequired")]);
    m_number_of_payment_approvals_required_isSet = !json[QString("numberOfPaymentApprovalsRequired")].isNull() && m_number_of_payment_approvals_required_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refreshToken")]);
    m_refresh_token_isSet = !json[QString("refreshToken")].isNull() && m_refresh_token_isValid;
}

QString OAIApiApplication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiApplication::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("applicationId"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_key_isSet) {
        obj.insert(QString("clientKey"), ::OpenAPI::toJsonValue(m_client_key));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_expiry_isSet) {
        obj.insert(QString("expiry"), ::OpenAPI::toJsonValue(m_expiry));
    }
    if (m_ican_isSet) {
        obj.insert(QString("ican"), ::OpenAPI::toJsonValue(m_ican));
    }
    if (m_number_of_payee_approvals_required_isSet) {
        obj.insert(QString("numberOfPayeeApprovalsRequired"), ::OpenAPI::toJsonValue(m_number_of_payee_approvals_required));
    }
    if (m_number_of_payment_approvals_required_isSet) {
        obj.insert(QString("numberOfPaymentApprovalsRequired"), ::OpenAPI::toJsonValue(m_number_of_payment_approvals_required));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refreshToken"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    return obj;
}

qint64 OAIApiApplication::getApplicationId() const {
    return m_application_id;
}
void OAIApiApplication::setApplicationId(const qint64 &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIApiApplication::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIApiApplication::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIApiApplication::getClientId() const {
    return m_client_id;
}
void OAIApiApplication::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIApiApplication::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIApiApplication::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIApiApplication::getClientKey() const {
    return m_client_key;
}
void OAIApiApplication::setClientKey(const QString &client_key) {
    m_client_key = client_key;
    m_client_key_isSet = true;
}

bool OAIApiApplication::is_client_key_Set() const{
    return m_client_key_isSet;
}

bool OAIApiApplication::is_client_key_Valid() const{
    return m_client_key_isValid;
}

bool OAIApiApplication::isEnabled() const {
    return m_enabled;
}
void OAIApiApplication::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIApiApplication::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIApiApplication::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QDateTime OAIApiApplication::getExpiry() const {
    return m_expiry;
}
void OAIApiApplication::setExpiry(const QDateTime &expiry) {
    m_expiry = expiry;
    m_expiry_isSet = true;
}

bool OAIApiApplication::is_expiry_Set() const{
    return m_expiry_isSet;
}

bool OAIApiApplication::is_expiry_Valid() const{
    return m_expiry_isValid;
}

qint64 OAIApiApplication::getIcan() const {
    return m_ican;
}
void OAIApiApplication::setIcan(const qint64 &ican) {
    m_ican = ican;
    m_ican_isSet = true;
}

bool OAIApiApplication::is_ican_Set() const{
    return m_ican_isSet;
}

bool OAIApiApplication::is_ican_Valid() const{
    return m_ican_isValid;
}

qint32 OAIApiApplication::getNumberOfPayeeApprovalsRequired() const {
    return m_number_of_payee_approvals_required;
}
void OAIApiApplication::setNumberOfPayeeApprovalsRequired(const qint32 &number_of_payee_approvals_required) {
    m_number_of_payee_approvals_required = number_of_payee_approvals_required;
    m_number_of_payee_approvals_required_isSet = true;
}

bool OAIApiApplication::is_number_of_payee_approvals_required_Set() const{
    return m_number_of_payee_approvals_required_isSet;
}

bool OAIApiApplication::is_number_of_payee_approvals_required_Valid() const{
    return m_number_of_payee_approvals_required_isValid;
}

qint32 OAIApiApplication::getNumberOfPaymentApprovalsRequired() const {
    return m_number_of_payment_approvals_required;
}
void OAIApiApplication::setNumberOfPaymentApprovalsRequired(const qint32 &number_of_payment_approvals_required) {
    m_number_of_payment_approvals_required = number_of_payment_approvals_required;
    m_number_of_payment_approvals_required_isSet = true;
}

bool OAIApiApplication::is_number_of_payment_approvals_required_Set() const{
    return m_number_of_payment_approvals_required_isSet;
}

bool OAIApiApplication::is_number_of_payment_approvals_required_Valid() const{
    return m_number_of_payment_approvals_required_isValid;
}

QString OAIApiApplication::getRefreshToken() const {
    return m_refresh_token;
}
void OAIApiApplication::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAIApiApplication::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAIApiApplication::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

bool OAIApiApplication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ican_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_payee_approvals_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_payment_approvals_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiApplication::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
