/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessToken::OAIAccessToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessToken::OAIAccessToken() {
    this->initializeModel();
}

OAIAccessToken::~OAIAccessToken() {}

void OAIAccessToken::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_api_application_id_isSet = false;
    m_api_application_id_isValid = false;

    m_business_id_isSet = false;
    m_business_id_isValid = false;

    m_expiry_isSet = false;
    m_expiry_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;
}

void OAIAccessToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessToken::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("accessToken")]);
    m_access_token_isSet = !json[QString("accessToken")].isNull() && m_access_token_isValid;

    m_api_application_id_isValid = ::OpenAPI::fromJsonValue(m_api_application_id, json[QString("apiApplicationId")]);
    m_api_application_id_isSet = !json[QString("apiApplicationId")].isNull() && m_api_application_id_isValid;

    m_business_id_isValid = ::OpenAPI::fromJsonValue(m_business_id, json[QString("businessId")]);
    m_business_id_isSet = !json[QString("businessId")].isNull() && m_business_id_isValid;

    m_expiry_isValid = ::OpenAPI::fromJsonValue(m_expiry, json[QString("expiry")]);
    m_expiry_isSet = !json[QString("expiry")].isNull() && m_expiry_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;
}

QString OAIAccessToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessToken::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("accessToken"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_api_application_id_isSet) {
        obj.insert(QString("apiApplicationId"), ::OpenAPI::toJsonValue(m_api_application_id));
    }
    if (m_business_id_isSet) {
        obj.insert(QString("businessId"), ::OpenAPI::toJsonValue(m_business_id));
    }
    if (m_expiry_isSet) {
        obj.insert(QString("expiry"), ::OpenAPI::toJsonValue(m_expiry));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    return obj;
}

QString OAIAccessToken::getAccessToken() const {
    return m_access_token;
}
void OAIAccessToken::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIAccessToken::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIAccessToken::is_access_token_Valid() const{
    return m_access_token_isValid;
}

qint64 OAIAccessToken::getApiApplicationId() const {
    return m_api_application_id;
}
void OAIAccessToken::setApiApplicationId(const qint64 &api_application_id) {
    m_api_application_id = api_application_id;
    m_api_application_id_isSet = true;
}

bool OAIAccessToken::is_api_application_id_Set() const{
    return m_api_application_id_isSet;
}

bool OAIAccessToken::is_api_application_id_Valid() const{
    return m_api_application_id_isValid;
}

qint64 OAIAccessToken::getBusinessId() const {
    return m_business_id;
}
void OAIAccessToken::setBusinessId(const qint64 &business_id) {
    m_business_id = business_id;
    m_business_id_isSet = true;
}

bool OAIAccessToken::is_business_id_Set() const{
    return m_business_id_isSet;
}

bool OAIAccessToken::is_business_id_Valid() const{
    return m_business_id_isValid;
}

QDateTime OAIAccessToken::getExpiry() const {
    return m_expiry;
}
void OAIAccessToken::setExpiry(const QDateTime &expiry) {
    m_expiry = expiry;
    m_expiry_isSet = true;
}

bool OAIAccessToken::is_expiry_Set() const{
    return m_expiry_isSet;
}

bool OAIAccessToken::is_expiry_Valid() const{
    return m_expiry_isValid;
}

QList<QString> OAIAccessToken::getPermissions() const {
    return m_permissions;
}
void OAIAccessToken::setPermissions(const QList<QString> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIAccessToken::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIAccessToken::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAIAccessToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
