/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAspsp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAspsp::OAIAspsp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAspsp::OAIAspsp() {
    this->initializeModel();
}

OAIAspsp::~OAIAspsp() {}

void OAIAspsp::initializeModel() {

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_aspsp_uuid_isSet = false;
    m_aspsp_uuid_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;
}

void OAIAspsp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAspsp::fromJsonObject(QJsonObject json) {

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_aspsp_uuid_isValid = ::OpenAPI::fromJsonValue(m_aspsp_uuid, json[QString("aspspUuid")]);
    m_aspsp_uuid_isSet = !json[QString("aspspUuid")].isNull() && m_aspsp_uuid_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logoUrl")]);
    m_logo_url_isSet = !json[QString("logoUrl")].isNull() && m_logo_url_isValid;
}

QString OAIAspsp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAspsp::asJsonObject() const {
    QJsonObject obj;
    if (m_alias_isSet) {
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_aspsp_uuid_isSet) {
        obj.insert(QString("aspspUuid"), ::OpenAPI::toJsonValue(m_aspsp_uuid));
    }
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("logoUrl"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    return obj;
}

QString OAIAspsp::getAlias() const {
    return m_alias;
}
void OAIAspsp::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIAspsp::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIAspsp::is_alias_Valid() const{
    return m_alias_isValid;
}

QString OAIAspsp::getAspspUuid() const {
    return m_aspsp_uuid;
}
void OAIAspsp::setAspspUuid(const QString &aspsp_uuid) {
    m_aspsp_uuid = aspsp_uuid;
    m_aspsp_uuid_isSet = true;
}

bool OAIAspsp::is_aspsp_uuid_Set() const{
    return m_aspsp_uuid_isSet;
}

bool OAIAspsp::is_aspsp_uuid_Valid() const{
    return m_aspsp_uuid_isValid;
}

OAICountry OAIAspsp::getCountry() const {
    return m_country;
}
void OAIAspsp::setCountry(const OAICountry &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIAspsp::is_country_Set() const{
    return m_country_isSet;
}

bool OAIAspsp::is_country_Valid() const{
    return m_country_isValid;
}

OAICurrency OAIAspsp::getCurrency() const {
    return m_currency;
}
void OAIAspsp::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIAspsp::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIAspsp::is_currency_Valid() const{
    return m_currency_isValid;
}

QDateTime OAIAspsp::getDateCreated() const {
    return m_date_created;
}
void OAIAspsp::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIAspsp::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIAspsp::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QDateTime OAIAspsp::getLastUpdated() const {
    return m_last_updated;
}
void OAIAspsp::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIAspsp::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIAspsp::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIAspsp::getLogoUrl() const {
    return m_logo_url;
}
void OAIAspsp::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAIAspsp::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAIAspsp::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

bool OAIAspsp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aspsp_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAspsp::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
