/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentRequest::OAIPaymentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentRequest::OAIPaymentRequest() {
    this->initializeModel();
}

OAIPaymentRequest::~OAIPaymentRequest() {}

void OAIPaymentRequest::initializeModel() {

    m_additional_fields_isSet = false;
    m_additional_fields_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_collect_fields_isSet = false;
    m_collect_fields_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expiry_isSet = false;
    m_expiry_isValid = false;

    m_ican_to_isSet = false;
    m_ican_to_isValid = false;

    m_mandatory_fields_isSet = false;
    m_mandatory_fields_isValid = false;

    m_max_number_payments_isSet = false;
    m_max_number_payments_isValid = false;

    m_my_ref_isSet = false;
    m_my_ref_isValid = false;

    m_order_details_isSet = false;
    m_order_details_isValid = false;

    m_payment_request_code_isSet = false;
    m_payment_request_code_isValid = false;

    m_payment_uuid_isSet = false;
    m_payment_uuid_isValid = false;

    m_return_url_isSet = false;
    m_return_url_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_transaction_type_isSet = false;
    m_transaction_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_webhook_url_isSet = false;
    m_webhook_url_isValid = false;
}

void OAIPaymentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentRequest::fromJsonObject(QJsonObject json) {

    m_additional_fields_isValid = ::OpenAPI::fromJsonValue(m_additional_fields, json[QString("additionalFields")]);
    m_additional_fields_isSet = !json[QString("additionalFields")].isNull() && m_additional_fields_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_collect_fields_isValid = ::OpenAPI::fromJsonValue(m_collect_fields, json[QString("collectFields")]);
    m_collect_fields_isSet = !json[QString("collectFields")].isNull() && m_collect_fields_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expiry_isValid = ::OpenAPI::fromJsonValue(m_expiry, json[QString("expiry")]);
    m_expiry_isSet = !json[QString("expiry")].isNull() && m_expiry_isValid;

    m_ican_to_isValid = ::OpenAPI::fromJsonValue(m_ican_to, json[QString("icanTo")]);
    m_ican_to_isSet = !json[QString("icanTo")].isNull() && m_ican_to_isValid;

    m_mandatory_fields_isValid = ::OpenAPI::fromJsonValue(m_mandatory_fields, json[QString("mandatoryFields")]);
    m_mandatory_fields_isSet = !json[QString("mandatoryFields")].isNull() && m_mandatory_fields_isValid;

    m_max_number_payments_isValid = ::OpenAPI::fromJsonValue(m_max_number_payments, json[QString("maxNumberPayments")]);
    m_max_number_payments_isSet = !json[QString("maxNumberPayments")].isNull() && m_max_number_payments_isValid;

    m_my_ref_isValid = ::OpenAPI::fromJsonValue(m_my_ref, json[QString("myRef")]);
    m_my_ref_isSet = !json[QString("myRef")].isNull() && m_my_ref_isValid;

    m_order_details_isValid = ::OpenAPI::fromJsonValue(m_order_details, json[QString("orderDetails")]);
    m_order_details_isSet = !json[QString("orderDetails")].isNull() && m_order_details_isValid;

    m_payment_request_code_isValid = ::OpenAPI::fromJsonValue(m_payment_request_code, json[QString("paymentRequestCode")]);
    m_payment_request_code_isSet = !json[QString("paymentRequestCode")].isNull() && m_payment_request_code_isValid;

    m_payment_uuid_isValid = ::OpenAPI::fromJsonValue(m_payment_uuid, json[QString("paymentUuid")]);
    m_payment_uuid_isSet = !json[QString("paymentUuid")].isNull() && m_payment_uuid_isValid;

    m_return_url_isValid = ::OpenAPI::fromJsonValue(m_return_url, json[QString("returnUrl")]);
    m_return_url_isSet = !json[QString("returnUrl")].isNull() && m_return_url_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_transaction_type_isValid = ::OpenAPI::fromJsonValue(m_transaction_type, json[QString("transactionType")]);
    m_transaction_type_isSet = !json[QString("transactionType")].isNull() && m_transaction_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_webhook_url_isValid = ::OpenAPI::fromJsonValue(m_webhook_url, json[QString("webhookUrl")]);
    m_webhook_url_isSet = !json[QString("webhookUrl")].isNull() && m_webhook_url_isValid;
}

QString OAIPaymentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_fields_isSet) {
        obj.insert(QString("additionalFields"), ::OpenAPI::toJsonValue(m_additional_fields));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_collect_fields_isSet) {
        obj.insert(QString("collectFields"), ::OpenAPI::toJsonValue(m_collect_fields));
    }
    if (m_currency.isSet()) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expiry_isSet) {
        obj.insert(QString("expiry"), ::OpenAPI::toJsonValue(m_expiry));
    }
    if (m_ican_to_isSet) {
        obj.insert(QString("icanTo"), ::OpenAPI::toJsonValue(m_ican_to));
    }
    if (m_mandatory_fields_isSet) {
        obj.insert(QString("mandatoryFields"), ::OpenAPI::toJsonValue(m_mandatory_fields));
    }
    if (m_max_number_payments_isSet) {
        obj.insert(QString("maxNumberPayments"), ::OpenAPI::toJsonValue(m_max_number_payments));
    }
    if (m_my_ref_isSet) {
        obj.insert(QString("myRef"), ::OpenAPI::toJsonValue(m_my_ref));
    }
    if (m_order_details.isSet()) {
        obj.insert(QString("orderDetails"), ::OpenAPI::toJsonValue(m_order_details));
    }
    if (m_payment_request_code_isSet) {
        obj.insert(QString("paymentRequestCode"), ::OpenAPI::toJsonValue(m_payment_request_code));
    }
    if (m_payment_uuid_isSet) {
        obj.insert(QString("paymentUuid"), ::OpenAPI::toJsonValue(m_payment_uuid));
    }
    if (m_return_url_isSet) {
        obj.insert(QString("returnUrl"), ::OpenAPI::toJsonValue(m_return_url));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_transaction_type_isSet) {
        obj.insert(QString("transactionType"), ::OpenAPI::toJsonValue(m_transaction_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_webhook_url_isSet) {
        obj.insert(QString("webhookUrl"), ::OpenAPI::toJsonValue(m_webhook_url));
    }
    return obj;
}

QString OAIPaymentRequest::getAdditionalFields() const {
    return m_additional_fields;
}
void OAIPaymentRequest::setAdditionalFields(const QString &additional_fields) {
    m_additional_fields = additional_fields;
    m_additional_fields_isSet = true;
}

bool OAIPaymentRequest::is_additional_fields_Set() const{
    return m_additional_fields_isSet;
}

bool OAIPaymentRequest::is_additional_fields_Valid() const{
    return m_additional_fields_isValid;
}

qint64 OAIPaymentRequest::getAmount() const {
    return m_amount;
}
void OAIPaymentRequest::setAmount(const qint64 &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPaymentRequest::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPaymentRequest::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIPaymentRequest::getCollectFields() const {
    return m_collect_fields;
}
void OAIPaymentRequest::setCollectFields(const QString &collect_fields) {
    m_collect_fields = collect_fields;
    m_collect_fields_isSet = true;
}

bool OAIPaymentRequest::is_collect_fields_Set() const{
    return m_collect_fields_isSet;
}

bool OAIPaymentRequest::is_collect_fields_Valid() const{
    return m_collect_fields_isValid;
}

OAICurrency OAIPaymentRequest::getCurrency() const {
    return m_currency;
}
void OAIPaymentRequest::setCurrency(const OAICurrency &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPaymentRequest::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPaymentRequest::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIPaymentRequest::getDescription() const {
    return m_description;
}
void OAIPaymentRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPaymentRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPaymentRequest::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIPaymentRequest::getExpiry() const {
    return m_expiry;
}
void OAIPaymentRequest::setExpiry(const QDateTime &expiry) {
    m_expiry = expiry;
    m_expiry_isSet = true;
}

bool OAIPaymentRequest::is_expiry_Set() const{
    return m_expiry_isSet;
}

bool OAIPaymentRequest::is_expiry_Valid() const{
    return m_expiry_isValid;
}

qint64 OAIPaymentRequest::getIcanTo() const {
    return m_ican_to;
}
void OAIPaymentRequest::setIcanTo(const qint64 &ican_to) {
    m_ican_to = ican_to;
    m_ican_to_isSet = true;
}

bool OAIPaymentRequest::is_ican_to_Set() const{
    return m_ican_to_isSet;
}

bool OAIPaymentRequest::is_ican_to_Valid() const{
    return m_ican_to_isValid;
}

QString OAIPaymentRequest::getMandatoryFields() const {
    return m_mandatory_fields;
}
void OAIPaymentRequest::setMandatoryFields(const QString &mandatory_fields) {
    m_mandatory_fields = mandatory_fields;
    m_mandatory_fields_isSet = true;
}

bool OAIPaymentRequest::is_mandatory_fields_Set() const{
    return m_mandatory_fields_isSet;
}

bool OAIPaymentRequest::is_mandatory_fields_Valid() const{
    return m_mandatory_fields_isValid;
}

qint32 OAIPaymentRequest::getMaxNumberPayments() const {
    return m_max_number_payments;
}
void OAIPaymentRequest::setMaxNumberPayments(const qint32 &max_number_payments) {
    m_max_number_payments = max_number_payments;
    m_max_number_payments_isSet = true;
}

bool OAIPaymentRequest::is_max_number_payments_Set() const{
    return m_max_number_payments_isSet;
}

bool OAIPaymentRequest::is_max_number_payments_Valid() const{
    return m_max_number_payments_isValid;
}

QString OAIPaymentRequest::getMyRef() const {
    return m_my_ref;
}
void OAIPaymentRequest::setMyRef(const QString &my_ref) {
    m_my_ref = my_ref;
    m_my_ref_isSet = true;
}

bool OAIPaymentRequest::is_my_ref_Set() const{
    return m_my_ref_isSet;
}

bool OAIPaymentRequest::is_my_ref_Valid() const{
    return m_my_ref_isValid;
}

OAIOrderDetails OAIPaymentRequest::getOrderDetails() const {
    return m_order_details;
}
void OAIPaymentRequest::setOrderDetails(const OAIOrderDetails &order_details) {
    m_order_details = order_details;
    m_order_details_isSet = true;
}

bool OAIPaymentRequest::is_order_details_Set() const{
    return m_order_details_isSet;
}

bool OAIPaymentRequest::is_order_details_Valid() const{
    return m_order_details_isValid;
}

QString OAIPaymentRequest::getPaymentRequestCode() const {
    return m_payment_request_code;
}
void OAIPaymentRequest::setPaymentRequestCode(const QString &payment_request_code) {
    m_payment_request_code = payment_request_code;
    m_payment_request_code_isSet = true;
}

bool OAIPaymentRequest::is_payment_request_code_Set() const{
    return m_payment_request_code_isSet;
}

bool OAIPaymentRequest::is_payment_request_code_Valid() const{
    return m_payment_request_code_isValid;
}

QString OAIPaymentRequest::getPaymentUuid() const {
    return m_payment_uuid;
}
void OAIPaymentRequest::setPaymentUuid(const QString &payment_uuid) {
    m_payment_uuid = payment_uuid;
    m_payment_uuid_isSet = true;
}

bool OAIPaymentRequest::is_payment_uuid_Set() const{
    return m_payment_uuid_isSet;
}

bool OAIPaymentRequest::is_payment_uuid_Valid() const{
    return m_payment_uuid_isValid;
}

QString OAIPaymentRequest::getReturnUrl() const {
    return m_return_url;
}
void OAIPaymentRequest::setReturnUrl(const QString &return_url) {
    m_return_url = return_url;
    m_return_url_isSet = true;
}

bool OAIPaymentRequest::is_return_url_Set() const{
    return m_return_url_isSet;
}

bool OAIPaymentRequest::is_return_url_Valid() const{
    return m_return_url_isValid;
}

QString OAIPaymentRequest::getStatus() const {
    return m_status;
}
void OAIPaymentRequest::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPaymentRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPaymentRequest::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPaymentRequest::getTransactionType() const {
    return m_transaction_type;
}
void OAIPaymentRequest::setTransactionType(const QString &transaction_type) {
    m_transaction_type = transaction_type;
    m_transaction_type_isSet = true;
}

bool OAIPaymentRequest::is_transaction_type_Set() const{
    return m_transaction_type_isSet;
}

bool OAIPaymentRequest::is_transaction_type_Valid() const{
    return m_transaction_type_isValid;
}

QString OAIPaymentRequest::getType() const {
    return m_type;
}
void OAIPaymentRequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPaymentRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPaymentRequest::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPaymentRequest::getWebhookUrl() const {
    return m_webhook_url;
}
void OAIPaymentRequest::setWebhookUrl(const QString &webhook_url) {
    m_webhook_url = webhook_url;
    m_webhook_url_isSet = true;
}

bool OAIPaymentRequest::is_webhook_url_Set() const{
    return m_webhook_url_isSet;
}

bool OAIPaymentRequest::is_webhook_url_Valid() const{
    return m_webhook_url_isValid;
}

bool OAIPaymentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collect_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ican_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandatory_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_number_payments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_my_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_request_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
