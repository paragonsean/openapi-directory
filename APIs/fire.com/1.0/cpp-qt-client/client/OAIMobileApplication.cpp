/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMobileApplication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMobileApplication::OAIMobileApplication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMobileApplication::OAIMobileApplication() {
    this->initializeModel();
}

OAIMobileApplication::~OAIMobileApplication() {}

void OAIMobileApplication::initializeModel() {

    m_os_isSet = false;
    m_os_isValid = false;

    m_business_user_id_isSet = false;
    m_business_user_id_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_device_os_version_isSet = false;
    m_device_os_version_isValid = false;

    m_mobile_application_id_isSet = false;
    m_mobile_application_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIMobileApplication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMobileApplication::fromJsonObject(QJsonObject json) {

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("OS")]);
    m_os_isSet = !json[QString("OS")].isNull() && m_os_isValid;

    m_business_user_id_isValid = ::OpenAPI::fromJsonValue(m_business_user_id, json[QString("businessUserId")]);
    m_business_user_id_isSet = !json[QString("businessUserId")].isNull() && m_business_user_id_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientID")]);
    m_client_id_isSet = !json[QString("clientID")].isNull() && m_client_id_isValid;

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("deviceName")]);
    m_device_name_isSet = !json[QString("deviceName")].isNull() && m_device_name_isValid;

    m_device_os_version_isValid = ::OpenAPI::fromJsonValue(m_device_os_version, json[QString("deviceOSVersion")]);
    m_device_os_version_isSet = !json[QString("deviceOSVersion")].isNull() && m_device_os_version_isValid;

    m_mobile_application_id_isValid = ::OpenAPI::fromJsonValue(m_mobile_application_id, json[QString("mobileApplicationId")]);
    m_mobile_application_id_isSet = !json[QString("mobileApplicationId")].isNull() && m_mobile_application_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIMobileApplication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMobileApplication::asJsonObject() const {
    QJsonObject obj;
    if (m_os_isSet) {
        obj.insert(QString("OS"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_business_user_id_isSet) {
        obj.insert(QString("businessUserId"), ::OpenAPI::toJsonValue(m_business_user_id));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientID"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_device_name_isSet) {
        obj.insert(QString("deviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_device_os_version_isSet) {
        obj.insert(QString("deviceOSVersion"), ::OpenAPI::toJsonValue(m_device_os_version));
    }
    if (m_mobile_application_id_isSet) {
        obj.insert(QString("mobileApplicationId"), ::OpenAPI::toJsonValue(m_mobile_application_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIMobileApplication::getOs() const {
    return m_os;
}
void OAIMobileApplication::setOs(const QString &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAIMobileApplication::is_os_Set() const{
    return m_os_isSet;
}

bool OAIMobileApplication::is_os_Valid() const{
    return m_os_isValid;
}

qint64 OAIMobileApplication::getBusinessUserId() const {
    return m_business_user_id;
}
void OAIMobileApplication::setBusinessUserId(const qint64 &business_user_id) {
    m_business_user_id = business_user_id;
    m_business_user_id_isSet = true;
}

bool OAIMobileApplication::is_business_user_id_Set() const{
    return m_business_user_id_isSet;
}

bool OAIMobileApplication::is_business_user_id_Valid() const{
    return m_business_user_id_isValid;
}

QString OAIMobileApplication::getClientId() const {
    return m_client_id;
}
void OAIMobileApplication::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIMobileApplication::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIMobileApplication::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIMobileApplication::getDeviceName() const {
    return m_device_name;
}
void OAIMobileApplication::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIMobileApplication::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIMobileApplication::is_device_name_Valid() const{
    return m_device_name_isValid;
}

QString OAIMobileApplication::getDeviceOsVersion() const {
    return m_device_os_version;
}
void OAIMobileApplication::setDeviceOsVersion(const QString &device_os_version) {
    m_device_os_version = device_os_version;
    m_device_os_version_isSet = true;
}

bool OAIMobileApplication::is_device_os_version_Set() const{
    return m_device_os_version_isSet;
}

bool OAIMobileApplication::is_device_os_version_Valid() const{
    return m_device_os_version_isValid;
}

qint64 OAIMobileApplication::getMobileApplicationId() const {
    return m_mobile_application_id;
}
void OAIMobileApplication::setMobileApplicationId(const qint64 &mobile_application_id) {
    m_mobile_application_id = mobile_application_id;
    m_mobile_application_id_isSet = true;
}

bool OAIMobileApplication::is_mobile_application_id_Set() const{
    return m_mobile_application_id_isSet;
}

bool OAIMobileApplication::is_mobile_application_id_Valid() const{
    return m_mobile_application_id_isValid;
}

QString OAIMobileApplication::getStatus() const {
    return m_status;
}
void OAIMobileApplication::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMobileApplication::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMobileApplication::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIMobileApplication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMobileApplication::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
