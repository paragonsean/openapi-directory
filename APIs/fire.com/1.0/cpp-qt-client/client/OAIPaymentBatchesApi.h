/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPaymentBatchesApi_H
#define OAI_OAIPaymentBatchesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddBankTransferBatchPayment_request.h"
#include "OAIBatch.h"
#include "OAIBatchApprovers.h"
#include "OAIBatchItemInternalTransfer.h"
#include "OAIBatchItemInternationalTransferMode1.h"
#include "OAIBatchItems.h"
#include "OAINewBatch.h"
#include "OAINewBatchItemResponse.h"
#include "OAINewBatchResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPaymentBatchesApi : public QObject {
    Q_OBJECT

public:
    OAIPaymentBatchesApi(const int timeOut = 0);
    ~OAIPaymentBatchesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  batch_uuid QString [required]
    * @param[in]  oai_add_bank_transfer_batch_payment_request OAIAddBankTransferBatchPayment_request [required]
    */
    virtual void addBankTransferBatchPayment(const QString &batch_uuid, const OAIAddBankTransferBatchPayment_request &oai_add_bank_transfer_batch_payment_request);

    /**
    * @param[in]  batch_uuid QString [required]
    * @param[in]  oai_batch_item_internal_transfer OAIBatchItemInternalTransfer [required]
    */
    virtual void addInternalTransferBatchPayment(const QString &batch_uuid, const OAIBatchItemInternalTransfer &oai_batch_item_internal_transfer);

    /**
    * @param[in]  batch_uuid QString [required]
    * @param[in]  oai_batch_item_international_transfer_mode1 OAIBatchItemInternationalTransferMode1 [required]
    */
    virtual void addInternationalTransferBatchPayment(const QString &batch_uuid, const OAIBatchItemInternationalTransferMode1 &oai_batch_item_international_transfer_mode1);

    /**
    * @param[in]  batch_uuid QString [required]
    */
    virtual void cancelBatchPayment(const QString &batch_uuid);

    /**
    * @param[in]  oai_new_batch OAINewBatch [required]
    */
    virtual void createBatchPayment(const OAINewBatch &oai_new_batch);

    /**
    * @param[in]  batch_uuid QString [required]
    * @param[in]  item_uuid QString [required]
    */
    virtual void deleteBankTransferBatchPayment(const QString &batch_uuid, const QString &item_uuid);

    /**
    * @param[in]  batch_uuid QString [required]
    * @param[in]  item_uuid QString [required]
    */
    virtual void deleteInternalTransferBatchPayment(const QString &batch_uuid, const QString &item_uuid);

    /**
    * @param[in]  batch_uuid QString [required]
    * @param[in]  item_uuid QString [required]
    */
    virtual void deleteInternationalTransferBatchPayment(const QString &batch_uuid, const QString &item_uuid);

    /**
    * @param[in]  batch_status QString [optional]
    * @param[in]  batch_types QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  order QString [optional]
    */
    virtual void getBatches(const ::OpenAPI::OptionalParam<QString> &batch_status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &batch_types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  batch_uuid QString [required]
    */
    virtual void getDetailsSingleBatch(const QString &batch_uuid);

    /**
    * @param[in]  batch_uuid QString [required]
    * @param[in]  offset qint64 [optional]
    * @param[in]  limit qint64 [optional]
    */
    virtual void getItemsBatchBankTransfer(const QString &batch_uuid, const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  batch_uuid QString [required]
    * @param[in]  offset qint64 [optional]
    * @param[in]  limit qint64 [optional]
    */
    virtual void getItemsBatchInternalTrasnfer(const QString &batch_uuid, const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  batch_uuid QString [required]
    * @param[in]  offset qint64 [optional]
    * @param[in]  limit qint64 [optional]
    */
    virtual void getItemsBatchInternationalTransfer(const QString &batch_uuid, const ::OpenAPI::OptionalParam<qint64> &offset = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &limit = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  batch_uuid QString [required]
    */
    virtual void getListofApproversForBatch(const QString &batch_uuid);

    /**
    * @param[in]  batch_uuid QString [required]
    */
    virtual void submitBatch(const QString &batch_uuid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addBankTransferBatchPaymentCallback(OAIHttpRequestWorker *worker);
    void addInternalTransferBatchPaymentCallback(OAIHttpRequestWorker *worker);
    void addInternationalTransferBatchPaymentCallback(OAIHttpRequestWorker *worker);
    void cancelBatchPaymentCallback(OAIHttpRequestWorker *worker);
    void createBatchPaymentCallback(OAIHttpRequestWorker *worker);
    void deleteBankTransferBatchPaymentCallback(OAIHttpRequestWorker *worker);
    void deleteInternalTransferBatchPaymentCallback(OAIHttpRequestWorker *worker);
    void deleteInternationalTransferBatchPaymentCallback(OAIHttpRequestWorker *worker);
    void getBatchesCallback(OAIHttpRequestWorker *worker);
    void getDetailsSingleBatchCallback(OAIHttpRequestWorker *worker);
    void getItemsBatchBankTransferCallback(OAIHttpRequestWorker *worker);
    void getItemsBatchInternalTrasnferCallback(OAIHttpRequestWorker *worker);
    void getItemsBatchInternationalTransferCallback(OAIHttpRequestWorker *worker);
    void getListofApproversForBatchCallback(OAIHttpRequestWorker *worker);
    void submitBatchCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addBankTransferBatchPaymentSignal(OAINewBatchItemResponse summary);
    void addInternalTransferBatchPaymentSignal(OAINewBatchItemResponse summary);
    void addInternationalTransferBatchPaymentSignal(OAINewBatchItemResponse summary);
    void cancelBatchPaymentSignal();
    void createBatchPaymentSignal(OAINewBatchResponse summary);
    void deleteBankTransferBatchPaymentSignal();
    void deleteInternalTransferBatchPaymentSignal();
    void deleteInternationalTransferBatchPaymentSignal();
    void getBatchesSignal(OAIBatchItems summary);
    void getDetailsSingleBatchSignal(OAIBatch summary);
    void getItemsBatchBankTransferSignal(OAIBatchItems summary);
    void getItemsBatchInternalTrasnferSignal(OAIBatchItems summary);
    void getItemsBatchInternationalTransferSignal(OAIBatchItems summary);
    void getListofApproversForBatchSignal(OAIBatchApprovers summary);
    void submitBatchSignal();


    void addBankTransferBatchPaymentSignalFull(OAIHttpRequestWorker *worker, OAINewBatchItemResponse summary);
    void addInternalTransferBatchPaymentSignalFull(OAIHttpRequestWorker *worker, OAINewBatchItemResponse summary);
    void addInternationalTransferBatchPaymentSignalFull(OAIHttpRequestWorker *worker, OAINewBatchItemResponse summary);
    void cancelBatchPaymentSignalFull(OAIHttpRequestWorker *worker);
    void createBatchPaymentSignalFull(OAIHttpRequestWorker *worker, OAINewBatchResponse summary);
    void deleteBankTransferBatchPaymentSignalFull(OAIHttpRequestWorker *worker);
    void deleteInternalTransferBatchPaymentSignalFull(OAIHttpRequestWorker *worker);
    void deleteInternationalTransferBatchPaymentSignalFull(OAIHttpRequestWorker *worker);
    void getBatchesSignalFull(OAIHttpRequestWorker *worker, OAIBatchItems summary);
    void getDetailsSingleBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatch summary);
    void getItemsBatchBankTransferSignalFull(OAIHttpRequestWorker *worker, OAIBatchItems summary);
    void getItemsBatchInternalTrasnferSignalFull(OAIHttpRequestWorker *worker, OAIBatchItems summary);
    void getItemsBatchInternationalTransferSignalFull(OAIHttpRequestWorker *worker, OAIBatchItems summary);
    void getListofApproversForBatchSignalFull(OAIHttpRequestWorker *worker, OAIBatchApprovers summary);
    void submitBatchSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addBankTransferBatchPaymentSignalError() instead")
    void addBankTransferBatchPaymentSignalE(OAINewBatchItemResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addBankTransferBatchPaymentSignalError(OAINewBatchItemResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addInternalTransferBatchPaymentSignalError() instead")
    void addInternalTransferBatchPaymentSignalE(OAINewBatchItemResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addInternalTransferBatchPaymentSignalError(OAINewBatchItemResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addInternationalTransferBatchPaymentSignalError() instead")
    void addInternationalTransferBatchPaymentSignalE(OAINewBatchItemResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addInternationalTransferBatchPaymentSignalError(OAINewBatchItemResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelBatchPaymentSignalError() instead")
    void cancelBatchPaymentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelBatchPaymentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBatchPaymentSignalError() instead")
    void createBatchPaymentSignalE(OAINewBatchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBatchPaymentSignalError(OAINewBatchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBankTransferBatchPaymentSignalError() instead")
    void deleteBankTransferBatchPaymentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBankTransferBatchPaymentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInternalTransferBatchPaymentSignalError() instead")
    void deleteInternalTransferBatchPaymentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInternalTransferBatchPaymentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInternationalTransferBatchPaymentSignalError() instead")
    void deleteInternationalTransferBatchPaymentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInternationalTransferBatchPaymentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchesSignalError() instead")
    void getBatchesSignalE(OAIBatchItems summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchesSignalError(OAIBatchItems summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDetailsSingleBatchSignalError() instead")
    void getDetailsSingleBatchSignalE(OAIBatch summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDetailsSingleBatchSignalError(OAIBatch summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemsBatchBankTransferSignalError() instead")
    void getItemsBatchBankTransferSignalE(OAIBatchItems summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemsBatchBankTransferSignalError(OAIBatchItems summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemsBatchInternalTrasnferSignalError() instead")
    void getItemsBatchInternalTrasnferSignalE(OAIBatchItems summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemsBatchInternalTrasnferSignalError(OAIBatchItems summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemsBatchInternationalTransferSignalError() instead")
    void getItemsBatchInternationalTransferSignalE(OAIBatchItems summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemsBatchInternationalTransferSignalError(OAIBatchItems summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListofApproversForBatchSignalError() instead")
    void getListofApproversForBatchSignalE(OAIBatchApprovers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getListofApproversForBatchSignalError(OAIBatchApprovers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitBatchSignalError() instead")
    void submitBatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void submitBatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addBankTransferBatchPaymentSignalErrorFull() instead")
    void addBankTransferBatchPaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addBankTransferBatchPaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addInternalTransferBatchPaymentSignalErrorFull() instead")
    void addInternalTransferBatchPaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addInternalTransferBatchPaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addInternationalTransferBatchPaymentSignalErrorFull() instead")
    void addInternationalTransferBatchPaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addInternationalTransferBatchPaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelBatchPaymentSignalErrorFull() instead")
    void cancelBatchPaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelBatchPaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBatchPaymentSignalErrorFull() instead")
    void createBatchPaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBatchPaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBankTransferBatchPaymentSignalErrorFull() instead")
    void deleteBankTransferBatchPaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBankTransferBatchPaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInternalTransferBatchPaymentSignalErrorFull() instead")
    void deleteInternalTransferBatchPaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInternalTransferBatchPaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInternationalTransferBatchPaymentSignalErrorFull() instead")
    void deleteInternationalTransferBatchPaymentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInternationalTransferBatchPaymentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBatchesSignalErrorFull() instead")
    void getBatchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBatchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDetailsSingleBatchSignalErrorFull() instead")
    void getDetailsSingleBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDetailsSingleBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemsBatchBankTransferSignalErrorFull() instead")
    void getItemsBatchBankTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemsBatchBankTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemsBatchInternalTrasnferSignalErrorFull() instead")
    void getItemsBatchInternalTrasnferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemsBatchInternalTrasnferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getItemsBatchInternationalTransferSignalErrorFull() instead")
    void getItemsBatchInternationalTransferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getItemsBatchInternationalTransferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getListofApproversForBatchSignalErrorFull() instead")
    void getListofApproversForBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getListofApproversForBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use submitBatchSignalErrorFull() instead")
    void submitBatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void submitBatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
