/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatch::OAIBatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatch::OAIBatch() {
    this->initializeModel();
}

OAIBatch::~OAIBatch() {}

void OAIBatch::initializeModel() {

    m_batch_name_isSet = false;
    m_batch_name_isValid = false;

    m_batch_uuid_isSet = false;
    m_batch_uuid_isValid = false;

    m_callback_url_isSet = false;
    m_callback_url_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_job_number_isSet = false;
    m_job_number_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_number_of_items_failed_isSet = false;
    m_number_of_items_failed_isValid = false;

    m_number_of_items_submitted_isSet = false;
    m_number_of_items_submitted_isValid = false;

    m_number_of_items_succeeded_isSet = false;
    m_number_of_items_succeeded_isValid = false;

    m_source_name_isSet = false;
    m_source_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_of_items_failed_isSet = false;
    m_value_of_items_failed_isValid = false;

    m_value_of_items_submitted_isSet = false;
    m_value_of_items_submitted_isValid = false;

    m_value_of_items_succeeded_isSet = false;
    m_value_of_items_succeeded_isValid = false;
}

void OAIBatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatch::fromJsonObject(QJsonObject json) {

    m_batch_name_isValid = ::OpenAPI::fromJsonValue(m_batch_name, json[QString("batchName")]);
    m_batch_name_isSet = !json[QString("batchName")].isNull() && m_batch_name_isValid;

    m_batch_uuid_isValid = ::OpenAPI::fromJsonValue(m_batch_uuid, json[QString("batchUuid")]);
    m_batch_uuid_isSet = !json[QString("batchUuid")].isNull() && m_batch_uuid_isValid;

    m_callback_url_isValid = ::OpenAPI::fromJsonValue(m_callback_url, json[QString("callbackUrl")]);
    m_callback_url_isSet = !json[QString("callbackUrl")].isNull() && m_callback_url_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_job_number_isValid = ::OpenAPI::fromJsonValue(m_job_number, json[QString("jobNumber")]);
    m_job_number_isSet = !json[QString("jobNumber")].isNull() && m_job_number_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_number_of_items_failed_isValid = ::OpenAPI::fromJsonValue(m_number_of_items_failed, json[QString("numberOfItemsFailed")]);
    m_number_of_items_failed_isSet = !json[QString("numberOfItemsFailed")].isNull() && m_number_of_items_failed_isValid;

    m_number_of_items_submitted_isValid = ::OpenAPI::fromJsonValue(m_number_of_items_submitted, json[QString("numberOfItemsSubmitted")]);
    m_number_of_items_submitted_isSet = !json[QString("numberOfItemsSubmitted")].isNull() && m_number_of_items_submitted_isValid;

    m_number_of_items_succeeded_isValid = ::OpenAPI::fromJsonValue(m_number_of_items_succeeded, json[QString("numberOfItemsSucceeded")]);
    m_number_of_items_succeeded_isSet = !json[QString("numberOfItemsSucceeded")].isNull() && m_number_of_items_succeeded_isValid;

    m_source_name_isValid = ::OpenAPI::fromJsonValue(m_source_name, json[QString("sourceName")]);
    m_source_name_isSet = !json[QString("sourceName")].isNull() && m_source_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_of_items_failed_isValid = ::OpenAPI::fromJsonValue(m_value_of_items_failed, json[QString("valueOfItemsFailed")]);
    m_value_of_items_failed_isSet = !json[QString("valueOfItemsFailed")].isNull() && m_value_of_items_failed_isValid;

    m_value_of_items_submitted_isValid = ::OpenAPI::fromJsonValue(m_value_of_items_submitted, json[QString("valueOfItemsSubmitted")]);
    m_value_of_items_submitted_isSet = !json[QString("valueOfItemsSubmitted")].isNull() && m_value_of_items_submitted_isValid;

    m_value_of_items_succeeded_isValid = ::OpenAPI::fromJsonValue(m_value_of_items_succeeded, json[QString("valueOfItemsSucceeded")]);
    m_value_of_items_succeeded_isSet = !json[QString("valueOfItemsSucceeded")].isNull() && m_value_of_items_succeeded_isValid;
}

QString OAIBatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatch::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_name_isSet) {
        obj.insert(QString("batchName"), ::OpenAPI::toJsonValue(m_batch_name));
    }
    if (m_batch_uuid_isSet) {
        obj.insert(QString("batchUuid"), ::OpenAPI::toJsonValue(m_batch_uuid));
    }
    if (m_callback_url_isSet) {
        obj.insert(QString("callbackUrl"), ::OpenAPI::toJsonValue(m_callback_url));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_job_number_isSet) {
        obj.insert(QString("jobNumber"), ::OpenAPI::toJsonValue(m_job_number));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_number_of_items_failed_isSet) {
        obj.insert(QString("numberOfItemsFailed"), ::OpenAPI::toJsonValue(m_number_of_items_failed));
    }
    if (m_number_of_items_submitted_isSet) {
        obj.insert(QString("numberOfItemsSubmitted"), ::OpenAPI::toJsonValue(m_number_of_items_submitted));
    }
    if (m_number_of_items_succeeded_isSet) {
        obj.insert(QString("numberOfItemsSucceeded"), ::OpenAPI::toJsonValue(m_number_of_items_succeeded));
    }
    if (m_source_name_isSet) {
        obj.insert(QString("sourceName"), ::OpenAPI::toJsonValue(m_source_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_of_items_failed_isSet) {
        obj.insert(QString("valueOfItemsFailed"), ::OpenAPI::toJsonValue(m_value_of_items_failed));
    }
    if (m_value_of_items_submitted_isSet) {
        obj.insert(QString("valueOfItemsSubmitted"), ::OpenAPI::toJsonValue(m_value_of_items_submitted));
    }
    if (m_value_of_items_succeeded_isSet) {
        obj.insert(QString("valueOfItemsSucceeded"), ::OpenAPI::toJsonValue(m_value_of_items_succeeded));
    }
    return obj;
}

QString OAIBatch::getBatchName() const {
    return m_batch_name;
}
void OAIBatch::setBatchName(const QString &batch_name) {
    m_batch_name = batch_name;
    m_batch_name_isSet = true;
}

bool OAIBatch::is_batch_name_Set() const{
    return m_batch_name_isSet;
}

bool OAIBatch::is_batch_name_Valid() const{
    return m_batch_name_isValid;
}

QString OAIBatch::getBatchUuid() const {
    return m_batch_uuid;
}
void OAIBatch::setBatchUuid(const QString &batch_uuid) {
    m_batch_uuid = batch_uuid;
    m_batch_uuid_isSet = true;
}

bool OAIBatch::is_batch_uuid_Set() const{
    return m_batch_uuid_isSet;
}

bool OAIBatch::is_batch_uuid_Valid() const{
    return m_batch_uuid_isValid;
}

QString OAIBatch::getCallbackUrl() const {
    return m_callback_url;
}
void OAIBatch::setCallbackUrl(const QString &callback_url) {
    m_callback_url = callback_url;
    m_callback_url_isSet = true;
}

bool OAIBatch::is_callback_url_Set() const{
    return m_callback_url_isSet;
}

bool OAIBatch::is_callback_url_Valid() const{
    return m_callback_url_isValid;
}

QString OAIBatch::getCurrency() const {
    return m_currency;
}
void OAIBatch::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIBatch::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIBatch::is_currency_Valid() const{
    return m_currency_isValid;
}

QDateTime OAIBatch::getDateCreated() const {
    return m_date_created;
}
void OAIBatch::setDateCreated(const QDateTime &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIBatch::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIBatch::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIBatch::getJobNumber() const {
    return m_job_number;
}
void OAIBatch::setJobNumber(const QString &job_number) {
    m_job_number = job_number;
    m_job_number_isSet = true;
}

bool OAIBatch::is_job_number_Set() const{
    return m_job_number_isSet;
}

bool OAIBatch::is_job_number_Valid() const{
    return m_job_number_isValid;
}

QDateTime OAIBatch::getLastUpdated() const {
    return m_last_updated;
}
void OAIBatch::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIBatch::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIBatch::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint64 OAIBatch::getNumberOfItemsFailed() const {
    return m_number_of_items_failed;
}
void OAIBatch::setNumberOfItemsFailed(const qint64 &number_of_items_failed) {
    m_number_of_items_failed = number_of_items_failed;
    m_number_of_items_failed_isSet = true;
}

bool OAIBatch::is_number_of_items_failed_Set() const{
    return m_number_of_items_failed_isSet;
}

bool OAIBatch::is_number_of_items_failed_Valid() const{
    return m_number_of_items_failed_isValid;
}

qint64 OAIBatch::getNumberOfItemsSubmitted() const {
    return m_number_of_items_submitted;
}
void OAIBatch::setNumberOfItemsSubmitted(const qint64 &number_of_items_submitted) {
    m_number_of_items_submitted = number_of_items_submitted;
    m_number_of_items_submitted_isSet = true;
}

bool OAIBatch::is_number_of_items_submitted_Set() const{
    return m_number_of_items_submitted_isSet;
}

bool OAIBatch::is_number_of_items_submitted_Valid() const{
    return m_number_of_items_submitted_isValid;
}

qint64 OAIBatch::getNumberOfItemsSucceeded() const {
    return m_number_of_items_succeeded;
}
void OAIBatch::setNumberOfItemsSucceeded(const qint64 &number_of_items_succeeded) {
    m_number_of_items_succeeded = number_of_items_succeeded;
    m_number_of_items_succeeded_isSet = true;
}

bool OAIBatch::is_number_of_items_succeeded_Set() const{
    return m_number_of_items_succeeded_isSet;
}

bool OAIBatch::is_number_of_items_succeeded_Valid() const{
    return m_number_of_items_succeeded_isValid;
}

QString OAIBatch::getSourceName() const {
    return m_source_name;
}
void OAIBatch::setSourceName(const QString &source_name) {
    m_source_name = source_name;
    m_source_name_isSet = true;
}

bool OAIBatch::is_source_name_Set() const{
    return m_source_name_isSet;
}

bool OAIBatch::is_source_name_Valid() const{
    return m_source_name_isValid;
}

QString OAIBatch::getStatus() const {
    return m_status;
}
void OAIBatch::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBatch::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBatch::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIBatch::getType() const {
    return m_type;
}
void OAIBatch::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBatch::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBatch::is_type_Valid() const{
    return m_type_isValid;
}

qint64 OAIBatch::getValueOfItemsFailed() const {
    return m_value_of_items_failed;
}
void OAIBatch::setValueOfItemsFailed(const qint64 &value_of_items_failed) {
    m_value_of_items_failed = value_of_items_failed;
    m_value_of_items_failed_isSet = true;
}

bool OAIBatch::is_value_of_items_failed_Set() const{
    return m_value_of_items_failed_isSet;
}

bool OAIBatch::is_value_of_items_failed_Valid() const{
    return m_value_of_items_failed_isValid;
}

qint64 OAIBatch::getValueOfItemsSubmitted() const {
    return m_value_of_items_submitted;
}
void OAIBatch::setValueOfItemsSubmitted(const qint64 &value_of_items_submitted) {
    m_value_of_items_submitted = value_of_items_submitted;
    m_value_of_items_submitted_isSet = true;
}

bool OAIBatch::is_value_of_items_submitted_Set() const{
    return m_value_of_items_submitted_isSet;
}

bool OAIBatch::is_value_of_items_submitted_Valid() const{
    return m_value_of_items_submitted_isValid;
}

qint64 OAIBatch::getValueOfItemsSucceeded() const {
    return m_value_of_items_succeeded;
}
void OAIBatch::setValueOfItemsSucceeded(const qint64 &value_of_items_succeeded) {
    m_value_of_items_succeeded = value_of_items_succeeded;
    m_value_of_items_succeeded_isSet = true;
}

bool OAIBatch::is_value_of_items_succeeded_Set() const{
    return m_value_of_items_succeeded_isSet;
}

bool OAIBatch::is_value_of_items_succeeded_Valid() const{
    return m_value_of_items_succeeded_isValid;
}

bool OAIBatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_items_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_items_submitted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_items_succeeded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_of_items_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_of_items_submitted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_of_items_succeeded_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
