/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewCardResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewCardResponse::OAINewCardResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewCardResponse::OAINewCardResponse() {
    this->initializeModel();
}

OAINewCardResponse::~OAINewCardResponse() {}

void OAINewCardResponse::initializeModel() {

    m_card_id_isSet = false;
    m_card_id_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;

    m_masked_pan_isSet = false;
    m_masked_pan_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAINewCardResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewCardResponse::fromJsonObject(QJsonObject json) {

    m_card_id_isValid = ::OpenAPI::fromJsonValue(m_card_id, json[QString("cardId")]);
    m_card_id_isSet = !json[QString("cardId")].isNull() && m_card_id_isValid;

    m_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_expiry_date, json[QString("expiryDate")]);
    m_expiry_date_isSet = !json[QString("expiryDate")].isNull() && m_expiry_date_isValid;

    m_masked_pan_isValid = ::OpenAPI::fromJsonValue(m_masked_pan, json[QString("maskedPan")]);
    m_masked_pan_isSet = !json[QString("maskedPan")].isNull() && m_masked_pan_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAINewCardResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewCardResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_card_id_isSet) {
        obj.insert(QString("cardId"), ::OpenAPI::toJsonValue(m_card_id));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("expiryDate"), ::OpenAPI::toJsonValue(m_expiry_date));
    }
    if (m_masked_pan_isSet) {
        obj.insert(QString("maskedPan"), ::OpenAPI::toJsonValue(m_masked_pan));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint64 OAINewCardResponse::getCardId() const {
    return m_card_id;
}
void OAINewCardResponse::setCardId(const qint64 &card_id) {
    m_card_id = card_id;
    m_card_id_isSet = true;
}

bool OAINewCardResponse::is_card_id_Set() const{
    return m_card_id_isSet;
}

bool OAINewCardResponse::is_card_id_Valid() const{
    return m_card_id_isValid;
}

QDateTime OAINewCardResponse::getExpiryDate() const {
    return m_expiry_date;
}
void OAINewCardResponse::setExpiryDate(const QDateTime &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAINewCardResponse::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAINewCardResponse::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

QString OAINewCardResponse::getMaskedPan() const {
    return m_masked_pan;
}
void OAINewCardResponse::setMaskedPan(const QString &masked_pan) {
    m_masked_pan = masked_pan;
    m_masked_pan_isSet = true;
}

bool OAINewCardResponse::is_masked_pan_Set() const{
    return m_masked_pan_isSet;
}

bool OAINewCardResponse::is_masked_pan_Valid() const{
    return m_masked_pan_isValid;
}

QString OAINewCardResponse::getStatus() const {
    return m_status;
}
void OAINewCardResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINewCardResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAINewCardResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAINewCardResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_masked_pan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewCardResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
