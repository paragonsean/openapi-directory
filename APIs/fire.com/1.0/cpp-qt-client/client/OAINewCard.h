/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINewCard.h
 *
 * 
 */

#ifndef OAINewCard_H
#define OAINewCard_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAINewCard : public OAIObject {
public:
    OAINewCard();
    OAINewCard(QString json);
    ~OAINewCard() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAcceptFeesAndCharges() const;
    void setAcceptFeesAndCharges(const bool &accept_fees_and_charges);
    bool is_accept_fees_and_charges_Set() const;
    bool is_accept_fees_and_charges_Valid() const;

    QString getAddressType() const;
    void setAddressType(const QString &address_type);
    bool is_address_type_Set() const;
    bool is_address_type_Valid() const;

    QString getCardPin() const;
    void setCardPin(const QString &card_pin);
    bool is_card_pin_Set() const;
    bool is_card_pin_Valid() const;

    qint64 getEurIcan() const;
    void setEurIcan(const qint64 &eur_ican);
    bool is_eur_ican_Set() const;
    bool is_eur_ican_Valid() const;

    qint64 getGbpIcan() const;
    void setGbpIcan(const qint64 &gbp_ican);
    bool is_gbp_ican_Set() const;
    bool is_gbp_ican_Valid() const;

    qint64 getUserId() const;
    void setUserId(const qint64 &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_accept_fees_and_charges;
    bool m_accept_fees_and_charges_isSet;
    bool m_accept_fees_and_charges_isValid;

    QString m_address_type;
    bool m_address_type_isSet;
    bool m_address_type_isValid;

    QString m_card_pin;
    bool m_card_pin_isSet;
    bool m_card_pin_isValid;

    qint64 m_eur_ican;
    bool m_eur_ican_isSet;
    bool m_eur_ican_isValid;

    qint64 m_gbp_ican;
    bool m_gbp_ican_isSet;
    bool m_gbp_ican_isValid;

    qint64 m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINewCard)

#endif // OAINewCard_H
