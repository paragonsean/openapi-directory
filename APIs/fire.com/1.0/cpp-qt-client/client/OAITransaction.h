/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITransaction.h
 *
 * 
 */

#ifndef OAITransaction_H
#define OAITransaction_H

#include <QJsonObject>

#include "OAIBatchItemDetails.h"
#include "OAICurrency.h"
#include "OAIDirectDebitDetails.h"
#include "OAIFxTrade.h"
#include "OAIProprietarySchemeDetails_inner.h"
#include "OAIRelatedCard.h"
#include "OAIRelatedParty.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBatchItemDetails;
class OAIRelatedCard;
class OAICurrency;
class OAIDirectDebitDetails;
class OAIFxTrade;
class OAIProprietarySchemeDetails_inner;
class OAIRelatedParty;

class OAITransaction : public OAIObject {
public:
    OAITransaction();
    OAITransaction(QString json);
    ~OAITransaction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getAmountAfterCharges() const;
    void setAmountAfterCharges(const qint64 &amount_after_charges);
    bool is_amount_after_charges_Set() const;
    bool is_amount_after_charges_Valid() const;

    qint64 getAmountBeforeCharges() const;
    void setAmountBeforeCharges(const qint64 &amount_before_charges);
    bool is_amount_before_charges_Set() const;
    bool is_amount_before_charges_Valid() const;

    qint64 getBalance() const;
    void setBalance(const qint64 &balance);
    bool is_balance_Set() const;
    bool is_balance_Valid() const;

    OAIBatchItemDetails getBatchItemDetails() const;
    void setBatchItemDetails(const OAIBatchItemDetails &batch_item_details);
    bool is_batch_item_details_Set() const;
    bool is_batch_item_details_Valid() const;

    OAIRelatedCard getCard() const;
    void setCard(const OAIRelatedCard &card);
    bool is_card_Set() const;
    bool is_card_Valid() const;

    OAICurrency getCurrency() const;
    void setCurrency(const OAICurrency &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    QDateTime getDate() const;
    void setDate(const QDateTime &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    QDateTime getDateAcknowledged() const;
    void setDateAcknowledged(const QDateTime &date_acknowledged);
    bool is_date_acknowledged_Set() const;
    bool is_date_acknowledged_Valid() const;

    OAIDirectDebitDetails getDirectDebitDetails() const;
    void setDirectDebitDetails(const OAIDirectDebitDetails &direct_debit_details);
    bool is_direct_debit_details_Set() const;
    bool is_direct_debit_details_Valid() const;

    QString getEventUuid() const;
    void setEventUuid(const QString &event_uuid);
    bool is_event_uuid_Set() const;
    bool is_event_uuid_Valid() const;

    qint64 getFeeAmount() const;
    void setFeeAmount(const qint64 &fee_amount);
    bool is_fee_amount_Set() const;
    bool is_fee_amount_Valid() const;

    OAIFxTrade getFxTradeDetails() const;
    void setFxTradeDetails(const OAIFxTrade &fx_trade_details);
    bool is_fx_trade_details_Set() const;
    bool is_fx_trade_details_Valid() const;

    qint64 getIcan() const;
    void setIcan(const qint64 &ican);
    bool is_ican_Set() const;
    bool is_ican_Valid() const;

    QString getMyRef() const;
    void setMyRef(const QString &my_ref);
    bool is_my_ref_Set() const;
    bool is_my_ref_Valid() const;

    QString getPaymentRequestPublicCode() const;
    void setPaymentRequestPublicCode(const QString &payment_request_public_code);
    bool is_payment_request_public_code_Set() const;
    bool is_payment_request_public_code_Valid() const;

    QList<OAIProprietarySchemeDetails_inner> getProprietarySchemeDetails() const;
    void setProprietarySchemeDetails(const QList<OAIProprietarySchemeDetails_inner> &proprietary_scheme_details);
    bool is_proprietary_scheme_details_Set() const;
    bool is_proprietary_scheme_details_Valid() const;

    qint64 getRefId() const;
    void setRefId(const qint64 &ref_id);
    bool is_ref_id_Set() const;
    bool is_ref_id_Valid() const;

    OAIRelatedParty getRelatedParty() const;
    void setRelatedParty(const OAIRelatedParty &related_party);
    bool is_related_party_Set() const;
    bool is_related_party_Valid() const;

    qint64 getTaxAmount() const;
    void setTaxAmount(const qint64 &tax_amount);
    bool is_tax_amount_Set() const;
    bool is_tax_amount_Valid() const;

    qint64 getTxnId() const;
    void setTxnId(const qint64 &txn_id);
    bool is_txn_id_Set() const;
    bool is_txn_id_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getYourRef() const;
    void setYourRef(const QString &your_ref);
    bool is_your_ref_Set() const;
    bool is_your_ref_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_amount_after_charges;
    bool m_amount_after_charges_isSet;
    bool m_amount_after_charges_isValid;

    qint64 m_amount_before_charges;
    bool m_amount_before_charges_isSet;
    bool m_amount_before_charges_isValid;

    qint64 m_balance;
    bool m_balance_isSet;
    bool m_balance_isValid;

    OAIBatchItemDetails m_batch_item_details;
    bool m_batch_item_details_isSet;
    bool m_batch_item_details_isValid;

    OAIRelatedCard m_card;
    bool m_card_isSet;
    bool m_card_isValid;

    OAICurrency m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    QDateTime m_date;
    bool m_date_isSet;
    bool m_date_isValid;

    QDateTime m_date_acknowledged;
    bool m_date_acknowledged_isSet;
    bool m_date_acknowledged_isValid;

    OAIDirectDebitDetails m_direct_debit_details;
    bool m_direct_debit_details_isSet;
    bool m_direct_debit_details_isValid;

    QString m_event_uuid;
    bool m_event_uuid_isSet;
    bool m_event_uuid_isValid;

    qint64 m_fee_amount;
    bool m_fee_amount_isSet;
    bool m_fee_amount_isValid;

    OAIFxTrade m_fx_trade_details;
    bool m_fx_trade_details_isSet;
    bool m_fx_trade_details_isValid;

    qint64 m_ican;
    bool m_ican_isSet;
    bool m_ican_isValid;

    QString m_my_ref;
    bool m_my_ref_isSet;
    bool m_my_ref_isValid;

    QString m_payment_request_public_code;
    bool m_payment_request_public_code_isSet;
    bool m_payment_request_public_code_isValid;

    QList<OAIProprietarySchemeDetails_inner> m_proprietary_scheme_details;
    bool m_proprietary_scheme_details_isSet;
    bool m_proprietary_scheme_details_isValid;

    qint64 m_ref_id;
    bool m_ref_id_isSet;
    bool m_ref_id_isValid;

    OAIRelatedParty m_related_party;
    bool m_related_party_isSet;
    bool m_related_party_isValid;

    qint64 m_tax_amount;
    bool m_tax_amount_isSet;
    bool m_tax_amount_isValid;

    qint64 m_txn_id;
    bool m_txn_id_isSet;
    bool m_txn_id_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_your_ref;
    bool m_your_ref_isSet;
    bool m_your_ref_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITransaction)

#endif // OAITransaction_H
