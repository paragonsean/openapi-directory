/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewBatchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewBatchResponse::OAINewBatchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewBatchResponse::OAINewBatchResponse() {
    this->initializeModel();
}

OAINewBatchResponse::~OAINewBatchResponse() {}

void OAINewBatchResponse::initializeModel() {

    m_batch_uuid_isSet = false;
    m_batch_uuid_isValid = false;
}

void OAINewBatchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewBatchResponse::fromJsonObject(QJsonObject json) {

    m_batch_uuid_isValid = ::OpenAPI::fromJsonValue(m_batch_uuid, json[QString("batchUuid")]);
    m_batch_uuid_isSet = !json[QString("batchUuid")].isNull() && m_batch_uuid_isValid;
}

QString OAINewBatchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewBatchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_uuid_isSet) {
        obj.insert(QString("batchUuid"), ::OpenAPI::toJsonValue(m_batch_uuid));
    }
    return obj;
}

QString OAINewBatchResponse::getBatchUuid() const {
    return m_batch_uuid;
}
void OAINewBatchResponse::setBatchUuid(const QString &batch_uuid) {
    m_batch_uuid = batch_uuid;
    m_batch_uuid_isSet = true;
}

bool OAINewBatchResponse::is_batch_uuid_Set() const{
    return m_batch_uuid_isSet;
}

bool OAINewBatchResponse::is_batch_uuid_Valid() const{
    return m_batch_uuid_isValid;
}

bool OAINewBatchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewBatchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
