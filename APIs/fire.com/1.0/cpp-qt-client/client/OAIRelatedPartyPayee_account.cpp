/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRelatedPartyPayee_account.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRelatedPartyPayee_account::OAIRelatedPartyPayee_account(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRelatedPartyPayee_account::OAIRelatedPartyPayee_account() {
    this->initializeModel();
}

OAIRelatedPartyPayee_account::~OAIRelatedPartyPayee_account() {}

void OAIRelatedPartyPayee_account::initializeModel() {

    m_account_number_isSet = false;
    m_account_number_isValid = false;

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_bic_isSet = false;
    m_bic_isValid = false;

    m_iban_isSet = false;
    m_iban_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_nsc_isSet = false;
    m_nsc_isValid = false;
}

void OAIRelatedPartyPayee_account::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRelatedPartyPayee_account::fromJsonObject(QJsonObject json) {

    m_account_number_isValid = ::OpenAPI::fromJsonValue(m_account_number, json[QString("accountNumber")]);
    m_account_number_isSet = !json[QString("accountNumber")].isNull() && m_account_number_isValid;

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_bic_isValid = ::OpenAPI::fromJsonValue(m_bic, json[QString("bic")]);
    m_bic_isSet = !json[QString("bic")].isNull() && m_bic_isValid;

    m_iban_isValid = ::OpenAPI::fromJsonValue(m_iban, json[QString("iban")]);
    m_iban_isSet = !json[QString("iban")].isNull() && m_iban_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_nsc_isValid = ::OpenAPI::fromJsonValue(m_nsc, json[QString("nsc")]);
    m_nsc_isSet = !json[QString("nsc")].isNull() && m_nsc_isValid;
}

QString OAIRelatedPartyPayee_account::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRelatedPartyPayee_account::asJsonObject() const {
    QJsonObject obj;
    if (m_account_number_isSet) {
        obj.insert(QString("accountNumber"), ::OpenAPI::toJsonValue(m_account_number));
    }
    if (m_alias_isSet) {
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_bic_isSet) {
        obj.insert(QString("bic"), ::OpenAPI::toJsonValue(m_bic));
    }
    if (m_iban_isSet) {
        obj.insert(QString("iban"), ::OpenAPI::toJsonValue(m_iban));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_nsc_isSet) {
        obj.insert(QString("nsc"), ::OpenAPI::toJsonValue(m_nsc));
    }
    return obj;
}

QString OAIRelatedPartyPayee_account::getAccountNumber() const {
    return m_account_number;
}
void OAIRelatedPartyPayee_account::setAccountNumber(const QString &account_number) {
    m_account_number = account_number;
    m_account_number_isSet = true;
}

bool OAIRelatedPartyPayee_account::is_account_number_Set() const{
    return m_account_number_isSet;
}

bool OAIRelatedPartyPayee_account::is_account_number_Valid() const{
    return m_account_number_isValid;
}

QString OAIRelatedPartyPayee_account::getAlias() const {
    return m_alias;
}
void OAIRelatedPartyPayee_account::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIRelatedPartyPayee_account::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIRelatedPartyPayee_account::is_alias_Valid() const{
    return m_alias_isValid;
}

QString OAIRelatedPartyPayee_account::getBic() const {
    return m_bic;
}
void OAIRelatedPartyPayee_account::setBic(const QString &bic) {
    m_bic = bic;
    m_bic_isSet = true;
}

bool OAIRelatedPartyPayee_account::is_bic_Set() const{
    return m_bic_isSet;
}

bool OAIRelatedPartyPayee_account::is_bic_Valid() const{
    return m_bic_isValid;
}

QString OAIRelatedPartyPayee_account::getIban() const {
    return m_iban;
}
void OAIRelatedPartyPayee_account::setIban(const QString &iban) {
    m_iban = iban;
    m_iban_isSet = true;
}

bool OAIRelatedPartyPayee_account::is_iban_Set() const{
    return m_iban_isSet;
}

bool OAIRelatedPartyPayee_account::is_iban_Valid() const{
    return m_iban_isValid;
}

qint64 OAIRelatedPartyPayee_account::getId() const {
    return m_id;
}
void OAIRelatedPartyPayee_account::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRelatedPartyPayee_account::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRelatedPartyPayee_account::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRelatedPartyPayee_account::getNsc() const {
    return m_nsc;
}
void OAIRelatedPartyPayee_account::setNsc(const QString &nsc) {
    m_nsc = nsc;
    m_nsc_isSet = true;
}

bool OAIRelatedPartyPayee_account::is_nsc_Set() const{
    return m_nsc_isSet;
}

bool OAIRelatedPartyPayee_account::is_nsc_Valid() const{
    return m_nsc_isValid;
}

bool OAIRelatedPartyPayee_account::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iban_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nsc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRelatedPartyPayee_account::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
