/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Payee from './Payee';

/**
 * The PayeeBankAccounts model module.
 * @module model/PayeeBankAccounts
 * @version 1.0
 */
class PayeeBankAccounts {
    /**
     * Constructs a new <code>PayeeBankAccounts</code>.
     * @alias module:model/PayeeBankAccounts
     */
    constructor() { 
        
        PayeeBankAccounts.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PayeeBankAccounts</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PayeeBankAccounts} obj Optional instance to populate.
     * @return {module:model/PayeeBankAccounts} The populated <code>PayeeBankAccounts</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PayeeBankAccounts();

            if (data.hasOwnProperty('fundingSources')) {
                obj['fundingSources'] = ApiClient.convertToType(data['fundingSources'], [Payee]);
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PayeeBankAccounts</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PayeeBankAccounts</code>.
     */
    static validateJSON(data) {
        if (data['fundingSources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fundingSources'])) {
                throw new Error("Expected the field `fundingSources` to be an array in the JSON data but got " + data['fundingSources']);
            }
            // validate the optional field `fundingSources` (array)
            for (const item of data['fundingSources']) {
                Payee.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/Payee>} fundingSources
 */
PayeeBankAccounts.prototype['fundingSources'] = undefined;

/**
 * The total number of payees in the list.
 * @member {Number} total
 */
PayeeBankAccounts.prototype['total'] = undefined;






export default PayeeBankAccounts;

