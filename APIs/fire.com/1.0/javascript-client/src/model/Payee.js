/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';

/**
 * The Payee model module.
 * @module model/Payee
 * @version 1.0
 */
class Payee {
    /**
     * Constructs a new <code>Payee</code>.
     * @alias module:model/Payee
     */
    constructor() { 
        
        Payee.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Payee</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Payee} obj Optional instance to populate.
     * @return {module:model/Payee} The populated <code>Payee</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Payee();

            if (data.hasOwnProperty('accountHolderName')) {
                obj['accountHolderName'] = ApiClient.convertToType(data['accountHolderName'], 'String');
            }
            if (data.hasOwnProperty('accountName')) {
                obj['accountName'] = ApiClient.convertToType(data['accountName'], 'String');
            }
            if (data.hasOwnProperty('accountNumber')) {
                obj['accountNumber'] = ApiClient.convertToType(data['accountNumber'], 'String');
            }
            if (data.hasOwnProperty('bic')) {
                obj['bic'] = ApiClient.convertToType(data['bic'], 'String');
            }
            if (data.hasOwnProperty('createdBy')) {
                obj['createdBy'] = ApiClient.convertToType(data['createdBy'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = Currency.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Date');
            }
            if (data.hasOwnProperty('iban')) {
                obj['iban'] = ApiClient.convertToType(data['iban'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('nsc')) {
                obj['nsc'] = ApiClient.convertToType(data['nsc'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Payee</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Payee</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountHolderName'] && !(typeof data['accountHolderName'] === 'string' || data['accountHolderName'] instanceof String)) {
            throw new Error("Expected the field `accountHolderName` to be a primitive type in the JSON string but got " + data['accountHolderName']);
        }
        // ensure the json data is a string
        if (data['accountName'] && !(typeof data['accountName'] === 'string' || data['accountName'] instanceof String)) {
            throw new Error("Expected the field `accountName` to be a primitive type in the JSON string but got " + data['accountName']);
        }
        // ensure the json data is a string
        if (data['accountNumber'] && !(typeof data['accountNumber'] === 'string' || data['accountNumber'] instanceof String)) {
            throw new Error("Expected the field `accountNumber` to be a primitive type in the JSON string but got " + data['accountNumber']);
        }
        // ensure the json data is a string
        if (data['bic'] && !(typeof data['bic'] === 'string' || data['bic'] instanceof String)) {
            throw new Error("Expected the field `bic` to be a primitive type in the JSON string but got " + data['bic']);
        }
        // ensure the json data is a string
        if (data['createdBy'] && !(typeof data['createdBy'] === 'string' || data['createdBy'] instanceof String)) {
            throw new Error("Expected the field `createdBy` to be a primitive type in the JSON string but got " + data['createdBy']);
        }
        // validate the optional field `currency`
        if (data['currency']) { // data not null
          Currency.validateJSON(data['currency']);
        }
        // ensure the json data is a string
        if (data['iban'] && !(typeof data['iban'] === 'string' || data['iban'] instanceof String)) {
            throw new Error("Expected the field `iban` to be a primitive type in the JSON string but got " + data['iban']);
        }
        // ensure the json data is a string
        if (data['nsc'] && !(typeof data['nsc'] === 'string' || data['nsc'] instanceof String)) {
            throw new Error("Expected the field `nsc` to be a primitive type in the JSON string but got " + data['nsc']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The name on the payee bank account.
 * @member {String} accountHolderName
 */
Payee.prototype['accountHolderName'] = undefined;

/**
 * The alias attributed to the payee, usually set by the user when creating the payee.
 * @member {String} accountName
 */
Payee.prototype['accountName'] = undefined;

/**
 * The Account Number of the account if currency is GBP.
 * @member {String} accountNumber
 */
Payee.prototype['accountNumber'] = undefined;

/**
 * The BIC of the account if currency is EUR.
 * @member {String} bic
 */
Payee.prototype['bic'] = undefined;

/**
 * The creation source of the payee.
 * @member {module:model/Payee.CreatedByEnum} createdBy
 */
Payee.prototype['createdBy'] = undefined;

/**
 * @member {module:model/Currency} currency
 */
Payee.prototype['currency'] = undefined;

/**
 * The date the payee was created. ISO Date Time.
 * @member {Date} dateCreated
 */
Payee.prototype['dateCreated'] = undefined;

/**
 * The IBAN of the account if currency is EUR.
 * @member {String} iban
 */
Payee.prototype['iban'] = undefined;

/**
 * Identifier for the fire.com payee bank account (assigned by fire.com).
 * @member {Number} id
 */
Payee.prototype['id'] = undefined;

/**
 * The Sort Code of the account if currency is GBP.
 * @member {String} nsc
 */
Payee.prototype['nsc'] = undefined;

/**
 * The status of the payee. Only payees in LIVE status can be selected as a destination account for an outgoing payment.   * 'CREATED' - The payee has been set-up via Bank Transfer Received, Direct Debit, or Open Banking. This payee must be converted to LIVE status to select as a destination account for an outgoing payment.   * 'LIVE' - The payee can be selected as a destination account for an outgoing payment.   * 'CLOSED'   * 'ARCHIVED' - The payee has been deleted and must be added again to be selected as a destination account for an outgoing payment. 
 * @member {module:model/Payee.StatusEnum} status
 */
Payee.prototype['status'] = undefined;





/**
 * Allowed values for the <code>createdBy</code> property.
 * @enum {String}
 * @readonly
 */
Payee['CreatedByEnum'] = {

    /**
     * value: "CUSTOMER"
     * @const
     */
    "CUSTOMER": "CUSTOMER",

    /**
     * value: "LODGEMENT"
     * @const
     */
    "LODGEMENT": "LODGEMENT",

    /**
     * value: "DIRECT DEBIT"
     * @const
     */
    "DIRECT DEBIT": "DIRECT DEBIT",

    /**
     * value: "OPEN BANKING"
     * @const
     */
    "OPEN BANKING": "OPEN BANKING",

    /**
     * value: "FIRE OPEN PAYMENT"
     * @const
     */
    "FIRE OPEN PAYMENT": "FIRE OPEN PAYMENT",

    /**
     * value: "FIRE DIRECT"
     * @const
     */
    "FIRE DIRECT": "FIRE DIRECT"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Payee['StatusEnum'] = {

    /**
     * value: "CREATED"
     * @const
     */
    "CREATED": "CREATED",

    /**
     * value: "LIVE"
     * @const
     */
    "LIVE": "LIVE",

    /**
     * value: "CLOSED"
     * @const
     */
    "CLOSED": "CLOSED",

    /**
     * value: "ARCHIVED"
     * @const
     */
    "ARCHIVED": "ARCHIVED"
};



export default Payee;

