/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Batch model module.
 * @module model/Batch
 * @version 1.0
 */
class Batch {
    /**
     * Constructs a new <code>Batch</code>.
     * @alias module:model/Batch
     */
    constructor() { 
        
        Batch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Batch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Batch} obj Optional instance to populate.
     * @return {module:model/Batch} The populated <code>Batch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Batch();

            if (data.hasOwnProperty('batchName')) {
                obj['batchName'] = ApiClient.convertToType(data['batchName'], 'String');
            }
            if (data.hasOwnProperty('batchUuid')) {
                obj['batchUuid'] = ApiClient.convertToType(data['batchUuid'], 'String');
            }
            if (data.hasOwnProperty('callbackUrl')) {
                obj['callbackUrl'] = ApiClient.convertToType(data['callbackUrl'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Date');
            }
            if (data.hasOwnProperty('jobNumber')) {
                obj['jobNumber'] = ApiClient.convertToType(data['jobNumber'], 'String');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('numberOfItemsFailed')) {
                obj['numberOfItemsFailed'] = ApiClient.convertToType(data['numberOfItemsFailed'], 'Number');
            }
            if (data.hasOwnProperty('numberOfItemsSubmitted')) {
                obj['numberOfItemsSubmitted'] = ApiClient.convertToType(data['numberOfItemsSubmitted'], 'Number');
            }
            if (data.hasOwnProperty('numberOfItemsSucceeded')) {
                obj['numberOfItemsSucceeded'] = ApiClient.convertToType(data['numberOfItemsSucceeded'], 'Number');
            }
            if (data.hasOwnProperty('sourceName')) {
                obj['sourceName'] = ApiClient.convertToType(data['sourceName'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('valueOfItemsFailed')) {
                obj['valueOfItemsFailed'] = ApiClient.convertToType(data['valueOfItemsFailed'], 'Number');
            }
            if (data.hasOwnProperty('valueOfItemsSubmitted')) {
                obj['valueOfItemsSubmitted'] = ApiClient.convertToType(data['valueOfItemsSubmitted'], 'Number');
            }
            if (data.hasOwnProperty('valueOfItemsSucceeded')) {
                obj['valueOfItemsSucceeded'] = ApiClient.convertToType(data['valueOfItemsSucceeded'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Batch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Batch</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['batchName'] && !(typeof data['batchName'] === 'string' || data['batchName'] instanceof String)) {
            throw new Error("Expected the field `batchName` to be a primitive type in the JSON string but got " + data['batchName']);
        }
        // ensure the json data is a string
        if (data['batchUuid'] && !(typeof data['batchUuid'] === 'string' || data['batchUuid'] instanceof String)) {
            throw new Error("Expected the field `batchUuid` to be a primitive type in the JSON string but got " + data['batchUuid']);
        }
        // ensure the json data is a string
        if (data['callbackUrl'] && !(typeof data['callbackUrl'] === 'string' || data['callbackUrl'] instanceof String)) {
            throw new Error("Expected the field `callbackUrl` to be a primitive type in the JSON string but got " + data['callbackUrl']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['jobNumber'] && !(typeof data['jobNumber'] === 'string' || data['jobNumber'] instanceof String)) {
            throw new Error("Expected the field `jobNumber` to be a primitive type in the JSON string but got " + data['jobNumber']);
        }
        // ensure the json data is a string
        if (data['sourceName'] && !(typeof data['sourceName'] === 'string' || data['sourceName'] instanceof String)) {
            throw new Error("Expected the field `sourceName` to be a primitive type in the JSON string but got " + data['sourceName']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * An optional name you give to the batch at creation time
 * @member {String} batchName
 */
Batch.prototype['batchName'] = undefined;

/**
 * A UUID for this item.
 * @member {String} batchUuid
 */
Batch.prototype['batchUuid'] = undefined;

/**
 * An optional POST URL that all events for this batch will be sent to.
 * @member {String} callbackUrl
 */
Batch.prototype['callbackUrl'] = undefined;

/**
 * All payments in the batch must be the same currency.
 * @member {String} currency
 */
Batch.prototype['currency'] = undefined;

/**
 * The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z
 * @member {Date} dateCreated
 */
Batch.prototype['dateCreated'] = undefined;

/**
 * An optional job number you can give to the batch to help link it to your own system.
 * @member {String} jobNumber
 */
Batch.prototype['jobNumber'] = undefined;

/**
 * The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z
 * @member {Date} lastUpdated
 */
Batch.prototype['lastUpdated'] = undefined;

/**
 * Once processed, a count of the number of items that didn’t process successfully.
 * @member {Number} numberOfItemsFailed
 */
Batch.prototype['numberOfItemsFailed'] = undefined;

/**
 * A count of the number of items in the batch
 * @member {Number} numberOfItemsSubmitted
 */
Batch.prototype['numberOfItemsSubmitted'] = undefined;

/**
 * Once processed, a count of the number of items that processed successfully.
 * @member {Number} numberOfItemsSucceeded
 */
Batch.prototype['numberOfItemsSucceeded'] = undefined;

/**
 * A string describing where the batch originated - for instance the name of the API token that was used, or showing that the batch was automatically created by fire.com (in the case of a new payee batch).
 * @member {String} sourceName
 */
Batch.prototype['sourceName'] = undefined;

/**
 * status of the batch object
 * @member {module:model/Batch.StatusEnum} status
 */
Batch.prototype['status'] = undefined;

/**
 * The type of the batch - can be one of the listed enums
 * @member {module:model/Batch.TypeEnum} type
 */
Batch.prototype['type'] = undefined;

/**
 * Once processed, a sum of the value of items that didn’t process successfully. Specified in pence or cent.
 * @member {Number} valueOfItemsFailed
 */
Batch.prototype['valueOfItemsFailed'] = undefined;

/**
 * A sum of the value of items in the batch. Specified in pence or cent.
 * @member {Number} valueOfItemsSubmitted
 */
Batch.prototype['valueOfItemsSubmitted'] = undefined;

/**
 * Once processed, a sum of the value of items that processed successfully. Specified in pence or cent.
 * @member {Number} valueOfItemsSucceeded
 */
Batch.prototype['valueOfItemsSucceeded'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Batch['StatusEnum'] = {

    /**
     * value: "PENDING_APPROVAL"
     * @const
     */
    "PENDING_APPROVAL": "PENDING_APPROVAL",

    /**
     * value: "REJECTED"
     * @const
     */
    "REJECTED": "REJECTED",

    /**
     * value: "COMPLETE"
     * @const
     */
    "COMPLETE": "COMPLETE",

    /**
     * value: "OPEN"
     * @const
     */
    "OPEN": "OPEN",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "PENDING_PARENT_BATCH_APPROVAL"
     * @const
     */
    "PENDING_PARENT_BATCH_APPROVAL": "PENDING_PARENT_BATCH_APPROVAL",

    /**
     * value: "READY_FOR_PROCESSING"
     * @const
     */
    "READY_FOR_PROCESSING": "READY_FOR_PROCESSING",

    /**
     * value: "PROCESSING"
     * @const
     */
    "PROCESSING": "PROCESSING"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Batch['TypeEnum'] = {

    /**
     * value: "INTERNAL_TRANSFER"
     * @const
     */
    "INTERNAL_TRANSFER": "INTERNAL_TRANSFER",

    /**
     * value: "BANK_TRANSFER"
     * @const
     */
    "BANK_TRANSFER": "BANK_TRANSFER",

    /**
     * value: "INTERNATIONAL_TRANSFER"
     * @const
     */
    "INTERNATIONAL_TRANSFER": "INTERNATIONAL_TRANSFER",

    /**
     * value: "NEW_PAYEE"
     * @const
     */
    "NEW_PAYEE": "NEW_PAYEE"
};



export default Batch;

