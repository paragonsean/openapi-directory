/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ApiApplication model module.
 * @module model/ApiApplication
 * @version 1.0
 */
class ApiApplication {
    /**
     * Constructs a new <code>ApiApplication</code>.
     * @alias module:model/ApiApplication
     */
    constructor() { 
        
        ApiApplication.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApiApplication</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiApplication} obj Optional instance to populate.
     * @return {module:model/ApiApplication} The populated <code>ApiApplication</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiApplication();

            if (data.hasOwnProperty('applicationId')) {
                obj['applicationId'] = ApiClient.convertToType(data['applicationId'], 'Number');
            }
            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('clientKey')) {
                obj['clientKey'] = ApiClient.convertToType(data['clientKey'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('expiry')) {
                obj['expiry'] = ApiClient.convertToType(data['expiry'], 'Date');
            }
            if (data.hasOwnProperty('ican')) {
                obj['ican'] = ApiClient.convertToType(data['ican'], 'Number');
            }
            if (data.hasOwnProperty('numberOfPayeeApprovalsRequired')) {
                obj['numberOfPayeeApprovalsRequired'] = ApiClient.convertToType(data['numberOfPayeeApprovalsRequired'], 'Number');
            }
            if (data.hasOwnProperty('numberOfPaymentApprovalsRequired')) {
                obj['numberOfPaymentApprovalsRequired'] = ApiClient.convertToType(data['numberOfPaymentApprovalsRequired'], 'Number');
            }
            if (data.hasOwnProperty('refreshToken')) {
                obj['refreshToken'] = ApiClient.convertToType(data['refreshToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiApplication</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiApplication</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['clientKey'] && !(typeof data['clientKey'] === 'string' || data['clientKey'] instanceof String)) {
            throw new Error("Expected the field `clientKey` to be a primitive type in the JSON string but got " + data['clientKey']);
        }
        // ensure the json data is a string
        if (data['refreshToken'] && !(typeof data['refreshToken'] === 'string' || data['refreshToken'] instanceof String)) {
            throw new Error("Expected the field `refreshToken` to be a primitive type in the JSON string but got " + data['refreshToken']);
        }

        return true;
    }


}



/**
 * The ID of the API Application
 * @member {Number} applicationId
 */
ApiApplication.prototype['applicationId'] = undefined;

/**
 * The Client ID of the new API Application
 * @member {String} clientId
 */
ApiApplication.prototype['clientId'] = undefined;

/**
 * The Client Key of the new API Application
 * @member {String} clientKey
 */
ApiApplication.prototype['clientKey'] = undefined;

/**
 * Whether or not this API Application can be used
 * @member {Boolean} enabled
 */
ApiApplication.prototype['enabled'] = undefined;

/**
 * The date that this API Application can no longer be used.
 * @member {Date} expiry
 */
ApiApplication.prototype['expiry'] = undefined;

/**
 * The ICAN of one of your Fire accounts. Restrict this API Application to a certan account.
 * @member {Number} ican
 */
ApiApplication.prototype['ican'] = undefined;

/**
 * Number of approvals required to create a payee in a batch
 * @member {Number} numberOfPayeeApprovalsRequired
 */
ApiApplication.prototype['numberOfPayeeApprovalsRequired'] = undefined;

/**
 * Number of approvals required to process a payment in a batch
 * @member {Number} numberOfPaymentApprovalsRequired
 */
ApiApplication.prototype['numberOfPaymentApprovalsRequired'] = undefined;

/**
 * The Refresh Token of the new API Application
 * @member {String} refreshToken
 */
ApiApplication.prototype['refreshToken'] = undefined;






export default ApiApplication;

