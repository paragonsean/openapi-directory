/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';
import OrderDetails from './OrderDetails';

/**
 * The PaymentRequest model module.
 * @module model/PaymentRequest
 * @version 1.0
 */
class PaymentRequest {
    /**
     * Constructs a new <code>PaymentRequest</code>.
     * @alias module:model/PaymentRequest
     */
    constructor() { 
        
        PaymentRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaymentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentRequest} obj Optional instance to populate.
     * @return {module:model/PaymentRequest} The populated <code>PaymentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentRequest();

            if (data.hasOwnProperty('additionalFields')) {
                obj['additionalFields'] = ApiClient.convertToType(data['additionalFields'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('collectFields')) {
                obj['collectFields'] = ApiClient.convertToType(data['collectFields'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = Currency.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('expiry')) {
                obj['expiry'] = ApiClient.convertToType(data['expiry'], 'Date');
            }
            if (data.hasOwnProperty('icanTo')) {
                obj['icanTo'] = ApiClient.convertToType(data['icanTo'], 'Number');
            }
            if (data.hasOwnProperty('mandatoryFields')) {
                obj['mandatoryFields'] = ApiClient.convertToType(data['mandatoryFields'], 'String');
            }
            if (data.hasOwnProperty('maxNumberPayments')) {
                obj['maxNumberPayments'] = ApiClient.convertToType(data['maxNumberPayments'], 'Number');
            }
            if (data.hasOwnProperty('myRef')) {
                obj['myRef'] = ApiClient.convertToType(data['myRef'], 'String');
            }
            if (data.hasOwnProperty('orderDetails')) {
                obj['orderDetails'] = OrderDetails.constructFromObject(data['orderDetails']);
            }
            if (data.hasOwnProperty('paymentRequestCode')) {
                obj['paymentRequestCode'] = ApiClient.convertToType(data['paymentRequestCode'], 'String');
            }
            if (data.hasOwnProperty('paymentUuid')) {
                obj['paymentUuid'] = ApiClient.convertToType(data['paymentUuid'], 'String');
            }
            if (data.hasOwnProperty('returnUrl')) {
                obj['returnUrl'] = ApiClient.convertToType(data['returnUrl'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('transactionType')) {
                obj['transactionType'] = ApiClient.convertToType(data['transactionType'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('webhookUrl')) {
                obj['webhookUrl'] = ApiClient.convertToType(data['webhookUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['additionalFields'] && !(typeof data['additionalFields'] === 'string' || data['additionalFields'] instanceof String)) {
            throw new Error("Expected the field `additionalFields` to be a primitive type in the JSON string but got " + data['additionalFields']);
        }
        // ensure the json data is a string
        if (data['collectFields'] && !(typeof data['collectFields'] === 'string' || data['collectFields'] instanceof String)) {
            throw new Error("Expected the field `collectFields` to be a primitive type in the JSON string but got " + data['collectFields']);
        }
        // validate the optional field `currency`
        if (data['currency']) { // data not null
          Currency.validateJSON(data['currency']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['mandatoryFields'] && !(typeof data['mandatoryFields'] === 'string' || data['mandatoryFields'] instanceof String)) {
            throw new Error("Expected the field `mandatoryFields` to be a primitive type in the JSON string but got " + data['mandatoryFields']);
        }
        // ensure the json data is a string
        if (data['myRef'] && !(typeof data['myRef'] === 'string' || data['myRef'] instanceof String)) {
            throw new Error("Expected the field `myRef` to be a primitive type in the JSON string but got " + data['myRef']);
        }
        // validate the optional field `orderDetails`
        if (data['orderDetails']) { // data not null
          OrderDetails.validateJSON(data['orderDetails']);
        }
        // ensure the json data is a string
        if (data['paymentRequestCode'] && !(typeof data['paymentRequestCode'] === 'string' || data['paymentRequestCode'] instanceof String)) {
            throw new Error("Expected the field `paymentRequestCode` to be a primitive type in the JSON string but got " + data['paymentRequestCode']);
        }
        // ensure the json data is a string
        if (data['paymentUuid'] && !(typeof data['paymentUuid'] === 'string' || data['paymentUuid'] instanceof String)) {
            throw new Error("Expected the field `paymentUuid` to be a primitive type in the JSON string but got " + data['paymentUuid']);
        }
        // ensure the json data is a string
        if (data['returnUrl'] && !(typeof data['returnUrl'] === 'string' || data['returnUrl'] instanceof String)) {
            throw new Error("Expected the field `returnUrl` to be a primitive type in the JSON string but got " + data['returnUrl']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['transactionType'] && !(typeof data['transactionType'] === 'string' || data['transactionType'] instanceof String)) {
            throw new Error("Expected the field `transactionType` to be a primitive type in the JSON string but got " + data['transactionType']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['webhookUrl'] && !(typeof data['webhookUrl'] === 'string' || data['webhookUrl'] instanceof String)) {
            throw new Error("Expected the field `webhookUrl` to be a primitive type in the JSON string but got " + data['webhookUrl']);
        }

        return true;
    }


}



/**
 * These fields will be dispalyed to the payer when using the hosted option. You can choose to display any of `ORDER_ID`, `PRODUCT_ID`, `CUSTOMER_ID`, `CUSTOMER_NUMBER` and `COMMENT2` to the payer.
 * @member {String} additionalFields
 */
PaymentRequest.prototype['additionalFields'] = undefined;

/**
 * The requested amount to pay. Note the last two digits represent pennies/cents, (e.g., £1.00 = 100).
 * @member {Number} amount
 */
PaymentRequest.prototype['amount'] = undefined;

/**
 * For the hosted option, the payer will be asked to fill in these fields but they will not be mandatory. You can choose to collect any of the payer's `ADDRESS`, `REFERENCE` and/or `COMMENT1`. If you choose to collect these fields from the payer, you cannot set 'delivery’, 'variableReference’ or 'comment1’ fields respectively.
 * @member {String} collectFields
 */
PaymentRequest.prototype['collectFields'] = undefined;

/**
 * @member {module:model/Currency} currency
 */
PaymentRequest.prototype['currency'] = undefined;

/**
 * A public facing description of the request. This will be shown to the user when they tap or scan the request.
 * @member {String} description
 */
PaymentRequest.prototype['description'] = undefined;

/**
 * This is the expiry of the payment request. After this time, the payment cannot be paid.
 * @member {Date} expiry
 */
PaymentRequest.prototype['expiry'] = undefined;

/**
 * The ican of the account to collect the funds into. Must be one of your fire.com Accounts.
 * @member {Number} icanTo
 */
PaymentRequest.prototype['icanTo'] = undefined;

/**
 * For the hosted option, these fields will be madatory for the payer to fill in on the hosted payment page. You can choose to collect any the payer's `ADDRESS`, `REFERENCE` and/or `COMMENT1`. If you choose to collect these fields from the payer, you cannot set 'delivery’, 'variableReference’ or 'comment1’ fields respectively.
 * @member {String} mandatoryFields
 */
PaymentRequest.prototype['mandatoryFields'] = undefined;

/**
 * The max number of people who can pay this request. Must be set to 1 for the ECOMMERCE_GOODS and ECOMMERCE_SERVICES types.
 * @member {Number} maxNumberPayments
 */
PaymentRequest.prototype['maxNumberPayments'] = undefined;

/**
 * An internal description of the request.
 * @member {String} myRef
 */
PaymentRequest.prototype['myRef'] = undefined;

/**
 * @member {module:model/OrderDetails} orderDetails
 */
PaymentRequest.prototype['orderDetails'] = undefined;

/**
 * The code that was returned when you created the payment request.
 * @member {String} paymentRequestCode
 */
PaymentRequest.prototype['paymentRequestCode'] = undefined;

/**
 * A unique id for the transaction.
 * @member {String} paymentUuid
 */
PaymentRequest.prototype['paymentUuid'] = undefined;

/**
 * The merchant return URL where the customer will be re-directed to with the result of the transaction.
 * @member {String} returnUrl
 */
PaymentRequest.prototype['returnUrl'] = undefined;

/**
 * The status of the transaction
 * @member {module:model/PaymentRequest.StatusEnum} status
 */
PaymentRequest.prototype['status'] = undefined;

/**
 * The type of payment request payment
 * @member {module:model/PaymentRequest.TransactionTypeEnum} transactionType
 */
PaymentRequest.prototype['transactionType'] = undefined;

/**
 * The type of Fire Open Payment that was created
 * @member {module:model/PaymentRequest.TypeEnum} type
 */
PaymentRequest.prototype['type'] = undefined;

/**
 * A URL to be called in the background with the details of the payment after the payment is complete
 * @member {String} webhookUrl
 */
PaymentRequest.prototype['webhookUrl'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
PaymentRequest['StatusEnum'] = {

    /**
     * value: "AWAITING_AUTHORISATION"
     * @const
     */
    "AWAITING_AUTHORISATION": "AWAITING_AUTHORISATION",

    /**
     * value: "AUTHORISED"
     * @const
     */
    "AUTHORISED": "AUTHORISED",

    /**
     * value: "AWAITING_MULTI_AUTHORISATION"
     * @const
     */
    "AWAITING_MULTI_AUTHORISATION": "AWAITING_MULTI_AUTHORISATION",

    /**
     * value: "NOT_AUTHORISED"
     * @const
     */
    "NOT_AUTHORISED": "NOT_AUTHORISED",

    /**
     * value: "PAID"
     * @const
     */
    "PAID": "PAID",

    /**
     * value: "REJECTED"
     * @const
     */
    "REJECTED": "REJECTED",

    /**
     * value: "ACCEPTED"
     * @const
     */
    "ACCEPTED": "ACCEPTED",

    /**
     * value: "RECEIVED"
     * @const
     */
    "RECEIVED": "RECEIVED"
};


/**
 * Allowed values for the <code>transactionType</code> property.
 * @enum {String}
 * @readonly
 */
PaymentRequest['TransactionTypeEnum'] = {

    /**
     * value: "REFUND_REQUEST"
     * @const
     */
    "REFUND_REQUEST": "REFUND_REQUEST",

    /**
     * value: "PAYMENT"
     * @const
     */
    "PAYMENT": "PAYMENT"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
PaymentRequest['TypeEnum'] = {

    /**
     * value: "OTHER"
     * @const
     */
    "OTHER": "OTHER"
};



export default PaymentRequest;

