/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Card model module.
 * @module model/Card
 * @version 1.0
 */
class Card {
    /**
     * Constructs a new <code>Card</code>.
     * @alias module:model/Card
     */
    constructor() { 
        
        Card.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Card</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Card} obj Optional instance to populate.
     * @return {module:model/Card} The populated <code>Card</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Card();

            if (data.hasOwnProperty('blocked')) {
                obj['blocked'] = ApiClient.convertToType(data['blocked'], 'Boolean');
            }
            if (data.hasOwnProperty('cardId')) {
                obj['cardId'] = ApiClient.convertToType(data['cardId'], 'Number');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Date');
            }
            if (data.hasOwnProperty('emailAddress')) {
                obj['emailAddress'] = ApiClient.convertToType(data['emailAddress'], 'String');
            }
            if (data.hasOwnProperty('eurIcan')) {
                obj['eurIcan'] = ApiClient.convertToType(data['eurIcan'], 'Number');
            }
            if (data.hasOwnProperty('expiryDate')) {
                obj['expiryDate'] = ApiClient.convertToType(data['expiryDate'], 'Date');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('gbpIcan')) {
                obj['gbpIcan'] = ApiClient.convertToType(data['gbpIcan'], 'Number');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('maskedPan')) {
                obj['maskedPan'] = ApiClient.convertToType(data['maskedPan'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('statusReason')) {
                obj['statusReason'] = ApiClient.convertToType(data['statusReason'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Card</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Card</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['emailAddress'] && !(typeof data['emailAddress'] === 'string' || data['emailAddress'] instanceof String)) {
            throw new Error("Expected the field `emailAddress` to be a primitive type in the JSON string but got " + data['emailAddress']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['maskedPan'] && !(typeof data['maskedPan'] === 'string' || data['maskedPan'] instanceof String)) {
            throw new Error("Expected the field `maskedPan` to be a primitive type in the JSON string but got " + data['maskedPan']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['statusReason'] && !(typeof data['statusReason'] === 'string' || data['statusReason'] instanceof String)) {
            throw new Error("Expected the field `statusReason` to be a primitive type in the JSON string but got " + data['statusReason']);
        }

        return true;
    }


}



/**
 * Whether the card is blocked or not
 * @member {Boolean} blocked
 */
Card.prototype['blocked'] = undefined;

/**
 * card id assigned by fire.com
 * @member {Number} cardId
 */
Card.prototype['cardId'] = undefined;

/**
 * The date-time the card was created
 * @member {Date} dateCreated
 */
Card.prototype['dateCreated'] = undefined;

/**
 * card user email address
 * @member {String} emailAddress
 */
Card.prototype['emailAddress'] = undefined;

/**
 * identifier for the eur fire.com account (assigned by fire.com)
 * @member {Number} eurIcan
 */
Card.prototype['eurIcan'] = undefined;

/**
 * card expiry date
 * @member {Date} expiryDate
 */
Card.prototype['expiryDate'] = undefined;

/**
 * card user first name
 * @member {String} firstName
 */
Card.prototype['firstName'] = undefined;

/**
 * identifier for the gbp fire.com account (assigned by fire.com)
 * @member {Number} gbpIcan
 */
Card.prototype['gbpIcan'] = undefined;

/**
 * card user last name
 * @member {String} lastName
 */
Card.prototype['lastName'] = undefined;

/**
 * card number (masked)
 * @member {String} maskedPan
 */
Card.prototype['maskedPan'] = undefined;

/**
 * card provider
 * @member {module:model/Card.ProviderEnum} provider
 */
Card.prototype['provider'] = undefined;

/**
 * card status
 * @member {module:model/Card.StatusEnum} status
 */
Card.prototype['status'] = undefined;

/**
 * reason for card status
 * @member {module:model/Card.StatusReasonEnum} statusReason
 */
Card.prototype['statusReason'] = undefined;

/**
 * card user id assigned by fire.com
 * @member {Number} userId
 */
Card.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>provider</code> property.
 * @enum {String}
 * @readonly
 */
Card['ProviderEnum'] = {

    /**
     * value: "MASTERCARD"
     * @const
     */
    "MASTERCARD": "MASTERCARD"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Card['StatusEnum'] = {

    /**
     * value: "LIVE"
     * @const
     */
    "LIVE": "LIVE",

    /**
     * value: "CREATED_ACTIVE"
     * @const
     */
    "CREATED_ACTIVE": "CREATED_ACTIVE",

    /**
     * value: "CREATED_INACTIVE"
     * @const
     */
    "CREATED_INACTIVE": "CREATED_INACTIVE",

    /**
     * value: "DEACTIVATED"
     * @const
     */
    "DEACTIVATED": "DEACTIVATED"
};


/**
 * Allowed values for the <code>statusReason</code> property.
 * @enum {String}
 * @readonly
 */
Card['StatusReasonEnum'] = {

    /**
     * value: "LOST_CARD"
     * @const
     */
    "LOST_CARD": "LOST_CARD",

    /**
     * value: "STOLEN_CARD"
     * @const
     */
    "STOLEN_CARD": "STOLEN_CARD",

    /**
     * value: "CARD_DESTROYED"
     * @const
     */
    "CARD_DESTROYED": "CARD_DESTROYED"
};



export default Card;

