/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FxTrade model module.
 * @module model/FxTrade
 * @version 1.0
 */
class FxTrade {
    /**
     * Constructs a new <code>FxTrade</code>.
     * Details of the FX trade (if applicable)
     * @alias module:model/FxTrade
     */
    constructor() { 
        
        FxTrade.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FxTrade</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FxTrade} obj Optional instance to populate.
     * @return {module:model/FxTrade} The populated <code>FxTrade</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FxTrade();

            if (data.hasOwnProperty('buyAmount')) {
                obj['buyAmount'] = ApiClient.convertToType(data['buyAmount'], 'Number');
            }
            if (data.hasOwnProperty('buyCurrency')) {
                obj['buyCurrency'] = ApiClient.convertToType(data['buyCurrency'], 'String');
            }
            if (data.hasOwnProperty('fixedSide')) {
                obj['fixedSide'] = ApiClient.convertToType(data['fixedSide'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('rate4d')) {
                obj['rate4d'] = ApiClient.convertToType(data['rate4d'], 'Number');
            }
            if (data.hasOwnProperty('sellAmount')) {
                obj['sellAmount'] = ApiClient.convertToType(data['sellAmount'], 'Number');
            }
            if (data.hasOwnProperty('sellCurrency')) {
                obj['sellCurrency'] = ApiClient.convertToType(data['sellCurrency'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FxTrade</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FxTrade</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['buyCurrency'] && !(typeof data['buyCurrency'] === 'string' || data['buyCurrency'] instanceof String)) {
            throw new Error("Expected the field `buyCurrency` to be a primitive type in the JSON string but got " + data['buyCurrency']);
        }
        // ensure the json data is a string
        if (data['fixedSide'] && !(typeof data['fixedSide'] === 'string' || data['fixedSide'] instanceof String)) {
            throw new Error("Expected the field `fixedSide` to be a primitive type in the JSON string but got " + data['fixedSide']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        // ensure the json data is a string
        if (data['sellCurrency'] && !(typeof data['sellCurrency'] === 'string' || data['sellCurrency'] instanceof String)) {
            throw new Error("Expected the field `sellCurrency` to be a primitive type in the JSON string but got " + data['sellCurrency']);
        }

        return true;
    }


}



/**
 * amount of buyCurrency being bought
 * @member {Number} buyAmount
 */
FxTrade.prototype['buyAmount'] = undefined;

/**
 * currency which is being bought
 * @member {String} buyCurrency
 */
FxTrade.prototype['buyCurrency'] = undefined;

/**
 * type of trade - BUY or SELL
 * @member {String} fixedSide
 */
FxTrade.prototype['fixedSide'] = undefined;

/**
 * The FX provider used to make the trade.
 * @member {String} provider
 */
FxTrade.prototype['provider'] = undefined;

/**
 * exchange rate
 * @member {Number} rate4d
 */
FxTrade.prototype['rate4d'] = undefined;

/**
 * amount of sellCurrency being sold
 * @member {Number} sellAmount
 */
FxTrade.prototype['sellAmount'] = undefined;

/**
 * currency which is being sold
 * @member {String} sellCurrency
 */
FxTrade.prototype['sellCurrency'] = undefined;






export default FxTrade;

