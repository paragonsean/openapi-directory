/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RelatedPartyCardPayment from './RelatedPartyCardPayment';
import RelatedPartyCardPaymentCardMerchant from './RelatedPartyCardPaymentCardMerchant';
import RelatedPartyExternalAccount from './RelatedPartyExternalAccount';
import RelatedPartyFireAccount from './RelatedPartyFireAccount';
import RelatedPartyPayee from './RelatedPartyPayee';
import RelatedPartyPayeeAccount from './RelatedPartyPayeeAccount';

/**
 * The RelatedParty model module.
 * @module model/RelatedParty
 * @version 1.0
 */
class RelatedParty {
    /**
     * Constructs a new <code>RelatedParty</code>.
     * Details of the related third party involved in the transaction.
     * @alias module:model/RelatedParty
     * @param {(module:model/RelatedPartyCardPayment|module:model/RelatedPartyExternalAccount|module:model/RelatedPartyFireAccount|module:model/RelatedPartyPayee)} instance The actual instance to initialize RelatedParty.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "RelatedPartyFireAccount") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RelatedPartyFireAccount.validateJSON(instance); // throw an exception if no match
                // create RelatedPartyFireAccount from JS object
                this.actualInstance = RelatedPartyFireAccount.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RelatedPartyFireAccount
            errorMessages.push("Failed to construct RelatedPartyFireAccount: " + err)
        }

        try {
            if (typeof instance === "RelatedPartyExternalAccount") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RelatedPartyExternalAccount.validateJSON(instance); // throw an exception if no match
                // create RelatedPartyExternalAccount from JS object
                this.actualInstance = RelatedPartyExternalAccount.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RelatedPartyExternalAccount
            errorMessages.push("Failed to construct RelatedPartyExternalAccount: " + err)
        }

        try {
            if (typeof instance === "RelatedPartyPayee") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RelatedPartyPayee.validateJSON(instance); // throw an exception if no match
                // create RelatedPartyPayee from JS object
                this.actualInstance = RelatedPartyPayee.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RelatedPartyPayee
            errorMessages.push("Failed to construct RelatedPartyPayee: " + err)
        }

        try {
            if (typeof instance === "RelatedPartyCardPayment") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RelatedPartyCardPayment.validateJSON(instance); // throw an exception if no match
                // create RelatedPartyCardPayment from JS object
                this.actualInstance = RelatedPartyCardPayment.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RelatedPartyCardPayment
            errorMessages.push("Failed to construct RelatedPartyCardPayment: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `RelatedParty` with oneOf schemas RelatedPartyCardPayment, RelatedPartyExternalAccount, RelatedPartyFireAccount, RelatedPartyPayee. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `RelatedParty` with oneOf schemas RelatedPartyCardPayment, RelatedPartyExternalAccount, RelatedPartyFireAccount, RelatedPartyPayee. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>RelatedParty</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RelatedParty} obj Optional instance to populate.
     * @return {module:model/RelatedParty} The populated <code>RelatedParty</code> instance.
     */
    static constructFromObject(data, obj) {
        return new RelatedParty(data);
    }

    /**
     * Gets the actual instance, which can be <code>RelatedPartyCardPayment</code>, <code>RelatedPartyExternalAccount</code>, <code>RelatedPartyFireAccount</code>, <code>RelatedPartyPayee</code>.
     * @return {(module:model/RelatedPartyCardPayment|module:model/RelatedPartyExternalAccount|module:model/RelatedPartyFireAccount|module:model/RelatedPartyPayee)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>RelatedPartyCardPayment</code>, <code>RelatedPartyExternalAccount</code>, <code>RelatedPartyFireAccount</code>, <code>RelatedPartyPayee</code>.
     * @param {(module:model/RelatedPartyCardPayment|module:model/RelatedPartyExternalAccount|module:model/RelatedPartyFireAccount|module:model/RelatedPartyPayee)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = RelatedParty.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of RelatedParty from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/RelatedParty} An instance of RelatedParty.
     */
    static fromJSON = function(json_string){
        return RelatedParty.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/RelatedPartyPayeeAccount} account
 */
RelatedParty.prototype['account'] = undefined;

/**
 * @member {module:model/RelatedParty.TypeEnum} type
 */
RelatedParty.prototype['type'] = undefined;

/**
 * @member {module:model/RelatedPartyCardPaymentCardMerchant} cardMerchant
 */
RelatedParty.prototype['cardMerchant'] = undefined;


RelatedParty.OneOf = ["RelatedPartyCardPayment", "RelatedPartyExternalAccount", "RelatedPartyFireAccount", "RelatedPartyPayee"];

export default RelatedParty;

