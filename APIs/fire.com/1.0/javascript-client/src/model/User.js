/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MobileApplication from './MobileApplication';

/**
 * The User model module.
 * @module model/User
 * @version 1.0
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('emailAddress')) {
                obj['emailAddress'] = ApiClient.convertToType(data['emailAddress'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('lastlogin')) {
                obj['lastlogin'] = ApiClient.convertToType(data['lastlogin'], 'String');
            }
            if (data.hasOwnProperty('mobileApplicationDetails')) {
                obj['mobileApplicationDetails'] = MobileApplication.constructFromObject(data['mobileApplicationDetails']);
            }
            if (data.hasOwnProperty('mobileNumber')) {
                obj['mobileNumber'] = ApiClient.convertToType(data['mobileNumber'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('userCvl')) {
                obj['userCvl'] = ApiClient.convertToType(data['userCvl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['emailAddress'] && !(typeof data['emailAddress'] === 'string' || data['emailAddress'] instanceof String)) {
            throw new Error("Expected the field `emailAddress` to be a primitive type in the JSON string but got " + data['emailAddress']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['lastlogin'] && !(typeof data['lastlogin'] === 'string' || data['lastlogin'] instanceof String)) {
            throw new Error("Expected the field `lastlogin` to be a primitive type in the JSON string but got " + data['lastlogin']);
        }
        // validate the optional field `mobileApplicationDetails`
        if (data['mobileApplicationDetails']) { // data not null
          MobileApplication.validateJSON(data['mobileApplicationDetails']);
        }
        // ensure the json data is a string
        if (data['mobileNumber'] && !(typeof data['mobileNumber'] === 'string' || data['mobileNumber'] instanceof String)) {
            throw new Error("Expected the field `mobileNumber` to be a primitive type in the JSON string but got " + data['mobileNumber']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['userCvl'] && !(typeof data['userCvl'] === 'string' || data['userCvl'] instanceof String)) {
            throw new Error("Expected the field `userCvl` to be a primitive type in the JSON string but got " + data['userCvl']);
        }

        return true;
    }


}



/**
 * email address for user
 * @member {String} emailAddress
 */
User.prototype['emailAddress'] = undefined;

/**
 * User first name
 * @member {String} firstName
 */
User.prototype['firstName'] = undefined;

/**
 * The User ID for this User
 * @member {Number} id
 */
User.prototype['id'] = undefined;

/**
 * User second name
 * @member {String} lastName
 */
User.prototype['lastName'] = undefined;

/**
 * Timestamp on when user last logged in.
 * @member {String} lastlogin
 */
User.prototype['lastlogin'] = undefined;

/**
 * @member {module:model/MobileApplication} mobileApplicationDetails
 */
User.prototype['mobileApplicationDetails'] = undefined;

/**
 * User mobile number
 * @member {String} mobileNumber
 */
User.prototype['mobileNumber'] = undefined;

/**
 * User role
 * @member {module:model/User.RoleEnum} role
 */
User.prototype['role'] = undefined;

/**
 * Status of user
 * @member {module:model/User.StatusEnum} status
 */
User.prototype['status'] = undefined;

/**
 * Users Cvl type ID (shows up when status is LIVE)
 * @member {String} userCvl
 */
User.prototype['userCvl'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
User['RoleEnum'] = {

    /**
     * value: "ADMIN"
     * @const
     */
    "ADMIN": "ADMIN",

    /**
     * value: "FULL_USER"
     * @const
     */
    "FULL_USER": "FULL_USER",

    /**
     * value: "READ_ONLY"
     * @const
     */
    "READ_ONLY": "READ_ONLY",

    /**
     * value: "CARD_ONLY"
     * @const
     */
    "CARD_ONLY": "CARD_ONLY"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
User['StatusEnum'] = {

    /**
     * value: "LIVE"
     * @const
     */
    "LIVE": "LIVE",

    /**
     * value: "CLOSED"
     * @const
     */
    "CLOSED": "CLOSED",

    /**
     * value: "FROZEN"
     * @const
     */
    "FROZEN": "FROZEN",

    /**
     * value: "INVITE_SENT"
     * @const
     */
    "INVITE_SENT": "INVITE_SENT",

    /**
     * value: "SMS_CODE_SENT"
     * @const
     */
    "SMS_CODE_SENT": "SMS_CODE_SENT"
};



export default User;

