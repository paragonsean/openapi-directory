/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BatchItemResult from './BatchItemResult';

/**
 * The BatchItem model module.
 * @module model/BatchItem
 * @version 1.0
 */
class BatchItem {
    /**
     * Constructs a new <code>BatchItem</code>.
     * @alias module:model/BatchItem
     */
    constructor() { 
        
        BatchItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BatchItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BatchItem} obj Optional instance to populate.
     * @return {module:model/BatchItem} The populated <code>BatchItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BatchItem();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('amountAfterCharges')) {
                obj['amountAfterCharges'] = ApiClient.convertToType(data['amountAfterCharges'], 'Number');
            }
            if (data.hasOwnProperty('batchItemUuid')) {
                obj['batchItemUuid'] = ApiClient.convertToType(data['batchItemUuid'], 'String');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Date');
            }
            if (data.hasOwnProperty('feeAmount')) {
                obj['feeAmount'] = ApiClient.convertToType(data['feeAmount'], 'Number');
            }
            if (data.hasOwnProperty('icanFrom')) {
                obj['icanFrom'] = ApiClient.convertToType(data['icanFrom'], 'Number');
            }
            if (data.hasOwnProperty('icanTo')) {
                obj['icanTo'] = ApiClient.convertToType(data['icanTo'], 'Number');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('ref')) {
                obj['ref'] = ApiClient.convertToType(data['ref'], 'String');
            }
            if (data.hasOwnProperty('refId')) {
                obj['refId'] = ApiClient.convertToType(data['refId'], 'Number');
            }
            if (data.hasOwnProperty('result')) {
                obj['result'] = BatchItemResult.constructFromObject(data['result']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('taxAmount')) {
                obj['taxAmount'] = ApiClient.convertToType(data['taxAmount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BatchItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BatchItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['batchItemUuid'] && !(typeof data['batchItemUuid'] === 'string' || data['batchItemUuid'] instanceof String)) {
            throw new Error("Expected the field `batchItemUuid` to be a primitive type in the JSON string but got " + data['batchItemUuid']);
        }
        // ensure the json data is a string
        if (data['ref'] && !(typeof data['ref'] === 'string' || data['ref'] instanceof String)) {
            throw new Error("Expected the field `ref` to be a primitive type in the JSON string but got " + data['ref']);
        }
        // validate the optional field `result`
        if (data['result']) { // data not null
          BatchItemResult.validateJSON(data['result']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The amount of funds to send. In cent or pence
 * @member {Number} amount
 */
BatchItem.prototype['amount'] = undefined;

/**
 * The amount of the transfer after fees and taxes. in pence or cent.
 * @member {Number} amountAfterCharges
 */
BatchItem.prototype['amountAfterCharges'] = undefined;

/**
 * A UUID for this item.
 * @member {String} batchItemUuid
 */
BatchItem.prototype['batchItemUuid'] = undefined;

/**
 * The datestamp the batch was created - ISO format - e.g. 2018-04-04T00:53:21.910Z
 * @member {Date} dateCreated
 */
BatchItem.prototype['dateCreated'] = undefined;

/**
 * The fee charged by fire.com for the payment. In pence or cent.
 * @member {Number} feeAmount
 */
BatchItem.prototype['feeAmount'] = undefined;

/**
 * The Fire account ID of the source account.
 * @member {Number} icanFrom
 */
BatchItem.prototype['icanFrom'] = undefined;

/**
 * The Fire account ID for the fire.com account the funds are sent to.
 * @member {Number} icanTo
 */
BatchItem.prototype['icanTo'] = undefined;

/**
 * The datestamp of the last action on this batch - ISO format - e.g. 2018-04-04T10:48:53.540Z
 * @member {Date} lastUpdated
 */
BatchItem.prototype['lastUpdated'] = undefined;

/**
 * The reference on the transaction.
 * @member {String} ref
 */
BatchItem.prototype['ref'] = undefined;

/**
 * The ID of the resulting payment in your account. Can be used to retrieve the transaction using the https://api.fire.com/business/v1/accounts/{accountId}/transactions/{refId} endpoint.
 * @member {Number} refId
 */
BatchItem.prototype['refId'] = undefined;

/**
 * @member {module:model/BatchItemResult} result
 */
BatchItem.prototype['result'] = undefined;

/**
 * status of the batch if internal trasnfer
 * @member {module:model/BatchItem.StatusEnum} status
 */
BatchItem.prototype['status'] = undefined;

/**
 * Any taxes/duty collected by fire.com for this payments (e.g. stamp duty etc). In pence or cent.
 * @member {Number} taxAmount
 */
BatchItem.prototype['taxAmount'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
BatchItem['StatusEnum'] = {

    /**
     * value: "SUBMITTED"
     * @const
     */
    "SUBMITTED": "SUBMITTED",

    /**
     * value: "REMOVED"
     * @const
     */
    "REMOVED": "REMOVED",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default BatchItem;

