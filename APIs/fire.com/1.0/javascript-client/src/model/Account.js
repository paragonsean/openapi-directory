/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Currency from './Currency';

/**
 * The Account model module.
 * @module model/Account
 * @version 1.0
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * @alias module:model/Account
     */
    constructor() { 
        
        Account.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'Number');
            }
            if (data.hasOwnProperty('cbic')) {
                obj['cbic'] = ApiClient.convertToType(data['cbic'], 'String');
            }
            if (data.hasOwnProperty('ccan')) {
                obj['ccan'] = ApiClient.convertToType(data['ccan'], 'String');
            }
            if (data.hasOwnProperty('ciban')) {
                obj['ciban'] = ApiClient.convertToType(data['ciban'], 'String');
            }
            if (data.hasOwnProperty('cnsc')) {
                obj['cnsc'] = ApiClient.convertToType(data['cnsc'], 'String');
            }
            if (data.hasOwnProperty('colour')) {
                obj['colour'] = ApiClient.convertToType(data['colour'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = Currency.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('defaultAccount')) {
                obj['defaultAccount'] = ApiClient.convertToType(data['defaultAccount'], 'Boolean');
            }
            if (data.hasOwnProperty('directDebitsAllowed')) {
                obj['directDebitsAllowed'] = ApiClient.convertToType(data['directDebitsAllowed'], 'Boolean');
            }
            if (data.hasOwnProperty('fopOnly')) {
                obj['fopOnly'] = ApiClient.convertToType(data['fopOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('ican')) {
                obj['ican'] = ApiClient.convertToType(data['ican'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cbic'] && !(typeof data['cbic'] === 'string' || data['cbic'] instanceof String)) {
            throw new Error("Expected the field `cbic` to be a primitive type in the JSON string but got " + data['cbic']);
        }
        // ensure the json data is a string
        if (data['ccan'] && !(typeof data['ccan'] === 'string' || data['ccan'] instanceof String)) {
            throw new Error("Expected the field `ccan` to be a primitive type in the JSON string but got " + data['ccan']);
        }
        // ensure the json data is a string
        if (data['ciban'] && !(typeof data['ciban'] === 'string' || data['ciban'] instanceof String)) {
            throw new Error("Expected the field `ciban` to be a primitive type in the JSON string but got " + data['ciban']);
        }
        // ensure the json data is a string
        if (data['cnsc'] && !(typeof data['cnsc'] === 'string' || data['cnsc'] instanceof String)) {
            throw new Error("Expected the field `cnsc` to be a primitive type in the JSON string but got " + data['cnsc']);
        }
        // ensure the json data is a string
        if (data['colour'] && !(typeof data['colour'] === 'string' || data['colour'] instanceof String)) {
            throw new Error("Expected the field `colour` to be a primitive type in the JSON string but got " + data['colour']);
        }
        // validate the optional field `currency`
        if (data['currency']) { // data not null
          Currency.validateJSON(data['currency']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * the balance of the account (in minor currency units - pence, cent etc. 434050 == 4,340.50 GBP for a GBP account).
 * @member {Number} balance
 */
Account.prototype['balance'] = undefined;

/**
 * the BIC of the account (provided if currency is EUR).
 * @member {String} cbic
 */
Account.prototype['cbic'] = undefined;

/**
 * the Account Number of the account.
 * @member {String} ccan
 */
Account.prototype['ccan'] = undefined;

/**
 * the IBAN of the account (provided if currency is EUR).
 * @member {String} ciban
 */
Account.prototype['ciban'] = undefined;

/**
 * the Sort Code of the account.
 * @member {String} cnsc
 */
Account.prototype['cnsc'] = undefined;

/**
 * Internal Use
 * @member {String} colour
 */
Account.prototype['colour'] = undefined;

/**
 * @member {module:model/Currency} currency
 */
Account.prototype['currency'] = undefined;

/**
 * true if this is the default account for this currency. This will be the account that general fees are taken from (as opposed to per-transaction fees).
 * @member {Boolean} defaultAccount
 */
Account.prototype['defaultAccount'] = undefined;

/**
 * Whether or not direct debits can be set up on this account.
 * @member {Boolean} directDebitsAllowed
 */
Account.prototype['directDebitsAllowed'] = undefined;

/**
 * Indicates that this account is for collecting Fire Open Payments only. All other payments to this account will be returned.
 * @member {Boolean} fopOnly
 */
Account.prototype['fopOnly'] = undefined;

/**
 * identifier for the fire.com account (assigned by fire.com)
 * @member {Number} ican
 */
Account.prototype['ican'] = undefined;

/**
 * the name the user gives to the account to help them identify it.
 * @member {String} name
 */
Account.prototype['name'] = undefined;

/**
 * Live accounts can be used as normal. Migrated accounts were used before Brexit and are read-only.
 * @member {module:model/Account.StatusEnum} status
 */
Account.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Account['StatusEnum'] = {

    /**
     * value: "LIVE"
     * @const
     */
    "LIVE": "LIVE",

    /**
     * value: "BREXIT_MIGRATED"
     * @const
     */
    "BREXIT_MIGRATED": "BREXIT_MIGRATED"
};



export default Account;

