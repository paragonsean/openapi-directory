/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MobileApplication model module.
 * @module model/MobileApplication
 * @version 1.0
 */
class MobileApplication {
    /**
     * Constructs a new <code>MobileApplication</code>.
     * @alias module:model/MobileApplication
     */
    constructor() { 
        
        MobileApplication.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MobileApplication</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MobileApplication} obj Optional instance to populate.
     * @return {module:model/MobileApplication} The populated <code>MobileApplication</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MobileApplication();

            if (data.hasOwnProperty('OS')) {
                obj['OS'] = ApiClient.convertToType(data['OS'], 'String');
            }
            if (data.hasOwnProperty('businessUserId')) {
                obj['businessUserId'] = ApiClient.convertToType(data['businessUserId'], 'Number');
            }
            if (data.hasOwnProperty('clientID')) {
                obj['clientID'] = ApiClient.convertToType(data['clientID'], 'String');
            }
            if (data.hasOwnProperty('deviceName')) {
                obj['deviceName'] = ApiClient.convertToType(data['deviceName'], 'String');
            }
            if (data.hasOwnProperty('deviceOSVersion')) {
                obj['deviceOSVersion'] = ApiClient.convertToType(data['deviceOSVersion'], 'String');
            }
            if (data.hasOwnProperty('mobileApplicationId')) {
                obj['mobileApplicationId'] = ApiClient.convertToType(data['mobileApplicationId'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MobileApplication</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MobileApplication</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['OS'] && !(typeof data['OS'] === 'string' || data['OS'] instanceof String)) {
            throw new Error("Expected the field `OS` to be a primitive type in the JSON string but got " + data['OS']);
        }
        // ensure the json data is a string
        if (data['clientID'] && !(typeof data['clientID'] === 'string' || data['clientID'] instanceof String)) {
            throw new Error("Expected the field `clientID` to be a primitive type in the JSON string but got " + data['clientID']);
        }
        // ensure the json data is a string
        if (data['deviceName'] && !(typeof data['deviceName'] === 'string' || data['deviceName'] instanceof String)) {
            throw new Error("Expected the field `deviceName` to be a primitive type in the JSON string but got " + data['deviceName']);
        }
        // ensure the json data is a string
        if (data['deviceOSVersion'] && !(typeof data['deviceOSVersion'] === 'string' || data['deviceOSVersion'] instanceof String)) {
            throw new Error("Expected the field `deviceOSVersion` to be a primitive type in the JSON string but got " + data['deviceOSVersion']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Operating system of device.
 * @member {module:model/MobileApplication.OSEnum} OS
 */
MobileApplication.prototype['OS'] = undefined;

/**
 * Business user ID
 * @member {Number} businessUserId
 */
MobileApplication.prototype['businessUserId'] = undefined;

/**
 * Client ID of user.
 * @member {String} clientID
 */
MobileApplication.prototype['clientID'] = undefined;

/**
 * type of device.
 * @member {module:model/MobileApplication.DeviceNameEnum} deviceName
 */
MobileApplication.prototype['deviceName'] = undefined;

/**
 * OS version for device.
 * @member {String} deviceOSVersion
 */
MobileApplication.prototype['deviceOSVersion'] = undefined;

/**
 * Mobile application id for user.
 * @member {Number} mobileApplicationId
 */
MobileApplication.prototype['mobileApplicationId'] = undefined;

/**
 * Status of user
 * @member {module:model/MobileApplication.StatusEnum} status
 */
MobileApplication.prototype['status'] = undefined;





/**
 * Allowed values for the <code>OS</code> property.
 * @enum {String}
 * @readonly
 */
MobileApplication['OSEnum'] = {

    /**
     * value: "Android"
     * @const
     */
    "Android": "Android",

    /**
     * value: "IOS"
     * @const
     */
    "IOS": "IOS",

    /**
     * value: "OTHER"
     * @const
     */
    "OTHER": "OTHER"
};


/**
 * Allowed values for the <code>deviceName</code> property.
 * @enum {String}
 * @readonly
 */
MobileApplication['DeviceNameEnum'] = {

    /**
     * value: "iPhone"
     * @const
     */
    "iPhone": "iPhone",

    /**
     * value: "Android"
     * @const
     */
    "Android": "Android",

    /**
     * value: "Other"
     * @const
     */
    "Other": "Other"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
MobileApplication['StatusEnum'] = {

    /**
     * value: "LIVE"
     * @const
     */
    "LIVE": "LIVE",

    /**
     * value: "CLOSED"
     * @const
     */
    "CLOSED": "CLOSED",

    /**
     * value: "LOCKED"
     * @const
     */
    "LOCKED": "LOCKED",

    /**
     * value: "SMS_SENT"
     * @const
     */
    "SMS_SENT": "SMS_SENT"
};



export default MobileApplication;

