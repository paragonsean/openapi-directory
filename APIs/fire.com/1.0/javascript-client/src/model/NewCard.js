/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NewCard model module.
 * @module model/NewCard
 * @version 1.0
 */
class NewCard {
    /**
     * Constructs a new <code>NewCard</code>.
     * @alias module:model/NewCard
     */
    constructor() { 
        
        NewCard.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NewCard</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NewCard} obj Optional instance to populate.
     * @return {module:model/NewCard} The populated <code>NewCard</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NewCard();

            if (data.hasOwnProperty('acceptFeesAndCharges')) {
                obj['acceptFeesAndCharges'] = ApiClient.convertToType(data['acceptFeesAndCharges'], 'Boolean');
            }
            if (data.hasOwnProperty('addressType')) {
                obj['addressType'] = ApiClient.convertToType(data['addressType'], 'String');
            }
            if (data.hasOwnProperty('cardPin')) {
                obj['cardPin'] = ApiClient.convertToType(data['cardPin'], 'String');
            }
            if (data.hasOwnProperty('eurIcan')) {
                obj['eurIcan'] = ApiClient.convertToType(data['eurIcan'], 'Number');
            }
            if (data.hasOwnProperty('gbpIcan')) {
                obj['gbpIcan'] = ApiClient.convertToType(data['gbpIcan'], 'Number');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NewCard</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NewCard</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['addressType'] && !(typeof data['addressType'] === 'string' || data['addressType'] instanceof String)) {
            throw new Error("Expected the field `addressType` to be a primitive type in the JSON string but got " + data['addressType']);
        }
        // ensure the json data is a string
        if (data['cardPin'] && !(typeof data['cardPin'] === 'string' || data['cardPin'] instanceof String)) {
            throw new Error("Expected the field `cardPin` to be a primitive type in the JSON string but got " + data['cardPin']);
        }

        return true;
    }


}



/**
 * @member {Boolean} acceptFeesAndCharges
 */
NewCard.prototype['acceptFeesAndCharges'] = undefined;

/**
 * @member {module:model/NewCard.AddressTypeEnum} addressType
 */
NewCard.prototype['addressType'] = undefined;

/**
 * @member {String} cardPin
 */
NewCard.prototype['cardPin'] = undefined;

/**
 * @member {Number} eurIcan
 */
NewCard.prototype['eurIcan'] = undefined;

/**
 * @member {Number} gbpIcan
 */
NewCard.prototype['gbpIcan'] = undefined;

/**
 * @member {Number} userId
 */
NewCard.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>addressType</code> property.
 * @enum {String}
 * @readonly
 */
NewCard['AddressTypeEnum'] = {

    /**
     * value: "HOME"
     * @const
     */
    "HOME": "HOME",

    /**
     * value: "BUSINESS"
     * @const
     */
    "BUSINESS": "BUSINESS"
};



export default NewCard;

