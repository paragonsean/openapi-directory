/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OrderDetails model module.
 * @module model/OrderDetails
 * @version 1.0
 */
class OrderDetails {
    /**
     * Constructs a new <code>OrderDetails</code>.
     * @alias module:model/OrderDetails
     */
    constructor() { 
        
        OrderDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrderDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrderDetails} obj Optional instance to populate.
     * @return {module:model/OrderDetails} The populated <code>OrderDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrderDetails();

            if (data.hasOwnProperty('comment1')) {
                obj['comment1'] = ApiClient.convertToType(data['comment1'], 'String');
            }
            if (data.hasOwnProperty('comment2')) {
                obj['comment2'] = ApiClient.convertToType(data['comment2'], 'String');
            }
            if (data.hasOwnProperty('customerNumber')) {
                obj['customerNumber'] = ApiClient.convertToType(data['customerNumber'], 'String');
            }
            if (data.hasOwnProperty('deliveryAddressLine1')) {
                obj['deliveryAddressLine1'] = ApiClient.convertToType(data['deliveryAddressLine1'], 'String');
            }
            if (data.hasOwnProperty('deliveryAddressLine2')) {
                obj['deliveryAddressLine2'] = ApiClient.convertToType(data['deliveryAddressLine2'], 'String');
            }
            if (data.hasOwnProperty('deliveryCity')) {
                obj['deliveryCity'] = ApiClient.convertToType(data['deliveryCity'], 'String');
            }
            if (data.hasOwnProperty('deliveryCountry')) {
                obj['deliveryCountry'] = ApiClient.convertToType(data['deliveryCountry'], 'String');
            }
            if (data.hasOwnProperty('deliveryPostCode')) {
                obj['deliveryPostCode'] = ApiClient.convertToType(data['deliveryPostCode'], 'String');
            }
            if (data.hasOwnProperty('merchantCustomerIdentification')) {
                obj['merchantCustomerIdentification'] = ApiClient.convertToType(data['merchantCustomerIdentification'], 'String');
            }
            if (data.hasOwnProperty('merchantNumber')) {
                obj['merchantNumber'] = ApiClient.convertToType(data['merchantNumber'], 'String');
            }
            if (data.hasOwnProperty('orderId')) {
                obj['orderId'] = ApiClient.convertToType(data['orderId'], 'String');
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
            if (data.hasOwnProperty('variableReference')) {
                obj['variableReference'] = ApiClient.convertToType(data['variableReference'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrderDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrderDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['comment1'] && !(typeof data['comment1'] === 'string' || data['comment1'] instanceof String)) {
            throw new Error("Expected the field `comment1` to be a primitive type in the JSON string but got " + data['comment1']);
        }
        // ensure the json data is a string
        if (data['comment2'] && !(typeof data['comment2'] === 'string' || data['comment2'] instanceof String)) {
            throw new Error("Expected the field `comment2` to be a primitive type in the JSON string but got " + data['comment2']);
        }
        // ensure the json data is a string
        if (data['customerNumber'] && !(typeof data['customerNumber'] === 'string' || data['customerNumber'] instanceof String)) {
            throw new Error("Expected the field `customerNumber` to be a primitive type in the JSON string but got " + data['customerNumber']);
        }
        // ensure the json data is a string
        if (data['deliveryAddressLine1'] && !(typeof data['deliveryAddressLine1'] === 'string' || data['deliveryAddressLine1'] instanceof String)) {
            throw new Error("Expected the field `deliveryAddressLine1` to be a primitive type in the JSON string but got " + data['deliveryAddressLine1']);
        }
        // ensure the json data is a string
        if (data['deliveryAddressLine2'] && !(typeof data['deliveryAddressLine2'] === 'string' || data['deliveryAddressLine2'] instanceof String)) {
            throw new Error("Expected the field `deliveryAddressLine2` to be a primitive type in the JSON string but got " + data['deliveryAddressLine2']);
        }
        // ensure the json data is a string
        if (data['deliveryCity'] && !(typeof data['deliveryCity'] === 'string' || data['deliveryCity'] instanceof String)) {
            throw new Error("Expected the field `deliveryCity` to be a primitive type in the JSON string but got " + data['deliveryCity']);
        }
        // ensure the json data is a string
        if (data['deliveryCountry'] && !(typeof data['deliveryCountry'] === 'string' || data['deliveryCountry'] instanceof String)) {
            throw new Error("Expected the field `deliveryCountry` to be a primitive type in the JSON string but got " + data['deliveryCountry']);
        }
        // ensure the json data is a string
        if (data['deliveryPostCode'] && !(typeof data['deliveryPostCode'] === 'string' || data['deliveryPostCode'] instanceof String)) {
            throw new Error("Expected the field `deliveryPostCode` to be a primitive type in the JSON string but got " + data['deliveryPostCode']);
        }
        // ensure the json data is a string
        if (data['merchantCustomerIdentification'] && !(typeof data['merchantCustomerIdentification'] === 'string' || data['merchantCustomerIdentification'] instanceof String)) {
            throw new Error("Expected the field `merchantCustomerIdentification` to be a primitive type in the JSON string but got " + data['merchantCustomerIdentification']);
        }
        // ensure the json data is a string
        if (data['merchantNumber'] && !(typeof data['merchantNumber'] === 'string' || data['merchantNumber'] instanceof String)) {
            throw new Error("Expected the field `merchantNumber` to be a primitive type in the JSON string but got " + data['merchantNumber']);
        }
        // ensure the json data is a string
        if (data['orderId'] && !(typeof data['orderId'] === 'string' || data['orderId'] instanceof String)) {
            throw new Error("Expected the field `orderId` to be a primitive type in the JSON string but got " + data['orderId']);
        }
        // ensure the json data is a string
        if (data['productId'] && !(typeof data['productId'] === 'string' || data['productId'] instanceof String)) {
            throw new Error("Expected the field `productId` to be a primitive type in the JSON string but got " + data['productId']);
        }
        // ensure the json data is a string
        if (data['variableReference'] && !(typeof data['variableReference'] === 'string' || data['variableReference'] instanceof String)) {
            throw new Error("Expected the field `variableReference` to be a primitive type in the JSON string but got " + data['variableReference']);
        }

        return true;
    }


}



/**
 * This is your own comment for the transaction.
 * @member {String} comment1
 */
OrderDetails.prototype['comment1'] = undefined;

/**
 * This is your own comment for the transaction.
 * @member {String} comment2
 */
OrderDetails.prototype['comment2'] = undefined;

/**
 * Use this field to store a customer number for the transaction (for example).
 * @member {String} customerNumber
 */
OrderDetails.prototype['customerNumber'] = undefined;

/**
 * The first line of the delivery address.
 * @member {String} deliveryAddressLine1
 */
OrderDetails.prototype['deliveryAddressLine1'] = undefined;

/**
 * The second line of the delivery address.
 * @member {String} deliveryAddressLine2
 */
OrderDetails.prototype['deliveryAddressLine2'] = undefined;

/**
 * Delivery address city
 * @member {String} deliveryCity
 */
OrderDetails.prototype['deliveryCity'] = undefined;

/**
 * 2-digit code for the country
 * @member {String} deliveryCountry
 */
OrderDetails.prototype['deliveryCountry'] = undefined;

/**
 * Delivery address post code
 * @member {String} deliveryPostCode
 */
OrderDetails.prototype['deliveryPostCode'] = undefined;

/**
 * This is a reference you use to uniquely identify each of your customers.
 * @member {String} merchantCustomerIdentification
 */
OrderDetails.prototype['merchantCustomerIdentification'] = undefined;

/**
 * Your Merchant Number (if applicable).
 * @member {String} merchantNumber
 */
OrderDetails.prototype['merchantNumber'] = undefined;

/**
 * Use this field to store the order id for the transaction. The Order Id cannot be set unless the `maxNumberPayments` is 1.
 * @member {String} orderId
 */
OrderDetails.prototype['orderId'] = undefined;

/**
 * Use this field to store a product id for the transaction (for example).
 * @member {String} productId
 */
OrderDetails.prototype['productId'] = undefined;

/**
 * Use this field to store any other reference for the transaction (for example, a phone number).
 * @member {String} variableReference
 */
OrderDetails.prototype['variableReference'] = undefined;






export default OrderDetails;

