/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Authentication model module.
 * @module model/Authentication
 * @version 1.0
 */
class Authentication {
    /**
     * Constructs a new <code>Authentication</code>.
     * @alias module:model/Authentication
     */
    constructor() { 
        
        Authentication.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Authentication</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Authentication} obj Optional instance to populate.
     * @return {module:model/Authentication} The populated <code>Authentication</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Authentication();

            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('clientSecret')) {
                obj['clientSecret'] = ApiClient.convertToType(data['clientSecret'], 'String');
            }
            if (data.hasOwnProperty('grantType')) {
                obj['grantType'] = ApiClient.convertToType(data['grantType'], 'String');
            }
            if (data.hasOwnProperty('nonce')) {
                obj['nonce'] = ApiClient.convertToType(data['nonce'], 'Number');
            }
            if (data.hasOwnProperty('refreshToken')) {
                obj['refreshToken'] = ApiClient.convertToType(data['refreshToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Authentication</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Authentication</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['clientSecret'] && !(typeof data['clientSecret'] === 'string' || data['clientSecret'] instanceof String)) {
            throw new Error("Expected the field `clientSecret` to be a primitive type in the JSON string but got " + data['clientSecret']);
        }
        // ensure the json data is a string
        if (data['grantType'] && !(typeof data['grantType'] === 'string' || data['grantType'] instanceof String)) {
            throw new Error("Expected the field `grantType` to be a primitive type in the JSON string but got " + data['grantType']);
        }
        // ensure the json data is a string
        if (data['refreshToken'] && !(typeof data['refreshToken'] === 'string' || data['refreshToken'] instanceof String)) {
            throw new Error("Expected the field `refreshToken` to be a primitive type in the JSON string but got " + data['refreshToken']);
        }

        return true;
    }


}



/**
 * The Client ID for this API Application
 * @member {String} clientId
 */
Authentication.prototype['clientId'] = undefined;

/**
 * The SHA256 hash of the nonce above and the app’s Client Key. The Client Key will only be shown to you when you create the app, so don’t forget to save it somewhere safe. SECRET=( `/bin/echo -n $NONCE$CLIENT_KEY | sha256sum` ).
 * @member {String} clientSecret
 */
Authentication.prototype['clientSecret'] = undefined;

/**
 * Always `AccessToken`. (This will change to `refresh_token` in a future release.)
 * @member {module:model/Authentication.GrantTypeEnum} grantType
 */
Authentication.prototype['grantType'] = undefined;

/**
 * A random non-repeating number used as a salt for the `clientSecret` below. The simplest nonce is a unix time.
 * @member {Number} nonce
 */
Authentication.prototype['nonce'] = undefined;

/**
 * The Refresh Token for this API Application
 * @member {String} refreshToken
 */
Authentication.prototype['refreshToken'] = undefined;





/**
 * Allowed values for the <code>grantType</code> property.
 * @enum {String}
 * @readonly
 */
Authentication['GrantTypeEnum'] = {

    /**
     * value: "AccessToken"
     * @const
     */
    "AccessToken": "AccessToken"
};



export default Authentication;

