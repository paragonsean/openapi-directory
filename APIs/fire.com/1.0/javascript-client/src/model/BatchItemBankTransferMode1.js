/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BatchItemBankTransferMode1 model module.
 * @module model/BatchItemBankTransferMode1
 * @version 1.0
 */
class BatchItemBankTransferMode1 {
    /**
     * Constructs a new <code>BatchItemBankTransferMode1</code>.
     * @alias module:model/BatchItemBankTransferMode1
     */
    constructor() { 
        
        BatchItemBankTransferMode1.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BatchItemBankTransferMode1</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BatchItemBankTransferMode1} obj Optional instance to populate.
     * @return {module:model/BatchItemBankTransferMode1} The populated <code>BatchItemBankTransferMode1</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BatchItemBankTransferMode1();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('icanFrom')) {
                obj['icanFrom'] = ApiClient.convertToType(data['icanFrom'], 'Number');
            }
            if (data.hasOwnProperty('myRef')) {
                obj['myRef'] = ApiClient.convertToType(data['myRef'], 'String');
            }
            if (data.hasOwnProperty('payeeId')) {
                obj['payeeId'] = ApiClient.convertToType(data['payeeId'], 'Number');
            }
            if (data.hasOwnProperty('payeeType')) {
                obj['payeeType'] = ApiClient.convertToType(data['payeeType'], 'String');
            }
            if (data.hasOwnProperty('yourRef')) {
                obj['yourRef'] = ApiClient.convertToType(data['yourRef'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BatchItemBankTransferMode1</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BatchItemBankTransferMode1</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['myRef'] && !(typeof data['myRef'] === 'string' || data['myRef'] instanceof String)) {
            throw new Error("Expected the field `myRef` to be a primitive type in the JSON string but got " + data['myRef']);
        }
        // ensure the json data is a string
        if (data['payeeType'] && !(typeof data['payeeType'] === 'string' || data['payeeType'] instanceof String)) {
            throw new Error("Expected the field `payeeType` to be a primitive type in the JSON string but got " + data['payeeType']);
        }
        // ensure the json data is a string
        if (data['yourRef'] && !(typeof data['yourRef'] === 'string' || data['yourRef'] instanceof String)) {
            throw new Error("Expected the field `yourRef` to be a primitive type in the JSON string but got " + data['yourRef']);
        }

        return true;
    }


}



/**
 * The value of the transaction
 * @member {Number} amount
 */
BatchItemBankTransferMode1.prototype['amount'] = undefined;

/**
 * The Fire account ID for the fire.com account the funds are taken from.
 * @member {Number} icanFrom
 */
BatchItemBankTransferMode1.prototype['icanFrom'] = undefined;

/**
 * The reference on the transaction for your records - not shown to the beneficiary.
 * @member {String} myRef
 */
BatchItemBankTransferMode1.prototype['myRef'] = undefined;

/**
 * The ID of the existing or automatically created payee
 * @member {Number} payeeId
 */
BatchItemBankTransferMode1.prototype['payeeId'] = undefined;

/**
 * Use PAYEE_ID if you are paying existing approved payees (Mode 1).
 * @member {module:model/BatchItemBankTransferMode1.PayeeTypeEnum} payeeType
 */
BatchItemBankTransferMode1.prototype['payeeType'] = undefined;

/**
 * The reference on the transaction - displayed on the beneficiary bank statement.
 * @member {String} yourRef
 */
BatchItemBankTransferMode1.prototype['yourRef'] = undefined;





/**
 * Allowed values for the <code>payeeType</code> property.
 * @enum {String}
 * @readonly
 */
BatchItemBankTransferMode1['PayeeTypeEnum'] = {

    /**
     * value: "PAYEE_ID"
     * @const
     */
    "PAYEE_ID": "PAYEE_ID"
};



export default BatchItemBankTransferMode1;

