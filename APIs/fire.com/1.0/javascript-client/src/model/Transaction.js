/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BatchItemDetails from './BatchItemDetails';
import Currency from './Currency';
import DirectDebitDetails from './DirectDebitDetails';
import FxTrade from './FxTrade';
import ProprietarySchemeDetailsInner from './ProprietarySchemeDetailsInner';
import RelatedCard from './RelatedCard';
import RelatedParty from './RelatedParty';

/**
 * The Transaction model module.
 * @module model/Transaction
 * @version 1.0
 */
class Transaction {
    /**
     * Constructs a new <code>Transaction</code>.
     * @alias module:model/Transaction
     */
    constructor() { 
        
        Transaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transaction} obj Optional instance to populate.
     * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction();

            if (data.hasOwnProperty('amountAfterCharges')) {
                obj['amountAfterCharges'] = ApiClient.convertToType(data['amountAfterCharges'], 'Number');
            }
            if (data.hasOwnProperty('amountBeforeCharges')) {
                obj['amountBeforeCharges'] = ApiClient.convertToType(data['amountBeforeCharges'], 'Number');
            }
            if (data.hasOwnProperty('balance')) {
                obj['balance'] = ApiClient.convertToType(data['balance'], 'Number');
            }
            if (data.hasOwnProperty('batchItemDetails')) {
                obj['batchItemDetails'] = BatchItemDetails.constructFromObject(data['batchItemDetails']);
            }
            if (data.hasOwnProperty('card')) {
                obj['card'] = RelatedCard.constructFromObject(data['card']);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = Currency.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('dateAcknowledged')) {
                obj['dateAcknowledged'] = ApiClient.convertToType(data['dateAcknowledged'], 'Date');
            }
            if (data.hasOwnProperty('directDebitDetails')) {
                obj['directDebitDetails'] = DirectDebitDetails.constructFromObject(data['directDebitDetails']);
            }
            if (data.hasOwnProperty('eventUuid')) {
                obj['eventUuid'] = ApiClient.convertToType(data['eventUuid'], 'String');
            }
            if (data.hasOwnProperty('feeAmount')) {
                obj['feeAmount'] = ApiClient.convertToType(data['feeAmount'], 'Number');
            }
            if (data.hasOwnProperty('fxTradeDetails')) {
                obj['fxTradeDetails'] = FxTrade.constructFromObject(data['fxTradeDetails']);
            }
            if (data.hasOwnProperty('ican')) {
                obj['ican'] = ApiClient.convertToType(data['ican'], 'Number');
            }
            if (data.hasOwnProperty('myRef')) {
                obj['myRef'] = ApiClient.convertToType(data['myRef'], 'String');
            }
            if (data.hasOwnProperty('paymentRequestPublicCode')) {
                obj['paymentRequestPublicCode'] = ApiClient.convertToType(data['paymentRequestPublicCode'], 'String');
            }
            if (data.hasOwnProperty('proprietarySchemeDetails')) {
                obj['proprietarySchemeDetails'] = ApiClient.convertToType(data['proprietarySchemeDetails'], [ProprietarySchemeDetailsInner]);
            }
            if (data.hasOwnProperty('refId')) {
                obj['refId'] = ApiClient.convertToType(data['refId'], 'Number');
            }
            if (data.hasOwnProperty('relatedParty')) {
                obj['relatedParty'] = RelatedParty.constructFromObject(data['relatedParty']);
            }
            if (data.hasOwnProperty('taxAmount')) {
                obj['taxAmount'] = ApiClient.convertToType(data['taxAmount'], 'Number');
            }
            if (data.hasOwnProperty('txnId')) {
                obj['txnId'] = ApiClient.convertToType(data['txnId'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('yourRef')) {
                obj['yourRef'] = ApiClient.convertToType(data['yourRef'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transaction</code>.
     */
    static validateJSON(data) {
        // validate the optional field `batchItemDetails`
        if (data['batchItemDetails']) { // data not null
          BatchItemDetails.validateJSON(data['batchItemDetails']);
        }
        // validate the optional field `card`
        if (data['card']) { // data not null
          RelatedCard.validateJSON(data['card']);
        }
        // validate the optional field `currency`
        if (data['currency']) { // data not null
          Currency.validateJSON(data['currency']);
        }
        // validate the optional field `directDebitDetails`
        if (data['directDebitDetails']) { // data not null
          DirectDebitDetails.validateJSON(data['directDebitDetails']);
        }
        // ensure the json data is a string
        if (data['eventUuid'] && !(typeof data['eventUuid'] === 'string' || data['eventUuid'] instanceof String)) {
            throw new Error("Expected the field `eventUuid` to be a primitive type in the JSON string but got " + data['eventUuid']);
        }
        // validate the optional field `fxTradeDetails`
        if (data['fxTradeDetails']) { // data not null
          FxTrade.validateJSON(data['fxTradeDetails']);
        }
        // ensure the json data is a string
        if (data['myRef'] && !(typeof data['myRef'] === 'string' || data['myRef'] instanceof String)) {
            throw new Error("Expected the field `myRef` to be a primitive type in the JSON string but got " + data['myRef']);
        }
        // ensure the json data is a string
        if (data['paymentRequestPublicCode'] && !(typeof data['paymentRequestPublicCode'] === 'string' || data['paymentRequestPublicCode'] instanceof String)) {
            throw new Error("Expected the field `paymentRequestPublicCode` to be a primitive type in the JSON string but got " + data['paymentRequestPublicCode']);
        }
        if (data['proprietarySchemeDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['proprietarySchemeDetails'])) {
                throw new Error("Expected the field `proprietarySchemeDetails` to be an array in the JSON data but got " + data['proprietarySchemeDetails']);
            }
            // validate the optional field `proprietarySchemeDetails` (array)
            for (const item of data['proprietarySchemeDetails']) {
                ProprietarySchemeDetailsInner.validateJSON(item);
            };
        }
        // validate the optional field `relatedParty`
        if (data['relatedParty']) { // data not null
          RelatedParty.validateJSON(data['relatedParty']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['yourRef'] && !(typeof data['yourRef'] === 'string' || data['yourRef'] instanceof String)) {
            throw new Error("Expected the field `yourRef` to be a primitive type in the JSON string but got " + data['yourRef']);
        }

        return true;
    }


}



/**
 * Net amount lodged or taken from the account after fees and charges were applied.
 * @member {Number} amountAfterCharges
 */
Transaction.prototype['amountAfterCharges'] = undefined;

/**
 * Amount of the transaction before the fees and taxes were applied.
 * @member {Number} amountBeforeCharges
 */
Transaction.prototype['amountBeforeCharges'] = undefined;

/**
 * the balance of the account (in minor currency units - pence, cent etc. 434050 == 4,340.50 GBP for a GBP account).
 * @member {Number} balance
 */
Transaction.prototype['balance'] = undefined;

/**
 * @member {module:model/BatchItemDetails} batchItemDetails
 */
Transaction.prototype['batchItemDetails'] = undefined;

/**
 * @member {module:model/RelatedCard} card
 */
Transaction.prototype['card'] = undefined;

/**
 * @member {module:model/Currency} currency
 */
Transaction.prototype['currency'] = undefined;

/**
 * Date of the transaction
 * @member {Date} date
 */
Transaction.prototype['date'] = undefined;

/**
 * @member {Date} dateAcknowledged
 */
Transaction.prototype['dateAcknowledged'] = undefined;

/**
 * @member {module:model/DirectDebitDetails} directDebitDetails
 */
Transaction.prototype['directDebitDetails'] = undefined;

/**
 * An internal Fire reference for the transaction (UUID)
 * @member {String} eventUuid
 */
Transaction.prototype['eventUuid'] = undefined;

/**
 * The amount of the fee, if any.
 * @member {Number} feeAmount
 */
Transaction.prototype['feeAmount'] = undefined;

/**
 * @member {module:model/FxTrade} fxTradeDetails
 */
Transaction.prototype['fxTradeDetails'] = undefined;

/**
 * identifier for the fire.com account (assigned by fire.com) This field is only used in the condensed version.
 * @member {Number} ican
 */
Transaction.prototype['ican'] = undefined;

/**
 * The comment/reference on the transaction
 * @member {String} myRef
 */
Transaction.prototype['myRef'] = undefined;

/**
 * (FOP payments only) The FOP Payment Code that was used to make this payment.
 * @member {String} paymentRequestPublicCode
 */
Transaction.prototype['paymentRequestPublicCode'] = undefined;

/**
 * Extra details about the transaction based on the scheme used to make the payment.
 * @member {Array.<module:model/ProprietarySchemeDetailsInner>} proprietarySchemeDetails
 */
Transaction.prototype['proprietarySchemeDetails'] = undefined;

/**
 * The id of the transaction.
 * @member {Number} refId
 */
Transaction.prototype['refId'] = undefined;

/**
 * @member {module:model/RelatedParty} relatedParty
 */
Transaction.prototype['relatedParty'] = undefined;

/**
 * The amount of the tax, if any (e.g. Stamp duty for ATM transactions)
 * @member {Number} taxAmount
 */
Transaction.prototype['taxAmount'] = undefined;

/**
 * The id of this side of the transaction (each transaction has two sides - a to and a from). This is used to get the details of the transaction.
 * @member {Number} txnId
 */
Transaction.prototype['txnId'] = undefined;

/**
 * The type of the transaction: * `LODGEMENT` - Bank Transfer received * `PIS_LODGEMENT` - Fire Open Payments Lodgement received * `MANUAL_TRANSFER` - Manual Transfer to * `WITHDRAWAL` - Bank Transfer sent * `REVERSAL` - Credit Reversal * `DIRECT_DEBIT` - A direct debit. * `DIRECT_DEBIT_REPRESENTED` - A Direct Debit that was requested again after initially failing. * `DIRECT_DEBIT_REFUND` - A refund of a Direct debit. * `INTERNAL_TRANSFER_TO` - Internal Transfer sent (between two of my accounts of the same currency) * `INTERNAL_TRANSFER_FROM` - Internal Transfer received (between two of my accounts of the same currency) * `WITHDRAWAL_RETURNED` - Bank Transfer sent returned * `LODGEMENT_REVERSED` - Bank Transfer received returned * `FX_INTERNAL_TRANSFER_FROM` - FX Internal Transfer received (between two of my accounts of different currency) * `FX_INTERNAL_TRANSFER_TO` - FX Internal Transfer sent (between two of my accounts of different currency) * `CREATE_CARD` - The fee taken when a debit card is issued. * `ADD_ACCOUNT` - The fee taken when an account is created. * `CREATE_ADDITIONAL_USER` - The fee taken when an additional user is created.        * `CARD_POS_CONTACT_DEBIT` - Card used in store; read by magnetic stripe or pin * `CARD_POS_CONTACT_CREDIT` - Card used in store; read by magnetic stripe or pin * `CARD_POS_CONTACTLESS_DEBIT` - Card used in store; read by NFC * `CARD_POS_CONTACTLESS_CREDIT` - Card used in store; read by NFC * `CARD_ECOMMERCE_DEBIT` - Card used on the internet * `CARD_ECOMMERCE_CREDIT` - Card used on the internet * `CARD_ATM_DEBIT` - Card used in an ATM * `CARD_ATM_CREDIT` - Card used in an ATM * `CARD_INTERNATIONAL_POS_CONTACT_DEBIT` - Card used in store in non-processing currency; read by magnetic stripe or pin * `CARD_INTERNATIONAL_POS_CONTACT_CREDIT` - Card used in store in non-processing currency; read by magnetic stripe or pin * `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT` - Card used in store in non-processing currency; read by NFC * `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT` - Card used in store in non-processing currency; read by NFC * `CARD_INTERNATIONAL_ECOMMERCE_DEBIT ` - Card used on the internet in non-processing currency * `CARD_INTERNATIONAL_ECOMMERCE_CREDIT` - Card used on the internet in non-processing currency * `CARD_INTERNATIONAL_ATM_DEBIT` - Card used in an ATM in non-processing currency * `CARD_INTERNATIONAL_ATM_CREDIT` - Card used in an ATM in non-processing currency * `CARD_POS_CONTACT_DEBIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed * `CARD_POS_CONTACT_CREDIT_REVERSAL` - Card used in store; read by magnetic stripe or pin - reversed * `CARD_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store; read by NFC - reversed * `CARD_POS_CONTACTLESS_CREDIT_REVERSAL` - Card used in store; read by NFC - reversed * `CARD_ECOMMERCE_DEBIT_REVERSAL ` - Card used on the internet - reversed * `CARD_ECOMMERCE_CREDIT_REVERSAL` - Card used on the internet - reversed * `CARD_ATM_DEBIT_REVERSAL` - Card used in an ATM - reversed * `CARD_ATM_CREDIT_REVERSAL` - Card used in an ATM - reversed * `CARD_INTERNATIONAL_POS_CONTACT_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed * `CARD_INTERNATIONAL_POS_CONTACT_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by magnetic stripe or pin - reversed * `CARD_INTERNATIONAL_POS_CONTACTLESS_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed * `CARD_INTERNATIONAL_POS_CONTACTLESS_CREDIT_REVERSAL` - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types. * `CARD_INTERNATIONAL_ECOMMERCE_DEBIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed * `CARD_INTERNATIONAL_ECOMMERCE_CREDIT_REVERSAL` - Card used in store in non-processing currency; read by NFC - reversed * `CARD_INTERNATIONAL_ATM_DEBIT_REVERSAL` - Card used on the internet in non-processing currency - reversed * `CARD_INTERNATIONAL_ATM_CREDIT_REVERSAL` - Card used on the internet in non-processing currency - reversed 
 * @member {String} type
 */
Transaction.prototype['type'] = undefined;

/**
 * The comment/reference on the transaction that appears on the recipients statement. Only for withdrawals
 * @member {String} yourRef
 */
Transaction.prototype['yourRef'] = undefined;






export default Transaction;

