/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RelatedPartyCardPaymentCardMerchant from './RelatedPartyCardPaymentCardMerchant';

/**
 * The RelatedPartyCardPayment model module.
 * @module model/RelatedPartyCardPayment
 * @version 1.0
 */
class RelatedPartyCardPayment {
    /**
     * Constructs a new <code>RelatedPartyCardPayment</code>.
     * @alias module:model/RelatedPartyCardPayment
     */
    constructor() { 
        
        RelatedPartyCardPayment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RelatedPartyCardPayment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RelatedPartyCardPayment} obj Optional instance to populate.
     * @return {module:model/RelatedPartyCardPayment} The populated <code>RelatedPartyCardPayment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RelatedPartyCardPayment();

            if (data.hasOwnProperty('cardMerchant')) {
                obj['cardMerchant'] = RelatedPartyCardPaymentCardMerchant.constructFromObject(data['cardMerchant']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RelatedPartyCardPayment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RelatedPartyCardPayment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cardMerchant`
        if (data['cardMerchant']) { // data not null
          RelatedPartyCardPaymentCardMerchant.validateJSON(data['cardMerchant']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/RelatedPartyCardPaymentCardMerchant} cardMerchant
 */
RelatedPartyCardPayment.prototype['cardMerchant'] = undefined;

/**
 * @member {module:model/RelatedPartyCardPayment.TypeEnum} type
 */
RelatedPartyCardPayment.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
RelatedPartyCardPayment['TypeEnum'] = {

    /**
     * value: "CARD_MERCHANT"
     * @const
     */
    "MERCHANT": "CARD_MERCHANT",

    /**
     * value: "CARD_ATM"
     * @const
     */
    "ATM": "CARD_ATM"
};



export default RelatedPartyCardPayment;

