/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BatchItemBankTransferMode1 from './BatchItemBankTransferMode1';
import BatchItemBankTransferMode2 from './BatchItemBankTransferMode2';

/**
 * The AddBankTransferBatchPaymentRequest model module.
 * @module model/AddBankTransferBatchPaymentRequest
 * @version 1.0
 */
class AddBankTransferBatchPaymentRequest {
    /**
     * Constructs a new <code>AddBankTransferBatchPaymentRequest</code>.
     * @alias module:model/AddBankTransferBatchPaymentRequest
     * @param {(module:model/BatchItemBankTransferMode1|module:model/BatchItemBankTransferMode2)} instance The actual instance to initialize AddBankTransferBatchPaymentRequest.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "BatchItemBankTransferMode2") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                BatchItemBankTransferMode2.validateJSON(instance); // throw an exception if no match
                // create BatchItemBankTransferMode2 from JS object
                this.actualInstance = BatchItemBankTransferMode2.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into BatchItemBankTransferMode2
            errorMessages.push("Failed to construct BatchItemBankTransferMode2: " + err)
        }

        try {
            if (typeof instance === "BatchItemBankTransferMode1") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                BatchItemBankTransferMode1.validateJSON(instance); // throw an exception if no match
                // create BatchItemBankTransferMode1 from JS object
                this.actualInstance = BatchItemBankTransferMode1.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into BatchItemBankTransferMode1
            errorMessages.push("Failed to construct BatchItemBankTransferMode1: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `AddBankTransferBatchPaymentRequest` with oneOf schemas BatchItemBankTransferMode1, BatchItemBankTransferMode2. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `AddBankTransferBatchPaymentRequest` with oneOf schemas BatchItemBankTransferMode1, BatchItemBankTransferMode2. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>AddBankTransferBatchPaymentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AddBankTransferBatchPaymentRequest} obj Optional instance to populate.
     * @return {module:model/AddBankTransferBatchPaymentRequest} The populated <code>AddBankTransferBatchPaymentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        return new AddBankTransferBatchPaymentRequest(data);
    }

    /**
     * Gets the actual instance, which can be <code>BatchItemBankTransferMode1</code>, <code>BatchItemBankTransferMode2</code>.
     * @return {(module:model/BatchItemBankTransferMode1|module:model/BatchItemBankTransferMode2)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>BatchItemBankTransferMode1</code>, <code>BatchItemBankTransferMode2</code>.
     * @param {(module:model/BatchItemBankTransferMode1|module:model/BatchItemBankTransferMode2)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = AddBankTransferBatchPaymentRequest.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of AddBankTransferBatchPaymentRequest from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/AddBankTransferBatchPaymentRequest} An instance of AddBankTransferBatchPaymentRequest.
     */
    static fromJSON = function(json_string){
        return AddBankTransferBatchPaymentRequest.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The value of the transaction
 * @member {Number} amount
 */
AddBankTransferBatchPaymentRequest.prototype['amount'] = undefined;

/**
 * The destination account holder name
 * @member {String} destAccountHolderName
 */
AddBankTransferBatchPaymentRequest.prototype['destAccountHolderName'] = undefined;

/**
 * The destination Account Number if a GBP bank transfer
 * @member {String} destAccountNumber
 */
AddBankTransferBatchPaymentRequest.prototype['destAccountNumber'] = undefined;

/**
 * The destination IBAN if a Euro Bank transfer
 * @member {String} destIban
 */
AddBankTransferBatchPaymentRequest.prototype['destIban'] = undefined;

/**
 * The destination Nsc if a GBP bank transfer
 * @member {String} destNsc
 */
AddBankTransferBatchPaymentRequest.prototype['destNsc'] = undefined;

/**
 * The Fire account ID for the fire.com account the funds are taken from.
 * @member {Number} icanFrom
 */
AddBankTransferBatchPaymentRequest.prototype['icanFrom'] = undefined;

/**
 * The reference on the transaction for your records - not shown to the beneficiary.
 * @member {String} myRef
 */
AddBankTransferBatchPaymentRequest.prototype['myRef'] = undefined;

/**
 * Use PAYEE_ID if you are paying existing approved payees (Mode 1).
 * @member {module:model/AddBankTransferBatchPaymentRequest.PayeeTypeEnum} payeeType
 */
AddBankTransferBatchPaymentRequest.prototype['payeeType'] = undefined;

/**
 * The reference on the transaction - displayed on the beneficiary bank statement.
 * @member {String} yourRef
 */
AddBankTransferBatchPaymentRequest.prototype['yourRef'] = undefined;

/**
 * The ID of the existing or automatically created payee
 * @member {Number} payeeId
 */
AddBankTransferBatchPaymentRequest.prototype['payeeId'] = undefined;


AddBankTransferBatchPaymentRequest.OneOf = ["BatchItemBankTransferMode1", "BatchItemBankTransferMode2"];

export default AddBankTransferBatchPaymentRequest;

