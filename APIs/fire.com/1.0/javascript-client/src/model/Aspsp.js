/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Country from './Country';
import Currency from './Currency';

/**
 * The Aspsp model module.
 * @module model/Aspsp
 * @version 1.0
 */
class Aspsp {
    /**
     * Constructs a new <code>Aspsp</code>.
     * @alias module:model/Aspsp
     */
    constructor() { 
        
        Aspsp.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Aspsp</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Aspsp} obj Optional instance to populate.
     * @return {module:model/Aspsp} The populated <code>Aspsp</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Aspsp();

            if (data.hasOwnProperty('alias')) {
                obj['alias'] = ApiClient.convertToType(data['alias'], 'String');
            }
            if (data.hasOwnProperty('aspspUuid')) {
                obj['aspspUuid'] = ApiClient.convertToType(data['aspspUuid'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = Country.constructFromObject(data['country']);
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = Currency.constructFromObject(data['currency']);
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Date');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('logoUrl')) {
                obj['logoUrl'] = ApiClient.convertToType(data['logoUrl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Aspsp</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Aspsp</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alias'] && !(typeof data['alias'] === 'string' || data['alias'] instanceof String)) {
            throw new Error("Expected the field `alias` to be a primitive type in the JSON string but got " + data['alias']);
        }
        // ensure the json data is a string
        if (data['aspspUuid'] && !(typeof data['aspspUuid'] === 'string' || data['aspspUuid'] instanceof String)) {
            throw new Error("Expected the field `aspspUuid` to be a primitive type in the JSON string but got " + data['aspspUuid']);
        }
        // validate the optional field `country`
        if (data['country']) { // data not null
          Country.validateJSON(data['country']);
        }
        // validate the optional field `currency`
        if (data['currency']) { // data not null
          Currency.validateJSON(data['currency']);
        }
        // ensure the json data is a string
        if (data['logoUrl'] && !(typeof data['logoUrl'] === 'string' || data['logoUrl'] instanceof String)) {
            throw new Error("Expected the field `logoUrl` to be a primitive type in the JSON string but got " + data['logoUrl']);
        }

        return true;
    }


}



/**
 * The name of the ASPSP / bank.
 * @member {String} alias
 */
Aspsp.prototype['alias'] = undefined;

/**
 * The UUID associated with the ASPSP / bank.
 * @member {String} aspspUuid
 */
Aspsp.prototype['aspspUuid'] = undefined;

/**
 * @member {module:model/Country} country
 */
Aspsp.prototype['country'] = undefined;

/**
 * @member {module:model/Currency} currency
 */
Aspsp.prototype['currency'] = undefined;

/**
 * The date the ASPSP / bank was created.
 * @member {Date} dateCreated
 */
Aspsp.prototype['dateCreated'] = undefined;

/**
 * The date the ASPSP / bank was last updated.
 * @member {Date} lastUpdated
 */
Aspsp.prototype['lastUpdated'] = undefined;

/**
 * A link to the ASPSP / bank's logo in SVG format.
 * @member {String} logoUrl
 */
Aspsp.prototype['logoUrl'] = undefined;






export default Aspsp;

