/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CardTransactionsv1 from '../model/CardTransactionsv1';
import CardTransactionsv3 from '../model/CardTransactionsv3';

/**
* Transactions service.
* @module api/TransactionsApi
* @version 1.0
*/
export default class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getTransactionsByAccountIdFiltered operation.
     * @callback module:api/TransactionsApi~getTransactionsByAccountIdFilteredCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardTransactionsv1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Filtered list of transactions for an account (v1)
     * Retrieve a filtered list of transactions against an account. Recommended to use the v3 endpoint instead. * `dateRangeFrom` - A millisecond epoch time specifying the date range start date. * `dateRangeTo` - A millisecond epoch time specifying the date range end date. * `searchKeyword` - Search term to filter by from the reference field (`myRef`). * `transactionTypes` - One or more of the transaction types above. This field can be repeated multiple times to allow for multiple transaction types. * `offset` - The page offset. Defaults to 0. This is the record number that the returned list will start at. E.g. offset = 40 and limit = 20 will return records 40 to 59. 
     * @param {Number} ican 
     * @param {Number} dateRangeFrom 
     * @param {Number} dateRangeTo 
     * @param {String} searchKeyword 
     * @param {Array.<String>} transactionTypes 
     * @param {Number} offset 
     * @param {module:api/TransactionsApi~getTransactionsByAccountIdFilteredCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardTransactionsv1}
     */
    getTransactionsByAccountIdFiltered(ican, dateRangeFrom, dateRangeTo, searchKeyword, transactionTypes, offset, callback) {
      let postBody = null;
      // verify the required parameter 'ican' is set
      if (ican === undefined || ican === null) {
        throw new Error("Missing the required parameter 'ican' when calling getTransactionsByAccountIdFiltered");
      }
      // verify the required parameter 'dateRangeFrom' is set
      if (dateRangeFrom === undefined || dateRangeFrom === null) {
        throw new Error("Missing the required parameter 'dateRangeFrom' when calling getTransactionsByAccountIdFiltered");
      }
      // verify the required parameter 'dateRangeTo' is set
      if (dateRangeTo === undefined || dateRangeTo === null) {
        throw new Error("Missing the required parameter 'dateRangeTo' when calling getTransactionsByAccountIdFiltered");
      }
      // verify the required parameter 'searchKeyword' is set
      if (searchKeyword === undefined || searchKeyword === null) {
        throw new Error("Missing the required parameter 'searchKeyword' when calling getTransactionsByAccountIdFiltered");
      }
      // verify the required parameter 'transactionTypes' is set
      if (transactionTypes === undefined || transactionTypes === null) {
        throw new Error("Missing the required parameter 'transactionTypes' when calling getTransactionsByAccountIdFiltered");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling getTransactionsByAccountIdFiltered");
      }

      let pathParams = {
        'ican': ican
      };
      let queryParams = {
        'dateRangeFrom': dateRangeFrom,
        'dateRangeTo': dateRangeTo,
        'searchKeyword': searchKeyword,
        'transactionTypes': this.apiClient.buildCollectionParam(transactionTypes, 'multi'),
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CardTransactionsv1;
      return this.apiClient.callApi(
        '/v1/accounts/{ican}/transactions/filter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionsByAccountIdv1 operation.
     * @callback module:api/TransactionsApi~getTransactionsByAccountIdv1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CardTransactionsv1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List transactions for an account (v1)
     * Retrieve a list of transactions against an account. Recommended to use the v3 endpoint instead.
     * @param {Number} ican 
     * @param {Number} limit 
     * @param {Number} offset 
     * @param {module:api/TransactionsApi~getTransactionsByAccountIdv1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardTransactionsv1}
     */
    getTransactionsByAccountIdv1(ican, limit, offset, callback) {
      let postBody = null;
      // verify the required parameter 'ican' is set
      if (ican === undefined || ican === null) {
        throw new Error("Missing the required parameter 'ican' when calling getTransactionsByAccountIdv1");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling getTransactionsByAccountIdv1");
      }
      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling getTransactionsByAccountIdv1");
      }

      let pathParams = {
        'ican': ican
      };
      let queryParams = {
        'limit': limit,
        'offset': offset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CardTransactionsv1;
      return this.apiClient.callApi(
        '/v1/accounts/{ican}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionsByAccountIdv3 operation.
     * @callback module:api/TransactionsApi~getTransactionsByAccountIdv3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CardTransactionsv3} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List transactions for an account (v3)
     * Retrieve a list of transactions against an account. Initially, use the optional `limit`, `dateRangeFrom` and `dateRangeTo` query params to limit your query, then use the embedded `next` or `prev` links in the response to get newer or older pages. 
     * @param {Number} ican 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {Number} [dateRangeFrom] 
     * @param {Number} [dateRangeTo] 
     * @param {String} [startAfter] 
     * @param {module:api/TransactionsApi~getTransactionsByAccountIdv3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardTransactionsv3}
     */
    getTransactionsByAccountIdv3(ican, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ican' is set
      if (ican === undefined || ican === null) {
        throw new Error("Missing the required parameter 'ican' when calling getTransactionsByAccountIdv3");
      }

      let pathParams = {
        'ican': ican
      };
      let queryParams = {
        'limit': opts['limit'],
        'dateRangeFrom': opts['dateRangeFrom'],
        'dateRangeTo': opts['dateRangeTo'],
        'startAfter': opts['startAfter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CardTransactionsv3;
      return this.apiClient.callApi(
        '/v3/accounts/{ican}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
