/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CardTransactionsv1 from '../model/CardTransactionsv1';
import Cards from '../model/Cards';
import NewCard from '../model/NewCard';
import NewCardResponse from '../model/NewCardResponse';

/**
* Cards service.
* @module api/CardsApi
* @version 1.0
*/
export default class CardsApi {

    /**
    * Constructs a new CardsApi. 
    * @alias module:api/CardsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the blockCard operation.
     * @callback module:api/CardsApi~blockCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Block a card
     * Updates status of an existing card to block which prevents any transactions being carried out with that card.
     * @param {Number} cardId 
     * @param {module:api/CardsApi~blockCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    blockCard(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling blockCard");
      }

      let pathParams = {
        'cardId': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/cards/{cardId}/block', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createNewCard operation.
     * @callback module:api/CardsApi~createNewCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewCardResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new debit card.
     * You can create multiple debit cards which can be linked to your fire.com accounts.
     * @param {module:model/NewCard} newCard Details of the new card
     * @param {module:api/CardsApi~createNewCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewCardResponse}
     */
    createNewCard(newCard, callback) {
      let postBody = newCard;
      // verify the required parameter 'newCard' is set
      if (newCard === undefined || newCard === null) {
        throw new Error("Missing the required parameter 'newCard' when calling createNewCard");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NewCardResponse;
      return this.apiClient.callApi(
        '/v1/cards', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListofCardTransactions operation.
     * @callback module:api/CardsApi~getListofCardTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CardTransactionsv1>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Card Transactions.
     * Returns a list of cards transactions related to your fire.com card.
     * @param {Number} cardId 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {Number} [offset] 
     * @param {module:api/CardsApi~getListofCardTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CardTransactionsv1>}
     */
    getListofCardTransactions(cardId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling getListofCardTransactions");
      }

      let pathParams = {
        'cardId': cardId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [CardTransactionsv1];
      return this.apiClient.callApi(
        '/v1/cards/{cardId}/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListofCards operation.
     * @callback module:api/CardsApi~getListofCardsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cards} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View List of Cards.
     * Returns a list of cards related to your fire.com account.
     * @param {module:api/CardsApi~getListofCardsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cards}
     */
    getListofCards(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Cards;
      return this.apiClient.callApi(
        '/v1/cards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unblockCard operation.
     * @callback module:api/CardsApi~unblockCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unblock a card
     * Updates status of an existing card to unblock which means that transactions can be carried out with that card.
     * @param {Number} cardId 
     * @param {module:api/CardsApi~unblockCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unblockCard(cardId, callback) {
      let postBody = null;
      // verify the required parameter 'cardId' is set
      if (cardId === undefined || cardId === null) {
        throw new Error("Missing the required parameter 'cardId' when calling unblockCard");
      }

      let pathParams = {
        'cardId': cardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/cards/{cardId}/unblock', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
