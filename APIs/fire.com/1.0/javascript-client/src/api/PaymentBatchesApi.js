/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddBankTransferBatchPaymentRequest from '../model/AddBankTransferBatchPaymentRequest';
import Batch from '../model/Batch';
import BatchApprovers from '../model/BatchApprovers';
import BatchItemInternalTransfer from '../model/BatchItemInternalTransfer';
import BatchItemInternationalTransferMode1 from '../model/BatchItemInternationalTransferMode1';
import BatchItems from '../model/BatchItems';
import NewBatch from '../model/NewBatch';
import NewBatchItemResponse from '../model/NewBatchItemResponse';
import NewBatchResponse from '../model/NewBatchResponse';

/**
* PaymentBatches service.
* @module api/PaymentBatchesApi
* @version 1.0
*/
export default class PaymentBatchesApi {

    /**
    * Constructs a new PaymentBatchesApi. 
    * @alias module:api/PaymentBatchesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addBankTransferBatchPayment operation.
     * @callback module:api/PaymentBatchesApi~addBankTransferBatchPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewBatchItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a bank transfer payment to the batch.
     * There are two ways to process bank transfers - by Payee ID (**Mode 1**) or by Payee Account Details (**Mode 2**).  **Mode 1:** Use the payee IDs of existing approved payees set up against your account. These batches can be approved in the normal manner.  **Mode 2:** Use the account details of the payee. In the event that these details correspond to an existing approved payee, the batch can be approved as normal. If the account details are new, a batch of New Payees will automatically be created. This batch will need to be approved before the Payment batch can be approved. These payees will then exist as approved payees for future batches. 
     * @param {String} batchUuid 
     * @param {module:model/AddBankTransferBatchPaymentRequest} addBankTransferBatchPaymentRequest Details of **Mode 1** & **Mode 2**.
     * @param {module:api/PaymentBatchesApi~addBankTransferBatchPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewBatchItemResponse}
     */
    addBankTransferBatchPayment(batchUuid, addBankTransferBatchPaymentRequest, callback) {
      let postBody = addBankTransferBatchPaymentRequest;
      // verify the required parameter 'batchUuid' is set
      if (batchUuid === undefined || batchUuid === null) {
        throw new Error("Missing the required parameter 'batchUuid' when calling addBankTransferBatchPayment");
      }
      // verify the required parameter 'addBankTransferBatchPaymentRequest' is set
      if (addBankTransferBatchPaymentRequest === undefined || addBankTransferBatchPaymentRequest === null) {
        throw new Error("Missing the required parameter 'addBankTransferBatchPaymentRequest' when calling addBankTransferBatchPayment");
      }

      let pathParams = {
        'batchUuid': batchUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NewBatchItemResponse;
      return this.apiClient.callApi(
        '/v1/batches/{batchUuid}/banktransfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addInternalTransferBatchPayment operation.
     * @callback module:api/PaymentBatchesApi~addInternalTransferBatchPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewBatchItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an internal transfer payment to the batch
     * Simply specify the source account, destination account, amount and a reference.
     * @param {String} batchUuid 
     * @param {module:model/BatchItemInternalTransfer} batchItemInternalTransfer Details of the source account, destination account, amount and a reference.
     * @param {module:api/PaymentBatchesApi~addInternalTransferBatchPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewBatchItemResponse}
     */
    addInternalTransferBatchPayment(batchUuid, batchItemInternalTransfer, callback) {
      let postBody = batchItemInternalTransfer;
      // verify the required parameter 'batchUuid' is set
      if (batchUuid === undefined || batchUuid === null) {
        throw new Error("Missing the required parameter 'batchUuid' when calling addInternalTransferBatchPayment");
      }
      // verify the required parameter 'batchItemInternalTransfer' is set
      if (batchItemInternalTransfer === undefined || batchItemInternalTransfer === null) {
        throw new Error("Missing the required parameter 'batchItemInternalTransfer' when calling addInternalTransferBatchPayment");
      }

      let pathParams = {
        'batchUuid': batchUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NewBatchItemResponse;
      return this.apiClient.callApi(
        '/v1/batches/{batchUuid}/internaltransfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addInternationalTransferBatchPayment operation.
     * @callback module:api/PaymentBatchesApi~addInternationalTransferBatchPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewBatchItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an international transfer payment to the batch.
     * International transfers must be added to a batch using the Payee ID (**Mode 1**). Payees must be set up using the web application.  **Mode 1:** Use the payee IDs of existing approved payees set up against your account. These batches can be approved in the normal manner. 
     * @param {String} batchUuid 
     * @param {module:model/BatchItemInternationalTransferMode1} batchItemInternationalTransferMode1 Details of **Mode 1**
     * @param {module:api/PaymentBatchesApi~addInternationalTransferBatchPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewBatchItemResponse}
     */
    addInternationalTransferBatchPayment(batchUuid, batchItemInternationalTransferMode1, callback) {
      let postBody = batchItemInternationalTransferMode1;
      // verify the required parameter 'batchUuid' is set
      if (batchUuid === undefined || batchUuid === null) {
        throw new Error("Missing the required parameter 'batchUuid' when calling addInternationalTransferBatchPayment");
      }
      // verify the required parameter 'batchItemInternationalTransferMode1' is set
      if (batchItemInternationalTransferMode1 === undefined || batchItemInternationalTransferMode1 === null) {
        throw new Error("Missing the required parameter 'batchItemInternationalTransferMode1' when calling addInternationalTransferBatchPayment");
      }

      let pathParams = {
        'batchUuid': batchUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NewBatchItemResponse;
      return this.apiClient.callApi(
        '/v2/batches/{batchUuid}/internationaltransfers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelBatchPayment operation.
     * @callback module:api/PaymentBatchesApi~cancelBatchPaymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a batch
     * Cancels the Batch. You can only cancel a batch before it is submitted for approval (while it is in the OPEN state).
     * @param {String} batchUuid 
     * @param {module:api/PaymentBatchesApi~cancelBatchPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelBatchPayment(batchUuid, callback) {
      let postBody = null;
      // verify the required parameter 'batchUuid' is set
      if (batchUuid === undefined || batchUuid === null) {
        throw new Error("Missing the required parameter 'batchUuid' when calling cancelBatchPayment");
      }

      let pathParams = {
        'batchUuid': batchUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/batches/{batchUuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBatchPayment operation.
     * @callback module:api/PaymentBatchesApi~createBatchPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewBatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new batch of payments
     * The fire.com API allows businesses to automate payments between their accounts or to third parties across the UK and Europe.  For added security, the API can only set up the payments in batches. These batches must be approved by an authorised user via the firework mobile app.   The process is as follows:  **1.**Create a new batch  **2.**Add payments to the batch  **3.**Submit the batch for approval  Once the batch is submitted, the authorised users will receive notifications to their firework mobile apps. They can review the contents of the batch and then approve or reject it. If approved, the batch is then processed. You can avail of enhanced security by using Dual Authorisation to verify payments if you wish. Dual Authorisation can be enabled by you when setting up your API application in firework online.  **Batch Life Cycle Events**  A batch webhook can be specified to receive details of all the payments as they are processed. This webhook receives notifications for every event in the batch lifecycle.  The following events are triggered during a batch:  **batch.opened:** Contains the details of the batch opened. Checks that the callback URL exists - unless a HTTP 200 response is returned, the callback URL will not be configured.  **batch.item-added:** Details of the item added to the batch  **batch.item-removed:** Details of the item removed from the batch  **batch.cancelled:** Notifies that the batch was cancelled.  **batch.submitted:** Notifes that the batch was submitted  **batch.approved:** Notifies that the batch was approved.  **batch.rejected:** Notifies that the batch was rejected.  **batch.failed:** Notifies that the batch failed - includes the details of the failure (insufficient funds etc)  **batch.completed:** Notifies that the batch completed successfully. Includes a summary.  Push notifications are sent to the firework mobile app for many of these events too - these can be configured from within the app.  This is the first step in creating a batch payment. 
     * @param {module:model/NewBatch} newBatch Details of the batch payment
     * @param {module:api/PaymentBatchesApi~createBatchPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewBatchResponse}
     */
    createBatchPayment(newBatch, callback) {
      let postBody = newBatch;
      // verify the required parameter 'newBatch' is set
      if (newBatch === undefined || newBatch === null) {
        throw new Error("Missing the required parameter 'newBatch' when calling createBatchPayment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NewBatchResponse;
      return this.apiClient.callApi(
        '/v1/batches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBankTransferBatchPayment operation.
     * @callback module:api/PaymentBatchesApi~deleteBankTransferBatchPaymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a Payment from the Batch (Bank Transfers)
     * Removes a Payment from the Batch (Bank Transfers). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
     * @param {String} batchUuid 
     * @param {String} itemUuid 
     * @param {module:api/PaymentBatchesApi~deleteBankTransferBatchPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteBankTransferBatchPayment(batchUuid, itemUuid, callback) {
      let postBody = null;
      // verify the required parameter 'batchUuid' is set
      if (batchUuid === undefined || batchUuid === null) {
        throw new Error("Missing the required parameter 'batchUuid' when calling deleteBankTransferBatchPayment");
      }
      // verify the required parameter 'itemUuid' is set
      if (itemUuid === undefined || itemUuid === null) {
        throw new Error("Missing the required parameter 'itemUuid' when calling deleteBankTransferBatchPayment");
      }

      let pathParams = {
        'batchUuid': batchUuid,
        'itemUuid': itemUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/batches/{batchUuid}/banktransfers/{itemUuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInternalTransferBatchPayment operation.
     * @callback module:api/PaymentBatchesApi~deleteInternalTransferBatchPaymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a Payment from the Batch (Internal Transfer)
     * Removes a Payment from the Batch (Internal Transfer). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
     * @param {String} batchUuid 
     * @param {String} itemUuid 
     * @param {module:api/PaymentBatchesApi~deleteInternalTransferBatchPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInternalTransferBatchPayment(batchUuid, itemUuid, callback) {
      let postBody = null;
      // verify the required parameter 'batchUuid' is set
      if (batchUuid === undefined || batchUuid === null) {
        throw new Error("Missing the required parameter 'batchUuid' when calling deleteInternalTransferBatchPayment");
      }
      // verify the required parameter 'itemUuid' is set
      if (itemUuid === undefined || itemUuid === null) {
        throw new Error("Missing the required parameter 'itemUuid' when calling deleteInternalTransferBatchPayment");
      }

      let pathParams = {
        'batchUuid': batchUuid,
        'itemUuid': itemUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/batches/{batchUuid}/internaltransfers/{itemUuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInternationalTransferBatchPayment operation.
     * @callback module:api/PaymentBatchesApi~deleteInternationalTransferBatchPaymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a Payment from the Batch (International Transfers)
     * Removes a Payment from the Batch (International Transfers). You can only remove payments before the batch is submitted for approval (while it is in the OPEN state).
     * @param {String} batchUuid 
     * @param {String} itemUuid 
     * @param {module:api/PaymentBatchesApi~deleteInternationalTransferBatchPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInternationalTransferBatchPayment(batchUuid, itemUuid, callback) {
      let postBody = null;
      // verify the required parameter 'batchUuid' is set
      if (batchUuid === undefined || batchUuid === null) {
        throw new Error("Missing the required parameter 'batchUuid' when calling deleteInternationalTransferBatchPayment");
      }
      // verify the required parameter 'itemUuid' is set
      if (itemUuid === undefined || itemUuid === null) {
        throw new Error("Missing the required parameter 'itemUuid' when calling deleteInternationalTransferBatchPayment");
      }

      let pathParams = {
        'batchUuid': batchUuid,
        'itemUuid': itemUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/batches/{batchUuid}/internationaltransfers/{itemUuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBatches operation.
     * @callback module:api/PaymentBatchesApi~getBatchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchItems} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List batches
     * Returns the list of batch with the specified types and statuses. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [batchStatus] 
     * @param {module:model/String} [batchTypes] 
     * @param {module:model/String} [orderBy] 
     * @param {module:model/String} [order] 
     * @param {module:api/PaymentBatchesApi~getBatchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchItems}
     */
    getBatches(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'batchStatus': opts['batchStatus'],
        'batchTypes': opts['batchTypes'],
        'orderBy': opts['orderBy'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BatchItems;
      return this.apiClient.callApi(
        '/v1/batches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDetailsSingleBatch operation.
     * @callback module:api/PaymentBatchesApi~getDetailsSingleBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Batch} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details of a single Batch
     * Returns the details of the batch specified in the API endpoint - {batchUuid}.
     * @param {String} batchUuid 
     * @param {module:api/PaymentBatchesApi~getDetailsSingleBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Batch}
     */
    getDetailsSingleBatch(batchUuid, callback) {
      let postBody = null;
      // verify the required parameter 'batchUuid' is set
      if (batchUuid === undefined || batchUuid === null) {
        throw new Error("Missing the required parameter 'batchUuid' when calling getDetailsSingleBatch");
      }

      let pathParams = {
        'batchUuid': batchUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Batch;
      return this.apiClient.callApi(
        '/v1/batches/{batchUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemsBatchBankTransfer operation.
     * @callback module:api/PaymentBatchesApi~getItemsBatchBankTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchItems} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in a Batch (Bank Transfers)
     * Returns a paginated list of items in the specified batch.
     * @param {String} batchUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] 
     * @param {Number} [limit] 
     * @param {module:api/PaymentBatchesApi~getItemsBatchBankTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchItems}
     */
    getItemsBatchBankTransfer(batchUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'batchUuid' is set
      if (batchUuid === undefined || batchUuid === null) {
        throw new Error("Missing the required parameter 'batchUuid' when calling getItemsBatchBankTransfer");
      }

      let pathParams = {
        'batchUuid': batchUuid
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BatchItems;
      return this.apiClient.callApi(
        '/v1/batches/{batchUuid}/banktransfers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemsBatchInternalTrasnfer operation.
     * @callback module:api/PaymentBatchesApi~getItemsBatchInternalTrasnferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchItems} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in a Batch (Internal Transfers)
     * Returns a paginated list of items in the specified batch.
     * @param {String} batchUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] 
     * @param {Number} [limit] 
     * @param {module:api/PaymentBatchesApi~getItemsBatchInternalTrasnferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchItems}
     */
    getItemsBatchInternalTrasnfer(batchUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'batchUuid' is set
      if (batchUuid === undefined || batchUuid === null) {
        throw new Error("Missing the required parameter 'batchUuid' when calling getItemsBatchInternalTrasnfer");
      }

      let pathParams = {
        'batchUuid': batchUuid
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BatchItems;
      return this.apiClient.callApi(
        '/v1/batches/{batchUuid}/internaltransfers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getItemsBatchInternationalTransfer operation.
     * @callback module:api/PaymentBatchesApi~getItemsBatchInternationalTransferCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchItems} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items in a Batch (International Transfers)
     * Returns a paginated list of items in the specified batch.
     * @param {String} batchUuid 
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] 
     * @param {Number} [limit] 
     * @param {module:api/PaymentBatchesApi~getItemsBatchInternationalTransferCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchItems}
     */
    getItemsBatchInternationalTransfer(batchUuid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'batchUuid' is set
      if (batchUuid === undefined || batchUuid === null) {
        throw new Error("Missing the required parameter 'batchUuid' when calling getItemsBatchInternationalTransfer");
      }

      let pathParams = {
        'batchUuid': batchUuid
      };
      let queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BatchItems;
      return this.apiClient.callApi(
        '/v2/batches/{batchUuid}/internationaltransfers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getListofApproversForBatch operation.
     * @callback module:api/PaymentBatchesApi~getListofApproversForBatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchApprovers} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Approvers for a Batch
     * Returns a list of approvers for this batch.
     * @param {String} batchUuid 
     * @param {module:api/PaymentBatchesApi~getListofApproversForBatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchApprovers}
     */
    getListofApproversForBatch(batchUuid, callback) {
      let postBody = null;
      // verify the required parameter 'batchUuid' is set
      if (batchUuid === undefined || batchUuid === null) {
        throw new Error("Missing the required parameter 'batchUuid' when calling getListofApproversForBatch");
      }

      let pathParams = {
        'batchUuid': batchUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BatchApprovers;
      return this.apiClient.callApi(
        '/v1/batches/{batchUuid}/approvals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the submitBatch operation.
     * @callback module:api/PaymentBatchesApi~submitBatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit a batch for approval
     * Submits the Batch (for approval in the case of a **BANK_TRANSFER** or **INTERNATIONAL_TRANSFER**). If this is an **INTERNAL_TRANSFER** batch, the transfers are immediately queued for processing. If this is a **BANK_TRANSFER** or **INTERNATIONAL_TRANSFER** batch, this will trigger requests for approval to the firework mobile apps of authorised users. Once those users approve the batch, it is queued for processing.  You can only submit a batch while it is in the OPEN state. 
     * @param {String} batchUuid 
     * @param {module:api/PaymentBatchesApi~submitBatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    submitBatch(batchUuid, callback) {
      let postBody = null;
      // verify the required parameter 'batchUuid' is set
      if (batchUuid === undefined || batchUuid === null) {
        throw new Error("Missing the required parameter 'batchUuid' when calling submitBatch");
      }

      let pathParams = {
        'batchUuid': batchUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/batches/{batchUuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
