/**
 * Fire Financial Services Business API
 * The fire.com API allows you to deeply integrate Business Account features into your application or back-office systems.  The API provides read access to your profile, accounts and transactions, event-driven notifications of activity on the account and payment initiation via batches. Each feature has its own HTTP endpoint and every endpoint has its own permission.   The API exposes 3 main areas of functionality: financial functions, service information and service configuration. ## Financial Functions These functions provide access to your account details, transactions, payee accounts, payment initiation etc. ## Service Functions These provide information about the fees and limits applied to your account. ## Service configuration These provide information about your service configs - applications, webhooks, API tokens, etc. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: api@fire.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FireFinancialServicesBusinessApi);
  }
}(this, function(expect, FireFinancialServicesBusinessApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FireFinancialServicesBusinessApi.DirectDebitsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DirectDebitsApi', function() {
    describe('activateMandate', function() {
      it('should call activateMandate successfully', function(done) {
        //uncomment below and update the code to test activateMandate
        //instance.activateMandate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelMandateByUuid', function() {
      it('should call cancelMandateByUuid successfully', function(done) {
        //uncomment below and update the code to test cancelMandateByUuid
        //instance.cancelMandateByUuid(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDirectDebitByUuid', function() {
      it('should call getDirectDebitByUuid successfully', function(done) {
        //uncomment below and update the code to test getDirectDebitByUuid
        //instance.getDirectDebitByUuid(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDirectDebitMandates', function() {
      it('should call getDirectDebitMandates successfully', function(done) {
        //uncomment below and update the code to test getDirectDebitMandates
        //instance.getDirectDebitMandates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDirectDebitsForMandateUuid', function() {
      it('should call getDirectDebitsForMandateUuid successfully', function(done) {
        //uncomment below and update the code to test getDirectDebitsForMandateUuid
        //instance.getDirectDebitsForMandateUuid(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMandate', function() {
      it('should call getMandate successfully', function(done) {
        //uncomment below and update the code to test getMandate
        //instance.getMandate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rejectDirectDebit', function() {
      it('should call rejectDirectDebit successfully', function(done) {
        //uncomment below and update the code to test rejectDirectDebit
        //instance.rejectDirectDebit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMandateAlias', function() {
      it('should call updateMandateAlias successfully', function(done) {
        //uncomment below and update the code to test updateMandateAlias
        //instance.updateMandateAlias(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
