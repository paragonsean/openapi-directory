# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_name: str=None, environment_score: float=None, governance_score: float=None, last_processing_date: date=None, social_score: float=None, total: float=None):
        """SearchGet200Response - a model defined in OpenAPI

        :param company_name: The company_name of this SearchGet200Response.
        :param environment_score: The environment_score of this SearchGet200Response.
        :param governance_score: The governance_score of this SearchGet200Response.
        :param last_processing_date: The last_processing_date of this SearchGet200Response.
        :param social_score: The social_score of this SearchGet200Response.
        :param total: The total of this SearchGet200Response.
        """
        self.openapi_types = {
            'company_name': str,
            'environment_score': float,
            'governance_score': float,
            'last_processing_date': date,
            'social_score': float,
            'total': float
        }

        self.attribute_map = {
            'company_name': 'company_name',
            'environment_score': 'environment_score',
            'governance_score': 'governance_score',
            'last_processing_date': 'last_processing_date',
            'social_score': 'social_score',
            'total': 'total'
        }

        self._company_name = company_name
        self._environment_score = environment_score
        self._governance_score = governance_score
        self._last_processing_date = last_processing_date
        self._social_score = social_score
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The _search_get_200_response of this SearchGet200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_name(self):
        """Gets the company_name of this SearchGet200Response.


        :return: The company_name of this SearchGet200Response.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this SearchGet200Response.


        :param company_name: The company_name of this SearchGet200Response.
        :type company_name: str
        """

        self._company_name = company_name

    @property
    def environment_score(self):
        """Gets the environment_score of this SearchGet200Response.


        :return: The environment_score of this SearchGet200Response.
        :rtype: float
        """
        return self._environment_score

    @environment_score.setter
    def environment_score(self, environment_score):
        """Sets the environment_score of this SearchGet200Response.


        :param environment_score: The environment_score of this SearchGet200Response.
        :type environment_score: float
        """

        self._environment_score = environment_score

    @property
    def governance_score(self):
        """Gets the governance_score of this SearchGet200Response.


        :return: The governance_score of this SearchGet200Response.
        :rtype: float
        """
        return self._governance_score

    @governance_score.setter
    def governance_score(self, governance_score):
        """Sets the governance_score of this SearchGet200Response.


        :param governance_score: The governance_score of this SearchGet200Response.
        :type governance_score: float
        """

        self._governance_score = governance_score

    @property
    def last_processing_date(self):
        """Gets the last_processing_date of this SearchGet200Response.


        :return: The last_processing_date of this SearchGet200Response.
        :rtype: date
        """
        return self._last_processing_date

    @last_processing_date.setter
    def last_processing_date(self, last_processing_date):
        """Sets the last_processing_date of this SearchGet200Response.


        :param last_processing_date: The last_processing_date of this SearchGet200Response.
        :type last_processing_date: date
        """

        self._last_processing_date = last_processing_date

    @property
    def social_score(self):
        """Gets the social_score of this SearchGet200Response.


        :return: The social_score of this SearchGet200Response.
        :rtype: float
        """
        return self._social_score

    @social_score.setter
    def social_score(self, social_score):
        """Sets the social_score of this SearchGet200Response.


        :param social_score: The social_score of this SearchGet200Response.
        :type social_score: float
        """

        self._social_score = social_score

    @property
    def total(self):
        """Gets the total of this SearchGet200Response.


        :return: The total of this SearchGet200Response.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this SearchGet200Response.


        :param total: The total of this SearchGet200Response.
        :type total: float
        """

        self._total = total
