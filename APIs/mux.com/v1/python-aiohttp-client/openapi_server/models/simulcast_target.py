# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SimulcastTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, passthrough: str=None, status: str=None, stream_key: str=None, url: str=None):
        """SimulcastTarget - a model defined in OpenAPI

        :param id: The id of this SimulcastTarget.
        :param passthrough: The passthrough of this SimulcastTarget.
        :param status: The status of this SimulcastTarget.
        :param stream_key: The stream_key of this SimulcastTarget.
        :param url: The url of this SimulcastTarget.
        """
        self.openapi_types = {
            'id': str,
            'passthrough': str,
            'status': str,
            'stream_key': str,
            'url': str
        }

        self.attribute_map = {
            'id': 'id',
            'passthrough': 'passthrough',
            'status': 'status',
            'stream_key': 'stream_key',
            'url': 'url'
        }

        self._id = id
        self._passthrough = passthrough
        self._status = status
        self._stream_key = stream_key
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SimulcastTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SimulcastTarget of this SimulcastTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this SimulcastTarget.

        ID of the Simulcast Target

        :return: The id of this SimulcastTarget.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SimulcastTarget.

        ID of the Simulcast Target

        :param id: The id of this SimulcastTarget.
        :type id: str
        """

        self._id = id

    @property
    def passthrough(self):
        """Gets the passthrough of this SimulcastTarget.

        Arbitrary user-supplied metadata set when creating a simulcast target.

        :return: The passthrough of this SimulcastTarget.
        :rtype: str
        """
        return self._passthrough

    @passthrough.setter
    def passthrough(self, passthrough):
        """Sets the passthrough of this SimulcastTarget.

        Arbitrary user-supplied metadata set when creating a simulcast target.

        :param passthrough: The passthrough of this SimulcastTarget.
        :type passthrough: str
        """

        self._passthrough = passthrough

    @property
    def status(self):
        """Gets the status of this SimulcastTarget.

        The current status of the simulcast target. See Statuses below for detailed description.   * `idle`: Default status. When the parent live stream is in disconnected status, simulcast targets will be idle state.   * `starting`: The simulcast target transitions into this state when the parent live stream transition into connected state.   * `broadcasting`: The simulcast target has successfully connected to the third party live streaming service and is pushing video to that service.   * `errored`: The simulcast target encountered an error either while attempting to connect to the third party live streaming service, or mid-broadcasting. Compared to other errored statuses in the Mux Video API, a simulcast may transition back into the broadcasting state if a connection with the service can be re-established. 

        :return: The status of this SimulcastTarget.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SimulcastTarget.

        The current status of the simulcast target. See Statuses below for detailed description.   * `idle`: Default status. When the parent live stream is in disconnected status, simulcast targets will be idle state.   * `starting`: The simulcast target transitions into this state when the parent live stream transition into connected state.   * `broadcasting`: The simulcast target has successfully connected to the third party live streaming service and is pushing video to that service.   * `errored`: The simulcast target encountered an error either while attempting to connect to the third party live streaming service, or mid-broadcasting. Compared to other errored statuses in the Mux Video API, a simulcast may transition back into the broadcasting state if a connection with the service can be re-established. 

        :param status: The status of this SimulcastTarget.
        :type status: str
        """
        allowed_values = ["idle", "starting", "broadcasting", "errored"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def stream_key(self):
        """Gets the stream_key of this SimulcastTarget.

        Stream Key represents an stream identifier for the third party live streaming service to simulcast the parent live stream too.

        :return: The stream_key of this SimulcastTarget.
        :rtype: str
        """
        return self._stream_key

    @stream_key.setter
    def stream_key(self, stream_key):
        """Sets the stream_key of this SimulcastTarget.

        Stream Key represents an stream identifier for the third party live streaming service to simulcast the parent live stream too.

        :param stream_key: The stream_key of this SimulcastTarget.
        :type stream_key: str
        """

        self._stream_key = stream_key

    @property
    def url(self):
        """Gets the url of this SimulcastTarget.

        RTMP hostname including the application name for the third party live streaming service.

        :return: The url of this SimulcastTarget.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SimulcastTarget.

        RTMP hostname including the application name for the third party live streaming service.

        :param url: The url of this SimulcastTarget.
        :type url: str
        """

        self._url = url
