# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_generated_subtitle_settings import AssetGeneratedSubtitleSettings
from openapi_server.models.input_settings_overlay_settings import InputSettingsOverlaySettings
from openapi_server import util


class InputSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closed_captions: bool=None, end_time: float=None, generated_subtitles: List[AssetGeneratedSubtitleSettings]=None, language_code: str=None, name: str=None, overlay_settings: InputSettingsOverlaySettings=None, passthrough: str=None, start_time: float=None, text_type: str=None, type: str=None, url: str=None):
        """InputSettings - a model defined in OpenAPI

        :param closed_captions: The closed_captions of this InputSettings.
        :param end_time: The end_time of this InputSettings.
        :param generated_subtitles: The generated_subtitles of this InputSettings.
        :param language_code: The language_code of this InputSettings.
        :param name: The name of this InputSettings.
        :param overlay_settings: The overlay_settings of this InputSettings.
        :param passthrough: The passthrough of this InputSettings.
        :param start_time: The start_time of this InputSettings.
        :param text_type: The text_type of this InputSettings.
        :param type: The type of this InputSettings.
        :param url: The url of this InputSettings.
        """
        self.openapi_types = {
            'closed_captions': bool,
            'end_time': float,
            'generated_subtitles': List[AssetGeneratedSubtitleSettings],
            'language_code': str,
            'name': str,
            'overlay_settings': InputSettingsOverlaySettings,
            'passthrough': str,
            'start_time': float,
            'text_type': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'closed_captions': 'closed_captions',
            'end_time': 'end_time',
            'generated_subtitles': 'generated_subtitles',
            'language_code': 'language_code',
            'name': 'name',
            'overlay_settings': 'overlay_settings',
            'passthrough': 'passthrough',
            'start_time': 'start_time',
            'text_type': 'text_type',
            'type': 'type',
            'url': 'url'
        }

        self._closed_captions = closed_captions
        self._end_time = end_time
        self._generated_subtitles = generated_subtitles
        self._language_code = language_code
        self._name = name
        self._overlay_settings = overlay_settings
        self._passthrough = passthrough
        self._start_time = start_time
        self._text_type = text_type
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputSettings of this InputSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closed_captions(self):
        """Gets the closed_captions of this InputSettings.

        Indicates the track provides Subtitles for the Deaf or Hard-of-hearing (SDH). This optional parameter should be used for tracks with `type` of `text` and `text_type` set to `subtitles`.

        :return: The closed_captions of this InputSettings.
        :rtype: bool
        """
        return self._closed_captions

    @closed_captions.setter
    def closed_captions(self, closed_captions):
        """Sets the closed_captions of this InputSettings.

        Indicates the track provides Subtitles for the Deaf or Hard-of-hearing (SDH). This optional parameter should be used for tracks with `type` of `text` and `text_type` set to `subtitles`.

        :param closed_captions: The closed_captions of this InputSettings.
        :type closed_captions: bool
        """

        self._closed_captions = closed_captions

    @property
    def end_time(self):
        """Gets the end_time of this InputSettings.

        The time offset in seconds from the beginning of the video, indicating the clip's ending marker. The default value is the duration of the video when not included. This parameter is only applicable for creating clips when `input.url` has `mux://assets/{asset_id}` format.

        :return: The end_time of this InputSettings.
        :rtype: float
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this InputSettings.

        The time offset in seconds from the beginning of the video, indicating the clip's ending marker. The default value is the duration of the video when not included. This parameter is only applicable for creating clips when `input.url` has `mux://assets/{asset_id}` format.

        :param end_time: The end_time of this InputSettings.
        :type end_time: float
        """

        self._end_time = end_time

    @property
    def generated_subtitles(self):
        """Gets the generated_subtitles of this InputSettings.

        Generate subtitle tracks using automatic speech recognition using this configuration. This may only be provided for the first input object (the main input file). For direct uploads, this first input should omit the url parameter, as the main input file is provided via the direct upload. This will create subtitles based on the audio track ingested from that main input file. Note that subtitle generation happens after initial ingest, so the generated tracks will be in the `preparing` state when the asset transitions to `ready`.

        :return: The generated_subtitles of this InputSettings.
        :rtype: List[AssetGeneratedSubtitleSettings]
        """
        return self._generated_subtitles

    @generated_subtitles.setter
    def generated_subtitles(self, generated_subtitles):
        """Sets the generated_subtitles of this InputSettings.

        Generate subtitle tracks using automatic speech recognition using this configuration. This may only be provided for the first input object (the main input file). For direct uploads, this first input should omit the url parameter, as the main input file is provided via the direct upload. This will create subtitles based on the audio track ingested from that main input file. Note that subtitle generation happens after initial ingest, so the generated tracks will be in the `preparing` state when the asset transitions to `ready`.

        :param generated_subtitles: The generated_subtitles of this InputSettings.
        :type generated_subtitles: List[AssetGeneratedSubtitleSettings]
        """

        self._generated_subtitles = generated_subtitles

    @property
    def language_code(self):
        """Gets the language_code of this InputSettings.

        The language code value must be a valid [BCP 47](https://tools.ietf.org/html/bcp47) specification compliant value. For example, `en` for English or `en-US` for the US version of English. This parameter is required for `text` and `audio` track types.

        :return: The language_code of this InputSettings.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this InputSettings.

        The language code value must be a valid [BCP 47](https://tools.ietf.org/html/bcp47) specification compliant value. For example, `en` for English or `en-US` for the US version of English. This parameter is required for `text` and `audio` track types.

        :param language_code: The language_code of this InputSettings.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def name(self):
        """Gets the name of this InputSettings.

        The name of the track containing a human-readable description. This value must be unique within each group of `text` or `audio` track types. The HLS manifest will associate a subtitle text track with this value. For example, the value should be \"English\" for a subtitle text track with `language_code` set to `en`. This optional parameter should be used only for `text` and `audio` type tracks. This parameter can be optionally provided for the first video input to denote the name of the muxed audio track if present. If this parameter is not included, Mux will auto-populate based on the `input[].language_code` value.

        :return: The name of this InputSettings.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InputSettings.

        The name of the track containing a human-readable description. This value must be unique within each group of `text` or `audio` track types. The HLS manifest will associate a subtitle text track with this value. For example, the value should be \"English\" for a subtitle text track with `language_code` set to `en`. This optional parameter should be used only for `text` and `audio` type tracks. This parameter can be optionally provided for the first video input to denote the name of the muxed audio track if present. If this parameter is not included, Mux will auto-populate based on the `input[].language_code` value.

        :param name: The name of this InputSettings.
        :type name: str
        """

        self._name = name

    @property
    def overlay_settings(self):
        """Gets the overlay_settings of this InputSettings.


        :return: The overlay_settings of this InputSettings.
        :rtype: InputSettingsOverlaySettings
        """
        return self._overlay_settings

    @overlay_settings.setter
    def overlay_settings(self, overlay_settings):
        """Sets the overlay_settings of this InputSettings.


        :param overlay_settings: The overlay_settings of this InputSettings.
        :type overlay_settings: InputSettingsOverlaySettings
        """

        self._overlay_settings = overlay_settings

    @property
    def passthrough(self):
        """Gets the passthrough of this InputSettings.

        This optional parameter should be used tracks with `type` of `text` and `text_type` set to `subtitles`.

        :return: The passthrough of this InputSettings.
        :rtype: str
        """
        return self._passthrough

    @passthrough.setter
    def passthrough(self, passthrough):
        """Sets the passthrough of this InputSettings.

        This optional parameter should be used tracks with `type` of `text` and `text_type` set to `subtitles`.

        :param passthrough: The passthrough of this InputSettings.
        :type passthrough: str
        """

        self._passthrough = passthrough

    @property
    def start_time(self):
        """Gets the start_time of this InputSettings.

        The time offset in seconds from the beginning of the video indicating the clip's starting marker. The default value is 0 when not included. This parameter is only applicable for creating clips when `input.url` has `mux://assets/{asset_id}` format.

        :return: The start_time of this InputSettings.
        :rtype: float
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this InputSettings.

        The time offset in seconds from the beginning of the video indicating the clip's starting marker. The default value is 0 when not included. This parameter is only applicable for creating clips when `input.url` has `mux://assets/{asset_id}` format.

        :param start_time: The start_time of this InputSettings.
        :type start_time: float
        """

        self._start_time = start_time

    @property
    def text_type(self):
        """Gets the text_type of this InputSettings.

        Type of text track. This parameter only supports subtitles value. For more information on Subtitles / Closed Captions, [see this blog post](https://mux.com/blog/subtitles-captions-webvtt-hls-and-those-magic-flags/). This parameter is required for `text` type tracks.

        :return: The text_type of this InputSettings.
        :rtype: str
        """
        return self._text_type

    @text_type.setter
    def text_type(self, text_type):
        """Sets the text_type of this InputSettings.

        Type of text track. This parameter only supports subtitles value. For more information on Subtitles / Closed Captions, [see this blog post](https://mux.com/blog/subtitles-captions-webvtt-hls-and-those-magic-flags/). This parameter is required for `text` type tracks.

        :param text_type: The text_type of this InputSettings.
        :type text_type: str
        """
        allowed_values = ["subtitles"]  # noqa: E501
        if text_type not in allowed_values:
            raise ValueError(
                "Invalid value for `text_type` ({0}), must be one of {1}"
                .format(text_type, allowed_values)
            )

        self._text_type = text_type

    @property
    def type(self):
        """Gets the type of this InputSettings.

        This parameter is required for `text` type tracks.

        :return: The type of this InputSettings.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InputSettings.

        This parameter is required for `text` type tracks.

        :param type: The type of this InputSettings.
        :type type: str
        """
        allowed_values = ["video", "audio", "text"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this InputSettings.

        The URL of the file that Mux should download and use. * For the main input file, this should be the URL to the muxed file for Mux to download, for example an MP4, MOV, MKV, or TS file. Mux supports most audio/video file formats and codecs, but for fastest processing, you should [use standard inputs wherever possible](https://docs.mux.com/guides/video/minimize-processing-time). * For `audio` tracks, the URL is the location of the audio file for Mux to download, for example an M4A, WAV, or MP3 file. Mux supports most audio file formats and codecs, but for fastest processing, you should [use standard inputs wherever possible](https://docs.mux.com/guides/video/minimize-processing-time). * For `text` tracks, the URL is the location of subtitle/captions file. Mux supports [SubRip Text (SRT)](https://en.wikipedia.org/wiki/SubRip) and [Web Video Text Tracks](https://www.w3.org/TR/webvtt1/) formats for ingesting Subtitles and Closed Captions. * For Watermarking or Overlay, the URL is the location of the watermark image. * When creating clips from existing Mux assets, the URL is defined with `mux://assets/{asset_id}` template where `asset_id` is the Asset Identifier for creating the clip from. The url property may be omitted on the first input object when providing asset settings for LiveStream and Upload objects, in order to configure settings related to the primary (live stream or direct upload) input. 

        :return: The url of this InputSettings.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this InputSettings.

        The URL of the file that Mux should download and use. * For the main input file, this should be the URL to the muxed file for Mux to download, for example an MP4, MOV, MKV, or TS file. Mux supports most audio/video file formats and codecs, but for fastest processing, you should [use standard inputs wherever possible](https://docs.mux.com/guides/video/minimize-processing-time). * For `audio` tracks, the URL is the location of the audio file for Mux to download, for example an M4A, WAV, or MP3 file. Mux supports most audio file formats and codecs, but for fastest processing, you should [use standard inputs wherever possible](https://docs.mux.com/guides/video/minimize-processing-time). * For `text` tracks, the URL is the location of subtitle/captions file. Mux supports [SubRip Text (SRT)](https://en.wikipedia.org/wiki/SubRip) and [Web Video Text Tracks](https://www.w3.org/TR/webvtt1/) formats for ingesting Subtitles and Closed Captions. * For Watermarking or Overlay, the URL is the location of the watermark image. * When creating clips from existing Mux assets, the URL is defined with `mux://assets/{asset_id}` template where `asset_id` is the Asset Identifier for creating the clip from. The url property may be omitted on the first input object when providing asset settings for LiveStream and Upload objects, in order to configure settings related to the primary (live stream or direct upload) input. 

        :param url: The url of this InputSettings.
        :type url: str
        """

        self._url = url
