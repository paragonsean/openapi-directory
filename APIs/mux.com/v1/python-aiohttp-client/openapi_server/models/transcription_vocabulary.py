# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TranscriptionVocabulary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, id: str=None, name: str=None, passthrough: str=None, phrases: List[str]=None, updated_at: str=None):
        """TranscriptionVocabulary - a model defined in OpenAPI

        :param created_at: The created_at of this TranscriptionVocabulary.
        :param id: The id of this TranscriptionVocabulary.
        :param name: The name of this TranscriptionVocabulary.
        :param passthrough: The passthrough of this TranscriptionVocabulary.
        :param phrases: The phrases of this TranscriptionVocabulary.
        :param updated_at: The updated_at of this TranscriptionVocabulary.
        """
        self.openapi_types = {
            'created_at': str,
            'id': str,
            'name': str,
            'passthrough': str,
            'phrases': List[str],
            'updated_at': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'id': 'id',
            'name': 'name',
            'passthrough': 'passthrough',
            'phrases': 'phrases',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._id = id
        self._name = name
        self._passthrough = passthrough
        self._phrases = phrases
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TranscriptionVocabulary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TranscriptionVocabulary of this TranscriptionVocabulary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this TranscriptionVocabulary.

        Time the Transcription Vocabulary was created, defined as a Unix timestamp (seconds since epoch).

        :return: The created_at of this TranscriptionVocabulary.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TranscriptionVocabulary.

        Time the Transcription Vocabulary was created, defined as a Unix timestamp (seconds since epoch).

        :param created_at: The created_at of this TranscriptionVocabulary.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this TranscriptionVocabulary.

        Unique identifier for the Transcription Vocabulary

        :return: The id of this TranscriptionVocabulary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TranscriptionVocabulary.

        Unique identifier for the Transcription Vocabulary

        :param id: The id of this TranscriptionVocabulary.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TranscriptionVocabulary.

        The user-supplied name of the Transcription Vocabulary.

        :return: The name of this TranscriptionVocabulary.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TranscriptionVocabulary.

        The user-supplied name of the Transcription Vocabulary.

        :param name: The name of this TranscriptionVocabulary.
        :type name: str
        """

        self._name = name

    @property
    def passthrough(self):
        """Gets the passthrough of this TranscriptionVocabulary.

        Arbitrary user-supplied metadata set for the Transcription Vocabulary. Max 255 characters.

        :return: The passthrough of this TranscriptionVocabulary.
        :rtype: str
        """
        return self._passthrough

    @passthrough.setter
    def passthrough(self, passthrough):
        """Sets the passthrough of this TranscriptionVocabulary.

        Arbitrary user-supplied metadata set for the Transcription Vocabulary. Max 255 characters.

        :param passthrough: The passthrough of this TranscriptionVocabulary.
        :type passthrough: str
        """

        self._passthrough = passthrough

    @property
    def phrases(self):
        """Gets the phrases of this TranscriptionVocabulary.

        Phrases, individual words, or proper names to include in the Transcription Vocabulary. When the Transcription Vocabulary is attached to a live stream's `generated_subtitles` configuration, the probability of successful speech recognition for these words or phrases is boosted.

        :return: The phrases of this TranscriptionVocabulary.
        :rtype: List[str]
        """
        return self._phrases

    @phrases.setter
    def phrases(self, phrases):
        """Sets the phrases of this TranscriptionVocabulary.

        Phrases, individual words, or proper names to include in the Transcription Vocabulary. When the Transcription Vocabulary is attached to a live stream's `generated_subtitles` configuration, the probability of successful speech recognition for these words or phrases is boosted.

        :param phrases: The phrases of this TranscriptionVocabulary.
        :type phrases: List[str]
        """
        if phrases is not None and len(phrases) > 1000:
            raise ValueError("Invalid value for `phrases`, number of items must be less than or equal to `1000`")

        self._phrases = phrases

    @property
    def updated_at(self):
        """Gets the updated_at of this TranscriptionVocabulary.

        Time the Transcription Vocabulary was updated, defined as a Unix timestamp (seconds since epoch).

        :return: The updated_at of this TranscriptionVocabulary.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TranscriptionVocabulary.

        Time the Transcription Vocabulary was updated, defined as a Unix timestamp (seconds since epoch).

        :param updated_at: The updated_at of this TranscriptionVocabulary.
        :type updated_at: str
        """

        self._updated_at = updated_at
