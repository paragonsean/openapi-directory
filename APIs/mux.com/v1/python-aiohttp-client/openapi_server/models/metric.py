# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Metric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, measurement: str=None, metric: str=None, name: str=None, type: str=None, value: float=None):
        """Metric - a model defined in OpenAPI

        :param measurement: The measurement of this Metric.
        :param metric: The metric of this Metric.
        :param name: The name of this Metric.
        :param type: The type of this Metric.
        :param value: The value of this Metric.
        """
        self.openapi_types = {
            'measurement': str,
            'metric': str,
            'name': str,
            'type': str,
            'value': float
        }

        self.attribute_map = {
            'measurement': 'measurement',
            'metric': 'metric',
            'name': 'name',
            'type': 'type',
            'value': 'value'
        }

        self._measurement = measurement
        self._metric = metric
        self._name = name
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Metric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Metric of this Metric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def measurement(self):
        """Gets the measurement of this Metric.


        :return: The measurement of this Metric.
        :rtype: str
        """
        return self._measurement

    @measurement.setter
    def measurement(self, measurement):
        """Sets the measurement of this Metric.


        :param measurement: The measurement of this Metric.
        :type measurement: str
        """

        self._measurement = measurement

    @property
    def metric(self):
        """Gets the metric of this Metric.


        :return: The metric of this Metric.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this Metric.


        :param metric: The metric of this Metric.
        :type metric: str
        """

        self._metric = metric

    @property
    def name(self):
        """Gets the name of this Metric.


        :return: The name of this Metric.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Metric.


        :param name: The name of this Metric.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Metric.


        :return: The type of this Metric.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Metric.


        :param type: The type of this Metric.
        :type type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this Metric.


        :return: The value of this Metric.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Metric.


        :param value: The value of this Metric.
        :type value: float
        """

        self._value = value
