# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputTrack(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channels: int=None, duration: float=None, encoding: str=None, frame_rate: float=None, height: int=None, sample_rate: int=None, sample_size: int=None, type: str=None, width: int=None):
        """InputTrack - a model defined in OpenAPI

        :param channels: The channels of this InputTrack.
        :param duration: The duration of this InputTrack.
        :param encoding: The encoding of this InputTrack.
        :param frame_rate: The frame_rate of this InputTrack.
        :param height: The height of this InputTrack.
        :param sample_rate: The sample_rate of this InputTrack.
        :param sample_size: The sample_size of this InputTrack.
        :param type: The type of this InputTrack.
        :param width: The width of this InputTrack.
        """
        self.openapi_types = {
            'channels': int,
            'duration': float,
            'encoding': str,
            'frame_rate': float,
            'height': int,
            'sample_rate': int,
            'sample_size': int,
            'type': str,
            'width': int
        }

        self.attribute_map = {
            'channels': 'channels',
            'duration': 'duration',
            'encoding': 'encoding',
            'frame_rate': 'frame_rate',
            'height': 'height',
            'sample_rate': 'sample_rate',
            'sample_size': 'sample_size',
            'type': 'type',
            'width': 'width'
        }

        self._channels = channels
        self._duration = duration
        self._encoding = encoding
        self._frame_rate = frame_rate
        self._height = height
        self._sample_rate = sample_rate
        self._sample_size = sample_size
        self._type = type
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputTrack':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputTrack of this InputTrack.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channels(self):
        """Gets the channels of this InputTrack.


        :return: The channels of this InputTrack.
        :rtype: int
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this InputTrack.


        :param channels: The channels of this InputTrack.
        :type channels: int
        """

        self._channels = channels

    @property
    def duration(self):
        """Gets the duration of this InputTrack.


        :return: The duration of this InputTrack.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InputTrack.


        :param duration: The duration of this InputTrack.
        :type duration: float
        """

        self._duration = duration

    @property
    def encoding(self):
        """Gets the encoding of this InputTrack.


        :return: The encoding of this InputTrack.
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this InputTrack.


        :param encoding: The encoding of this InputTrack.
        :type encoding: str
        """

        self._encoding = encoding

    @property
    def frame_rate(self):
        """Gets the frame_rate of this InputTrack.


        :return: The frame_rate of this InputTrack.
        :rtype: float
        """
        return self._frame_rate

    @frame_rate.setter
    def frame_rate(self, frame_rate):
        """Sets the frame_rate of this InputTrack.


        :param frame_rate: The frame_rate of this InputTrack.
        :type frame_rate: float
        """

        self._frame_rate = frame_rate

    @property
    def height(self):
        """Gets the height of this InputTrack.


        :return: The height of this InputTrack.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this InputTrack.


        :param height: The height of this InputTrack.
        :type height: int
        """

        self._height = height

    @property
    def sample_rate(self):
        """Gets the sample_rate of this InputTrack.


        :return: The sample_rate of this InputTrack.
        :rtype: int
        """
        return self._sample_rate

    @sample_rate.setter
    def sample_rate(self, sample_rate):
        """Sets the sample_rate of this InputTrack.


        :param sample_rate: The sample_rate of this InputTrack.
        :type sample_rate: int
        """

        self._sample_rate = sample_rate

    @property
    def sample_size(self):
        """Gets the sample_size of this InputTrack.


        :return: The sample_size of this InputTrack.
        :rtype: int
        """
        return self._sample_size

    @sample_size.setter
    def sample_size(self, sample_size):
        """Sets the sample_size of this InputTrack.


        :param sample_size: The sample_size of this InputTrack.
        :type sample_size: int
        """

        self._sample_size = sample_size

    @property
    def type(self):
        """Gets the type of this InputTrack.


        :return: The type of this InputTrack.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InputTrack.


        :param type: The type of this InputTrack.
        :type type: str
        """

        self._type = type

    @property
    def width(self):
        """Gets the width of this InputTrack.


        :return: The width of this InputTrack.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this InputTrack.


        :param width: The width of this InputTrack.
        :type width: int
        """

        self._width = width
