# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.referrer_domain_restriction import ReferrerDomainRestriction
from openapi_server import util


class UpdateReferrerDomainRestrictionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_no_referrer: bool=False, allowed_domains: List[str]=None):
        """UpdateReferrerDomainRestrictionRequest - a model defined in OpenAPI

        :param allow_no_referrer: The allow_no_referrer of this UpdateReferrerDomainRestrictionRequest.
        :param allowed_domains: The allowed_domains of this UpdateReferrerDomainRestrictionRequest.
        """
        self.openapi_types = {
            'allow_no_referrer': bool,
            'allowed_domains': List[str]
        }

        self.attribute_map = {
            'allow_no_referrer': 'allow_no_referrer',
            'allowed_domains': 'allowed_domains'
        }

        self._allow_no_referrer = allow_no_referrer
        self._allowed_domains = allowed_domains

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateReferrerDomainRestrictionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateReferrerDomainRestrictionRequest of this UpdateReferrerDomainRestrictionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_no_referrer(self):
        """Gets the allow_no_referrer of this UpdateReferrerDomainRestrictionRequest.

        A boolean to determine whether to allow or deny HTTP requests without `Referer` HTTP request header. Playback requests coming from non-web/native applications like iOS, Android or smart TVs will not have a `Referer` HTTP header. Set this value to `true` to allow these playback requests.

        :return: The allow_no_referrer of this UpdateReferrerDomainRestrictionRequest.
        :rtype: bool
        """
        return self._allow_no_referrer

    @allow_no_referrer.setter
    def allow_no_referrer(self, allow_no_referrer):
        """Sets the allow_no_referrer of this UpdateReferrerDomainRestrictionRequest.

        A boolean to determine whether to allow or deny HTTP requests without `Referer` HTTP request header. Playback requests coming from non-web/native applications like iOS, Android or smart TVs will not have a `Referer` HTTP header. Set this value to `true` to allow these playback requests.

        :param allow_no_referrer: The allow_no_referrer of this UpdateReferrerDomainRestrictionRequest.
        :type allow_no_referrer: bool
        """

        self._allow_no_referrer = allow_no_referrer

    @property
    def allowed_domains(self):
        """Gets the allowed_domains of this UpdateReferrerDomainRestrictionRequest.

        List of domains allowed to play videos. Possible values are   * `[]` Empty Array indicates deny video playback requests for all domains   * `[\"*\"]` A Single Wildcard `*` entry means allow video playback requests from any domain   *  `[\"*.example.com\", \"foo.com\"]` A list of up to 10 domains or valid dns-style wildcards 

        :return: The allowed_domains of this UpdateReferrerDomainRestrictionRequest.
        :rtype: List[str]
        """
        return self._allowed_domains

    @allowed_domains.setter
    def allowed_domains(self, allowed_domains):
        """Sets the allowed_domains of this UpdateReferrerDomainRestrictionRequest.

        List of domains allowed to play videos. Possible values are   * `[]` Empty Array indicates deny video playback requests for all domains   * `[\"*\"]` A Single Wildcard `*` entry means allow video playback requests from any domain   *  `[\"*.example.com\", \"foo.com\"]` A list of up to 10 domains or valid dns-style wildcards 

        :param allowed_domains: The allowed_domains of this UpdateReferrerDomainRestrictionRequest.
        :type allowed_domains: List[str]
        """

        self._allowed_domains = allowed_domains
