# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.broadcast import Broadcast
from openapi_server.models.space_status import SpaceStatus
from openapi_server.models.space_type import SpaceType
from openapi_server import util


class Space(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_session_id: str=None, broadcasts: List[Broadcast]=None, created_at: str=None, id: str=None, passthrough: str=None, status: SpaceStatus=None, type: SpaceType=SpaceType.SERVER):
        """Space - a model defined in OpenAPI

        :param active_session_id: The active_session_id of this Space.
        :param broadcasts: The broadcasts of this Space.
        :param created_at: The created_at of this Space.
        :param id: The id of this Space.
        :param passthrough: The passthrough of this Space.
        :param status: The status of this Space.
        :param type: The type of this Space.
        """
        self.openapi_types = {
            'active_session_id': str,
            'broadcasts': List[Broadcast],
            'created_at': str,
            'id': str,
            'passthrough': str,
            'status': SpaceStatus,
            'type': SpaceType
        }

        self.attribute_map = {
            'active_session_id': 'active_session_id',
            'broadcasts': 'broadcasts',
            'created_at': 'created_at',
            'id': 'id',
            'passthrough': 'passthrough',
            'status': 'status',
            'type': 'type'
        }

        self._active_session_id = active_session_id
        self._broadcasts = broadcasts
        self._created_at = created_at
        self._id = id
        self._passthrough = passthrough
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Space':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Space of this Space.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_session_id(self):
        """Gets the active_session_id of this Space.

        Unique identifier for the current lifecycle of the space. Only set when the space is `active` and is set to a new value each time the space transitions from `idle` to `active`. This value is useful for logging and debugging issues. Max 255 characters.

        :return: The active_session_id of this Space.
        :rtype: str
        """
        return self._active_session_id

    @active_session_id.setter
    def active_session_id(self, active_session_id):
        """Sets the active_session_id of this Space.

        Unique identifier for the current lifecycle of the space. Only set when the space is `active` and is set to a new value each time the space transitions from `idle` to `active`. This value is useful for logging and debugging issues. Max 255 characters.

        :param active_session_id: The active_session_id of this Space.
        :type active_session_id: str
        """

        self._active_session_id = active_session_id

    @property
    def broadcasts(self):
        """Gets the broadcasts of this Space.

        An array of broadcast destinations.

        :return: The broadcasts of this Space.
        :rtype: List[Broadcast]
        """
        return self._broadcasts

    @broadcasts.setter
    def broadcasts(self, broadcasts):
        """Sets the broadcasts of this Space.

        An array of broadcast destinations.

        :param broadcasts: The broadcasts of this Space.
        :type broadcasts: List[Broadcast]
        """

        self._broadcasts = broadcasts

    @property
    def created_at(self):
        """Gets the created_at of this Space.

        Time the space was created, defined as a Unix timestamp (seconds since epoch).

        :return: The created_at of this Space.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Space.

        Time the space was created, defined as a Unix timestamp (seconds since epoch).

        :param created_at: The created_at of this Space.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Space.

        Unique identifier for the space. Max 255 characters.

        :return: The id of this Space.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Space.

        Unique identifier for the space. Max 255 characters.

        :param id: The id of this Space.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def passthrough(self):
        """Gets the passthrough of this Space.

        Arbitrary user-supplied metadata that will be included in the space details and related webhooks. Max: 255 characters.

        :return: The passthrough of this Space.
        :rtype: str
        """
        return self._passthrough

    @passthrough.setter
    def passthrough(self, passthrough):
        """Sets the passthrough of this Space.

        Arbitrary user-supplied metadata that will be included in the space details and related webhooks. Max: 255 characters.

        :param passthrough: The passthrough of this Space.
        :type passthrough: str
        """

        self._passthrough = passthrough

    @property
    def status(self):
        """Gets the status of this Space.


        :return: The status of this Space.
        :rtype: SpaceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Space.


        :param status: The status of this Space.
        :type status: SpaceStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def type(self):
        """Gets the type of this Space.


        :return: The type of this Space.
        :rtype: SpaceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Space.


        :param type: The type of this Space.
        :type type: SpaceType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
