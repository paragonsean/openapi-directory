# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_asset_request import CreateAssetRequest
from openapi_server.models.create_simulcast_target_request import CreateSimulcastTargetRequest
from openapi_server.models.live_stream_embedded_subtitle_settings import LiveStreamEmbeddedSubtitleSettings
from openapi_server.models.live_stream_generated_subtitle_settings import LiveStreamGeneratedSubtitleSettings
from openapi_server.models.playback_policy import PlaybackPolicy
from openapi_server import util


class CreateLiveStreamRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_only: bool=None, embedded_subtitles: List[LiveStreamEmbeddedSubtitleSettings]=None, generated_subtitles: List[LiveStreamGeneratedSubtitleSettings]=None, latency_mode: str=None, low_latency: bool=None, max_continuous_duration: int=43200, new_asset_settings: CreateAssetRequest=None, passthrough: str=None, playback_policy: List[PlaybackPolicy]=None, reconnect_slate_url: str=None, reconnect_window: float=60, reduced_latency: bool=None, simulcast_targets: List[CreateSimulcastTargetRequest]=None, test: bool=None, use_slate_for_standard_latency: bool=False):
        """CreateLiveStreamRequest - a model defined in OpenAPI

        :param audio_only: The audio_only of this CreateLiveStreamRequest.
        :param embedded_subtitles: The embedded_subtitles of this CreateLiveStreamRequest.
        :param generated_subtitles: The generated_subtitles of this CreateLiveStreamRequest.
        :param latency_mode: The latency_mode of this CreateLiveStreamRequest.
        :param low_latency: The low_latency of this CreateLiveStreamRequest.
        :param max_continuous_duration: The max_continuous_duration of this CreateLiveStreamRequest.
        :param new_asset_settings: The new_asset_settings of this CreateLiveStreamRequest.
        :param passthrough: The passthrough of this CreateLiveStreamRequest.
        :param playback_policy: The playback_policy of this CreateLiveStreamRequest.
        :param reconnect_slate_url: The reconnect_slate_url of this CreateLiveStreamRequest.
        :param reconnect_window: The reconnect_window of this CreateLiveStreamRequest.
        :param reduced_latency: The reduced_latency of this CreateLiveStreamRequest.
        :param simulcast_targets: The simulcast_targets of this CreateLiveStreamRequest.
        :param test: The test of this CreateLiveStreamRequest.
        :param use_slate_for_standard_latency: The use_slate_for_standard_latency of this CreateLiveStreamRequest.
        """
        self.openapi_types = {
            'audio_only': bool,
            'embedded_subtitles': List[LiveStreamEmbeddedSubtitleSettings],
            'generated_subtitles': List[LiveStreamGeneratedSubtitleSettings],
            'latency_mode': str,
            'low_latency': bool,
            'max_continuous_duration': int,
            'new_asset_settings': CreateAssetRequest,
            'passthrough': str,
            'playback_policy': List[PlaybackPolicy],
            'reconnect_slate_url': str,
            'reconnect_window': float,
            'reduced_latency': bool,
            'simulcast_targets': List[CreateSimulcastTargetRequest],
            'test': bool,
            'use_slate_for_standard_latency': bool
        }

        self.attribute_map = {
            'audio_only': 'audio_only',
            'embedded_subtitles': 'embedded_subtitles',
            'generated_subtitles': 'generated_subtitles',
            'latency_mode': 'latency_mode',
            'low_latency': 'low_latency',
            'max_continuous_duration': 'max_continuous_duration',
            'new_asset_settings': 'new_asset_settings',
            'passthrough': 'passthrough',
            'playback_policy': 'playback_policy',
            'reconnect_slate_url': 'reconnect_slate_url',
            'reconnect_window': 'reconnect_window',
            'reduced_latency': 'reduced_latency',
            'simulcast_targets': 'simulcast_targets',
            'test': 'test',
            'use_slate_for_standard_latency': 'use_slate_for_standard_latency'
        }

        self._audio_only = audio_only
        self._embedded_subtitles = embedded_subtitles
        self._generated_subtitles = generated_subtitles
        self._latency_mode = latency_mode
        self._low_latency = low_latency
        self._max_continuous_duration = max_continuous_duration
        self._new_asset_settings = new_asset_settings
        self._passthrough = passthrough
        self._playback_policy = playback_policy
        self._reconnect_slate_url = reconnect_slate_url
        self._reconnect_window = reconnect_window
        self._reduced_latency = reduced_latency
        self._simulcast_targets = simulcast_targets
        self._test = test
        self._use_slate_for_standard_latency = use_slate_for_standard_latency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLiveStreamRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLiveStreamRequest of this CreateLiveStreamRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_only(self):
        """Gets the audio_only of this CreateLiveStreamRequest.

        Force the live stream to only process the audio track when the value is set to true. Mux drops the video track if broadcasted.

        :return: The audio_only of this CreateLiveStreamRequest.
        :rtype: bool
        """
        return self._audio_only

    @audio_only.setter
    def audio_only(self, audio_only):
        """Sets the audio_only of this CreateLiveStreamRequest.

        Force the live stream to only process the audio track when the value is set to true. Mux drops the video track if broadcasted.

        :param audio_only: The audio_only of this CreateLiveStreamRequest.
        :type audio_only: bool
        """

        self._audio_only = audio_only

    @property
    def embedded_subtitles(self):
        """Gets the embedded_subtitles of this CreateLiveStreamRequest.

        Describe the embedded closed caption contents of the incoming live stream.

        :return: The embedded_subtitles of this CreateLiveStreamRequest.
        :rtype: List[LiveStreamEmbeddedSubtitleSettings]
        """
        return self._embedded_subtitles

    @embedded_subtitles.setter
    def embedded_subtitles(self, embedded_subtitles):
        """Sets the embedded_subtitles of this CreateLiveStreamRequest.

        Describe the embedded closed caption contents of the incoming live stream.

        :param embedded_subtitles: The embedded_subtitles of this CreateLiveStreamRequest.
        :type embedded_subtitles: List[LiveStreamEmbeddedSubtitleSettings]
        """

        self._embedded_subtitles = embedded_subtitles

    @property
    def generated_subtitles(self):
        """Gets the generated_subtitles of this CreateLiveStreamRequest.

        Configure the incoming live stream to include subtitles created with automatic speech recognition. Each Asset created from a live stream with `generated_subtitles` configured will automatically receive two text tracks. The first of these will have a `text_source` value of `generated_live`, and will be available with `ready` status as soon as the stream is live. The second text track will have a `text_source` value of `generated_live_final` and will contain subtitles with improved accuracy, timing, and formatting. However, `generated_live_final` tracks will not be available in `ready` status until the live stream ends. If an Asset has both `generated_live` and `generated_live_final` tracks that are `ready`, then only the `generated_live_final` track will be included during playback.

        :return: The generated_subtitles of this CreateLiveStreamRequest.
        :rtype: List[LiveStreamGeneratedSubtitleSettings]
        """
        return self._generated_subtitles

    @generated_subtitles.setter
    def generated_subtitles(self, generated_subtitles):
        """Sets the generated_subtitles of this CreateLiveStreamRequest.

        Configure the incoming live stream to include subtitles created with automatic speech recognition. Each Asset created from a live stream with `generated_subtitles` configured will automatically receive two text tracks. The first of these will have a `text_source` value of `generated_live`, and will be available with `ready` status as soon as the stream is live. The second text track will have a `text_source` value of `generated_live_final` and will contain subtitles with improved accuracy, timing, and formatting. However, `generated_live_final` tracks will not be available in `ready` status until the live stream ends. If an Asset has both `generated_live` and `generated_live_final` tracks that are `ready`, then only the `generated_live_final` track will be included during playback.

        :param generated_subtitles: The generated_subtitles of this CreateLiveStreamRequest.
        :type generated_subtitles: List[LiveStreamGeneratedSubtitleSettings]
        """

        self._generated_subtitles = generated_subtitles

    @property
    def latency_mode(self):
        """Gets the latency_mode of this CreateLiveStreamRequest.

        Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this as an alternative to setting low latency or reduced latency flags. The Low Latency value is a beta feature. Read more here: https://mux.com/blog/introducing-low-latency-live-streaming/

        :return: The latency_mode of this CreateLiveStreamRequest.
        :rtype: str
        """
        return self._latency_mode

    @latency_mode.setter
    def latency_mode(self, latency_mode):
        """Sets the latency_mode of this CreateLiveStreamRequest.

        Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this as an alternative to setting low latency or reduced latency flags. The Low Latency value is a beta feature. Read more here: https://mux.com/blog/introducing-low-latency-live-streaming/

        :param latency_mode: The latency_mode of this CreateLiveStreamRequest.
        :type latency_mode: str
        """
        allowed_values = ["low", "reduced", "standard"]  # noqa: E501
        if latency_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `latency_mode` ({0}), must be one of {1}"
                .format(latency_mode, allowed_values)
            )

        self._latency_mode = latency_mode

    @property
    def low_latency(self):
        """Gets the low_latency of this CreateLiveStreamRequest.

        This field is deprecated. Please use `latency_mode` instead. Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Setting this option will enable compatibility with the LL-HLS specification for low-latency streaming. This typically has lower latency than Reduced Latency streams, and cannot be combined with Reduced Latency.

        :return: The low_latency of this CreateLiveStreamRequest.
        :rtype: bool
        """
        return self._low_latency

    @low_latency.setter
    def low_latency(self, low_latency):
        """Sets the low_latency of this CreateLiveStreamRequest.

        This field is deprecated. Please use `latency_mode` instead. Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Setting this option will enable compatibility with the LL-HLS specification for low-latency streaming. This typically has lower latency than Reduced Latency streams, and cannot be combined with Reduced Latency.

        :param low_latency: The low_latency of this CreateLiveStreamRequest.
        :type low_latency: bool
        """

        self._low_latency = low_latency

    @property
    def max_continuous_duration(self):
        """Gets the max_continuous_duration of this CreateLiveStreamRequest.

        The time in seconds a live stream may be continuously active before being disconnected. Defaults to 12 hours.

        :return: The max_continuous_duration of this CreateLiveStreamRequest.
        :rtype: int
        """
        return self._max_continuous_duration

    @max_continuous_duration.setter
    def max_continuous_duration(self, max_continuous_duration):
        """Sets the max_continuous_duration of this CreateLiveStreamRequest.

        The time in seconds a live stream may be continuously active before being disconnected. Defaults to 12 hours.

        :param max_continuous_duration: The max_continuous_duration of this CreateLiveStreamRequest.
        :type max_continuous_duration: int
        """
        if max_continuous_duration is not None and max_continuous_duration > 43200:
            raise ValueError("Invalid value for `max_continuous_duration`, must be a value less than or equal to `43200`")
        if max_continuous_duration is not None and max_continuous_duration < 60:
            raise ValueError("Invalid value for `max_continuous_duration`, must be a value greater than or equal to `60`")

        self._max_continuous_duration = max_continuous_duration

    @property
    def new_asset_settings(self):
        """Gets the new_asset_settings of this CreateLiveStreamRequest.


        :return: The new_asset_settings of this CreateLiveStreamRequest.
        :rtype: CreateAssetRequest
        """
        return self._new_asset_settings

    @new_asset_settings.setter
    def new_asset_settings(self, new_asset_settings):
        """Sets the new_asset_settings of this CreateLiveStreamRequest.


        :param new_asset_settings: The new_asset_settings of this CreateLiveStreamRequest.
        :type new_asset_settings: CreateAssetRequest
        """

        self._new_asset_settings = new_asset_settings

    @property
    def passthrough(self):
        """Gets the passthrough of this CreateLiveStreamRequest.


        :return: The passthrough of this CreateLiveStreamRequest.
        :rtype: str
        """
        return self._passthrough

    @passthrough.setter
    def passthrough(self, passthrough):
        """Sets the passthrough of this CreateLiveStreamRequest.


        :param passthrough: The passthrough of this CreateLiveStreamRequest.
        :type passthrough: str
        """

        self._passthrough = passthrough

    @property
    def playback_policy(self):
        """Gets the playback_policy of this CreateLiveStreamRequest.


        :return: The playback_policy of this CreateLiveStreamRequest.
        :rtype: List[PlaybackPolicy]
        """
        return self._playback_policy

    @playback_policy.setter
    def playback_policy(self, playback_policy):
        """Sets the playback_policy of this CreateLiveStreamRequest.


        :param playback_policy: The playback_policy of this CreateLiveStreamRequest.
        :type playback_policy: List[PlaybackPolicy]
        """

        self._playback_policy = playback_policy

    @property
    def reconnect_slate_url(self):
        """Gets the reconnect_slate_url of this CreateLiveStreamRequest.

        The URL of the image file that Mux should download and use as slate media during interruptions of the live stream media. This file will be downloaded each time a new recorded asset is created from the live stream. If this is not set, the default slate media will be used.

        :return: The reconnect_slate_url of this CreateLiveStreamRequest.
        :rtype: str
        """
        return self._reconnect_slate_url

    @reconnect_slate_url.setter
    def reconnect_slate_url(self, reconnect_slate_url):
        """Sets the reconnect_slate_url of this CreateLiveStreamRequest.

        The URL of the image file that Mux should download and use as slate media during interruptions of the live stream media. This file will be downloaded each time a new recorded asset is created from the live stream. If this is not set, the default slate media will be used.

        :param reconnect_slate_url: The reconnect_slate_url of this CreateLiveStreamRequest.
        :type reconnect_slate_url: str
        """

        self._reconnect_slate_url = reconnect_slate_url

    @property
    def reconnect_window(self):
        """Gets the reconnect_window of this CreateLiveStreamRequest.

        When live streaming software disconnects from Mux, either intentionally or due to a drop in the network, the Reconnect Window is the time in seconds that Mux should wait for the streaming software to reconnect before considering the live stream finished and completing the recorded asset. Defaults to 60 seconds on the API if not specified.  If not specified directly, Standard Latency streams have a Reconnect Window of 60 seconds; Reduced and Low Latency streams have a default of 0 seconds, or no Reconnect Window. For that reason, we suggest specifying a value other than zero for Reduced and Low Latency streams.  Reduced and Low Latency streams with a Reconnect Window greater than zero will insert slate media into the recorded asset while waiting for the streaming software to reconnect or when there are brief interruptions in the live stream media. When using a Reconnect Window setting higher than 60 seconds with a Standard Latency stream, we highly recommend enabling slate with the `use_slate_for_standard_latency` option. 

        :return: The reconnect_window of this CreateLiveStreamRequest.
        :rtype: float
        """
        return self._reconnect_window

    @reconnect_window.setter
    def reconnect_window(self, reconnect_window):
        """Sets the reconnect_window of this CreateLiveStreamRequest.

        When live streaming software disconnects from Mux, either intentionally or due to a drop in the network, the Reconnect Window is the time in seconds that Mux should wait for the streaming software to reconnect before considering the live stream finished and completing the recorded asset. Defaults to 60 seconds on the API if not specified.  If not specified directly, Standard Latency streams have a Reconnect Window of 60 seconds; Reduced and Low Latency streams have a default of 0 seconds, or no Reconnect Window. For that reason, we suggest specifying a value other than zero for Reduced and Low Latency streams.  Reduced and Low Latency streams with a Reconnect Window greater than zero will insert slate media into the recorded asset while waiting for the streaming software to reconnect or when there are brief interruptions in the live stream media. When using a Reconnect Window setting higher than 60 seconds with a Standard Latency stream, we highly recommend enabling slate with the `use_slate_for_standard_latency` option. 

        :param reconnect_window: The reconnect_window of this CreateLiveStreamRequest.
        :type reconnect_window: float
        """
        if reconnect_window is not None and reconnect_window > 1800:
            raise ValueError("Invalid value for `reconnect_window`, must be a value less than or equal to `1800`")
        if reconnect_window is not None and reconnect_window < 0:
            raise ValueError("Invalid value for `reconnect_window`, must be a value greater than or equal to `0`")

        self._reconnect_window = reconnect_window

    @property
    def reduced_latency(self):
        """Gets the reduced_latency of this CreateLiveStreamRequest.

        This field is deprecated. Please use `latency_mode` instead. Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this if you want lower latency for your live stream. Read more here: https://mux.com/blog/reduced-latency-for-mux-live-streaming-now-available/

        :return: The reduced_latency of this CreateLiveStreamRequest.
        :rtype: bool
        """
        return self._reduced_latency

    @reduced_latency.setter
    def reduced_latency(self, reduced_latency):
        """Sets the reduced_latency of this CreateLiveStreamRequest.

        This field is deprecated. Please use `latency_mode` instead. Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this if you want lower latency for your live stream. Read more here: https://mux.com/blog/reduced-latency-for-mux-live-streaming-now-available/

        :param reduced_latency: The reduced_latency of this CreateLiveStreamRequest.
        :type reduced_latency: bool
        """

        self._reduced_latency = reduced_latency

    @property
    def simulcast_targets(self):
        """Gets the simulcast_targets of this CreateLiveStreamRequest.


        :return: The simulcast_targets of this CreateLiveStreamRequest.
        :rtype: List[CreateSimulcastTargetRequest]
        """
        return self._simulcast_targets

    @simulcast_targets.setter
    def simulcast_targets(self, simulcast_targets):
        """Sets the simulcast_targets of this CreateLiveStreamRequest.


        :param simulcast_targets: The simulcast_targets of this CreateLiveStreamRequest.
        :type simulcast_targets: List[CreateSimulcastTargetRequest]
        """

        self._simulcast_targets = simulcast_targets

    @property
    def test(self):
        """Gets the test of this CreateLiveStreamRequest.

        Marks the live stream as a test live stream when the value is set to true. A test live stream can help evaluate the Mux Video APIs without incurring any cost. There is no limit on number of test live streams created. Test live streams are watermarked with the Mux logo and limited to 5 minutes. The test live stream is disabled after the stream is active for 5 mins and the recorded asset also deleted after 24 hours.

        :return: The test of this CreateLiveStreamRequest.
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this CreateLiveStreamRequest.

        Marks the live stream as a test live stream when the value is set to true. A test live stream can help evaluate the Mux Video APIs without incurring any cost. There is no limit on number of test live streams created. Test live streams are watermarked with the Mux logo and limited to 5 minutes. The test live stream is disabled after the stream is active for 5 mins and the recorded asset also deleted after 24 hours.

        :param test: The test of this CreateLiveStreamRequest.
        :type test: bool
        """

        self._test = test

    @property
    def use_slate_for_standard_latency(self):
        """Gets the use_slate_for_standard_latency of this CreateLiveStreamRequest.

        By default, Standard Latency live streams do not have slate media inserted while waiting for live streaming software to reconnect to Mux. Setting this to true enables slate insertion on a Standard Latency stream.

        :return: The use_slate_for_standard_latency of this CreateLiveStreamRequest.
        :rtype: bool
        """
        return self._use_slate_for_standard_latency

    @use_slate_for_standard_latency.setter
    def use_slate_for_standard_latency(self, use_slate_for_standard_latency):
        """Sets the use_slate_for_standard_latency of this CreateLiveStreamRequest.

        By default, Standard Latency live streams do not have slate media inserted while waiting for live streaming software to reconnect to Mux. Setting this to true enables slate insertion on a Standard Latency stream.

        :param use_slate_for_standard_latency: The use_slate_for_standard_latency of this CreateLiveStreamRequest.
        :type use_slate_for_standard_latency: bool
        """

        self._use_slate_for_standard_latency = use_slate_for_standard_latency
