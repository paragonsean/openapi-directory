# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_asset_request import CreateAssetRequest
from openapi_server import util


class CreateUploadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cors_origin: str=None, new_asset_settings: CreateAssetRequest=None, test: bool=None, timeout: int=3600):
        """CreateUploadRequest - a model defined in OpenAPI

        :param cors_origin: The cors_origin of this CreateUploadRequest.
        :param new_asset_settings: The new_asset_settings of this CreateUploadRequest.
        :param test: The test of this CreateUploadRequest.
        :param timeout: The timeout of this CreateUploadRequest.
        """
        self.openapi_types = {
            'cors_origin': str,
            'new_asset_settings': CreateAssetRequest,
            'test': bool,
            'timeout': int
        }

        self.attribute_map = {
            'cors_origin': 'cors_origin',
            'new_asset_settings': 'new_asset_settings',
            'test': 'test',
            'timeout': 'timeout'
        }

        self._cors_origin = cors_origin
        self._new_asset_settings = new_asset_settings
        self._test = test
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUploadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUploadRequest of this CreateUploadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cors_origin(self):
        """Gets the cors_origin of this CreateUploadRequest.

        If the upload URL will be used in a browser, you must specify the origin in order for the signed URL to have the correct CORS headers.

        :return: The cors_origin of this CreateUploadRequest.
        :rtype: str
        """
        return self._cors_origin

    @cors_origin.setter
    def cors_origin(self, cors_origin):
        """Sets the cors_origin of this CreateUploadRequest.

        If the upload URL will be used in a browser, you must specify the origin in order for the signed URL to have the correct CORS headers.

        :param cors_origin: The cors_origin of this CreateUploadRequest.
        :type cors_origin: str
        """

        self._cors_origin = cors_origin

    @property
    def new_asset_settings(self):
        """Gets the new_asset_settings of this CreateUploadRequest.


        :return: The new_asset_settings of this CreateUploadRequest.
        :rtype: CreateAssetRequest
        """
        return self._new_asset_settings

    @new_asset_settings.setter
    def new_asset_settings(self, new_asset_settings):
        """Sets the new_asset_settings of this CreateUploadRequest.


        :param new_asset_settings: The new_asset_settings of this CreateUploadRequest.
        :type new_asset_settings: CreateAssetRequest
        """
        if new_asset_settings is None:
            raise ValueError("Invalid value for `new_asset_settings`, must not be `None`")

        self._new_asset_settings = new_asset_settings

    @property
    def test(self):
        """Gets the test of this CreateUploadRequest.


        :return: The test of this CreateUploadRequest.
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this CreateUploadRequest.


        :param test: The test of this CreateUploadRequest.
        :type test: bool
        """

        self._test = test

    @property
    def timeout(self):
        """Gets the timeout of this CreateUploadRequest.

        Max time in seconds for the signed upload URL to be valid. If a successful upload has not occurred before the timeout limit, the direct upload is marked `timed_out`

        :return: The timeout of this CreateUploadRequest.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this CreateUploadRequest.

        Max time in seconds for the signed upload URL to be valid. If a successful upload has not occurred before the timeout limit, the direct upload is marked `timed_out`

        :param timeout: The timeout of this CreateUploadRequest.
        :type timeout: int
        """
        if timeout is not None and timeout > 604800:
            raise ValueError("Invalid value for `timeout`, must be a value less than or equal to `604800`")
        if timeout is not None and timeout < 60:
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `60`")

        self._timeout = timeout
