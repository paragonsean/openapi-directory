# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetStaticRenditionsFilesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bitrate: int=None, ext: str=None, filesize: str=None, height: int=None, name: str=None, width: int=None):
        """AssetStaticRenditionsFilesInner - a model defined in OpenAPI

        :param bitrate: The bitrate of this AssetStaticRenditionsFilesInner.
        :param ext: The ext of this AssetStaticRenditionsFilesInner.
        :param filesize: The filesize of this AssetStaticRenditionsFilesInner.
        :param height: The height of this AssetStaticRenditionsFilesInner.
        :param name: The name of this AssetStaticRenditionsFilesInner.
        :param width: The width of this AssetStaticRenditionsFilesInner.
        """
        self.openapi_types = {
            'bitrate': int,
            'ext': str,
            'filesize': str,
            'height': int,
            'name': str,
            'width': int
        }

        self.attribute_map = {
            'bitrate': 'bitrate',
            'ext': 'ext',
            'filesize': 'filesize',
            'height': 'height',
            'name': 'name',
            'width': 'width'
        }

        self._bitrate = bitrate
        self._ext = ext
        self._filesize = filesize
        self._height = height
        self._name = name
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetStaticRenditionsFilesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Asset_static_renditions_files_inner of this AssetStaticRenditionsFilesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bitrate(self):
        """Gets the bitrate of this AssetStaticRenditionsFilesInner.

        The bitrate in bits per second

        :return: The bitrate of this AssetStaticRenditionsFilesInner.
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this AssetStaticRenditionsFilesInner.

        The bitrate in bits per second

        :param bitrate: The bitrate of this AssetStaticRenditionsFilesInner.
        :type bitrate: int
        """

        self._bitrate = bitrate

    @property
    def ext(self):
        """Gets the ext of this AssetStaticRenditionsFilesInner.

        Extension of the static rendition file

        :return: The ext of this AssetStaticRenditionsFilesInner.
        :rtype: str
        """
        return self._ext

    @ext.setter
    def ext(self, ext):
        """Sets the ext of this AssetStaticRenditionsFilesInner.

        Extension of the static rendition file

        :param ext: The ext of this AssetStaticRenditionsFilesInner.
        :type ext: str
        """
        allowed_values = ["mp4", "m4a"]  # noqa: E501
        if ext not in allowed_values:
            raise ValueError(
                "Invalid value for `ext` ({0}), must be one of {1}"
                .format(ext, allowed_values)
            )

        self._ext = ext

    @property
    def filesize(self):
        """Gets the filesize of this AssetStaticRenditionsFilesInner.

        The file size in bytes

        :return: The filesize of this AssetStaticRenditionsFilesInner.
        :rtype: str
        """
        return self._filesize

    @filesize.setter
    def filesize(self, filesize):
        """Sets the filesize of this AssetStaticRenditionsFilesInner.

        The file size in bytes

        :param filesize: The filesize of this AssetStaticRenditionsFilesInner.
        :type filesize: str
        """

        self._filesize = filesize

    @property
    def height(self):
        """Gets the height of this AssetStaticRenditionsFilesInner.

        The height of the static rendition's file in pixels

        :return: The height of this AssetStaticRenditionsFilesInner.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this AssetStaticRenditionsFilesInner.

        The height of the static rendition's file in pixels

        :param height: The height of this AssetStaticRenditionsFilesInner.
        :type height: int
        """

        self._height = height

    @property
    def name(self):
        """Gets the name of this AssetStaticRenditionsFilesInner.


        :return: The name of this AssetStaticRenditionsFilesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetStaticRenditionsFilesInner.


        :param name: The name of this AssetStaticRenditionsFilesInner.
        :type name: str
        """
        allowed_values = ["low.mp4", "medium.mp4", "high.mp4", "audio.m4a"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def width(self):
        """Gets the width of this AssetStaticRenditionsFilesInner.

        The width of the static rendition's file in pixels

        :return: The width of this AssetStaticRenditionsFilesInner.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this AssetStaticRenditionsFilesInner.

        The width of the static rendition's file in pixels

        :param width: The width of this AssetStaticRenditionsFilesInner.
        :type width: int
        """

        self._width = width
