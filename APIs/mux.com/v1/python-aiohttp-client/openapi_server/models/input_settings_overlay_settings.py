# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InputSettingsOverlaySettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, height: str=None, horizontal_align: str=None, horizontal_margin: str=None, opacity: str=None, vertical_align: str=None, vertical_margin: str=None, width: str=None):
        """InputSettingsOverlaySettings - a model defined in OpenAPI

        :param height: The height of this InputSettingsOverlaySettings.
        :param horizontal_align: The horizontal_align of this InputSettingsOverlaySettings.
        :param horizontal_margin: The horizontal_margin of this InputSettingsOverlaySettings.
        :param opacity: The opacity of this InputSettingsOverlaySettings.
        :param vertical_align: The vertical_align of this InputSettingsOverlaySettings.
        :param vertical_margin: The vertical_margin of this InputSettingsOverlaySettings.
        :param width: The width of this InputSettingsOverlaySettings.
        """
        self.openapi_types = {
            'height': str,
            'horizontal_align': str,
            'horizontal_margin': str,
            'opacity': str,
            'vertical_align': str,
            'vertical_margin': str,
            'width': str
        }

        self.attribute_map = {
            'height': 'height',
            'horizontal_align': 'horizontal_align',
            'horizontal_margin': 'horizontal_margin',
            'opacity': 'opacity',
            'vertical_align': 'vertical_align',
            'vertical_margin': 'vertical_margin',
            'width': 'width'
        }

        self._height = height
        self._horizontal_align = horizontal_align
        self._horizontal_margin = horizontal_margin
        self._opacity = opacity
        self._vertical_align = vertical_align
        self._vertical_margin = vertical_margin
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputSettingsOverlaySettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputSettings_overlay_settings of this InputSettingsOverlaySettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def height(self):
        """Gets the height of this InputSettingsOverlaySettings.

        How tall the overlay should appear. Can be expressed as a percent (\"10%\") or as a pixel value (\"100px\"). If both width and height are left blank the height will be the true pixels of the image, applied as if the video has been scaled to fit a 1920x1080 frame. If width is supplied with no height, the height will scale proportionally to the width.

        :return: The height of this InputSettingsOverlaySettings.
        :rtype: str
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this InputSettingsOverlaySettings.

        How tall the overlay should appear. Can be expressed as a percent (\"10%\") or as a pixel value (\"100px\"). If both width and height are left blank the height will be the true pixels of the image, applied as if the video has been scaled to fit a 1920x1080 frame. If width is supplied with no height, the height will scale proportionally to the width.

        :param height: The height of this InputSettingsOverlaySettings.
        :type height: str
        """

        self._height = height

    @property
    def horizontal_align(self):
        """Gets the horizontal_align of this InputSettingsOverlaySettings.

        Where the horizontal positioning of the overlay/watermark should begin from.

        :return: The horizontal_align of this InputSettingsOverlaySettings.
        :rtype: str
        """
        return self._horizontal_align

    @horizontal_align.setter
    def horizontal_align(self, horizontal_align):
        """Sets the horizontal_align of this InputSettingsOverlaySettings.

        Where the horizontal positioning of the overlay/watermark should begin from.

        :param horizontal_align: The horizontal_align of this InputSettingsOverlaySettings.
        :type horizontal_align: str
        """
        allowed_values = ["left", "center", "right"]  # noqa: E501
        if horizontal_align not in allowed_values:
            raise ValueError(
                "Invalid value for `horizontal_align` ({0}), must be one of {1}"
                .format(horizontal_align, allowed_values)
            )

        self._horizontal_align = horizontal_align

    @property
    def horizontal_margin(self):
        """Gets the horizontal_margin of this InputSettingsOverlaySettings.

        The distance from the horizontal_align starting point and the image's closest edge. Can be expressed as a percent (\"10%\") or as a pixel value (\"100px\"). Negative values will move the overlay offscreen. In the case of 'center', a positive value will shift the image towards the right and and a negative value will shift it towards the left.

        :return: The horizontal_margin of this InputSettingsOverlaySettings.
        :rtype: str
        """
        return self._horizontal_margin

    @horizontal_margin.setter
    def horizontal_margin(self, horizontal_margin):
        """Sets the horizontal_margin of this InputSettingsOverlaySettings.

        The distance from the horizontal_align starting point and the image's closest edge. Can be expressed as a percent (\"10%\") or as a pixel value (\"100px\"). Negative values will move the overlay offscreen. In the case of 'center', a positive value will shift the image towards the right and and a negative value will shift it towards the left.

        :param horizontal_margin: The horizontal_margin of this InputSettingsOverlaySettings.
        :type horizontal_margin: str
        """

        self._horizontal_margin = horizontal_margin

    @property
    def opacity(self):
        """Gets the opacity of this InputSettingsOverlaySettings.

        How opaque the overlay should appear, expressed as a percent. (Default 100%)

        :return: The opacity of this InputSettingsOverlaySettings.
        :rtype: str
        """
        return self._opacity

    @opacity.setter
    def opacity(self, opacity):
        """Sets the opacity of this InputSettingsOverlaySettings.

        How opaque the overlay should appear, expressed as a percent. (Default 100%)

        :param opacity: The opacity of this InputSettingsOverlaySettings.
        :type opacity: str
        """

        self._opacity = opacity

    @property
    def vertical_align(self):
        """Gets the vertical_align of this InputSettingsOverlaySettings.

        Where the vertical positioning of the overlay/watermark should begin from. Defaults to `\"top\"`

        :return: The vertical_align of this InputSettingsOverlaySettings.
        :rtype: str
        """
        return self._vertical_align

    @vertical_align.setter
    def vertical_align(self, vertical_align):
        """Sets the vertical_align of this InputSettingsOverlaySettings.

        Where the vertical positioning of the overlay/watermark should begin from. Defaults to `\"top\"`

        :param vertical_align: The vertical_align of this InputSettingsOverlaySettings.
        :type vertical_align: str
        """
        allowed_values = ["top", "middle", "bottom"]  # noqa: E501
        if vertical_align not in allowed_values:
            raise ValueError(
                "Invalid value for `vertical_align` ({0}), must be one of {1}"
                .format(vertical_align, allowed_values)
            )

        self._vertical_align = vertical_align

    @property
    def vertical_margin(self):
        """Gets the vertical_margin of this InputSettingsOverlaySettings.

        The distance from the vertical_align starting point and the image's closest edge. Can be expressed as a percent (\"10%\") or as a pixel value (\"100px\"). Negative values will move the overlay offscreen. In the case of 'middle', a positive value will shift the overlay towards the bottom and and a negative value will shift it towards the top.

        :return: The vertical_margin of this InputSettingsOverlaySettings.
        :rtype: str
        """
        return self._vertical_margin

    @vertical_margin.setter
    def vertical_margin(self, vertical_margin):
        """Sets the vertical_margin of this InputSettingsOverlaySettings.

        The distance from the vertical_align starting point and the image's closest edge. Can be expressed as a percent (\"10%\") or as a pixel value (\"100px\"). Negative values will move the overlay offscreen. In the case of 'middle', a positive value will shift the overlay towards the bottom and and a negative value will shift it towards the top.

        :param vertical_margin: The vertical_margin of this InputSettingsOverlaySettings.
        :type vertical_margin: str
        """

        self._vertical_margin = vertical_margin

    @property
    def width(self):
        """Gets the width of this InputSettingsOverlaySettings.

        How wide the overlay should appear. Can be expressed as a percent (\"10%\") or as a pixel value (\"100px\"). If both width and height are left blank the width will be the true pixels of the image, applied as if the video has been scaled to fit a 1920x1080 frame. If height is supplied with no width, the width will scale proportionally to the height.

        :return: The width of this InputSettingsOverlaySettings.
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this InputSettingsOverlaySettings.

        How wide the overlay should appear. Can be expressed as a percent (\"10%\") or as a pixel value (\"100px\"). If both width and height are left blank the width will be the true pixels of the image, applied as if the video has been scaled to fit a 1920x1080 frame. If height is supplied with no width, the width will scale proportionally to the height.

        :param width: The width of this InputSettingsOverlaySettings.
        :type width: str
        """

        self._width = width
