# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.delivery_report_delivered_seconds_by_resolution import DeliveryReportDeliveredSecondsByResolution
from openapi_server import util


class DeliveryReport(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_duration: float=None, asset_id: str=None, asset_resolution_tier: str=None, asset_state: str=None, created_at: str=None, deleted_at: str=None, delivered_seconds: float=None, delivered_seconds_by_resolution: DeliveryReportDeliveredSecondsByResolution=None, live_stream_id: str=None, passthrough: str=None):
        """DeliveryReport - a model defined in OpenAPI

        :param asset_duration: The asset_duration of this DeliveryReport.
        :param asset_id: The asset_id of this DeliveryReport.
        :param asset_resolution_tier: The asset_resolution_tier of this DeliveryReport.
        :param asset_state: The asset_state of this DeliveryReport.
        :param created_at: The created_at of this DeliveryReport.
        :param deleted_at: The deleted_at of this DeliveryReport.
        :param delivered_seconds: The delivered_seconds of this DeliveryReport.
        :param delivered_seconds_by_resolution: The delivered_seconds_by_resolution of this DeliveryReport.
        :param live_stream_id: The live_stream_id of this DeliveryReport.
        :param passthrough: The passthrough of this DeliveryReport.
        """
        self.openapi_types = {
            'asset_duration': float,
            'asset_id': str,
            'asset_resolution_tier': str,
            'asset_state': str,
            'created_at': str,
            'deleted_at': str,
            'delivered_seconds': float,
            'delivered_seconds_by_resolution': DeliveryReportDeliveredSecondsByResolution,
            'live_stream_id': str,
            'passthrough': str
        }

        self.attribute_map = {
            'asset_duration': 'asset_duration',
            'asset_id': 'asset_id',
            'asset_resolution_tier': 'asset_resolution_tier',
            'asset_state': 'asset_state',
            'created_at': 'created_at',
            'deleted_at': 'deleted_at',
            'delivered_seconds': 'delivered_seconds',
            'delivered_seconds_by_resolution': 'delivered_seconds_by_resolution',
            'live_stream_id': 'live_stream_id',
            'passthrough': 'passthrough'
        }

        self._asset_duration = asset_duration
        self._asset_id = asset_id
        self._asset_resolution_tier = asset_resolution_tier
        self._asset_state = asset_state
        self._created_at = created_at
        self._deleted_at = deleted_at
        self._delivered_seconds = delivered_seconds
        self._delivered_seconds_by_resolution = delivered_seconds_by_resolution
        self._live_stream_id = live_stream_id
        self._passthrough = passthrough

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeliveryReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeliveryReport of this DeliveryReport.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_duration(self):
        """Gets the asset_duration of this DeliveryReport.

        The duration of the asset in seconds.

        :return: The asset_duration of this DeliveryReport.
        :rtype: float
        """
        return self._asset_duration

    @asset_duration.setter
    def asset_duration(self, asset_duration):
        """Sets the asset_duration of this DeliveryReport.

        The duration of the asset in seconds.

        :param asset_duration: The asset_duration of this DeliveryReport.
        :type asset_duration: float
        """

        self._asset_duration = asset_duration

    @property
    def asset_id(self):
        """Gets the asset_id of this DeliveryReport.

        Unique identifier for the asset.

        :return: The asset_id of this DeliveryReport.
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this DeliveryReport.

        Unique identifier for the asset.

        :param asset_id: The asset_id of this DeliveryReport.
        :type asset_id: str
        """

        self._asset_id = asset_id

    @property
    def asset_resolution_tier(self):
        """Gets the asset_resolution_tier of this DeliveryReport.

        The resolution tier that the asset was ingested at, affecting billing for ingest & storage

        :return: The asset_resolution_tier of this DeliveryReport.
        :rtype: str
        """
        return self._asset_resolution_tier

    @asset_resolution_tier.setter
    def asset_resolution_tier(self, asset_resolution_tier):
        """Sets the asset_resolution_tier of this DeliveryReport.

        The resolution tier that the asset was ingested at, affecting billing for ingest & storage

        :param asset_resolution_tier: The asset_resolution_tier of this DeliveryReport.
        :type asset_resolution_tier: str
        """
        allowed_values = ["audio-only", "720p", "1080p", "1440p", "2160p"]  # noqa: E501
        if asset_resolution_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `asset_resolution_tier` ({0}), must be one of {1}"
                .format(asset_resolution_tier, allowed_values)
            )

        self._asset_resolution_tier = asset_resolution_tier

    @property
    def asset_state(self):
        """Gets the asset_state of this DeliveryReport.

        The state of the asset.

        :return: The asset_state of this DeliveryReport.
        :rtype: str
        """
        return self._asset_state

    @asset_state.setter
    def asset_state(self, asset_state):
        """Sets the asset_state of this DeliveryReport.

        The state of the asset.

        :param asset_state: The asset_state of this DeliveryReport.
        :type asset_state: str
        """
        allowed_values = ["ready", "errored", "deleted"]  # noqa: E501
        if asset_state not in allowed_values:
            raise ValueError(
                "Invalid value for `asset_state` ({0}), must be one of {1}"
                .format(asset_state, allowed_values)
            )

        self._asset_state = asset_state

    @property
    def created_at(self):
        """Gets the created_at of this DeliveryReport.

        Time at which the asset was created. Measured in seconds since the Unix epoch.

        :return: The created_at of this DeliveryReport.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DeliveryReport.

        Time at which the asset was created. Measured in seconds since the Unix epoch.

        :param created_at: The created_at of this DeliveryReport.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this DeliveryReport.

        If exists, time at which the asset was deleted. Measured in seconds since the Unix epoch.

        :return: The deleted_at of this DeliveryReport.
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this DeliveryReport.

        If exists, time at which the asset was deleted. Measured in seconds since the Unix epoch.

        :param deleted_at: The deleted_at of this DeliveryReport.
        :type deleted_at: str
        """

        self._deleted_at = deleted_at

    @property
    def delivered_seconds(self):
        """Gets the delivered_seconds of this DeliveryReport.

        Total number of delivered seconds during this time window.

        :return: The delivered_seconds of this DeliveryReport.
        :rtype: float
        """
        return self._delivered_seconds

    @delivered_seconds.setter
    def delivered_seconds(self, delivered_seconds):
        """Sets the delivered_seconds of this DeliveryReport.

        Total number of delivered seconds during this time window.

        :param delivered_seconds: The delivered_seconds of this DeliveryReport.
        :type delivered_seconds: float
        """

        self._delivered_seconds = delivered_seconds

    @property
    def delivered_seconds_by_resolution(self):
        """Gets the delivered_seconds_by_resolution of this DeliveryReport.


        :return: The delivered_seconds_by_resolution of this DeliveryReport.
        :rtype: DeliveryReportDeliveredSecondsByResolution
        """
        return self._delivered_seconds_by_resolution

    @delivered_seconds_by_resolution.setter
    def delivered_seconds_by_resolution(self, delivered_seconds_by_resolution):
        """Sets the delivered_seconds_by_resolution of this DeliveryReport.


        :param delivered_seconds_by_resolution: The delivered_seconds_by_resolution of this DeliveryReport.
        :type delivered_seconds_by_resolution: DeliveryReportDeliveredSecondsByResolution
        """

        self._delivered_seconds_by_resolution = delivered_seconds_by_resolution

    @property
    def live_stream_id(self):
        """Gets the live_stream_id of this DeliveryReport.

        Unique identifier for the live stream that created the asset.

        :return: The live_stream_id of this DeliveryReport.
        :rtype: str
        """
        return self._live_stream_id

    @live_stream_id.setter
    def live_stream_id(self, live_stream_id):
        """Sets the live_stream_id of this DeliveryReport.

        Unique identifier for the live stream that created the asset.

        :param live_stream_id: The live_stream_id of this DeliveryReport.
        :type live_stream_id: str
        """

        self._live_stream_id = live_stream_id

    @property
    def passthrough(self):
        """Gets the passthrough of this DeliveryReport.

        The `passthrough` value for the asset.

        :return: The passthrough of this DeliveryReport.
        :rtype: str
        """
        return self._passthrough

    @passthrough.setter
    def passthrough(self, passthrough):
        """Sets the passthrough of this DeliveryReport.

        The `passthrough` value for the asset.

        :param passthrough: The passthrough of this DeliveryReport.
        :type passthrough: str
        """

        self._passthrough = passthrough
