# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateSimulcastTargetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, passthrough: str=None, stream_key: str=None, url: str=None):
        """CreateSimulcastTargetRequest - a model defined in OpenAPI

        :param passthrough: The passthrough of this CreateSimulcastTargetRequest.
        :param stream_key: The stream_key of this CreateSimulcastTargetRequest.
        :param url: The url of this CreateSimulcastTargetRequest.
        """
        self.openapi_types = {
            'passthrough': str,
            'stream_key': str,
            'url': str
        }

        self.attribute_map = {
            'passthrough': 'passthrough',
            'stream_key': 'stream_key',
            'url': 'url'
        }

        self._passthrough = passthrough
        self._stream_key = stream_key
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSimulcastTargetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSimulcastTargetRequest of this CreateSimulcastTargetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def passthrough(self):
        """Gets the passthrough of this CreateSimulcastTargetRequest.

        Arbitrary user-supplied metadata set by you when creating a simulcast target.

        :return: The passthrough of this CreateSimulcastTargetRequest.
        :rtype: str
        """
        return self._passthrough

    @passthrough.setter
    def passthrough(self, passthrough):
        """Sets the passthrough of this CreateSimulcastTargetRequest.

        Arbitrary user-supplied metadata set by you when creating a simulcast target.

        :param passthrough: The passthrough of this CreateSimulcastTargetRequest.
        :type passthrough: str
        """

        self._passthrough = passthrough

    @property
    def stream_key(self):
        """Gets the stream_key of this CreateSimulcastTargetRequest.

        Stream Key represents a stream identifier on the third party live streaming service to send the parent live stream to.

        :return: The stream_key of this CreateSimulcastTargetRequest.
        :rtype: str
        """
        return self._stream_key

    @stream_key.setter
    def stream_key(self, stream_key):
        """Sets the stream_key of this CreateSimulcastTargetRequest.

        Stream Key represents a stream identifier on the third party live streaming service to send the parent live stream to.

        :param stream_key: The stream_key of this CreateSimulcastTargetRequest.
        :type stream_key: str
        """

        self._stream_key = stream_key

    @property
    def url(self):
        """Gets the url of this CreateSimulcastTargetRequest.

        RTMP hostname including application name for the third party live streaming service. Example: `rtmp://live.example.com/app`.

        :return: The url of this CreateSimulcastTargetRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CreateSimulcastTargetRequest.

        RTMP hostname including application name for the third party live streaming service. Example: `rtmp://live.example.com/app`.

        :param url: The url of this CreateSimulcastTargetRequest.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
