# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetMaster(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: str=None, url: str=None):
        """AssetMaster - a model defined in OpenAPI

        :param status: The status of this AssetMaster.
        :param url: The url of this AssetMaster.
        """
        self.openapi_types = {
            'status': str,
            'url': str
        }

        self.attribute_map = {
            'status': 'status',
            'url': 'url'
        }

        self._status = status
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetMaster':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Asset_master of this AssetMaster.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this AssetMaster.


        :return: The status of this AssetMaster.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssetMaster.


        :param status: The status of this AssetMaster.
        :type status: str
        """
        allowed_values = ["ready", "preparing", "errored"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def url(self):
        """Gets the url of this AssetMaster.

        The temporary URL to the master version of the video, as an MP4 file. This URL will expire after 24 hours.

        :return: The url of this AssetMaster.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AssetMaster.

        The temporary URL to the master version of the video, as an MP4 file. This URL will expire after 24 hours.

        :param url: The url of this AssetMaster.
        :type url: str
        """

        self._url = url
