# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateAssetMP4SupportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mp4_support: str=None):
        """UpdateAssetMP4SupportRequest - a model defined in OpenAPI

        :param mp4_support: The mp4_support of this UpdateAssetMP4SupportRequest.
        """
        self.openapi_types = {
            'mp4_support': str
        }

        self.attribute_map = {
            'mp4_support': 'mp4_support'
        }

        self._mp4_support = mp4_support

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAssetMP4SupportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAssetMP4SupportRequest of this UpdateAssetMP4SupportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mp4_support(self):
        """Gets the mp4_support of this UpdateAssetMP4SupportRequest.

        String value for the level of mp4 support

        :return: The mp4_support of this UpdateAssetMP4SupportRequest.
        :rtype: str
        """
        return self._mp4_support

    @mp4_support.setter
    def mp4_support(self, mp4_support):
        """Sets the mp4_support of this UpdateAssetMP4SupportRequest.

        String value for the level of mp4 support

        :param mp4_support: The mp4_support of this UpdateAssetMP4SupportRequest.
        :type mp4_support: str
        """
        allowed_values = ["standard", "none"]  # noqa: E501
        if mp4_support not in allowed_values:
            raise ValueError(
                "Invalid value for `mp4_support` ({0}), must be one of {1}"
                .format(mp4_support, allowed_values)
            )

        self._mp4_support = mp4_support
