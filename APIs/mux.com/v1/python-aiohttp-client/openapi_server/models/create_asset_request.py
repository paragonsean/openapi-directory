# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_settings import InputSettings
from openapi_server.models.playback_policy import PlaybackPolicy
from openapi_server import util


class CreateAssetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encoding_tier: str=None, input: List[InputSettings]=None, master_access: str=None, max_resolution_tier: str=None, mp4_support: str=None, normalize_audio: bool=False, passthrough: str=None, per_title_encode: bool=None, playback_policy: List[PlaybackPolicy]=None, test: bool=None):
        """CreateAssetRequest - a model defined in OpenAPI

        :param encoding_tier: The encoding_tier of this CreateAssetRequest.
        :param input: The input of this CreateAssetRequest.
        :param master_access: The master_access of this CreateAssetRequest.
        :param max_resolution_tier: The max_resolution_tier of this CreateAssetRequest.
        :param mp4_support: The mp4_support of this CreateAssetRequest.
        :param normalize_audio: The normalize_audio of this CreateAssetRequest.
        :param passthrough: The passthrough of this CreateAssetRequest.
        :param per_title_encode: The per_title_encode of this CreateAssetRequest.
        :param playback_policy: The playback_policy of this CreateAssetRequest.
        :param test: The test of this CreateAssetRequest.
        """
        self.openapi_types = {
            'encoding_tier': str,
            'input': List[InputSettings],
            'master_access': str,
            'max_resolution_tier': str,
            'mp4_support': str,
            'normalize_audio': bool,
            'passthrough': str,
            'per_title_encode': bool,
            'playback_policy': List[PlaybackPolicy],
            'test': bool
        }

        self.attribute_map = {
            'encoding_tier': 'encoding_tier',
            'input': 'input',
            'master_access': 'master_access',
            'max_resolution_tier': 'max_resolution_tier',
            'mp4_support': 'mp4_support',
            'normalize_audio': 'normalize_audio',
            'passthrough': 'passthrough',
            'per_title_encode': 'per_title_encode',
            'playback_policy': 'playback_policy',
            'test': 'test'
        }

        self._encoding_tier = encoding_tier
        self._input = input
        self._master_access = master_access
        self._max_resolution_tier = max_resolution_tier
        self._mp4_support = mp4_support
        self._normalize_audio = normalize_audio
        self._passthrough = passthrough
        self._per_title_encode = per_title_encode
        self._playback_policy = playback_policy
        self._test = test

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAssetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAssetRequest of this CreateAssetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encoding_tier(self):
        """Gets the encoding_tier of this CreateAssetRequest.

        The encoding tier informs the cost, quality, and available platform features for the asset. By default the `smart` encoding tier is used.

        :return: The encoding_tier of this CreateAssetRequest.
        :rtype: str
        """
        return self._encoding_tier

    @encoding_tier.setter
    def encoding_tier(self, encoding_tier):
        """Sets the encoding_tier of this CreateAssetRequest.

        The encoding tier informs the cost, quality, and available platform features for the asset. By default the `smart` encoding tier is used.

        :param encoding_tier: The encoding_tier of this CreateAssetRequest.
        :type encoding_tier: str
        """
        allowed_values = ["smart", "baseline"]  # noqa: E501
        if encoding_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding_tier` ({0}), must be one of {1}"
                .format(encoding_tier, allowed_values)
            )

        self._encoding_tier = encoding_tier

    @property
    def input(self):
        """Gets the input of this CreateAssetRequest.

        An array of objects that each describe an input file to be used to create the asset. As a shortcut, input can also be a string URL for a file when only one input file is used. See `input[].url` for requirements.

        :return: The input of this CreateAssetRequest.
        :rtype: List[InputSettings]
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this CreateAssetRequest.

        An array of objects that each describe an input file to be used to create the asset. As a shortcut, input can also be a string URL for a file when only one input file is used. See `input[].url` for requirements.

        :param input: The input of this CreateAssetRequest.
        :type input: List[InputSettings]
        """

        self._input = input

    @property
    def master_access(self):
        """Gets the master_access of this CreateAssetRequest.

        Specify what level (if any) of support for master access. Master access can be enabled temporarily for your asset to be downloaded. See the [Download your videos guide](/guides/video/download-your-videos) for more information.

        :return: The master_access of this CreateAssetRequest.
        :rtype: str
        """
        return self._master_access

    @master_access.setter
    def master_access(self, master_access):
        """Sets the master_access of this CreateAssetRequest.

        Specify what level (if any) of support for master access. Master access can be enabled temporarily for your asset to be downloaded. See the [Download your videos guide](/guides/video/download-your-videos) for more information.

        :param master_access: The master_access of this CreateAssetRequest.
        :type master_access: str
        """
        allowed_values = ["none", "temporary"]  # noqa: E501
        if master_access not in allowed_values:
            raise ValueError(
                "Invalid value for `master_access` ({0}), must be one of {1}"
                .format(master_access, allowed_values)
            )

        self._master_access = master_access

    @property
    def max_resolution_tier(self):
        """Gets the max_resolution_tier of this CreateAssetRequest.

        Max resolution tier can be used to control the maximum `resolution_tier` your asset is encoded, stored, and streamed at. If not set, this defaults to `1080p`.

        :return: The max_resolution_tier of this CreateAssetRequest.
        :rtype: str
        """
        return self._max_resolution_tier

    @max_resolution_tier.setter
    def max_resolution_tier(self, max_resolution_tier):
        """Sets the max_resolution_tier of this CreateAssetRequest.

        Max resolution tier can be used to control the maximum `resolution_tier` your asset is encoded, stored, and streamed at. If not set, this defaults to `1080p`.

        :param max_resolution_tier: The max_resolution_tier of this CreateAssetRequest.
        :type max_resolution_tier: str
        """
        allowed_values = ["1080p", "1440p", "2160p"]  # noqa: E501
        if max_resolution_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `max_resolution_tier` ({0}), must be one of {1}"
                .format(max_resolution_tier, allowed_values)
            )

        self._max_resolution_tier = max_resolution_tier

    @property
    def mp4_support(self):
        """Gets the mp4_support of this CreateAssetRequest.

        Specify what level (if any) of support for mp4 playback. In most cases you should use our default HLS-based streaming playback ({playback_id}.m3u8) which can automatically adjust to viewers' connection speeds, but an mp4 can be useful for some legacy devices or downloading for offline playback. See the [Download your videos guide](/guides/video/download-your-videos) for more information.

        :return: The mp4_support of this CreateAssetRequest.
        :rtype: str
        """
        return self._mp4_support

    @mp4_support.setter
    def mp4_support(self, mp4_support):
        """Sets the mp4_support of this CreateAssetRequest.

        Specify what level (if any) of support for mp4 playback. In most cases you should use our default HLS-based streaming playback ({playback_id}.m3u8) which can automatically adjust to viewers' connection speeds, but an mp4 can be useful for some legacy devices or downloading for offline playback. See the [Download your videos guide](/guides/video/download-your-videos) for more information.

        :param mp4_support: The mp4_support of this CreateAssetRequest.
        :type mp4_support: str
        """
        allowed_values = ["none", "standard"]  # noqa: E501
        if mp4_support not in allowed_values:
            raise ValueError(
                "Invalid value for `mp4_support` ({0}), must be one of {1}"
                .format(mp4_support, allowed_values)
            )

        self._mp4_support = mp4_support

    @property
    def normalize_audio(self):
        """Gets the normalize_audio of this CreateAssetRequest.

        Normalize the audio track loudness level. This parameter is only applicable to on-demand (not live) assets.

        :return: The normalize_audio of this CreateAssetRequest.
        :rtype: bool
        """
        return self._normalize_audio

    @normalize_audio.setter
    def normalize_audio(self, normalize_audio):
        """Sets the normalize_audio of this CreateAssetRequest.

        Normalize the audio track loudness level. This parameter is only applicable to on-demand (not live) assets.

        :param normalize_audio: The normalize_audio of this CreateAssetRequest.
        :type normalize_audio: bool
        """

        self._normalize_audio = normalize_audio

    @property
    def passthrough(self):
        """Gets the passthrough of this CreateAssetRequest.

        Arbitrary user-supplied metadata that will be included in the asset details and related webhooks. Can be used to store your own ID for a video along with the asset. **Max: 255 characters**.

        :return: The passthrough of this CreateAssetRequest.
        :rtype: str
        """
        return self._passthrough

    @passthrough.setter
    def passthrough(self, passthrough):
        """Sets the passthrough of this CreateAssetRequest.

        Arbitrary user-supplied metadata that will be included in the asset details and related webhooks. Can be used to store your own ID for a video along with the asset. **Max: 255 characters**.

        :param passthrough: The passthrough of this CreateAssetRequest.
        :type passthrough: str
        """

        self._passthrough = passthrough

    @property
    def per_title_encode(self):
        """Gets the per_title_encode of this CreateAssetRequest.


        :return: The per_title_encode of this CreateAssetRequest.
        :rtype: bool
        """
        return self._per_title_encode

    @per_title_encode.setter
    def per_title_encode(self, per_title_encode):
        """Sets the per_title_encode of this CreateAssetRequest.


        :param per_title_encode: The per_title_encode of this CreateAssetRequest.
        :type per_title_encode: bool
        """

        self._per_title_encode = per_title_encode

    @property
    def playback_policy(self):
        """Gets the playback_policy of this CreateAssetRequest.

        An array of playback policy names that you want applied to this asset and available through `playback_ids`. Options include: `\"public\"` (anyone with the playback URL can stream the asset). And `\"signed\"` (an additional access token is required to play the asset). If no playback_policy is set, the asset will have no playback IDs and will therefore not be playable. For simplicity, a single string name can be used in place of the array in the case of only one playback policy.

        :return: The playback_policy of this CreateAssetRequest.
        :rtype: List[PlaybackPolicy]
        """
        return self._playback_policy

    @playback_policy.setter
    def playback_policy(self, playback_policy):
        """Sets the playback_policy of this CreateAssetRequest.

        An array of playback policy names that you want applied to this asset and available through `playback_ids`. Options include: `\"public\"` (anyone with the playback URL can stream the asset). And `\"signed\"` (an additional access token is required to play the asset). If no playback_policy is set, the asset will have no playback IDs and will therefore not be playable. For simplicity, a single string name can be used in place of the array in the case of only one playback policy.

        :param playback_policy: The playback_policy of this CreateAssetRequest.
        :type playback_policy: List[PlaybackPolicy]
        """

        self._playback_policy = playback_policy

    @property
    def test(self):
        """Gets the test of this CreateAssetRequest.

        Marks the asset as a test asset when the value is set to true. A Test asset can help evaluate the Mux Video APIs without incurring any cost. There is no limit on number of test assets created. Test asset are watermarked with the Mux logo, limited to 10 seconds, deleted after 24 hrs.

        :return: The test of this CreateAssetRequest.
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this CreateAssetRequest.

        Marks the asset as a test asset when the value is set to true. A Test asset can help evaluate the Mux Video APIs without incurring any cost. There is no limit on number of test assets created. Test asset are watermarked with the Mux logo, limited to 10 seconds, deleted after 24 hrs.

        :param test: The test of this CreateAssetRequest.
        :type test: bool
        """

        self._test = test
