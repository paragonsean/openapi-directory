# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.broadcast_layout import BroadcastLayout
from openapi_server.models.broadcast_resolution import BroadcastResolution
from openapi_server import util


class CreateBroadcastRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background: str=None, layout: BroadcastLayout=BroadcastLayout.GALLERY, live_stream_id: str=None, passthrough: str=None, resolution: BroadcastResolution=BroadcastResolution.ENUM_1920X1080):
        """CreateBroadcastRequest - a model defined in OpenAPI

        :param background: The background of this CreateBroadcastRequest.
        :param layout: The layout of this CreateBroadcastRequest.
        :param live_stream_id: The live_stream_id of this CreateBroadcastRequest.
        :param passthrough: The passthrough of this CreateBroadcastRequest.
        :param resolution: The resolution of this CreateBroadcastRequest.
        """
        self.openapi_types = {
            'background': str,
            'layout': BroadcastLayout,
            'live_stream_id': str,
            'passthrough': str,
            'resolution': BroadcastResolution
        }

        self.attribute_map = {
            'background': 'background',
            'layout': 'layout',
            'live_stream_id': 'live_stream_id',
            'passthrough': 'passthrough',
            'resolution': 'resolution'
        }

        self._background = background
        self._layout = layout
        self._live_stream_id = live_stream_id
        self._passthrough = passthrough
        self._resolution = resolution

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateBroadcastRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateBroadcastRequest of this CreateBroadcastRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background(self):
        """Gets the background of this CreateBroadcastRequest.

        URL of an image to display as the background of the broadcast. Its dimensions should match the provided resolution.

        :return: The background of this CreateBroadcastRequest.
        :rtype: str
        """
        return self._background

    @background.setter
    def background(self, background):
        """Sets the background of this CreateBroadcastRequest.

        URL of an image to display as the background of the broadcast. Its dimensions should match the provided resolution.

        :param background: The background of this CreateBroadcastRequest.
        :type background: str
        """

        self._background = background

    @property
    def layout(self):
        """Gets the layout of this CreateBroadcastRequest.


        :return: The layout of this CreateBroadcastRequest.
        :rtype: BroadcastLayout
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this CreateBroadcastRequest.


        :param layout: The layout of this CreateBroadcastRequest.
        :type layout: BroadcastLayout
        """

        self._layout = layout

    @property
    def live_stream_id(self):
        """Gets the live_stream_id of this CreateBroadcastRequest.

        The ID of the live stream that you want to broadcast to.

        :return: The live_stream_id of this CreateBroadcastRequest.
        :rtype: str
        """
        return self._live_stream_id

    @live_stream_id.setter
    def live_stream_id(self, live_stream_id):
        """Sets the live_stream_id of this CreateBroadcastRequest.

        The ID of the live stream that you want to broadcast to.

        :param live_stream_id: The live_stream_id of this CreateBroadcastRequest.
        :type live_stream_id: str
        """
        if live_stream_id is None:
            raise ValueError("Invalid value for `live_stream_id`, must not be `None`")

        self._live_stream_id = live_stream_id

    @property
    def passthrough(self):
        """Gets the passthrough of this CreateBroadcastRequest.

        Arbitrary user-supplied metadata that will be included in the broadcast details and related webhooks. Max: 255 characters.

        :return: The passthrough of this CreateBroadcastRequest.
        :rtype: str
        """
        return self._passthrough

    @passthrough.setter
    def passthrough(self, passthrough):
        """Sets the passthrough of this CreateBroadcastRequest.

        Arbitrary user-supplied metadata that will be included in the broadcast details and related webhooks. Max: 255 characters.

        :param passthrough: The passthrough of this CreateBroadcastRequest.
        :type passthrough: str
        """

        self._passthrough = passthrough

    @property
    def resolution(self):
        """Gets the resolution of this CreateBroadcastRequest.


        :return: The resolution of this CreateBroadcastRequest.
        :rtype: BroadcastResolution
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this CreateBroadcastRequest.


        :param resolution: The resolution of this CreateBroadcastRequest.
        :type resolution: BroadcastResolution
        """

        self._resolution = resolution
