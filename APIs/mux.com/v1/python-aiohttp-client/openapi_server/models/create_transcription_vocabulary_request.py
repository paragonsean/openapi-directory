# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateTranscriptionVocabularyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, passthrough: str=None, phrases: List[str]=None):
        """CreateTranscriptionVocabularyRequest - a model defined in OpenAPI

        :param name: The name of this CreateTranscriptionVocabularyRequest.
        :param passthrough: The passthrough of this CreateTranscriptionVocabularyRequest.
        :param phrases: The phrases of this CreateTranscriptionVocabularyRequest.
        """
        self.openapi_types = {
            'name': str,
            'passthrough': str,
            'phrases': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'passthrough': 'passthrough',
            'phrases': 'phrases'
        }

        self._name = name
        self._passthrough = passthrough
        self._phrases = phrases

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTranscriptionVocabularyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTranscriptionVocabularyRequest of this CreateTranscriptionVocabularyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateTranscriptionVocabularyRequest.

        The user-supplied name of the Transcription Vocabulary.

        :return: The name of this CreateTranscriptionVocabularyRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateTranscriptionVocabularyRequest.

        The user-supplied name of the Transcription Vocabulary.

        :param name: The name of this CreateTranscriptionVocabularyRequest.
        :type name: str
        """

        self._name = name

    @property
    def passthrough(self):
        """Gets the passthrough of this CreateTranscriptionVocabularyRequest.

        Arbitrary user-supplied metadata set for the Transcription Vocabulary. Max 255 characters.

        :return: The passthrough of this CreateTranscriptionVocabularyRequest.
        :rtype: str
        """
        return self._passthrough

    @passthrough.setter
    def passthrough(self, passthrough):
        """Sets the passthrough of this CreateTranscriptionVocabularyRequest.

        Arbitrary user-supplied metadata set for the Transcription Vocabulary. Max 255 characters.

        :param passthrough: The passthrough of this CreateTranscriptionVocabularyRequest.
        :type passthrough: str
        """

        self._passthrough = passthrough

    @property
    def phrases(self):
        """Gets the phrases of this CreateTranscriptionVocabularyRequest.

        Phrases, individual words, or proper names to include in the Transcription Vocabulary. When the Transcription Vocabulary is attached to a live stream's `generated_subtitles`, the probability of successful speech recognition for these words or phrases is boosted.

        :return: The phrases of this CreateTranscriptionVocabularyRequest.
        :rtype: List[str]
        """
        return self._phrases

    @phrases.setter
    def phrases(self, phrases):
        """Sets the phrases of this CreateTranscriptionVocabularyRequest.

        Phrases, individual words, or proper names to include in the Transcription Vocabulary. When the Transcription Vocabulary is attached to a live stream's `generated_subtitles`, the probability of successful speech recognition for these words or phrases is boosted.

        :param phrases: The phrases of this CreateTranscriptionVocabularyRequest.
        :type phrases: List[str]
        """
        if phrases is None:
            raise ValueError("Invalid value for `phrases`, must not be `None`")
        if phrases is not None and len(phrases) > 1000:
            raise ValueError("Invalid value for `phrases`, number of items must be less than or equal to `1000`")

        self._phrases = phrases
