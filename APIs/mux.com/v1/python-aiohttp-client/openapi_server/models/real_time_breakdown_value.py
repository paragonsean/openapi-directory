# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RealTimeBreakdownValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concurrent_viewers: int=None, display_value: str=None, metric_value: float=None, negative_impact: int=None, value: str=None):
        """RealTimeBreakdownValue - a model defined in OpenAPI

        :param concurrent_viewers: The concurrent_viewers of this RealTimeBreakdownValue.
        :param display_value: The display_value of this RealTimeBreakdownValue.
        :param metric_value: The metric_value of this RealTimeBreakdownValue.
        :param negative_impact: The negative_impact of this RealTimeBreakdownValue.
        :param value: The value of this RealTimeBreakdownValue.
        """
        self.openapi_types = {
            'concurrent_viewers': int,
            'display_value': str,
            'metric_value': float,
            'negative_impact': int,
            'value': str
        }

        self.attribute_map = {
            'concurrent_viewers': 'concurrent_viewers',
            'display_value': 'display_value',
            'metric_value': 'metric_value',
            'negative_impact': 'negative_impact',
            'value': 'value'
        }

        self._concurrent_viewers = concurrent_viewers
        self._display_value = display_value
        self._metric_value = metric_value
        self._negative_impact = negative_impact
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RealTimeBreakdownValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RealTimeBreakdownValue of this RealTimeBreakdownValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concurrent_viewers(self):
        """Gets the concurrent_viewers of this RealTimeBreakdownValue.


        :return: The concurrent_viewers of this RealTimeBreakdownValue.
        :rtype: int
        """
        return self._concurrent_viewers

    @concurrent_viewers.setter
    def concurrent_viewers(self, concurrent_viewers):
        """Sets the concurrent_viewers of this RealTimeBreakdownValue.


        :param concurrent_viewers: The concurrent_viewers of this RealTimeBreakdownValue.
        :type concurrent_viewers: int
        """

        self._concurrent_viewers = concurrent_viewers

    @property
    def display_value(self):
        """Gets the display_value of this RealTimeBreakdownValue.


        :return: The display_value of this RealTimeBreakdownValue.
        :rtype: str
        """
        return self._display_value

    @display_value.setter
    def display_value(self, display_value):
        """Sets the display_value of this RealTimeBreakdownValue.


        :param display_value: The display_value of this RealTimeBreakdownValue.
        :type display_value: str
        """

        self._display_value = display_value

    @property
    def metric_value(self):
        """Gets the metric_value of this RealTimeBreakdownValue.


        :return: The metric_value of this RealTimeBreakdownValue.
        :rtype: float
        """
        return self._metric_value

    @metric_value.setter
    def metric_value(self, metric_value):
        """Sets the metric_value of this RealTimeBreakdownValue.


        :param metric_value: The metric_value of this RealTimeBreakdownValue.
        :type metric_value: float
        """

        self._metric_value = metric_value

    @property
    def negative_impact(self):
        """Gets the negative_impact of this RealTimeBreakdownValue.


        :return: The negative_impact of this RealTimeBreakdownValue.
        :rtype: int
        """
        return self._negative_impact

    @negative_impact.setter
    def negative_impact(self, negative_impact):
        """Sets the negative_impact of this RealTimeBreakdownValue.


        :param negative_impact: The negative_impact of this RealTimeBreakdownValue.
        :type negative_impact: int
        """

        self._negative_impact = negative_impact

    @property
    def value(self):
        """Gets the value of this RealTimeBreakdownValue.


        :return: The value of this RealTimeBreakdownValue.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this RealTimeBreakdownValue.


        :param value: The value of this RealTimeBreakdownValue.
        :type value: str
        """

        self._value = value
