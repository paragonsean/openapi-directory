# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.broadcast_layout import BroadcastLayout
from openapi_server.models.broadcast_resolution import BroadcastResolution
from openapi_server.models.broadcast_status import BroadcastStatus
from openapi_server import util


class Broadcast(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background: str=None, id: str=None, layout: BroadcastLayout=BroadcastLayout.GALLERY, live_stream_id: str=None, passthrough: str=None, resolution: BroadcastResolution=BroadcastResolution.ENUM_1920X1080, status: BroadcastStatus=None):
        """Broadcast - a model defined in OpenAPI

        :param background: The background of this Broadcast.
        :param id: The id of this Broadcast.
        :param layout: The layout of this Broadcast.
        :param live_stream_id: The live_stream_id of this Broadcast.
        :param passthrough: The passthrough of this Broadcast.
        :param resolution: The resolution of this Broadcast.
        :param status: The status of this Broadcast.
        """
        self.openapi_types = {
            'background': str,
            'id': str,
            'layout': BroadcastLayout,
            'live_stream_id': str,
            'passthrough': str,
            'resolution': BroadcastResolution,
            'status': BroadcastStatus
        }

        self.attribute_map = {
            'background': 'background',
            'id': 'id',
            'layout': 'layout',
            'live_stream_id': 'live_stream_id',
            'passthrough': 'passthrough',
            'resolution': 'resolution',
            'status': 'status'
        }

        self._background = background
        self._id = id
        self._layout = layout
        self._live_stream_id = live_stream_id
        self._passthrough = passthrough
        self._resolution = resolution
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Broadcast':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Broadcast of this Broadcast.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background(self):
        """Gets the background of this Broadcast.

        URL of an image to display as the background of the broadcast. Its dimensions should match the provided resolution.

        :return: The background of this Broadcast.
        :rtype: str
        """
        return self._background

    @background.setter
    def background(self, background):
        """Sets the background of this Broadcast.

        URL of an image to display as the background of the broadcast. Its dimensions should match the provided resolution.

        :param background: The background of this Broadcast.
        :type background: str
        """

        self._background = background

    @property
    def id(self):
        """Gets the id of this Broadcast.

        Unique identifier for the broadcast. Max 255 characters.

        :return: The id of this Broadcast.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Broadcast.

        Unique identifier for the broadcast. Max 255 characters.

        :param id: The id of this Broadcast.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def layout(self):
        """Gets the layout of this Broadcast.


        :return: The layout of this Broadcast.
        :rtype: BroadcastLayout
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this Broadcast.


        :param layout: The layout of this Broadcast.
        :type layout: BroadcastLayout
        """
        if layout is None:
            raise ValueError("Invalid value for `layout`, must not be `None`")

        self._layout = layout

    @property
    def live_stream_id(self):
        """Gets the live_stream_id of this Broadcast.

        The ID of the live stream that the broadcast will be sent to.

        :return: The live_stream_id of this Broadcast.
        :rtype: str
        """
        return self._live_stream_id

    @live_stream_id.setter
    def live_stream_id(self, live_stream_id):
        """Sets the live_stream_id of this Broadcast.

        The ID of the live stream that the broadcast will be sent to.

        :param live_stream_id: The live_stream_id of this Broadcast.
        :type live_stream_id: str
        """
        if live_stream_id is None:
            raise ValueError("Invalid value for `live_stream_id`, must not be `None`")

        self._live_stream_id = live_stream_id

    @property
    def passthrough(self):
        """Gets the passthrough of this Broadcast.

        Arbitrary user-supplied metadata that will be included in the broadcast details and related webhooks. Max: 255 characters.

        :return: The passthrough of this Broadcast.
        :rtype: str
        """
        return self._passthrough

    @passthrough.setter
    def passthrough(self, passthrough):
        """Sets the passthrough of this Broadcast.

        Arbitrary user-supplied metadata that will be included in the broadcast details and related webhooks. Max: 255 characters.

        :param passthrough: The passthrough of this Broadcast.
        :type passthrough: str
        """

        self._passthrough = passthrough

    @property
    def resolution(self):
        """Gets the resolution of this Broadcast.


        :return: The resolution of this Broadcast.
        :rtype: BroadcastResolution
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Broadcast.


        :param resolution: The resolution of this Broadcast.
        :type resolution: BroadcastResolution
        """
        if resolution is None:
            raise ValueError("Invalid value for `resolution`, must not be `None`")

        self._resolution = resolution

    @property
    def status(self):
        """Gets the status of this Broadcast.


        :return: The status of this Broadcast.
        :rtype: BroadcastStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Broadcast.


        :param status: The status of this Broadcast.
        :type status: BroadcastStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
