# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MonitoringBreakdownTimeseriesDatapoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concurrent_viewers: int=None, metric_value: float=None, value: str=None):
        """MonitoringBreakdownTimeseriesDatapoint - a model defined in OpenAPI

        :param concurrent_viewers: The concurrent_viewers of this MonitoringBreakdownTimeseriesDatapoint.
        :param metric_value: The metric_value of this MonitoringBreakdownTimeseriesDatapoint.
        :param value: The value of this MonitoringBreakdownTimeseriesDatapoint.
        """
        self.openapi_types = {
            'concurrent_viewers': int,
            'metric_value': float,
            'value': str
        }

        self.attribute_map = {
            'concurrent_viewers': 'concurrent_viewers',
            'metric_value': 'metric_value',
            'value': 'value'
        }

        self._concurrent_viewers = concurrent_viewers
        self._metric_value = metric_value
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitoringBreakdownTimeseriesDatapoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonitoringBreakdownTimeseriesDatapoint of this MonitoringBreakdownTimeseriesDatapoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concurrent_viewers(self):
        """Gets the concurrent_viewers of this MonitoringBreakdownTimeseriesDatapoint.


        :return: The concurrent_viewers of this MonitoringBreakdownTimeseriesDatapoint.
        :rtype: int
        """
        return self._concurrent_viewers

    @concurrent_viewers.setter
    def concurrent_viewers(self, concurrent_viewers):
        """Sets the concurrent_viewers of this MonitoringBreakdownTimeseriesDatapoint.


        :param concurrent_viewers: The concurrent_viewers of this MonitoringBreakdownTimeseriesDatapoint.
        :type concurrent_viewers: int
        """

        self._concurrent_viewers = concurrent_viewers

    @property
    def metric_value(self):
        """Gets the metric_value of this MonitoringBreakdownTimeseriesDatapoint.


        :return: The metric_value of this MonitoringBreakdownTimeseriesDatapoint.
        :rtype: float
        """
        return self._metric_value

    @metric_value.setter
    def metric_value(self, metric_value):
        """Sets the metric_value of this MonitoringBreakdownTimeseriesDatapoint.


        :param metric_value: The metric_value of this MonitoringBreakdownTimeseriesDatapoint.
        :type metric_value: float
        """

        self._metric_value = metric_value

    @property
    def value(self):
        """Gets the value of this MonitoringBreakdownTimeseriesDatapoint.


        :return: The value of this MonitoringBreakdownTimeseriesDatapoint.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this MonitoringBreakdownTimeseriesDatapoint.


        :param value: The value of this MonitoringBreakdownTimeseriesDatapoint.
        :type value: str
        """

        self._value = value
