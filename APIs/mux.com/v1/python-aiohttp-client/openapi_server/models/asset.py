# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_errors import AssetErrors
from openapi_server.models.asset_master import AssetMaster
from openapi_server.models.asset_non_standard_input_reasons import AssetNonStandardInputReasons
from openapi_server.models.asset_recording_times_inner import AssetRecordingTimesInner
from openapi_server.models.asset_static_renditions import AssetStaticRenditions
from openapi_server.models.playback_id import PlaybackID
from openapi_server.models.track import Track
from openapi_server import util


class Asset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspect_ratio: str=None, created_at: str=None, duration: float=None, encoding_tier: str=None, errors: AssetErrors=None, id: str=None, is_live: bool=None, live_stream_id: str=None, master: AssetMaster=None, master_access: str='none', max_resolution_tier: str=None, max_stored_frame_rate: float=None, max_stored_resolution: str=None, mp4_support: str='none', non_standard_input_reasons: AssetNonStandardInputReasons=None, normalize_audio: bool=False, passthrough: str=None, per_title_encode: bool=None, playback_ids: List[PlaybackID]=None, recording_times: List[AssetRecordingTimesInner]=None, resolution_tier: str=None, source_asset_id: str=None, static_renditions: AssetStaticRenditions=None, status: str=None, test: bool=None, tracks: List[Track]=None, upload_id: str=None):
        """Asset - a model defined in OpenAPI

        :param aspect_ratio: The aspect_ratio of this Asset.
        :param created_at: The created_at of this Asset.
        :param duration: The duration of this Asset.
        :param encoding_tier: The encoding_tier of this Asset.
        :param errors: The errors of this Asset.
        :param id: The id of this Asset.
        :param is_live: The is_live of this Asset.
        :param live_stream_id: The live_stream_id of this Asset.
        :param master: The master of this Asset.
        :param master_access: The master_access of this Asset.
        :param max_resolution_tier: The max_resolution_tier of this Asset.
        :param max_stored_frame_rate: The max_stored_frame_rate of this Asset.
        :param max_stored_resolution: The max_stored_resolution of this Asset.
        :param mp4_support: The mp4_support of this Asset.
        :param non_standard_input_reasons: The non_standard_input_reasons of this Asset.
        :param normalize_audio: The normalize_audio of this Asset.
        :param passthrough: The passthrough of this Asset.
        :param per_title_encode: The per_title_encode of this Asset.
        :param playback_ids: The playback_ids of this Asset.
        :param recording_times: The recording_times of this Asset.
        :param resolution_tier: The resolution_tier of this Asset.
        :param source_asset_id: The source_asset_id of this Asset.
        :param static_renditions: The static_renditions of this Asset.
        :param status: The status of this Asset.
        :param test: The test of this Asset.
        :param tracks: The tracks of this Asset.
        :param upload_id: The upload_id of this Asset.
        """
        self.openapi_types = {
            'aspect_ratio': str,
            'created_at': str,
            'duration': float,
            'encoding_tier': str,
            'errors': AssetErrors,
            'id': str,
            'is_live': bool,
            'live_stream_id': str,
            'master': AssetMaster,
            'master_access': str,
            'max_resolution_tier': str,
            'max_stored_frame_rate': float,
            'max_stored_resolution': str,
            'mp4_support': str,
            'non_standard_input_reasons': AssetNonStandardInputReasons,
            'normalize_audio': bool,
            'passthrough': str,
            'per_title_encode': bool,
            'playback_ids': List[PlaybackID],
            'recording_times': List[AssetRecordingTimesInner],
            'resolution_tier': str,
            'source_asset_id': str,
            'static_renditions': AssetStaticRenditions,
            'status': str,
            'test': bool,
            'tracks': List[Track],
            'upload_id': str
        }

        self.attribute_map = {
            'aspect_ratio': 'aspect_ratio',
            'created_at': 'created_at',
            'duration': 'duration',
            'encoding_tier': 'encoding_tier',
            'errors': 'errors',
            'id': 'id',
            'is_live': 'is_live',
            'live_stream_id': 'live_stream_id',
            'master': 'master',
            'master_access': 'master_access',
            'max_resolution_tier': 'max_resolution_tier',
            'max_stored_frame_rate': 'max_stored_frame_rate',
            'max_stored_resolution': 'max_stored_resolution',
            'mp4_support': 'mp4_support',
            'non_standard_input_reasons': 'non_standard_input_reasons',
            'normalize_audio': 'normalize_audio',
            'passthrough': 'passthrough',
            'per_title_encode': 'per_title_encode',
            'playback_ids': 'playback_ids',
            'recording_times': 'recording_times',
            'resolution_tier': 'resolution_tier',
            'source_asset_id': 'source_asset_id',
            'static_renditions': 'static_renditions',
            'status': 'status',
            'test': 'test',
            'tracks': 'tracks',
            'upload_id': 'upload_id'
        }

        self._aspect_ratio = aspect_ratio
        self._created_at = created_at
        self._duration = duration
        self._encoding_tier = encoding_tier
        self._errors = errors
        self._id = id
        self._is_live = is_live
        self._live_stream_id = live_stream_id
        self._master = master
        self._master_access = master_access
        self._max_resolution_tier = max_resolution_tier
        self._max_stored_frame_rate = max_stored_frame_rate
        self._max_stored_resolution = max_stored_resolution
        self._mp4_support = mp4_support
        self._non_standard_input_reasons = non_standard_input_reasons
        self._normalize_audio = normalize_audio
        self._passthrough = passthrough
        self._per_title_encode = per_title_encode
        self._playback_ids = playback_ids
        self._recording_times = recording_times
        self._resolution_tier = resolution_tier
        self._source_asset_id = source_asset_id
        self._static_renditions = static_renditions
        self._status = status
        self._test = test
        self._tracks = tracks
        self._upload_id = upload_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Asset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Asset of this Asset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspect_ratio(self):
        """Gets the aspect_ratio of this Asset.

        The aspect ratio of the asset in the form of `width:height`, for example `16:9`.

        :return: The aspect_ratio of this Asset.
        :rtype: str
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio):
        """Sets the aspect_ratio of this Asset.

        The aspect ratio of the asset in the form of `width:height`, for example `16:9`.

        :param aspect_ratio: The aspect_ratio of this Asset.
        :type aspect_ratio: str
        """

        self._aspect_ratio = aspect_ratio

    @property
    def created_at(self):
        """Gets the created_at of this Asset.

        Time the Asset was created, defined as a Unix timestamp (seconds since epoch).

        :return: The created_at of this Asset.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Asset.

        Time the Asset was created, defined as a Unix timestamp (seconds since epoch).

        :param created_at: The created_at of this Asset.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def duration(self):
        """Gets the duration of this Asset.

        The duration of the asset in seconds (max duration for a single asset is 12 hours).

        :return: The duration of this Asset.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Asset.

        The duration of the asset in seconds (max duration for a single asset is 12 hours).

        :param duration: The duration of this Asset.
        :type duration: float
        """

        self._duration = duration

    @property
    def encoding_tier(self):
        """Gets the encoding_tier of this Asset.

        The encoding tier informs the cost, quality, and available platform features for the asset. By default the `smart` encoding tier is used.

        :return: The encoding_tier of this Asset.
        :rtype: str
        """
        return self._encoding_tier

    @encoding_tier.setter
    def encoding_tier(self, encoding_tier):
        """Sets the encoding_tier of this Asset.

        The encoding tier informs the cost, quality, and available platform features for the asset. By default the `smart` encoding tier is used.

        :param encoding_tier: The encoding_tier of this Asset.
        :type encoding_tier: str
        """
        allowed_values = ["smart", "baseline"]  # noqa: E501
        if encoding_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `encoding_tier` ({0}), must be one of {1}"
                .format(encoding_tier, allowed_values)
            )

        self._encoding_tier = encoding_tier

    @property
    def errors(self):
        """Gets the errors of this Asset.


        :return: The errors of this Asset.
        :rtype: AssetErrors
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this Asset.


        :param errors: The errors of this Asset.
        :type errors: AssetErrors
        """

        self._errors = errors

    @property
    def id(self):
        """Gets the id of this Asset.

        Unique identifier for the Asset. Max 255 characters.

        :return: The id of this Asset.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Asset.

        Unique identifier for the Asset. Max 255 characters.

        :param id: The id of this Asset.
        :type id: str
        """

        self._id = id

    @property
    def is_live(self):
        """Gets the is_live of this Asset.

        Indicates whether the live stream that created this asset is currently `active` and not in `idle` state. This is an optional parameter added when the asset is created from a live stream.

        :return: The is_live of this Asset.
        :rtype: bool
        """
        return self._is_live

    @is_live.setter
    def is_live(self, is_live):
        """Sets the is_live of this Asset.

        Indicates whether the live stream that created this asset is currently `active` and not in `idle` state. This is an optional parameter added when the asset is created from a live stream.

        :param is_live: The is_live of this Asset.
        :type is_live: bool
        """

        self._is_live = is_live

    @property
    def live_stream_id(self):
        """Gets the live_stream_id of this Asset.

        Unique identifier for the live stream. This is an optional parameter added when the asset is created from a live stream.

        :return: The live_stream_id of this Asset.
        :rtype: str
        """
        return self._live_stream_id

    @live_stream_id.setter
    def live_stream_id(self, live_stream_id):
        """Sets the live_stream_id of this Asset.

        Unique identifier for the live stream. This is an optional parameter added when the asset is created from a live stream.

        :param live_stream_id: The live_stream_id of this Asset.
        :type live_stream_id: str
        """

        self._live_stream_id = live_stream_id

    @property
    def master(self):
        """Gets the master of this Asset.


        :return: The master of this Asset.
        :rtype: AssetMaster
        """
        return self._master

    @master.setter
    def master(self, master):
        """Sets the master of this Asset.


        :param master: The master of this Asset.
        :type master: AssetMaster
        """

        self._master = master

    @property
    def master_access(self):
        """Gets the master_access of this Asset.


        :return: The master_access of this Asset.
        :rtype: str
        """
        return self._master_access

    @master_access.setter
    def master_access(self, master_access):
        """Sets the master_access of this Asset.


        :param master_access: The master_access of this Asset.
        :type master_access: str
        """
        allowed_values = ["temporary", "none"]  # noqa: E501
        if master_access not in allowed_values:
            raise ValueError(
                "Invalid value for `master_access` ({0}), must be one of {1}"
                .format(master_access, allowed_values)
            )

        self._master_access = master_access

    @property
    def max_resolution_tier(self):
        """Gets the max_resolution_tier of this Asset.

        Max resolution tier can be used to control the maximum `resolution_tier` your asset is encoded, stored, and streamed at. If not set, this defaults to `1080p`.

        :return: The max_resolution_tier of this Asset.
        :rtype: str
        """
        return self._max_resolution_tier

    @max_resolution_tier.setter
    def max_resolution_tier(self, max_resolution_tier):
        """Sets the max_resolution_tier of this Asset.

        Max resolution tier can be used to control the maximum `resolution_tier` your asset is encoded, stored, and streamed at. If not set, this defaults to `1080p`.

        :param max_resolution_tier: The max_resolution_tier of this Asset.
        :type max_resolution_tier: str
        """
        allowed_values = ["1080p", "1440p", "2160p"]  # noqa: E501
        if max_resolution_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `max_resolution_tier` ({0}), must be one of {1}"
                .format(max_resolution_tier, allowed_values)
            )

        self._max_resolution_tier = max_resolution_tier

    @property
    def max_stored_frame_rate(self):
        """Gets the max_stored_frame_rate of this Asset.

        The maximum frame rate that has been stored for the asset. The asset may be delivered at lower frame rates depending on the device and bandwidth, however it cannot be delivered at a higher value than is stored. This field may return -1 if the frame rate of the input cannot be reliably determined.

        :return: The max_stored_frame_rate of this Asset.
        :rtype: float
        """
        return self._max_stored_frame_rate

    @max_stored_frame_rate.setter
    def max_stored_frame_rate(self, max_stored_frame_rate):
        """Sets the max_stored_frame_rate of this Asset.

        The maximum frame rate that has been stored for the asset. The asset may be delivered at lower frame rates depending on the device and bandwidth, however it cannot be delivered at a higher value than is stored. This field may return -1 if the frame rate of the input cannot be reliably determined.

        :param max_stored_frame_rate: The max_stored_frame_rate of this Asset.
        :type max_stored_frame_rate: float
        """

        self._max_stored_frame_rate = max_stored_frame_rate

    @property
    def max_stored_resolution(self):
        """Gets the max_stored_resolution of this Asset.

        This field is deprecated. Please use `resolution_tier` instead. The maximum resolution that has been stored for the asset. The asset may be delivered at lower resolutions depending on the device and bandwidth, however it cannot be delivered at a higher value than is stored.

        :return: The max_stored_resolution of this Asset.
        :rtype: str
        """
        return self._max_stored_resolution

    @max_stored_resolution.setter
    def max_stored_resolution(self, max_stored_resolution):
        """Sets the max_stored_resolution of this Asset.

        This field is deprecated. Please use `resolution_tier` instead. The maximum resolution that has been stored for the asset. The asset may be delivered at lower resolutions depending on the device and bandwidth, however it cannot be delivered at a higher value than is stored.

        :param max_stored_resolution: The max_stored_resolution of this Asset.
        :type max_stored_resolution: str
        """
        allowed_values = ["Audio only", "SD", "HD", "FHD", "UHD"]  # noqa: E501
        if max_stored_resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `max_stored_resolution` ({0}), must be one of {1}"
                .format(max_stored_resolution, allowed_values)
            )

        self._max_stored_resolution = max_stored_resolution

    @property
    def mp4_support(self):
        """Gets the mp4_support of this Asset.


        :return: The mp4_support of this Asset.
        :rtype: str
        """
        return self._mp4_support

    @mp4_support.setter
    def mp4_support(self, mp4_support):
        """Sets the mp4_support of this Asset.


        :param mp4_support: The mp4_support of this Asset.
        :type mp4_support: str
        """
        allowed_values = ["standard", "none"]  # noqa: E501
        if mp4_support not in allowed_values:
            raise ValueError(
                "Invalid value for `mp4_support` ({0}), must be one of {1}"
                .format(mp4_support, allowed_values)
            )

        self._mp4_support = mp4_support

    @property
    def non_standard_input_reasons(self):
        """Gets the non_standard_input_reasons of this Asset.


        :return: The non_standard_input_reasons of this Asset.
        :rtype: AssetNonStandardInputReasons
        """
        return self._non_standard_input_reasons

    @non_standard_input_reasons.setter
    def non_standard_input_reasons(self, non_standard_input_reasons):
        """Sets the non_standard_input_reasons of this Asset.


        :param non_standard_input_reasons: The non_standard_input_reasons of this Asset.
        :type non_standard_input_reasons: AssetNonStandardInputReasons
        """

        self._non_standard_input_reasons = non_standard_input_reasons

    @property
    def normalize_audio(self):
        """Gets the normalize_audio of this Asset.

        Normalize the audio track loudness level. This parameter is only applicable to on-demand (not live) assets.

        :return: The normalize_audio of this Asset.
        :rtype: bool
        """
        return self._normalize_audio

    @normalize_audio.setter
    def normalize_audio(self, normalize_audio):
        """Sets the normalize_audio of this Asset.

        Normalize the audio track loudness level. This parameter is only applicable to on-demand (not live) assets.

        :param normalize_audio: The normalize_audio of this Asset.
        :type normalize_audio: bool
        """

        self._normalize_audio = normalize_audio

    @property
    def passthrough(self):
        """Gets the passthrough of this Asset.

        Arbitrary user-supplied metadata set for the asset. Max 255 characters.

        :return: The passthrough of this Asset.
        :rtype: str
        """
        return self._passthrough

    @passthrough.setter
    def passthrough(self, passthrough):
        """Sets the passthrough of this Asset.

        Arbitrary user-supplied metadata set for the asset. Max 255 characters.

        :param passthrough: The passthrough of this Asset.
        :type passthrough: str
        """

        self._passthrough = passthrough

    @property
    def per_title_encode(self):
        """Gets the per_title_encode of this Asset.


        :return: The per_title_encode of this Asset.
        :rtype: bool
        """
        return self._per_title_encode

    @per_title_encode.setter
    def per_title_encode(self, per_title_encode):
        """Sets the per_title_encode of this Asset.


        :param per_title_encode: The per_title_encode of this Asset.
        :type per_title_encode: bool
        """

        self._per_title_encode = per_title_encode

    @property
    def playback_ids(self):
        """Gets the playback_ids of this Asset.

        An array of Playback ID objects. Use these to create HLS playback URLs. See [Play your videos](https://docs.mux.com/guides/video/play-your-videos) for more details.

        :return: The playback_ids of this Asset.
        :rtype: List[PlaybackID]
        """
        return self._playback_ids

    @playback_ids.setter
    def playback_ids(self, playback_ids):
        """Sets the playback_ids of this Asset.

        An array of Playback ID objects. Use these to create HLS playback URLs. See [Play your videos](https://docs.mux.com/guides/video/play-your-videos) for more details.

        :param playback_ids: The playback_ids of this Asset.
        :type playback_ids: List[PlaybackID]
        """

        self._playback_ids = playback_ids

    @property
    def recording_times(self):
        """Gets the recording_times of this Asset.

        An array of individual live stream recording sessions. A recording session is created on each encoder connection during the live stream. Additionally any time slate media is inserted during brief interruptions in the live stream media or times when the live streaming software disconnects, a recording session representing the slate media will be added with a \"slate\" type.

        :return: The recording_times of this Asset.
        :rtype: List[AssetRecordingTimesInner]
        """
        return self._recording_times

    @recording_times.setter
    def recording_times(self, recording_times):
        """Sets the recording_times of this Asset.

        An array of individual live stream recording sessions. A recording session is created on each encoder connection during the live stream. Additionally any time slate media is inserted during brief interruptions in the live stream media or times when the live streaming software disconnects, a recording session representing the slate media will be added with a \"slate\" type.

        :param recording_times: The recording_times of this Asset.
        :type recording_times: List[AssetRecordingTimesInner]
        """

        self._recording_times = recording_times

    @property
    def resolution_tier(self):
        """Gets the resolution_tier of this Asset.

        The resolution tier that the asset was ingested at, affecting billing for ingest & storage. This field also represents the highest resolution tier that the content can be delivered at, however the actual resolution may be lower depending on the device, bandwidth, and exact resolution of the uploaded asset.

        :return: The resolution_tier of this Asset.
        :rtype: str
        """
        return self._resolution_tier

    @resolution_tier.setter
    def resolution_tier(self, resolution_tier):
        """Sets the resolution_tier of this Asset.

        The resolution tier that the asset was ingested at, affecting billing for ingest & storage. This field also represents the highest resolution tier that the content can be delivered at, however the actual resolution may be lower depending on the device, bandwidth, and exact resolution of the uploaded asset.

        :param resolution_tier: The resolution_tier of this Asset.
        :type resolution_tier: str
        """
        allowed_values = ["audio-only", "720p", "1080p", "1440p", "2160p"]  # noqa: E501
        if resolution_tier not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution_tier` ({0}), must be one of {1}"
                .format(resolution_tier, allowed_values)
            )

        self._resolution_tier = resolution_tier

    @property
    def source_asset_id(self):
        """Gets the source_asset_id of this Asset.

        Asset Identifier of the video used as the source for creating the clip.

        :return: The source_asset_id of this Asset.
        :rtype: str
        """
        return self._source_asset_id

    @source_asset_id.setter
    def source_asset_id(self, source_asset_id):
        """Sets the source_asset_id of this Asset.

        Asset Identifier of the video used as the source for creating the clip.

        :param source_asset_id: The source_asset_id of this Asset.
        :type source_asset_id: str
        """

        self._source_asset_id = source_asset_id

    @property
    def static_renditions(self):
        """Gets the static_renditions of this Asset.


        :return: The static_renditions of this Asset.
        :rtype: AssetStaticRenditions
        """
        return self._static_renditions

    @static_renditions.setter
    def static_renditions(self, static_renditions):
        """Sets the static_renditions of this Asset.


        :param static_renditions: The static_renditions of this Asset.
        :type static_renditions: AssetStaticRenditions
        """

        self._static_renditions = static_renditions

    @property
    def status(self):
        """Gets the status of this Asset.

        The status of the asset.

        :return: The status of this Asset.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Asset.

        The status of the asset.

        :param status: The status of this Asset.
        :type status: str
        """
        allowed_values = ["preparing", "ready", "errored"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def test(self):
        """Gets the test of this Asset.

        True means this live stream is a test asset. A test asset can help evaluate the Mux Video APIs without incurring any cost. There is no limit on number of test assets created. Test assets are watermarked with the Mux logo, limited to 10 seconds, and deleted after 24 hrs.

        :return: The test of this Asset.
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this Asset.

        True means this live stream is a test asset. A test asset can help evaluate the Mux Video APIs without incurring any cost. There is no limit on number of test assets created. Test assets are watermarked with the Mux logo, limited to 10 seconds, and deleted after 24 hrs.

        :param test: The test of this Asset.
        :type test: bool
        """

        self._test = test

    @property
    def tracks(self):
        """Gets the tracks of this Asset.

        The individual media tracks that make up an asset.

        :return: The tracks of this Asset.
        :rtype: List[Track]
        """
        return self._tracks

    @tracks.setter
    def tracks(self, tracks):
        """Sets the tracks of this Asset.

        The individual media tracks that make up an asset.

        :param tracks: The tracks of this Asset.
        :type tracks: List[Track]
        """

        self._tracks = tracks

    @property
    def upload_id(self):
        """Gets the upload_id of this Asset.

        Unique identifier for the Direct Upload. This is an optional parameter added when the asset is created from a direct upload.

        :return: The upload_id of this Asset.
        :rtype: str
        """
        return self._upload_id

    @upload_id.setter
    def upload_id(self, upload_id):
        """Sets the upload_id of this Asset.

        Unique identifier for the Direct Upload. This is an optional parameter added when the asset is created from a direct upload.

        :param upload_id: The upload_id of this Asset.
        :type upload_id: str
        """

        self._upload_id = upload_id
