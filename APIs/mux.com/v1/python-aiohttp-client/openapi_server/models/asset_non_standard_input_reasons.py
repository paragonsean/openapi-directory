# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetNonStandardInputReasons(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_codec: str=None, audio_edit_list: str=None, pixel_aspect_ratio: str=None, unexpected_media_file_parameters: str=None, unsupported_pixel_format: str=None, video_bitrate: str=None, video_codec: str=None, video_edit_list: str=None, video_frame_rate: str=None, video_gop_size: str=None, video_resolution: str=None):
        """AssetNonStandardInputReasons - a model defined in OpenAPI

        :param audio_codec: The audio_codec of this AssetNonStandardInputReasons.
        :param audio_edit_list: The audio_edit_list of this AssetNonStandardInputReasons.
        :param pixel_aspect_ratio: The pixel_aspect_ratio of this AssetNonStandardInputReasons.
        :param unexpected_media_file_parameters: The unexpected_media_file_parameters of this AssetNonStandardInputReasons.
        :param unsupported_pixel_format: The unsupported_pixel_format of this AssetNonStandardInputReasons.
        :param video_bitrate: The video_bitrate of this AssetNonStandardInputReasons.
        :param video_codec: The video_codec of this AssetNonStandardInputReasons.
        :param video_edit_list: The video_edit_list of this AssetNonStandardInputReasons.
        :param video_frame_rate: The video_frame_rate of this AssetNonStandardInputReasons.
        :param video_gop_size: The video_gop_size of this AssetNonStandardInputReasons.
        :param video_resolution: The video_resolution of this AssetNonStandardInputReasons.
        """
        self.openapi_types = {
            'audio_codec': str,
            'audio_edit_list': str,
            'pixel_aspect_ratio': str,
            'unexpected_media_file_parameters': str,
            'unsupported_pixel_format': str,
            'video_bitrate': str,
            'video_codec': str,
            'video_edit_list': str,
            'video_frame_rate': str,
            'video_gop_size': str,
            'video_resolution': str
        }

        self.attribute_map = {
            'audio_codec': 'audio_codec',
            'audio_edit_list': 'audio_edit_list',
            'pixel_aspect_ratio': 'pixel_aspect_ratio',
            'unexpected_media_file_parameters': 'unexpected_media_file_parameters',
            'unsupported_pixel_format': 'unsupported_pixel_format',
            'video_bitrate': 'video_bitrate',
            'video_codec': 'video_codec',
            'video_edit_list': 'video_edit_list',
            'video_frame_rate': 'video_frame_rate',
            'video_gop_size': 'video_gop_size',
            'video_resolution': 'video_resolution'
        }

        self._audio_codec = audio_codec
        self._audio_edit_list = audio_edit_list
        self._pixel_aspect_ratio = pixel_aspect_ratio
        self._unexpected_media_file_parameters = unexpected_media_file_parameters
        self._unsupported_pixel_format = unsupported_pixel_format
        self._video_bitrate = video_bitrate
        self._video_codec = video_codec
        self._video_edit_list = video_edit_list
        self._video_frame_rate = video_frame_rate
        self._video_gop_size = video_gop_size
        self._video_resolution = video_resolution

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetNonStandardInputReasons':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Asset_non_standard_input_reasons of this AssetNonStandardInputReasons.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_codec(self):
        """Gets the audio_codec of this AssetNonStandardInputReasons.

        The audio codec used on the input file. Non-AAC audio codecs are non-standard.

        :return: The audio_codec of this AssetNonStandardInputReasons.
        :rtype: str
        """
        return self._audio_codec

    @audio_codec.setter
    def audio_codec(self, audio_codec):
        """Sets the audio_codec of this AssetNonStandardInputReasons.

        The audio codec used on the input file. Non-AAC audio codecs are non-standard.

        :param audio_codec: The audio_codec of this AssetNonStandardInputReasons.
        :type audio_codec: str
        """

        self._audio_codec = audio_codec

    @property
    def audio_edit_list(self):
        """Gets the audio_edit_list of this AssetNonStandardInputReasons.

        Audio Edit List reason indicates that the input file's audio track contains a complex Edit Decision List.

        :return: The audio_edit_list of this AssetNonStandardInputReasons.
        :rtype: str
        """
        return self._audio_edit_list

    @audio_edit_list.setter
    def audio_edit_list(self, audio_edit_list):
        """Sets the audio_edit_list of this AssetNonStandardInputReasons.

        Audio Edit List reason indicates that the input file's audio track contains a complex Edit Decision List.

        :param audio_edit_list: The audio_edit_list of this AssetNonStandardInputReasons.
        :type audio_edit_list: str
        """
        allowed_values = ["non-standard"]  # noqa: E501
        if audio_edit_list not in allowed_values:
            raise ValueError(
                "Invalid value for `audio_edit_list` ({0}), must be one of {1}"
                .format(audio_edit_list, allowed_values)
            )

        self._audio_edit_list = audio_edit_list

    @property
    def pixel_aspect_ratio(self):
        """Gets the pixel_aspect_ratio of this AssetNonStandardInputReasons.

        The video pixel aspect ratio of the input file.

        :return: The pixel_aspect_ratio of this AssetNonStandardInputReasons.
        :rtype: str
        """
        return self._pixel_aspect_ratio

    @pixel_aspect_ratio.setter
    def pixel_aspect_ratio(self, pixel_aspect_ratio):
        """Sets the pixel_aspect_ratio of this AssetNonStandardInputReasons.

        The video pixel aspect ratio of the input file.

        :param pixel_aspect_ratio: The pixel_aspect_ratio of this AssetNonStandardInputReasons.
        :type pixel_aspect_ratio: str
        """

        self._pixel_aspect_ratio = pixel_aspect_ratio

    @property
    def unexpected_media_file_parameters(self):
        """Gets the unexpected_media_file_parameters of this AssetNonStandardInputReasons.

        A catch-all reason when the input file in created with non-standard encoding parameters.

        :return: The unexpected_media_file_parameters of this AssetNonStandardInputReasons.
        :rtype: str
        """
        return self._unexpected_media_file_parameters

    @unexpected_media_file_parameters.setter
    def unexpected_media_file_parameters(self, unexpected_media_file_parameters):
        """Sets the unexpected_media_file_parameters of this AssetNonStandardInputReasons.

        A catch-all reason when the input file in created with non-standard encoding parameters.

        :param unexpected_media_file_parameters: The unexpected_media_file_parameters of this AssetNonStandardInputReasons.
        :type unexpected_media_file_parameters: str
        """
        allowed_values = ["non-standard"]  # noqa: E501
        if unexpected_media_file_parameters not in allowed_values:
            raise ValueError(
                "Invalid value for `unexpected_media_file_parameters` ({0}), must be one of {1}"
                .format(unexpected_media_file_parameters, allowed_values)
            )

        self._unexpected_media_file_parameters = unexpected_media_file_parameters

    @property
    def unsupported_pixel_format(self):
        """Gets the unsupported_pixel_format of this AssetNonStandardInputReasons.

        The video pixel format, as a string, returned by libav. Considered non-standard if not one of yuv420p or yuvj420p.

        :return: The unsupported_pixel_format of this AssetNonStandardInputReasons.
        :rtype: str
        """
        return self._unsupported_pixel_format

    @unsupported_pixel_format.setter
    def unsupported_pixel_format(self, unsupported_pixel_format):
        """Sets the unsupported_pixel_format of this AssetNonStandardInputReasons.

        The video pixel format, as a string, returned by libav. Considered non-standard if not one of yuv420p or yuvj420p.

        :param unsupported_pixel_format: The unsupported_pixel_format of this AssetNonStandardInputReasons.
        :type unsupported_pixel_format: str
        """

        self._unsupported_pixel_format = unsupported_pixel_format

    @property
    def video_bitrate(self):
        """Gets the video_bitrate of this AssetNonStandardInputReasons.

        The video bitrate of the input file is `high`. This parameter is present when the average bitrate of any key frame interval (also known as Group of Pictures or GOP) is higher than what's considered standard which typically is 16 Mbps.

        :return: The video_bitrate of this AssetNonStandardInputReasons.
        :rtype: str
        """
        return self._video_bitrate

    @video_bitrate.setter
    def video_bitrate(self, video_bitrate):
        """Sets the video_bitrate of this AssetNonStandardInputReasons.

        The video bitrate of the input file is `high`. This parameter is present when the average bitrate of any key frame interval (also known as Group of Pictures or GOP) is higher than what's considered standard which typically is 16 Mbps.

        :param video_bitrate: The video_bitrate of this AssetNonStandardInputReasons.
        :type video_bitrate: str
        """
        allowed_values = ["high"]  # noqa: E501
        if video_bitrate not in allowed_values:
            raise ValueError(
                "Invalid value for `video_bitrate` ({0}), must be one of {1}"
                .format(video_bitrate, allowed_values)
            )

        self._video_bitrate = video_bitrate

    @property
    def video_codec(self):
        """Gets the video_codec of this AssetNonStandardInputReasons.

        The video codec used on the input file. For example, the input file encoded with `hevc` video codec is non-standard and the value of this parameter is `hevc`.

        :return: The video_codec of this AssetNonStandardInputReasons.
        :rtype: str
        """
        return self._video_codec

    @video_codec.setter
    def video_codec(self, video_codec):
        """Sets the video_codec of this AssetNonStandardInputReasons.

        The video codec used on the input file. For example, the input file encoded with `hevc` video codec is non-standard and the value of this parameter is `hevc`.

        :param video_codec: The video_codec of this AssetNonStandardInputReasons.
        :type video_codec: str
        """

        self._video_codec = video_codec

    @property
    def video_edit_list(self):
        """Gets the video_edit_list of this AssetNonStandardInputReasons.

        Video Edit List reason indicates that the input file's video track contains a complex Edit Decision List.

        :return: The video_edit_list of this AssetNonStandardInputReasons.
        :rtype: str
        """
        return self._video_edit_list

    @video_edit_list.setter
    def video_edit_list(self, video_edit_list):
        """Sets the video_edit_list of this AssetNonStandardInputReasons.

        Video Edit List reason indicates that the input file's video track contains a complex Edit Decision List.

        :param video_edit_list: The video_edit_list of this AssetNonStandardInputReasons.
        :type video_edit_list: str
        """
        allowed_values = ["non-standard"]  # noqa: E501
        if video_edit_list not in allowed_values:
            raise ValueError(
                "Invalid value for `video_edit_list` ({0}), must be one of {1}"
                .format(video_edit_list, allowed_values)
            )

        self._video_edit_list = video_edit_list

    @property
    def video_frame_rate(self):
        """Gets the video_frame_rate of this AssetNonStandardInputReasons.

        The video frame rate of the input file. Video with average frames per second (fps) less than 5 or greater than 120 is non-standard. A `-1` frame rate value indicates Mux could not determine the frame rate of the video track.

        :return: The video_frame_rate of this AssetNonStandardInputReasons.
        :rtype: str
        """
        return self._video_frame_rate

    @video_frame_rate.setter
    def video_frame_rate(self, video_frame_rate):
        """Sets the video_frame_rate of this AssetNonStandardInputReasons.

        The video frame rate of the input file. Video with average frames per second (fps) less than 5 or greater than 120 is non-standard. A `-1` frame rate value indicates Mux could not determine the frame rate of the video track.

        :param video_frame_rate: The video_frame_rate of this AssetNonStandardInputReasons.
        :type video_frame_rate: str
        """

        self._video_frame_rate = video_frame_rate

    @property
    def video_gop_size(self):
        """Gets the video_gop_size of this AssetNonStandardInputReasons.

        The video key frame Interval (also called as Group of Picture or GOP) of the input file is `high`. This parameter is present when the gop is greater than 20 seconds.

        :return: The video_gop_size of this AssetNonStandardInputReasons.
        :rtype: str
        """
        return self._video_gop_size

    @video_gop_size.setter
    def video_gop_size(self, video_gop_size):
        """Sets the video_gop_size of this AssetNonStandardInputReasons.

        The video key frame Interval (also called as Group of Picture or GOP) of the input file is `high`. This parameter is present when the gop is greater than 20 seconds.

        :param video_gop_size: The video_gop_size of this AssetNonStandardInputReasons.
        :type video_gop_size: str
        """
        allowed_values = ["high"]  # noqa: E501
        if video_gop_size not in allowed_values:
            raise ValueError(
                "Invalid value for `video_gop_size` ({0}), must be one of {1}"
                .format(video_gop_size, allowed_values)
            )

        self._video_gop_size = video_gop_size

    @property
    def video_resolution(self):
        """Gets the video_resolution of this AssetNonStandardInputReasons.

        The video resolution of the input file. Video resolution higher than 2048 pixels on any one dimension (height or width) is considered non-standard, The resolution value is presented as `width` x `height` in pixels.

        :return: The video_resolution of this AssetNonStandardInputReasons.
        :rtype: str
        """
        return self._video_resolution

    @video_resolution.setter
    def video_resolution(self, video_resolution):
        """Sets the video_resolution of this AssetNonStandardInputReasons.

        The video resolution of the input file. Video resolution higher than 2048 pixels on any one dimension (height or width) is considered non-standard, The resolution value is presented as `width` x `height` in pixels.

        :param video_resolution: The video_resolution of this AssetNonStandardInputReasons.
        :type video_resolution: str
        """

        self._video_resolution = video_resolution
