# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetGeneratedSubtitleSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_code: str='en', name: str=None, passthrough: str=None):
        """AssetGeneratedSubtitleSettings - a model defined in OpenAPI

        :param language_code: The language_code of this AssetGeneratedSubtitleSettings.
        :param name: The name of this AssetGeneratedSubtitleSettings.
        :param passthrough: The passthrough of this AssetGeneratedSubtitleSettings.
        """
        self.openapi_types = {
            'language_code': str,
            'name': str,
            'passthrough': str
        }

        self.attribute_map = {
            'language_code': 'language_code',
            'name': 'name',
            'passthrough': 'passthrough'
        }

        self._language_code = language_code
        self._name = name
        self._passthrough = passthrough

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetGeneratedSubtitleSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssetGeneratedSubtitleSettings of this AssetGeneratedSubtitleSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_code(self):
        """Gets the language_code of this AssetGeneratedSubtitleSettings.

        The language to generate subtitles in.

        :return: The language_code of this AssetGeneratedSubtitleSettings.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this AssetGeneratedSubtitleSettings.

        The language to generate subtitles in.

        :param language_code: The language_code of this AssetGeneratedSubtitleSettings.
        :type language_code: str
        """
        allowed_values = ["en", "en-US"]  # noqa: E501
        if language_code not in allowed_values:
            raise ValueError(
                "Invalid value for `language_code` ({0}), must be one of {1}"
                .format(language_code, allowed_values)
            )

        self._language_code = language_code

    @property
    def name(self):
        """Gets the name of this AssetGeneratedSubtitleSettings.

        A name for this subtitle track.

        :return: The name of this AssetGeneratedSubtitleSettings.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssetGeneratedSubtitleSettings.

        A name for this subtitle track.

        :param name: The name of this AssetGeneratedSubtitleSettings.
        :type name: str
        """

        self._name = name

    @property
    def passthrough(self):
        """Gets the passthrough of this AssetGeneratedSubtitleSettings.

        Arbitrary metadata set for the subtitle track. Max 255 characters.

        :return: The passthrough of this AssetGeneratedSubtitleSettings.
        :rtype: str
        """
        return self._passthrough

    @passthrough.setter
    def passthrough(self, passthrough):
        """Sets the passthrough of this AssetGeneratedSubtitleSettings.

        Arbitrary metadata set for the subtitle track. Max 255 characters.

        :param passthrough: The passthrough of this AssetGeneratedSubtitleSettings.
        :type passthrough: str
        """

        self._passthrough = passthrough
