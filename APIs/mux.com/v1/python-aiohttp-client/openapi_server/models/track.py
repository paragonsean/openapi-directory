# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Track(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closed_captions: bool=None, duration: float=None, id: str=None, language_code: str=None, max_channel_layout: str=None, max_channels: int=None, max_frame_rate: float=None, max_height: int=None, max_width: int=None, name: str=None, passthrough: str=None, status: str=None, text_source: str=None, text_type: str=None, type: str=None):
        """Track - a model defined in OpenAPI

        :param closed_captions: The closed_captions of this Track.
        :param duration: The duration of this Track.
        :param id: The id of this Track.
        :param language_code: The language_code of this Track.
        :param max_channel_layout: The max_channel_layout of this Track.
        :param max_channels: The max_channels of this Track.
        :param max_frame_rate: The max_frame_rate of this Track.
        :param max_height: The max_height of this Track.
        :param max_width: The max_width of this Track.
        :param name: The name of this Track.
        :param passthrough: The passthrough of this Track.
        :param status: The status of this Track.
        :param text_source: The text_source of this Track.
        :param text_type: The text_type of this Track.
        :param type: The type of this Track.
        """
        self.openapi_types = {
            'closed_captions': bool,
            'duration': float,
            'id': str,
            'language_code': str,
            'max_channel_layout': str,
            'max_channels': int,
            'max_frame_rate': float,
            'max_height': int,
            'max_width': int,
            'name': str,
            'passthrough': str,
            'status': str,
            'text_source': str,
            'text_type': str,
            'type': str
        }

        self.attribute_map = {
            'closed_captions': 'closed_captions',
            'duration': 'duration',
            'id': 'id',
            'language_code': 'language_code',
            'max_channel_layout': 'max_channel_layout',
            'max_channels': 'max_channels',
            'max_frame_rate': 'max_frame_rate',
            'max_height': 'max_height',
            'max_width': 'max_width',
            'name': 'name',
            'passthrough': 'passthrough',
            'status': 'status',
            'text_source': 'text_source',
            'text_type': 'text_type',
            'type': 'type'
        }

        self._closed_captions = closed_captions
        self._duration = duration
        self._id = id
        self._language_code = language_code
        self._max_channel_layout = max_channel_layout
        self._max_channels = max_channels
        self._max_frame_rate = max_frame_rate
        self._max_height = max_height
        self._max_width = max_width
        self._name = name
        self._passthrough = passthrough
        self._status = status
        self._text_source = text_source
        self._text_type = text_type
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Track':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Track of this Track.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closed_captions(self):
        """Gets the closed_captions of this Track.

        Indicates the track provides Subtitles for the Deaf or Hard-of-hearing (SDH). This parameter is only set tracks where `type` is `text` and `text_type` is `subtitles`.

        :return: The closed_captions of this Track.
        :rtype: bool
        """
        return self._closed_captions

    @closed_captions.setter
    def closed_captions(self, closed_captions):
        """Sets the closed_captions of this Track.

        Indicates the track provides Subtitles for the Deaf or Hard-of-hearing (SDH). This parameter is only set tracks where `type` is `text` and `text_type` is `subtitles`.

        :param closed_captions: The closed_captions of this Track.
        :type closed_captions: bool
        """

        self._closed_captions = closed_captions

    @property
    def duration(self):
        """Gets the duration of this Track.

        The duration in seconds of the track media. This parameter is not set for `text` type tracks. This field is optional and may not be set. The top level `duration` field of an asset will always be set.

        :return: The duration of this Track.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Track.

        The duration in seconds of the track media. This parameter is not set for `text` type tracks. This field is optional and may not be set. The top level `duration` field of an asset will always be set.

        :param duration: The duration of this Track.
        :type duration: float
        """

        self._duration = duration

    @property
    def id(self):
        """Gets the id of this Track.

        Unique identifier for the Track

        :return: The id of this Track.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Track.

        Unique identifier for the Track

        :param id: The id of this Track.
        :type id: str
        """

        self._id = id

    @property
    def language_code(self):
        """Gets the language_code of this Track.

        The language code value represents [BCP 47](https://tools.ietf.org/html/bcp47) specification compliant value. For example, `en` for English or `en-US` for the US version of English. This parameter is only set for `text` and `audio` track types.

        :return: The language_code of this Track.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this Track.

        The language code value represents [BCP 47](https://tools.ietf.org/html/bcp47) specification compliant value. For example, `en` for English or `en-US` for the US version of English. This parameter is only set for `text` and `audio` track types.

        :param language_code: The language_code of this Track.
        :type language_code: str
        """

        self._language_code = language_code

    @property
    def max_channel_layout(self):
        """Gets the max_channel_layout of this Track.

        Only set for the `audio` type track.

        :return: The max_channel_layout of this Track.
        :rtype: str
        """
        return self._max_channel_layout

    @max_channel_layout.setter
    def max_channel_layout(self, max_channel_layout):
        """Sets the max_channel_layout of this Track.

        Only set for the `audio` type track.

        :param max_channel_layout: The max_channel_layout of this Track.
        :type max_channel_layout: str
        """

        self._max_channel_layout = max_channel_layout

    @property
    def max_channels(self):
        """Gets the max_channels of this Track.

        The maximum number of audio channels the track supports. Only set for the `audio` type track.

        :return: The max_channels of this Track.
        :rtype: int
        """
        return self._max_channels

    @max_channels.setter
    def max_channels(self, max_channels):
        """Sets the max_channels of this Track.

        The maximum number of audio channels the track supports. Only set for the `audio` type track.

        :param max_channels: The max_channels of this Track.
        :type max_channels: int
        """

        self._max_channels = max_channels

    @property
    def max_frame_rate(self):
        """Gets the max_frame_rate of this Track.

        The maximum frame rate available for the track. Only set for the `video` type track. This field may return `-1` if the frame rate of the input cannot be reliably determined.

        :return: The max_frame_rate of this Track.
        :rtype: float
        """
        return self._max_frame_rate

    @max_frame_rate.setter
    def max_frame_rate(self, max_frame_rate):
        """Sets the max_frame_rate of this Track.

        The maximum frame rate available for the track. Only set for the `video` type track. This field may return `-1` if the frame rate of the input cannot be reliably determined.

        :param max_frame_rate: The max_frame_rate of this Track.
        :type max_frame_rate: float
        """

        self._max_frame_rate = max_frame_rate

    @property
    def max_height(self):
        """Gets the max_height of this Track.

        The maximum height in pixels available for the track. Only set for the `video` type track.

        :return: The max_height of this Track.
        :rtype: int
        """
        return self._max_height

    @max_height.setter
    def max_height(self, max_height):
        """Sets the max_height of this Track.

        The maximum height in pixels available for the track. Only set for the `video` type track.

        :param max_height: The max_height of this Track.
        :type max_height: int
        """

        self._max_height = max_height

    @property
    def max_width(self):
        """Gets the max_width of this Track.

        The maximum width in pixels available for the track. Only set for the `video` type track.

        :return: The max_width of this Track.
        :rtype: int
        """
        return self._max_width

    @max_width.setter
    def max_width(self, max_width):
        """Sets the max_width of this Track.

        The maximum width in pixels available for the track. Only set for the `video` type track.

        :param max_width: The max_width of this Track.
        :type max_width: int
        """

        self._max_width = max_width

    @property
    def name(self):
        """Gets the name of this Track.

        The name of the track containing a human-readable description. The HLS manifest will associate a subtitle `text` or `audio` track with this value. For example, the value should be \"English\" for a subtitle text track for the `language_code` value of `en-US`. This parameter is only set for `text` and `audio` track types.

        :return: The name of this Track.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Track.

        The name of the track containing a human-readable description. The HLS manifest will associate a subtitle `text` or `audio` track with this value. For example, the value should be \"English\" for a subtitle text track for the `language_code` value of `en-US`. This parameter is only set for `text` and `audio` track types.

        :param name: The name of this Track.
        :type name: str
        """

        self._name = name

    @property
    def passthrough(self):
        """Gets the passthrough of this Track.

        Arbitrary user-supplied metadata set for the track either when creating the asset or track. This parameter is only set for `text` type tracks. Max 255 characters.

        :return: The passthrough of this Track.
        :rtype: str
        """
        return self._passthrough

    @passthrough.setter
    def passthrough(self, passthrough):
        """Sets the passthrough of this Track.

        Arbitrary user-supplied metadata set for the track either when creating the asset or track. This parameter is only set for `text` type tracks. Max 255 characters.

        :param passthrough: The passthrough of this Track.
        :type passthrough: str
        """

        self._passthrough = passthrough

    @property
    def status(self):
        """Gets the status of this Track.

        The status of the track. This parameter is only set for `text` type tracks.

        :return: The status of this Track.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Track.

        The status of the track. This parameter is only set for `text` type tracks.

        :param status: The status of this Track.
        :type status: str
        """
        allowed_values = ["preparing", "ready", "errored", "deleted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def text_source(self):
        """Gets the text_source of this Track.

        The source of the text contained in a Track of type `text`. Valid `text_source` values are listed below. * `uploaded`: Tracks uploaded to Mux as caption or subtitle files using the Create Asset Track API. * `embedded`: Tracks extracted from an embedded stream of CEA-608 closed captions. * `generated_vod`: Tracks generated by automatic speech recognition on an on-demand asset. * `generated_live`: Tracks generated by automatic speech recognition on a live stream configured with `generated_subtitles`. If an Asset has both `generated_live` and `generated_live_final` tracks that are `ready`, then only the `generated_live_final` track will be included during playback. * `generated_live_final`: Tracks generated by automatic speech recognition on a live stream using `generated_subtitles`. The accuracy, timing, and formatting of these subtitles is improved compared to the corresponding `generated_live` tracks. However, `generated_live_final` tracks will not be available in `ready` status until the live stream ends. If an Asset has both `generated_live` and `generated_live_final` tracks that are `ready`, then only the `generated_live_final` track will be included during playback. 

        :return: The text_source of this Track.
        :rtype: str
        """
        return self._text_source

    @text_source.setter
    def text_source(self, text_source):
        """Sets the text_source of this Track.

        The source of the text contained in a Track of type `text`. Valid `text_source` values are listed below. * `uploaded`: Tracks uploaded to Mux as caption or subtitle files using the Create Asset Track API. * `embedded`: Tracks extracted from an embedded stream of CEA-608 closed captions. * `generated_vod`: Tracks generated by automatic speech recognition on an on-demand asset. * `generated_live`: Tracks generated by automatic speech recognition on a live stream configured with `generated_subtitles`. If an Asset has both `generated_live` and `generated_live_final` tracks that are `ready`, then only the `generated_live_final` track will be included during playback. * `generated_live_final`: Tracks generated by automatic speech recognition on a live stream using `generated_subtitles`. The accuracy, timing, and formatting of these subtitles is improved compared to the corresponding `generated_live` tracks. However, `generated_live_final` tracks will not be available in `ready` status until the live stream ends. If an Asset has both `generated_live` and `generated_live_final` tracks that are `ready`, then only the `generated_live_final` track will be included during playback. 

        :param text_source: The text_source of this Track.
        :type text_source: str
        """
        allowed_values = ["uploaded", "embedded", "generated_live", "generated_live_final"]  # noqa: E501
        if text_source not in allowed_values:
            raise ValueError(
                "Invalid value for `text_source` ({0}), must be one of {1}"
                .format(text_source, allowed_values)
            )

        self._text_source = text_source

    @property
    def text_type(self):
        """Gets the text_type of this Track.

        This parameter is only set for `text` type tracks.

        :return: The text_type of this Track.
        :rtype: str
        """
        return self._text_type

    @text_type.setter
    def text_type(self, text_type):
        """Sets the text_type of this Track.

        This parameter is only set for `text` type tracks.

        :param text_type: The text_type of this Track.
        :type text_type: str
        """
        allowed_values = ["subtitles"]  # noqa: E501
        if text_type not in allowed_values:
            raise ValueError(
                "Invalid value for `text_type` ({0}), must be one of {1}"
                .format(text_type, allowed_values)
            )

        self._text_type = text_type

    @property
    def type(self):
        """Gets the type of this Track.

        The type of track

        :return: The type of this Track.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Track.

        The type of track

        :param type: The type of this Track.
        :type type: str
        """
        allowed_values = ["video", "audio", "text"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
