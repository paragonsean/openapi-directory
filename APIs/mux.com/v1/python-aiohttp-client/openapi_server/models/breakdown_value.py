# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BreakdownValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field: str=None, negative_impact: int=None, total_watch_time: int=None, value: float=None, views: int=None):
        """BreakdownValue - a model defined in OpenAPI

        :param _field: The _field of this BreakdownValue.
        :param negative_impact: The negative_impact of this BreakdownValue.
        :param total_watch_time: The total_watch_time of this BreakdownValue.
        :param value: The value of this BreakdownValue.
        :param views: The views of this BreakdownValue.
        """
        self.openapi_types = {
            '_field': str,
            'negative_impact': int,
            'total_watch_time': int,
            'value': float,
            'views': int
        }

        self.attribute_map = {
            '_field': 'field',
            'negative_impact': 'negative_impact',
            'total_watch_time': 'total_watch_time',
            'value': 'value',
            'views': 'views'
        }

        self.__field = _field
        self._negative_impact = negative_impact
        self._total_watch_time = total_watch_time
        self._value = value
        self._views = views

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BreakdownValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BreakdownValue of this BreakdownValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self):
        """Gets the _field of this BreakdownValue.


        :return: The _field of this BreakdownValue.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this BreakdownValue.


        :param _field: The _field of this BreakdownValue.
        :type _field: str
        """

        self.__field = _field

    @property
    def negative_impact(self):
        """Gets the negative_impact of this BreakdownValue.


        :return: The negative_impact of this BreakdownValue.
        :rtype: int
        """
        return self._negative_impact

    @negative_impact.setter
    def negative_impact(self, negative_impact):
        """Sets the negative_impact of this BreakdownValue.


        :param negative_impact: The negative_impact of this BreakdownValue.
        :type negative_impact: int
        """

        self._negative_impact = negative_impact

    @property
    def total_watch_time(self):
        """Gets the total_watch_time of this BreakdownValue.


        :return: The total_watch_time of this BreakdownValue.
        :rtype: int
        """
        return self._total_watch_time

    @total_watch_time.setter
    def total_watch_time(self, total_watch_time):
        """Sets the total_watch_time of this BreakdownValue.


        :param total_watch_time: The total_watch_time of this BreakdownValue.
        :type total_watch_time: int
        """

        self._total_watch_time = total_watch_time

    @property
    def value(self):
        """Gets the value of this BreakdownValue.


        :return: The value of this BreakdownValue.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this BreakdownValue.


        :param value: The value of this BreakdownValue.
        :type value: float
        """

        self._value = value

    @property
    def views(self):
        """Gets the views of this BreakdownValue.


        :return: The views of this BreakdownValue.
        :rtype: int
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this BreakdownValue.


        :param views: The views of this BreakdownValue.
        :type views: int
        """

        self._views = views
