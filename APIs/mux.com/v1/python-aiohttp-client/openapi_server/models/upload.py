# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset import Asset
from openapi_server.models.upload_error import UploadError
from openapi_server import util


class Upload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset_id: str=None, cors_origin: str=None, error: UploadError=None, id: str=None, new_asset_settings: Asset=None, status: str=None, test: bool=None, timeout: int=3600, url: str=None):
        """Upload - a model defined in OpenAPI

        :param asset_id: The asset_id of this Upload.
        :param cors_origin: The cors_origin of this Upload.
        :param error: The error of this Upload.
        :param id: The id of this Upload.
        :param new_asset_settings: The new_asset_settings of this Upload.
        :param status: The status of this Upload.
        :param test: The test of this Upload.
        :param timeout: The timeout of this Upload.
        :param url: The url of this Upload.
        """
        self.openapi_types = {
            'asset_id': str,
            'cors_origin': str,
            'error': UploadError,
            'id': str,
            'new_asset_settings': Asset,
            'status': str,
            'test': bool,
            'timeout': int,
            'url': str
        }

        self.attribute_map = {
            'asset_id': 'asset_id',
            'cors_origin': 'cors_origin',
            'error': 'error',
            'id': 'id',
            'new_asset_settings': 'new_asset_settings',
            'status': 'status',
            'test': 'test',
            'timeout': 'timeout',
            'url': 'url'
        }

        self._asset_id = asset_id
        self._cors_origin = cors_origin
        self._error = error
        self._id = id
        self._new_asset_settings = new_asset_settings
        self._status = status
        self._test = test
        self._timeout = timeout
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Upload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Upload of this Upload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset_id(self):
        """Gets the asset_id of this Upload.

        Only set once the upload is in the `asset_created` state.

        :return: The asset_id of this Upload.
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this Upload.

        Only set once the upload is in the `asset_created` state.

        :param asset_id: The asset_id of this Upload.
        :type asset_id: str
        """

        self._asset_id = asset_id

    @property
    def cors_origin(self):
        """Gets the cors_origin of this Upload.

        If the upload URL will be used in a browser, you must specify the origin in order for the signed URL to have the correct CORS headers.

        :return: The cors_origin of this Upload.
        :rtype: str
        """
        return self._cors_origin

    @cors_origin.setter
    def cors_origin(self, cors_origin):
        """Sets the cors_origin of this Upload.

        If the upload URL will be used in a browser, you must specify the origin in order for the signed URL to have the correct CORS headers.

        :param cors_origin: The cors_origin of this Upload.
        :type cors_origin: str
        """

        self._cors_origin = cors_origin

    @property
    def error(self):
        """Gets the error of this Upload.


        :return: The error of this Upload.
        :rtype: UploadError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Upload.


        :param error: The error of this Upload.
        :type error: UploadError
        """

        self._error = error

    @property
    def id(self):
        """Gets the id of this Upload.

        Unique identifier for the Direct Upload.

        :return: The id of this Upload.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Upload.

        Unique identifier for the Direct Upload.

        :param id: The id of this Upload.
        :type id: str
        """

        self._id = id

    @property
    def new_asset_settings(self):
        """Gets the new_asset_settings of this Upload.


        :return: The new_asset_settings of this Upload.
        :rtype: Asset
        """
        return self._new_asset_settings

    @new_asset_settings.setter
    def new_asset_settings(self, new_asset_settings):
        """Sets the new_asset_settings of this Upload.


        :param new_asset_settings: The new_asset_settings of this Upload.
        :type new_asset_settings: Asset
        """

        self._new_asset_settings = new_asset_settings

    @property
    def status(self):
        """Gets the status of this Upload.


        :return: The status of this Upload.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Upload.


        :param status: The status of this Upload.
        :type status: str
        """
        allowed_values = ["waiting", "asset_created", "errored", "cancelled", "timed_out"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def test(self):
        """Gets the test of this Upload.

        Indicates if this is a test Direct Upload, in which case the Asset that gets created will be a `test` Asset.

        :return: The test of this Upload.
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this Upload.

        Indicates if this is a test Direct Upload, in which case the Asset that gets created will be a `test` Asset.

        :param test: The test of this Upload.
        :type test: bool
        """

        self._test = test

    @property
    def timeout(self):
        """Gets the timeout of this Upload.

        Max time in seconds for the signed upload URL to be valid. If a successful upload has not occurred before the timeout limit, the direct upload is marked `timed_out`

        :return: The timeout of this Upload.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Upload.

        Max time in seconds for the signed upload URL to be valid. If a successful upload has not occurred before the timeout limit, the direct upload is marked `timed_out`

        :param timeout: The timeout of this Upload.
        :type timeout: int
        """
        if timeout is not None and timeout > 604800:
            raise ValueError("Invalid value for `timeout`, must be a value less than or equal to `604800`")
        if timeout is not None and timeout < 60:
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `60`")

        self._timeout = timeout

    @property
    def url(self):
        """Gets the url of this Upload.

        The URL to upload the associated source media to.

        :return: The url of this Upload.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Upload.

        The URL to upload the associated source media to.

        :param url: The url of this Upload.
        :type url: str
        """

        self._url = url
