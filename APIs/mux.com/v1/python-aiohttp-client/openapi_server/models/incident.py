# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.incident_breakdown import IncidentBreakdown
from openapi_server.models.incident_notification import IncidentNotification
from openapi_server.models.incident_notification_rule import IncidentNotificationRule
from openapi_server import util


class Incident(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affected_views: int=None, affected_views_per_hour: int=None, affected_views_per_hour_on_open: int=None, breakdowns: List[IncidentBreakdown]=None, description: str=None, error_description: str=None, id: str=None, impact: str=None, incident_key: str=None, measured_value: float=None, measured_value_on_close: float=None, measurement: str=None, notification_rules: List[IncidentNotificationRule]=None, notifications: List[IncidentNotification]=None, resolved_at: str=None, sample_size: int=None, sample_size_unit: str=None, severity: str=None, started_at: str=None, status: str=None, threshold: float=None):
        """Incident - a model defined in OpenAPI

        :param affected_views: The affected_views of this Incident.
        :param affected_views_per_hour: The affected_views_per_hour of this Incident.
        :param affected_views_per_hour_on_open: The affected_views_per_hour_on_open of this Incident.
        :param breakdowns: The breakdowns of this Incident.
        :param description: The description of this Incident.
        :param error_description: The error_description of this Incident.
        :param id: The id of this Incident.
        :param impact: The impact of this Incident.
        :param incident_key: The incident_key of this Incident.
        :param measured_value: The measured_value of this Incident.
        :param measured_value_on_close: The measured_value_on_close of this Incident.
        :param measurement: The measurement of this Incident.
        :param notification_rules: The notification_rules of this Incident.
        :param notifications: The notifications of this Incident.
        :param resolved_at: The resolved_at of this Incident.
        :param sample_size: The sample_size of this Incident.
        :param sample_size_unit: The sample_size_unit of this Incident.
        :param severity: The severity of this Incident.
        :param started_at: The started_at of this Incident.
        :param status: The status of this Incident.
        :param threshold: The threshold of this Incident.
        """
        self.openapi_types = {
            'affected_views': int,
            'affected_views_per_hour': int,
            'affected_views_per_hour_on_open': int,
            'breakdowns': List[IncidentBreakdown],
            'description': str,
            'error_description': str,
            'id': str,
            'impact': str,
            'incident_key': str,
            'measured_value': float,
            'measured_value_on_close': float,
            'measurement': str,
            'notification_rules': List[IncidentNotificationRule],
            'notifications': List[IncidentNotification],
            'resolved_at': str,
            'sample_size': int,
            'sample_size_unit': str,
            'severity': str,
            'started_at': str,
            'status': str,
            'threshold': float
        }

        self.attribute_map = {
            'affected_views': 'affected_views',
            'affected_views_per_hour': 'affected_views_per_hour',
            'affected_views_per_hour_on_open': 'affected_views_per_hour_on_open',
            'breakdowns': 'breakdowns',
            'description': 'description',
            'error_description': 'error_description',
            'id': 'id',
            'impact': 'impact',
            'incident_key': 'incident_key',
            'measured_value': 'measured_value',
            'measured_value_on_close': 'measured_value_on_close',
            'measurement': 'measurement',
            'notification_rules': 'notification_rules',
            'notifications': 'notifications',
            'resolved_at': 'resolved_at',
            'sample_size': 'sample_size',
            'sample_size_unit': 'sample_size_unit',
            'severity': 'severity',
            'started_at': 'started_at',
            'status': 'status',
            'threshold': 'threshold'
        }

        self._affected_views = affected_views
        self._affected_views_per_hour = affected_views_per_hour
        self._affected_views_per_hour_on_open = affected_views_per_hour_on_open
        self._breakdowns = breakdowns
        self._description = description
        self._error_description = error_description
        self._id = id
        self._impact = impact
        self._incident_key = incident_key
        self._measured_value = measured_value
        self._measured_value_on_close = measured_value_on_close
        self._measurement = measurement
        self._notification_rules = notification_rules
        self._notifications = notifications
        self._resolved_at = resolved_at
        self._sample_size = sample_size
        self._sample_size_unit = sample_size_unit
        self._severity = severity
        self._started_at = started_at
        self._status = status
        self._threshold = threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Incident':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Incident of this Incident.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affected_views(self):
        """Gets the affected_views of this Incident.


        :return: The affected_views of this Incident.
        :rtype: int
        """
        return self._affected_views

    @affected_views.setter
    def affected_views(self, affected_views):
        """Sets the affected_views of this Incident.


        :param affected_views: The affected_views of this Incident.
        :type affected_views: int
        """

        self._affected_views = affected_views

    @property
    def affected_views_per_hour(self):
        """Gets the affected_views_per_hour of this Incident.


        :return: The affected_views_per_hour of this Incident.
        :rtype: int
        """
        return self._affected_views_per_hour

    @affected_views_per_hour.setter
    def affected_views_per_hour(self, affected_views_per_hour):
        """Sets the affected_views_per_hour of this Incident.


        :param affected_views_per_hour: The affected_views_per_hour of this Incident.
        :type affected_views_per_hour: int
        """

        self._affected_views_per_hour = affected_views_per_hour

    @property
    def affected_views_per_hour_on_open(self):
        """Gets the affected_views_per_hour_on_open of this Incident.


        :return: The affected_views_per_hour_on_open of this Incident.
        :rtype: int
        """
        return self._affected_views_per_hour_on_open

    @affected_views_per_hour_on_open.setter
    def affected_views_per_hour_on_open(self, affected_views_per_hour_on_open):
        """Sets the affected_views_per_hour_on_open of this Incident.


        :param affected_views_per_hour_on_open: The affected_views_per_hour_on_open of this Incident.
        :type affected_views_per_hour_on_open: int
        """

        self._affected_views_per_hour_on_open = affected_views_per_hour_on_open

    @property
    def breakdowns(self):
        """Gets the breakdowns of this Incident.


        :return: The breakdowns of this Incident.
        :rtype: List[IncidentBreakdown]
        """
        return self._breakdowns

    @breakdowns.setter
    def breakdowns(self, breakdowns):
        """Sets the breakdowns of this Incident.


        :param breakdowns: The breakdowns of this Incident.
        :type breakdowns: List[IncidentBreakdown]
        """

        self._breakdowns = breakdowns

    @property
    def description(self):
        """Gets the description of this Incident.


        :return: The description of this Incident.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Incident.


        :param description: The description of this Incident.
        :type description: str
        """

        self._description = description

    @property
    def error_description(self):
        """Gets the error_description of this Incident.


        :return: The error_description of this Incident.
        :rtype: str
        """
        return self._error_description

    @error_description.setter
    def error_description(self, error_description):
        """Sets the error_description of this Incident.


        :param error_description: The error_description of this Incident.
        :type error_description: str
        """

        self._error_description = error_description

    @property
    def id(self):
        """Gets the id of this Incident.


        :return: The id of this Incident.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Incident.


        :param id: The id of this Incident.
        :type id: str
        """

        self._id = id

    @property
    def impact(self):
        """Gets the impact of this Incident.


        :return: The impact of this Incident.
        :rtype: str
        """
        return self._impact

    @impact.setter
    def impact(self, impact):
        """Sets the impact of this Incident.


        :param impact: The impact of this Incident.
        :type impact: str
        """

        self._impact = impact

    @property
    def incident_key(self):
        """Gets the incident_key of this Incident.


        :return: The incident_key of this Incident.
        :rtype: str
        """
        return self._incident_key

    @incident_key.setter
    def incident_key(self, incident_key):
        """Sets the incident_key of this Incident.


        :param incident_key: The incident_key of this Incident.
        :type incident_key: str
        """

        self._incident_key = incident_key

    @property
    def measured_value(self):
        """Gets the measured_value of this Incident.


        :return: The measured_value of this Incident.
        :rtype: float
        """
        return self._measured_value

    @measured_value.setter
    def measured_value(self, measured_value):
        """Sets the measured_value of this Incident.


        :param measured_value: The measured_value of this Incident.
        :type measured_value: float
        """

        self._measured_value = measured_value

    @property
    def measured_value_on_close(self):
        """Gets the measured_value_on_close of this Incident.


        :return: The measured_value_on_close of this Incident.
        :rtype: float
        """
        return self._measured_value_on_close

    @measured_value_on_close.setter
    def measured_value_on_close(self, measured_value_on_close):
        """Sets the measured_value_on_close of this Incident.


        :param measured_value_on_close: The measured_value_on_close of this Incident.
        :type measured_value_on_close: float
        """

        self._measured_value_on_close = measured_value_on_close

    @property
    def measurement(self):
        """Gets the measurement of this Incident.


        :return: The measurement of this Incident.
        :rtype: str
        """
        return self._measurement

    @measurement.setter
    def measurement(self, measurement):
        """Sets the measurement of this Incident.


        :param measurement: The measurement of this Incident.
        :type measurement: str
        """

        self._measurement = measurement

    @property
    def notification_rules(self):
        """Gets the notification_rules of this Incident.


        :return: The notification_rules of this Incident.
        :rtype: List[IncidentNotificationRule]
        """
        return self._notification_rules

    @notification_rules.setter
    def notification_rules(self, notification_rules):
        """Sets the notification_rules of this Incident.


        :param notification_rules: The notification_rules of this Incident.
        :type notification_rules: List[IncidentNotificationRule]
        """

        self._notification_rules = notification_rules

    @property
    def notifications(self):
        """Gets the notifications of this Incident.


        :return: The notifications of this Incident.
        :rtype: List[IncidentNotification]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this Incident.


        :param notifications: The notifications of this Incident.
        :type notifications: List[IncidentNotification]
        """

        self._notifications = notifications

    @property
    def resolved_at(self):
        """Gets the resolved_at of this Incident.


        :return: The resolved_at of this Incident.
        :rtype: str
        """
        return self._resolved_at

    @resolved_at.setter
    def resolved_at(self, resolved_at):
        """Sets the resolved_at of this Incident.


        :param resolved_at: The resolved_at of this Incident.
        :type resolved_at: str
        """

        self._resolved_at = resolved_at

    @property
    def sample_size(self):
        """Gets the sample_size of this Incident.


        :return: The sample_size of this Incident.
        :rtype: int
        """
        return self._sample_size

    @sample_size.setter
    def sample_size(self, sample_size):
        """Sets the sample_size of this Incident.


        :param sample_size: The sample_size of this Incident.
        :type sample_size: int
        """

        self._sample_size = sample_size

    @property
    def sample_size_unit(self):
        """Gets the sample_size_unit of this Incident.


        :return: The sample_size_unit of this Incident.
        :rtype: str
        """
        return self._sample_size_unit

    @sample_size_unit.setter
    def sample_size_unit(self, sample_size_unit):
        """Sets the sample_size_unit of this Incident.


        :param sample_size_unit: The sample_size_unit of this Incident.
        :type sample_size_unit: str
        """

        self._sample_size_unit = sample_size_unit

    @property
    def severity(self):
        """Gets the severity of this Incident.


        :return: The severity of this Incident.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Incident.


        :param severity: The severity of this Incident.
        :type severity: str
        """

        self._severity = severity

    @property
    def started_at(self):
        """Gets the started_at of this Incident.


        :return: The started_at of this Incident.
        :rtype: str
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this Incident.


        :param started_at: The started_at of this Incident.
        :type started_at: str
        """

        self._started_at = started_at

    @property
    def status(self):
        """Gets the status of this Incident.


        :return: The status of this Incident.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Incident.


        :param status: The status of this Incident.
        :type status: str
        """

        self._status = status

    @property
    def threshold(self):
        """Gets the threshold of this Incident.


        :return: The threshold of this Incident.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this Incident.


        :param threshold: The threshold of this Incident.
        :type threshold: float
        """

        self._threshold = threshold
