# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Insight(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter_column: str=None, filter_value: str=None, metric: float=None, negative_impact_score: float=None, total_views: int=None, total_watch_time: int=None):
        """Insight - a model defined in OpenAPI

        :param filter_column: The filter_column of this Insight.
        :param filter_value: The filter_value of this Insight.
        :param metric: The metric of this Insight.
        :param negative_impact_score: The negative_impact_score of this Insight.
        :param total_views: The total_views of this Insight.
        :param total_watch_time: The total_watch_time of this Insight.
        """
        self.openapi_types = {
            'filter_column': str,
            'filter_value': str,
            'metric': float,
            'negative_impact_score': float,
            'total_views': int,
            'total_watch_time': int
        }

        self.attribute_map = {
            'filter_column': 'filter_column',
            'filter_value': 'filter_value',
            'metric': 'metric',
            'negative_impact_score': 'negative_impact_score',
            'total_views': 'total_views',
            'total_watch_time': 'total_watch_time'
        }

        self._filter_column = filter_column
        self._filter_value = filter_value
        self._metric = metric
        self._negative_impact_score = negative_impact_score
        self._total_views = total_views
        self._total_watch_time = total_watch_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Insight':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Insight of this Insight.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_column(self):
        """Gets the filter_column of this Insight.


        :return: The filter_column of this Insight.
        :rtype: str
        """
        return self._filter_column

    @filter_column.setter
    def filter_column(self, filter_column):
        """Sets the filter_column of this Insight.


        :param filter_column: The filter_column of this Insight.
        :type filter_column: str
        """

        self._filter_column = filter_column

    @property
    def filter_value(self):
        """Gets the filter_value of this Insight.


        :return: The filter_value of this Insight.
        :rtype: str
        """
        return self._filter_value

    @filter_value.setter
    def filter_value(self, filter_value):
        """Sets the filter_value of this Insight.


        :param filter_value: The filter_value of this Insight.
        :type filter_value: str
        """

        self._filter_value = filter_value

    @property
    def metric(self):
        """Gets the metric of this Insight.


        :return: The metric of this Insight.
        :rtype: float
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this Insight.


        :param metric: The metric of this Insight.
        :type metric: float
        """

        self._metric = metric

    @property
    def negative_impact_score(self):
        """Gets the negative_impact_score of this Insight.


        :return: The negative_impact_score of this Insight.
        :rtype: float
        """
        return self._negative_impact_score

    @negative_impact_score.setter
    def negative_impact_score(self, negative_impact_score):
        """Sets the negative_impact_score of this Insight.


        :param negative_impact_score: The negative_impact_score of this Insight.
        :type negative_impact_score: float
        """

        self._negative_impact_score = negative_impact_score

    @property
    def total_views(self):
        """Gets the total_views of this Insight.


        :return: The total_views of this Insight.
        :rtype: int
        """
        return self._total_views

    @total_views.setter
    def total_views(self, total_views):
        """Sets the total_views of this Insight.


        :param total_views: The total_views of this Insight.
        :type total_views: int
        """

        self._total_views = total_views

    @property
    def total_watch_time(self):
        """Gets the total_watch_time of this Insight.


        :return: The total_watch_time of this Insight.
        :rtype: int
        """
        return self._total_watch_time

    @total_watch_time.setter
    def total_watch_time(self, total_watch_time):
        """Sets the total_watch_time of this Insight.


        :param total_watch_time: The total_watch_time of this Insight.
        :type total_watch_time: int
        """

        self._total_watch_time = total_watch_time
