# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.asset_static_renditions_files_inner import AssetStaticRenditionsFilesInner
from openapi_server import util


class AssetStaticRenditions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, files: List[AssetStaticRenditionsFilesInner]=None, status: str='disabled'):
        """AssetStaticRenditions - a model defined in OpenAPI

        :param files: The files of this AssetStaticRenditions.
        :param status: The status of this AssetStaticRenditions.
        """
        self.openapi_types = {
            'files': List[AssetStaticRenditionsFilesInner],
            'status': str
        }

        self.attribute_map = {
            'files': 'files',
            'status': 'status'
        }

        self._files = files
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetStaticRenditions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Asset_static_renditions of this AssetStaticRenditions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def files(self):
        """Gets the files of this AssetStaticRenditions.

        Array of file objects.

        :return: The files of this AssetStaticRenditions.
        :rtype: List[AssetStaticRenditionsFilesInner]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this AssetStaticRenditions.

        Array of file objects.

        :param files: The files of this AssetStaticRenditions.
        :type files: List[AssetStaticRenditionsFilesInner]
        """

        self._files = files

    @property
    def status(self):
        """Gets the status of this AssetStaticRenditions.

        Indicates the status of downloadable MP4 versions of this asset.

        :return: The status of this AssetStaticRenditions.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssetStaticRenditions.

        Indicates the status of downloadable MP4 versions of this asset.

        :param status: The status of this AssetStaticRenditions.
        :type status: str
        """
        allowed_values = ["ready", "preparing", "disabled", "errored"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
