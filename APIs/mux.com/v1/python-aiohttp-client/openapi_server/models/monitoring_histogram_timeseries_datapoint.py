# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.monitoring_histogram_timeseries_bucket_values import MonitoringHistogramTimeseriesBucketValues
from openapi_server import util


class MonitoringHistogramTimeseriesDatapoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average: float=None, bucket_values: List[MonitoringHistogramTimeseriesBucketValues]=None, max_percentage: float=None, median: float=None, p95: float=None, sum: int=None, timestamp: str=None):
        """MonitoringHistogramTimeseriesDatapoint - a model defined in OpenAPI

        :param average: The average of this MonitoringHistogramTimeseriesDatapoint.
        :param bucket_values: The bucket_values of this MonitoringHistogramTimeseriesDatapoint.
        :param max_percentage: The max_percentage of this MonitoringHistogramTimeseriesDatapoint.
        :param median: The median of this MonitoringHistogramTimeseriesDatapoint.
        :param p95: The p95 of this MonitoringHistogramTimeseriesDatapoint.
        :param sum: The sum of this MonitoringHistogramTimeseriesDatapoint.
        :param timestamp: The timestamp of this MonitoringHistogramTimeseriesDatapoint.
        """
        self.openapi_types = {
            'average': float,
            'bucket_values': List[MonitoringHistogramTimeseriesBucketValues],
            'max_percentage': float,
            'median': float,
            'p95': float,
            'sum': int,
            'timestamp': str
        }

        self.attribute_map = {
            'average': 'average',
            'bucket_values': 'bucket_values',
            'max_percentage': 'max_percentage',
            'median': 'median',
            'p95': 'p95',
            'sum': 'sum',
            'timestamp': 'timestamp'
        }

        self._average = average
        self._bucket_values = bucket_values
        self._max_percentage = max_percentage
        self._median = median
        self._p95 = p95
        self._sum = sum
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitoringHistogramTimeseriesDatapoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonitoringHistogramTimeseriesDatapoint of this MonitoringHistogramTimeseriesDatapoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average(self):
        """Gets the average of this MonitoringHistogramTimeseriesDatapoint.


        :return: The average of this MonitoringHistogramTimeseriesDatapoint.
        :rtype: float
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this MonitoringHistogramTimeseriesDatapoint.


        :param average: The average of this MonitoringHistogramTimeseriesDatapoint.
        :type average: float
        """

        self._average = average

    @property
    def bucket_values(self):
        """Gets the bucket_values of this MonitoringHistogramTimeseriesDatapoint.


        :return: The bucket_values of this MonitoringHistogramTimeseriesDatapoint.
        :rtype: List[MonitoringHistogramTimeseriesBucketValues]
        """
        return self._bucket_values

    @bucket_values.setter
    def bucket_values(self, bucket_values):
        """Sets the bucket_values of this MonitoringHistogramTimeseriesDatapoint.


        :param bucket_values: The bucket_values of this MonitoringHistogramTimeseriesDatapoint.
        :type bucket_values: List[MonitoringHistogramTimeseriesBucketValues]
        """

        self._bucket_values = bucket_values

    @property
    def max_percentage(self):
        """Gets the max_percentage of this MonitoringHistogramTimeseriesDatapoint.


        :return: The max_percentage of this MonitoringHistogramTimeseriesDatapoint.
        :rtype: float
        """
        return self._max_percentage

    @max_percentage.setter
    def max_percentage(self, max_percentage):
        """Sets the max_percentage of this MonitoringHistogramTimeseriesDatapoint.


        :param max_percentage: The max_percentage of this MonitoringHistogramTimeseriesDatapoint.
        :type max_percentage: float
        """

        self._max_percentage = max_percentage

    @property
    def median(self):
        """Gets the median of this MonitoringHistogramTimeseriesDatapoint.


        :return: The median of this MonitoringHistogramTimeseriesDatapoint.
        :rtype: float
        """
        return self._median

    @median.setter
    def median(self, median):
        """Sets the median of this MonitoringHistogramTimeseriesDatapoint.


        :param median: The median of this MonitoringHistogramTimeseriesDatapoint.
        :type median: float
        """

        self._median = median

    @property
    def p95(self):
        """Gets the p95 of this MonitoringHistogramTimeseriesDatapoint.


        :return: The p95 of this MonitoringHistogramTimeseriesDatapoint.
        :rtype: float
        """
        return self._p95

    @p95.setter
    def p95(self, p95):
        """Sets the p95 of this MonitoringHistogramTimeseriesDatapoint.


        :param p95: The p95 of this MonitoringHistogramTimeseriesDatapoint.
        :type p95: float
        """

        self._p95 = p95

    @property
    def sum(self):
        """Gets the sum of this MonitoringHistogramTimeseriesDatapoint.


        :return: The sum of this MonitoringHistogramTimeseriesDatapoint.
        :rtype: int
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this MonitoringHistogramTimeseriesDatapoint.


        :param sum: The sum of this MonitoringHistogramTimeseriesDatapoint.
        :type sum: int
        """

        self._sum = sum

    @property
    def timestamp(self):
        """Gets the timestamp of this MonitoringHistogramTimeseriesDatapoint.


        :return: The timestamp of this MonitoringHistogramTimeseriesDatapoint.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this MonitoringHistogramTimeseriesDatapoint.


        :param timestamp: The timestamp of this MonitoringHistogramTimeseriesDatapoint.
        :type timestamp: str
        """

        self._timestamp = timestamp
