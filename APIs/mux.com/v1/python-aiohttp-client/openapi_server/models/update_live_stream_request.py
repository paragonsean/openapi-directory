# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateLiveStreamRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, latency_mode: str=None, max_continuous_duration: int=43200, passthrough: str=None, reconnect_slate_url: str=None, reconnect_window: float=60, use_slate_for_standard_latency: bool=False):
        """UpdateLiveStreamRequest - a model defined in OpenAPI

        :param latency_mode: The latency_mode of this UpdateLiveStreamRequest.
        :param max_continuous_duration: The max_continuous_duration of this UpdateLiveStreamRequest.
        :param passthrough: The passthrough of this UpdateLiveStreamRequest.
        :param reconnect_slate_url: The reconnect_slate_url of this UpdateLiveStreamRequest.
        :param reconnect_window: The reconnect_window of this UpdateLiveStreamRequest.
        :param use_slate_for_standard_latency: The use_slate_for_standard_latency of this UpdateLiveStreamRequest.
        """
        self.openapi_types = {
            'latency_mode': str,
            'max_continuous_duration': int,
            'passthrough': str,
            'reconnect_slate_url': str,
            'reconnect_window': float,
            'use_slate_for_standard_latency': bool
        }

        self.attribute_map = {
            'latency_mode': 'latency_mode',
            'max_continuous_duration': 'max_continuous_duration',
            'passthrough': 'passthrough',
            'reconnect_slate_url': 'reconnect_slate_url',
            'reconnect_window': 'reconnect_window',
            'use_slate_for_standard_latency': 'use_slate_for_standard_latency'
        }

        self._latency_mode = latency_mode
        self._max_continuous_duration = max_continuous_duration
        self._passthrough = passthrough
        self._reconnect_slate_url = reconnect_slate_url
        self._reconnect_window = reconnect_window
        self._use_slate_for_standard_latency = use_slate_for_standard_latency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateLiveStreamRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateLiveStreamRequest of this UpdateLiveStreamRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def latency_mode(self):
        """Gets the latency_mode of this UpdateLiveStreamRequest.

        Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this as an alternative to setting low latency or reduced latency flags. The Low Latency value is a beta feature. Read more here: https://mux.com/blog/introducing-low-latency-live-streaming/

        :return: The latency_mode of this UpdateLiveStreamRequest.
        :rtype: str
        """
        return self._latency_mode

    @latency_mode.setter
    def latency_mode(self, latency_mode):
        """Sets the latency_mode of this UpdateLiveStreamRequest.

        Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this as an alternative to setting low latency or reduced latency flags. The Low Latency value is a beta feature. Read more here: https://mux.com/blog/introducing-low-latency-live-streaming/

        :param latency_mode: The latency_mode of this UpdateLiveStreamRequest.
        :type latency_mode: str
        """
        allowed_values = ["low", "reduced", "standard"]  # noqa: E501
        if latency_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `latency_mode` ({0}), must be one of {1}"
                .format(latency_mode, allowed_values)
            )

        self._latency_mode = latency_mode

    @property
    def max_continuous_duration(self):
        """Gets the max_continuous_duration of this UpdateLiveStreamRequest.

        The time in seconds a live stream may be continuously active before being disconnected. Defaults to 12 hours.

        :return: The max_continuous_duration of this UpdateLiveStreamRequest.
        :rtype: int
        """
        return self._max_continuous_duration

    @max_continuous_duration.setter
    def max_continuous_duration(self, max_continuous_duration):
        """Sets the max_continuous_duration of this UpdateLiveStreamRequest.

        The time in seconds a live stream may be continuously active before being disconnected. Defaults to 12 hours.

        :param max_continuous_duration: The max_continuous_duration of this UpdateLiveStreamRequest.
        :type max_continuous_duration: int
        """
        if max_continuous_duration is not None and max_continuous_duration > 43200:
            raise ValueError("Invalid value for `max_continuous_duration`, must be a value less than or equal to `43200`")
        if max_continuous_duration is not None and max_continuous_duration < 60:
            raise ValueError("Invalid value for `max_continuous_duration`, must be a value greater than or equal to `60`")

        self._max_continuous_duration = max_continuous_duration

    @property
    def passthrough(self):
        """Gets the passthrough of this UpdateLiveStreamRequest.

        Arbitrary user-supplied metadata set for the live stream. Max 255 characters. In order to clear this value, the field should be included with an empty-string value.

        :return: The passthrough of this UpdateLiveStreamRequest.
        :rtype: str
        """
        return self._passthrough

    @passthrough.setter
    def passthrough(self, passthrough):
        """Sets the passthrough of this UpdateLiveStreamRequest.

        Arbitrary user-supplied metadata set for the live stream. Max 255 characters. In order to clear this value, the field should be included with an empty-string value.

        :param passthrough: The passthrough of this UpdateLiveStreamRequest.
        :type passthrough: str
        """

        self._passthrough = passthrough

    @property
    def reconnect_slate_url(self):
        """Gets the reconnect_slate_url of this UpdateLiveStreamRequest.

        The URL of the image file that Mux should download and use as slate media during interruptions of the live stream media. This file will be downloaded each time a new recorded asset is created from the live stream. Set this to a blank string to clear the value so that the default slate media will be used.

        :return: The reconnect_slate_url of this UpdateLiveStreamRequest.
        :rtype: str
        """
        return self._reconnect_slate_url

    @reconnect_slate_url.setter
    def reconnect_slate_url(self, reconnect_slate_url):
        """Sets the reconnect_slate_url of this UpdateLiveStreamRequest.

        The URL of the image file that Mux should download and use as slate media during interruptions of the live stream media. This file will be downloaded each time a new recorded asset is created from the live stream. Set this to a blank string to clear the value so that the default slate media will be used.

        :param reconnect_slate_url: The reconnect_slate_url of this UpdateLiveStreamRequest.
        :type reconnect_slate_url: str
        """

        self._reconnect_slate_url = reconnect_slate_url

    @property
    def reconnect_window(self):
        """Gets the reconnect_window of this UpdateLiveStreamRequest.

        When live streaming software disconnects from Mux, either intentionally or due to a drop in the network, the Reconnect Window is the time in seconds that Mux should wait for the streaming software to reconnect before considering the live stream finished and completing the recorded asset.  If not specified directly, Standard Latency streams have a Reconnect Window of 60 seconds; Reduced and Low Latency streams have a default of 0 seconds, or no Reconnect Window. For that reason, we suggest specifying a value other than zero for Reduced and Low Latency streams.  Reduced and Low Latency streams with a Reconnect Window greater than zero will insert slate media into the recorded asset while waiting for the streaming software to reconnect or when there are brief interruptions in the live stream media. When using a Reconnect Window setting higher than 60 seconds with a Standard Latency stream, we highly recommend enabling slate with the `use_slate_for_standard_latency` option. 

        :return: The reconnect_window of this UpdateLiveStreamRequest.
        :rtype: float
        """
        return self._reconnect_window

    @reconnect_window.setter
    def reconnect_window(self, reconnect_window):
        """Sets the reconnect_window of this UpdateLiveStreamRequest.

        When live streaming software disconnects from Mux, either intentionally or due to a drop in the network, the Reconnect Window is the time in seconds that Mux should wait for the streaming software to reconnect before considering the live stream finished and completing the recorded asset.  If not specified directly, Standard Latency streams have a Reconnect Window of 60 seconds; Reduced and Low Latency streams have a default of 0 seconds, or no Reconnect Window. For that reason, we suggest specifying a value other than zero for Reduced and Low Latency streams.  Reduced and Low Latency streams with a Reconnect Window greater than zero will insert slate media into the recorded asset while waiting for the streaming software to reconnect or when there are brief interruptions in the live stream media. When using a Reconnect Window setting higher than 60 seconds with a Standard Latency stream, we highly recommend enabling slate with the `use_slate_for_standard_latency` option. 

        :param reconnect_window: The reconnect_window of this UpdateLiveStreamRequest.
        :type reconnect_window: float
        """
        if reconnect_window is not None and reconnect_window > 1800:
            raise ValueError("Invalid value for `reconnect_window`, must be a value less than or equal to `1800`")
        if reconnect_window is not None and reconnect_window < 0:
            raise ValueError("Invalid value for `reconnect_window`, must be a value greater than or equal to `0`")

        self._reconnect_window = reconnect_window

    @property
    def use_slate_for_standard_latency(self):
        """Gets the use_slate_for_standard_latency of this UpdateLiveStreamRequest.

        By default, Standard Latency live streams do not have slate media inserted while waiting for live streaming software to reconnect to Mux. Setting this to true enables slate insertion on a Standard Latency stream.

        :return: The use_slate_for_standard_latency of this UpdateLiveStreamRequest.
        :rtype: bool
        """
        return self._use_slate_for_standard_latency

    @use_slate_for_standard_latency.setter
    def use_slate_for_standard_latency(self, use_slate_for_standard_latency):
        """Sets the use_slate_for_standard_latency of this UpdateLiveStreamRequest.

        By default, Standard Latency live streams do not have slate media inserted while waiting for live streaming software to reconnect to Mux. Setting this to true enables slate insertion on a Standard Latency stream.

        :param use_slate_for_standard_latency: The use_slate_for_standard_latency of this UpdateLiveStreamRequest.
        :type use_slate_for_standard_latency: bool
        """

        self._use_slate_for_standard_latency = use_slate_for_standard_latency
