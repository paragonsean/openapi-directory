# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateTrackRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closed_captions: bool=None, language_code: str=None, name: str=None, passthrough: str=None, text_type: str=None, type: str=None, url: str=None):
        """CreateTrackRequest - a model defined in OpenAPI

        :param closed_captions: The closed_captions of this CreateTrackRequest.
        :param language_code: The language_code of this CreateTrackRequest.
        :param name: The name of this CreateTrackRequest.
        :param passthrough: The passthrough of this CreateTrackRequest.
        :param text_type: The text_type of this CreateTrackRequest.
        :param type: The type of this CreateTrackRequest.
        :param url: The url of this CreateTrackRequest.
        """
        self.openapi_types = {
            'closed_captions': bool,
            'language_code': str,
            'name': str,
            'passthrough': str,
            'text_type': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'closed_captions': 'closed_captions',
            'language_code': 'language_code',
            'name': 'name',
            'passthrough': 'passthrough',
            'text_type': 'text_type',
            'type': 'type',
            'url': 'url'
        }

        self._closed_captions = closed_captions
        self._language_code = language_code
        self._name = name
        self._passthrough = passthrough
        self._text_type = text_type
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTrackRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTrackRequest of this CreateTrackRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closed_captions(self):
        """Gets the closed_captions of this CreateTrackRequest.

        Indicates the track provides Subtitles for the Deaf or Hard-of-hearing (SDH).

        :return: The closed_captions of this CreateTrackRequest.
        :rtype: bool
        """
        return self._closed_captions

    @closed_captions.setter
    def closed_captions(self, closed_captions):
        """Sets the closed_captions of this CreateTrackRequest.

        Indicates the track provides Subtitles for the Deaf or Hard-of-hearing (SDH).

        :param closed_captions: The closed_captions of this CreateTrackRequest.
        :type closed_captions: bool
        """

        self._closed_captions = closed_captions

    @property
    def language_code(self):
        """Gets the language_code of this CreateTrackRequest.

        The language code value must be a valid BCP 47 specification compliant value. For example, en for English or en-US for the US version of English.

        :return: The language_code of this CreateTrackRequest.
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this CreateTrackRequest.

        The language code value must be a valid BCP 47 specification compliant value. For example, en for English or en-US for the US version of English.

        :param language_code: The language_code of this CreateTrackRequest.
        :type language_code: str
        """
        if language_code is None:
            raise ValueError("Invalid value for `language_code`, must not be `None`")

        self._language_code = language_code

    @property
    def name(self):
        """Gets the name of this CreateTrackRequest.

        The name of the track containing a human-readable description. This value must be unique within each group of `text` or `audio` track types. The HLS manifest will associate the `text` or `audio` track with this value. For example, set the value to \"English\" for subtitles text track with `language_code` as en-US. If this parameter is not included, Mux will auto-populate a value based on the `language_code` value.

        :return: The name of this CreateTrackRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateTrackRequest.

        The name of the track containing a human-readable description. This value must be unique within each group of `text` or `audio` track types. The HLS manifest will associate the `text` or `audio` track with this value. For example, set the value to \"English\" for subtitles text track with `language_code` as en-US. If this parameter is not included, Mux will auto-populate a value based on the `language_code` value.

        :param name: The name of this CreateTrackRequest.
        :type name: str
        """

        self._name = name

    @property
    def passthrough(self):
        """Gets the passthrough of this CreateTrackRequest.

        Arbitrary user-supplied metadata set for the track either when creating the asset or track.

        :return: The passthrough of this CreateTrackRequest.
        :rtype: str
        """
        return self._passthrough

    @passthrough.setter
    def passthrough(self, passthrough):
        """Sets the passthrough of this CreateTrackRequest.

        Arbitrary user-supplied metadata set for the track either when creating the asset or track.

        :param passthrough: The passthrough of this CreateTrackRequest.
        :type passthrough: str
        """

        self._passthrough = passthrough

    @property
    def text_type(self):
        """Gets the text_type of this CreateTrackRequest.


        :return: The text_type of this CreateTrackRequest.
        :rtype: str
        """
        return self._text_type

    @text_type.setter
    def text_type(self, text_type):
        """Sets the text_type of this CreateTrackRequest.


        :param text_type: The text_type of this CreateTrackRequest.
        :type text_type: str
        """
        allowed_values = ["subtitles"]  # noqa: E501
        if text_type not in allowed_values:
            raise ValueError(
                "Invalid value for `text_type` ({0}), must be one of {1}"
                .format(text_type, allowed_values)
            )

        self._text_type = text_type

    @property
    def type(self):
        """Gets the type of this CreateTrackRequest.


        :return: The type of this CreateTrackRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateTrackRequest.


        :param type: The type of this CreateTrackRequest.
        :type type: str
        """
        allowed_values = ["text", "audio"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this CreateTrackRequest.

        The URL of the file that Mux should download and use. * For `audio` tracks, the URL is the location of the audio file for Mux to download, for example an M4A, WAV, or MP3 file. Mux supports most audio file formats and codecs, but for fastest processing, you should [use standard inputs wherever possible](https://docs.mux.com/guides/video/minimize-processing-time). * For `text` tracks, the URL is the location of subtitle/captions file. Mux supports [SubRip Text (SRT)](https://en.wikipedia.org/wiki/SubRip) and [Web Video Text Tracks](https://www.w3.org/TR/webvtt1/) formats for ingesting Subtitles and Closed Captions. 

        :return: The url of this CreateTrackRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CreateTrackRequest.

        The URL of the file that Mux should download and use. * For `audio` tracks, the URL is the location of the audio file for Mux to download, for example an M4A, WAV, or MP3 file. Mux supports most audio file formats and codecs, but for fastest processing, you should [use standard inputs wherever possible](https://docs.mux.com/guides/video/minimize-processing-time). * For `text` tracks, the URL is the location of subtitle/captions file. Mux supports [SubRip Text (SRT)](https://en.wikipedia.org/wiki/SubRip) and [Web Video Text Tracks](https://www.w3.org/TR/webvtt1/) formats for ingesting Subtitles and Closed Captions. 

        :param url: The url of this CreateTrackRequest.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
