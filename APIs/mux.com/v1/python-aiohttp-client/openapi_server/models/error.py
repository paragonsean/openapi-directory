# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: int=None, count: int=None, description: str=None, id: int=None, last_seen: str=None, message: str=None, notes: str=None, percentage: float=None):
        """Error - a model defined in OpenAPI

        :param code: The code of this Error.
        :param count: The count of this Error.
        :param description: The description of this Error.
        :param id: The id of this Error.
        :param last_seen: The last_seen of this Error.
        :param message: The message of this Error.
        :param notes: The notes of this Error.
        :param percentage: The percentage of this Error.
        """
        self.openapi_types = {
            'code': int,
            'count': int,
            'description': str,
            'id': int,
            'last_seen': str,
            'message': str,
            'notes': str,
            'percentage': float
        }

        self.attribute_map = {
            'code': 'code',
            'count': 'count',
            'description': 'description',
            'id': 'id',
            'last_seen': 'last_seen',
            'message': 'message',
            'notes': 'notes',
            'percentage': 'percentage'
        }

        self._code = code
        self._count = count
        self._description = description
        self._id = id
        self._last_seen = last_seen
        self._message = message
        self._notes = notes
        self._percentage = percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Error.

        The error code

        :return: The code of this Error.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Error.

        The error code

        :param code: The code of this Error.
        :type code: int
        """

        self._code = code

    @property
    def count(self):
        """Gets the count of this Error.

        The total number of views that experiend this error.

        :return: The count of this Error.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Error.

        The total number of views that experiend this error.

        :param count: The count of this Error.
        :type count: int
        """

        self._count = count

    @property
    def description(self):
        """Gets the description of this Error.

        Description of the error.

        :return: The description of this Error.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Error.

        Description of the error.

        :param description: The description of this Error.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Error.

        A unique identifier for this error.

        :return: The id of this Error.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Error.

        A unique identifier for this error.

        :param id: The id of this Error.
        :type id: int
        """

        self._id = id

    @property
    def last_seen(self):
        """Gets the last_seen of this Error.

        The last time this error was seen (ISO 8601 timestamp).

        :return: The last_seen of this Error.
        :rtype: str
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen):
        """Sets the last_seen of this Error.

        The last time this error was seen (ISO 8601 timestamp).

        :param last_seen: The last_seen of this Error.
        :type last_seen: str
        """

        self._last_seen = last_seen

    @property
    def message(self):
        """Gets the message of this Error.

        The error message.

        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.

        The error message.

        :param message: The message of this Error.
        :type message: str
        """

        self._message = message

    @property
    def notes(self):
        """Gets the notes of this Error.

        Notes that are attached to this error.

        :return: The notes of this Error.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Error.

        Notes that are attached to this error.

        :param notes: The notes of this Error.
        :type notes: str
        """

        self._notes = notes

    @property
    def percentage(self):
        """Gets the percentage of this Error.

        The percentage of views that experienced this error.

        :return: The percentage of this Error.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this Error.

        The percentage of views that experienced this error.

        :param percentage: The percentage of this Error.
        :type percentage: float
        """

        self._percentage = percentage
