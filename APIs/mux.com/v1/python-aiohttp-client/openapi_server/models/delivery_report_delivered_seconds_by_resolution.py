# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeliveryReportDeliveredSecondsByResolution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tier_1080p: float=None, tier_1440p: float=None, tier_2160p: float=None, tier_720p: float=None, tier_audio_only: float=None):
        """DeliveryReportDeliveredSecondsByResolution - a model defined in OpenAPI

        :param tier_1080p: The tier_1080p of this DeliveryReportDeliveredSecondsByResolution.
        :param tier_1440p: The tier_1440p of this DeliveryReportDeliveredSecondsByResolution.
        :param tier_2160p: The tier_2160p of this DeliveryReportDeliveredSecondsByResolution.
        :param tier_720p: The tier_720p of this DeliveryReportDeliveredSecondsByResolution.
        :param tier_audio_only: The tier_audio_only of this DeliveryReportDeliveredSecondsByResolution.
        """
        self.openapi_types = {
            'tier_1080p': float,
            'tier_1440p': float,
            'tier_2160p': float,
            'tier_720p': float,
            'tier_audio_only': float
        }

        self.attribute_map = {
            'tier_1080p': 'tier_1080p',
            'tier_1440p': 'tier_1440p',
            'tier_2160p': 'tier_2160p',
            'tier_720p': 'tier_720p',
            'tier_audio_only': 'tier_audio_only'
        }

        self._tier_1080p = tier_1080p
        self._tier_1440p = tier_1440p
        self._tier_2160p = tier_2160p
        self._tier_720p = tier_720p
        self._tier_audio_only = tier_audio_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeliveryReportDeliveredSecondsByResolution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeliveryReport_delivered_seconds_by_resolution of this DeliveryReportDeliveredSecondsByResolution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tier_1080p(self):
        """Gets the tier_1080p of this DeliveryReportDeliveredSecondsByResolution.

        Total number of delivered seconds during this time window that had a resolution larger than the 720p tier but less than or equal to the 1440p tier (over 921,600 and <= 2,073,600 pixels total).

        :return: The tier_1080p of this DeliveryReportDeliveredSecondsByResolution.
        :rtype: float
        """
        return self._tier_1080p

    @tier_1080p.setter
    def tier_1080p(self, tier_1080p):
        """Sets the tier_1080p of this DeliveryReportDeliveredSecondsByResolution.

        Total number of delivered seconds during this time window that had a resolution larger than the 720p tier but less than or equal to the 1440p tier (over 921,600 and <= 2,073,600 pixels total).

        :param tier_1080p: The tier_1080p of this DeliveryReportDeliveredSecondsByResolution.
        :type tier_1080p: float
        """

        self._tier_1080p = tier_1080p

    @property
    def tier_1440p(self):
        """Gets the tier_1440p of this DeliveryReportDeliveredSecondsByResolution.

        Total number of delivered seconds during this time window that had a resolution larger than the 1080p tier but less than or equal to the 2160p tier (over 2,073,600 and <= 4,194,304 pixels total).

        :return: The tier_1440p of this DeliveryReportDeliveredSecondsByResolution.
        :rtype: float
        """
        return self._tier_1440p

    @tier_1440p.setter
    def tier_1440p(self, tier_1440p):
        """Sets the tier_1440p of this DeliveryReportDeliveredSecondsByResolution.

        Total number of delivered seconds during this time window that had a resolution larger than the 1080p tier but less than or equal to the 2160p tier (over 2,073,600 and <= 4,194,304 pixels total).

        :param tier_1440p: The tier_1440p of this DeliveryReportDeliveredSecondsByResolution.
        :type tier_1440p: float
        """

        self._tier_1440p = tier_1440p

    @property
    def tier_2160p(self):
        """Gets the tier_2160p of this DeliveryReportDeliveredSecondsByResolution.

        Total number of delivered seconds during this time window that had a resolution larger than the 1440p tier (over 4,194,304 pixels total).

        :return: The tier_2160p of this DeliveryReportDeliveredSecondsByResolution.
        :rtype: float
        """
        return self._tier_2160p

    @tier_2160p.setter
    def tier_2160p(self, tier_2160p):
        """Sets the tier_2160p of this DeliveryReportDeliveredSecondsByResolution.

        Total number of delivered seconds during this time window that had a resolution larger than the 1440p tier (over 4,194,304 pixels total).

        :param tier_2160p: The tier_2160p of this DeliveryReportDeliveredSecondsByResolution.
        :type tier_2160p: float
        """

        self._tier_2160p = tier_2160p

    @property
    def tier_720p(self):
        """Gets the tier_720p of this DeliveryReportDeliveredSecondsByResolution.

        Total number of delivered seconds during this time window that had a resolution within the 720p tier (up to 921,600 pixels total, based on typical 1280x720).

        :return: The tier_720p of this DeliveryReportDeliveredSecondsByResolution.
        :rtype: float
        """
        return self._tier_720p

    @tier_720p.setter
    def tier_720p(self, tier_720p):
        """Sets the tier_720p of this DeliveryReportDeliveredSecondsByResolution.

        Total number of delivered seconds during this time window that had a resolution within the 720p tier (up to 921,600 pixels total, based on typical 1280x720).

        :param tier_720p: The tier_720p of this DeliveryReportDeliveredSecondsByResolution.
        :type tier_720p: float
        """

        self._tier_720p = tier_720p

    @property
    def tier_audio_only(self):
        """Gets the tier_audio_only of this DeliveryReportDeliveredSecondsByResolution.

        Total number of delivered seconds during this time window that had a resolution of audio only.

        :return: The tier_audio_only of this DeliveryReportDeliveredSecondsByResolution.
        :rtype: float
        """
        return self._tier_audio_only

    @tier_audio_only.setter
    def tier_audio_only(self, tier_audio_only):
        """Sets the tier_audio_only of this DeliveryReportDeliveredSecondsByResolution.

        Total number of delivered seconds during this time window that had a resolution of audio only.

        :param tier_audio_only: The tier_audio_only of this DeliveryReportDeliveredSecondsByResolution.
        :type tier_audio_only: float
        """

        self._tier_audio_only = tier_audio_only
