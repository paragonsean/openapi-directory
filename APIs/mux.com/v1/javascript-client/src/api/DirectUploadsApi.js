/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateUploadRequest from '../model/CreateUploadRequest';
import ListUploadsResponse from '../model/ListUploadsResponse';
import UploadResponse from '../model/UploadResponse';

/**
* DirectUploads service.
* @module api/DirectUploadsApi
* @version v1
*/
export default class DirectUploadsApi {

    /**
    * Constructs a new DirectUploadsApi. 
    * @alias module:api/DirectUploadsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelDirectUpload operation.
     * @callback module:api/DirectUploadsApi~cancelDirectUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a direct upload
     * Cancels a direct upload and marks it as cancelled. If a pending upload finishes after this request, no asset will be created. This request will only succeed if the upload is still in the `waiting` state. 
     * @param {String} UPLOAD_ID ID of the Upload
     * @param {module:api/DirectUploadsApi~cancelDirectUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadResponse}
     */
    cancelDirectUpload(UPLOAD_ID, callback) {
      let postBody = null;
      // verify the required parameter 'UPLOAD_ID' is set
      if (UPLOAD_ID === undefined || UPLOAD_ID === null) {
        throw new Error("Missing the required parameter 'UPLOAD_ID' when calling cancelDirectUpload");
      }

      let pathParams = {
        'UPLOAD_ID': UPLOAD_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UploadResponse;
      return this.apiClient.callApi(
        '/video/v1/uploads/{UPLOAD_ID}/cancel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDirectUpload operation.
     * @callback module:api/DirectUploadsApi~createDirectUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new direct upload URL
     * Creates a new direct upload, through which video content can be uploaded for ingest to Mux.
     * @param {module:model/CreateUploadRequest} createUploadRequest 
     * @param {module:api/DirectUploadsApi~createDirectUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadResponse}
     */
    createDirectUpload(createUploadRequest, callback) {
      let postBody = createUploadRequest;
      // verify the required parameter 'createUploadRequest' is set
      if (createUploadRequest === undefined || createUploadRequest === null) {
        throw new Error("Missing the required parameter 'createUploadRequest' when calling createDirectUpload");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UploadResponse;
      return this.apiClient.callApi(
        '/video/v1/uploads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDirectUpload operation.
     * @callback module:api/DirectUploadsApi~getDirectUploadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single direct upload's info
     * Fetches information about a single direct upload in the current environment.
     * @param {String} UPLOAD_ID ID of the Upload
     * @param {module:api/DirectUploadsApi~getDirectUploadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UploadResponse}
     */
    getDirectUpload(UPLOAD_ID, callback) {
      let postBody = null;
      // verify the required parameter 'UPLOAD_ID' is set
      if (UPLOAD_ID === undefined || UPLOAD_ID === null) {
        throw new Error("Missing the required parameter 'UPLOAD_ID' when calling getDirectUpload");
      }

      let pathParams = {
        'UPLOAD_ID': UPLOAD_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UploadResponse;
      return this.apiClient.callApi(
        '/video/v1/uploads/{UPLOAD_ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDirectUploads operation.
     * @callback module:api/DirectUploadsApi~listDirectUploadsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListUploadsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List direct uploads
     * Lists direct uploads in the current environment.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 25)] Number of items to include in the response
     * @param {Number} [page = 1)] Offset by this many pages, of the size of `limit`
     * @param {module:api/DirectUploadsApi~listDirectUploadsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListUploadsResponse}
     */
    listDirectUploads(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListUploadsResponse;
      return this.apiClient.callApi(
        '/video/v1/uploads', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
