/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListVideoViewsResponse from '../model/ListVideoViewsResponse';
import VideoViewResponse from '../model/VideoViewResponse';

/**
* VideoViews service.
* @module api/VideoViewsApi
* @version v1
*/
export default class VideoViewsApi {

    /**
    * Constructs a new VideoViewsApi. 
    * @alias module:api/VideoViewsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getVideoView operation.
     * @callback module:api/VideoViewsApi~getVideoViewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoViewResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Video View
     * Returns the details of a video view.
     * @param {String} VIDEO_VIEW_ID ID of the Video View
     * @param {module:api/VideoViewsApi~getVideoViewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoViewResponse}
     */
    getVideoView(VIDEO_VIEW_ID, callback) {
      let postBody = null;
      // verify the required parameter 'VIDEO_VIEW_ID' is set
      if (VIDEO_VIEW_ID === undefined || VIDEO_VIEW_ID === null) {
        throw new Error("Missing the required parameter 'VIDEO_VIEW_ID' when calling getVideoView");
      }

      let pathParams = {
        'VIDEO_VIEW_ID': VIDEO_VIEW_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VideoViewResponse;
      return this.apiClient.callApi(
        '/data/v1/video-views/{VIDEO_VIEW_ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVideoViews operation.
     * @callback module:api/VideoViewsApi~listVideoViewsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListVideoViewsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Video Views
     * Returns a list of video views which match the filters and have a `view_end` within the specified timeframe.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 25)] Number of items to include in the response
     * @param {Number} [page = 1)] Offset by this many pages, of the size of `limit`
     * @param {String} [viewerId] Viewer ID to filter results by. This value may be provided by the integration, or may be created by Mux.
     * @param {Number} [errorId] Filter video views by the provided error ID (as returned in the error_type_id field in the list video views endpoint). If you provide any as the error ID, this will filter the results to those with any error.
     * @param {module:model/String} [orderDirection] Sort order.
     * @param {Array.<String>} [filters] Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a `!` character to the dimension.  Possible filter names are the same as returned by the List Filters endpoint.  Example:    * `filters[]=operating_system:windows&filters[]=!country:US` 
     * @param {Array.<String>} [timeframe] Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]=).  Accepted formats are...    * array of epoch timestamps e.g. `timeframe[]=1498867200&timeframe[]=1498953600`   * duration string e.g. `timeframe[]=24:hours or timeframe[]=7:days` 
     * @param {module:api/VideoViewsApi~listVideoViewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListVideoViewsResponse}
     */
    listVideoViews(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'viewer_id': opts['viewerId'],
        'error_id': opts['errorId'],
        'order_direction': opts['orderDirection'],
        'filters[]': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'timeframe[]': this.apiClient.buildCollectionParam(opts['timeframe'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListVideoViewsResponse;
      return this.apiClient.callApi(
        '/data/v1/video-views', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
