/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreatePlaybackRestrictionRequest from '../model/CreatePlaybackRestrictionRequest';
import ListPlaybackRestrictionsResponse from '../model/ListPlaybackRestrictionsResponse';
import PlaybackRestrictionResponse from '../model/PlaybackRestrictionResponse';
import UpdateReferrerDomainRestrictionRequest from '../model/UpdateReferrerDomainRestrictionRequest';

/**
* PlaybackRestrictions service.
* @module api/PlaybackRestrictionsApi
* @version v1
*/
export default class PlaybackRestrictionsApi {

    /**
    * Constructs a new PlaybackRestrictionsApi. 
    * @alias module:api/PlaybackRestrictionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPlaybackRestriction operation.
     * @callback module:api/PlaybackRestrictionsApi~createPlaybackRestrictionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaybackRestrictionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Playback Restriction
     * Create a new Playback Restriction.
     * @param {module:model/CreatePlaybackRestrictionRequest} createPlaybackRestrictionRequest 
     * @param {module:api/PlaybackRestrictionsApi~createPlaybackRestrictionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaybackRestrictionResponse}
     */
    createPlaybackRestriction(createPlaybackRestrictionRequest, callback) {
      let postBody = createPlaybackRestrictionRequest;
      // verify the required parameter 'createPlaybackRestrictionRequest' is set
      if (createPlaybackRestrictionRequest === undefined || createPlaybackRestrictionRequest === null) {
        throw new Error("Missing the required parameter 'createPlaybackRestrictionRequest' when calling createPlaybackRestriction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PlaybackRestrictionResponse;
      return this.apiClient.callApi(
        '/video/v1/playback-restrictions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePlaybackRestriction operation.
     * @callback module:api/PlaybackRestrictionsApi~deletePlaybackRestrictionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Playback Restriction
     * Deletes a single Playback Restriction.
     * @param {String} PLAYBACK_RESTRICTION_ID ID of the Playback Restriction.
     * @param {module:api/PlaybackRestrictionsApi~deletePlaybackRestrictionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePlaybackRestriction(PLAYBACK_RESTRICTION_ID, callback) {
      let postBody = null;
      // verify the required parameter 'PLAYBACK_RESTRICTION_ID' is set
      if (PLAYBACK_RESTRICTION_ID === undefined || PLAYBACK_RESTRICTION_ID === null) {
        throw new Error("Missing the required parameter 'PLAYBACK_RESTRICTION_ID' when calling deletePlaybackRestriction");
      }

      let pathParams = {
        'PLAYBACK_RESTRICTION_ID': PLAYBACK_RESTRICTION_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/video/v1/playback-restrictions/{PLAYBACK_RESTRICTION_ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPlaybackRestriction operation.
     * @callback module:api/PlaybackRestrictionsApi~getPlaybackRestrictionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaybackRestrictionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Playback Restriction
     * Retrieves a Playback Restriction associated with the unique identifier.
     * @param {String} PLAYBACK_RESTRICTION_ID ID of the Playback Restriction.
     * @param {module:api/PlaybackRestrictionsApi~getPlaybackRestrictionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaybackRestrictionResponse}
     */
    getPlaybackRestriction(PLAYBACK_RESTRICTION_ID, callback) {
      let postBody = null;
      // verify the required parameter 'PLAYBACK_RESTRICTION_ID' is set
      if (PLAYBACK_RESTRICTION_ID === undefined || PLAYBACK_RESTRICTION_ID === null) {
        throw new Error("Missing the required parameter 'PLAYBACK_RESTRICTION_ID' when calling getPlaybackRestriction");
      }

      let pathParams = {
        'PLAYBACK_RESTRICTION_ID': PLAYBACK_RESTRICTION_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlaybackRestrictionResponse;
      return this.apiClient.callApi(
        '/video/v1/playback-restrictions/{PLAYBACK_RESTRICTION_ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPlaybackRestrictions operation.
     * @callback module:api/PlaybackRestrictionsApi~listPlaybackRestrictionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPlaybackRestrictionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Playback Restrictions
     * Returns a list of all Playback Restrictions.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Offset by this many pages, of the size of `limit`
     * @param {Number} [limit = 25)] Number of items to include in the response
     * @param {module:api/PlaybackRestrictionsApi~listPlaybackRestrictionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPlaybackRestrictionsResponse}
     */
    listPlaybackRestrictions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPlaybackRestrictionsResponse;
      return this.apiClient.callApi(
        '/video/v1/playback-restrictions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReferrerDomainRestriction operation.
     * @callback module:api/PlaybackRestrictionsApi~updateReferrerDomainRestrictionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PlaybackRestrictionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the Referrer Playback Restriction
     * Allows you to modify the list of domains or change how Mux validates playback requests without the `Referer` HTTP header. The Referrer restriction fully replaces the old list with this new list of domains.
     * @param {String} PLAYBACK_RESTRICTION_ID ID of the Playback Restriction.
     * @param {module:model/UpdateReferrerDomainRestrictionRequest} updateReferrerDomainRestrictionRequest 
     * @param {module:api/PlaybackRestrictionsApi~updateReferrerDomainRestrictionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PlaybackRestrictionResponse}
     */
    updateReferrerDomainRestriction(PLAYBACK_RESTRICTION_ID, updateReferrerDomainRestrictionRequest, callback) {
      let postBody = updateReferrerDomainRestrictionRequest;
      // verify the required parameter 'PLAYBACK_RESTRICTION_ID' is set
      if (PLAYBACK_RESTRICTION_ID === undefined || PLAYBACK_RESTRICTION_ID === null) {
        throw new Error("Missing the required parameter 'PLAYBACK_RESTRICTION_ID' when calling updateReferrerDomainRestriction");
      }
      // verify the required parameter 'updateReferrerDomainRestrictionRequest' is set
      if (updateReferrerDomainRestrictionRequest === undefined || updateReferrerDomainRestrictionRequest === null) {
        throw new Error("Missing the required parameter 'updateReferrerDomainRestrictionRequest' when calling updateReferrerDomainRestriction");
      }

      let pathParams = {
        'PLAYBACK_RESTRICTION_ID': PLAYBACK_RESTRICTION_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PlaybackRestrictionResponse;
      return this.apiClient.callApi(
        '/video/v1/playback-restrictions/{PLAYBACK_RESTRICTION_ID}/referrer', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
