/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateLiveStreamRequest from '../model/CreateLiveStreamRequest';
import CreatePlaybackIDRequest from '../model/CreatePlaybackIDRequest';
import CreatePlaybackIDResponse from '../model/CreatePlaybackIDResponse';
import CreateSimulcastTargetRequest from '../model/CreateSimulcastTargetRequest';
import DisableLiveStreamResponse from '../model/DisableLiveStreamResponse';
import EnableLiveStreamResponse from '../model/EnableLiveStreamResponse';
import GetLiveStreamPlaybackIDResponse from '../model/GetLiveStreamPlaybackIDResponse';
import ListLiveStreamsResponse from '../model/ListLiveStreamsResponse';
import LiveStreamResponse from '../model/LiveStreamResponse';
import LiveStreamStatus from '../model/LiveStreamStatus';
import SignalLiveStreamCompleteResponse from '../model/SignalLiveStreamCompleteResponse';
import SimulcastTargetResponse from '../model/SimulcastTargetResponse';
import UpdateLiveStreamEmbeddedSubtitlesRequest from '../model/UpdateLiveStreamEmbeddedSubtitlesRequest';
import UpdateLiveStreamGeneratedSubtitlesRequest from '../model/UpdateLiveStreamGeneratedSubtitlesRequest';
import UpdateLiveStreamRequest from '../model/UpdateLiveStreamRequest';

/**
* LiveStreams service.
* @module api/LiveStreamsApi
* @version v1
*/
export default class LiveStreamsApi {

    /**
    * Constructs a new LiveStreamsApi. 
    * @alias module:api/LiveStreamsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createLiveStream operation.
     * @callback module:api/LiveStreamsApi~createLiveStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a live stream
     * Creates a new live stream. Once created, an encoder can connect to Mux via the specified stream key and begin streaming to an audience.
     * @param {module:model/CreateLiveStreamRequest} createLiveStreamRequest 
     * @param {module:api/LiveStreamsApi~createLiveStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveStreamResponse}
     */
    createLiveStream(createLiveStreamRequest, callback) {
      let postBody = createLiveStreamRequest;
      // verify the required parameter 'createLiveStreamRequest' is set
      if (createLiveStreamRequest === undefined || createLiveStreamRequest === null) {
        throw new Error("Missing the required parameter 'createLiveStreamRequest' when calling createLiveStream");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LiveStreamResponse;
      return this.apiClient.callApi(
        '/video/v1/live-streams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLiveStreamPlaybackId operation.
     * @callback module:api/LiveStreamsApi~createLiveStreamPlaybackIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePlaybackIDResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a live stream playback ID
     * Create a new playback ID for this live stream, through which a viewer can watch the streamed content of the live stream.
     * @param {String} LIVE_STREAM_ID The live stream ID
     * @param {module:model/CreatePlaybackIDRequest} createPlaybackIDRequest 
     * @param {module:api/LiveStreamsApi~createLiveStreamPlaybackIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePlaybackIDResponse}
     */
    createLiveStreamPlaybackId(LIVE_STREAM_ID, createPlaybackIDRequest, callback) {
      let postBody = createPlaybackIDRequest;
      // verify the required parameter 'LIVE_STREAM_ID' is set
      if (LIVE_STREAM_ID === undefined || LIVE_STREAM_ID === null) {
        throw new Error("Missing the required parameter 'LIVE_STREAM_ID' when calling createLiveStreamPlaybackId");
      }
      // verify the required parameter 'createPlaybackIDRequest' is set
      if (createPlaybackIDRequest === undefined || createPlaybackIDRequest === null) {
        throw new Error("Missing the required parameter 'createPlaybackIDRequest' when calling createLiveStreamPlaybackId");
      }

      let pathParams = {
        'LIVE_STREAM_ID': LIVE_STREAM_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePlaybackIDResponse;
      return this.apiClient.callApi(
        '/video/v1/live-streams/{LIVE_STREAM_ID}/playback-ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLiveStreamSimulcastTarget operation.
     * @callback module:api/LiveStreamsApi~createLiveStreamSimulcastTargetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimulcastTargetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a live stream simulcast target
     * Create a simulcast target for the parent live stream. Simulcast target can only be created when the parent live stream is in idle state. Only one simulcast target can be created at a time with this API.
     * @param {String} LIVE_STREAM_ID The live stream ID
     * @param {module:model/CreateSimulcastTargetRequest} createSimulcastTargetRequest 
     * @param {module:api/LiveStreamsApi~createLiveStreamSimulcastTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimulcastTargetResponse}
     */
    createLiveStreamSimulcastTarget(LIVE_STREAM_ID, createSimulcastTargetRequest, callback) {
      let postBody = createSimulcastTargetRequest;
      // verify the required parameter 'LIVE_STREAM_ID' is set
      if (LIVE_STREAM_ID === undefined || LIVE_STREAM_ID === null) {
        throw new Error("Missing the required parameter 'LIVE_STREAM_ID' when calling createLiveStreamSimulcastTarget");
      }
      // verify the required parameter 'createSimulcastTargetRequest' is set
      if (createSimulcastTargetRequest === undefined || createSimulcastTargetRequest === null) {
        throw new Error("Missing the required parameter 'createSimulcastTargetRequest' when calling createLiveStreamSimulcastTarget");
      }

      let pathParams = {
        'LIVE_STREAM_ID': LIVE_STREAM_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SimulcastTargetResponse;
      return this.apiClient.callApi(
        '/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLiveStream operation.
     * @callback module:api/LiveStreamsApi~deleteLiveStreamCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a live stream
     * Deletes a live stream from the current environment. If the live stream is currently active and being streamed to, ingest will be terminated and the encoder will be disconnected.
     * @param {String} LIVE_STREAM_ID The live stream ID
     * @param {module:api/LiveStreamsApi~deleteLiveStreamCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLiveStream(LIVE_STREAM_ID, callback) {
      let postBody = null;
      // verify the required parameter 'LIVE_STREAM_ID' is set
      if (LIVE_STREAM_ID === undefined || LIVE_STREAM_ID === null) {
        throw new Error("Missing the required parameter 'LIVE_STREAM_ID' when calling deleteLiveStream");
      }

      let pathParams = {
        'LIVE_STREAM_ID': LIVE_STREAM_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/video/v1/live-streams/{LIVE_STREAM_ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLiveStreamPlaybackId operation.
     * @callback module:api/LiveStreamsApi~deleteLiveStreamPlaybackIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a live stream playback ID
     * Deletes the playback ID for the live stream. This will not disable ingest (as the live stream still exists). New attempts to play back the live stream will fail immediately. However, current viewers will be able to continue watching the stream for some period of time.
     * @param {String} LIVE_STREAM_ID The live stream ID
     * @param {String} PLAYBACK_ID The live stream's playback ID.
     * @param {module:api/LiveStreamsApi~deleteLiveStreamPlaybackIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLiveStreamPlaybackId(LIVE_STREAM_ID, PLAYBACK_ID, callback) {
      let postBody = null;
      // verify the required parameter 'LIVE_STREAM_ID' is set
      if (LIVE_STREAM_ID === undefined || LIVE_STREAM_ID === null) {
        throw new Error("Missing the required parameter 'LIVE_STREAM_ID' when calling deleteLiveStreamPlaybackId");
      }
      // verify the required parameter 'PLAYBACK_ID' is set
      if (PLAYBACK_ID === undefined || PLAYBACK_ID === null) {
        throw new Error("Missing the required parameter 'PLAYBACK_ID' when calling deleteLiveStreamPlaybackId");
      }

      let pathParams = {
        'LIVE_STREAM_ID': LIVE_STREAM_ID,
        'PLAYBACK_ID': PLAYBACK_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/video/v1/live-streams/{LIVE_STREAM_ID}/playback-ids/{PLAYBACK_ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLiveStreamSimulcastTarget operation.
     * @callback module:api/LiveStreamsApi~deleteLiveStreamSimulcastTargetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Live Stream Simulcast Target
     * Delete the simulcast target using the simulcast target ID returned when creating the simulcast target. Simulcast Target can only be deleted when the parent live stream is in idle state.
     * @param {String} LIVE_STREAM_ID The live stream ID
     * @param {String} SIMULCAST_TARGET_ID The ID of the simulcast target.
     * @param {module:api/LiveStreamsApi~deleteLiveStreamSimulcastTargetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteLiveStreamSimulcastTarget(LIVE_STREAM_ID, SIMULCAST_TARGET_ID, callback) {
      let postBody = null;
      // verify the required parameter 'LIVE_STREAM_ID' is set
      if (LIVE_STREAM_ID === undefined || LIVE_STREAM_ID === null) {
        throw new Error("Missing the required parameter 'LIVE_STREAM_ID' when calling deleteLiveStreamSimulcastTarget");
      }
      // verify the required parameter 'SIMULCAST_TARGET_ID' is set
      if (SIMULCAST_TARGET_ID === undefined || SIMULCAST_TARGET_ID === null) {
        throw new Error("Missing the required parameter 'SIMULCAST_TARGET_ID' when calling deleteLiveStreamSimulcastTarget");
      }

      let pathParams = {
        'LIVE_STREAM_ID': LIVE_STREAM_ID,
        'SIMULCAST_TARGET_ID': SIMULCAST_TARGET_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets/{SIMULCAST_TARGET_ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableLiveStream operation.
     * @callback module:api/LiveStreamsApi~disableLiveStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisableLiveStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disable a live stream
     * Disables a live stream, making it reject incoming RTMP streams until re-enabled. The API also ends the live stream recording immediately when active. Ending the live stream recording adds the `EXT-X-ENDLIST` tag to the HLS manifest which notifies the player that this live stream is over.  Mux also closes the encoder connection immediately. Any attempt from the encoder to re-establish connection will fail till the live stream is re-enabled. 
     * @param {String} LIVE_STREAM_ID The live stream ID
     * @param {module:api/LiveStreamsApi~disableLiveStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisableLiveStreamResponse}
     */
    disableLiveStream(LIVE_STREAM_ID, callback) {
      let postBody = null;
      // verify the required parameter 'LIVE_STREAM_ID' is set
      if (LIVE_STREAM_ID === undefined || LIVE_STREAM_ID === null) {
        throw new Error("Missing the required parameter 'LIVE_STREAM_ID' when calling disableLiveStream");
      }

      let pathParams = {
        'LIVE_STREAM_ID': LIVE_STREAM_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DisableLiveStreamResponse;
      return this.apiClient.callApi(
        '/video/v1/live-streams/{LIVE_STREAM_ID}/disable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableLiveStream operation.
     * @callback module:api/LiveStreamsApi~enableLiveStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnableLiveStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enable a live stream
     * Enables a live stream, allowing it to accept an incoming RTMP stream.
     * @param {String} LIVE_STREAM_ID The live stream ID
     * @param {module:api/LiveStreamsApi~enableLiveStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnableLiveStreamResponse}
     */
    enableLiveStream(LIVE_STREAM_ID, callback) {
      let postBody = null;
      // verify the required parameter 'LIVE_STREAM_ID' is set
      if (LIVE_STREAM_ID === undefined || LIVE_STREAM_ID === null) {
        throw new Error("Missing the required parameter 'LIVE_STREAM_ID' when calling enableLiveStream");
      }

      let pathParams = {
        'LIVE_STREAM_ID': LIVE_STREAM_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EnableLiveStreamResponse;
      return this.apiClient.callApi(
        '/video/v1/live-streams/{LIVE_STREAM_ID}/enable', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLiveStream operation.
     * @callback module:api/LiveStreamsApi~getLiveStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a live stream
     * Retrieves the details of a live stream that has previously been created. Supply the unique live stream ID that was returned from your previous request, and Mux will return the corresponding live stream information. The same information is returned when creating a live stream.
     * @param {String} LIVE_STREAM_ID The live stream ID
     * @param {module:api/LiveStreamsApi~getLiveStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveStreamResponse}
     */
    getLiveStream(LIVE_STREAM_ID, callback) {
      let postBody = null;
      // verify the required parameter 'LIVE_STREAM_ID' is set
      if (LIVE_STREAM_ID === undefined || LIVE_STREAM_ID === null) {
        throw new Error("Missing the required parameter 'LIVE_STREAM_ID' when calling getLiveStream");
      }

      let pathParams = {
        'LIVE_STREAM_ID': LIVE_STREAM_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LiveStreamResponse;
      return this.apiClient.callApi(
        '/video/v1/live-streams/{LIVE_STREAM_ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLiveStreamPlaybackId operation.
     * @callback module:api/LiveStreamsApi~getLiveStreamPlaybackIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLiveStreamPlaybackIDResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a live stream playback ID
     * Fetches information about a live stream's playback ID, through which a viewer can watch the streamed content from this live stream.
     * @param {String} LIVE_STREAM_ID The live stream ID
     * @param {String} PLAYBACK_ID The live stream's playback ID.
     * @param {module:api/LiveStreamsApi~getLiveStreamPlaybackIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLiveStreamPlaybackIDResponse}
     */
    getLiveStreamPlaybackId(LIVE_STREAM_ID, PLAYBACK_ID, callback) {
      let postBody = null;
      // verify the required parameter 'LIVE_STREAM_ID' is set
      if (LIVE_STREAM_ID === undefined || LIVE_STREAM_ID === null) {
        throw new Error("Missing the required parameter 'LIVE_STREAM_ID' when calling getLiveStreamPlaybackId");
      }
      // verify the required parameter 'PLAYBACK_ID' is set
      if (PLAYBACK_ID === undefined || PLAYBACK_ID === null) {
        throw new Error("Missing the required parameter 'PLAYBACK_ID' when calling getLiveStreamPlaybackId");
      }

      let pathParams = {
        'LIVE_STREAM_ID': LIVE_STREAM_ID,
        'PLAYBACK_ID': PLAYBACK_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLiveStreamPlaybackIDResponse;
      return this.apiClient.callApi(
        '/video/v1/live-streams/{LIVE_STREAM_ID}/playback-ids/{PLAYBACK_ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLiveStreamSimulcastTarget operation.
     * @callback module:api/LiveStreamsApi~getLiveStreamSimulcastTargetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimulcastTargetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Live Stream Simulcast Target
     * Retrieves the details of the simulcast target created for the parent live stream. Supply the unique live stream ID and simulcast target ID that was returned in the response of create simulcast target request, and Mux will return the corresponding information.
     * @param {String} LIVE_STREAM_ID The live stream ID
     * @param {String} SIMULCAST_TARGET_ID The ID of the simulcast target.
     * @param {module:api/LiveStreamsApi~getLiveStreamSimulcastTargetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimulcastTargetResponse}
     */
    getLiveStreamSimulcastTarget(LIVE_STREAM_ID, SIMULCAST_TARGET_ID, callback) {
      let postBody = null;
      // verify the required parameter 'LIVE_STREAM_ID' is set
      if (LIVE_STREAM_ID === undefined || LIVE_STREAM_ID === null) {
        throw new Error("Missing the required parameter 'LIVE_STREAM_ID' when calling getLiveStreamSimulcastTarget");
      }
      // verify the required parameter 'SIMULCAST_TARGET_ID' is set
      if (SIMULCAST_TARGET_ID === undefined || SIMULCAST_TARGET_ID === null) {
        throw new Error("Missing the required parameter 'SIMULCAST_TARGET_ID' when calling getLiveStreamSimulcastTarget");
      }

      let pathParams = {
        'LIVE_STREAM_ID': LIVE_STREAM_ID,
        'SIMULCAST_TARGET_ID': SIMULCAST_TARGET_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SimulcastTargetResponse;
      return this.apiClient.callApi(
        '/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets/{SIMULCAST_TARGET_ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLiveStreams operation.
     * @callback module:api/LiveStreamsApi~listLiveStreamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLiveStreamsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List live streams
     * Lists the live streams that currently exist in the current environment.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 25)] Number of items to include in the response
     * @param {Number} [page = 1)] Offset by this many pages, of the size of `limit`
     * @param {String} [streamKey] Filter response to return live stream for this stream key only
     * @param {module:model/LiveStreamStatus} [status] Filter response to return live streams with the specified status only
     * @param {module:api/LiveStreamsApi~listLiveStreamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLiveStreamsResponse}
     */
    listLiveStreams(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'stream_key': opts['streamKey'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListLiveStreamsResponse;
      return this.apiClient.callApi(
        '/video/v1/live-streams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetStreamKey operation.
     * @callback module:api/LiveStreamsApi~resetStreamKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset a live stream's stream key
     * Reset a live stream key if you want to immediately stop the current stream key from working and create a new stream key that can be used for future broadcasts.
     * @param {String} LIVE_STREAM_ID The live stream ID
     * @param {module:api/LiveStreamsApi~resetStreamKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveStreamResponse}
     */
    resetStreamKey(LIVE_STREAM_ID, callback) {
      let postBody = null;
      // verify the required parameter 'LIVE_STREAM_ID' is set
      if (LIVE_STREAM_ID === undefined || LIVE_STREAM_ID === null) {
        throw new Error("Missing the required parameter 'LIVE_STREAM_ID' when calling resetStreamKey");
      }

      let pathParams = {
        'LIVE_STREAM_ID': LIVE_STREAM_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LiveStreamResponse;
      return this.apiClient.callApi(
        '/video/v1/live-streams/{LIVE_STREAM_ID}/reset-stream-key', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the signalLiveStreamComplete operation.
     * @callback module:api/LiveStreamsApi~signalLiveStreamCompleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SignalLiveStreamCompleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Signal a live stream is finished
     * (Optional) End the live stream recording immediately instead of waiting for the reconnect_window. `EXT-X-ENDLIST` tag is added to the HLS manifest which notifies the player that this live stream is over.  Mux does not close the encoder connection immediately. Encoders are often configured to re-establish connections immediately which would result in a new recorded asset. For this reason, Mux waits for 60s before closing the connection with the encoder. This 60s timeframe is meant to give encoder operators a chance to disconnect from their end. 
     * @param {String} LIVE_STREAM_ID The live stream ID
     * @param {module:api/LiveStreamsApi~signalLiveStreamCompleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SignalLiveStreamCompleteResponse}
     */
    signalLiveStreamComplete(LIVE_STREAM_ID, callback) {
      let postBody = null;
      // verify the required parameter 'LIVE_STREAM_ID' is set
      if (LIVE_STREAM_ID === undefined || LIVE_STREAM_ID === null) {
        throw new Error("Missing the required parameter 'LIVE_STREAM_ID' when calling signalLiveStreamComplete");
      }

      let pathParams = {
        'LIVE_STREAM_ID': LIVE_STREAM_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SignalLiveStreamCompleteResponse;
      return this.apiClient.callApi(
        '/video/v1/live-streams/{LIVE_STREAM_ID}/complete', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLiveStream operation.
     * @callback module:api/LiveStreamsApi~updateLiveStreamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a live stream
     * Updates the parameters of a previously-created live stream. This currently supports a subset of variables. Supply the live stream ID and the updated parameters and Mux will return the corresponding live stream information. The information returned will be the same after update as for subsequent get live stream requests.
     * @param {String} LIVE_STREAM_ID The live stream ID
     * @param {module:model/UpdateLiveStreamRequest} updateLiveStreamRequest 
     * @param {module:api/LiveStreamsApi~updateLiveStreamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveStreamResponse}
     */
    updateLiveStream(LIVE_STREAM_ID, updateLiveStreamRequest, callback) {
      let postBody = updateLiveStreamRequest;
      // verify the required parameter 'LIVE_STREAM_ID' is set
      if (LIVE_STREAM_ID === undefined || LIVE_STREAM_ID === null) {
        throw new Error("Missing the required parameter 'LIVE_STREAM_ID' when calling updateLiveStream");
      }
      // verify the required parameter 'updateLiveStreamRequest' is set
      if (updateLiveStreamRequest === undefined || updateLiveStreamRequest === null) {
        throw new Error("Missing the required parameter 'updateLiveStreamRequest' when calling updateLiveStream");
      }

      let pathParams = {
        'LIVE_STREAM_ID': LIVE_STREAM_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LiveStreamResponse;
      return this.apiClient.callApi(
        '/video/v1/live-streams/{LIVE_STREAM_ID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLiveStreamEmbeddedSubtitles operation.
     * @callback module:api/LiveStreamsApi~updateLiveStreamEmbeddedSubtitlesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a live stream's embedded subtitles
     * Configures a live stream to receive embedded closed captions. The resulting Asset's subtitle text track will have `closed_captions: true` set. 
     * @param {String} LIVE_STREAM_ID The live stream ID
     * @param {module:model/UpdateLiveStreamEmbeddedSubtitlesRequest} updateLiveStreamEmbeddedSubtitlesRequest 
     * @param {module:api/LiveStreamsApi~updateLiveStreamEmbeddedSubtitlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveStreamResponse}
     */
    updateLiveStreamEmbeddedSubtitles(LIVE_STREAM_ID, updateLiveStreamEmbeddedSubtitlesRequest, callback) {
      let postBody = updateLiveStreamEmbeddedSubtitlesRequest;
      // verify the required parameter 'LIVE_STREAM_ID' is set
      if (LIVE_STREAM_ID === undefined || LIVE_STREAM_ID === null) {
        throw new Error("Missing the required parameter 'LIVE_STREAM_ID' when calling updateLiveStreamEmbeddedSubtitles");
      }
      // verify the required parameter 'updateLiveStreamEmbeddedSubtitlesRequest' is set
      if (updateLiveStreamEmbeddedSubtitlesRequest === undefined || updateLiveStreamEmbeddedSubtitlesRequest === null) {
        throw new Error("Missing the required parameter 'updateLiveStreamEmbeddedSubtitlesRequest' when calling updateLiveStreamEmbeddedSubtitles");
      }

      let pathParams = {
        'LIVE_STREAM_ID': LIVE_STREAM_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LiveStreamResponse;
      return this.apiClient.callApi(
        '/video/v1/live-streams/{LIVE_STREAM_ID}/embedded-subtitles', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLiveStreamGeneratedSubtitles operation.
     * @callback module:api/LiveStreamsApi~updateLiveStreamGeneratedSubtitlesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LiveStreamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a live stream's generated subtitles
     * Updates a live stream's automatic-speech-recognition-generated subtitle configuration. Automatic speech recognition subtitles can be removed by sending an empty array in the request payload. 
     * @param {String} LIVE_STREAM_ID The live stream ID
     * @param {module:model/UpdateLiveStreamGeneratedSubtitlesRequest} updateLiveStreamGeneratedSubtitlesRequest 
     * @param {module:api/LiveStreamsApi~updateLiveStreamGeneratedSubtitlesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LiveStreamResponse}
     */
    updateLiveStreamGeneratedSubtitles(LIVE_STREAM_ID, updateLiveStreamGeneratedSubtitlesRequest, callback) {
      let postBody = updateLiveStreamGeneratedSubtitlesRequest;
      // verify the required parameter 'LIVE_STREAM_ID' is set
      if (LIVE_STREAM_ID === undefined || LIVE_STREAM_ID === null) {
        throw new Error("Missing the required parameter 'LIVE_STREAM_ID' when calling updateLiveStreamGeneratedSubtitles");
      }
      // verify the required parameter 'updateLiveStreamGeneratedSubtitlesRequest' is set
      if (updateLiveStreamGeneratedSubtitlesRequest === undefined || updateLiveStreamGeneratedSubtitlesRequest === null) {
        throw new Error("Missing the required parameter 'updateLiveStreamGeneratedSubtitlesRequest' when calling updateLiveStreamGeneratedSubtitles");
      }

      let pathParams = {
        'LIVE_STREAM_ID': LIVE_STREAM_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LiveStreamResponse;
      return this.apiClient.callApi(
        '/video/v1/live-streams/{LIVE_STREAM_ID}/generated-subtitles', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
