/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IncidentResponse from '../model/IncidentResponse';
import ListIncidentsResponse from '../model/ListIncidentsResponse';
import ListRelatedIncidentsResponse from '../model/ListRelatedIncidentsResponse';

/**
* Incidents service.
* @module api/IncidentsApi
* @version v1
*/
export default class IncidentsApi {

    /**
    * Constructs a new IncidentsApi. 
    * @alias module:api/IncidentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getIncident operation.
     * @callback module:api/IncidentsApi~getIncidentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IncidentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an Incident
     * Returns the details of an incident.
     * @param {String} INCIDENT_ID ID of the Incident
     * @param {module:api/IncidentsApi~getIncidentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IncidentResponse}
     */
    getIncident(INCIDENT_ID, callback) {
      let postBody = null;
      // verify the required parameter 'INCIDENT_ID' is set
      if (INCIDENT_ID === undefined || INCIDENT_ID === null) {
        throw new Error("Missing the required parameter 'INCIDENT_ID' when calling getIncident");
      }

      let pathParams = {
        'INCIDENT_ID': INCIDENT_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IncidentResponse;
      return this.apiClient.callApi(
        '/data/v1/incidents/{INCIDENT_ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listIncidents operation.
     * @callback module:api/IncidentsApi~listIncidentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListIncidentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Incidents
     * Returns a list of incidents.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 25)] Number of items to include in the response
     * @param {Number} [page = 1)] Offset by this many pages, of the size of `limit`
     * @param {module:model/String} [orderBy] Value to order the results by
     * @param {module:model/String} [orderDirection] Sort order.
     * @param {module:model/String} [status] Status to filter incidents by
     * @param {module:model/String} [severity] Severity to filter incidents by
     * @param {module:api/IncidentsApi~listIncidentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListIncidentsResponse}
     */
    listIncidents(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection'],
        'status': opts['status'],
        'severity': opts['severity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListIncidentsResponse;
      return this.apiClient.callApi(
        '/data/v1/incidents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRelatedIncidents operation.
     * @callback module:api/IncidentsApi~listRelatedIncidentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRelatedIncidentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Related Incidents
     * Returns all the incidents that seem related to a specific incident.
     * @param {String} INCIDENT_ID ID of the Incident
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 25)] Number of items to include in the response
     * @param {Number} [page = 1)] Offset by this many pages, of the size of `limit`
     * @param {module:model/String} [orderBy] Value to order the results by
     * @param {module:model/String} [orderDirection] Sort order.
     * @param {module:api/IncidentsApi~listRelatedIncidentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRelatedIncidentsResponse}
     */
    listRelatedIncidents(INCIDENT_ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'INCIDENT_ID' is set
      if (INCIDENT_ID === undefined || INCIDENT_ID === null) {
        throw new Error("Missing the required parameter 'INCIDENT_ID' when calling listRelatedIncidents");
      }

      let pathParams = {
        'INCIDENT_ID': INCIDENT_ID
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRelatedIncidentsResponse;
      return this.apiClient.callApi(
        '/data/v1/incidents/{INCIDENT_ID}/related', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
