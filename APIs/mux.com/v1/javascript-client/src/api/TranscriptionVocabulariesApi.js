/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateTranscriptionVocabularyRequest from '../model/CreateTranscriptionVocabularyRequest';
import ListTranscriptionVocabulariesResponse from '../model/ListTranscriptionVocabulariesResponse';
import TranscriptionVocabularyResponse from '../model/TranscriptionVocabularyResponse';
import UpdateTranscriptionVocabularyRequest from '../model/UpdateTranscriptionVocabularyRequest';

/**
* TranscriptionVocabularies service.
* @module api/TranscriptionVocabulariesApi
* @version v1
*/
export default class TranscriptionVocabulariesApi {

    /**
    * Constructs a new TranscriptionVocabulariesApi. 
    * @alias module:api/TranscriptionVocabulariesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTranscriptionVocabulary operation.
     * @callback module:api/TranscriptionVocabulariesApi~createTranscriptionVocabularyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TranscriptionVocabularyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Transcription Vocabulary
     * Create a new Transcription Vocabulary.
     * @param {module:model/CreateTranscriptionVocabularyRequest} createTranscriptionVocabularyRequest 
     * @param {module:api/TranscriptionVocabulariesApi~createTranscriptionVocabularyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TranscriptionVocabularyResponse}
     */
    createTranscriptionVocabulary(createTranscriptionVocabularyRequest, callback) {
      let postBody = createTranscriptionVocabularyRequest;
      // verify the required parameter 'createTranscriptionVocabularyRequest' is set
      if (createTranscriptionVocabularyRequest === undefined || createTranscriptionVocabularyRequest === null) {
        throw new Error("Missing the required parameter 'createTranscriptionVocabularyRequest' when calling createTranscriptionVocabulary");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TranscriptionVocabularyResponse;
      return this.apiClient.callApi(
        '/video/v1/transcription-vocabularies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTranscriptionVocabulary operation.
     * @callback module:api/TranscriptionVocabulariesApi~deleteTranscriptionVocabularyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Transcription Vocabulary
     * Deletes a Transcription Vocabulary. The Transcription Vocabulary's ID will be disassociated from any live streams using it. Transcription Vocabularies can be deleted while associated live streams are active. However, the words and phrases in the deleted Transcription Vocabulary will remain attached to those streams while they are active.
     * @param {String} TRANSCRIPTION_VOCABULARY_ID The ID of the Transcription Vocabulary.
     * @param {module:api/TranscriptionVocabulariesApi~deleteTranscriptionVocabularyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTranscriptionVocabulary(TRANSCRIPTION_VOCABULARY_ID, callback) {
      let postBody = null;
      // verify the required parameter 'TRANSCRIPTION_VOCABULARY_ID' is set
      if (TRANSCRIPTION_VOCABULARY_ID === undefined || TRANSCRIPTION_VOCABULARY_ID === null) {
        throw new Error("Missing the required parameter 'TRANSCRIPTION_VOCABULARY_ID' when calling deleteTranscriptionVocabulary");
      }

      let pathParams = {
        'TRANSCRIPTION_VOCABULARY_ID': TRANSCRIPTION_VOCABULARY_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/video/v1/transcription-vocabularies/{TRANSCRIPTION_VOCABULARY_ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTranscriptionVocabulary operation.
     * @callback module:api/TranscriptionVocabulariesApi~getTranscriptionVocabularyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TranscriptionVocabularyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a Transcription Vocabulary
     * Retrieves the details of a Transcription Vocabulary that has previously been created. Supply the unique Transcription Vocabulary ID and Mux will return the corresponding Transcription Vocabulary information. The same information is returned when creating a Transcription Vocabulary.
     * @param {String} TRANSCRIPTION_VOCABULARY_ID The ID of the Transcription Vocabulary.
     * @param {module:api/TranscriptionVocabulariesApi~getTranscriptionVocabularyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TranscriptionVocabularyResponse}
     */
    getTranscriptionVocabulary(TRANSCRIPTION_VOCABULARY_ID, callback) {
      let postBody = null;
      // verify the required parameter 'TRANSCRIPTION_VOCABULARY_ID' is set
      if (TRANSCRIPTION_VOCABULARY_ID === undefined || TRANSCRIPTION_VOCABULARY_ID === null) {
        throw new Error("Missing the required parameter 'TRANSCRIPTION_VOCABULARY_ID' when calling getTranscriptionVocabulary");
      }

      let pathParams = {
        'TRANSCRIPTION_VOCABULARY_ID': TRANSCRIPTION_VOCABULARY_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TranscriptionVocabularyResponse;
      return this.apiClient.callApi(
        '/video/v1/transcription-vocabularies/{TRANSCRIPTION_VOCABULARY_ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTranscriptionVocabularies operation.
     * @callback module:api/TranscriptionVocabulariesApi~listTranscriptionVocabulariesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTranscriptionVocabulariesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Transcription Vocabularies
     * List all Transcription Vocabularies.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] Number of items to include in the response
     * @param {Number} [page = 1)] Offset by this many pages, of the size of `limit`
     * @param {module:api/TranscriptionVocabulariesApi~listTranscriptionVocabulariesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTranscriptionVocabulariesResponse}
     */
    listTranscriptionVocabularies(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTranscriptionVocabulariesResponse;
      return this.apiClient.callApi(
        '/video/v1/transcription-vocabularies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTranscriptionVocabulary operation.
     * @callback module:api/TranscriptionVocabulariesApi~updateTranscriptionVocabularyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TranscriptionVocabularyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Transcription Vocabulary
     * Updates the details of a previously-created Transcription Vocabulary. Updates to Transcription Vocabularies are allowed while associated live streams are active. However, updates will not be applied to those streams while they are active.
     * @param {String} TRANSCRIPTION_VOCABULARY_ID The ID of the Transcription Vocabulary.
     * @param {module:model/UpdateTranscriptionVocabularyRequest} updateTranscriptionVocabularyRequest 
     * @param {module:api/TranscriptionVocabulariesApi~updateTranscriptionVocabularyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TranscriptionVocabularyResponse}
     */
    updateTranscriptionVocabulary(TRANSCRIPTION_VOCABULARY_ID, updateTranscriptionVocabularyRequest, callback) {
      let postBody = updateTranscriptionVocabularyRequest;
      // verify the required parameter 'TRANSCRIPTION_VOCABULARY_ID' is set
      if (TRANSCRIPTION_VOCABULARY_ID === undefined || TRANSCRIPTION_VOCABULARY_ID === null) {
        throw new Error("Missing the required parameter 'TRANSCRIPTION_VOCABULARY_ID' when calling updateTranscriptionVocabulary");
      }
      // verify the required parameter 'updateTranscriptionVocabularyRequest' is set
      if (updateTranscriptionVocabularyRequest === undefined || updateTranscriptionVocabularyRequest === null) {
        throw new Error("Missing the required parameter 'updateTranscriptionVocabularyRequest' when calling updateTranscriptionVocabulary");
      }

      let pathParams = {
        'TRANSCRIPTION_VOCABULARY_ID': TRANSCRIPTION_VOCABULARY_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TranscriptionVocabularyResponse;
      return this.apiClient.callApi(
        '/video/v1/transcription-vocabularies/{TRANSCRIPTION_VOCABULARY_ID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
