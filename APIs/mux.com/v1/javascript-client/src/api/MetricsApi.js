/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetMetricTimeseriesDataResponse from '../model/GetMetricTimeseriesDataResponse';
import GetOverallValuesResponse from '../model/GetOverallValuesResponse';
import ListAllMetricValuesResponse from '../model/ListAllMetricValuesResponse';
import ListBreakdownValuesResponse from '../model/ListBreakdownValuesResponse';
import ListInsightsResponse from '../model/ListInsightsResponse';

/**
* Metrics service.
* @module api/MetricsApi
* @version v1
*/
export default class MetricsApi {

    /**
    * Constructs a new MetricsApi. 
    * @alias module:api/MetricsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getMetricTimeseriesData operation.
     * @callback module:api/MetricsApi~getMetricTimeseriesDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMetricTimeseriesDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get metric timeseries data
     * Returns timeseries data for a specific metric.  Each interval represented in the data array contains an array with the following values:   * the first element is the interval time   * the second element is the calculated metric value   * the third element is the number of views in the interval that have a valid metric value 
     * @param {module:model/String} METRIC_ID ID of the Metric
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [timeframe] Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]=).  Accepted formats are...    * array of epoch timestamps e.g. `timeframe[]=1498867200&timeframe[]=1498953600`   * duration string e.g. `timeframe[]=24:hours or timeframe[]=7:days` 
     * @param {Array.<String>} [filters] Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a `!` character to the dimension.  Possible filter names are the same as returned by the List Filters endpoint.  Example:    * `filters[]=operating_system:windows&filters[]=!country:US` 
     * @param {module:model/String} [measurement] Measurement for the provided metric. If omitted, the default for the metric will be used.
     * @param {module:model/String} [orderDirection] Sort order.
     * @param {module:model/String} [groupBy] Time granularity to group results by. If this value is omitted, a default granularity is chosen based on the timeframe.  For timeframes of less than 90 minutes, the default granularity is `minute`. Between 90 minutes and 6 hours, the default granularity is `ten_minutes`. Between 6 hours and 15 days inclusive, the default granularity is `hour`. The granularity of timeframes that exceed 15 days is `day`. This default behavior is subject to change; it is strongly suggested that you explicitly specify the granularity. 
     * @param {module:api/MetricsApi~getMetricTimeseriesDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMetricTimeseriesDataResponse}
     */
    getMetricTimeseriesData(METRIC_ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'METRIC_ID' is set
      if (METRIC_ID === undefined || METRIC_ID === null) {
        throw new Error("Missing the required parameter 'METRIC_ID' when calling getMetricTimeseriesData");
      }

      let pathParams = {
        'METRIC_ID': METRIC_ID
      };
      let queryParams = {
        'timeframe[]': this.apiClient.buildCollectionParam(opts['timeframe'], 'multi'),
        'filters[]': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'measurement': opts['measurement'],
        'order_direction': opts['orderDirection'],
        'group_by': opts['groupBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMetricTimeseriesDataResponse;
      return this.apiClient.callApi(
        '/data/v1/metrics/{METRIC_ID}/timeseries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOverallValues operation.
     * @callback module:api/MetricsApi~getOverallValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOverallValuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Overall values
     * Returns the overall value for a specific metric, as well as the total view count, watch time, and the Mux Global metric value for the metric.
     * @param {module:model/String} METRIC_ID ID of the Metric
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [timeframe] Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]=).  Accepted formats are...    * array of epoch timestamps e.g. `timeframe[]=1498867200&timeframe[]=1498953600`   * duration string e.g. `timeframe[]=24:hours or timeframe[]=7:days` 
     * @param {Array.<String>} [filters] Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a `!` character to the dimension.  Possible filter names are the same as returned by the List Filters endpoint.  Example:    * `filters[]=operating_system:windows&filters[]=!country:US` 
     * @param {module:model/String} [measurement] Measurement for the provided metric. If omitted, the default for the metric will be used.
     * @param {module:api/MetricsApi~getOverallValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOverallValuesResponse}
     */
    getOverallValues(METRIC_ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'METRIC_ID' is set
      if (METRIC_ID === undefined || METRIC_ID === null) {
        throw new Error("Missing the required parameter 'METRIC_ID' when calling getOverallValues");
      }

      let pathParams = {
        'METRIC_ID': METRIC_ID
      };
      let queryParams = {
        'timeframe[]': this.apiClient.buildCollectionParam(opts['timeframe'], 'multi'),
        'filters[]': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'measurement': opts['measurement']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOverallValuesResponse;
      return this.apiClient.callApi(
        '/data/v1/metrics/{METRIC_ID}/overall', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAllMetricValues operation.
     * @callback module:api/MetricsApi~listAllMetricValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAllMetricValuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all metric values
     * List all of the values across every breakdown for a specific metric.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [timeframe] Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]=).  Accepted formats are...    * array of epoch timestamps e.g. `timeframe[]=1498867200&timeframe[]=1498953600`   * duration string e.g. `timeframe[]=24:hours or timeframe[]=7:days` 
     * @param {Array.<String>} [filters] Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a `!` character to the dimension.  Possible filter names are the same as returned by the List Filters endpoint.  Example:    * `filters[]=operating_system:windows&filters[]=!country:US` 
     * @param {module:model/String} [dimension] Dimension the specified value belongs to
     * @param {String} [value] Value to show all available metrics for
     * @param {module:api/MetricsApi~listAllMetricValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAllMetricValuesResponse}
     */
    listAllMetricValues(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'timeframe[]': this.apiClient.buildCollectionParam(opts['timeframe'], 'multi'),
        'filters[]': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'dimension': opts['dimension'],
        'value': opts['value']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAllMetricValuesResponse;
      return this.apiClient.callApi(
        '/data/v1/metrics/comparison', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBreakdownValues operation.
     * @callback module:api/MetricsApi~listBreakdownValuesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBreakdownValuesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List breakdown values
     * List the breakdown values for a specific metric.
     * @param {module:model/String} METRIC_ID ID of the Metric
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [groupBy] Breakdown value to group the results by
     * @param {module:model/String} [measurement] Measurement for the provided metric. If omitted, the default for the metric will be used.
     * @param {Array.<String>} [filters] Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a `!` character to the dimension.  Possible filter names are the same as returned by the List Filters endpoint.  Example:    * `filters[]=operating_system:windows&filters[]=!country:US` 
     * @param {Number} [limit = 25)] Number of items to include in the response
     * @param {Number} [page = 1)] Offset by this many pages, of the size of `limit`
     * @param {module:model/String} [orderBy] Value to order the results by
     * @param {module:model/String} [orderDirection] Sort order.
     * @param {Array.<String>} [timeframe] Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]=).  Accepted formats are...    * array of epoch timestamps e.g. `timeframe[]=1498867200&timeframe[]=1498953600`   * duration string e.g. `timeframe[]=24:hours or timeframe[]=7:days` 
     * @param {module:api/MetricsApi~listBreakdownValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBreakdownValuesResponse}
     */
    listBreakdownValues(METRIC_ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'METRIC_ID' is set
      if (METRIC_ID === undefined || METRIC_ID === null) {
        throw new Error("Missing the required parameter 'METRIC_ID' when calling listBreakdownValues");
      }

      let pathParams = {
        'METRIC_ID': METRIC_ID
      };
      let queryParams = {
        'group_by': opts['groupBy'],
        'measurement': opts['measurement'],
        'filters[]': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'limit': opts['limit'],
        'page': opts['page'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection'],
        'timeframe[]': this.apiClient.buildCollectionParam(opts['timeframe'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBreakdownValuesResponse;
      return this.apiClient.callApi(
        '/data/v1/metrics/{METRIC_ID}/breakdown', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInsights operation.
     * @callback module:api/MetricsApi~listInsightsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListInsightsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Insights
     * Returns a list of insights for a metric. These are the worst performing values across all breakdowns sorted by how much they negatively impact a specific metric.
     * @param {module:model/String} METRIC_ID ID of the Metric
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [measurement] Measurement for the provided metric. If omitted, the default for the metric will be used.
     * @param {module:model/String} [orderDirection] Sort order.
     * @param {Array.<String>} [timeframe] Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]=).  Accepted formats are...    * array of epoch timestamps e.g. `timeframe[]=1498867200&timeframe[]=1498953600`   * duration string e.g. `timeframe[]=24:hours or timeframe[]=7:days` 
     * @param {module:api/MetricsApi~listInsightsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListInsightsResponse}
     */
    listInsights(METRIC_ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'METRIC_ID' is set
      if (METRIC_ID === undefined || METRIC_ID === null) {
        throw new Error("Missing the required parameter 'METRIC_ID' when calling listInsights");
      }

      let pathParams = {
        'METRIC_ID': METRIC_ID
      };
      let queryParams = {
        'measurement': opts['measurement'],
        'order_direction': opts['orderDirection'],
        'timeframe[]': this.apiClient.buildCollectionParam(opts['timeframe'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListInsightsResponse;
      return this.apiClient.callApi(
        '/data/v1/metrics/{METRIC_ID}/insights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
