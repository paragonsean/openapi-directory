/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetRealTimeBreakdownResponse from '../model/GetRealTimeBreakdownResponse';
import GetRealTimeHistogramTimeseriesResponse from '../model/GetRealTimeHistogramTimeseriesResponse';
import GetRealTimeTimeseriesResponse from '../model/GetRealTimeTimeseriesResponse';
import ListRealTimeDimensionsResponse from '../model/ListRealTimeDimensionsResponse';
import ListRealTimeMetricsResponse from '../model/ListRealTimeMetricsResponse';

/**
* RealTime service.
* @module api/RealTimeApi
* @version v1
*/
export default class RealTimeApi {

    /**
    * Constructs a new RealTimeApi. 
    * @alias module:api/RealTimeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getRealtimeBreakdown operation.
     * @callback module:api/RealTimeApi~getRealtimeBreakdownCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRealTimeBreakdownResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Real-Time Breakdown
     * Gets breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score. This API is now deprecated, please use the `Get Monitoring Breakdown` API.
     * @param {module:model/String} REALTIME_METRIC_ID ID of the Realtime Metric
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [dimension] Dimension the specified value belongs to
     * @param {Number} [timestamp] Timestamp to limit results by. This value must be provided as a unix timestamp. Defaults to the current unix timestamp.
     * @param {Array.<String>} [filters] Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a `!` character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * `filters[]=operating_system:windows&filters[]=!country:US` 
     * @param {module:model/String} [orderBy] Value to order the results by
     * @param {module:model/String} [orderDirection] Sort order.
     * @param {module:api/RealTimeApi~getRealtimeBreakdownCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRealTimeBreakdownResponse}
     */
    getRealtimeBreakdown(REALTIME_METRIC_ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'REALTIME_METRIC_ID' is set
      if (REALTIME_METRIC_ID === undefined || REALTIME_METRIC_ID === null) {
        throw new Error("Missing the required parameter 'REALTIME_METRIC_ID' when calling getRealtimeBreakdown");
      }

      let pathParams = {
        'REALTIME_METRIC_ID': REALTIME_METRIC_ID
      };
      let queryParams = {
        'dimension': opts['dimension'],
        'timestamp': opts['timestamp'],
        'filters[]': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRealTimeBreakdownResponse;
      return this.apiClient.callApi(
        '/data/v1/realtime/metrics/{REALTIME_METRIC_ID}/breakdown', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRealtimeHistogramTimeseries operation.
     * @callback module:api/RealTimeApi~getRealtimeHistogramTimeseriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRealTimeHistogramTimeseriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Real-Time Histogram Timeseries
     * Gets histogram timeseries information for a specific metric. This API is now deprecated, please use the `Get Monitoring Histogram Timeseries` API.
     * @param {module:model/String} REALTIME_HISTOGRAM_METRIC_ID ID of the Realtime Histogram Metric
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filters] Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a `!` character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * `filters[]=operating_system:windows&filters[]=!country:US` 
     * @param {module:api/RealTimeApi~getRealtimeHistogramTimeseriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRealTimeHistogramTimeseriesResponse}
     */
    getRealtimeHistogramTimeseries(REALTIME_HISTOGRAM_METRIC_ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'REALTIME_HISTOGRAM_METRIC_ID' is set
      if (REALTIME_HISTOGRAM_METRIC_ID === undefined || REALTIME_HISTOGRAM_METRIC_ID === null) {
        throw new Error("Missing the required parameter 'REALTIME_HISTOGRAM_METRIC_ID' when calling getRealtimeHistogramTimeseries");
      }

      let pathParams = {
        'REALTIME_HISTOGRAM_METRIC_ID': REALTIME_HISTOGRAM_METRIC_ID
      };
      let queryParams = {
        'filters[]': this.apiClient.buildCollectionParam(opts['filters'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRealTimeHistogramTimeseriesResponse;
      return this.apiClient.callApi(
        '/data/v1/realtime/metrics/{REALTIME_HISTOGRAM_METRIC_ID}/histogram-timeseries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRealtimeTimeseries operation.
     * @callback module:api/RealTimeApi~getRealtimeTimeseriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRealTimeTimeseriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Real-Time Timeseries
     * Gets Time series information for a specific metric along with the number of concurrent viewers. This API is now deprecated, please use the `Get Monitoring Timeseries` API.
     * @param {module:model/String} REALTIME_METRIC_ID ID of the Realtime Metric
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filters] Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a `!` character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * `filters[]=operating_system:windows&filters[]=!country:US` 
     * @param {Number} [timestamp] Timestamp to use as the start of the timeseries data. This value must be provided as a unix timestamp. Defaults to 30 minutes ago.
     * @param {module:api/RealTimeApi~getRealtimeTimeseriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRealTimeTimeseriesResponse}
     */
    getRealtimeTimeseries(REALTIME_METRIC_ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'REALTIME_METRIC_ID' is set
      if (REALTIME_METRIC_ID === undefined || REALTIME_METRIC_ID === null) {
        throw new Error("Missing the required parameter 'REALTIME_METRIC_ID' when calling getRealtimeTimeseries");
      }

      let pathParams = {
        'REALTIME_METRIC_ID': REALTIME_METRIC_ID
      };
      let queryParams = {
        'filters[]': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'timestamp': opts['timestamp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRealTimeTimeseriesResponse;
      return this.apiClient.callApi(
        '/data/v1/realtime/metrics/{REALTIME_METRIC_ID}/timeseries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRealtimeDimensions operation.
     * @callback module:api/RealTimeApi~listRealtimeDimensionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRealTimeDimensionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Real-Time Dimensions
     * Lists available real-time dimensions. This API is now deprecated, please use the `List Monitoring Dimensions` API.
     * @param {module:api/RealTimeApi~listRealtimeDimensionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRealTimeDimensionsResponse}
     */
    listRealtimeDimensions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRealTimeDimensionsResponse;
      return this.apiClient.callApi(
        '/data/v1/realtime/dimensions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRealtimeMetrics operation.
     * @callback module:api/RealTimeApi~listRealtimeMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRealTimeMetricsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Real-Time Metrics
     * Lists available real-time metrics. This API is now deprecated, please use the `List Monitoring Metrics` API.
     * @param {module:api/RealTimeApi~listRealtimeMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRealTimeMetricsResponse}
     */
    listRealtimeMetrics(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRealTimeMetricsResponse;
      return this.apiClient.callApi(
        '/data/v1/realtime/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
