/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListSigningKeysResponse from '../model/ListSigningKeysResponse';
import SigningKeyResponse from '../model/SigningKeyResponse';

/**
* SigningKeys service.
* @module api/SigningKeysApi
* @version v1
*/
export default class SigningKeysApi {

    /**
    * Constructs a new SigningKeysApi. 
    * @alias module:api/SigningKeysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSigningKey operation.
     * @callback module:api/SigningKeysApi~createSigningKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SigningKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a signing key
     * Creates a new signing key pair. When creating a new signing key, the API will generate a 2048-bit RSA key-pair and return the private key and a generated key-id; the public key will be stored at Mux to validate signed tokens.
     * @param {module:api/SigningKeysApi~createSigningKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SigningKeyResponse}
     */
    createSigningKey(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SigningKeyResponse;
      return this.apiClient.callApi(
        '/system/v1/signing-keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSigningKey operation.
     * @callback module:api/SigningKeysApi~deleteSigningKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a signing key
     * Deletes an existing signing key. Use with caution, as this will invalidate any existing signatures and no JWTs can be signed using the key again.
     * @param {String} SIGNING_KEY_ID The ID of the signing key.
     * @param {module:api/SigningKeysApi~deleteSigningKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSigningKey(SIGNING_KEY_ID, callback) {
      let postBody = null;
      // verify the required parameter 'SIGNING_KEY_ID' is set
      if (SIGNING_KEY_ID === undefined || SIGNING_KEY_ID === null) {
        throw new Error("Missing the required parameter 'SIGNING_KEY_ID' when calling deleteSigningKey");
      }

      let pathParams = {
        'SIGNING_KEY_ID': SIGNING_KEY_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/system/v1/signing-keys/{SIGNING_KEY_ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSigningKey operation.
     * @callback module:api/SigningKeysApi~getSigningKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SigningKeyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a signing key
     * Retrieves the details of a signing key that has previously been created. Supply the unique signing key ID that was returned from your previous request, and Mux will return the corresponding signing key information. **The private key is not returned in this response.** 
     * @param {String} SIGNING_KEY_ID The ID of the signing key.
     * @param {module:api/SigningKeysApi~getSigningKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SigningKeyResponse}
     */
    getSigningKey(SIGNING_KEY_ID, callback) {
      let postBody = null;
      // verify the required parameter 'SIGNING_KEY_ID' is set
      if (SIGNING_KEY_ID === undefined || SIGNING_KEY_ID === null) {
        throw new Error("Missing the required parameter 'SIGNING_KEY_ID' when calling getSigningKey");
      }

      let pathParams = {
        'SIGNING_KEY_ID': SIGNING_KEY_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SigningKeyResponse;
      return this.apiClient.callApi(
        '/system/v1/signing-keys/{SIGNING_KEY_ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSigningKeys operation.
     * @callback module:api/SigningKeysApi~listSigningKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSigningKeysResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List signing keys
     * Returns a list of signing keys.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 25)] Number of items to include in the response
     * @param {Number} [page = 1)] Offset by this many pages, of the size of `limit`
     * @param {module:api/SigningKeysApi~listSigningKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSigningKeysResponse}
     */
    listSigningKeys(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSigningKeysResponse;
      return this.apiClient.callApi(
        '/system/v1/signing-keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
