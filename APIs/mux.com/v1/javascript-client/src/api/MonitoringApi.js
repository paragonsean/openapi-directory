/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetMonitoringBreakdownResponse from '../model/GetMonitoringBreakdownResponse';
import GetMonitoringBreakdownTimeseriesResponse from '../model/GetMonitoringBreakdownTimeseriesResponse';
import GetMonitoringHistogramTimeseriesResponse from '../model/GetMonitoringHistogramTimeseriesResponse';
import GetMonitoringTimeseriesResponse from '../model/GetMonitoringTimeseriesResponse';
import ListMonitoringDimensionsResponse from '../model/ListMonitoringDimensionsResponse';
import ListMonitoringMetricsResponse from '../model/ListMonitoringMetricsResponse';

/**
* Monitoring service.
* @module api/MonitoringApi
* @version v1
*/
export default class MonitoringApi {

    /**
    * Constructs a new MonitoringApi. 
    * @alias module:api/MonitoringApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getMonitoringBreakdown operation.
     * @callback module:api/MonitoringApi~getMonitoringBreakdownCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMonitoringBreakdownResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Monitoring Breakdown
     * Gets breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score.
     * @param {module:model/String} MONITORING_METRIC_ID ID of the Monitoring Metric
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [dimension] Dimension the specified value belongs to
     * @param {Number} [timestamp] Timestamp to limit results by. This value must be provided as a unix timestamp. Defaults to the current unix timestamp.
     * @param {Array.<String>} [filters] Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a `!` character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * `filters[]=operating_system:windows&filters[]=!country:US` 
     * @param {module:model/String} [orderBy] Value to order the results by
     * @param {module:model/String} [orderDirection] Sort order.
     * @param {module:api/MonitoringApi~getMonitoringBreakdownCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMonitoringBreakdownResponse}
     */
    getMonitoringBreakdown(MONITORING_METRIC_ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'MONITORING_METRIC_ID' is set
      if (MONITORING_METRIC_ID === undefined || MONITORING_METRIC_ID === null) {
        throw new Error("Missing the required parameter 'MONITORING_METRIC_ID' when calling getMonitoringBreakdown");
      }

      let pathParams = {
        'MONITORING_METRIC_ID': MONITORING_METRIC_ID
      };
      let queryParams = {
        'dimension': opts['dimension'],
        'timestamp': opts['timestamp'],
        'filters[]': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMonitoringBreakdownResponse;
      return this.apiClient.callApi(
        '/data/v1/monitoring/metrics/{MONITORING_METRIC_ID}/breakdown', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMonitoringBreakdownTimeseries operation.
     * @callback module:api/MonitoringApi~getMonitoringBreakdownTimeseriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMonitoringBreakdownTimeseriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Monitoring Breakdown Timeseries
     * Gets timeseries of breakdown information for a specific dimension and metric. Each datapoint in the response represents 5 seconds worth of data.
     * @param {module:model/String} MONITORING_METRIC_ID ID of the Monitoring Metric
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [dimension] Dimension the specified value belongs to
     * @param {Array.<String>} [timeframe] Timeframe window to limit results by. Must be provided as an array query string parameter (e.g. timeframe[]=).  The default for this is the last 60 seconds of available data. Timeframes larger than 10 minutes are not allowed, and must be within the last 24 hours. 
     * @param {Array.<String>} [filters] Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a `!` character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * `filters[]=operating_system:windows&filters[]=!country:US` 
     * @param {Number} [limit = 10)] Number of items to include in each timestamp's `value` list.  The default is 10, and the maximum is 100. 
     * @param {module:model/String} [orderBy] Value to order the results by
     * @param {module:model/String} [orderDirection] Sort order.
     * @param {module:api/MonitoringApi~getMonitoringBreakdownTimeseriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMonitoringBreakdownTimeseriesResponse}
     */
    getMonitoringBreakdownTimeseries(MONITORING_METRIC_ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'MONITORING_METRIC_ID' is set
      if (MONITORING_METRIC_ID === undefined || MONITORING_METRIC_ID === null) {
        throw new Error("Missing the required parameter 'MONITORING_METRIC_ID' when calling getMonitoringBreakdownTimeseries");
      }

      let pathParams = {
        'MONITORING_METRIC_ID': MONITORING_METRIC_ID
      };
      let queryParams = {
        'dimension': opts['dimension'],
        'timeframe[]': this.apiClient.buildCollectionParam(opts['timeframe'], 'multi'),
        'filters[]': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'limit': opts['limit'],
        'order_by': opts['orderBy'],
        'order_direction': opts['orderDirection']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMonitoringBreakdownTimeseriesResponse;
      return this.apiClient.callApi(
        '/data/v1/monitoring/metrics/{MONITORING_METRIC_ID}/breakdown-timeseries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMonitoringHistogramTimeseries operation.
     * @callback module:api/MonitoringApi~getMonitoringHistogramTimeseriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMonitoringHistogramTimeseriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Monitoring Histogram Timeseries
     * Gets histogram timeseries information for a specific metric.
     * @param {module:model/String} MONITORING_HISTOGRAM_METRIC_ID ID of the Monitoring Histogram Metric
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filters] Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a `!` character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * `filters[]=operating_system:windows&filters[]=!country:US` 
     * @param {module:api/MonitoringApi~getMonitoringHistogramTimeseriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMonitoringHistogramTimeseriesResponse}
     */
    getMonitoringHistogramTimeseries(MONITORING_HISTOGRAM_METRIC_ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'MONITORING_HISTOGRAM_METRIC_ID' is set
      if (MONITORING_HISTOGRAM_METRIC_ID === undefined || MONITORING_HISTOGRAM_METRIC_ID === null) {
        throw new Error("Missing the required parameter 'MONITORING_HISTOGRAM_METRIC_ID' when calling getMonitoringHistogramTimeseries");
      }

      let pathParams = {
        'MONITORING_HISTOGRAM_METRIC_ID': MONITORING_HISTOGRAM_METRIC_ID
      };
      let queryParams = {
        'filters[]': this.apiClient.buildCollectionParam(opts['filters'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMonitoringHistogramTimeseriesResponse;
      return this.apiClient.callApi(
        '/data/v1/monitoring/metrics/{MONITORING_HISTOGRAM_METRIC_ID}/histogram-timeseries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMonitoringTimeseries operation.
     * @callback module:api/MonitoringApi~getMonitoringTimeseriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMonitoringTimeseriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Monitoring Timeseries
     * Gets Time series information for a specific metric along with the number of concurrent viewers.
     * @param {module:model/String} MONITORING_METRIC_ID ID of the Monitoring Metric
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filters] Limit the results to rows that match conditions from provided key:value pairs. Must be provided as an array query string parameter.  To exclude rows that match a certain condition, prepend a `!` character to the dimension.  Possible filter names are the same as returned by the List Monitoring Dimensions endpoint.  Example:    * `filters[]=operating_system:windows&filters[]=!country:US` 
     * @param {Number} [timestamp] Timestamp to use as the start of the timeseries data. This value must be provided as a unix timestamp. Defaults to 30 minutes ago.
     * @param {module:api/MonitoringApi~getMonitoringTimeseriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMonitoringTimeseriesResponse}
     */
    getMonitoringTimeseries(MONITORING_METRIC_ID, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'MONITORING_METRIC_ID' is set
      if (MONITORING_METRIC_ID === undefined || MONITORING_METRIC_ID === null) {
        throw new Error("Missing the required parameter 'MONITORING_METRIC_ID' when calling getMonitoringTimeseries");
      }

      let pathParams = {
        'MONITORING_METRIC_ID': MONITORING_METRIC_ID
      };
      let queryParams = {
        'filters[]': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'timestamp': opts['timestamp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMonitoringTimeseriesResponse;
      return this.apiClient.callApi(
        '/data/v1/monitoring/metrics/{MONITORING_METRIC_ID}/timeseries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMonitoringDimensions operation.
     * @callback module:api/MonitoringApi~listMonitoringDimensionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMonitoringDimensionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Monitoring Dimensions
     * Lists available monitoring dimensions.
     * @param {module:api/MonitoringApi~listMonitoringDimensionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMonitoringDimensionsResponse}
     */
    listMonitoringDimensions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMonitoringDimensionsResponse;
      return this.apiClient.callApi(
        '/data/v1/monitoring/dimensions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMonitoringMetrics operation.
     * @callback module:api/MonitoringApi~listMonitoringMetricsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListMonitoringMetricsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Monitoring Metrics
     * Lists available monitoring metrics.
     * @param {module:api/MonitoringApi~listMonitoringMetricsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListMonitoringMetricsResponse}
     */
    listMonitoringMetrics(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListMonitoringMetricsResponse;
      return this.apiClient.callApi(
        '/data/v1/monitoring/metrics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
