/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssetResponse from '../model/AssetResponse';
import CreateAssetRequest from '../model/CreateAssetRequest';
import CreatePlaybackIDRequest from '../model/CreatePlaybackIDRequest';
import CreatePlaybackIDResponse from '../model/CreatePlaybackIDResponse';
import CreateTrackRequest from '../model/CreateTrackRequest';
import CreateTrackResponse from '../model/CreateTrackResponse';
import GetAssetInputInfoResponse from '../model/GetAssetInputInfoResponse';
import GetAssetPlaybackIDResponse from '../model/GetAssetPlaybackIDResponse';
import ListAssetsResponse from '../model/ListAssetsResponse';
import UpdateAssetMP4SupportRequest from '../model/UpdateAssetMP4SupportRequest';
import UpdateAssetMasterAccessRequest from '../model/UpdateAssetMasterAccessRequest';
import UpdateAssetRequest from '../model/UpdateAssetRequest';

/**
* Assets service.
* @module api/AssetsApi
* @version v1
*/
export default class AssetsApi {

    /**
    * Constructs a new AssetsApi. 
    * @alias module:api/AssetsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAsset operation.
     * @callback module:api/AssetsApi~createAssetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an asset
     * Create a new Mux Video asset.
     * @param {module:model/CreateAssetRequest} createAssetRequest 
     * @param {module:api/AssetsApi~createAssetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetResponse}
     */
    createAsset(createAssetRequest, callback) {
      let postBody = createAssetRequest;
      // verify the required parameter 'createAssetRequest' is set
      if (createAssetRequest === undefined || createAssetRequest === null) {
        throw new Error("Missing the required parameter 'createAssetRequest' when calling createAsset");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssetResponse;
      return this.apiClient.callApi(
        '/video/v1/assets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAssetPlaybackId operation.
     * @callback module:api/AssetsApi~createAssetPlaybackIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePlaybackIDResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a playback ID
     * Creates a playback ID that can be used to stream the asset to a viewer.
     * @param {String} ASSET_ID The asset ID.
     * @param {module:model/CreatePlaybackIDRequest} createPlaybackIDRequest 
     * @param {module:api/AssetsApi~createAssetPlaybackIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePlaybackIDResponse}
     */
    createAssetPlaybackId(ASSET_ID, createPlaybackIDRequest, callback) {
      let postBody = createPlaybackIDRequest;
      // verify the required parameter 'ASSET_ID' is set
      if (ASSET_ID === undefined || ASSET_ID === null) {
        throw new Error("Missing the required parameter 'ASSET_ID' when calling createAssetPlaybackId");
      }
      // verify the required parameter 'createPlaybackIDRequest' is set
      if (createPlaybackIDRequest === undefined || createPlaybackIDRequest === null) {
        throw new Error("Missing the required parameter 'createPlaybackIDRequest' when calling createAssetPlaybackId");
      }

      let pathParams = {
        'ASSET_ID': ASSET_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePlaybackIDResponse;
      return this.apiClient.callApi(
        '/video/v1/assets/{ASSET_ID}/playback-ids', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAssetTrack operation.
     * @callback module:api/AssetsApi~createAssetTrackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTrackResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an asset track
     * Adds an asset track (for example, subtitles, or an alternate audio track) to an asset.
     * @param {String} ASSET_ID The asset ID.
     * @param {module:model/CreateTrackRequest} createTrackRequest 
     * @param {module:api/AssetsApi~createAssetTrackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTrackResponse}
     */
    createAssetTrack(ASSET_ID, createTrackRequest, callback) {
      let postBody = createTrackRequest;
      // verify the required parameter 'ASSET_ID' is set
      if (ASSET_ID === undefined || ASSET_ID === null) {
        throw new Error("Missing the required parameter 'ASSET_ID' when calling createAssetTrack");
      }
      // verify the required parameter 'createTrackRequest' is set
      if (createTrackRequest === undefined || createTrackRequest === null) {
        throw new Error("Missing the required parameter 'createTrackRequest' when calling createAssetTrack");
      }

      let pathParams = {
        'ASSET_ID': ASSET_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTrackResponse;
      return this.apiClient.callApi(
        '/video/v1/assets/{ASSET_ID}/tracks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAsset operation.
     * @callback module:api/AssetsApi~deleteAssetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an asset
     * Deletes a video asset and all its data.
     * @param {String} ASSET_ID The asset ID.
     * @param {module:api/AssetsApi~deleteAssetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAsset(ASSET_ID, callback) {
      let postBody = null;
      // verify the required parameter 'ASSET_ID' is set
      if (ASSET_ID === undefined || ASSET_ID === null) {
        throw new Error("Missing the required parameter 'ASSET_ID' when calling deleteAsset");
      }

      let pathParams = {
        'ASSET_ID': ASSET_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/video/v1/assets/{ASSET_ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssetPlaybackId operation.
     * @callback module:api/AssetsApi~deleteAssetPlaybackIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a playback ID
     * Deletes a playback ID, rendering it nonfunctional for viewing an asset's video content. Please note that deleting the playback ID removes access to the underlying asset; a viewer who started playback before the playback ID was deleted may be able to watch the entire video for a limited duration.
     * @param {String} ASSET_ID The asset ID.
     * @param {String} PLAYBACK_ID The live stream's playback ID.
     * @param {module:api/AssetsApi~deleteAssetPlaybackIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAssetPlaybackId(ASSET_ID, PLAYBACK_ID, callback) {
      let postBody = null;
      // verify the required parameter 'ASSET_ID' is set
      if (ASSET_ID === undefined || ASSET_ID === null) {
        throw new Error("Missing the required parameter 'ASSET_ID' when calling deleteAssetPlaybackId");
      }
      // verify the required parameter 'PLAYBACK_ID' is set
      if (PLAYBACK_ID === undefined || PLAYBACK_ID === null) {
        throw new Error("Missing the required parameter 'PLAYBACK_ID' when calling deleteAssetPlaybackId");
      }

      let pathParams = {
        'ASSET_ID': ASSET_ID,
        'PLAYBACK_ID': PLAYBACK_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/video/v1/assets/{ASSET_ID}/playback-ids/{PLAYBACK_ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssetTrack operation.
     * @callback module:api/AssetsApi~deleteAssetTrackCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an asset track
     * Removes a text track from an asset. Audio and video tracks on assets cannot be removed.
     * @param {String} ASSET_ID The asset ID.
     * @param {String} TRACK_ID The track ID.
     * @param {module:api/AssetsApi~deleteAssetTrackCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAssetTrack(ASSET_ID, TRACK_ID, callback) {
      let postBody = null;
      // verify the required parameter 'ASSET_ID' is set
      if (ASSET_ID === undefined || ASSET_ID === null) {
        throw new Error("Missing the required parameter 'ASSET_ID' when calling deleteAssetTrack");
      }
      // verify the required parameter 'TRACK_ID' is set
      if (TRACK_ID === undefined || TRACK_ID === null) {
        throw new Error("Missing the required parameter 'TRACK_ID' when calling deleteAssetTrack");
      }

      let pathParams = {
        'ASSET_ID': ASSET_ID,
        'TRACK_ID': TRACK_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/video/v1/assets/{ASSET_ID}/tracks/{TRACK_ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAsset operation.
     * @callback module:api/AssetsApi~getAssetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an asset
     * Retrieves the details of an asset that has previously been created. Supply the unique asset ID that was returned from your previous request, and Mux will return the corresponding asset information. The same information is returned when creating an asset.
     * @param {String} ASSET_ID The asset ID.
     * @param {module:api/AssetsApi~getAssetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetResponse}
     */
    getAsset(ASSET_ID, callback) {
      let postBody = null;
      // verify the required parameter 'ASSET_ID' is set
      if (ASSET_ID === undefined || ASSET_ID === null) {
        throw new Error("Missing the required parameter 'ASSET_ID' when calling getAsset");
      }

      let pathParams = {
        'ASSET_ID': ASSET_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetResponse;
      return this.apiClient.callApi(
        '/video/v1/assets/{ASSET_ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssetInputInfo operation.
     * @callback module:api/AssetsApi~getAssetInputInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAssetInputInfoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve asset input info
     * Returns a list of the input objects that were used to create the asset along with any settings that were applied to each input.
     * @param {String} ASSET_ID The asset ID.
     * @param {module:api/AssetsApi~getAssetInputInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAssetInputInfoResponse}
     */
    getAssetInputInfo(ASSET_ID, callback) {
      let postBody = null;
      // verify the required parameter 'ASSET_ID' is set
      if (ASSET_ID === undefined || ASSET_ID === null) {
        throw new Error("Missing the required parameter 'ASSET_ID' when calling getAssetInputInfo");
      }

      let pathParams = {
        'ASSET_ID': ASSET_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAssetInputInfoResponse;
      return this.apiClient.callApi(
        '/video/v1/assets/{ASSET_ID}/input-info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssetPlaybackId operation.
     * @callback module:api/AssetsApi~getAssetPlaybackIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAssetPlaybackIDResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a playback ID
     * Retrieves information about the specified playback ID.
     * @param {String} ASSET_ID The asset ID.
     * @param {String} PLAYBACK_ID The live stream's playback ID.
     * @param {module:api/AssetsApi~getAssetPlaybackIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAssetPlaybackIDResponse}
     */
    getAssetPlaybackId(ASSET_ID, PLAYBACK_ID, callback) {
      let postBody = null;
      // verify the required parameter 'ASSET_ID' is set
      if (ASSET_ID === undefined || ASSET_ID === null) {
        throw new Error("Missing the required parameter 'ASSET_ID' when calling getAssetPlaybackId");
      }
      // verify the required parameter 'PLAYBACK_ID' is set
      if (PLAYBACK_ID === undefined || PLAYBACK_ID === null) {
        throw new Error("Missing the required parameter 'PLAYBACK_ID' when calling getAssetPlaybackId");
      }

      let pathParams = {
        'ASSET_ID': ASSET_ID,
        'PLAYBACK_ID': PLAYBACK_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAssetPlaybackIDResponse;
      return this.apiClient.callApi(
        '/video/v1/assets/{ASSET_ID}/playback-ids/{PLAYBACK_ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAssets operation.
     * @callback module:api/AssetsApi~listAssetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAssetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List assets
     * List all Mux assets.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 25)] Number of items to include in the response
     * @param {Number} [page = 1)] Offset by this many pages, of the size of `limit`
     * @param {String} [liveStreamId] Filter response to return all the assets for this live stream only
     * @param {String} [uploadId] Filter response to return an asset created from this direct upload only
     * @param {module:api/AssetsApi~listAssetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAssetsResponse}
     */
    listAssets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'live_stream_id': opts['liveStreamId'],
        'upload_id': opts['uploadId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAssetsResponse;
      return this.apiClient.callApi(
        '/video/v1/assets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAsset operation.
     * @callback module:api/AssetsApi~updateAssetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an Asset
     * Updates the details of an already-created Asset with the provided Asset ID. This currently supports only the `passthrough` field.
     * @param {String} ASSET_ID The asset ID.
     * @param {module:model/UpdateAssetRequest} updateAssetRequest 
     * @param {module:api/AssetsApi~updateAssetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetResponse}
     */
    updateAsset(ASSET_ID, updateAssetRequest, callback) {
      let postBody = updateAssetRequest;
      // verify the required parameter 'ASSET_ID' is set
      if (ASSET_ID === undefined || ASSET_ID === null) {
        throw new Error("Missing the required parameter 'ASSET_ID' when calling updateAsset");
      }
      // verify the required parameter 'updateAssetRequest' is set
      if (updateAssetRequest === undefined || updateAssetRequest === null) {
        throw new Error("Missing the required parameter 'updateAssetRequest' when calling updateAsset");
      }

      let pathParams = {
        'ASSET_ID': ASSET_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssetResponse;
      return this.apiClient.callApi(
        '/video/v1/assets/{ASSET_ID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAssetMasterAccess operation.
     * @callback module:api/AssetsApi~updateAssetMasterAccessCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update master access
     * Allows you to add temporary access to the master (highest-quality) version of the asset in MP4 format. A URL will be created that can be used to download the master version for 24 hours. After 24 hours Master Access will revert to \"none\". This master version is not optimized for web and not meant to be streamed, only downloaded for purposes like archiving or editing the video offline.
     * @param {String} ASSET_ID The asset ID.
     * @param {module:model/UpdateAssetMasterAccessRequest} updateAssetMasterAccessRequest 
     * @param {module:api/AssetsApi~updateAssetMasterAccessCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetResponse}
     */
    updateAssetMasterAccess(ASSET_ID, updateAssetMasterAccessRequest, callback) {
      let postBody = updateAssetMasterAccessRequest;
      // verify the required parameter 'ASSET_ID' is set
      if (ASSET_ID === undefined || ASSET_ID === null) {
        throw new Error("Missing the required parameter 'ASSET_ID' when calling updateAssetMasterAccess");
      }
      // verify the required parameter 'updateAssetMasterAccessRequest' is set
      if (updateAssetMasterAccessRequest === undefined || updateAssetMasterAccessRequest === null) {
        throw new Error("Missing the required parameter 'updateAssetMasterAccessRequest' when calling updateAssetMasterAccess");
      }

      let pathParams = {
        'ASSET_ID': ASSET_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssetResponse;
      return this.apiClient.callApi(
        '/video/v1/assets/{ASSET_ID}/master-access', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAssetMp4Support operation.
     * @callback module:api/AssetsApi~updateAssetMp4SupportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update MP4 support
     * Allows you to add or remove mp4 support for assets that were created without it. Currently there are two values supported in this request, `standard` and `none`. `none` means that an asset *does not* have mp4 support, so submitting a request with `mp4_support` set to `none` will delete the mp4 assets from the asset in question.
     * @param {String} ASSET_ID The asset ID.
     * @param {module:model/UpdateAssetMP4SupportRequest} updateAssetMP4SupportRequest 
     * @param {module:api/AssetsApi~updateAssetMp4SupportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetResponse}
     */
    updateAssetMp4Support(ASSET_ID, updateAssetMP4SupportRequest, callback) {
      let postBody = updateAssetMP4SupportRequest;
      // verify the required parameter 'ASSET_ID' is set
      if (ASSET_ID === undefined || ASSET_ID === null) {
        throw new Error("Missing the required parameter 'ASSET_ID' when calling updateAssetMp4Support");
      }
      // verify the required parameter 'updateAssetMP4SupportRequest' is set
      if (updateAssetMP4SupportRequest === undefined || updateAssetMP4SupportRequest === null) {
        throw new Error("Missing the required parameter 'updateAssetMP4SupportRequest' when calling updateAssetMp4Support");
      }

      let pathParams = {
        'ASSET_ID': ASSET_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssetResponse;
      return this.apiClient.callApi(
        '/video/v1/assets/{ASSET_ID}/mp4-support', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
