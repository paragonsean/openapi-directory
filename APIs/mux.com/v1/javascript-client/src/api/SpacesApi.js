/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BroadcastResponse from '../model/BroadcastResponse';
import CreateBroadcastRequest from '../model/CreateBroadcastRequest';
import CreateSpaceRequest from '../model/CreateSpaceRequest';
import ListSpacesResponse from '../model/ListSpacesResponse';
import SpaceResponse from '../model/SpaceResponse';
import StartSpaceBroadcastResponse from '../model/StartSpaceBroadcastResponse';
import StopSpaceBroadcastResponse from '../model/StopSpaceBroadcastResponse';

/**
* Spaces service.
* @module api/SpacesApi
* @version v1
*/
export default class SpacesApi {

    /**
    * Constructs a new SpacesApi. 
    * @alias module:api/SpacesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSpace operation.
     * @callback module:api/SpacesApi~createSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a space
     * Create a new space. Spaces are used to build [real-time video applications.](https://mux.com/real-time-video)
     * @param {module:model/CreateSpaceRequest} createSpaceRequest 
     * @param {module:api/SpacesApi~createSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpaceResponse}
     */
    createSpace(createSpaceRequest, callback) {
      let postBody = createSpaceRequest;
      // verify the required parameter 'createSpaceRequest' is set
      if (createSpaceRequest === undefined || createSpaceRequest === null) {
        throw new Error("Missing the required parameter 'createSpaceRequest' when calling createSpace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SpaceResponse;
      return this.apiClient.callApi(
        '/video/v1/spaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSpaceBroadcast operation.
     * @callback module:api/SpacesApi~createSpaceBroadcastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BroadcastResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a space broadcast
     * Creates a new broadcast. Broadcasts are used to create composited versions of your space, which can be broadcast to live streams. **Note:** By default only a single broadcast destination can be specified. Contact Mux support if you need more.
     * @param {String} SPACE_ID The space ID.
     * @param {module:model/CreateBroadcastRequest} createBroadcastRequest 
     * @param {module:api/SpacesApi~createSpaceBroadcastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BroadcastResponse}
     */
    createSpaceBroadcast(SPACE_ID, createBroadcastRequest, callback) {
      let postBody = createBroadcastRequest;
      // verify the required parameter 'SPACE_ID' is set
      if (SPACE_ID === undefined || SPACE_ID === null) {
        throw new Error("Missing the required parameter 'SPACE_ID' when calling createSpaceBroadcast");
      }
      // verify the required parameter 'createBroadcastRequest' is set
      if (createBroadcastRequest === undefined || createBroadcastRequest === null) {
        throw new Error("Missing the required parameter 'createBroadcastRequest' when calling createSpaceBroadcast");
      }

      let pathParams = {
        'SPACE_ID': SPACE_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BroadcastResponse;
      return this.apiClient.callApi(
        '/video/v1/spaces/{SPACE_ID}/broadcasts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSpace operation.
     * @callback module:api/SpacesApi~deleteSpaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a space
     * Deletes a space. Spaces can only be deleted when `idle`.
     * @param {String} SPACE_ID The space ID.
     * @param {module:api/SpacesApi~deleteSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSpace(SPACE_ID, callback) {
      let postBody = null;
      // verify the required parameter 'SPACE_ID' is set
      if (SPACE_ID === undefined || SPACE_ID === null) {
        throw new Error("Missing the required parameter 'SPACE_ID' when calling deleteSpace");
      }

      let pathParams = {
        'SPACE_ID': SPACE_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/video/v1/spaces/{SPACE_ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSpaceBroadcast operation.
     * @callback module:api/SpacesApi~deleteSpaceBroadcastCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a space broadcast
     * Deletes a single broadcast of a specific space. Broadcasts can only be deleted when `idle`.
     * @param {String} SPACE_ID The space ID.
     * @param {String} BROADCAST_ID The broadcast ID.
     * @param {module:api/SpacesApi~deleteSpaceBroadcastCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSpaceBroadcast(SPACE_ID, BROADCAST_ID, callback) {
      let postBody = null;
      // verify the required parameter 'SPACE_ID' is set
      if (SPACE_ID === undefined || SPACE_ID === null) {
        throw new Error("Missing the required parameter 'SPACE_ID' when calling deleteSpaceBroadcast");
      }
      // verify the required parameter 'BROADCAST_ID' is set
      if (BROADCAST_ID === undefined || BROADCAST_ID === null) {
        throw new Error("Missing the required parameter 'BROADCAST_ID' when calling deleteSpaceBroadcast");
      }

      let pathParams = {
        'SPACE_ID': SPACE_ID,
        'BROADCAST_ID': BROADCAST_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/video/v1/spaces/{SPACE_ID}/broadcasts/{BROADCAST_ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpace operation.
     * @callback module:api/SpacesApi~getSpaceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpaceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a space
     * Retrieves the details of a space that has previously been created. Supply the unique space ID that was returned from your create space request, and Mux will return the information about the corresponding space. The same information is returned when creating a space.
     * @param {String} SPACE_ID The space ID.
     * @param {module:api/SpacesApi~getSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpaceResponse}
     */
    getSpace(SPACE_ID, callback) {
      let postBody = null;
      // verify the required parameter 'SPACE_ID' is set
      if (SPACE_ID === undefined || SPACE_ID === null) {
        throw new Error("Missing the required parameter 'SPACE_ID' when calling getSpace");
      }

      let pathParams = {
        'SPACE_ID': SPACE_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SpaceResponse;
      return this.apiClient.callApi(
        '/video/v1/spaces/{SPACE_ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpaceBroadcast operation.
     * @callback module:api/SpacesApi~getSpaceBroadcastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BroadcastResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve space broadcast
     * Retrieves the details of a broadcast of a specific space.
     * @param {String} SPACE_ID The space ID.
     * @param {String} BROADCAST_ID The broadcast ID.
     * @param {module:api/SpacesApi~getSpaceBroadcastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BroadcastResponse}
     */
    getSpaceBroadcast(SPACE_ID, BROADCAST_ID, callback) {
      let postBody = null;
      // verify the required parameter 'SPACE_ID' is set
      if (SPACE_ID === undefined || SPACE_ID === null) {
        throw new Error("Missing the required parameter 'SPACE_ID' when calling getSpaceBroadcast");
      }
      // verify the required parameter 'BROADCAST_ID' is set
      if (BROADCAST_ID === undefined || BROADCAST_ID === null) {
        throw new Error("Missing the required parameter 'BROADCAST_ID' when calling getSpaceBroadcast");
      }

      let pathParams = {
        'SPACE_ID': SPACE_ID,
        'BROADCAST_ID': BROADCAST_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BroadcastResponse;
      return this.apiClient.callApi(
        '/video/v1/spaces/{SPACE_ID}/broadcasts/{BROADCAST_ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSpaces operation.
     * @callback module:api/SpacesApi~listSpacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSpacesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List spaces
     * List all spaces in the current enviroment.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 25)] Number of items to include in the response
     * @param {Number} [page = 1)] Offset by this many pages, of the size of `limit`
     * @param {module:api/SpacesApi~listSpacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSpacesResponse}
     */
    listSpaces(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSpacesResponse;
      return this.apiClient.callApi(
        '/video/v1/spaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startSpaceBroadcast operation.
     * @callback module:api/SpacesApi~startSpaceBroadcastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartSpaceBroadcastResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a space broadcast
     * Starts broadcasting a space to the associated destination. Broadcasts can only be started when the space is `active` (when there are participants connected).
     * @param {String} SPACE_ID The space ID.
     * @param {String} BROADCAST_ID The broadcast ID.
     * @param {module:api/SpacesApi~startSpaceBroadcastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartSpaceBroadcastResponse}
     */
    startSpaceBroadcast(SPACE_ID, BROADCAST_ID, callback) {
      let postBody = null;
      // verify the required parameter 'SPACE_ID' is set
      if (SPACE_ID === undefined || SPACE_ID === null) {
        throw new Error("Missing the required parameter 'SPACE_ID' when calling startSpaceBroadcast");
      }
      // verify the required parameter 'BROADCAST_ID' is set
      if (BROADCAST_ID === undefined || BROADCAST_ID === null) {
        throw new Error("Missing the required parameter 'BROADCAST_ID' when calling startSpaceBroadcast");
      }

      let pathParams = {
        'SPACE_ID': SPACE_ID,
        'BROADCAST_ID': BROADCAST_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StartSpaceBroadcastResponse;
      return this.apiClient.callApi(
        '/video/v1/spaces/{SPACE_ID}/broadcasts/{BROADCAST_ID}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopSpaceBroadcast operation.
     * @callback module:api/SpacesApi~stopSpaceBroadcastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopSpaceBroadcastResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop a space broadcast
     * Stops broadcasting a space, causing the destination live stream to become idle. This API also automatically calls `complete` on the destination live stream. Broadcasts are also automatically stopped when a space becomes idle.
     * @param {String} SPACE_ID The space ID.
     * @param {String} BROADCAST_ID The broadcast ID.
     * @param {module:api/SpacesApi~stopSpaceBroadcastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopSpaceBroadcastResponse}
     */
    stopSpaceBroadcast(SPACE_ID, BROADCAST_ID, callback) {
      let postBody = null;
      // verify the required parameter 'SPACE_ID' is set
      if (SPACE_ID === undefined || SPACE_ID === null) {
        throw new Error("Missing the required parameter 'SPACE_ID' when calling stopSpaceBroadcast");
      }
      // verify the required parameter 'BROADCAST_ID' is set
      if (BROADCAST_ID === undefined || BROADCAST_ID === null) {
        throw new Error("Missing the required parameter 'BROADCAST_ID' when calling stopSpaceBroadcast");
      }

      let pathParams = {
        'SPACE_ID': SPACE_ID,
        'BROADCAST_ID': BROADCAST_ID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StopSpaceBroadcastResponse;
      return this.apiClient.callApi(
        '/video/v1/spaces/{SPACE_ID}/broadcasts/{BROADCAST_ID}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
