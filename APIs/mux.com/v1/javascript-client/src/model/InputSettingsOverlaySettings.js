/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InputSettingsOverlaySettings model module.
 * @module model/InputSettingsOverlaySettings
 * @version v1
 */
class InputSettingsOverlaySettings {
    /**
     * Constructs a new <code>InputSettingsOverlaySettings</code>.
     * An object that describes how the image file referenced in URL should be placed over the video (i.e. watermarking). Ensure that the URL is active and persists the entire lifespan of the video object.
     * @alias module:model/InputSettingsOverlaySettings
     */
    constructor() { 
        
        InputSettingsOverlaySettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InputSettingsOverlaySettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputSettingsOverlaySettings} obj Optional instance to populate.
     * @return {module:model/InputSettingsOverlaySettings} The populated <code>InputSettingsOverlaySettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputSettingsOverlaySettings();

            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'String');
            }
            if (data.hasOwnProperty('horizontal_align')) {
                obj['horizontal_align'] = ApiClient.convertToType(data['horizontal_align'], 'String');
            }
            if (data.hasOwnProperty('horizontal_margin')) {
                obj['horizontal_margin'] = ApiClient.convertToType(data['horizontal_margin'], 'String');
            }
            if (data.hasOwnProperty('opacity')) {
                obj['opacity'] = ApiClient.convertToType(data['opacity'], 'String');
            }
            if (data.hasOwnProperty('vertical_align')) {
                obj['vertical_align'] = ApiClient.convertToType(data['vertical_align'], 'String');
            }
            if (data.hasOwnProperty('vertical_margin')) {
                obj['vertical_margin'] = ApiClient.convertToType(data['vertical_margin'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputSettingsOverlaySettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputSettingsOverlaySettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['height'] && !(typeof data['height'] === 'string' || data['height'] instanceof String)) {
            throw new Error("Expected the field `height` to be a primitive type in the JSON string but got " + data['height']);
        }
        // ensure the json data is a string
        if (data['horizontal_align'] && !(typeof data['horizontal_align'] === 'string' || data['horizontal_align'] instanceof String)) {
            throw new Error("Expected the field `horizontal_align` to be a primitive type in the JSON string but got " + data['horizontal_align']);
        }
        // ensure the json data is a string
        if (data['horizontal_margin'] && !(typeof data['horizontal_margin'] === 'string' || data['horizontal_margin'] instanceof String)) {
            throw new Error("Expected the field `horizontal_margin` to be a primitive type in the JSON string but got " + data['horizontal_margin']);
        }
        // ensure the json data is a string
        if (data['opacity'] && !(typeof data['opacity'] === 'string' || data['opacity'] instanceof String)) {
            throw new Error("Expected the field `opacity` to be a primitive type in the JSON string but got " + data['opacity']);
        }
        // ensure the json data is a string
        if (data['vertical_align'] && !(typeof data['vertical_align'] === 'string' || data['vertical_align'] instanceof String)) {
            throw new Error("Expected the field `vertical_align` to be a primitive type in the JSON string but got " + data['vertical_align']);
        }
        // ensure the json data is a string
        if (data['vertical_margin'] && !(typeof data['vertical_margin'] === 'string' || data['vertical_margin'] instanceof String)) {
            throw new Error("Expected the field `vertical_margin` to be a primitive type in the JSON string but got " + data['vertical_margin']);
        }
        // ensure the json data is a string
        if (data['width'] && !(typeof data['width'] === 'string' || data['width'] instanceof String)) {
            throw new Error("Expected the field `width` to be a primitive type in the JSON string but got " + data['width']);
        }

        return true;
    }


}



/**
 * How tall the overlay should appear. Can be expressed as a percent (\"10%\") or as a pixel value (\"100px\"). If both width and height are left blank the height will be the true pixels of the image, applied as if the video has been scaled to fit a 1920x1080 frame. If width is supplied with no height, the height will scale proportionally to the width.
 * @member {String} height
 */
InputSettingsOverlaySettings.prototype['height'] = undefined;

/**
 * Where the horizontal positioning of the overlay/watermark should begin from.
 * @member {module:model/InputSettingsOverlaySettings.HorizontalAlignEnum} horizontal_align
 */
InputSettingsOverlaySettings.prototype['horizontal_align'] = undefined;

/**
 * The distance from the horizontal_align starting point and the image's closest edge. Can be expressed as a percent (\"10%\") or as a pixel value (\"100px\"). Negative values will move the overlay offscreen. In the case of 'center', a positive value will shift the image towards the right and and a negative value will shift it towards the left.
 * @member {String} horizontal_margin
 */
InputSettingsOverlaySettings.prototype['horizontal_margin'] = undefined;

/**
 * How opaque the overlay should appear, expressed as a percent. (Default 100%)
 * @member {String} opacity
 */
InputSettingsOverlaySettings.prototype['opacity'] = undefined;

/**
 * Where the vertical positioning of the overlay/watermark should begin from. Defaults to `\"top\"`
 * @member {module:model/InputSettingsOverlaySettings.VerticalAlignEnum} vertical_align
 */
InputSettingsOverlaySettings.prototype['vertical_align'] = undefined;

/**
 * The distance from the vertical_align starting point and the image's closest edge. Can be expressed as a percent (\"10%\") or as a pixel value (\"100px\"). Negative values will move the overlay offscreen. In the case of 'middle', a positive value will shift the overlay towards the bottom and and a negative value will shift it towards the top.
 * @member {String} vertical_margin
 */
InputSettingsOverlaySettings.prototype['vertical_margin'] = undefined;

/**
 * How wide the overlay should appear. Can be expressed as a percent (\"10%\") or as a pixel value (\"100px\"). If both width and height are left blank the width will be the true pixels of the image, applied as if the video has been scaled to fit a 1920x1080 frame. If height is supplied with no width, the width will scale proportionally to the height.
 * @member {String} width
 */
InputSettingsOverlaySettings.prototype['width'] = undefined;





/**
 * Allowed values for the <code>horizontal_align</code> property.
 * @enum {String}
 * @readonly
 */
InputSettingsOverlaySettings['HorizontalAlignEnum'] = {

    /**
     * value: "left"
     * @const
     */
    "left": "left",

    /**
     * value: "center"
     * @const
     */
    "center": "center",

    /**
     * value: "right"
     * @const
     */
    "right": "right"
};


/**
 * Allowed values for the <code>vertical_align</code> property.
 * @enum {String}
 * @readonly
 */
InputSettingsOverlaySettings['VerticalAlignEnum'] = {

    /**
     * value: "top"
     * @const
     */
    "top": "top",

    /**
     * value: "middle"
     * @const
     */
    "middle": "middle",

    /**
     * value: "bottom"
     * @const
     */
    "bottom": "bottom"
};



export default InputSettingsOverlaySettings;

