/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssetGeneratedSubtitleSettings from './AssetGeneratedSubtitleSettings';
import InputSettingsOverlaySettings from './InputSettingsOverlaySettings';

/**
 * The InputSettings model module.
 * @module model/InputSettings
 * @version v1
 */
class InputSettings {
    /**
     * Constructs a new <code>InputSettings</code>.
     * An array of objects that each describe an input file to be used to create the asset. As a shortcut, &#x60;input&#x60; can also be a string URL for a file when only one input file is used. See &#x60;input[].url&#x60; for requirements.
     * @alias module:model/InputSettings
     */
    constructor() { 
        
        InputSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InputSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputSettings} obj Optional instance to populate.
     * @return {module:model/InputSettings} The populated <code>InputSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputSettings();

            if (data.hasOwnProperty('closed_captions')) {
                obj['closed_captions'] = ApiClient.convertToType(data['closed_captions'], 'Boolean');
            }
            if (data.hasOwnProperty('end_time')) {
                obj['end_time'] = ApiClient.convertToType(data['end_time'], 'Number');
            }
            if (data.hasOwnProperty('generated_subtitles')) {
                obj['generated_subtitles'] = ApiClient.convertToType(data['generated_subtitles'], [AssetGeneratedSubtitleSettings]);
            }
            if (data.hasOwnProperty('language_code')) {
                obj['language_code'] = ApiClient.convertToType(data['language_code'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('overlay_settings')) {
                obj['overlay_settings'] = InputSettingsOverlaySettings.constructFromObject(data['overlay_settings']);
            }
            if (data.hasOwnProperty('passthrough')) {
                obj['passthrough'] = ApiClient.convertToType(data['passthrough'], 'String');
            }
            if (data.hasOwnProperty('start_time')) {
                obj['start_time'] = ApiClient.convertToType(data['start_time'], 'Number');
            }
            if (data.hasOwnProperty('text_type')) {
                obj['text_type'] = ApiClient.convertToType(data['text_type'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputSettings</code>.
     */
    static validateJSON(data) {
        if (data['generated_subtitles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['generated_subtitles'])) {
                throw new Error("Expected the field `generated_subtitles` to be an array in the JSON data but got " + data['generated_subtitles']);
            }
            // validate the optional field `generated_subtitles` (array)
            for (const item of data['generated_subtitles']) {
                AssetGeneratedSubtitleSettings.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['language_code'] && !(typeof data['language_code'] === 'string' || data['language_code'] instanceof String)) {
            throw new Error("Expected the field `language_code` to be a primitive type in the JSON string but got " + data['language_code']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `overlay_settings`
        if (data['overlay_settings']) { // data not null
          InputSettingsOverlaySettings.validateJSON(data['overlay_settings']);
        }
        // ensure the json data is a string
        if (data['passthrough'] && !(typeof data['passthrough'] === 'string' || data['passthrough'] instanceof String)) {
            throw new Error("Expected the field `passthrough` to be a primitive type in the JSON string but got " + data['passthrough']);
        }
        // ensure the json data is a string
        if (data['text_type'] && !(typeof data['text_type'] === 'string' || data['text_type'] instanceof String)) {
            throw new Error("Expected the field `text_type` to be a primitive type in the JSON string but got " + data['text_type']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * Indicates the track provides Subtitles for the Deaf or Hard-of-hearing (SDH). This optional parameter should be used for tracks with `type` of `text` and `text_type` set to `subtitles`.
 * @member {Boolean} closed_captions
 */
InputSettings.prototype['closed_captions'] = undefined;

/**
 * The time offset in seconds from the beginning of the video, indicating the clip's ending marker. The default value is the duration of the video when not included. This parameter is only applicable for creating clips when `input.url` has `mux://assets/{asset_id}` format.
 * @member {Number} end_time
 */
InputSettings.prototype['end_time'] = undefined;

/**
 * Generate subtitle tracks using automatic speech recognition using this configuration. This may only be provided for the first input object (the main input file). For direct uploads, this first input should omit the url parameter, as the main input file is provided via the direct upload. This will create subtitles based on the audio track ingested from that main input file. Note that subtitle generation happens after initial ingest, so the generated tracks will be in the `preparing` state when the asset transitions to `ready`.
 * @member {Array.<module:model/AssetGeneratedSubtitleSettings>} generated_subtitles
 */
InputSettings.prototype['generated_subtitles'] = undefined;

/**
 * The language code value must be a valid [BCP 47](https://tools.ietf.org/html/bcp47) specification compliant value. For example, `en` for English or `en-US` for the US version of English. This parameter is required for `text` and `audio` track types.
 * @member {String} language_code
 */
InputSettings.prototype['language_code'] = undefined;

/**
 * The name of the track containing a human-readable description. This value must be unique within each group of `text` or `audio` track types. The HLS manifest will associate a subtitle text track with this value. For example, the value should be \"English\" for a subtitle text track with `language_code` set to `en`. This optional parameter should be used only for `text` and `audio` type tracks. This parameter can be optionally provided for the first video input to denote the name of the muxed audio track if present. If this parameter is not included, Mux will auto-populate based on the `input[].language_code` value.
 * @member {String} name
 */
InputSettings.prototype['name'] = undefined;

/**
 * @member {module:model/InputSettingsOverlaySettings} overlay_settings
 */
InputSettings.prototype['overlay_settings'] = undefined;

/**
 * This optional parameter should be used tracks with `type` of `text` and `text_type` set to `subtitles`.
 * @member {String} passthrough
 */
InputSettings.prototype['passthrough'] = undefined;

/**
 * The time offset in seconds from the beginning of the video indicating the clip's starting marker. The default value is 0 when not included. This parameter is only applicable for creating clips when `input.url` has `mux://assets/{asset_id}` format.
 * @member {Number} start_time
 */
InputSettings.prototype['start_time'] = undefined;

/**
 * Type of text track. This parameter only supports subtitles value. For more information on Subtitles / Closed Captions, [see this blog post](https://mux.com/blog/subtitles-captions-webvtt-hls-and-those-magic-flags/). This parameter is required for `text` type tracks.
 * @member {module:model/InputSettings.TextTypeEnum} text_type
 */
InputSettings.prototype['text_type'] = undefined;

/**
 * This parameter is required for `text` type tracks.
 * @member {module:model/InputSettings.TypeEnum} type
 */
InputSettings.prototype['type'] = undefined;

/**
 * The URL of the file that Mux should download and use. * For the main input file, this should be the URL to the muxed file for Mux to download, for example an MP4, MOV, MKV, or TS file. Mux supports most audio/video file formats and codecs, but for fastest processing, you should [use standard inputs wherever possible](https://docs.mux.com/guides/video/minimize-processing-time). * For `audio` tracks, the URL is the location of the audio file for Mux to download, for example an M4A, WAV, or MP3 file. Mux supports most audio file formats and codecs, but for fastest processing, you should [use standard inputs wherever possible](https://docs.mux.com/guides/video/minimize-processing-time). * For `text` tracks, the URL is the location of subtitle/captions file. Mux supports [SubRip Text (SRT)](https://en.wikipedia.org/wiki/SubRip) and [Web Video Text Tracks](https://www.w3.org/TR/webvtt1/) formats for ingesting Subtitles and Closed Captions. * For Watermarking or Overlay, the URL is the location of the watermark image. * When creating clips from existing Mux assets, the URL is defined with `mux://assets/{asset_id}` template where `asset_id` is the Asset Identifier for creating the clip from. The url property may be omitted on the first input object when providing asset settings for LiveStream and Upload objects, in order to configure settings related to the primary (live stream or direct upload) input. 
 * @member {String} url
 */
InputSettings.prototype['url'] = undefined;





/**
 * Allowed values for the <code>text_type</code> property.
 * @enum {String}
 * @readonly
 */
InputSettings['TextTypeEnum'] = {

    /**
     * value: "subtitles"
     * @const
     */
    "subtitles": "subtitles"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
InputSettings['TypeEnum'] = {

    /**
     * value: "video"
     * @const
     */
    "video": "video",

    /**
     * value: "audio"
     * @const
     */
    "audio": "audio",

    /**
     * value: "text"
     * @const
     */
    "text": "text"
};



export default InputSettings;

