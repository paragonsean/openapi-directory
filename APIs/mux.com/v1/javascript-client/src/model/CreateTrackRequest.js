/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateTrackRequest model module.
 * @module model/CreateTrackRequest
 * @version v1
 */
class CreateTrackRequest {
    /**
     * Constructs a new <code>CreateTrackRequest</code>.
     * @alias module:model/CreateTrackRequest
     * @param languageCode {String} The language code value must be a valid BCP 47 specification compliant value. For example, en for English or en-US for the US version of English.
     * @param textType {module:model/CreateTrackRequest.TextTypeEnum} 
     * @param type {module:model/CreateTrackRequest.TypeEnum} 
     * @param url {String} The URL of the file that Mux should download and use. * For `audio` tracks, the URL is the location of the audio file for Mux to download, for example an M4A, WAV, or MP3 file. Mux supports most audio file formats and codecs, but for fastest processing, you should [use standard inputs wherever possible](https://docs.mux.com/guides/video/minimize-processing-time). * For `text` tracks, the URL is the location of subtitle/captions file. Mux supports [SubRip Text (SRT)](https://en.wikipedia.org/wiki/SubRip) and [Web Video Text Tracks](https://www.w3.org/TR/webvtt1/) formats for ingesting Subtitles and Closed Captions. 
     */
    constructor(languageCode, textType, type, url) { 
        
        CreateTrackRequest.initialize(this, languageCode, textType, type, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, languageCode, textType, type, url) { 
        obj['language_code'] = languageCode;
        obj['text_type'] = textType;
        obj['type'] = type;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>CreateTrackRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateTrackRequest} obj Optional instance to populate.
     * @return {module:model/CreateTrackRequest} The populated <code>CreateTrackRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateTrackRequest();

            if (data.hasOwnProperty('closed_captions')) {
                obj['closed_captions'] = ApiClient.convertToType(data['closed_captions'], 'Boolean');
            }
            if (data.hasOwnProperty('language_code')) {
                obj['language_code'] = ApiClient.convertToType(data['language_code'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('passthrough')) {
                obj['passthrough'] = ApiClient.convertToType(data['passthrough'], 'String');
            }
            if (data.hasOwnProperty('text_type')) {
                obj['text_type'] = ApiClient.convertToType(data['text_type'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateTrackRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateTrackRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateTrackRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['language_code'] && !(typeof data['language_code'] === 'string' || data['language_code'] instanceof String)) {
            throw new Error("Expected the field `language_code` to be a primitive type in the JSON string but got " + data['language_code']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['passthrough'] && !(typeof data['passthrough'] === 'string' || data['passthrough'] instanceof String)) {
            throw new Error("Expected the field `passthrough` to be a primitive type in the JSON string but got " + data['passthrough']);
        }
        // ensure the json data is a string
        if (data['text_type'] && !(typeof data['text_type'] === 'string' || data['text_type'] instanceof String)) {
            throw new Error("Expected the field `text_type` to be a primitive type in the JSON string but got " + data['text_type']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

CreateTrackRequest.RequiredProperties = ["language_code", "text_type", "type", "url"];

/**
 * Indicates the track provides Subtitles for the Deaf or Hard-of-hearing (SDH).
 * @member {Boolean} closed_captions
 */
CreateTrackRequest.prototype['closed_captions'] = undefined;

/**
 * The language code value must be a valid BCP 47 specification compliant value. For example, en for English or en-US for the US version of English.
 * @member {String} language_code
 */
CreateTrackRequest.prototype['language_code'] = undefined;

/**
 * The name of the track containing a human-readable description. This value must be unique within each group of `text` or `audio` track types. The HLS manifest will associate the `text` or `audio` track with this value. For example, set the value to \"English\" for subtitles text track with `language_code` as en-US. If this parameter is not included, Mux will auto-populate a value based on the `language_code` value.
 * @member {String} name
 */
CreateTrackRequest.prototype['name'] = undefined;

/**
 * Arbitrary user-supplied metadata set for the track either when creating the asset or track.
 * @member {String} passthrough
 */
CreateTrackRequest.prototype['passthrough'] = undefined;

/**
 * @member {module:model/CreateTrackRequest.TextTypeEnum} text_type
 */
CreateTrackRequest.prototype['text_type'] = undefined;

/**
 * @member {module:model/CreateTrackRequest.TypeEnum} type
 */
CreateTrackRequest.prototype['type'] = undefined;

/**
 * The URL of the file that Mux should download and use. * For `audio` tracks, the URL is the location of the audio file for Mux to download, for example an M4A, WAV, or MP3 file. Mux supports most audio file formats and codecs, but for fastest processing, you should [use standard inputs wherever possible](https://docs.mux.com/guides/video/minimize-processing-time). * For `text` tracks, the URL is the location of subtitle/captions file. Mux supports [SubRip Text (SRT)](https://en.wikipedia.org/wiki/SubRip) and [Web Video Text Tracks](https://www.w3.org/TR/webvtt1/) formats for ingesting Subtitles and Closed Captions. 
 * @member {String} url
 */
CreateTrackRequest.prototype['url'] = undefined;





/**
 * Allowed values for the <code>text_type</code> property.
 * @enum {String}
 * @readonly
 */
CreateTrackRequest['TextTypeEnum'] = {

    /**
     * value: "subtitles"
     * @const
     */
    "subtitles": "subtitles"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CreateTrackRequest['TypeEnum'] = {

    /**
     * value: "text"
     * @const
     */
    "text": "text",

    /**
     * value: "audio"
     * @const
     */
    "audio": "audio"
};



export default CreateTrackRequest;

