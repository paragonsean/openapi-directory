/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TranscriptionVocabulary model module.
 * @module model/TranscriptionVocabulary
 * @version v1
 */
class TranscriptionVocabulary {
    /**
     * Constructs a new <code>TranscriptionVocabulary</code>.
     * @alias module:model/TranscriptionVocabulary
     */
    constructor() { 
        
        TranscriptionVocabulary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TranscriptionVocabulary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TranscriptionVocabulary} obj Optional instance to populate.
     * @return {module:model/TranscriptionVocabulary} The populated <code>TranscriptionVocabulary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TranscriptionVocabulary();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('passthrough')) {
                obj['passthrough'] = ApiClient.convertToType(data['passthrough'], 'String');
            }
            if (data.hasOwnProperty('phrases')) {
                obj['phrases'] = ApiClient.convertToType(data['phrases'], ['String']);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TranscriptionVocabulary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TranscriptionVocabulary</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['passthrough'] && !(typeof data['passthrough'] === 'string' || data['passthrough'] instanceof String)) {
            throw new Error("Expected the field `passthrough` to be a primitive type in the JSON string but got " + data['passthrough']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['phrases'])) {
            throw new Error("Expected the field `phrases` to be an array in the JSON data but got " + data['phrases']);
        }
        // ensure the json data is a string
        if (data['updated_at'] && !(typeof data['updated_at'] === 'string' || data['updated_at'] instanceof String)) {
            throw new Error("Expected the field `updated_at` to be a primitive type in the JSON string but got " + data['updated_at']);
        }

        return true;
    }


}



/**
 * Time the Transcription Vocabulary was created, defined as a Unix timestamp (seconds since epoch).
 * @member {String} created_at
 */
TranscriptionVocabulary.prototype['created_at'] = undefined;

/**
 * Unique identifier for the Transcription Vocabulary
 * @member {String} id
 */
TranscriptionVocabulary.prototype['id'] = undefined;

/**
 * The user-supplied name of the Transcription Vocabulary.
 * @member {String} name
 */
TranscriptionVocabulary.prototype['name'] = undefined;

/**
 * Arbitrary user-supplied metadata set for the Transcription Vocabulary. Max 255 characters.
 * @member {String} passthrough
 */
TranscriptionVocabulary.prototype['passthrough'] = undefined;

/**
 * Phrases, individual words, or proper names to include in the Transcription Vocabulary. When the Transcription Vocabulary is attached to a live stream's `generated_subtitles` configuration, the probability of successful speech recognition for these words or phrases is boosted.
 * @member {Array.<String>} phrases
 */
TranscriptionVocabulary.prototype['phrases'] = undefined;

/**
 * Time the Transcription Vocabulary was updated, defined as a Unix timestamp (seconds since epoch).
 * @member {String} updated_at
 */
TranscriptionVocabulary.prototype['updated_at'] = undefined;






export default TranscriptionVocabulary;

