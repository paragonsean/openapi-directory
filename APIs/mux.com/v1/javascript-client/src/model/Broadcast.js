/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BroadcastLayout from './BroadcastLayout';
import BroadcastResolution from './BroadcastResolution';
import BroadcastStatus from './BroadcastStatus';

/**
 * The Broadcast model module.
 * @module model/Broadcast
 * @version v1
 */
class Broadcast {
    /**
     * Constructs a new <code>Broadcast</code>.
     * @alias module:model/Broadcast
     * @param id {String} Unique identifier for the broadcast. Max 255 characters.
     * @param layout {module:model/BroadcastLayout} 
     * @param liveStreamId {String} The ID of the live stream that the broadcast will be sent to.
     * @param resolution {module:model/BroadcastResolution} 
     * @param status {module:model/BroadcastStatus} 
     */
    constructor(id, layout, liveStreamId, resolution, status) { 
        
        Broadcast.initialize(this, id, layout, liveStreamId, resolution, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, layout, liveStreamId, resolution, status) { 
        obj['id'] = id;
        obj['layout'] = layout;
        obj['live_stream_id'] = liveStreamId;
        obj['resolution'] = resolution;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Broadcast</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Broadcast} obj Optional instance to populate.
     * @return {module:model/Broadcast} The populated <code>Broadcast</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Broadcast();

            if (data.hasOwnProperty('background')) {
                obj['background'] = ApiClient.convertToType(data['background'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('layout')) {
                obj['layout'] = BroadcastLayout.constructFromObject(data['layout']);
            }
            if (data.hasOwnProperty('live_stream_id')) {
                obj['live_stream_id'] = ApiClient.convertToType(data['live_stream_id'], 'String');
            }
            if (data.hasOwnProperty('passthrough')) {
                obj['passthrough'] = ApiClient.convertToType(data['passthrough'], 'String');
            }
            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = BroadcastResolution.constructFromObject(data['resolution']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = BroadcastStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Broadcast</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Broadcast</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Broadcast.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['background'] && !(typeof data['background'] === 'string' || data['background'] instanceof String)) {
            throw new Error("Expected the field `background` to be a primitive type in the JSON string but got " + data['background']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['live_stream_id'] && !(typeof data['live_stream_id'] === 'string' || data['live_stream_id'] instanceof String)) {
            throw new Error("Expected the field `live_stream_id` to be a primitive type in the JSON string but got " + data['live_stream_id']);
        }
        // ensure the json data is a string
        if (data['passthrough'] && !(typeof data['passthrough'] === 'string' || data['passthrough'] instanceof String)) {
            throw new Error("Expected the field `passthrough` to be a primitive type in the JSON string but got " + data['passthrough']);
        }

        return true;
    }


}

Broadcast.RequiredProperties = ["id", "layout", "live_stream_id", "resolution", "status"];

/**
 * URL of an image to display as the background of the broadcast. Its dimensions should match the provided resolution.
 * @member {String} background
 */
Broadcast.prototype['background'] = undefined;

/**
 * Unique identifier for the broadcast. Max 255 characters.
 * @member {String} id
 */
Broadcast.prototype['id'] = undefined;

/**
 * @member {module:model/BroadcastLayout} layout
 */
Broadcast.prototype['layout'] = undefined;

/**
 * The ID of the live stream that the broadcast will be sent to.
 * @member {String} live_stream_id
 */
Broadcast.prototype['live_stream_id'] = undefined;

/**
 * Arbitrary user-supplied metadata that will be included in the broadcast details and related webhooks. Max: 255 characters.
 * @member {String} passthrough
 */
Broadcast.prototype['passthrough'] = undefined;

/**
 * @member {module:model/BroadcastResolution} resolution
 */
Broadcast.prototype['resolution'] = undefined;

/**
 * @member {module:model/BroadcastStatus} status
 */
Broadcast.prototype['status'] = undefined;






export default Broadcast;

