/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IncidentBreakdown from './IncidentBreakdown';
import IncidentNotification from './IncidentNotification';
import IncidentNotificationRule from './IncidentNotificationRule';

/**
 * The Incident model module.
 * @module model/Incident
 * @version v1
 */
class Incident {
    /**
     * Constructs a new <code>Incident</code>.
     * @alias module:model/Incident
     */
    constructor() { 
        
        Incident.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Incident</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Incident} obj Optional instance to populate.
     * @return {module:model/Incident} The populated <code>Incident</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Incident();

            if (data.hasOwnProperty('affected_views')) {
                obj['affected_views'] = ApiClient.convertToType(data['affected_views'], 'Number');
            }
            if (data.hasOwnProperty('affected_views_per_hour')) {
                obj['affected_views_per_hour'] = ApiClient.convertToType(data['affected_views_per_hour'], 'Number');
            }
            if (data.hasOwnProperty('affected_views_per_hour_on_open')) {
                obj['affected_views_per_hour_on_open'] = ApiClient.convertToType(data['affected_views_per_hour_on_open'], 'Number');
            }
            if (data.hasOwnProperty('breakdowns')) {
                obj['breakdowns'] = ApiClient.convertToType(data['breakdowns'], [IncidentBreakdown]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('error_description')) {
                obj['error_description'] = ApiClient.convertToType(data['error_description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('impact')) {
                obj['impact'] = ApiClient.convertToType(data['impact'], 'String');
            }
            if (data.hasOwnProperty('incident_key')) {
                obj['incident_key'] = ApiClient.convertToType(data['incident_key'], 'String');
            }
            if (data.hasOwnProperty('measured_value')) {
                obj['measured_value'] = ApiClient.convertToType(data['measured_value'], 'Number');
            }
            if (data.hasOwnProperty('measured_value_on_close')) {
                obj['measured_value_on_close'] = ApiClient.convertToType(data['measured_value_on_close'], 'Number');
            }
            if (data.hasOwnProperty('measurement')) {
                obj['measurement'] = ApiClient.convertToType(data['measurement'], 'String');
            }
            if (data.hasOwnProperty('notification_rules')) {
                obj['notification_rules'] = ApiClient.convertToType(data['notification_rules'], [IncidentNotificationRule]);
            }
            if (data.hasOwnProperty('notifications')) {
                obj['notifications'] = ApiClient.convertToType(data['notifications'], [IncidentNotification]);
            }
            if (data.hasOwnProperty('resolved_at')) {
                obj['resolved_at'] = ApiClient.convertToType(data['resolved_at'], 'String');
            }
            if (data.hasOwnProperty('sample_size')) {
                obj['sample_size'] = ApiClient.convertToType(data['sample_size'], 'Number');
            }
            if (data.hasOwnProperty('sample_size_unit')) {
                obj['sample_size_unit'] = ApiClient.convertToType(data['sample_size_unit'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('started_at')) {
                obj['started_at'] = ApiClient.convertToType(data['started_at'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('threshold')) {
                obj['threshold'] = ApiClient.convertToType(data['threshold'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Incident</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Incident</code>.
     */
    static validateJSON(data) {
        if (data['breakdowns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['breakdowns'])) {
                throw new Error("Expected the field `breakdowns` to be an array in the JSON data but got " + data['breakdowns']);
            }
            // validate the optional field `breakdowns` (array)
            for (const item of data['breakdowns']) {
                IncidentBreakdown.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['error_description'] && !(typeof data['error_description'] === 'string' || data['error_description'] instanceof String)) {
            throw new Error("Expected the field `error_description` to be a primitive type in the JSON string but got " + data['error_description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['impact'] && !(typeof data['impact'] === 'string' || data['impact'] instanceof String)) {
            throw new Error("Expected the field `impact` to be a primitive type in the JSON string but got " + data['impact']);
        }
        // ensure the json data is a string
        if (data['incident_key'] && !(typeof data['incident_key'] === 'string' || data['incident_key'] instanceof String)) {
            throw new Error("Expected the field `incident_key` to be a primitive type in the JSON string but got " + data['incident_key']);
        }
        // ensure the json data is a string
        if (data['measurement'] && !(typeof data['measurement'] === 'string' || data['measurement'] instanceof String)) {
            throw new Error("Expected the field `measurement` to be a primitive type in the JSON string but got " + data['measurement']);
        }
        if (data['notification_rules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['notification_rules'])) {
                throw new Error("Expected the field `notification_rules` to be an array in the JSON data but got " + data['notification_rules']);
            }
            // validate the optional field `notification_rules` (array)
            for (const item of data['notification_rules']) {
                IncidentNotificationRule.validateJSON(item);
            };
        }
        if (data['notifications']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['notifications'])) {
                throw new Error("Expected the field `notifications` to be an array in the JSON data but got " + data['notifications']);
            }
            // validate the optional field `notifications` (array)
            for (const item of data['notifications']) {
                IncidentNotification.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['resolved_at'] && !(typeof data['resolved_at'] === 'string' || data['resolved_at'] instanceof String)) {
            throw new Error("Expected the field `resolved_at` to be a primitive type in the JSON string but got " + data['resolved_at']);
        }
        // ensure the json data is a string
        if (data['sample_size_unit'] && !(typeof data['sample_size_unit'] === 'string' || data['sample_size_unit'] instanceof String)) {
            throw new Error("Expected the field `sample_size_unit` to be a primitive type in the JSON string but got " + data['sample_size_unit']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['started_at'] && !(typeof data['started_at'] === 'string' || data['started_at'] instanceof String)) {
            throw new Error("Expected the field `started_at` to be a primitive type in the JSON string but got " + data['started_at']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * @member {Number} affected_views
 */
Incident.prototype['affected_views'] = undefined;

/**
 * @member {Number} affected_views_per_hour
 */
Incident.prototype['affected_views_per_hour'] = undefined;

/**
 * @member {Number} affected_views_per_hour_on_open
 */
Incident.prototype['affected_views_per_hour_on_open'] = undefined;

/**
 * @member {Array.<module:model/IncidentBreakdown>} breakdowns
 */
Incident.prototype['breakdowns'] = undefined;

/**
 * @member {String} description
 */
Incident.prototype['description'] = undefined;

/**
 * @member {String} error_description
 */
Incident.prototype['error_description'] = undefined;

/**
 * @member {String} id
 */
Incident.prototype['id'] = undefined;

/**
 * @member {String} impact
 */
Incident.prototype['impact'] = undefined;

/**
 * @member {String} incident_key
 */
Incident.prototype['incident_key'] = undefined;

/**
 * @member {Number} measured_value
 */
Incident.prototype['measured_value'] = undefined;

/**
 * @member {Number} measured_value_on_close
 */
Incident.prototype['measured_value_on_close'] = undefined;

/**
 * @member {String} measurement
 */
Incident.prototype['measurement'] = undefined;

/**
 * @member {Array.<module:model/IncidentNotificationRule>} notification_rules
 */
Incident.prototype['notification_rules'] = undefined;

/**
 * @member {Array.<module:model/IncidentNotification>} notifications
 */
Incident.prototype['notifications'] = undefined;

/**
 * @member {String} resolved_at
 */
Incident.prototype['resolved_at'] = undefined;

/**
 * @member {Number} sample_size
 */
Incident.prototype['sample_size'] = undefined;

/**
 * @member {String} sample_size_unit
 */
Incident.prototype['sample_size_unit'] = undefined;

/**
 * @member {String} severity
 */
Incident.prototype['severity'] = undefined;

/**
 * @member {String} started_at
 */
Incident.prototype['started_at'] = undefined;

/**
 * @member {String} status
 */
Incident.prototype['status'] = undefined;

/**
 * @member {Number} threshold
 */
Incident.prototype['threshold'] = undefined;






export default Incident;

