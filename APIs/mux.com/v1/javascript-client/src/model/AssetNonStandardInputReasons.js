/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssetNonStandardInputReasons model module.
 * @module model/AssetNonStandardInputReasons
 * @version v1
 */
class AssetNonStandardInputReasons {
    /**
     * Constructs a new <code>AssetNonStandardInputReasons</code>.
     * An object containing one or more reasons the input file is non-standard. See [the guide on minimizing processing time](https://docs.mux.com/guides/video/minimize-processing-time) for more information on what a standard input is defined as. This object only exists on on-demand assets that have non-standard inputs, so if missing you can assume the input qualifies as standard.
     * @alias module:model/AssetNonStandardInputReasons
     */
    constructor() { 
        
        AssetNonStandardInputReasons.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AssetNonStandardInputReasons</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssetNonStandardInputReasons} obj Optional instance to populate.
     * @return {module:model/AssetNonStandardInputReasons} The populated <code>AssetNonStandardInputReasons</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssetNonStandardInputReasons();

            if (data.hasOwnProperty('audio_codec')) {
                obj['audio_codec'] = ApiClient.convertToType(data['audio_codec'], 'String');
            }
            if (data.hasOwnProperty('audio_edit_list')) {
                obj['audio_edit_list'] = ApiClient.convertToType(data['audio_edit_list'], 'String');
            }
            if (data.hasOwnProperty('pixel_aspect_ratio')) {
                obj['pixel_aspect_ratio'] = ApiClient.convertToType(data['pixel_aspect_ratio'], 'String');
            }
            if (data.hasOwnProperty('unexpected_media_file_parameters')) {
                obj['unexpected_media_file_parameters'] = ApiClient.convertToType(data['unexpected_media_file_parameters'], 'String');
            }
            if (data.hasOwnProperty('unsupported_pixel_format')) {
                obj['unsupported_pixel_format'] = ApiClient.convertToType(data['unsupported_pixel_format'], 'String');
            }
            if (data.hasOwnProperty('video_bitrate')) {
                obj['video_bitrate'] = ApiClient.convertToType(data['video_bitrate'], 'String');
            }
            if (data.hasOwnProperty('video_codec')) {
                obj['video_codec'] = ApiClient.convertToType(data['video_codec'], 'String');
            }
            if (data.hasOwnProperty('video_edit_list')) {
                obj['video_edit_list'] = ApiClient.convertToType(data['video_edit_list'], 'String');
            }
            if (data.hasOwnProperty('video_frame_rate')) {
                obj['video_frame_rate'] = ApiClient.convertToType(data['video_frame_rate'], 'String');
            }
            if (data.hasOwnProperty('video_gop_size')) {
                obj['video_gop_size'] = ApiClient.convertToType(data['video_gop_size'], 'String');
            }
            if (data.hasOwnProperty('video_resolution')) {
                obj['video_resolution'] = ApiClient.convertToType(data['video_resolution'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssetNonStandardInputReasons</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssetNonStandardInputReasons</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['audio_codec'] && !(typeof data['audio_codec'] === 'string' || data['audio_codec'] instanceof String)) {
            throw new Error("Expected the field `audio_codec` to be a primitive type in the JSON string but got " + data['audio_codec']);
        }
        // ensure the json data is a string
        if (data['audio_edit_list'] && !(typeof data['audio_edit_list'] === 'string' || data['audio_edit_list'] instanceof String)) {
            throw new Error("Expected the field `audio_edit_list` to be a primitive type in the JSON string but got " + data['audio_edit_list']);
        }
        // ensure the json data is a string
        if (data['pixel_aspect_ratio'] && !(typeof data['pixel_aspect_ratio'] === 'string' || data['pixel_aspect_ratio'] instanceof String)) {
            throw new Error("Expected the field `pixel_aspect_ratio` to be a primitive type in the JSON string but got " + data['pixel_aspect_ratio']);
        }
        // ensure the json data is a string
        if (data['unexpected_media_file_parameters'] && !(typeof data['unexpected_media_file_parameters'] === 'string' || data['unexpected_media_file_parameters'] instanceof String)) {
            throw new Error("Expected the field `unexpected_media_file_parameters` to be a primitive type in the JSON string but got " + data['unexpected_media_file_parameters']);
        }
        // ensure the json data is a string
        if (data['unsupported_pixel_format'] && !(typeof data['unsupported_pixel_format'] === 'string' || data['unsupported_pixel_format'] instanceof String)) {
            throw new Error("Expected the field `unsupported_pixel_format` to be a primitive type in the JSON string but got " + data['unsupported_pixel_format']);
        }
        // ensure the json data is a string
        if (data['video_bitrate'] && !(typeof data['video_bitrate'] === 'string' || data['video_bitrate'] instanceof String)) {
            throw new Error("Expected the field `video_bitrate` to be a primitive type in the JSON string but got " + data['video_bitrate']);
        }
        // ensure the json data is a string
        if (data['video_codec'] && !(typeof data['video_codec'] === 'string' || data['video_codec'] instanceof String)) {
            throw new Error("Expected the field `video_codec` to be a primitive type in the JSON string but got " + data['video_codec']);
        }
        // ensure the json data is a string
        if (data['video_edit_list'] && !(typeof data['video_edit_list'] === 'string' || data['video_edit_list'] instanceof String)) {
            throw new Error("Expected the field `video_edit_list` to be a primitive type in the JSON string but got " + data['video_edit_list']);
        }
        // ensure the json data is a string
        if (data['video_frame_rate'] && !(typeof data['video_frame_rate'] === 'string' || data['video_frame_rate'] instanceof String)) {
            throw new Error("Expected the field `video_frame_rate` to be a primitive type in the JSON string but got " + data['video_frame_rate']);
        }
        // ensure the json data is a string
        if (data['video_gop_size'] && !(typeof data['video_gop_size'] === 'string' || data['video_gop_size'] instanceof String)) {
            throw new Error("Expected the field `video_gop_size` to be a primitive type in the JSON string but got " + data['video_gop_size']);
        }
        // ensure the json data is a string
        if (data['video_resolution'] && !(typeof data['video_resolution'] === 'string' || data['video_resolution'] instanceof String)) {
            throw new Error("Expected the field `video_resolution` to be a primitive type in the JSON string but got " + data['video_resolution']);
        }

        return true;
    }


}



/**
 * The audio codec used on the input file. Non-AAC audio codecs are non-standard.
 * @member {String} audio_codec
 */
AssetNonStandardInputReasons.prototype['audio_codec'] = undefined;

/**
 * Audio Edit List reason indicates that the input file's audio track contains a complex Edit Decision List.
 * @member {module:model/AssetNonStandardInputReasons.AudioEditListEnum} audio_edit_list
 */
AssetNonStandardInputReasons.prototype['audio_edit_list'] = undefined;

/**
 * The video pixel aspect ratio of the input file.
 * @member {String} pixel_aspect_ratio
 */
AssetNonStandardInputReasons.prototype['pixel_aspect_ratio'] = undefined;

/**
 * A catch-all reason when the input file in created with non-standard encoding parameters.
 * @member {module:model/AssetNonStandardInputReasons.UnexpectedMediaFileParametersEnum} unexpected_media_file_parameters
 */
AssetNonStandardInputReasons.prototype['unexpected_media_file_parameters'] = undefined;

/**
 * The video pixel format, as a string, returned by libav. Considered non-standard if not one of yuv420p or yuvj420p.
 * @member {String} unsupported_pixel_format
 */
AssetNonStandardInputReasons.prototype['unsupported_pixel_format'] = undefined;

/**
 * The video bitrate of the input file is `high`. This parameter is present when the average bitrate of any key frame interval (also known as Group of Pictures or GOP) is higher than what's considered standard which typically is 16 Mbps.
 * @member {module:model/AssetNonStandardInputReasons.VideoBitrateEnum} video_bitrate
 */
AssetNonStandardInputReasons.prototype['video_bitrate'] = undefined;

/**
 * The video codec used on the input file. For example, the input file encoded with `hevc` video codec is non-standard and the value of this parameter is `hevc`.
 * @member {String} video_codec
 */
AssetNonStandardInputReasons.prototype['video_codec'] = undefined;

/**
 * Video Edit List reason indicates that the input file's video track contains a complex Edit Decision List.
 * @member {module:model/AssetNonStandardInputReasons.VideoEditListEnum} video_edit_list
 */
AssetNonStandardInputReasons.prototype['video_edit_list'] = undefined;

/**
 * The video frame rate of the input file. Video with average frames per second (fps) less than 5 or greater than 120 is non-standard. A `-1` frame rate value indicates Mux could not determine the frame rate of the video track.
 * @member {String} video_frame_rate
 */
AssetNonStandardInputReasons.prototype['video_frame_rate'] = undefined;

/**
 * The video key frame Interval (also called as Group of Picture or GOP) of the input file is `high`. This parameter is present when the gop is greater than 20 seconds.
 * @member {module:model/AssetNonStandardInputReasons.VideoGopSizeEnum} video_gop_size
 */
AssetNonStandardInputReasons.prototype['video_gop_size'] = undefined;

/**
 * The video resolution of the input file. Video resolution higher than 2048 pixels on any one dimension (height or width) is considered non-standard, The resolution value is presented as `width` x `height` in pixels.
 * @member {String} video_resolution
 */
AssetNonStandardInputReasons.prototype['video_resolution'] = undefined;





/**
 * Allowed values for the <code>audio_edit_list</code> property.
 * @enum {String}
 * @readonly
 */
AssetNonStandardInputReasons['AudioEditListEnum'] = {

    /**
     * value: "non-standard"
     * @const
     */
    "non-standard": "non-standard"
};


/**
 * Allowed values for the <code>unexpected_media_file_parameters</code> property.
 * @enum {String}
 * @readonly
 */
AssetNonStandardInputReasons['UnexpectedMediaFileParametersEnum'] = {

    /**
     * value: "non-standard"
     * @const
     */
    "non-standard": "non-standard"
};


/**
 * Allowed values for the <code>video_bitrate</code> property.
 * @enum {String}
 * @readonly
 */
AssetNonStandardInputReasons['VideoBitrateEnum'] = {

    /**
     * value: "high"
     * @const
     */
    "high": "high"
};


/**
 * Allowed values for the <code>video_edit_list</code> property.
 * @enum {String}
 * @readonly
 */
AssetNonStandardInputReasons['VideoEditListEnum'] = {

    /**
     * value: "non-standard"
     * @const
     */
    "non-standard": "non-standard"
};


/**
 * Allowed values for the <code>video_gop_size</code> property.
 * @enum {String}
 * @readonly
 */
AssetNonStandardInputReasons['VideoGopSizeEnum'] = {

    /**
     * value: "high"
     * @const
     */
    "high": "high"
};



export default AssetNonStandardInputReasons;

