/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InputSettings from './InputSettings';
import PlaybackPolicy from './PlaybackPolicy';

/**
 * The CreateAssetRequest model module.
 * @module model/CreateAssetRequest
 * @version v1
 */
class CreateAssetRequest {
    /**
     * Constructs a new <code>CreateAssetRequest</code>.
     * @alias module:model/CreateAssetRequest
     */
    constructor() { 
        
        CreateAssetRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['normalize_audio'] = false;
    }

    /**
     * Constructs a <code>CreateAssetRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAssetRequest} obj Optional instance to populate.
     * @return {module:model/CreateAssetRequest} The populated <code>CreateAssetRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateAssetRequest();

            if (data.hasOwnProperty('encoding_tier')) {
                obj['encoding_tier'] = ApiClient.convertToType(data['encoding_tier'], 'String');
            }
            if (data.hasOwnProperty('input')) {
                obj['input'] = ApiClient.convertToType(data['input'], [InputSettings]);
            }
            if (data.hasOwnProperty('master_access')) {
                obj['master_access'] = ApiClient.convertToType(data['master_access'], 'String');
            }
            if (data.hasOwnProperty('max_resolution_tier')) {
                obj['max_resolution_tier'] = ApiClient.convertToType(data['max_resolution_tier'], 'String');
            }
            if (data.hasOwnProperty('mp4_support')) {
                obj['mp4_support'] = ApiClient.convertToType(data['mp4_support'], 'String');
            }
            if (data.hasOwnProperty('normalize_audio')) {
                obj['normalize_audio'] = ApiClient.convertToType(data['normalize_audio'], 'Boolean');
            }
            if (data.hasOwnProperty('passthrough')) {
                obj['passthrough'] = ApiClient.convertToType(data['passthrough'], 'String');
            }
            if (data.hasOwnProperty('per_title_encode')) {
                obj['per_title_encode'] = ApiClient.convertToType(data['per_title_encode'], 'Boolean');
            }
            if (data.hasOwnProperty('playback_policy')) {
                obj['playback_policy'] = ApiClient.convertToType(data['playback_policy'], [PlaybackPolicy]);
            }
            if (data.hasOwnProperty('test')) {
                obj['test'] = ApiClient.convertToType(data['test'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateAssetRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateAssetRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['encoding_tier'] && !(typeof data['encoding_tier'] === 'string' || data['encoding_tier'] instanceof String)) {
            throw new Error("Expected the field `encoding_tier` to be a primitive type in the JSON string but got " + data['encoding_tier']);
        }
        if (data['input']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['input'])) {
                throw new Error("Expected the field `input` to be an array in the JSON data but got " + data['input']);
            }
            // validate the optional field `input` (array)
            for (const item of data['input']) {
                InputSettings.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['master_access'] && !(typeof data['master_access'] === 'string' || data['master_access'] instanceof String)) {
            throw new Error("Expected the field `master_access` to be a primitive type in the JSON string but got " + data['master_access']);
        }
        // ensure the json data is a string
        if (data['max_resolution_tier'] && !(typeof data['max_resolution_tier'] === 'string' || data['max_resolution_tier'] instanceof String)) {
            throw new Error("Expected the field `max_resolution_tier` to be a primitive type in the JSON string but got " + data['max_resolution_tier']);
        }
        // ensure the json data is a string
        if (data['mp4_support'] && !(typeof data['mp4_support'] === 'string' || data['mp4_support'] instanceof String)) {
            throw new Error("Expected the field `mp4_support` to be a primitive type in the JSON string but got " + data['mp4_support']);
        }
        // ensure the json data is a string
        if (data['passthrough'] && !(typeof data['passthrough'] === 'string' || data['passthrough'] instanceof String)) {
            throw new Error("Expected the field `passthrough` to be a primitive type in the JSON string but got " + data['passthrough']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['playback_policy'])) {
            throw new Error("Expected the field `playback_policy` to be an array in the JSON data but got " + data['playback_policy']);
        }

        return true;
    }


}



/**
 * The encoding tier informs the cost, quality, and available platform features for the asset. By default the `smart` encoding tier is used.
 * @member {module:model/CreateAssetRequest.EncodingTierEnum} encoding_tier
 */
CreateAssetRequest.prototype['encoding_tier'] = undefined;

/**
 * An array of objects that each describe an input file to be used to create the asset. As a shortcut, input can also be a string URL for a file when only one input file is used. See `input[].url` for requirements.
 * @member {Array.<module:model/InputSettings>} input
 */
CreateAssetRequest.prototype['input'] = undefined;

/**
 * Specify what level (if any) of support for master access. Master access can be enabled temporarily for your asset to be downloaded. See the [Download your videos guide](/guides/video/download-your-videos) for more information.
 * @member {module:model/CreateAssetRequest.MasterAccessEnum} master_access
 */
CreateAssetRequest.prototype['master_access'] = undefined;

/**
 * Max resolution tier can be used to control the maximum `resolution_tier` your asset is encoded, stored, and streamed at. If not set, this defaults to `1080p`.
 * @member {module:model/CreateAssetRequest.MaxResolutionTierEnum} max_resolution_tier
 */
CreateAssetRequest.prototype['max_resolution_tier'] = undefined;

/**
 * Specify what level (if any) of support for mp4 playback. In most cases you should use our default HLS-based streaming playback ({playback_id}.m3u8) which can automatically adjust to viewers' connection speeds, but an mp4 can be useful for some legacy devices or downloading for offline playback. See the [Download your videos guide](/guides/video/download-your-videos) for more information.
 * @member {module:model/CreateAssetRequest.Mp4SupportEnum} mp4_support
 */
CreateAssetRequest.prototype['mp4_support'] = undefined;

/**
 * Normalize the audio track loudness level. This parameter is only applicable to on-demand (not live) assets.
 * @member {Boolean} normalize_audio
 * @default false
 */
CreateAssetRequest.prototype['normalize_audio'] = false;

/**
 * Arbitrary user-supplied metadata that will be included in the asset details and related webhooks. Can be used to store your own ID for a video along with the asset. **Max: 255 characters**.
 * @member {String} passthrough
 */
CreateAssetRequest.prototype['passthrough'] = undefined;

/**
 * @member {Boolean} per_title_encode
 */
CreateAssetRequest.prototype['per_title_encode'] = undefined;

/**
 * An array of playback policy names that you want applied to this asset and available through `playback_ids`. Options include: `\"public\"` (anyone with the playback URL can stream the asset). And `\"signed\"` (an additional access token is required to play the asset). If no playback_policy is set, the asset will have no playback IDs and will therefore not be playable. For simplicity, a single string name can be used in place of the array in the case of only one playback policy.
 * @member {Array.<module:model/PlaybackPolicy>} playback_policy
 */
CreateAssetRequest.prototype['playback_policy'] = undefined;

/**
 * Marks the asset as a test asset when the value is set to true. A Test asset can help evaluate the Mux Video APIs without incurring any cost. There is no limit on number of test assets created. Test asset are watermarked with the Mux logo, limited to 10 seconds, deleted after 24 hrs.
 * @member {Boolean} test
 */
CreateAssetRequest.prototype['test'] = undefined;





/**
 * Allowed values for the <code>encoding_tier</code> property.
 * @enum {String}
 * @readonly
 */
CreateAssetRequest['EncodingTierEnum'] = {

    /**
     * value: "smart"
     * @const
     */
    "smart": "smart",

    /**
     * value: "baseline"
     * @const
     */
    "baseline": "baseline"
};


/**
 * Allowed values for the <code>master_access</code> property.
 * @enum {String}
 * @readonly
 */
CreateAssetRequest['MasterAccessEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "temporary"
     * @const
     */
    "temporary": "temporary"
};


/**
 * Allowed values for the <code>max_resolution_tier</code> property.
 * @enum {String}
 * @readonly
 */
CreateAssetRequest['MaxResolutionTierEnum'] = {

    /**
     * value: "1080p"
     * @const
     */
    "1080p": "1080p",

    /**
     * value: "1440p"
     * @const
     */
    "1440p": "1440p",

    /**
     * value: "2160p"
     * @const
     */
    "2160p": "2160p"
};


/**
 * Allowed values for the <code>mp4_support</code> property.
 * @enum {String}
 * @readonly
 */
CreateAssetRequest['Mp4SupportEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "standard"
     * @const
     */
    "standard": "standard"
};



export default CreateAssetRequest;

