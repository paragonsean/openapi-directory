/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Broadcast from './Broadcast';
import SpaceStatus from './SpaceStatus';
import SpaceType from './SpaceType';

/**
 * The Space model module.
 * @module model/Space
 * @version v1
 */
class Space {
    /**
     * Constructs a new <code>Space</code>.
     * @alias module:model/Space
     * @param createdAt {String} Time the space was created, defined as a Unix timestamp (seconds since epoch).
     * @param id {String} Unique identifier for the space. Max 255 characters.
     * @param status {module:model/SpaceStatus} 
     * @param type {module:model/SpaceType} 
     */
    constructor(createdAt, id, status, type) { 
        
        Space.initialize(this, createdAt, id, status, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, id, status, type) { 
        obj['created_at'] = createdAt;
        obj['id'] = id;
        obj['status'] = status;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Space</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Space} obj Optional instance to populate.
     * @return {module:model/Space} The populated <code>Space</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Space();

            if (data.hasOwnProperty('active_session_id')) {
                obj['active_session_id'] = ApiClient.convertToType(data['active_session_id'], 'String');
            }
            if (data.hasOwnProperty('broadcasts')) {
                obj['broadcasts'] = ApiClient.convertToType(data['broadcasts'], [Broadcast]);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('passthrough')) {
                obj['passthrough'] = ApiClient.convertToType(data['passthrough'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = SpaceStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = SpaceType.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Space</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Space</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Space.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['active_session_id'] && !(typeof data['active_session_id'] === 'string' || data['active_session_id'] instanceof String)) {
            throw new Error("Expected the field `active_session_id` to be a primitive type in the JSON string but got " + data['active_session_id']);
        }
        if (data['broadcasts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['broadcasts'])) {
                throw new Error("Expected the field `broadcasts` to be an array in the JSON data but got " + data['broadcasts']);
            }
            // validate the optional field `broadcasts` (array)
            for (const item of data['broadcasts']) {
                Broadcast.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['created_at'] && !(typeof data['created_at'] === 'string' || data['created_at'] instanceof String)) {
            throw new Error("Expected the field `created_at` to be a primitive type in the JSON string but got " + data['created_at']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['passthrough'] && !(typeof data['passthrough'] === 'string' || data['passthrough'] instanceof String)) {
            throw new Error("Expected the field `passthrough` to be a primitive type in the JSON string but got " + data['passthrough']);
        }

        return true;
    }


}

Space.RequiredProperties = ["created_at", "id", "status", "type"];

/**
 * Unique identifier for the current lifecycle of the space. Only set when the space is `active` and is set to a new value each time the space transitions from `idle` to `active`. This value is useful for logging and debugging issues. Max 255 characters.
 * @member {String} active_session_id
 */
Space.prototype['active_session_id'] = undefined;

/**
 * An array of broadcast destinations.
 * @member {Array.<module:model/Broadcast>} broadcasts
 */
Space.prototype['broadcasts'] = undefined;

/**
 * Time the space was created, defined as a Unix timestamp (seconds since epoch).
 * @member {String} created_at
 */
Space.prototype['created_at'] = undefined;

/**
 * Unique identifier for the space. Max 255 characters.
 * @member {String} id
 */
Space.prototype['id'] = undefined;

/**
 * Arbitrary user-supplied metadata that will be included in the space details and related webhooks. Max: 255 characters.
 * @member {String} passthrough
 */
Space.prototype['passthrough'] = undefined;

/**
 * @member {module:model/SpaceStatus} status
 */
Space.prototype['status'] = undefined;

/**
 * @member {module:model/SpaceType} type
 */
Space.prototype['type'] = undefined;






export default Space;

