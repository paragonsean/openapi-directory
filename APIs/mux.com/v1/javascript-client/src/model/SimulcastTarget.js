/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SimulcastTarget model module.
 * @module model/SimulcastTarget
 * @version v1
 */
class SimulcastTarget {
    /**
     * Constructs a new <code>SimulcastTarget</code>.
     * @alias module:model/SimulcastTarget
     */
    constructor() { 
        
        SimulcastTarget.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SimulcastTarget</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SimulcastTarget} obj Optional instance to populate.
     * @return {module:model/SimulcastTarget} The populated <code>SimulcastTarget</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SimulcastTarget();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('passthrough')) {
                obj['passthrough'] = ApiClient.convertToType(data['passthrough'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('stream_key')) {
                obj['stream_key'] = ApiClient.convertToType(data['stream_key'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SimulcastTarget</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SimulcastTarget</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['passthrough'] && !(typeof data['passthrough'] === 'string' || data['passthrough'] instanceof String)) {
            throw new Error("Expected the field `passthrough` to be a primitive type in the JSON string but got " + data['passthrough']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['stream_key'] && !(typeof data['stream_key'] === 'string' || data['stream_key'] instanceof String)) {
            throw new Error("Expected the field `stream_key` to be a primitive type in the JSON string but got " + data['stream_key']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * ID of the Simulcast Target
 * @member {String} id
 */
SimulcastTarget.prototype['id'] = undefined;

/**
 * Arbitrary user-supplied metadata set when creating a simulcast target.
 * @member {String} passthrough
 */
SimulcastTarget.prototype['passthrough'] = undefined;

/**
 * The current status of the simulcast target. See Statuses below for detailed description.   * `idle`: Default status. When the parent live stream is in disconnected status, simulcast targets will be idle state.   * `starting`: The simulcast target transitions into this state when the parent live stream transition into connected state.   * `broadcasting`: The simulcast target has successfully connected to the third party live streaming service and is pushing video to that service.   * `errored`: The simulcast target encountered an error either while attempting to connect to the third party live streaming service, or mid-broadcasting. Compared to other errored statuses in the Mux Video API, a simulcast may transition back into the broadcasting state if a connection with the service can be re-established. 
 * @member {module:model/SimulcastTarget.StatusEnum} status
 */
SimulcastTarget.prototype['status'] = undefined;

/**
 * Stream Key represents an stream identifier for the third party live streaming service to simulcast the parent live stream too.
 * @member {String} stream_key
 */
SimulcastTarget.prototype['stream_key'] = undefined;

/**
 * RTMP hostname including the application name for the third party live streaming service.
 * @member {String} url
 */
SimulcastTarget.prototype['url'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
SimulcastTarget['StatusEnum'] = {

    /**
     * value: "idle"
     * @const
     */
    "idle": "idle",

    /**
     * value: "starting"
     * @const
     */
    "starting": "starting",

    /**
     * value: "broadcasting"
     * @const
     */
    "broadcasting": "broadcasting",

    /**
     * value: "errored"
     * @const
     */
    "errored": "errored"
};



export default SimulcastTarget;

