/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateAssetRequest from './CreateAssetRequest';
import CreateSimulcastTargetRequest from './CreateSimulcastTargetRequest';
import LiveStreamEmbeddedSubtitleSettings from './LiveStreamEmbeddedSubtitleSettings';
import LiveStreamGeneratedSubtitleSettings from './LiveStreamGeneratedSubtitleSettings';
import PlaybackPolicy from './PlaybackPolicy';

/**
 * The CreateLiveStreamRequest model module.
 * @module model/CreateLiveStreamRequest
 * @version v1
 */
class CreateLiveStreamRequest {
    /**
     * Constructs a new <code>CreateLiveStreamRequest</code>.
     * @alias module:model/CreateLiveStreamRequest
     */
    constructor() { 
        
        CreateLiveStreamRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['max_continuous_duration'] = 43200;
        obj['reconnect_window'] = 60;
        obj['use_slate_for_standard_latency'] = false;
    }

    /**
     * Constructs a <code>CreateLiveStreamRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateLiveStreamRequest} obj Optional instance to populate.
     * @return {module:model/CreateLiveStreamRequest} The populated <code>CreateLiveStreamRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateLiveStreamRequest();

            if (data.hasOwnProperty('audio_only')) {
                obj['audio_only'] = ApiClient.convertToType(data['audio_only'], 'Boolean');
            }
            if (data.hasOwnProperty('embedded_subtitles')) {
                obj['embedded_subtitles'] = ApiClient.convertToType(data['embedded_subtitles'], [LiveStreamEmbeddedSubtitleSettings]);
            }
            if (data.hasOwnProperty('generated_subtitles')) {
                obj['generated_subtitles'] = ApiClient.convertToType(data['generated_subtitles'], [LiveStreamGeneratedSubtitleSettings]);
            }
            if (data.hasOwnProperty('latency_mode')) {
                obj['latency_mode'] = ApiClient.convertToType(data['latency_mode'], 'String');
            }
            if (data.hasOwnProperty('low_latency')) {
                obj['low_latency'] = ApiClient.convertToType(data['low_latency'], 'Boolean');
            }
            if (data.hasOwnProperty('max_continuous_duration')) {
                obj['max_continuous_duration'] = ApiClient.convertToType(data['max_continuous_duration'], 'Number');
            }
            if (data.hasOwnProperty('new_asset_settings')) {
                obj['new_asset_settings'] = CreateAssetRequest.constructFromObject(data['new_asset_settings']);
            }
            if (data.hasOwnProperty('passthrough')) {
                obj['passthrough'] = ApiClient.convertToType(data['passthrough'], 'String');
            }
            if (data.hasOwnProperty('playback_policy')) {
                obj['playback_policy'] = ApiClient.convertToType(data['playback_policy'], [PlaybackPolicy]);
            }
            if (data.hasOwnProperty('reconnect_slate_url')) {
                obj['reconnect_slate_url'] = ApiClient.convertToType(data['reconnect_slate_url'], 'String');
            }
            if (data.hasOwnProperty('reconnect_window')) {
                obj['reconnect_window'] = ApiClient.convertToType(data['reconnect_window'], 'Number');
            }
            if (data.hasOwnProperty('reduced_latency')) {
                obj['reduced_latency'] = ApiClient.convertToType(data['reduced_latency'], 'Boolean');
            }
            if (data.hasOwnProperty('simulcast_targets')) {
                obj['simulcast_targets'] = ApiClient.convertToType(data['simulcast_targets'], [CreateSimulcastTargetRequest]);
            }
            if (data.hasOwnProperty('test')) {
                obj['test'] = ApiClient.convertToType(data['test'], 'Boolean');
            }
            if (data.hasOwnProperty('use_slate_for_standard_latency')) {
                obj['use_slate_for_standard_latency'] = ApiClient.convertToType(data['use_slate_for_standard_latency'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateLiveStreamRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateLiveStreamRequest</code>.
     */
    static validateJSON(data) {
        if (data['embedded_subtitles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['embedded_subtitles'])) {
                throw new Error("Expected the field `embedded_subtitles` to be an array in the JSON data but got " + data['embedded_subtitles']);
            }
            // validate the optional field `embedded_subtitles` (array)
            for (const item of data['embedded_subtitles']) {
                LiveStreamEmbeddedSubtitleSettings.validateJSON(item);
            };
        }
        if (data['generated_subtitles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['generated_subtitles'])) {
                throw new Error("Expected the field `generated_subtitles` to be an array in the JSON data but got " + data['generated_subtitles']);
            }
            // validate the optional field `generated_subtitles` (array)
            for (const item of data['generated_subtitles']) {
                LiveStreamGeneratedSubtitleSettings.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['latency_mode'] && !(typeof data['latency_mode'] === 'string' || data['latency_mode'] instanceof String)) {
            throw new Error("Expected the field `latency_mode` to be a primitive type in the JSON string but got " + data['latency_mode']);
        }
        // validate the optional field `new_asset_settings`
        if (data['new_asset_settings']) { // data not null
          CreateAssetRequest.validateJSON(data['new_asset_settings']);
        }
        // ensure the json data is a string
        if (data['passthrough'] && !(typeof data['passthrough'] === 'string' || data['passthrough'] instanceof String)) {
            throw new Error("Expected the field `passthrough` to be a primitive type in the JSON string but got " + data['passthrough']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['playback_policy'])) {
            throw new Error("Expected the field `playback_policy` to be an array in the JSON data but got " + data['playback_policy']);
        }
        // ensure the json data is a string
        if (data['reconnect_slate_url'] && !(typeof data['reconnect_slate_url'] === 'string' || data['reconnect_slate_url'] instanceof String)) {
            throw new Error("Expected the field `reconnect_slate_url` to be a primitive type in the JSON string but got " + data['reconnect_slate_url']);
        }
        if (data['simulcast_targets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['simulcast_targets'])) {
                throw new Error("Expected the field `simulcast_targets` to be an array in the JSON data but got " + data['simulcast_targets']);
            }
            // validate the optional field `simulcast_targets` (array)
            for (const item of data['simulcast_targets']) {
                CreateSimulcastTargetRequest.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Force the live stream to only process the audio track when the value is set to true. Mux drops the video track if broadcasted.
 * @member {Boolean} audio_only
 */
CreateLiveStreamRequest.prototype['audio_only'] = undefined;

/**
 * Describe the embedded closed caption contents of the incoming live stream.
 * @member {Array.<module:model/LiveStreamEmbeddedSubtitleSettings>} embedded_subtitles
 */
CreateLiveStreamRequest.prototype['embedded_subtitles'] = undefined;

/**
 * Configure the incoming live stream to include subtitles created with automatic speech recognition. Each Asset created from a live stream with `generated_subtitles` configured will automatically receive two text tracks. The first of these will have a `text_source` value of `generated_live`, and will be available with `ready` status as soon as the stream is live. The second text track will have a `text_source` value of `generated_live_final` and will contain subtitles with improved accuracy, timing, and formatting. However, `generated_live_final` tracks will not be available in `ready` status until the live stream ends. If an Asset has both `generated_live` and `generated_live_final` tracks that are `ready`, then only the `generated_live_final` track will be included during playback.
 * @member {Array.<module:model/LiveStreamGeneratedSubtitleSettings>} generated_subtitles
 */
CreateLiveStreamRequest.prototype['generated_subtitles'] = undefined;

/**
 * Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this as an alternative to setting low latency or reduced latency flags. The Low Latency value is a beta feature. Read more here: https://mux.com/blog/introducing-low-latency-live-streaming/
 * @member {module:model/CreateLiveStreamRequest.LatencyModeEnum} latency_mode
 */
CreateLiveStreamRequest.prototype['latency_mode'] = undefined;

/**
 * This field is deprecated. Please use `latency_mode` instead. Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Setting this option will enable compatibility with the LL-HLS specification for low-latency streaming. This typically has lower latency than Reduced Latency streams, and cannot be combined with Reduced Latency.
 * @member {Boolean} low_latency
 */
CreateLiveStreamRequest.prototype['low_latency'] = undefined;

/**
 * The time in seconds a live stream may be continuously active before being disconnected. Defaults to 12 hours.
 * @member {Number} max_continuous_duration
 * @default 43200
 */
CreateLiveStreamRequest.prototype['max_continuous_duration'] = 43200;

/**
 * @member {module:model/CreateAssetRequest} new_asset_settings
 */
CreateLiveStreamRequest.prototype['new_asset_settings'] = undefined;

/**
 * @member {String} passthrough
 */
CreateLiveStreamRequest.prototype['passthrough'] = undefined;

/**
 * @member {Array.<module:model/PlaybackPolicy>} playback_policy
 */
CreateLiveStreamRequest.prototype['playback_policy'] = undefined;

/**
 * The URL of the image file that Mux should download and use as slate media during interruptions of the live stream media. This file will be downloaded each time a new recorded asset is created from the live stream. If this is not set, the default slate media will be used.
 * @member {String} reconnect_slate_url
 */
CreateLiveStreamRequest.prototype['reconnect_slate_url'] = undefined;

/**
 * When live streaming software disconnects from Mux, either intentionally or due to a drop in the network, the Reconnect Window is the time in seconds that Mux should wait for the streaming software to reconnect before considering the live stream finished and completing the recorded asset. Defaults to 60 seconds on the API if not specified.  If not specified directly, Standard Latency streams have a Reconnect Window of 60 seconds; Reduced and Low Latency streams have a default of 0 seconds, or no Reconnect Window. For that reason, we suggest specifying a value other than zero for Reduced and Low Latency streams.  Reduced and Low Latency streams with a Reconnect Window greater than zero will insert slate media into the recorded asset while waiting for the streaming software to reconnect or when there are brief interruptions in the live stream media. When using a Reconnect Window setting higher than 60 seconds with a Standard Latency stream, we highly recommend enabling slate with the `use_slate_for_standard_latency` option. 
 * @member {Number} reconnect_window
 * @default 60
 */
CreateLiveStreamRequest.prototype['reconnect_window'] = 60;

/**
 * This field is deprecated. Please use `latency_mode` instead. Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this if you want lower latency for your live stream. Read more here: https://mux.com/blog/reduced-latency-for-mux-live-streaming-now-available/
 * @member {Boolean} reduced_latency
 */
CreateLiveStreamRequest.prototype['reduced_latency'] = undefined;

/**
 * @member {Array.<module:model/CreateSimulcastTargetRequest>} simulcast_targets
 */
CreateLiveStreamRequest.prototype['simulcast_targets'] = undefined;

/**
 * Marks the live stream as a test live stream when the value is set to true. A test live stream can help evaluate the Mux Video APIs without incurring any cost. There is no limit on number of test live streams created. Test live streams are watermarked with the Mux logo and limited to 5 minutes. The test live stream is disabled after the stream is active for 5 mins and the recorded asset also deleted after 24 hours.
 * @member {Boolean} test
 */
CreateLiveStreamRequest.prototype['test'] = undefined;

/**
 * By default, Standard Latency live streams do not have slate media inserted while waiting for live streaming software to reconnect to Mux. Setting this to true enables slate insertion on a Standard Latency stream.
 * @member {Boolean} use_slate_for_standard_latency
 * @default false
 */
CreateLiveStreamRequest.prototype['use_slate_for_standard_latency'] = false;





/**
 * Allowed values for the <code>latency_mode</code> property.
 * @enum {String}
 * @readonly
 */
CreateLiveStreamRequest['LatencyModeEnum'] = {

    /**
     * value: "low"
     * @const
     */
    "low": "low",

    /**
     * value: "reduced"
     * @const
     */
    "reduced": "reduced",

    /**
     * value: "standard"
     * @const
     */
    "standard": "standard"
};



export default CreateLiveStreamRequest;

