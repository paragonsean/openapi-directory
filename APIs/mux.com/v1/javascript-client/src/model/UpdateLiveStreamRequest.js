/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateLiveStreamRequest model module.
 * @module model/UpdateLiveStreamRequest
 * @version v1
 */
class UpdateLiveStreamRequest {
    /**
     * Constructs a new <code>UpdateLiveStreamRequest</code>.
     * @alias module:model/UpdateLiveStreamRequest
     */
    constructor() { 
        
        UpdateLiveStreamRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['max_continuous_duration'] = 43200;
        obj['reconnect_window'] = 60;
        obj['use_slate_for_standard_latency'] = false;
    }

    /**
     * Constructs a <code>UpdateLiveStreamRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateLiveStreamRequest} obj Optional instance to populate.
     * @return {module:model/UpdateLiveStreamRequest} The populated <code>UpdateLiveStreamRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateLiveStreamRequest();

            if (data.hasOwnProperty('latency_mode')) {
                obj['latency_mode'] = ApiClient.convertToType(data['latency_mode'], 'String');
            }
            if (data.hasOwnProperty('max_continuous_duration')) {
                obj['max_continuous_duration'] = ApiClient.convertToType(data['max_continuous_duration'], 'Number');
            }
            if (data.hasOwnProperty('passthrough')) {
                obj['passthrough'] = ApiClient.convertToType(data['passthrough'], 'String');
            }
            if (data.hasOwnProperty('reconnect_slate_url')) {
                obj['reconnect_slate_url'] = ApiClient.convertToType(data['reconnect_slate_url'], 'String');
            }
            if (data.hasOwnProperty('reconnect_window')) {
                obj['reconnect_window'] = ApiClient.convertToType(data['reconnect_window'], 'Number');
            }
            if (data.hasOwnProperty('use_slate_for_standard_latency')) {
                obj['use_slate_for_standard_latency'] = ApiClient.convertToType(data['use_slate_for_standard_latency'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateLiveStreamRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateLiveStreamRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['latency_mode'] && !(typeof data['latency_mode'] === 'string' || data['latency_mode'] instanceof String)) {
            throw new Error("Expected the field `latency_mode` to be a primitive type in the JSON string but got " + data['latency_mode']);
        }
        // ensure the json data is a string
        if (data['passthrough'] && !(typeof data['passthrough'] === 'string' || data['passthrough'] instanceof String)) {
            throw new Error("Expected the field `passthrough` to be a primitive type in the JSON string but got " + data['passthrough']);
        }
        // ensure the json data is a string
        if (data['reconnect_slate_url'] && !(typeof data['reconnect_slate_url'] === 'string' || data['reconnect_slate_url'] instanceof String)) {
            throw new Error("Expected the field `reconnect_slate_url` to be a primitive type in the JSON string but got " + data['reconnect_slate_url']);
        }

        return true;
    }


}



/**
 * Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this as an alternative to setting low latency or reduced latency flags. The Low Latency value is a beta feature. Read more here: https://mux.com/blog/introducing-low-latency-live-streaming/
 * @member {module:model/UpdateLiveStreamRequest.LatencyModeEnum} latency_mode
 */
UpdateLiveStreamRequest.prototype['latency_mode'] = undefined;

/**
 * The time in seconds a live stream may be continuously active before being disconnected. Defaults to 12 hours.
 * @member {Number} max_continuous_duration
 * @default 43200
 */
UpdateLiveStreamRequest.prototype['max_continuous_duration'] = 43200;

/**
 * Arbitrary user-supplied metadata set for the live stream. Max 255 characters. In order to clear this value, the field should be included with an empty-string value.
 * @member {String} passthrough
 */
UpdateLiveStreamRequest.prototype['passthrough'] = undefined;

/**
 * The URL of the image file that Mux should download and use as slate media during interruptions of the live stream media. This file will be downloaded each time a new recorded asset is created from the live stream. Set this to a blank string to clear the value so that the default slate media will be used.
 * @member {String} reconnect_slate_url
 */
UpdateLiveStreamRequest.prototype['reconnect_slate_url'] = undefined;

/**
 * When live streaming software disconnects from Mux, either intentionally or due to a drop in the network, the Reconnect Window is the time in seconds that Mux should wait for the streaming software to reconnect before considering the live stream finished and completing the recorded asset.  If not specified directly, Standard Latency streams have a Reconnect Window of 60 seconds; Reduced and Low Latency streams have a default of 0 seconds, or no Reconnect Window. For that reason, we suggest specifying a value other than zero for Reduced and Low Latency streams.  Reduced and Low Latency streams with a Reconnect Window greater than zero will insert slate media into the recorded asset while waiting for the streaming software to reconnect or when there are brief interruptions in the live stream media. When using a Reconnect Window setting higher than 60 seconds with a Standard Latency stream, we highly recommend enabling slate with the `use_slate_for_standard_latency` option. 
 * @member {Number} reconnect_window
 * @default 60
 */
UpdateLiveStreamRequest.prototype['reconnect_window'] = 60;

/**
 * By default, Standard Latency live streams do not have slate media inserted while waiting for live streaming software to reconnect to Mux. Setting this to true enables slate insertion on a Standard Latency stream.
 * @member {Boolean} use_slate_for_standard_latency
 * @default false
 */
UpdateLiveStreamRequest.prototype['use_slate_for_standard_latency'] = false;





/**
 * Allowed values for the <code>latency_mode</code> property.
 * @enum {String}
 * @readonly
 */
UpdateLiveStreamRequest['LatencyModeEnum'] = {

    /**
     * value: "low"
     * @const
     */
    "low": "low",

    /**
     * value: "reduced"
     * @const
     */
    "reduced": "reduced",

    /**
     * value: "standard"
     * @const
     */
    "standard": "standard"
};



export default UpdateLiveStreamRequest;

