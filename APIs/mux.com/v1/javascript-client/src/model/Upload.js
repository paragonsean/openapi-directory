/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Asset from './Asset';
import UploadError from './UploadError';

/**
 * The Upload model module.
 * @module model/Upload
 * @version v1
 */
class Upload {
    /**
     * Constructs a new <code>Upload</code>.
     * @alias module:model/Upload
     */
    constructor() { 
        
        Upload.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['timeout'] = 3600;
    }

    /**
     * Constructs a <code>Upload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Upload} obj Optional instance to populate.
     * @return {module:model/Upload} The populated <code>Upload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Upload();

            if (data.hasOwnProperty('asset_id')) {
                obj['asset_id'] = ApiClient.convertToType(data['asset_id'], 'String');
            }
            if (data.hasOwnProperty('cors_origin')) {
                obj['cors_origin'] = ApiClient.convertToType(data['cors_origin'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = UploadError.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('new_asset_settings')) {
                obj['new_asset_settings'] = Asset.constructFromObject(data['new_asset_settings']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('test')) {
                obj['test'] = ApiClient.convertToType(data['test'], 'Boolean');
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Upload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Upload</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['asset_id'] && !(typeof data['asset_id'] === 'string' || data['asset_id'] instanceof String)) {
            throw new Error("Expected the field `asset_id` to be a primitive type in the JSON string but got " + data['asset_id']);
        }
        // ensure the json data is a string
        if (data['cors_origin'] && !(typeof data['cors_origin'] === 'string' || data['cors_origin'] instanceof String)) {
            throw new Error("Expected the field `cors_origin` to be a primitive type in the JSON string but got " + data['cors_origin']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          UploadError.validateJSON(data['error']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `new_asset_settings`
        if (data['new_asset_settings']) { // data not null
          Asset.validateJSON(data['new_asset_settings']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * Only set once the upload is in the `asset_created` state.
 * @member {String} asset_id
 */
Upload.prototype['asset_id'] = undefined;

/**
 * If the upload URL will be used in a browser, you must specify the origin in order for the signed URL to have the correct CORS headers.
 * @member {String} cors_origin
 */
Upload.prototype['cors_origin'] = undefined;

/**
 * @member {module:model/UploadError} error
 */
Upload.prototype['error'] = undefined;

/**
 * Unique identifier for the Direct Upload.
 * @member {String} id
 */
Upload.prototype['id'] = undefined;

/**
 * @member {module:model/Asset} new_asset_settings
 */
Upload.prototype['new_asset_settings'] = undefined;

/**
 * @member {module:model/Upload.StatusEnum} status
 */
Upload.prototype['status'] = undefined;

/**
 * Indicates if this is a test Direct Upload, in which case the Asset that gets created will be a `test` Asset.
 * @member {Boolean} test
 */
Upload.prototype['test'] = undefined;

/**
 * Max time in seconds for the signed upload URL to be valid. If a successful upload has not occurred before the timeout limit, the direct upload is marked `timed_out`
 * @member {Number} timeout
 * @default 3600
 */
Upload.prototype['timeout'] = 3600;

/**
 * The URL to upload the associated source media to.
 * @member {String} url
 */
Upload.prototype['url'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Upload['StatusEnum'] = {

    /**
     * value: "waiting"
     * @const
     */
    "waiting": "waiting",

    /**
     * value: "asset_created"
     * @const
     */
    "asset_created": "asset_created",

    /**
     * value: "errored"
     * @const
     */
    "errored": "errored",

    /**
     * value: "cancelled"
     * @const
     */
    "cancelled": "cancelled",

    /**
     * value: "timed_out"
     * @const
     */
    "timed_out": "timed_out"
};



export default Upload;

