/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MonitoringBreakdownValue model module.
 * @module model/MonitoringBreakdownValue
 * @version v1
 */
class MonitoringBreakdownValue {
    /**
     * Constructs a new <code>MonitoringBreakdownValue</code>.
     * @alias module:model/MonitoringBreakdownValue
     */
    constructor() { 
        
        MonitoringBreakdownValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MonitoringBreakdownValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MonitoringBreakdownValue} obj Optional instance to populate.
     * @return {module:model/MonitoringBreakdownValue} The populated <code>MonitoringBreakdownValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MonitoringBreakdownValue();

            if (data.hasOwnProperty('concurrent_viewers')) {
                obj['concurrent_viewers'] = ApiClient.convertToType(data['concurrent_viewers'], 'Number');
            }
            if (data.hasOwnProperty('display_value')) {
                obj['display_value'] = ApiClient.convertToType(data['display_value'], 'String');
            }
            if (data.hasOwnProperty('metric_value')) {
                obj['metric_value'] = ApiClient.convertToType(data['metric_value'], 'Number');
            }
            if (data.hasOwnProperty('negative_impact')) {
                obj['negative_impact'] = ApiClient.convertToType(data['negative_impact'], 'Number');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MonitoringBreakdownValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MonitoringBreakdownValue</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['display_value'] && !(typeof data['display_value'] === 'string' || data['display_value'] instanceof String)) {
            throw new Error("Expected the field `display_value` to be a primitive type in the JSON string but got " + data['display_value']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * @member {Number} concurrent_viewers
 */
MonitoringBreakdownValue.prototype['concurrent_viewers'] = undefined;

/**
 * @member {String} display_value
 */
MonitoringBreakdownValue.prototype['display_value'] = undefined;

/**
 * @member {Number} metric_value
 */
MonitoringBreakdownValue.prototype['metric_value'] = undefined;

/**
 * @member {Number} negative_impact
 */
MonitoringBreakdownValue.prototype['negative_impact'] = undefined;

/**
 * @member {String} value
 */
MonitoringBreakdownValue.prototype['value'] = undefined;






export default MonitoringBreakdownValue;

