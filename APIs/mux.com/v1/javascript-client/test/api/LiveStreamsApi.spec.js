/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MuxApi);
  }
}(this, function(expect, MuxApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MuxApi.LiveStreamsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LiveStreamsApi', function() {
    describe('createLiveStream', function() {
      it('should call createLiveStream successfully', function(done) {
        //uncomment below and update the code to test createLiveStream
        //instance.createLiveStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLiveStreamPlaybackId', function() {
      it('should call createLiveStreamPlaybackId successfully', function(done) {
        //uncomment below and update the code to test createLiveStreamPlaybackId
        //instance.createLiveStreamPlaybackId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLiveStreamSimulcastTarget', function() {
      it('should call createLiveStreamSimulcastTarget successfully', function(done) {
        //uncomment below and update the code to test createLiveStreamSimulcastTarget
        //instance.createLiveStreamSimulcastTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLiveStream', function() {
      it('should call deleteLiveStream successfully', function(done) {
        //uncomment below and update the code to test deleteLiveStream
        //instance.deleteLiveStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLiveStreamPlaybackId', function() {
      it('should call deleteLiveStreamPlaybackId successfully', function(done) {
        //uncomment below and update the code to test deleteLiveStreamPlaybackId
        //instance.deleteLiveStreamPlaybackId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLiveStreamSimulcastTarget', function() {
      it('should call deleteLiveStreamSimulcastTarget successfully', function(done) {
        //uncomment below and update the code to test deleteLiveStreamSimulcastTarget
        //instance.deleteLiveStreamSimulcastTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disableLiveStream', function() {
      it('should call disableLiveStream successfully', function(done) {
        //uncomment below and update the code to test disableLiveStream
        //instance.disableLiveStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enableLiveStream', function() {
      it('should call enableLiveStream successfully', function(done) {
        //uncomment below and update the code to test enableLiveStream
        //instance.enableLiveStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLiveStream', function() {
      it('should call getLiveStream successfully', function(done) {
        //uncomment below and update the code to test getLiveStream
        //instance.getLiveStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLiveStreamPlaybackId', function() {
      it('should call getLiveStreamPlaybackId successfully', function(done) {
        //uncomment below and update the code to test getLiveStreamPlaybackId
        //instance.getLiveStreamPlaybackId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLiveStreamSimulcastTarget', function() {
      it('should call getLiveStreamSimulcastTarget successfully', function(done) {
        //uncomment below and update the code to test getLiveStreamSimulcastTarget
        //instance.getLiveStreamSimulcastTarget(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLiveStreams', function() {
      it('should call listLiveStreams successfully', function(done) {
        //uncomment below and update the code to test listLiveStreams
        //instance.listLiveStreams(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetStreamKey', function() {
      it('should call resetStreamKey successfully', function(done) {
        //uncomment below and update the code to test resetStreamKey
        //instance.resetStreamKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('signalLiveStreamComplete', function() {
      it('should call signalLiveStreamComplete successfully', function(done) {
        //uncomment below and update the code to test signalLiveStreamComplete
        //instance.signalLiveStreamComplete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLiveStream', function() {
      it('should call updateLiveStream successfully', function(done) {
        //uncomment below and update the code to test updateLiveStream
        //instance.updateLiveStream(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLiveStreamEmbeddedSubtitles', function() {
      it('should call updateLiveStreamEmbeddedSubtitles successfully', function(done) {
        //uncomment below and update the code to test updateLiveStreamEmbeddedSubtitles
        //instance.updateLiveStreamEmbeddedSubtitles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLiveStreamGeneratedSubtitles', function() {
      it('should call updateLiveStreamGeneratedSubtitles successfully', function(done) {
        //uncomment below and update the code to test updateLiveStreamGeneratedSubtitles
        //instance.updateLiveStreamGeneratedSubtitles(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
