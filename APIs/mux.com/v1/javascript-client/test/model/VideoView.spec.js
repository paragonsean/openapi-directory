/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MuxApi);
  }
}(this, function(expect, MuxApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MuxApi.VideoView();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VideoView', function() {
    it('should create an instance of VideoView', function() {
      // uncomment below and update the code to test VideoView
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be.a(MuxApi.VideoView);
    });

    it('should have the property asn (base name: "asn")', function() {
      // uncomment below and update the code to test the property asn
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property asnName (base name: "asn_name")', function() {
      // uncomment below and update the code to test the property asnName
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property assetId (base name: "asset_id")', function() {
      // uncomment below and update the code to test the property assetId
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property bufferingCount (base name: "buffering_count")', function() {
      // uncomment below and update the code to test the property bufferingCount
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property bufferingDuration (base name: "buffering_duration")', function() {
      // uncomment below and update the code to test the property bufferingDuration
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property bufferingRate (base name: "buffering_rate")', function() {
      // uncomment below and update the code to test the property bufferingRate
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property cdn (base name: "cdn")', function() {
      // uncomment below and update the code to test the property cdn
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property continentCode (base name: "continent_code")', function() {
      // uncomment below and update the code to test the property continentCode
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property countryCode (base name: "country_code")', function() {
      // uncomment below and update the code to test the property countryCode
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property countryName (base name: "country_name")', function() {
      // uncomment below and update the code to test the property countryName
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property custom1 (base name: "custom_1")', function() {
      // uncomment below and update the code to test the property custom1
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property custom10 (base name: "custom_10")', function() {
      // uncomment below and update the code to test the property custom10
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property custom2 (base name: "custom_2")', function() {
      // uncomment below and update the code to test the property custom2
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property custom3 (base name: "custom_3")', function() {
      // uncomment below and update the code to test the property custom3
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property custom4 (base name: "custom_4")', function() {
      // uncomment below and update the code to test the property custom4
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property custom5 (base name: "custom_5")', function() {
      // uncomment below and update the code to test the property custom5
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property custom6 (base name: "custom_6")', function() {
      // uncomment below and update the code to test the property custom6
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property custom7 (base name: "custom_7")', function() {
      // uncomment below and update the code to test the property custom7
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property custom8 (base name: "custom_8")', function() {
      // uncomment below and update the code to test the property custom8
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property custom9 (base name: "custom_9")', function() {
      // uncomment below and update the code to test the property custom9
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property environmentId (base name: "environment_id")', function() {
      // uncomment below and update the code to test the property environmentId
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property errorTypeId (base name: "error_type_id")', function() {
      // uncomment below and update the code to test the property errorTypeId
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property events (base name: "events")', function() {
      // uncomment below and update the code to test the property events
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property exitBeforeVideoStart (base name: "exit_before_video_start")', function() {
      // uncomment below and update the code to test the property exitBeforeVideoStart
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property experimentName (base name: "experiment_name")', function() {
      // uncomment below and update the code to test the property experimentName
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property insertedAt (base name: "inserted_at")', function() {
      // uncomment below and update the code to test the property insertedAt
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property isp (base name: "isp")', function() {
      // uncomment below and update the code to test the property isp
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property latitude (base name: "latitude")', function() {
      // uncomment below and update the code to test the property latitude
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property liveStreamId (base name: "live_stream_id")', function() {
      // uncomment below and update the code to test the property liveStreamId
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property liveStreamLatency (base name: "live_stream_latency")', function() {
      // uncomment below and update the code to test the property liveStreamLatency
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property longitude (base name: "longitude")', function() {
      // uncomment below and update the code to test the property longitude
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property metro (base name: "metro")', function() {
      // uncomment below and update the code to test the property metro
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property muxApiVersion (base name: "mux_api_version")', function() {
      // uncomment below and update the code to test the property muxApiVersion
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property muxEmbed (base name: "mux_embed")', function() {
      // uncomment below and update the code to test the property muxEmbed
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property muxEmbedVersion (base name: "mux_embed_version")', function() {
      // uncomment below and update the code to test the property muxEmbedVersion
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property muxViewerId (base name: "mux_viewer_id")', function() {
      // uncomment below and update the code to test the property muxViewerId
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property pageLoadTime (base name: "page_load_time")', function() {
      // uncomment below and update the code to test the property pageLoadTime
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property pageType (base name: "page_type")', function() {
      // uncomment below and update the code to test the property pageType
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property pageUrl (base name: "page_url")', function() {
      // uncomment below and update the code to test the property pageUrl
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property platformDescription (base name: "platform_description")', function() {
      // uncomment below and update the code to test the property platformDescription
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property platformSummary (base name: "platform_summary")', function() {
      // uncomment below and update the code to test the property platformSummary
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playbackId (base name: "playback_id")', function() {
      // uncomment below and update the code to test the property playbackId
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playbackScore (base name: "playback_score")', function() {
      // uncomment below and update the code to test the property playbackScore
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerAutoplay (base name: "player_autoplay")', function() {
      // uncomment below and update the code to test the property playerAutoplay
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerErrorCode (base name: "player_error_code")', function() {
      // uncomment below and update the code to test the property playerErrorCode
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerErrorContext (base name: "player_error_context")', function() {
      // uncomment below and update the code to test the property playerErrorContext
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerErrorMessage (base name: "player_error_message")', function() {
      // uncomment below and update the code to test the property playerErrorMessage
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerHeight (base name: "player_height")', function() {
      // uncomment below and update the code to test the property playerHeight
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerInstanceId (base name: "player_instance_id")', function() {
      // uncomment below and update the code to test the property playerInstanceId
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerLanguage (base name: "player_language")', function() {
      // uncomment below and update the code to test the property playerLanguage
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerLoadTime (base name: "player_load_time")', function() {
      // uncomment below and update the code to test the property playerLoadTime
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerMuxPluginName (base name: "player_mux_plugin_name")', function() {
      // uncomment below and update the code to test the property playerMuxPluginName
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerMuxPluginVersion (base name: "player_mux_plugin_version")', function() {
      // uncomment below and update the code to test the property playerMuxPluginVersion
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerName (base name: "player_name")', function() {
      // uncomment below and update the code to test the property playerName
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerPoster (base name: "player_poster")', function() {
      // uncomment below and update the code to test the property playerPoster
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerPreload (base name: "player_preload")', function() {
      // uncomment below and update the code to test the property playerPreload
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerRemotePlayed (base name: "player_remote_played")', function() {
      // uncomment below and update the code to test the property playerRemotePlayed
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerSoftware (base name: "player_software")', function() {
      // uncomment below and update the code to test the property playerSoftware
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerSoftwareVersion (base name: "player_software_version")', function() {
      // uncomment below and update the code to test the property playerSoftwareVersion
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerSourceDomain (base name: "player_source_domain")', function() {
      // uncomment below and update the code to test the property playerSourceDomain
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerSourceDuration (base name: "player_source_duration")', function() {
      // uncomment below and update the code to test the property playerSourceDuration
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerSourceHeight (base name: "player_source_height")', function() {
      // uncomment below and update the code to test the property playerSourceHeight
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerSourceHostName (base name: "player_source_host_name")', function() {
      // uncomment below and update the code to test the property playerSourceHostName
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerSourceStreamType (base name: "player_source_stream_type")', function() {
      // uncomment below and update the code to test the property playerSourceStreamType
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerSourceType (base name: "player_source_type")', function() {
      // uncomment below and update the code to test the property playerSourceType
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerSourceUrl (base name: "player_source_url")', function() {
      // uncomment below and update the code to test the property playerSourceUrl
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerSourceWidth (base name: "player_source_width")', function() {
      // uncomment below and update the code to test the property playerSourceWidth
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerStartupTime (base name: "player_startup_time")', function() {
      // uncomment below and update the code to test the property playerStartupTime
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerVersion (base name: "player_version")', function() {
      // uncomment below and update the code to test the property playerVersion
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerViewCount (base name: "player_view_count")', function() {
      // uncomment below and update the code to test the property playerViewCount
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property playerWidth (base name: "player_width")', function() {
      // uncomment below and update the code to test the property playerWidth
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property prerollAdAssetHostname (base name: "preroll_ad_asset_hostname")', function() {
      // uncomment below and update the code to test the property prerollAdAssetHostname
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property prerollAdTagHostname (base name: "preroll_ad_tag_hostname")', function() {
      // uncomment below and update the code to test the property prerollAdTagHostname
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property prerollPlayed (base name: "preroll_played")', function() {
      // uncomment below and update the code to test the property prerollPlayed
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property prerollRequested (base name: "preroll_requested")', function() {
      // uncomment below and update the code to test the property prerollRequested
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property propertyId (base name: "property_id")', function() {
      // uncomment below and update the code to test the property propertyId
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property qualityScore (base name: "quality_score")', function() {
      // uncomment below and update the code to test the property qualityScore
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property rebufferPercentage (base name: "rebuffer_percentage")', function() {
      // uncomment below and update the code to test the property rebufferPercentage
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property rebufferingScore (base name: "rebuffering_score")', function() {
      // uncomment below and update the code to test the property rebufferingScore
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property region (base name: "region")', function() {
      // uncomment below and update the code to test the property region
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property requestsForFirstPreroll (base name: "requests_for_first_preroll")', function() {
      // uncomment below and update the code to test the property requestsForFirstPreroll
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property sessionId (base name: "session_id")', function() {
      // uncomment below and update the code to test the property sessionId
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property shortTime (base name: "short_time")', function() {
      // uncomment below and update the code to test the property shortTime
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property startupScore (base name: "startup_score")', function() {
      // uncomment below and update the code to test the property startupScore
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property subPropertyId (base name: "sub_property_id")', function() {
      // uncomment below and update the code to test the property subPropertyId
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property timeToFirstFrame (base name: "time_to_first_frame")', function() {
      // uncomment below and update the code to test the property timeToFirstFrame
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property usedFullscreen (base name: "used_fullscreen")', function() {
      // uncomment below and update the code to test the property usedFullscreen
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property videoContentType (base name: "video_content_type")', function() {
      // uncomment below and update the code to test the property videoContentType
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property videoDuration (base name: "video_duration")', function() {
      // uncomment below and update the code to test the property videoDuration
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property videoEncodingVariant (base name: "video_encoding_variant")', function() {
      // uncomment below and update the code to test the property videoEncodingVariant
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property videoId (base name: "video_id")', function() {
      // uncomment below and update the code to test the property videoId
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property videoLanguage (base name: "video_language")', function() {
      // uncomment below and update the code to test the property videoLanguage
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property videoProducer (base name: "video_producer")', function() {
      // uncomment below and update the code to test the property videoProducer
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property videoSeries (base name: "video_series")', function() {
      // uncomment below and update the code to test the property videoSeries
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property videoStartupFailure (base name: "video_startup_failure")', function() {
      // uncomment below and update the code to test the property videoStartupFailure
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property videoStartupPrerollLoadTime (base name: "video_startup_preroll_load_time")', function() {
      // uncomment below and update the code to test the property videoStartupPrerollLoadTime
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property videoStartupPrerollRequestTime (base name: "video_startup_preroll_request_time")', function() {
      // uncomment below and update the code to test the property videoStartupPrerollRequestTime
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property videoStreamType (base name: "video_stream_type")', function() {
      // uncomment below and update the code to test the property videoStreamType
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property videoTitle (base name: "video_title")', function() {
      // uncomment below and update the code to test the property videoTitle
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property videoVariantId (base name: "video_variant_id")', function() {
      // uncomment below and update the code to test the property videoVariantId
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property videoVariantName (base name: "video_variant_name")', function() {
      // uncomment below and update the code to test the property videoVariantName
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewAverageRequestLatency (base name: "view_average_request_latency")', function() {
      // uncomment below and update the code to test the property viewAverageRequestLatency
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewAverageRequestThroughput (base name: "view_average_request_throughput")', function() {
      // uncomment below and update the code to test the property viewAverageRequestThroughput
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewDrmType (base name: "view_drm_type")', function() {
      // uncomment below and update the code to test the property viewDrmType
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewDroppedFrameCount (base name: "view_dropped_frame_count")', function() {
      // uncomment below and update the code to test the property viewDroppedFrameCount
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewEnd (base name: "view_end")', function() {
      // uncomment below and update the code to test the property viewEnd
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewErrorId (base name: "view_error_id")', function() {
      // uncomment below and update the code to test the property viewErrorId
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewHasAd (base name: "view_has_ad")', function() {
      // uncomment below and update the code to test the property viewHasAd
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewId (base name: "view_id")', function() {
      // uncomment below and update the code to test the property viewId
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewMaxDownscalePercentage (base name: "view_max_downscale_percentage")', function() {
      // uncomment below and update the code to test the property viewMaxDownscalePercentage
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewMaxPlayheadPosition (base name: "view_max_playhead_position")', function() {
      // uncomment below and update the code to test the property viewMaxPlayheadPosition
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewMaxRequestLatency (base name: "view_max_request_latency")', function() {
      // uncomment below and update the code to test the property viewMaxRequestLatency
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewMaxUpscalePercentage (base name: "view_max_upscale_percentage")', function() {
      // uncomment below and update the code to test the property viewMaxUpscalePercentage
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewPlayingTime (base name: "view_playing_time")', function() {
      // uncomment below and update the code to test the property viewPlayingTime
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewSeekCount (base name: "view_seek_count")', function() {
      // uncomment below and update the code to test the property viewSeekCount
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewSeekDuration (base name: "view_seek_duration")', function() {
      // uncomment below and update the code to test the property viewSeekDuration
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewSessionId (base name: "view_session_id")', function() {
      // uncomment below and update the code to test the property viewSessionId
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewStart (base name: "view_start")', function() {
      // uncomment below and update the code to test the property viewStart
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewTotalContentPlaybackTime (base name: "view_total_content_playback_time")', function() {
      // uncomment below and update the code to test the property viewTotalContentPlaybackTime
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewTotalDownscaling (base name: "view_total_downscaling")', function() {
      // uncomment below and update the code to test the property viewTotalDownscaling
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewTotalUpscaling (base name: "view_total_upscaling")', function() {
      // uncomment below and update the code to test the property viewTotalUpscaling
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewerApplicationEngine (base name: "viewer_application_engine")', function() {
      // uncomment below and update the code to test the property viewerApplicationEngine
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewerApplicationName (base name: "viewer_application_name")', function() {
      // uncomment below and update the code to test the property viewerApplicationName
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewerApplicationVersion (base name: "viewer_application_version")', function() {
      // uncomment below and update the code to test the property viewerApplicationVersion
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewerConnectionType (base name: "viewer_connection_type")', function() {
      // uncomment below and update the code to test the property viewerConnectionType
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewerDeviceCategory (base name: "viewer_device_category")', function() {
      // uncomment below and update the code to test the property viewerDeviceCategory
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewerDeviceManufacturer (base name: "viewer_device_manufacturer")', function() {
      // uncomment below and update the code to test the property viewerDeviceManufacturer
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewerDeviceModel (base name: "viewer_device_model")', function() {
      // uncomment below and update the code to test the property viewerDeviceModel
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewerDeviceName (base name: "viewer_device_name")', function() {
      // uncomment below and update the code to test the property viewerDeviceName
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewerExperienceScore (base name: "viewer_experience_score")', function() {
      // uncomment below and update the code to test the property viewerExperienceScore
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewerOsArchitecture (base name: "viewer_os_architecture")', function() {
      // uncomment below and update the code to test the property viewerOsArchitecture
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewerOsFamily (base name: "viewer_os_family")', function() {
      // uncomment below and update the code to test the property viewerOsFamily
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewerOsVersion (base name: "viewer_os_version")', function() {
      // uncomment below and update the code to test the property viewerOsVersion
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewerUserAgent (base name: "viewer_user_agent")', function() {
      // uncomment below and update the code to test the property viewerUserAgent
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property viewerUserId (base name: "viewer_user_id")', function() {
      // uncomment below and update the code to test the property viewerUserId
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property watchTime (base name: "watch_time")', function() {
      // uncomment below and update the code to test the property watchTime
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property watched (base name: "watched")', function() {
      // uncomment below and update the code to test the property watched
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

    it('should have the property weightedAverageBitrate (base name: "weighted_average_bitrate")', function() {
      // uncomment below and update the code to test the property weightedAverageBitrate
      //var instance = new MuxApi.VideoView();
      //expect(instance).to.be();
    });

  });

}));
