/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateUploadRequest;
import org.openapitools.client.model.ListUploadsResponse;
import org.openapitools.client.model.UploadResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DirectUploadsApi
 */
@Disabled
public class DirectUploadsApiTest {

    private final DirectUploadsApi api = new DirectUploadsApi();

    /**
     * Cancel a direct upload
     *
     * Cancels a direct upload and marks it as cancelled. If a pending upload finishes after this request, no asset will be created. This request will only succeed if the upload is still in the &#x60;waiting&#x60; state. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelDirectUploadTest() throws ApiException {
        String UPLOAD_ID = null;
        UploadResponse response = api.cancelDirectUpload(UPLOAD_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a new direct upload URL
     *
     * Creates a new direct upload, through which video content can be uploaded for ingest to Mux.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDirectUploadTest() throws ApiException {
        CreateUploadRequest createUploadRequest = null;
        UploadResponse response = api.createDirectUpload(createUploadRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a single direct upload&#39;s info
     *
     * Fetches information about a single direct upload in the current environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDirectUploadTest() throws ApiException {
        String UPLOAD_ID = null;
        UploadResponse response = api.getDirectUpload(UPLOAD_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * List direct uploads
     *
     * Lists direct uploads in the current environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDirectUploadsTest() throws ApiException {
        Integer limit = null;
        Integer page = null;
        ListUploadsResponse response = api.listDirectUploads()
                .limit(limit)
                .page(page)
                .execute();
        // TODO: test validations
    }

}
