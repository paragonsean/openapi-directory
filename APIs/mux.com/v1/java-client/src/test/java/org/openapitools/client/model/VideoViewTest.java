/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VideoViewEvent;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for VideoView
 */
public class VideoViewTest {
    private final VideoView model = new VideoView();

    /**
     * Model tests for VideoView
     */
    @Test
    public void testVideoView() {
        // TODO: test VideoView
    }

    /**
     * Test the property 'asn'
     */
    @Test
    public void asnTest() {
        // TODO: test asn
    }

    /**
     * Test the property 'asnName'
     */
    @Test
    public void asnNameTest() {
        // TODO: test asnName
    }

    /**
     * Test the property 'assetId'
     */
    @Test
    public void assetIdTest() {
        // TODO: test assetId
    }

    /**
     * Test the property 'bufferingCount'
     */
    @Test
    public void bufferingCountTest() {
        // TODO: test bufferingCount
    }

    /**
     * Test the property 'bufferingDuration'
     */
    @Test
    public void bufferingDurationTest() {
        // TODO: test bufferingDuration
    }

    /**
     * Test the property 'bufferingRate'
     */
    @Test
    public void bufferingRateTest() {
        // TODO: test bufferingRate
    }

    /**
     * Test the property 'cdn'
     */
    @Test
    public void cdnTest() {
        // TODO: test cdn
    }

    /**
     * Test the property 'city'
     */
    @Test
    public void cityTest() {
        // TODO: test city
    }

    /**
     * Test the property 'continentCode'
     */
    @Test
    public void continentCodeTest() {
        // TODO: test continentCode
    }

    /**
     * Test the property 'countryCode'
     */
    @Test
    public void countryCodeTest() {
        // TODO: test countryCode
    }

    /**
     * Test the property 'countryName'
     */
    @Test
    public void countryNameTest() {
        // TODO: test countryName
    }

    /**
     * Test the property 'custom1'
     */
    @Test
    public void custom1Test() {
        // TODO: test custom1
    }

    /**
     * Test the property 'custom10'
     */
    @Test
    public void custom10Test() {
        // TODO: test custom10
    }

    /**
     * Test the property 'custom2'
     */
    @Test
    public void custom2Test() {
        // TODO: test custom2
    }

    /**
     * Test the property 'custom3'
     */
    @Test
    public void custom3Test() {
        // TODO: test custom3
    }

    /**
     * Test the property 'custom4'
     */
    @Test
    public void custom4Test() {
        // TODO: test custom4
    }

    /**
     * Test the property 'custom5'
     */
    @Test
    public void custom5Test() {
        // TODO: test custom5
    }

    /**
     * Test the property 'custom6'
     */
    @Test
    public void custom6Test() {
        // TODO: test custom6
    }

    /**
     * Test the property 'custom7'
     */
    @Test
    public void custom7Test() {
        // TODO: test custom7
    }

    /**
     * Test the property 'custom8'
     */
    @Test
    public void custom8Test() {
        // TODO: test custom8
    }

    /**
     * Test the property 'custom9'
     */
    @Test
    public void custom9Test() {
        // TODO: test custom9
    }

    /**
     * Test the property 'environmentId'
     */
    @Test
    public void environmentIdTest() {
        // TODO: test environmentId
    }

    /**
     * Test the property 'errorTypeId'
     */
    @Test
    public void errorTypeIdTest() {
        // TODO: test errorTypeId
    }

    /**
     * Test the property 'events'
     */
    @Test
    public void eventsTest() {
        // TODO: test events
    }

    /**
     * Test the property 'exitBeforeVideoStart'
     */
    @Test
    public void exitBeforeVideoStartTest() {
        // TODO: test exitBeforeVideoStart
    }

    /**
     * Test the property 'experimentName'
     */
    @Test
    public void experimentNameTest() {
        // TODO: test experimentName
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'insertedAt'
     */
    @Test
    public void insertedAtTest() {
        // TODO: test insertedAt
    }

    /**
     * Test the property 'isp'
     */
    @Test
    public void ispTest() {
        // TODO: test isp
    }

    /**
     * Test the property 'latitude'
     */
    @Test
    public void latitudeTest() {
        // TODO: test latitude
    }

    /**
     * Test the property 'liveStreamId'
     */
    @Test
    public void liveStreamIdTest() {
        // TODO: test liveStreamId
    }

    /**
     * Test the property 'liveStreamLatency'
     */
    @Test
    public void liveStreamLatencyTest() {
        // TODO: test liveStreamLatency
    }

    /**
     * Test the property 'longitude'
     */
    @Test
    public void longitudeTest() {
        // TODO: test longitude
    }

    /**
     * Test the property 'metro'
     */
    @Test
    public void metroTest() {
        // TODO: test metro
    }

    /**
     * Test the property 'muxApiVersion'
     */
    @Test
    public void muxApiVersionTest() {
        // TODO: test muxApiVersion
    }

    /**
     * Test the property 'muxEmbed'
     */
    @Test
    public void muxEmbedTest() {
        // TODO: test muxEmbed
    }

    /**
     * Test the property 'muxEmbedVersion'
     */
    @Test
    public void muxEmbedVersionTest() {
        // TODO: test muxEmbedVersion
    }

    /**
     * Test the property 'muxViewerId'
     */
    @Test
    public void muxViewerIdTest() {
        // TODO: test muxViewerId
    }

    /**
     * Test the property 'pageLoadTime'
     */
    @Test
    public void pageLoadTimeTest() {
        // TODO: test pageLoadTime
    }

    /**
     * Test the property 'pageType'
     */
    @Test
    public void pageTypeTest() {
        // TODO: test pageType
    }

    /**
     * Test the property 'pageUrl'
     */
    @Test
    public void pageUrlTest() {
        // TODO: test pageUrl
    }

    /**
     * Test the property 'platformDescription'
     */
    @Test
    public void platformDescriptionTest() {
        // TODO: test platformDescription
    }

    /**
     * Test the property 'platformSummary'
     */
    @Test
    public void platformSummaryTest() {
        // TODO: test platformSummary
    }

    /**
     * Test the property 'playbackId'
     */
    @Test
    public void playbackIdTest() {
        // TODO: test playbackId
    }

    /**
     * Test the property 'playbackScore'
     */
    @Test
    public void playbackScoreTest() {
        // TODO: test playbackScore
    }

    /**
     * Test the property 'playerAutoplay'
     */
    @Test
    public void playerAutoplayTest() {
        // TODO: test playerAutoplay
    }

    /**
     * Test the property 'playerErrorCode'
     */
    @Test
    public void playerErrorCodeTest() {
        // TODO: test playerErrorCode
    }

    /**
     * Test the property 'playerErrorContext'
     */
    @Test
    public void playerErrorContextTest() {
        // TODO: test playerErrorContext
    }

    /**
     * Test the property 'playerErrorMessage'
     */
    @Test
    public void playerErrorMessageTest() {
        // TODO: test playerErrorMessage
    }

    /**
     * Test the property 'playerHeight'
     */
    @Test
    public void playerHeightTest() {
        // TODO: test playerHeight
    }

    /**
     * Test the property 'playerInstanceId'
     */
    @Test
    public void playerInstanceIdTest() {
        // TODO: test playerInstanceId
    }

    /**
     * Test the property 'playerLanguage'
     */
    @Test
    public void playerLanguageTest() {
        // TODO: test playerLanguage
    }

    /**
     * Test the property 'playerLoadTime'
     */
    @Test
    public void playerLoadTimeTest() {
        // TODO: test playerLoadTime
    }

    /**
     * Test the property 'playerMuxPluginName'
     */
    @Test
    public void playerMuxPluginNameTest() {
        // TODO: test playerMuxPluginName
    }

    /**
     * Test the property 'playerMuxPluginVersion'
     */
    @Test
    public void playerMuxPluginVersionTest() {
        // TODO: test playerMuxPluginVersion
    }

    /**
     * Test the property 'playerName'
     */
    @Test
    public void playerNameTest() {
        // TODO: test playerName
    }

    /**
     * Test the property 'playerPoster'
     */
    @Test
    public void playerPosterTest() {
        // TODO: test playerPoster
    }

    /**
     * Test the property 'playerPreload'
     */
    @Test
    public void playerPreloadTest() {
        // TODO: test playerPreload
    }

    /**
     * Test the property 'playerRemotePlayed'
     */
    @Test
    public void playerRemotePlayedTest() {
        // TODO: test playerRemotePlayed
    }

    /**
     * Test the property 'playerSoftware'
     */
    @Test
    public void playerSoftwareTest() {
        // TODO: test playerSoftware
    }

    /**
     * Test the property 'playerSoftwareVersion'
     */
    @Test
    public void playerSoftwareVersionTest() {
        // TODO: test playerSoftwareVersion
    }

    /**
     * Test the property 'playerSourceDomain'
     */
    @Test
    public void playerSourceDomainTest() {
        // TODO: test playerSourceDomain
    }

    /**
     * Test the property 'playerSourceDuration'
     */
    @Test
    public void playerSourceDurationTest() {
        // TODO: test playerSourceDuration
    }

    /**
     * Test the property 'playerSourceHeight'
     */
    @Test
    public void playerSourceHeightTest() {
        // TODO: test playerSourceHeight
    }

    /**
     * Test the property 'playerSourceHostName'
     */
    @Test
    public void playerSourceHostNameTest() {
        // TODO: test playerSourceHostName
    }

    /**
     * Test the property 'playerSourceStreamType'
     */
    @Test
    public void playerSourceStreamTypeTest() {
        // TODO: test playerSourceStreamType
    }

    /**
     * Test the property 'playerSourceType'
     */
    @Test
    public void playerSourceTypeTest() {
        // TODO: test playerSourceType
    }

    /**
     * Test the property 'playerSourceUrl'
     */
    @Test
    public void playerSourceUrlTest() {
        // TODO: test playerSourceUrl
    }

    /**
     * Test the property 'playerSourceWidth'
     */
    @Test
    public void playerSourceWidthTest() {
        // TODO: test playerSourceWidth
    }

    /**
     * Test the property 'playerStartupTime'
     */
    @Test
    public void playerStartupTimeTest() {
        // TODO: test playerStartupTime
    }

    /**
     * Test the property 'playerVersion'
     */
    @Test
    public void playerVersionTest() {
        // TODO: test playerVersion
    }

    /**
     * Test the property 'playerViewCount'
     */
    @Test
    public void playerViewCountTest() {
        // TODO: test playerViewCount
    }

    /**
     * Test the property 'playerWidth'
     */
    @Test
    public void playerWidthTest() {
        // TODO: test playerWidth
    }

    /**
     * Test the property 'prerollAdAssetHostname'
     */
    @Test
    public void prerollAdAssetHostnameTest() {
        // TODO: test prerollAdAssetHostname
    }

    /**
     * Test the property 'prerollAdTagHostname'
     */
    @Test
    public void prerollAdTagHostnameTest() {
        // TODO: test prerollAdTagHostname
    }

    /**
     * Test the property 'prerollPlayed'
     */
    @Test
    public void prerollPlayedTest() {
        // TODO: test prerollPlayed
    }

    /**
     * Test the property 'prerollRequested'
     */
    @Test
    public void prerollRequestedTest() {
        // TODO: test prerollRequested
    }

    /**
     * Test the property 'propertyId'
     */
    @Test
    public void propertyIdTest() {
        // TODO: test propertyId
    }

    /**
     * Test the property 'qualityScore'
     */
    @Test
    public void qualityScoreTest() {
        // TODO: test qualityScore
    }

    /**
     * Test the property 'rebufferPercentage'
     */
    @Test
    public void rebufferPercentageTest() {
        // TODO: test rebufferPercentage
    }

    /**
     * Test the property 'rebufferingScore'
     */
    @Test
    public void rebufferingScoreTest() {
        // TODO: test rebufferingScore
    }

    /**
     * Test the property 'region'
     */
    @Test
    public void regionTest() {
        // TODO: test region
    }

    /**
     * Test the property 'requestsForFirstPreroll'
     */
    @Test
    public void requestsForFirstPrerollTest() {
        // TODO: test requestsForFirstPreroll
    }

    /**
     * Test the property 'sessionId'
     */
    @Test
    public void sessionIdTest() {
        // TODO: test sessionId
    }

    /**
     * Test the property 'shortTime'
     */
    @Test
    public void shortTimeTest() {
        // TODO: test shortTime
    }

    /**
     * Test the property 'startupScore'
     */
    @Test
    public void startupScoreTest() {
        // TODO: test startupScore
    }

    /**
     * Test the property 'subPropertyId'
     */
    @Test
    public void subPropertyIdTest() {
        // TODO: test subPropertyId
    }

    /**
     * Test the property 'timeToFirstFrame'
     */
    @Test
    public void timeToFirstFrameTest() {
        // TODO: test timeToFirstFrame
    }

    /**
     * Test the property 'updatedAt'
     */
    @Test
    public void updatedAtTest() {
        // TODO: test updatedAt
    }

    /**
     * Test the property 'usedFullscreen'
     */
    @Test
    public void usedFullscreenTest() {
        // TODO: test usedFullscreen
    }

    /**
     * Test the property 'videoContentType'
     */
    @Test
    public void videoContentTypeTest() {
        // TODO: test videoContentType
    }

    /**
     * Test the property 'videoDuration'
     */
    @Test
    public void videoDurationTest() {
        // TODO: test videoDuration
    }

    /**
     * Test the property 'videoEncodingVariant'
     */
    @Test
    public void videoEncodingVariantTest() {
        // TODO: test videoEncodingVariant
    }

    /**
     * Test the property 'videoId'
     */
    @Test
    public void videoIdTest() {
        // TODO: test videoId
    }

    /**
     * Test the property 'videoLanguage'
     */
    @Test
    public void videoLanguageTest() {
        // TODO: test videoLanguage
    }

    /**
     * Test the property 'videoProducer'
     */
    @Test
    public void videoProducerTest() {
        // TODO: test videoProducer
    }

    /**
     * Test the property 'videoSeries'
     */
    @Test
    public void videoSeriesTest() {
        // TODO: test videoSeries
    }

    /**
     * Test the property 'videoStartupFailure'
     */
    @Test
    public void videoStartupFailureTest() {
        // TODO: test videoStartupFailure
    }

    /**
     * Test the property 'videoStartupPrerollLoadTime'
     */
    @Test
    public void videoStartupPrerollLoadTimeTest() {
        // TODO: test videoStartupPrerollLoadTime
    }

    /**
     * Test the property 'videoStartupPrerollRequestTime'
     */
    @Test
    public void videoStartupPrerollRequestTimeTest() {
        // TODO: test videoStartupPrerollRequestTime
    }

    /**
     * Test the property 'videoStreamType'
     */
    @Test
    public void videoStreamTypeTest() {
        // TODO: test videoStreamType
    }

    /**
     * Test the property 'videoTitle'
     */
    @Test
    public void videoTitleTest() {
        // TODO: test videoTitle
    }

    /**
     * Test the property 'videoVariantId'
     */
    @Test
    public void videoVariantIdTest() {
        // TODO: test videoVariantId
    }

    /**
     * Test the property 'videoVariantName'
     */
    @Test
    public void videoVariantNameTest() {
        // TODO: test videoVariantName
    }

    /**
     * Test the property 'viewAverageRequestLatency'
     */
    @Test
    public void viewAverageRequestLatencyTest() {
        // TODO: test viewAverageRequestLatency
    }

    /**
     * Test the property 'viewAverageRequestThroughput'
     */
    @Test
    public void viewAverageRequestThroughputTest() {
        // TODO: test viewAverageRequestThroughput
    }

    /**
     * Test the property 'viewDrmType'
     */
    @Test
    public void viewDrmTypeTest() {
        // TODO: test viewDrmType
    }

    /**
     * Test the property 'viewDroppedFrameCount'
     */
    @Test
    public void viewDroppedFrameCountTest() {
        // TODO: test viewDroppedFrameCount
    }

    /**
     * Test the property 'viewEnd'
     */
    @Test
    public void viewEndTest() {
        // TODO: test viewEnd
    }

    /**
     * Test the property 'viewErrorId'
     */
    @Test
    public void viewErrorIdTest() {
        // TODO: test viewErrorId
    }

    /**
     * Test the property 'viewHasAd'
     */
    @Test
    public void viewHasAdTest() {
        // TODO: test viewHasAd
    }

    /**
     * Test the property 'viewId'
     */
    @Test
    public void viewIdTest() {
        // TODO: test viewId
    }

    /**
     * Test the property 'viewMaxDownscalePercentage'
     */
    @Test
    public void viewMaxDownscalePercentageTest() {
        // TODO: test viewMaxDownscalePercentage
    }

    /**
     * Test the property 'viewMaxPlayheadPosition'
     */
    @Test
    public void viewMaxPlayheadPositionTest() {
        // TODO: test viewMaxPlayheadPosition
    }

    /**
     * Test the property 'viewMaxRequestLatency'
     */
    @Test
    public void viewMaxRequestLatencyTest() {
        // TODO: test viewMaxRequestLatency
    }

    /**
     * Test the property 'viewMaxUpscalePercentage'
     */
    @Test
    public void viewMaxUpscalePercentageTest() {
        // TODO: test viewMaxUpscalePercentage
    }

    /**
     * Test the property 'viewPlayingTime'
     */
    @Test
    public void viewPlayingTimeTest() {
        // TODO: test viewPlayingTime
    }

    /**
     * Test the property 'viewSeekCount'
     */
    @Test
    public void viewSeekCountTest() {
        // TODO: test viewSeekCount
    }

    /**
     * Test the property 'viewSeekDuration'
     */
    @Test
    public void viewSeekDurationTest() {
        // TODO: test viewSeekDuration
    }

    /**
     * Test the property 'viewSessionId'
     */
    @Test
    public void viewSessionIdTest() {
        // TODO: test viewSessionId
    }

    /**
     * Test the property 'viewStart'
     */
    @Test
    public void viewStartTest() {
        // TODO: test viewStart
    }

    /**
     * Test the property 'viewTotalContentPlaybackTime'
     */
    @Test
    public void viewTotalContentPlaybackTimeTest() {
        // TODO: test viewTotalContentPlaybackTime
    }

    /**
     * Test the property 'viewTotalDownscaling'
     */
    @Test
    public void viewTotalDownscalingTest() {
        // TODO: test viewTotalDownscaling
    }

    /**
     * Test the property 'viewTotalUpscaling'
     */
    @Test
    public void viewTotalUpscalingTest() {
        // TODO: test viewTotalUpscaling
    }

    /**
     * Test the property 'viewerApplicationEngine'
     */
    @Test
    public void viewerApplicationEngineTest() {
        // TODO: test viewerApplicationEngine
    }

    /**
     * Test the property 'viewerApplicationName'
     */
    @Test
    public void viewerApplicationNameTest() {
        // TODO: test viewerApplicationName
    }

    /**
     * Test the property 'viewerApplicationVersion'
     */
    @Test
    public void viewerApplicationVersionTest() {
        // TODO: test viewerApplicationVersion
    }

    /**
     * Test the property 'viewerConnectionType'
     */
    @Test
    public void viewerConnectionTypeTest() {
        // TODO: test viewerConnectionType
    }

    /**
     * Test the property 'viewerDeviceCategory'
     */
    @Test
    public void viewerDeviceCategoryTest() {
        // TODO: test viewerDeviceCategory
    }

    /**
     * Test the property 'viewerDeviceManufacturer'
     */
    @Test
    public void viewerDeviceManufacturerTest() {
        // TODO: test viewerDeviceManufacturer
    }

    /**
     * Test the property 'viewerDeviceModel'
     */
    @Test
    public void viewerDeviceModelTest() {
        // TODO: test viewerDeviceModel
    }

    /**
     * Test the property 'viewerDeviceName'
     */
    @Test
    public void viewerDeviceNameTest() {
        // TODO: test viewerDeviceName
    }

    /**
     * Test the property 'viewerExperienceScore'
     */
    @Test
    public void viewerExperienceScoreTest() {
        // TODO: test viewerExperienceScore
    }

    /**
     * Test the property 'viewerOsArchitecture'
     */
    @Test
    public void viewerOsArchitectureTest() {
        // TODO: test viewerOsArchitecture
    }

    /**
     * Test the property 'viewerOsFamily'
     */
    @Test
    public void viewerOsFamilyTest() {
        // TODO: test viewerOsFamily
    }

    /**
     * Test the property 'viewerOsVersion'
     */
    @Test
    public void viewerOsVersionTest() {
        // TODO: test viewerOsVersion
    }

    /**
     * Test the property 'viewerUserAgent'
     */
    @Test
    public void viewerUserAgentTest() {
        // TODO: test viewerUserAgent
    }

    /**
     * Test the property 'viewerUserId'
     */
    @Test
    public void viewerUserIdTest() {
        // TODO: test viewerUserId
    }

    /**
     * Test the property 'watchTime'
     */
    @Test
    public void watchTimeTest() {
        // TODO: test watchTime
    }

    /**
     * Test the property 'watched'
     */
    @Test
    public void watchedTest() {
        // TODO: test watched
    }

    /**
     * Test the property 'weightedAverageBitrate'
     */
    @Test
    public void weightedAverageBitrateTest() {
        // TODO: test weightedAverageBitrate
    }

}
