/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AssetResponse;
import org.openapitools.client.model.CreateAssetRequest;
import org.openapitools.client.model.CreatePlaybackIDRequest;
import org.openapitools.client.model.CreatePlaybackIDResponse;
import org.openapitools.client.model.CreateTrackRequest;
import org.openapitools.client.model.CreateTrackResponse;
import org.openapitools.client.model.GetAssetInputInfoResponse;
import org.openapitools.client.model.GetAssetPlaybackIDResponse;
import org.openapitools.client.model.ListAssetsResponse;
import org.openapitools.client.model.UpdateAssetMP4SupportRequest;
import org.openapitools.client.model.UpdateAssetMasterAccessRequest;
import org.openapitools.client.model.UpdateAssetRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AssetsApi
 */
@Disabled
public class AssetsApiTest {

    private final AssetsApi api = new AssetsApi();

    /**
     * Create an asset
     *
     * Create a new Mux Video asset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAssetTest() throws ApiException {
        CreateAssetRequest createAssetRequest = null;
        AssetResponse response = api.createAsset(createAssetRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a playback ID
     *
     * Creates a playback ID that can be used to stream the asset to a viewer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAssetPlaybackIdTest() throws ApiException {
        String ASSET_ID = null;
        CreatePlaybackIDRequest createPlaybackIDRequest = null;
        CreatePlaybackIDResponse response = api.createAssetPlaybackId(ASSET_ID, createPlaybackIDRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an asset track
     *
     * Adds an asset track (for example, subtitles, or an alternate audio track) to an asset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAssetTrackTest() throws ApiException {
        String ASSET_ID = null;
        CreateTrackRequest createTrackRequest = null;
        CreateTrackResponse response = api.createAssetTrack(ASSET_ID, createTrackRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an asset
     *
     * Deletes a video asset and all its data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAssetTest() throws ApiException {
        String ASSET_ID = null;
        api.deleteAsset(ASSET_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a playback ID
     *
     * Deletes a playback ID, rendering it nonfunctional for viewing an asset&#39;s video content. Please note that deleting the playback ID removes access to the underlying asset; a viewer who started playback before the playback ID was deleted may be able to watch the entire video for a limited duration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAssetPlaybackIdTest() throws ApiException {
        String ASSET_ID = null;
        String PLAYBACK_ID = null;
        api.deleteAssetPlaybackId(ASSET_ID, PLAYBACK_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an asset track
     *
     * Removes a text track from an asset. Audio and video tracks on assets cannot be removed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAssetTrackTest() throws ApiException {
        String ASSET_ID = null;
        String TRACK_ID = null;
        api.deleteAssetTrack(ASSET_ID, TRACK_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve an asset
     *
     * Retrieves the details of an asset that has previously been created. Supply the unique asset ID that was returned from your previous request, and Mux will return the corresponding asset information. The same information is returned when creating an asset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssetTest() throws ApiException {
        String ASSET_ID = null;
        AssetResponse response = api.getAsset(ASSET_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve asset input info
     *
     * Returns a list of the input objects that were used to create the asset along with any settings that were applied to each input.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssetInputInfoTest() throws ApiException {
        String ASSET_ID = null;
        GetAssetInputInfoResponse response = api.getAssetInputInfo(ASSET_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a playback ID
     *
     * Retrieves information about the specified playback ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssetPlaybackIdTest() throws ApiException {
        String ASSET_ID = null;
        String PLAYBACK_ID = null;
        GetAssetPlaybackIDResponse response = api.getAssetPlaybackId(ASSET_ID, PLAYBACK_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * List assets
     *
     * List all Mux assets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAssetsTest() throws ApiException {
        Integer limit = null;
        Integer page = null;
        String liveStreamId = null;
        String uploadId = null;
        ListAssetsResponse response = api.listAssets()
                .limit(limit)
                .page(page)
                .liveStreamId(liveStreamId)
                .uploadId(uploadId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an Asset
     *
     * Updates the details of an already-created Asset with the provided Asset ID. This currently supports only the &#x60;passthrough&#x60; field.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAssetTest() throws ApiException {
        String ASSET_ID = null;
        UpdateAssetRequest updateAssetRequest = null;
        AssetResponse response = api.updateAsset(ASSET_ID, updateAssetRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Update master access
     *
     * Allows you to add temporary access to the master (highest-quality) version of the asset in MP4 format. A URL will be created that can be used to download the master version for 24 hours. After 24 hours Master Access will revert to \&quot;none\&quot;. This master version is not optimized for web and not meant to be streamed, only downloaded for purposes like archiving or editing the video offline.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAssetMasterAccessTest() throws ApiException {
        String ASSET_ID = null;
        UpdateAssetMasterAccessRequest updateAssetMasterAccessRequest = null;
        AssetResponse response = api.updateAssetMasterAccess(ASSET_ID, updateAssetMasterAccessRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Update MP4 support
     *
     * Allows you to add or remove mp4 support for assets that were created without it. Currently there are two values supported in this request, &#x60;standard&#x60; and &#x60;none&#x60;. &#x60;none&#x60; means that an asset *does not* have mp4 support, so submitting a request with &#x60;mp4_support&#x60; set to &#x60;none&#x60; will delete the mp4 assets from the asset in question.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAssetMp4SupportTest() throws ApiException {
        String ASSET_ID = null;
        UpdateAssetMP4SupportRequest updateAssetMP4SupportRequest = null;
        AssetResponse response = api.updateAssetMp4Support(ASSET_ID, updateAssetMP4SupportRequest)
                .execute();
        // TODO: test validations
    }

}
