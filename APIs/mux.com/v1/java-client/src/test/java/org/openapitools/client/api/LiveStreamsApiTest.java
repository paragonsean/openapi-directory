/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateLiveStreamRequest;
import org.openapitools.client.model.CreatePlaybackIDRequest;
import org.openapitools.client.model.CreatePlaybackIDResponse;
import org.openapitools.client.model.CreateSimulcastTargetRequest;
import org.openapitools.client.model.DisableLiveStreamResponse;
import org.openapitools.client.model.EnableLiveStreamResponse;
import org.openapitools.client.model.GetLiveStreamPlaybackIDResponse;
import org.openapitools.client.model.ListLiveStreamsResponse;
import org.openapitools.client.model.LiveStreamResponse;
import org.openapitools.client.model.LiveStreamStatus;
import org.openapitools.client.model.SignalLiveStreamCompleteResponse;
import org.openapitools.client.model.SimulcastTargetResponse;
import org.openapitools.client.model.UpdateLiveStreamEmbeddedSubtitlesRequest;
import org.openapitools.client.model.UpdateLiveStreamGeneratedSubtitlesRequest;
import org.openapitools.client.model.UpdateLiveStreamRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LiveStreamsApi
 */
@Disabled
public class LiveStreamsApiTest {

    private final LiveStreamsApi api = new LiveStreamsApi();

    /**
     * Create a live stream
     *
     * Creates a new live stream. Once created, an encoder can connect to Mux via the specified stream key and begin streaming to an audience.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLiveStreamTest() throws ApiException {
        CreateLiveStreamRequest createLiveStreamRequest = null;
        LiveStreamResponse response = api.createLiveStream(createLiveStreamRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a live stream playback ID
     *
     * Create a new playback ID for this live stream, through which a viewer can watch the streamed content of the live stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLiveStreamPlaybackIdTest() throws ApiException {
        String LIVE_STREAM_ID = null;
        CreatePlaybackIDRequest createPlaybackIDRequest = null;
        CreatePlaybackIDResponse response = api.createLiveStreamPlaybackId(LIVE_STREAM_ID, createPlaybackIDRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a live stream simulcast target
     *
     * Create a simulcast target for the parent live stream. Simulcast target can only be created when the parent live stream is in idle state. Only one simulcast target can be created at a time with this API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLiveStreamSimulcastTargetTest() throws ApiException {
        String LIVE_STREAM_ID = null;
        CreateSimulcastTargetRequest createSimulcastTargetRequest = null;
        SimulcastTargetResponse response = api.createLiveStreamSimulcastTarget(LIVE_STREAM_ID, createSimulcastTargetRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a live stream
     *
     * Deletes a live stream from the current environment. If the live stream is currently active and being streamed to, ingest will be terminated and the encoder will be disconnected.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLiveStreamTest() throws ApiException {
        String LIVE_STREAM_ID = null;
        api.deleteLiveStream(LIVE_STREAM_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a live stream playback ID
     *
     * Deletes the playback ID for the live stream. This will not disable ingest (as the live stream still exists). New attempts to play back the live stream will fail immediately. However, current viewers will be able to continue watching the stream for some period of time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLiveStreamPlaybackIdTest() throws ApiException {
        String LIVE_STREAM_ID = null;
        String PLAYBACK_ID = null;
        api.deleteLiveStreamPlaybackId(LIVE_STREAM_ID, PLAYBACK_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Live Stream Simulcast Target
     *
     * Delete the simulcast target using the simulcast target ID returned when creating the simulcast target. Simulcast Target can only be deleted when the parent live stream is in idle state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLiveStreamSimulcastTargetTest() throws ApiException {
        String LIVE_STREAM_ID = null;
        String SIMULCAST_TARGET_ID = null;
        api.deleteLiveStreamSimulcastTarget(LIVE_STREAM_ID, SIMULCAST_TARGET_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Disable a live stream
     *
     * Disables a live stream, making it reject incoming RTMP streams until re-enabled. The API also ends the live stream recording immediately when active. Ending the live stream recording adds the &#x60;EXT-X-ENDLIST&#x60; tag to the HLS manifest which notifies the player that this live stream is over.  Mux also closes the encoder connection immediately. Any attempt from the encoder to re-establish connection will fail till the live stream is re-enabled. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableLiveStreamTest() throws ApiException {
        String LIVE_STREAM_ID = null;
        DisableLiveStreamResponse response = api.disableLiveStream(LIVE_STREAM_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Enable a live stream
     *
     * Enables a live stream, allowing it to accept an incoming RTMP stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableLiveStreamTest() throws ApiException {
        String LIVE_STREAM_ID = null;
        EnableLiveStreamResponse response = api.enableLiveStream(LIVE_STREAM_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a live stream
     *
     * Retrieves the details of a live stream that has previously been created. Supply the unique live stream ID that was returned from your previous request, and Mux will return the corresponding live stream information. The same information is returned when creating a live stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLiveStreamTest() throws ApiException {
        String LIVE_STREAM_ID = null;
        LiveStreamResponse response = api.getLiveStream(LIVE_STREAM_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a live stream playback ID
     *
     * Fetches information about a live stream&#39;s playback ID, through which a viewer can watch the streamed content from this live stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLiveStreamPlaybackIdTest() throws ApiException {
        String LIVE_STREAM_ID = null;
        String PLAYBACK_ID = null;
        GetLiveStreamPlaybackIDResponse response = api.getLiveStreamPlaybackId(LIVE_STREAM_ID, PLAYBACK_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a Live Stream Simulcast Target
     *
     * Retrieves the details of the simulcast target created for the parent live stream. Supply the unique live stream ID and simulcast target ID that was returned in the response of create simulcast target request, and Mux will return the corresponding information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLiveStreamSimulcastTargetTest() throws ApiException {
        String LIVE_STREAM_ID = null;
        String SIMULCAST_TARGET_ID = null;
        SimulcastTargetResponse response = api.getLiveStreamSimulcastTarget(LIVE_STREAM_ID, SIMULCAST_TARGET_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * List live streams
     *
     * Lists the live streams that currently exist in the current environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLiveStreamsTest() throws ApiException {
        Integer limit = null;
        Integer page = null;
        String streamKey = null;
        LiveStreamStatus status = null;
        ListLiveStreamsResponse response = api.listLiveStreams()
                .limit(limit)
                .page(page)
                .streamKey(streamKey)
                .status(status)
                .execute();
        // TODO: test validations
    }

    /**
     * Reset a live stream&#39;s stream key
     *
     * Reset a live stream key if you want to immediately stop the current stream key from working and create a new stream key that can be used for future broadcasts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetStreamKeyTest() throws ApiException {
        String LIVE_STREAM_ID = null;
        LiveStreamResponse response = api.resetStreamKey(LIVE_STREAM_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Signal a live stream is finished
     *
     * (Optional) End the live stream recording immediately instead of waiting for the reconnect_window. &#x60;EXT-X-ENDLIST&#x60; tag is added to the HLS manifest which notifies the player that this live stream is over.  Mux does not close the encoder connection immediately. Encoders are often configured to re-establish connections immediately which would result in a new recorded asset. For this reason, Mux waits for 60s before closing the connection with the encoder. This 60s timeframe is meant to give encoder operators a chance to disconnect from their end. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void signalLiveStreamCompleteTest() throws ApiException {
        String LIVE_STREAM_ID = null;
        SignalLiveStreamCompleteResponse response = api.signalLiveStreamComplete(LIVE_STREAM_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a live stream
     *
     * Updates the parameters of a previously-created live stream. This currently supports a subset of variables. Supply the live stream ID and the updated parameters and Mux will return the corresponding live stream information. The information returned will be the same after update as for subsequent get live stream requests.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLiveStreamTest() throws ApiException {
        String LIVE_STREAM_ID = null;
        UpdateLiveStreamRequest updateLiveStreamRequest = null;
        LiveStreamResponse response = api.updateLiveStream(LIVE_STREAM_ID, updateLiveStreamRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a live stream&#39;s embedded subtitles
     *
     * Configures a live stream to receive embedded closed captions. The resulting Asset&#39;s subtitle text track will have &#x60;closed_captions: true&#x60; set. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLiveStreamEmbeddedSubtitlesTest() throws ApiException {
        String LIVE_STREAM_ID = null;
        UpdateLiveStreamEmbeddedSubtitlesRequest updateLiveStreamEmbeddedSubtitlesRequest = null;
        LiveStreamResponse response = api.updateLiveStreamEmbeddedSubtitles(LIVE_STREAM_ID, updateLiveStreamEmbeddedSubtitlesRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a live stream&#39;s generated subtitles
     *
     * Updates a live stream&#39;s automatic-speech-recognition-generated subtitle configuration. Automatic speech recognition subtitles can be removed by sending an empty array in the request payload. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLiveStreamGeneratedSubtitlesTest() throws ApiException {
        String LIVE_STREAM_ID = null;
        UpdateLiveStreamGeneratedSubtitlesRequest updateLiveStreamGeneratedSubtitlesRequest = null;
        LiveStreamResponse response = api.updateLiveStreamGeneratedSubtitles(LIVE_STREAM_ID, updateLiveStreamGeneratedSubtitlesRequest)
                .execute();
        // TODO: test validations
    }

}
