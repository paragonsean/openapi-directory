/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreatePlaybackRestrictionRequest;
import org.openapitools.client.model.ListPlaybackRestrictionsResponse;
import org.openapitools.client.model.PlaybackRestrictionResponse;
import org.openapitools.client.model.UpdateReferrerDomainRestrictionRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlaybackRestrictionsApi
 */
@Disabled
public class PlaybackRestrictionsApiTest {

    private final PlaybackRestrictionsApi api = new PlaybackRestrictionsApi();

    /**
     * Create a Playback Restriction
     *
     * Create a new Playback Restriction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPlaybackRestrictionTest() throws ApiException {
        CreatePlaybackRestrictionRequest createPlaybackRestrictionRequest = null;
        PlaybackRestrictionResponse response = api.createPlaybackRestriction(createPlaybackRestrictionRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Playback Restriction
     *
     * Deletes a single Playback Restriction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePlaybackRestrictionTest() throws ApiException {
        String PLAYBACK_RESTRICTION_ID = null;
        api.deletePlaybackRestriction(PLAYBACK_RESTRICTION_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a Playback Restriction
     *
     * Retrieves a Playback Restriction associated with the unique identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPlaybackRestrictionTest() throws ApiException {
        String PLAYBACK_RESTRICTION_ID = null;
        PlaybackRestrictionResponse response = api.getPlaybackRestriction(PLAYBACK_RESTRICTION_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * List Playback Restrictions
     *
     * Returns a list of all Playback Restrictions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPlaybackRestrictionsTest() throws ApiException {
        Integer page = null;
        Integer limit = null;
        ListPlaybackRestrictionsResponse response = api.listPlaybackRestrictions()
                .page(page)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * Update the Referrer Playback Restriction
     *
     * Allows you to modify the list of domains or change how Mux validates playback requests without the &#x60;Referer&#x60; HTTP header. The Referrer restriction fully replaces the old list with this new list of domains.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateReferrerDomainRestrictionTest() throws ApiException {
        String PLAYBACK_RESTRICTION_ID = null;
        UpdateReferrerDomainRestrictionRequest updateReferrerDomainRestrictionRequest = null;
        PlaybackRestrictionResponse response = api.updateReferrerDomainRestriction(PLAYBACK_RESTRICTION_ID, updateReferrerDomainRestrictionRequest)
                .execute();
        // TODO: test validations
    }

}
