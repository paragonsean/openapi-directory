/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GetMonitoringBreakdownResponse;
import org.openapitools.client.model.GetMonitoringBreakdownTimeseriesResponse;
import org.openapitools.client.model.GetMonitoringHistogramTimeseriesResponse;
import org.openapitools.client.model.GetMonitoringTimeseriesResponse;
import org.openapitools.client.model.ListMonitoringDimensionsResponse;
import org.openapitools.client.model.ListMonitoringMetricsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MonitoringApi
 */
@Disabled
public class MonitoringApiTest {

    private final MonitoringApi api = new MonitoringApi();

    /**
     * Get Monitoring Breakdown
     *
     * Gets breakdown information for a specific dimension and metric along with the number of concurrent viewers and negative impact score.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMonitoringBreakdownTest() throws ApiException {
        String MONITORING_METRIC_ID = null;
        String dimension = null;
        Integer timestamp = null;
        List<String> filters = null;
        String orderBy = null;
        String orderDirection = null;
        GetMonitoringBreakdownResponse response = api.getMonitoringBreakdown(MONITORING_METRIC_ID)
                .dimension(dimension)
                .timestamp(timestamp)
                .filters(filters)
                .orderBy(orderBy)
                .orderDirection(orderDirection)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Monitoring Breakdown Timeseries
     *
     * Gets timeseries of breakdown information for a specific dimension and metric. Each datapoint in the response represents 5 seconds worth of data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMonitoringBreakdownTimeseriesTest() throws ApiException {
        String MONITORING_METRIC_ID = null;
        String dimension = null;
        List<String> timeframe = null;
        List<String> filters = null;
        Integer limit = null;
        String orderBy = null;
        String orderDirection = null;
        GetMonitoringBreakdownTimeseriesResponse response = api.getMonitoringBreakdownTimeseries(MONITORING_METRIC_ID)
                .dimension(dimension)
                .timeframe(timeframe)
                .filters(filters)
                .limit(limit)
                .orderBy(orderBy)
                .orderDirection(orderDirection)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Monitoring Histogram Timeseries
     *
     * Gets histogram timeseries information for a specific metric.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMonitoringHistogramTimeseriesTest() throws ApiException {
        String MONITORING_HISTOGRAM_METRIC_ID = null;
        List<String> filters = null;
        GetMonitoringHistogramTimeseriesResponse response = api.getMonitoringHistogramTimeseries(MONITORING_HISTOGRAM_METRIC_ID)
                .filters(filters)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Monitoring Timeseries
     *
     * Gets Time series information for a specific metric along with the number of concurrent viewers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMonitoringTimeseriesTest() throws ApiException {
        String MONITORING_METRIC_ID = null;
        List<String> filters = null;
        Integer timestamp = null;
        GetMonitoringTimeseriesResponse response = api.getMonitoringTimeseries(MONITORING_METRIC_ID)
                .filters(filters)
                .timestamp(timestamp)
                .execute();
        // TODO: test validations
    }

    /**
     * List Monitoring Dimensions
     *
     * Lists available monitoring dimensions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMonitoringDimensionsTest() throws ApiException {
        ListMonitoringDimensionsResponse response = api.listMonitoringDimensions()
                .execute();
        // TODO: test validations
    }

    /**
     * List Monitoring Metrics
     *
     * Lists available monitoring metrics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMonitoringMetricsTest() throws ApiException {
        ListMonitoringMetricsResponse response = api.listMonitoringMetrics()
                .execute();
        // TODO: test validations
    }

}
