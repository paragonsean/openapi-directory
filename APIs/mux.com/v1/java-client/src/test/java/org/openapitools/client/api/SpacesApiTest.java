/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BroadcastResponse;
import org.openapitools.client.model.CreateBroadcastRequest;
import org.openapitools.client.model.CreateSpaceRequest;
import org.openapitools.client.model.ListSpacesResponse;
import org.openapitools.client.model.SpaceResponse;
import org.openapitools.client.model.StartSpaceBroadcastResponse;
import org.openapitools.client.model.StopSpaceBroadcastResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SpacesApi
 */
@Disabled
public class SpacesApiTest {

    private final SpacesApi api = new SpacesApi();

    /**
     * Create a space
     *
     * Create a new space. Spaces are used to build [real-time video applications.](https://mux.com/real-time-video)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSpaceTest() throws ApiException {
        CreateSpaceRequest createSpaceRequest = null;
        SpaceResponse response = api.createSpace(createSpaceRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a space broadcast
     *
     * Creates a new broadcast. Broadcasts are used to create composited versions of your space, which can be broadcast to live streams. **Note:** By default only a single broadcast destination can be specified. Contact Mux support if you need more.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSpaceBroadcastTest() throws ApiException {
        String SPACE_ID = null;
        CreateBroadcastRequest createBroadcastRequest = null;
        BroadcastResponse response = api.createSpaceBroadcast(SPACE_ID, createBroadcastRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a space
     *
     * Deletes a space. Spaces can only be deleted when &#x60;idle&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSpaceTest() throws ApiException {
        String SPACE_ID = null;
        api.deleteSpace(SPACE_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a space broadcast
     *
     * Deletes a single broadcast of a specific space. Broadcasts can only be deleted when &#x60;idle&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSpaceBroadcastTest() throws ApiException {
        String SPACE_ID = null;
        String BROADCAST_ID = null;
        api.deleteSpaceBroadcast(SPACE_ID, BROADCAST_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a space
     *
     * Retrieves the details of a space that has previously been created. Supply the unique space ID that was returned from your create space request, and Mux will return the information about the corresponding space. The same information is returned when creating a space.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpaceTest() throws ApiException {
        String SPACE_ID = null;
        SpaceResponse response = api.getSpace(SPACE_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve space broadcast
     *
     * Retrieves the details of a broadcast of a specific space.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpaceBroadcastTest() throws ApiException {
        String SPACE_ID = null;
        String BROADCAST_ID = null;
        BroadcastResponse response = api.getSpaceBroadcast(SPACE_ID, BROADCAST_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * List spaces
     *
     * List all spaces in the current enviroment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSpacesTest() throws ApiException {
        Integer limit = null;
        Integer page = null;
        ListSpacesResponse response = api.listSpaces()
                .limit(limit)
                .page(page)
                .execute();
        // TODO: test validations
    }

    /**
     * Start a space broadcast
     *
     * Starts broadcasting a space to the associated destination. Broadcasts can only be started when the space is &#x60;active&#x60; (when there are participants connected).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startSpaceBroadcastTest() throws ApiException {
        String SPACE_ID = null;
        String BROADCAST_ID = null;
        StartSpaceBroadcastResponse response = api.startSpaceBroadcast(SPACE_ID, BROADCAST_ID)
                .execute();
        // TODO: test validations
    }

    /**
     * Stop a space broadcast
     *
     * Stops broadcasting a space, causing the destination live stream to become idle. This API also automatically calls &#x60;complete&#x60; on the destination live stream. Broadcasts are also automatically stopped when a space becomes idle.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopSpaceBroadcastTest() throws ApiException {
        String SPACE_ID = null;
        String BROADCAST_ID = null;
        StopSpaceBroadcastResponse response = api.stopSpaceBroadcast(SPACE_ID, BROADCAST_ID)
                .execute();
        // TODO: test validations
    }

}
