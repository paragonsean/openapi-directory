/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateAssetRequest;
import org.openapitools.client.model.CreateSimulcastTargetRequest;
import org.openapitools.client.model.LiveStreamEmbeddedSubtitleSettings;
import org.openapitools.client.model.LiveStreamGeneratedSubtitleSettings;
import org.openapitools.client.model.PlaybackPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateLiveStreamRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:45.471488-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateLiveStreamRequest {
  public static final String SERIALIZED_NAME_AUDIO_ONLY = "audio_only";
  @SerializedName(SERIALIZED_NAME_AUDIO_ONLY)
  private Boolean audioOnly;

  public static final String SERIALIZED_NAME_EMBEDDED_SUBTITLES = "embedded_subtitles";
  @SerializedName(SERIALIZED_NAME_EMBEDDED_SUBTITLES)
  private List<LiveStreamEmbeddedSubtitleSettings> embeddedSubtitles = new ArrayList<>();

  public static final String SERIALIZED_NAME_GENERATED_SUBTITLES = "generated_subtitles";
  @SerializedName(SERIALIZED_NAME_GENERATED_SUBTITLES)
  private List<LiveStreamGeneratedSubtitleSettings> generatedSubtitles = new ArrayList<>();

  /**
   * Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this as an alternative to setting low latency or reduced latency flags. The Low Latency value is a beta feature. Read more here: https://mux.com/blog/introducing-low-latency-live-streaming/
   */
  @JsonAdapter(LatencyModeEnum.Adapter.class)
  public enum LatencyModeEnum {
    LOW("low"),
    
    REDUCED("reduced"),
    
    STANDARD("standard");

    private String value;

    LatencyModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LatencyModeEnum fromValue(String value) {
      for (LatencyModeEnum b : LatencyModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LatencyModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LatencyModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LatencyModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LatencyModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LatencyModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LATENCY_MODE = "latency_mode";
  @SerializedName(SERIALIZED_NAME_LATENCY_MODE)
  private LatencyModeEnum latencyMode;

  public static final String SERIALIZED_NAME_LOW_LATENCY = "low_latency";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_LOW_LATENCY)
  private Boolean lowLatency;

  public static final String SERIALIZED_NAME_MAX_CONTINUOUS_DURATION = "max_continuous_duration";
  @SerializedName(SERIALIZED_NAME_MAX_CONTINUOUS_DURATION)
  private Integer maxContinuousDuration = 43200;

  public static final String SERIALIZED_NAME_NEW_ASSET_SETTINGS = "new_asset_settings";
  @SerializedName(SERIALIZED_NAME_NEW_ASSET_SETTINGS)
  private CreateAssetRequest newAssetSettings;

  public static final String SERIALIZED_NAME_PASSTHROUGH = "passthrough";
  @SerializedName(SERIALIZED_NAME_PASSTHROUGH)
  private String passthrough;

  public static final String SERIALIZED_NAME_PLAYBACK_POLICY = "playback_policy";
  @SerializedName(SERIALIZED_NAME_PLAYBACK_POLICY)
  private List<PlaybackPolicy> playbackPolicy = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECONNECT_SLATE_URL = "reconnect_slate_url";
  @SerializedName(SERIALIZED_NAME_RECONNECT_SLATE_URL)
  private String reconnectSlateUrl;

  public static final String SERIALIZED_NAME_RECONNECT_WINDOW = "reconnect_window";
  @SerializedName(SERIALIZED_NAME_RECONNECT_WINDOW)
  private Float reconnectWindow = 60f;

  public static final String SERIALIZED_NAME_REDUCED_LATENCY = "reduced_latency";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_REDUCED_LATENCY)
  private Boolean reducedLatency;

  public static final String SERIALIZED_NAME_SIMULCAST_TARGETS = "simulcast_targets";
  @SerializedName(SERIALIZED_NAME_SIMULCAST_TARGETS)
  private List<CreateSimulcastTargetRequest> simulcastTargets = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private Boolean test;

  public static final String SERIALIZED_NAME_USE_SLATE_FOR_STANDARD_LATENCY = "use_slate_for_standard_latency";
  @SerializedName(SERIALIZED_NAME_USE_SLATE_FOR_STANDARD_LATENCY)
  private Boolean useSlateForStandardLatency = false;

  public CreateLiveStreamRequest() {
  }

  public CreateLiveStreamRequest audioOnly(Boolean audioOnly) {
    this.audioOnly = audioOnly;
    return this;
  }

  /**
   * Force the live stream to only process the audio track when the value is set to true. Mux drops the video track if broadcasted.
   * @return audioOnly
   */
  @javax.annotation.Nullable
  public Boolean getAudioOnly() {
    return audioOnly;
  }

  public void setAudioOnly(Boolean audioOnly) {
    this.audioOnly = audioOnly;
  }


  public CreateLiveStreamRequest embeddedSubtitles(List<LiveStreamEmbeddedSubtitleSettings> embeddedSubtitles) {
    this.embeddedSubtitles = embeddedSubtitles;
    return this;
  }

  public CreateLiveStreamRequest addEmbeddedSubtitlesItem(LiveStreamEmbeddedSubtitleSettings embeddedSubtitlesItem) {
    if (this.embeddedSubtitles == null) {
      this.embeddedSubtitles = new ArrayList<>();
    }
    this.embeddedSubtitles.add(embeddedSubtitlesItem);
    return this;
  }

  /**
   * Describe the embedded closed caption contents of the incoming live stream.
   * @return embeddedSubtitles
   */
  @javax.annotation.Nullable
  public List<LiveStreamEmbeddedSubtitleSettings> getEmbeddedSubtitles() {
    return embeddedSubtitles;
  }

  public void setEmbeddedSubtitles(List<LiveStreamEmbeddedSubtitleSettings> embeddedSubtitles) {
    this.embeddedSubtitles = embeddedSubtitles;
  }


  public CreateLiveStreamRequest generatedSubtitles(List<LiveStreamGeneratedSubtitleSettings> generatedSubtitles) {
    this.generatedSubtitles = generatedSubtitles;
    return this;
  }

  public CreateLiveStreamRequest addGeneratedSubtitlesItem(LiveStreamGeneratedSubtitleSettings generatedSubtitlesItem) {
    if (this.generatedSubtitles == null) {
      this.generatedSubtitles = new ArrayList<>();
    }
    this.generatedSubtitles.add(generatedSubtitlesItem);
    return this;
  }

  /**
   * Configure the incoming live stream to include subtitles created with automatic speech recognition. Each Asset created from a live stream with &#x60;generated_subtitles&#x60; configured will automatically receive two text tracks. The first of these will have a &#x60;text_source&#x60; value of &#x60;generated_live&#x60;, and will be available with &#x60;ready&#x60; status as soon as the stream is live. The second text track will have a &#x60;text_source&#x60; value of &#x60;generated_live_final&#x60; and will contain subtitles with improved accuracy, timing, and formatting. However, &#x60;generated_live_final&#x60; tracks will not be available in &#x60;ready&#x60; status until the live stream ends. If an Asset has both &#x60;generated_live&#x60; and &#x60;generated_live_final&#x60; tracks that are &#x60;ready&#x60;, then only the &#x60;generated_live_final&#x60; track will be included during playback.
   * @return generatedSubtitles
   */
  @javax.annotation.Nullable
  public List<LiveStreamGeneratedSubtitleSettings> getGeneratedSubtitles() {
    return generatedSubtitles;
  }

  public void setGeneratedSubtitles(List<LiveStreamGeneratedSubtitleSettings> generatedSubtitles) {
    this.generatedSubtitles = generatedSubtitles;
  }


  public CreateLiveStreamRequest latencyMode(LatencyModeEnum latencyMode) {
    this.latencyMode = latencyMode;
    return this;
  }

  /**
   * Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this as an alternative to setting low latency or reduced latency flags. The Low Latency value is a beta feature. Read more here: https://mux.com/blog/introducing-low-latency-live-streaming/
   * @return latencyMode
   */
  @javax.annotation.Nullable
  public LatencyModeEnum getLatencyMode() {
    return latencyMode;
  }

  public void setLatencyMode(LatencyModeEnum latencyMode) {
    this.latencyMode = latencyMode;
  }


  @Deprecated
  public CreateLiveStreamRequest lowLatency(Boolean lowLatency) {
    this.lowLatency = lowLatency;
    return this;
  }

  /**
   * This field is deprecated. Please use &#x60;latency_mode&#x60; instead. Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Setting this option will enable compatibility with the LL-HLS specification for low-latency streaming. This typically has lower latency than Reduced Latency streams, and cannot be combined with Reduced Latency.
   * @return lowLatency
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getLowLatency() {
    return lowLatency;
  }

  @Deprecated
  public void setLowLatency(Boolean lowLatency) {
    this.lowLatency = lowLatency;
  }


  public CreateLiveStreamRequest maxContinuousDuration(Integer maxContinuousDuration) {
    this.maxContinuousDuration = maxContinuousDuration;
    return this;
  }

  /**
   * The time in seconds a live stream may be continuously active before being disconnected. Defaults to 12 hours.
   * minimum: 60
   * maximum: 43200
   * @return maxContinuousDuration
   */
  @javax.annotation.Nullable
  public Integer getMaxContinuousDuration() {
    return maxContinuousDuration;
  }

  public void setMaxContinuousDuration(Integer maxContinuousDuration) {
    this.maxContinuousDuration = maxContinuousDuration;
  }


  public CreateLiveStreamRequest newAssetSettings(CreateAssetRequest newAssetSettings) {
    this.newAssetSettings = newAssetSettings;
    return this;
  }

  /**
   * Get newAssetSettings
   * @return newAssetSettings
   */
  @javax.annotation.Nullable
  public CreateAssetRequest getNewAssetSettings() {
    return newAssetSettings;
  }

  public void setNewAssetSettings(CreateAssetRequest newAssetSettings) {
    this.newAssetSettings = newAssetSettings;
  }


  public CreateLiveStreamRequest passthrough(String passthrough) {
    this.passthrough = passthrough;
    return this;
  }

  /**
   * Get passthrough
   * @return passthrough
   */
  @javax.annotation.Nullable
  public String getPassthrough() {
    return passthrough;
  }

  public void setPassthrough(String passthrough) {
    this.passthrough = passthrough;
  }


  public CreateLiveStreamRequest playbackPolicy(List<PlaybackPolicy> playbackPolicy) {
    this.playbackPolicy = playbackPolicy;
    return this;
  }

  public CreateLiveStreamRequest addPlaybackPolicyItem(PlaybackPolicy playbackPolicyItem) {
    if (this.playbackPolicy == null) {
      this.playbackPolicy = new ArrayList<>();
    }
    this.playbackPolicy.add(playbackPolicyItem);
    return this;
  }

  /**
   * Get playbackPolicy
   * @return playbackPolicy
   */
  @javax.annotation.Nullable
  public List<PlaybackPolicy> getPlaybackPolicy() {
    return playbackPolicy;
  }

  public void setPlaybackPolicy(List<PlaybackPolicy> playbackPolicy) {
    this.playbackPolicy = playbackPolicy;
  }


  public CreateLiveStreamRequest reconnectSlateUrl(String reconnectSlateUrl) {
    this.reconnectSlateUrl = reconnectSlateUrl;
    return this;
  }

  /**
   * The URL of the image file that Mux should download and use as slate media during interruptions of the live stream media. This file will be downloaded each time a new recorded asset is created from the live stream. If this is not set, the default slate media will be used.
   * @return reconnectSlateUrl
   */
  @javax.annotation.Nullable
  public String getReconnectSlateUrl() {
    return reconnectSlateUrl;
  }

  public void setReconnectSlateUrl(String reconnectSlateUrl) {
    this.reconnectSlateUrl = reconnectSlateUrl;
  }


  public CreateLiveStreamRequest reconnectWindow(Float reconnectWindow) {
    this.reconnectWindow = reconnectWindow;
    return this;
  }

  /**
   * When live streaming software disconnects from Mux, either intentionally or due to a drop in the network, the Reconnect Window is the time in seconds that Mux should wait for the streaming software to reconnect before considering the live stream finished and completing the recorded asset. Defaults to 60 seconds on the API if not specified.  If not specified directly, Standard Latency streams have a Reconnect Window of 60 seconds; Reduced and Low Latency streams have a default of 0 seconds, or no Reconnect Window. For that reason, we suggest specifying a value other than zero for Reduced and Low Latency streams.  Reduced and Low Latency streams with a Reconnect Window greater than zero will insert slate media into the recorded asset while waiting for the streaming software to reconnect or when there are brief interruptions in the live stream media. When using a Reconnect Window setting higher than 60 seconds with a Standard Latency stream, we highly recommend enabling slate with the &#x60;use_slate_for_standard_latency&#x60; option. 
   * minimum: 0
   * maximum: 1800
   * @return reconnectWindow
   */
  @javax.annotation.Nullable
  public Float getReconnectWindow() {
    return reconnectWindow;
  }

  public void setReconnectWindow(Float reconnectWindow) {
    this.reconnectWindow = reconnectWindow;
  }


  @Deprecated
  public CreateLiveStreamRequest reducedLatency(Boolean reducedLatency) {
    this.reducedLatency = reducedLatency;
    return this;
  }

  /**
   * This field is deprecated. Please use &#x60;latency_mode&#x60; instead. Latency is the time from when the streamer transmits a frame of video to when you see it in the player. Set this if you want lower latency for your live stream. Read more here: https://mux.com/blog/reduced-latency-for-mux-live-streaming-now-available/
   * @return reducedLatency
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getReducedLatency() {
    return reducedLatency;
  }

  @Deprecated
  public void setReducedLatency(Boolean reducedLatency) {
    this.reducedLatency = reducedLatency;
  }


  public CreateLiveStreamRequest simulcastTargets(List<CreateSimulcastTargetRequest> simulcastTargets) {
    this.simulcastTargets = simulcastTargets;
    return this;
  }

  public CreateLiveStreamRequest addSimulcastTargetsItem(CreateSimulcastTargetRequest simulcastTargetsItem) {
    if (this.simulcastTargets == null) {
      this.simulcastTargets = new ArrayList<>();
    }
    this.simulcastTargets.add(simulcastTargetsItem);
    return this;
  }

  /**
   * Get simulcastTargets
   * @return simulcastTargets
   */
  @javax.annotation.Nullable
  public List<CreateSimulcastTargetRequest> getSimulcastTargets() {
    return simulcastTargets;
  }

  public void setSimulcastTargets(List<CreateSimulcastTargetRequest> simulcastTargets) {
    this.simulcastTargets = simulcastTargets;
  }


  public CreateLiveStreamRequest test(Boolean test) {
    this.test = test;
    return this;
  }

  /**
   * Marks the live stream as a test live stream when the value is set to true. A test live stream can help evaluate the Mux Video APIs without incurring any cost. There is no limit on number of test live streams created. Test live streams are watermarked with the Mux logo and limited to 5 minutes. The test live stream is disabled after the stream is active for 5 mins and the recorded asset also deleted after 24 hours.
   * @return test
   */
  @javax.annotation.Nullable
  public Boolean getTest() {
    return test;
  }

  public void setTest(Boolean test) {
    this.test = test;
  }


  public CreateLiveStreamRequest useSlateForStandardLatency(Boolean useSlateForStandardLatency) {
    this.useSlateForStandardLatency = useSlateForStandardLatency;
    return this;
  }

  /**
   * By default, Standard Latency live streams do not have slate media inserted while waiting for live streaming software to reconnect to Mux. Setting this to true enables slate insertion on a Standard Latency stream.
   * @return useSlateForStandardLatency
   */
  @javax.annotation.Nullable
  public Boolean getUseSlateForStandardLatency() {
    return useSlateForStandardLatency;
  }

  public void setUseSlateForStandardLatency(Boolean useSlateForStandardLatency) {
    this.useSlateForStandardLatency = useSlateForStandardLatency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateLiveStreamRequest createLiveStreamRequest = (CreateLiveStreamRequest) o;
    return Objects.equals(this.audioOnly, createLiveStreamRequest.audioOnly) &&
        Objects.equals(this.embeddedSubtitles, createLiveStreamRequest.embeddedSubtitles) &&
        Objects.equals(this.generatedSubtitles, createLiveStreamRequest.generatedSubtitles) &&
        Objects.equals(this.latencyMode, createLiveStreamRequest.latencyMode) &&
        Objects.equals(this.lowLatency, createLiveStreamRequest.lowLatency) &&
        Objects.equals(this.maxContinuousDuration, createLiveStreamRequest.maxContinuousDuration) &&
        Objects.equals(this.newAssetSettings, createLiveStreamRequest.newAssetSettings) &&
        Objects.equals(this.passthrough, createLiveStreamRequest.passthrough) &&
        Objects.equals(this.playbackPolicy, createLiveStreamRequest.playbackPolicy) &&
        Objects.equals(this.reconnectSlateUrl, createLiveStreamRequest.reconnectSlateUrl) &&
        Objects.equals(this.reconnectWindow, createLiveStreamRequest.reconnectWindow) &&
        Objects.equals(this.reducedLatency, createLiveStreamRequest.reducedLatency) &&
        Objects.equals(this.simulcastTargets, createLiveStreamRequest.simulcastTargets) &&
        Objects.equals(this.test, createLiveStreamRequest.test) &&
        Objects.equals(this.useSlateForStandardLatency, createLiveStreamRequest.useSlateForStandardLatency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioOnly, embeddedSubtitles, generatedSubtitles, latencyMode, lowLatency, maxContinuousDuration, newAssetSettings, passthrough, playbackPolicy, reconnectSlateUrl, reconnectWindow, reducedLatency, simulcastTargets, test, useSlateForStandardLatency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateLiveStreamRequest {\n");
    sb.append("    audioOnly: ").append(toIndentedString(audioOnly)).append("\n");
    sb.append("    embeddedSubtitles: ").append(toIndentedString(embeddedSubtitles)).append("\n");
    sb.append("    generatedSubtitles: ").append(toIndentedString(generatedSubtitles)).append("\n");
    sb.append("    latencyMode: ").append(toIndentedString(latencyMode)).append("\n");
    sb.append("    lowLatency: ").append(toIndentedString(lowLatency)).append("\n");
    sb.append("    maxContinuousDuration: ").append(toIndentedString(maxContinuousDuration)).append("\n");
    sb.append("    newAssetSettings: ").append(toIndentedString(newAssetSettings)).append("\n");
    sb.append("    passthrough: ").append(toIndentedString(passthrough)).append("\n");
    sb.append("    playbackPolicy: ").append(toIndentedString(playbackPolicy)).append("\n");
    sb.append("    reconnectSlateUrl: ").append(toIndentedString(reconnectSlateUrl)).append("\n");
    sb.append("    reconnectWindow: ").append(toIndentedString(reconnectWindow)).append("\n");
    sb.append("    reducedLatency: ").append(toIndentedString(reducedLatency)).append("\n");
    sb.append("    simulcastTargets: ").append(toIndentedString(simulcastTargets)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    useSlateForStandardLatency: ").append(toIndentedString(useSlateForStandardLatency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audio_only");
    openapiFields.add("embedded_subtitles");
    openapiFields.add("generated_subtitles");
    openapiFields.add("latency_mode");
    openapiFields.add("low_latency");
    openapiFields.add("max_continuous_duration");
    openapiFields.add("new_asset_settings");
    openapiFields.add("passthrough");
    openapiFields.add("playback_policy");
    openapiFields.add("reconnect_slate_url");
    openapiFields.add("reconnect_window");
    openapiFields.add("reduced_latency");
    openapiFields.add("simulcast_targets");
    openapiFields.add("test");
    openapiFields.add("use_slate_for_standard_latency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateLiveStreamRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateLiveStreamRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateLiveStreamRequest is not found in the empty JSON string", CreateLiveStreamRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateLiveStreamRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateLiveStreamRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("embedded_subtitles") != null && !jsonObj.get("embedded_subtitles").isJsonNull()) {
        JsonArray jsonArrayembeddedSubtitles = jsonObj.getAsJsonArray("embedded_subtitles");
        if (jsonArrayembeddedSubtitles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("embedded_subtitles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `embedded_subtitles` to be an array in the JSON string but got `%s`", jsonObj.get("embedded_subtitles").toString()));
          }

          // validate the optional field `embedded_subtitles` (array)
          for (int i = 0; i < jsonArrayembeddedSubtitles.size(); i++) {
            LiveStreamEmbeddedSubtitleSettings.validateJsonElement(jsonArrayembeddedSubtitles.get(i));
          };
        }
      }
      if (jsonObj.get("generated_subtitles") != null && !jsonObj.get("generated_subtitles").isJsonNull()) {
        JsonArray jsonArraygeneratedSubtitles = jsonObj.getAsJsonArray("generated_subtitles");
        if (jsonArraygeneratedSubtitles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("generated_subtitles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `generated_subtitles` to be an array in the JSON string but got `%s`", jsonObj.get("generated_subtitles").toString()));
          }

          // validate the optional field `generated_subtitles` (array)
          for (int i = 0; i < jsonArraygeneratedSubtitles.size(); i++) {
            LiveStreamGeneratedSubtitleSettings.validateJsonElement(jsonArraygeneratedSubtitles.get(i));
          };
        }
      }
      if ((jsonObj.get("latency_mode") != null && !jsonObj.get("latency_mode").isJsonNull()) && !jsonObj.get("latency_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `latency_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("latency_mode").toString()));
      }
      // validate the optional field `latency_mode`
      if (jsonObj.get("latency_mode") != null && !jsonObj.get("latency_mode").isJsonNull()) {
        LatencyModeEnum.validateJsonElement(jsonObj.get("latency_mode"));
      }
      // validate the optional field `new_asset_settings`
      if (jsonObj.get("new_asset_settings") != null && !jsonObj.get("new_asset_settings").isJsonNull()) {
        CreateAssetRequest.validateJsonElement(jsonObj.get("new_asset_settings"));
      }
      if ((jsonObj.get("passthrough") != null && !jsonObj.get("passthrough").isJsonNull()) && !jsonObj.get("passthrough").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passthrough` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passthrough").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("playback_policy") != null && !jsonObj.get("playback_policy").isJsonNull() && !jsonObj.get("playback_policy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `playback_policy` to be an array in the JSON string but got `%s`", jsonObj.get("playback_policy").toString()));
      }
      if ((jsonObj.get("reconnect_slate_url") != null && !jsonObj.get("reconnect_slate_url").isJsonNull()) && !jsonObj.get("reconnect_slate_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reconnect_slate_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reconnect_slate_url").toString()));
      }
      if (jsonObj.get("simulcast_targets") != null && !jsonObj.get("simulcast_targets").isJsonNull()) {
        JsonArray jsonArraysimulcastTargets = jsonObj.getAsJsonArray("simulcast_targets");
        if (jsonArraysimulcastTargets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("simulcast_targets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `simulcast_targets` to be an array in the JSON string but got `%s`", jsonObj.get("simulcast_targets").toString()));
          }

          // validate the optional field `simulcast_targets` (array)
          for (int i = 0; i < jsonArraysimulcastTargets.size(); i++) {
            CreateSimulcastTargetRequest.validateJsonElement(jsonArraysimulcastTargets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateLiveStreamRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateLiveStreamRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateLiveStreamRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateLiveStreamRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateLiveStreamRequest>() {
           @Override
           public void write(JsonWriter out, CreateLiveStreamRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateLiveStreamRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateLiveStreamRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateLiveStreamRequest
   * @throws IOException if the JSON string is invalid with respect to CreateLiveStreamRequest
   */
  public static CreateLiveStreamRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateLiveStreamRequest.class);
  }

  /**
   * Convert an instance of CreateLiveStreamRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

