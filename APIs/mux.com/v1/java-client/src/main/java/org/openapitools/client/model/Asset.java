/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssetErrors;
import org.openapitools.client.model.AssetMaster;
import org.openapitools.client.model.AssetNonStandardInputReasons;
import org.openapitools.client.model.AssetRecordingTimesInner;
import org.openapitools.client.model.AssetStaticRenditions;
import org.openapitools.client.model.PlaybackID;
import org.openapitools.client.model.Track;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Asset
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:45.471488-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Asset {
  public static final String SERIALIZED_NAME_ASPECT_RATIO = "aspect_ratio";
  @SerializedName(SERIALIZED_NAME_ASPECT_RATIO)
  private String aspectRatio;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Double duration;

  /**
   * The encoding tier informs the cost, quality, and available platform features for the asset. By default the &#x60;smart&#x60; encoding tier is used.
   */
  @JsonAdapter(EncodingTierEnum.Adapter.class)
  public enum EncodingTierEnum {
    SMART("smart"),
    
    BASELINE("baseline");

    private String value;

    EncodingTierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncodingTierEnum fromValue(String value) {
      for (EncodingTierEnum b : EncodingTierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncodingTierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncodingTierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncodingTierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncodingTierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncodingTierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCODING_TIER = "encoding_tier";
  @SerializedName(SERIALIZED_NAME_ENCODING_TIER)
  private EncodingTierEnum encodingTier;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private AssetErrors errors;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_LIVE = "is_live";
  @SerializedName(SERIALIZED_NAME_IS_LIVE)
  private Boolean isLive;

  public static final String SERIALIZED_NAME_LIVE_STREAM_ID = "live_stream_id";
  @SerializedName(SERIALIZED_NAME_LIVE_STREAM_ID)
  private String liveStreamId;

  public static final String SERIALIZED_NAME_MASTER = "master";
  @SerializedName(SERIALIZED_NAME_MASTER)
  private AssetMaster master;

  /**
   * Gets or Sets masterAccess
   */
  @JsonAdapter(MasterAccessEnum.Adapter.class)
  public enum MasterAccessEnum {
    TEMPORARY("temporary"),
    
    NONE("none");

    private String value;

    MasterAccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MasterAccessEnum fromValue(String value) {
      for (MasterAccessEnum b : MasterAccessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MasterAccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MasterAccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MasterAccessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MasterAccessEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MasterAccessEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MASTER_ACCESS = "master_access";
  @SerializedName(SERIALIZED_NAME_MASTER_ACCESS)
  private MasterAccessEnum masterAccess = MasterAccessEnum.NONE;

  /**
   * Max resolution tier can be used to control the maximum &#x60;resolution_tier&#x60; your asset is encoded, stored, and streamed at. If not set, this defaults to &#x60;1080p&#x60;.
   */
  @JsonAdapter(MaxResolutionTierEnum.Adapter.class)
  public enum MaxResolutionTierEnum {
    _1080P("1080p"),
    
    _1440P("1440p"),
    
    _2160P("2160p");

    private String value;

    MaxResolutionTierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MaxResolutionTierEnum fromValue(String value) {
      for (MaxResolutionTierEnum b : MaxResolutionTierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MaxResolutionTierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaxResolutionTierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaxResolutionTierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MaxResolutionTierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MaxResolutionTierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAX_RESOLUTION_TIER = "max_resolution_tier";
  @SerializedName(SERIALIZED_NAME_MAX_RESOLUTION_TIER)
  private MaxResolutionTierEnum maxResolutionTier;

  public static final String SERIALIZED_NAME_MAX_STORED_FRAME_RATE = "max_stored_frame_rate";
  @SerializedName(SERIALIZED_NAME_MAX_STORED_FRAME_RATE)
  private Double maxStoredFrameRate;

  /**
   * This field is deprecated. Please use &#x60;resolution_tier&#x60; instead. The maximum resolution that has been stored for the asset. The asset may be delivered at lower resolutions depending on the device and bandwidth, however it cannot be delivered at a higher value than is stored.
   */
  @JsonAdapter(MaxStoredResolutionEnum.Adapter.class)
  public enum MaxStoredResolutionEnum {
    AUDIO_ONLY("Audio only"),
    
    SD("SD"),
    
    HD("HD"),
    
    FHD("FHD"),
    
    UHD("UHD");

    private String value;

    MaxStoredResolutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MaxStoredResolutionEnum fromValue(String value) {
      for (MaxStoredResolutionEnum b : MaxStoredResolutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MaxStoredResolutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaxStoredResolutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaxStoredResolutionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MaxStoredResolutionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MaxStoredResolutionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAX_STORED_RESOLUTION = "max_stored_resolution";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_MAX_STORED_RESOLUTION)
  private MaxStoredResolutionEnum maxStoredResolution;

  /**
   * Gets or Sets mp4Support
   */
  @JsonAdapter(Mp4SupportEnum.Adapter.class)
  public enum Mp4SupportEnum {
    STANDARD("standard"),
    
    NONE("none");

    private String value;

    Mp4SupportEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Mp4SupportEnum fromValue(String value) {
      for (Mp4SupportEnum b : Mp4SupportEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<Mp4SupportEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Mp4SupportEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Mp4SupportEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return Mp4SupportEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      Mp4SupportEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MP4_SUPPORT = "mp4_support";
  @SerializedName(SERIALIZED_NAME_MP4_SUPPORT)
  private Mp4SupportEnum mp4Support = Mp4SupportEnum.NONE;

  public static final String SERIALIZED_NAME_NON_STANDARD_INPUT_REASONS = "non_standard_input_reasons";
  @SerializedName(SERIALIZED_NAME_NON_STANDARD_INPUT_REASONS)
  private AssetNonStandardInputReasons nonStandardInputReasons;

  public static final String SERIALIZED_NAME_NORMALIZE_AUDIO = "normalize_audio";
  @SerializedName(SERIALIZED_NAME_NORMALIZE_AUDIO)
  private Boolean normalizeAudio = false;

  public static final String SERIALIZED_NAME_PASSTHROUGH = "passthrough";
  @SerializedName(SERIALIZED_NAME_PASSTHROUGH)
  private String passthrough;

  public static final String SERIALIZED_NAME_PER_TITLE_ENCODE = "per_title_encode";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PER_TITLE_ENCODE)
  private Boolean perTitleEncode;

  public static final String SERIALIZED_NAME_PLAYBACK_IDS = "playback_ids";
  @SerializedName(SERIALIZED_NAME_PLAYBACK_IDS)
  private List<PlaybackID> playbackIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_RECORDING_TIMES = "recording_times";
  @SerializedName(SERIALIZED_NAME_RECORDING_TIMES)
  private List<AssetRecordingTimesInner> recordingTimes = new ArrayList<>();

  /**
   * The resolution tier that the asset was ingested at, affecting billing for ingest &amp; storage. This field also represents the highest resolution tier that the content can be delivered at, however the actual resolution may be lower depending on the device, bandwidth, and exact resolution of the uploaded asset.
   */
  @JsonAdapter(ResolutionTierEnum.Adapter.class)
  public enum ResolutionTierEnum {
    AUDIO_ONLY("audio-only"),
    
    _720P("720p"),
    
    _1080P("1080p"),
    
    _1440P("1440p"),
    
    _2160P("2160p");

    private String value;

    ResolutionTierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResolutionTierEnum fromValue(String value) {
      for (ResolutionTierEnum b : ResolutionTierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResolutionTierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResolutionTierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResolutionTierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResolutionTierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResolutionTierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOLUTION_TIER = "resolution_tier";
  @SerializedName(SERIALIZED_NAME_RESOLUTION_TIER)
  private ResolutionTierEnum resolutionTier;

  public static final String SERIALIZED_NAME_SOURCE_ASSET_ID = "source_asset_id";
  @SerializedName(SERIALIZED_NAME_SOURCE_ASSET_ID)
  private String sourceAssetId;

  public static final String SERIALIZED_NAME_STATIC_RENDITIONS = "static_renditions";
  @SerializedName(SERIALIZED_NAME_STATIC_RENDITIONS)
  private AssetStaticRenditions staticRenditions;

  /**
   * The status of the asset.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PREPARING("preparing"),
    
    READY("ready"),
    
    ERRORED("errored");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private Boolean test;

  public static final String SERIALIZED_NAME_TRACKS = "tracks";
  @SerializedName(SERIALIZED_NAME_TRACKS)
  private List<Track> tracks = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPLOAD_ID = "upload_id";
  @SerializedName(SERIALIZED_NAME_UPLOAD_ID)
  private String uploadId;

  public Asset() {
  }

  public Asset aspectRatio(String aspectRatio) {
    this.aspectRatio = aspectRatio;
    return this;
  }

  /**
   * The aspect ratio of the asset in the form of &#x60;width:height&#x60;, for example &#x60;16:9&#x60;.
   * @return aspectRatio
   */
  @javax.annotation.Nullable
  public String getAspectRatio() {
    return aspectRatio;
  }

  public void setAspectRatio(String aspectRatio) {
    this.aspectRatio = aspectRatio;
  }


  public Asset createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Time the Asset was created, defined as a Unix timestamp (seconds since epoch).
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public Asset duration(Double duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The duration of the asset in seconds (max duration for a single asset is 12 hours).
   * @return duration
   */
  @javax.annotation.Nullable
  public Double getDuration() {
    return duration;
  }

  public void setDuration(Double duration) {
    this.duration = duration;
  }


  public Asset encodingTier(EncodingTierEnum encodingTier) {
    this.encodingTier = encodingTier;
    return this;
  }

  /**
   * The encoding tier informs the cost, quality, and available platform features for the asset. By default the &#x60;smart&#x60; encoding tier is used.
   * @return encodingTier
   */
  @javax.annotation.Nullable
  public EncodingTierEnum getEncodingTier() {
    return encodingTier;
  }

  public void setEncodingTier(EncodingTierEnum encodingTier) {
    this.encodingTier = encodingTier;
  }


  public Asset errors(AssetErrors errors) {
    this.errors = errors;
    return this;
  }

  /**
   * Get errors
   * @return errors
   */
  @javax.annotation.Nullable
  public AssetErrors getErrors() {
    return errors;
  }

  public void setErrors(AssetErrors errors) {
    this.errors = errors;
  }


  public Asset id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the Asset. Max 255 characters.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Asset isLive(Boolean isLive) {
    this.isLive = isLive;
    return this;
  }

  /**
   * Indicates whether the live stream that created this asset is currently &#x60;active&#x60; and not in &#x60;idle&#x60; state. This is an optional parameter added when the asset is created from a live stream.
   * @return isLive
   */
  @javax.annotation.Nullable
  public Boolean getIsLive() {
    return isLive;
  }

  public void setIsLive(Boolean isLive) {
    this.isLive = isLive;
  }


  public Asset liveStreamId(String liveStreamId) {
    this.liveStreamId = liveStreamId;
    return this;
  }

  /**
   * Unique identifier for the live stream. This is an optional parameter added when the asset is created from a live stream.
   * @return liveStreamId
   */
  @javax.annotation.Nullable
  public String getLiveStreamId() {
    return liveStreamId;
  }

  public void setLiveStreamId(String liveStreamId) {
    this.liveStreamId = liveStreamId;
  }


  public Asset master(AssetMaster master) {
    this.master = master;
    return this;
  }

  /**
   * Get master
   * @return master
   */
  @javax.annotation.Nullable
  public AssetMaster getMaster() {
    return master;
  }

  public void setMaster(AssetMaster master) {
    this.master = master;
  }


  public Asset masterAccess(MasterAccessEnum masterAccess) {
    this.masterAccess = masterAccess;
    return this;
  }

  /**
   * Get masterAccess
   * @return masterAccess
   */
  @javax.annotation.Nullable
  public MasterAccessEnum getMasterAccess() {
    return masterAccess;
  }

  public void setMasterAccess(MasterAccessEnum masterAccess) {
    this.masterAccess = masterAccess;
  }


  public Asset maxResolutionTier(MaxResolutionTierEnum maxResolutionTier) {
    this.maxResolutionTier = maxResolutionTier;
    return this;
  }

  /**
   * Max resolution tier can be used to control the maximum &#x60;resolution_tier&#x60; your asset is encoded, stored, and streamed at. If not set, this defaults to &#x60;1080p&#x60;.
   * @return maxResolutionTier
   */
  @javax.annotation.Nullable
  public MaxResolutionTierEnum getMaxResolutionTier() {
    return maxResolutionTier;
  }

  public void setMaxResolutionTier(MaxResolutionTierEnum maxResolutionTier) {
    this.maxResolutionTier = maxResolutionTier;
  }


  public Asset maxStoredFrameRate(Double maxStoredFrameRate) {
    this.maxStoredFrameRate = maxStoredFrameRate;
    return this;
  }

  /**
   * The maximum frame rate that has been stored for the asset. The asset may be delivered at lower frame rates depending on the device and bandwidth, however it cannot be delivered at a higher value than is stored. This field may return -1 if the frame rate of the input cannot be reliably determined.
   * @return maxStoredFrameRate
   */
  @javax.annotation.Nullable
  public Double getMaxStoredFrameRate() {
    return maxStoredFrameRate;
  }

  public void setMaxStoredFrameRate(Double maxStoredFrameRate) {
    this.maxStoredFrameRate = maxStoredFrameRate;
  }


  @Deprecated
  public Asset maxStoredResolution(MaxStoredResolutionEnum maxStoredResolution) {
    this.maxStoredResolution = maxStoredResolution;
    return this;
  }

  /**
   * This field is deprecated. Please use &#x60;resolution_tier&#x60; instead. The maximum resolution that has been stored for the asset. The asset may be delivered at lower resolutions depending on the device and bandwidth, however it cannot be delivered at a higher value than is stored.
   * @return maxStoredResolution
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public MaxStoredResolutionEnum getMaxStoredResolution() {
    return maxStoredResolution;
  }

  @Deprecated
  public void setMaxStoredResolution(MaxStoredResolutionEnum maxStoredResolution) {
    this.maxStoredResolution = maxStoredResolution;
  }


  public Asset mp4Support(Mp4SupportEnum mp4Support) {
    this.mp4Support = mp4Support;
    return this;
  }

  /**
   * Get mp4Support
   * @return mp4Support
   */
  @javax.annotation.Nullable
  public Mp4SupportEnum getMp4Support() {
    return mp4Support;
  }

  public void setMp4Support(Mp4SupportEnum mp4Support) {
    this.mp4Support = mp4Support;
  }


  public Asset nonStandardInputReasons(AssetNonStandardInputReasons nonStandardInputReasons) {
    this.nonStandardInputReasons = nonStandardInputReasons;
    return this;
  }

  /**
   * Get nonStandardInputReasons
   * @return nonStandardInputReasons
   */
  @javax.annotation.Nullable
  public AssetNonStandardInputReasons getNonStandardInputReasons() {
    return nonStandardInputReasons;
  }

  public void setNonStandardInputReasons(AssetNonStandardInputReasons nonStandardInputReasons) {
    this.nonStandardInputReasons = nonStandardInputReasons;
  }


  public Asset normalizeAudio(Boolean normalizeAudio) {
    this.normalizeAudio = normalizeAudio;
    return this;
  }

  /**
   * Normalize the audio track loudness level. This parameter is only applicable to on-demand (not live) assets.
   * @return normalizeAudio
   */
  @javax.annotation.Nullable
  public Boolean getNormalizeAudio() {
    return normalizeAudio;
  }

  public void setNormalizeAudio(Boolean normalizeAudio) {
    this.normalizeAudio = normalizeAudio;
  }


  public Asset passthrough(String passthrough) {
    this.passthrough = passthrough;
    return this;
  }

  /**
   * Arbitrary user-supplied metadata set for the asset. Max 255 characters.
   * @return passthrough
   */
  @javax.annotation.Nullable
  public String getPassthrough() {
    return passthrough;
  }

  public void setPassthrough(String passthrough) {
    this.passthrough = passthrough;
  }


  @Deprecated
  public Asset perTitleEncode(Boolean perTitleEncode) {
    this.perTitleEncode = perTitleEncode;
    return this;
  }

  /**
   * Get perTitleEncode
   * @return perTitleEncode
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getPerTitleEncode() {
    return perTitleEncode;
  }

  @Deprecated
  public void setPerTitleEncode(Boolean perTitleEncode) {
    this.perTitleEncode = perTitleEncode;
  }


  public Asset playbackIds(List<PlaybackID> playbackIds) {
    this.playbackIds = playbackIds;
    return this;
  }

  public Asset addPlaybackIdsItem(PlaybackID playbackIdsItem) {
    if (this.playbackIds == null) {
      this.playbackIds = new ArrayList<>();
    }
    this.playbackIds.add(playbackIdsItem);
    return this;
  }

  /**
   * An array of Playback ID objects. Use these to create HLS playback URLs. See [Play your videos](https://docs.mux.com/guides/video/play-your-videos) for more details.
   * @return playbackIds
   */
  @javax.annotation.Nullable
  public List<PlaybackID> getPlaybackIds() {
    return playbackIds;
  }

  public void setPlaybackIds(List<PlaybackID> playbackIds) {
    this.playbackIds = playbackIds;
  }


  public Asset recordingTimes(List<AssetRecordingTimesInner> recordingTimes) {
    this.recordingTimes = recordingTimes;
    return this;
  }

  public Asset addRecordingTimesItem(AssetRecordingTimesInner recordingTimesItem) {
    if (this.recordingTimes == null) {
      this.recordingTimes = new ArrayList<>();
    }
    this.recordingTimes.add(recordingTimesItem);
    return this;
  }

  /**
   * An array of individual live stream recording sessions. A recording session is created on each encoder connection during the live stream. Additionally any time slate media is inserted during brief interruptions in the live stream media or times when the live streaming software disconnects, a recording session representing the slate media will be added with a \&quot;slate\&quot; type.
   * @return recordingTimes
   */
  @javax.annotation.Nullable
  public List<AssetRecordingTimesInner> getRecordingTimes() {
    return recordingTimes;
  }

  public void setRecordingTimes(List<AssetRecordingTimesInner> recordingTimes) {
    this.recordingTimes = recordingTimes;
  }


  public Asset resolutionTier(ResolutionTierEnum resolutionTier) {
    this.resolutionTier = resolutionTier;
    return this;
  }

  /**
   * The resolution tier that the asset was ingested at, affecting billing for ingest &amp; storage. This field also represents the highest resolution tier that the content can be delivered at, however the actual resolution may be lower depending on the device, bandwidth, and exact resolution of the uploaded asset.
   * @return resolutionTier
   */
  @javax.annotation.Nullable
  public ResolutionTierEnum getResolutionTier() {
    return resolutionTier;
  }

  public void setResolutionTier(ResolutionTierEnum resolutionTier) {
    this.resolutionTier = resolutionTier;
  }


  public Asset sourceAssetId(String sourceAssetId) {
    this.sourceAssetId = sourceAssetId;
    return this;
  }

  /**
   * Asset Identifier of the video used as the source for creating the clip.
   * @return sourceAssetId
   */
  @javax.annotation.Nullable
  public String getSourceAssetId() {
    return sourceAssetId;
  }

  public void setSourceAssetId(String sourceAssetId) {
    this.sourceAssetId = sourceAssetId;
  }


  public Asset staticRenditions(AssetStaticRenditions staticRenditions) {
    this.staticRenditions = staticRenditions;
    return this;
  }

  /**
   * Get staticRenditions
   * @return staticRenditions
   */
  @javax.annotation.Nullable
  public AssetStaticRenditions getStaticRenditions() {
    return staticRenditions;
  }

  public void setStaticRenditions(AssetStaticRenditions staticRenditions) {
    this.staticRenditions = staticRenditions;
  }


  public Asset status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the asset.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Asset test(Boolean test) {
    this.test = test;
    return this;
  }

  /**
   * True means this live stream is a test asset. A test asset can help evaluate the Mux Video APIs without incurring any cost. There is no limit on number of test assets created. Test assets are watermarked with the Mux logo, limited to 10 seconds, and deleted after 24 hrs.
   * @return test
   */
  @javax.annotation.Nullable
  public Boolean getTest() {
    return test;
  }

  public void setTest(Boolean test) {
    this.test = test;
  }


  public Asset tracks(List<Track> tracks) {
    this.tracks = tracks;
    return this;
  }

  public Asset addTracksItem(Track tracksItem) {
    if (this.tracks == null) {
      this.tracks = new ArrayList<>();
    }
    this.tracks.add(tracksItem);
    return this;
  }

  /**
   * The individual media tracks that make up an asset.
   * @return tracks
   */
  @javax.annotation.Nullable
  public List<Track> getTracks() {
    return tracks;
  }

  public void setTracks(List<Track> tracks) {
    this.tracks = tracks;
  }


  public Asset uploadId(String uploadId) {
    this.uploadId = uploadId;
    return this;
  }

  /**
   * Unique identifier for the Direct Upload. This is an optional parameter added when the asset is created from a direct upload.
   * @return uploadId
   */
  @javax.annotation.Nullable
  public String getUploadId() {
    return uploadId;
  }

  public void setUploadId(String uploadId) {
    this.uploadId = uploadId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Asset asset = (Asset) o;
    return Objects.equals(this.aspectRatio, asset.aspectRatio) &&
        Objects.equals(this.createdAt, asset.createdAt) &&
        Objects.equals(this.duration, asset.duration) &&
        Objects.equals(this.encodingTier, asset.encodingTier) &&
        Objects.equals(this.errors, asset.errors) &&
        Objects.equals(this.id, asset.id) &&
        Objects.equals(this.isLive, asset.isLive) &&
        Objects.equals(this.liveStreamId, asset.liveStreamId) &&
        Objects.equals(this.master, asset.master) &&
        Objects.equals(this.masterAccess, asset.masterAccess) &&
        Objects.equals(this.maxResolutionTier, asset.maxResolutionTier) &&
        Objects.equals(this.maxStoredFrameRate, asset.maxStoredFrameRate) &&
        Objects.equals(this.maxStoredResolution, asset.maxStoredResolution) &&
        Objects.equals(this.mp4Support, asset.mp4Support) &&
        Objects.equals(this.nonStandardInputReasons, asset.nonStandardInputReasons) &&
        Objects.equals(this.normalizeAudio, asset.normalizeAudio) &&
        Objects.equals(this.passthrough, asset.passthrough) &&
        Objects.equals(this.perTitleEncode, asset.perTitleEncode) &&
        Objects.equals(this.playbackIds, asset.playbackIds) &&
        Objects.equals(this.recordingTimes, asset.recordingTimes) &&
        Objects.equals(this.resolutionTier, asset.resolutionTier) &&
        Objects.equals(this.sourceAssetId, asset.sourceAssetId) &&
        Objects.equals(this.staticRenditions, asset.staticRenditions) &&
        Objects.equals(this.status, asset.status) &&
        Objects.equals(this.test, asset.test) &&
        Objects.equals(this.tracks, asset.tracks) &&
        Objects.equals(this.uploadId, asset.uploadId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aspectRatio, createdAt, duration, encodingTier, errors, id, isLive, liveStreamId, master, masterAccess, maxResolutionTier, maxStoredFrameRate, maxStoredResolution, mp4Support, nonStandardInputReasons, normalizeAudio, passthrough, perTitleEncode, playbackIds, recordingTimes, resolutionTier, sourceAssetId, staticRenditions, status, test, tracks, uploadId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Asset {\n");
    sb.append("    aspectRatio: ").append(toIndentedString(aspectRatio)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    encodingTier: ").append(toIndentedString(encodingTier)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isLive: ").append(toIndentedString(isLive)).append("\n");
    sb.append("    liveStreamId: ").append(toIndentedString(liveStreamId)).append("\n");
    sb.append("    master: ").append(toIndentedString(master)).append("\n");
    sb.append("    masterAccess: ").append(toIndentedString(masterAccess)).append("\n");
    sb.append("    maxResolutionTier: ").append(toIndentedString(maxResolutionTier)).append("\n");
    sb.append("    maxStoredFrameRate: ").append(toIndentedString(maxStoredFrameRate)).append("\n");
    sb.append("    maxStoredResolution: ").append(toIndentedString(maxStoredResolution)).append("\n");
    sb.append("    mp4Support: ").append(toIndentedString(mp4Support)).append("\n");
    sb.append("    nonStandardInputReasons: ").append(toIndentedString(nonStandardInputReasons)).append("\n");
    sb.append("    normalizeAudio: ").append(toIndentedString(normalizeAudio)).append("\n");
    sb.append("    passthrough: ").append(toIndentedString(passthrough)).append("\n");
    sb.append("    perTitleEncode: ").append(toIndentedString(perTitleEncode)).append("\n");
    sb.append("    playbackIds: ").append(toIndentedString(playbackIds)).append("\n");
    sb.append("    recordingTimes: ").append(toIndentedString(recordingTimes)).append("\n");
    sb.append("    resolutionTier: ").append(toIndentedString(resolutionTier)).append("\n");
    sb.append("    sourceAssetId: ").append(toIndentedString(sourceAssetId)).append("\n");
    sb.append("    staticRenditions: ").append(toIndentedString(staticRenditions)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    tracks: ").append(toIndentedString(tracks)).append("\n");
    sb.append("    uploadId: ").append(toIndentedString(uploadId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aspect_ratio");
    openapiFields.add("created_at");
    openapiFields.add("duration");
    openapiFields.add("encoding_tier");
    openapiFields.add("errors");
    openapiFields.add("id");
    openapiFields.add("is_live");
    openapiFields.add("live_stream_id");
    openapiFields.add("master");
    openapiFields.add("master_access");
    openapiFields.add("max_resolution_tier");
    openapiFields.add("max_stored_frame_rate");
    openapiFields.add("max_stored_resolution");
    openapiFields.add("mp4_support");
    openapiFields.add("non_standard_input_reasons");
    openapiFields.add("normalize_audio");
    openapiFields.add("passthrough");
    openapiFields.add("per_title_encode");
    openapiFields.add("playback_ids");
    openapiFields.add("recording_times");
    openapiFields.add("resolution_tier");
    openapiFields.add("source_asset_id");
    openapiFields.add("static_renditions");
    openapiFields.add("status");
    openapiFields.add("test");
    openapiFields.add("tracks");
    openapiFields.add("upload_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Asset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Asset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Asset is not found in the empty JSON string", Asset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Asset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Asset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aspect_ratio") != null && !jsonObj.get("aspect_ratio").isJsonNull()) && !jsonObj.get("aspect_ratio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aspect_ratio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aspect_ratio").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("encoding_tier") != null && !jsonObj.get("encoding_tier").isJsonNull()) && !jsonObj.get("encoding_tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encoding_tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encoding_tier").toString()));
      }
      // validate the optional field `encoding_tier`
      if (jsonObj.get("encoding_tier") != null && !jsonObj.get("encoding_tier").isJsonNull()) {
        EncodingTierEnum.validateJsonElement(jsonObj.get("encoding_tier"));
      }
      // validate the optional field `errors`
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        AssetErrors.validateJsonElement(jsonObj.get("errors"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("live_stream_id") != null && !jsonObj.get("live_stream_id").isJsonNull()) && !jsonObj.get("live_stream_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `live_stream_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("live_stream_id").toString()));
      }
      // validate the optional field `master`
      if (jsonObj.get("master") != null && !jsonObj.get("master").isJsonNull()) {
        AssetMaster.validateJsonElement(jsonObj.get("master"));
      }
      if ((jsonObj.get("master_access") != null && !jsonObj.get("master_access").isJsonNull()) && !jsonObj.get("master_access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `master_access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("master_access").toString()));
      }
      // validate the optional field `master_access`
      if (jsonObj.get("master_access") != null && !jsonObj.get("master_access").isJsonNull()) {
        MasterAccessEnum.validateJsonElement(jsonObj.get("master_access"));
      }
      if ((jsonObj.get("max_resolution_tier") != null && !jsonObj.get("max_resolution_tier").isJsonNull()) && !jsonObj.get("max_resolution_tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_resolution_tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_resolution_tier").toString()));
      }
      // validate the optional field `max_resolution_tier`
      if (jsonObj.get("max_resolution_tier") != null && !jsonObj.get("max_resolution_tier").isJsonNull()) {
        MaxResolutionTierEnum.validateJsonElement(jsonObj.get("max_resolution_tier"));
      }
      if ((jsonObj.get("max_stored_resolution") != null && !jsonObj.get("max_stored_resolution").isJsonNull()) && !jsonObj.get("max_stored_resolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_stored_resolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_stored_resolution").toString()));
      }
      // validate the optional field `max_stored_resolution`
      if (jsonObj.get("max_stored_resolution") != null && !jsonObj.get("max_stored_resolution").isJsonNull()) {
        MaxStoredResolutionEnum.validateJsonElement(jsonObj.get("max_stored_resolution"));
      }
      if ((jsonObj.get("mp4_support") != null && !jsonObj.get("mp4_support").isJsonNull()) && !jsonObj.get("mp4_support").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mp4_support` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mp4_support").toString()));
      }
      // validate the optional field `mp4_support`
      if (jsonObj.get("mp4_support") != null && !jsonObj.get("mp4_support").isJsonNull()) {
        Mp4SupportEnum.validateJsonElement(jsonObj.get("mp4_support"));
      }
      // validate the optional field `non_standard_input_reasons`
      if (jsonObj.get("non_standard_input_reasons") != null && !jsonObj.get("non_standard_input_reasons").isJsonNull()) {
        AssetNonStandardInputReasons.validateJsonElement(jsonObj.get("non_standard_input_reasons"));
      }
      if ((jsonObj.get("passthrough") != null && !jsonObj.get("passthrough").isJsonNull()) && !jsonObj.get("passthrough").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passthrough` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passthrough").toString()));
      }
      if (jsonObj.get("playback_ids") != null && !jsonObj.get("playback_ids").isJsonNull()) {
        JsonArray jsonArrayplaybackIds = jsonObj.getAsJsonArray("playback_ids");
        if (jsonArrayplaybackIds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("playback_ids").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `playback_ids` to be an array in the JSON string but got `%s`", jsonObj.get("playback_ids").toString()));
          }

          // validate the optional field `playback_ids` (array)
          for (int i = 0; i < jsonArrayplaybackIds.size(); i++) {
            PlaybackID.validateJsonElement(jsonArrayplaybackIds.get(i));
          };
        }
      }
      if (jsonObj.get("recording_times") != null && !jsonObj.get("recording_times").isJsonNull()) {
        JsonArray jsonArrayrecordingTimes = jsonObj.getAsJsonArray("recording_times");
        if (jsonArrayrecordingTimes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recording_times").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recording_times` to be an array in the JSON string but got `%s`", jsonObj.get("recording_times").toString()));
          }

          // validate the optional field `recording_times` (array)
          for (int i = 0; i < jsonArrayrecordingTimes.size(); i++) {
            AssetRecordingTimesInner.validateJsonElement(jsonArrayrecordingTimes.get(i));
          };
        }
      }
      if ((jsonObj.get("resolution_tier") != null && !jsonObj.get("resolution_tier").isJsonNull()) && !jsonObj.get("resolution_tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolution_tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolution_tier").toString()));
      }
      // validate the optional field `resolution_tier`
      if (jsonObj.get("resolution_tier") != null && !jsonObj.get("resolution_tier").isJsonNull()) {
        ResolutionTierEnum.validateJsonElement(jsonObj.get("resolution_tier"));
      }
      if ((jsonObj.get("source_asset_id") != null && !jsonObj.get("source_asset_id").isJsonNull()) && !jsonObj.get("source_asset_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_asset_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_asset_id").toString()));
      }
      // validate the optional field `static_renditions`
      if (jsonObj.get("static_renditions") != null && !jsonObj.get("static_renditions").isJsonNull()) {
        AssetStaticRenditions.validateJsonElement(jsonObj.get("static_renditions"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("tracks") != null && !jsonObj.get("tracks").isJsonNull()) {
        JsonArray jsonArraytracks = jsonObj.getAsJsonArray("tracks");
        if (jsonArraytracks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tracks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tracks` to be an array in the JSON string but got `%s`", jsonObj.get("tracks").toString()));
          }

          // validate the optional field `tracks` (array)
          for (int i = 0; i < jsonArraytracks.size(); i++) {
            Track.validateJsonElement(jsonArraytracks.get(i));
          };
        }
      }
      if ((jsonObj.get("upload_id") != null && !jsonObj.get("upload_id").isJsonNull()) && !jsonObj.get("upload_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upload_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upload_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Asset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Asset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Asset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Asset.class));

       return (TypeAdapter<T>) new TypeAdapter<Asset>() {
           @Override
           public void write(JsonWriter out, Asset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Asset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Asset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Asset
   * @throws IOException if the JSON string is invalid with respect to Asset
   */
  public static Asset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Asset.class);
  }

  /**
   * Convert an instance of Asset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

