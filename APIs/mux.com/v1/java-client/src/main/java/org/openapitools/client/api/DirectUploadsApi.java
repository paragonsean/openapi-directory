/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateUploadRequest;
import org.openapitools.client.model.ListUploadsResponse;
import org.openapitools.client.model.UploadResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DirectUploadsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DirectUploadsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DirectUploadsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cancelDirectUploadCall(String UPLOAD_ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/uploads/{UPLOAD_ID}/cancel"
            .replace("{" + "UPLOAD_ID" + "}", localVarApiClient.escapeString(UPLOAD_ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelDirectUploadValidateBeforeCall(String UPLOAD_ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'UPLOAD_ID' is set
        if (UPLOAD_ID == null) {
            throw new ApiException("Missing the required parameter 'UPLOAD_ID' when calling cancelDirectUpload(Async)");
        }

        return cancelDirectUploadCall(UPLOAD_ID, _callback);

    }


    private ApiResponse<UploadResponse> cancelDirectUploadWithHttpInfo(String UPLOAD_ID) throws ApiException {
        okhttp3.Call localVarCall = cancelDirectUploadValidateBeforeCall(UPLOAD_ID, null);
        Type localVarReturnType = new TypeToken<UploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelDirectUploadAsync(String UPLOAD_ID, final ApiCallback<UploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelDirectUploadValidateBeforeCall(UPLOAD_ID, _callback);
        Type localVarReturnType = new TypeToken<UploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcancelDirectUploadRequest {
        private final String UPLOAD_ID;

        private APIcancelDirectUploadRequest(String UPLOAD_ID) {
            this.UPLOAD_ID = UPLOAD_ID;
        }

        /**
         * Build call for cancelDirectUpload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Cancellation no longer possible </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelDirectUploadCall(UPLOAD_ID, _callback);
        }

        /**
         * Execute cancelDirectUpload request
         * @return UploadResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Cancellation no longer possible </td><td>  -  </td></tr>
         </table>
         */
        public UploadResponse execute() throws ApiException {
            ApiResponse<UploadResponse> localVarResp = cancelDirectUploadWithHttpInfo(UPLOAD_ID);
            return localVarResp.getData();
        }

        /**
         * Execute cancelDirectUpload request with HTTP info returned
         * @return ApiResponse&lt;UploadResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Cancellation no longer possible </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadResponse> executeWithHttpInfo() throws ApiException {
            return cancelDirectUploadWithHttpInfo(UPLOAD_ID);
        }

        /**
         * Execute cancelDirectUpload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Cancellation no longer possible </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadResponse> _callback) throws ApiException {
            return cancelDirectUploadAsync(UPLOAD_ID, _callback);
        }
    }

    /**
     * Cancel a direct upload
     * Cancels a direct upload and marks it as cancelled. If a pending upload finishes after this request, no asset will be created. This request will only succeed if the upload is still in the &#x60;waiting&#x60; state. 
     * @param UPLOAD_ID ID of the Upload (required)
     * @return APIcancelDirectUploadRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Cancellation no longer possible </td><td>  -  </td></tr>
     </table>
     */
    public APIcancelDirectUploadRequest cancelDirectUpload(String UPLOAD_ID) {
        return new APIcancelDirectUploadRequest(UPLOAD_ID);
    }
    private okhttp3.Call createDirectUploadCall(CreateUploadRequest createUploadRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUploadRequest;

        // create path and map variables
        String localVarPath = "/video/v1/uploads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDirectUploadValidateBeforeCall(CreateUploadRequest createUploadRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createUploadRequest' is set
        if (createUploadRequest == null) {
            throw new ApiException("Missing the required parameter 'createUploadRequest' when calling createDirectUpload(Async)");
        }

        return createDirectUploadCall(createUploadRequest, _callback);

    }


    private ApiResponse<UploadResponse> createDirectUploadWithHttpInfo(CreateUploadRequest createUploadRequest) throws ApiException {
        okhttp3.Call localVarCall = createDirectUploadValidateBeforeCall(createUploadRequest, null);
        Type localVarReturnType = new TypeToken<UploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDirectUploadAsync(CreateUploadRequest createUploadRequest, final ApiCallback<UploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDirectUploadValidateBeforeCall(createUploadRequest, _callback);
        Type localVarReturnType = new TypeToken<UploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateDirectUploadRequest {
        private final CreateUploadRequest createUploadRequest;

        private APIcreateDirectUploadRequest(CreateUploadRequest createUploadRequest) {
            this.createUploadRequest = createUploadRequest;
        }

        /**
         * Build call for createDirectUpload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createDirectUploadCall(createUploadRequest, _callback);
        }

        /**
         * Execute createDirectUpload request
         * @return UploadResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public UploadResponse execute() throws ApiException {
            ApiResponse<UploadResponse> localVarResp = createDirectUploadWithHttpInfo(createUploadRequest);
            return localVarResp.getData();
        }

        /**
         * Execute createDirectUpload request with HTTP info returned
         * @return ApiResponse&lt;UploadResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadResponse> executeWithHttpInfo() throws ApiException {
            return createDirectUploadWithHttpInfo(createUploadRequest);
        }

        /**
         * Execute createDirectUpload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadResponse> _callback) throws ApiException {
            return createDirectUploadAsync(createUploadRequest, _callback);
        }
    }

    /**
     * Create a new direct upload URL
     * Creates a new direct upload, through which video content can be uploaded for ingest to Mux.
     * @param createUploadRequest  (required)
     * @return APIcreateDirectUploadRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateDirectUploadRequest createDirectUpload(CreateUploadRequest createUploadRequest) {
        return new APIcreateDirectUploadRequest(createUploadRequest);
    }
    private okhttp3.Call getDirectUploadCall(String UPLOAD_ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/uploads/{UPLOAD_ID}"
            .replace("{" + "UPLOAD_ID" + "}", localVarApiClient.escapeString(UPLOAD_ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDirectUploadValidateBeforeCall(String UPLOAD_ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'UPLOAD_ID' is set
        if (UPLOAD_ID == null) {
            throw new ApiException("Missing the required parameter 'UPLOAD_ID' when calling getDirectUpload(Async)");
        }

        return getDirectUploadCall(UPLOAD_ID, _callback);

    }


    private ApiResponse<UploadResponse> getDirectUploadWithHttpInfo(String UPLOAD_ID) throws ApiException {
        okhttp3.Call localVarCall = getDirectUploadValidateBeforeCall(UPLOAD_ID, null);
        Type localVarReturnType = new TypeToken<UploadResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDirectUploadAsync(String UPLOAD_ID, final ApiCallback<UploadResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDirectUploadValidateBeforeCall(UPLOAD_ID, _callback);
        Type localVarReturnType = new TypeToken<UploadResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetDirectUploadRequest {
        private final String UPLOAD_ID;

        private APIgetDirectUploadRequest(String UPLOAD_ID) {
            this.UPLOAD_ID = UPLOAD_ID;
        }

        /**
         * Build call for getDirectUpload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDirectUploadCall(UPLOAD_ID, _callback);
        }

        /**
         * Execute getDirectUpload request
         * @return UploadResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public UploadResponse execute() throws ApiException {
            ApiResponse<UploadResponse> localVarResp = getDirectUploadWithHttpInfo(UPLOAD_ID);
            return localVarResp.getData();
        }

        /**
         * Execute getDirectUpload request with HTTP info returned
         * @return ApiResponse&lt;UploadResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UploadResponse> executeWithHttpInfo() throws ApiException {
            return getDirectUploadWithHttpInfo(UPLOAD_ID);
        }

        /**
         * Execute getDirectUpload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UploadResponse> _callback) throws ApiException {
            return getDirectUploadAsync(UPLOAD_ID, _callback);
        }
    }

    /**
     * Retrieve a single direct upload&#39;s info
     * Fetches information about a single direct upload in the current environment.
     * @param UPLOAD_ID ID of the Upload (required)
     * @return APIgetDirectUploadRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetDirectUploadRequest getDirectUpload(String UPLOAD_ID) {
        return new APIgetDirectUploadRequest(UPLOAD_ID);
    }
    private okhttp3.Call listDirectUploadsCall(Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/uploads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDirectUploadsValidateBeforeCall(Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        return listDirectUploadsCall(limit, page, _callback);

    }


    private ApiResponse<ListUploadsResponse> listDirectUploadsWithHttpInfo(Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listDirectUploadsValidateBeforeCall(limit, page, null);
        Type localVarReturnType = new TypeToken<ListUploadsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDirectUploadsAsync(Integer limit, Integer page, final ApiCallback<ListUploadsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDirectUploadsValidateBeforeCall(limit, page, _callback);
        Type localVarReturnType = new TypeToken<ListUploadsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistDirectUploadsRequest {
        private Integer limit;
        private Integer page;

        private APIlistDirectUploadsRequest() {
        }

        /**
         * Set limit
         * @param limit Number of items to include in the response (optional, default to 25)
         * @return APIlistDirectUploadsRequest
         */
        public APIlistDirectUploadsRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
         * @return APIlistDirectUploadsRequest
         */
        public APIlistDirectUploadsRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Build call for listDirectUploads
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDirectUploadsCall(limit, page, _callback);
        }

        /**
         * Execute listDirectUploads request
         * @return ListUploadsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ListUploadsResponse execute() throws ApiException {
            ApiResponse<ListUploadsResponse> localVarResp = listDirectUploadsWithHttpInfo(limit, page);
            return localVarResp.getData();
        }

        /**
         * Execute listDirectUploads request with HTTP info returned
         * @return ApiResponse&lt;ListUploadsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListUploadsResponse> executeWithHttpInfo() throws ApiException {
            return listDirectUploadsWithHttpInfo(limit, page);
        }

        /**
         * Execute listDirectUploads request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListUploadsResponse> _callback) throws ApiException {
            return listDirectUploadsAsync(limit, page, _callback);
        }
    }

    /**
     * List direct uploads
     * Lists direct uploads in the current environment.
     * @return APIlistDirectUploadsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIlistDirectUploadsRequest listDirectUploads() {
        return new APIlistDirectUploadsRequest();
    }
}
