/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Track
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:45.471488-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Track {
  public static final String SERIALIZED_NAME_CLOSED_CAPTIONS = "closed_captions";
  @SerializedName(SERIALIZED_NAME_CLOSED_CAPTIONS)
  private Boolean closedCaptions;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Double duration;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "language_code";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_MAX_CHANNEL_LAYOUT = "max_channel_layout";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_MAX_CHANNEL_LAYOUT)
  private String maxChannelLayout;

  public static final String SERIALIZED_NAME_MAX_CHANNELS = "max_channels";
  @SerializedName(SERIALIZED_NAME_MAX_CHANNELS)
  private Long maxChannels;

  public static final String SERIALIZED_NAME_MAX_FRAME_RATE = "max_frame_rate";
  @SerializedName(SERIALIZED_NAME_MAX_FRAME_RATE)
  private Double maxFrameRate;

  public static final String SERIALIZED_NAME_MAX_HEIGHT = "max_height";
  @SerializedName(SERIALIZED_NAME_MAX_HEIGHT)
  private Long maxHeight;

  public static final String SERIALIZED_NAME_MAX_WIDTH = "max_width";
  @SerializedName(SERIALIZED_NAME_MAX_WIDTH)
  private Long maxWidth;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PASSTHROUGH = "passthrough";
  @SerializedName(SERIALIZED_NAME_PASSTHROUGH)
  private String passthrough;

  /**
   * The status of the track. This parameter is only set for &#x60;text&#x60; type tracks.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    PREPARING("preparing"),
    
    READY("ready"),
    
    ERRORED("errored"),
    
    DELETED("deleted");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  /**
   * The source of the text contained in a Track of type &#x60;text&#x60;. Valid &#x60;text_source&#x60; values are listed below. * &#x60;uploaded&#x60;: Tracks uploaded to Mux as caption or subtitle files using the Create Asset Track API. * &#x60;embedded&#x60;: Tracks extracted from an embedded stream of CEA-608 closed captions. * &#x60;generated_vod&#x60;: Tracks generated by automatic speech recognition on an on-demand asset. * &#x60;generated_live&#x60;: Tracks generated by automatic speech recognition on a live stream configured with &#x60;generated_subtitles&#x60;. If an Asset has both &#x60;generated_live&#x60; and &#x60;generated_live_final&#x60; tracks that are &#x60;ready&#x60;, then only the &#x60;generated_live_final&#x60; track will be included during playback. * &#x60;generated_live_final&#x60;: Tracks generated by automatic speech recognition on a live stream using &#x60;generated_subtitles&#x60;. The accuracy, timing, and formatting of these subtitles is improved compared to the corresponding &#x60;generated_live&#x60; tracks. However, &#x60;generated_live_final&#x60; tracks will not be available in &#x60;ready&#x60; status until the live stream ends. If an Asset has both &#x60;generated_live&#x60; and &#x60;generated_live_final&#x60; tracks that are &#x60;ready&#x60;, then only the &#x60;generated_live_final&#x60; track will be included during playback. 
   */
  @JsonAdapter(TextSourceEnum.Adapter.class)
  public enum TextSourceEnum {
    UPLOADED("uploaded"),
    
    EMBEDDED("embedded"),
    
    GENERATED_LIVE("generated_live"),
    
    GENERATED_LIVE_FINAL("generated_live_final");

    private String value;

    TextSourceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TextSourceEnum fromValue(String value) {
      for (TextSourceEnum b : TextSourceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TextSourceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TextSourceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TextSourceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TextSourceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TextSourceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEXT_SOURCE = "text_source";
  @SerializedName(SERIALIZED_NAME_TEXT_SOURCE)
  private TextSourceEnum textSource;

  /**
   * This parameter is only set for &#x60;text&#x60; type tracks.
   */
  @JsonAdapter(TextTypeEnum.Adapter.class)
  public enum TextTypeEnum {
    SUBTITLES("subtitles");

    private String value;

    TextTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TextTypeEnum fromValue(String value) {
      for (TextTypeEnum b : TextTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TextTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TextTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TextTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TextTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TextTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEXT_TYPE = "text_type";
  @SerializedName(SERIALIZED_NAME_TEXT_TYPE)
  private TextTypeEnum textType;

  /**
   * The type of track
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    VIDEO("video"),
    
    AUDIO("audio"),
    
    TEXT("text");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Track() {
  }

  public Track closedCaptions(Boolean closedCaptions) {
    this.closedCaptions = closedCaptions;
    return this;
  }

  /**
   * Indicates the track provides Subtitles for the Deaf or Hard-of-hearing (SDH). This parameter is only set tracks where &#x60;type&#x60; is &#x60;text&#x60; and &#x60;text_type&#x60; is &#x60;subtitles&#x60;.
   * @return closedCaptions
   */
  @javax.annotation.Nullable
  public Boolean getClosedCaptions() {
    return closedCaptions;
  }

  public void setClosedCaptions(Boolean closedCaptions) {
    this.closedCaptions = closedCaptions;
  }


  public Track duration(Double duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The duration in seconds of the track media. This parameter is not set for &#x60;text&#x60; type tracks. This field is optional and may not be set. The top level &#x60;duration&#x60; field of an asset will always be set.
   * @return duration
   */
  @javax.annotation.Nullable
  public Double getDuration() {
    return duration;
  }

  public void setDuration(Double duration) {
    this.duration = duration;
  }


  public Track id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique identifier for the Track
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Track languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * The language code value represents [BCP 47](https://tools.ietf.org/html/bcp47) specification compliant value. For example, &#x60;en&#x60; for English or &#x60;en-US&#x60; for the US version of English. This parameter is only set for &#x60;text&#x60; and &#x60;audio&#x60; track types.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  @Deprecated
  public Track maxChannelLayout(String maxChannelLayout) {
    this.maxChannelLayout = maxChannelLayout;
    return this;
  }

  /**
   * Only set for the &#x60;audio&#x60; type track.
   * @return maxChannelLayout
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getMaxChannelLayout() {
    return maxChannelLayout;
  }

  @Deprecated
  public void setMaxChannelLayout(String maxChannelLayout) {
    this.maxChannelLayout = maxChannelLayout;
  }


  public Track maxChannels(Long maxChannels) {
    this.maxChannels = maxChannels;
    return this;
  }

  /**
   * The maximum number of audio channels the track supports. Only set for the &#x60;audio&#x60; type track.
   * @return maxChannels
   */
  @javax.annotation.Nullable
  public Long getMaxChannels() {
    return maxChannels;
  }

  public void setMaxChannels(Long maxChannels) {
    this.maxChannels = maxChannels;
  }


  public Track maxFrameRate(Double maxFrameRate) {
    this.maxFrameRate = maxFrameRate;
    return this;
  }

  /**
   * The maximum frame rate available for the track. Only set for the &#x60;video&#x60; type track. This field may return &#x60;-1&#x60; if the frame rate of the input cannot be reliably determined.
   * @return maxFrameRate
   */
  @javax.annotation.Nullable
  public Double getMaxFrameRate() {
    return maxFrameRate;
  }

  public void setMaxFrameRate(Double maxFrameRate) {
    this.maxFrameRate = maxFrameRate;
  }


  public Track maxHeight(Long maxHeight) {
    this.maxHeight = maxHeight;
    return this;
  }

  /**
   * The maximum height in pixels available for the track. Only set for the &#x60;video&#x60; type track.
   * @return maxHeight
   */
  @javax.annotation.Nullable
  public Long getMaxHeight() {
    return maxHeight;
  }

  public void setMaxHeight(Long maxHeight) {
    this.maxHeight = maxHeight;
  }


  public Track maxWidth(Long maxWidth) {
    this.maxWidth = maxWidth;
    return this;
  }

  /**
   * The maximum width in pixels available for the track. Only set for the &#x60;video&#x60; type track.
   * @return maxWidth
   */
  @javax.annotation.Nullable
  public Long getMaxWidth() {
    return maxWidth;
  }

  public void setMaxWidth(Long maxWidth) {
    this.maxWidth = maxWidth;
  }


  public Track name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the track containing a human-readable description. The HLS manifest will associate a subtitle &#x60;text&#x60; or &#x60;audio&#x60; track with this value. For example, the value should be \&quot;English\&quot; for a subtitle text track for the &#x60;language_code&#x60; value of &#x60;en-US&#x60;. This parameter is only set for &#x60;text&#x60; and &#x60;audio&#x60; track types.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Track passthrough(String passthrough) {
    this.passthrough = passthrough;
    return this;
  }

  /**
   * Arbitrary user-supplied metadata set for the track either when creating the asset or track. This parameter is only set for &#x60;text&#x60; type tracks. Max 255 characters.
   * @return passthrough
   */
  @javax.annotation.Nullable
  public String getPassthrough() {
    return passthrough;
  }

  public void setPassthrough(String passthrough) {
    this.passthrough = passthrough;
  }


  public Track status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the track. This parameter is only set for &#x60;text&#x60; type tracks.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Track textSource(TextSourceEnum textSource) {
    this.textSource = textSource;
    return this;
  }

  /**
   * The source of the text contained in a Track of type &#x60;text&#x60;. Valid &#x60;text_source&#x60; values are listed below. * &#x60;uploaded&#x60;: Tracks uploaded to Mux as caption or subtitle files using the Create Asset Track API. * &#x60;embedded&#x60;: Tracks extracted from an embedded stream of CEA-608 closed captions. * &#x60;generated_vod&#x60;: Tracks generated by automatic speech recognition on an on-demand asset. * &#x60;generated_live&#x60;: Tracks generated by automatic speech recognition on a live stream configured with &#x60;generated_subtitles&#x60;. If an Asset has both &#x60;generated_live&#x60; and &#x60;generated_live_final&#x60; tracks that are &#x60;ready&#x60;, then only the &#x60;generated_live_final&#x60; track will be included during playback. * &#x60;generated_live_final&#x60;: Tracks generated by automatic speech recognition on a live stream using &#x60;generated_subtitles&#x60;. The accuracy, timing, and formatting of these subtitles is improved compared to the corresponding &#x60;generated_live&#x60; tracks. However, &#x60;generated_live_final&#x60; tracks will not be available in &#x60;ready&#x60; status until the live stream ends. If an Asset has both &#x60;generated_live&#x60; and &#x60;generated_live_final&#x60; tracks that are &#x60;ready&#x60;, then only the &#x60;generated_live_final&#x60; track will be included during playback. 
   * @return textSource
   */
  @javax.annotation.Nullable
  public TextSourceEnum getTextSource() {
    return textSource;
  }

  public void setTextSource(TextSourceEnum textSource) {
    this.textSource = textSource;
  }


  public Track textType(TextTypeEnum textType) {
    this.textType = textType;
    return this;
  }

  /**
   * This parameter is only set for &#x60;text&#x60; type tracks.
   * @return textType
   */
  @javax.annotation.Nullable
  public TextTypeEnum getTextType() {
    return textType;
  }

  public void setTextType(TextTypeEnum textType) {
    this.textType = textType;
  }


  public Track type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of track
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Track track = (Track) o;
    return Objects.equals(this.closedCaptions, track.closedCaptions) &&
        Objects.equals(this.duration, track.duration) &&
        Objects.equals(this.id, track.id) &&
        Objects.equals(this.languageCode, track.languageCode) &&
        Objects.equals(this.maxChannelLayout, track.maxChannelLayout) &&
        Objects.equals(this.maxChannels, track.maxChannels) &&
        Objects.equals(this.maxFrameRate, track.maxFrameRate) &&
        Objects.equals(this.maxHeight, track.maxHeight) &&
        Objects.equals(this.maxWidth, track.maxWidth) &&
        Objects.equals(this.name, track.name) &&
        Objects.equals(this.passthrough, track.passthrough) &&
        Objects.equals(this.status, track.status) &&
        Objects.equals(this.textSource, track.textSource) &&
        Objects.equals(this.textType, track.textType) &&
        Objects.equals(this.type, track.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(closedCaptions, duration, id, languageCode, maxChannelLayout, maxChannels, maxFrameRate, maxHeight, maxWidth, name, passthrough, status, textSource, textType, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Track {\n");
    sb.append("    closedCaptions: ").append(toIndentedString(closedCaptions)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    maxChannelLayout: ").append(toIndentedString(maxChannelLayout)).append("\n");
    sb.append("    maxChannels: ").append(toIndentedString(maxChannels)).append("\n");
    sb.append("    maxFrameRate: ").append(toIndentedString(maxFrameRate)).append("\n");
    sb.append("    maxHeight: ").append(toIndentedString(maxHeight)).append("\n");
    sb.append("    maxWidth: ").append(toIndentedString(maxWidth)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    passthrough: ").append(toIndentedString(passthrough)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    textSource: ").append(toIndentedString(textSource)).append("\n");
    sb.append("    textType: ").append(toIndentedString(textType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("closed_captions");
    openapiFields.add("duration");
    openapiFields.add("id");
    openapiFields.add("language_code");
    openapiFields.add("max_channel_layout");
    openapiFields.add("max_channels");
    openapiFields.add("max_frame_rate");
    openapiFields.add("max_height");
    openapiFields.add("max_width");
    openapiFields.add("name");
    openapiFields.add("passthrough");
    openapiFields.add("status");
    openapiFields.add("text_source");
    openapiFields.add("text_type");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Track
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Track.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Track is not found in the empty JSON string", Track.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Track.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Track` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("language_code") != null && !jsonObj.get("language_code").isJsonNull()) && !jsonObj.get("language_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language_code").toString()));
      }
      if ((jsonObj.get("max_channel_layout") != null && !jsonObj.get("max_channel_layout").isJsonNull()) && !jsonObj.get("max_channel_layout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_channel_layout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_channel_layout").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("passthrough") != null && !jsonObj.get("passthrough").isJsonNull()) && !jsonObj.get("passthrough").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passthrough` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passthrough").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("text_source") != null && !jsonObj.get("text_source").isJsonNull()) && !jsonObj.get("text_source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_source").toString()));
      }
      // validate the optional field `text_source`
      if (jsonObj.get("text_source") != null && !jsonObj.get("text_source").isJsonNull()) {
        TextSourceEnum.validateJsonElement(jsonObj.get("text_source"));
      }
      if ((jsonObj.get("text_type") != null && !jsonObj.get("text_type").isJsonNull()) && !jsonObj.get("text_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_type").toString()));
      }
      // validate the optional field `text_type`
      if (jsonObj.get("text_type") != null && !jsonObj.get("text_type").isJsonNull()) {
        TextTypeEnum.validateJsonElement(jsonObj.get("text_type"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Track.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Track' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Track> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Track.class));

       return (TypeAdapter<T>) new TypeAdapter<Track>() {
           @Override
           public void write(JsonWriter out, Track value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Track read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Track given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Track
   * @throws IOException if the JSON string is invalid with respect to Track
   */
  public static Track fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Track.class);
  }

  /**
   * Convert an instance of Track to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

