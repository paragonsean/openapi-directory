/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object containing one or more reasons the input file is non-standard. See [the guide on minimizing processing time](https://docs.mux.com/guides/video/minimize-processing-time) for more information on what a standard input is defined as. This object only exists on on-demand assets that have non-standard inputs, so if missing you can assume the input qualifies as standard.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:45.471488-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssetNonStandardInputReasons {
  public static final String SERIALIZED_NAME_AUDIO_CODEC = "audio_codec";
  @SerializedName(SERIALIZED_NAME_AUDIO_CODEC)
  private String audioCodec;

  /**
   * Audio Edit List reason indicates that the input file&#39;s audio track contains a complex Edit Decision List.
   */
  @JsonAdapter(AudioEditListEnum.Adapter.class)
  public enum AudioEditListEnum {
    NON_STANDARD("non-standard");

    private String value;

    AudioEditListEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AudioEditListEnum fromValue(String value) {
      for (AudioEditListEnum b : AudioEditListEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AudioEditListEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AudioEditListEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AudioEditListEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AudioEditListEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AudioEditListEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUDIO_EDIT_LIST = "audio_edit_list";
  @SerializedName(SERIALIZED_NAME_AUDIO_EDIT_LIST)
  private AudioEditListEnum audioEditList;

  public static final String SERIALIZED_NAME_PIXEL_ASPECT_RATIO = "pixel_aspect_ratio";
  @SerializedName(SERIALIZED_NAME_PIXEL_ASPECT_RATIO)
  private String pixelAspectRatio;

  /**
   * A catch-all reason when the input file in created with non-standard encoding parameters.
   */
  @JsonAdapter(UnexpectedMediaFileParametersEnum.Adapter.class)
  public enum UnexpectedMediaFileParametersEnum {
    NON_STANDARD("non-standard");

    private String value;

    UnexpectedMediaFileParametersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnexpectedMediaFileParametersEnum fromValue(String value) {
      for (UnexpectedMediaFileParametersEnum b : UnexpectedMediaFileParametersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnexpectedMediaFileParametersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnexpectedMediaFileParametersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnexpectedMediaFileParametersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnexpectedMediaFileParametersEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UnexpectedMediaFileParametersEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UNEXPECTED_MEDIA_FILE_PARAMETERS = "unexpected_media_file_parameters";
  @SerializedName(SERIALIZED_NAME_UNEXPECTED_MEDIA_FILE_PARAMETERS)
  private UnexpectedMediaFileParametersEnum unexpectedMediaFileParameters;

  public static final String SERIALIZED_NAME_UNSUPPORTED_PIXEL_FORMAT = "unsupported_pixel_format";
  @SerializedName(SERIALIZED_NAME_UNSUPPORTED_PIXEL_FORMAT)
  private String unsupportedPixelFormat;

  /**
   * The video bitrate of the input file is &#x60;high&#x60;. This parameter is present when the average bitrate of any key frame interval (also known as Group of Pictures or GOP) is higher than what&#39;s considered standard which typically is 16 Mbps.
   */
  @JsonAdapter(VideoBitrateEnum.Adapter.class)
  public enum VideoBitrateEnum {
    HIGH("high");

    private String value;

    VideoBitrateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VideoBitrateEnum fromValue(String value) {
      for (VideoBitrateEnum b : VideoBitrateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VideoBitrateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VideoBitrateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VideoBitrateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VideoBitrateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VideoBitrateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIDEO_BITRATE = "video_bitrate";
  @SerializedName(SERIALIZED_NAME_VIDEO_BITRATE)
  private VideoBitrateEnum videoBitrate;

  public static final String SERIALIZED_NAME_VIDEO_CODEC = "video_codec";
  @SerializedName(SERIALIZED_NAME_VIDEO_CODEC)
  private String videoCodec;

  /**
   * Video Edit List reason indicates that the input file&#39;s video track contains a complex Edit Decision List.
   */
  @JsonAdapter(VideoEditListEnum.Adapter.class)
  public enum VideoEditListEnum {
    NON_STANDARD("non-standard");

    private String value;

    VideoEditListEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VideoEditListEnum fromValue(String value) {
      for (VideoEditListEnum b : VideoEditListEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VideoEditListEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VideoEditListEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VideoEditListEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VideoEditListEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VideoEditListEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIDEO_EDIT_LIST = "video_edit_list";
  @SerializedName(SERIALIZED_NAME_VIDEO_EDIT_LIST)
  private VideoEditListEnum videoEditList;

  public static final String SERIALIZED_NAME_VIDEO_FRAME_RATE = "video_frame_rate";
  @SerializedName(SERIALIZED_NAME_VIDEO_FRAME_RATE)
  private String videoFrameRate;

  /**
   * The video key frame Interval (also called as Group of Picture or GOP) of the input file is &#x60;high&#x60;. This parameter is present when the gop is greater than 20 seconds.
   */
  @JsonAdapter(VideoGopSizeEnum.Adapter.class)
  public enum VideoGopSizeEnum {
    HIGH("high");

    private String value;

    VideoGopSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VideoGopSizeEnum fromValue(String value) {
      for (VideoGopSizeEnum b : VideoGopSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VideoGopSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VideoGopSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VideoGopSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VideoGopSizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VideoGopSizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIDEO_GOP_SIZE = "video_gop_size";
  @SerializedName(SERIALIZED_NAME_VIDEO_GOP_SIZE)
  private VideoGopSizeEnum videoGopSize;

  public static final String SERIALIZED_NAME_VIDEO_RESOLUTION = "video_resolution";
  @SerializedName(SERIALIZED_NAME_VIDEO_RESOLUTION)
  private String videoResolution;

  public AssetNonStandardInputReasons() {
  }

  public AssetNonStandardInputReasons audioCodec(String audioCodec) {
    this.audioCodec = audioCodec;
    return this;
  }

  /**
   * The audio codec used on the input file. Non-AAC audio codecs are non-standard.
   * @return audioCodec
   */
  @javax.annotation.Nullable
  public String getAudioCodec() {
    return audioCodec;
  }

  public void setAudioCodec(String audioCodec) {
    this.audioCodec = audioCodec;
  }


  public AssetNonStandardInputReasons audioEditList(AudioEditListEnum audioEditList) {
    this.audioEditList = audioEditList;
    return this;
  }

  /**
   * Audio Edit List reason indicates that the input file&#39;s audio track contains a complex Edit Decision List.
   * @return audioEditList
   */
  @javax.annotation.Nullable
  public AudioEditListEnum getAudioEditList() {
    return audioEditList;
  }

  public void setAudioEditList(AudioEditListEnum audioEditList) {
    this.audioEditList = audioEditList;
  }


  public AssetNonStandardInputReasons pixelAspectRatio(String pixelAspectRatio) {
    this.pixelAspectRatio = pixelAspectRatio;
    return this;
  }

  /**
   * The video pixel aspect ratio of the input file.
   * @return pixelAspectRatio
   */
  @javax.annotation.Nullable
  public String getPixelAspectRatio() {
    return pixelAspectRatio;
  }

  public void setPixelAspectRatio(String pixelAspectRatio) {
    this.pixelAspectRatio = pixelAspectRatio;
  }


  public AssetNonStandardInputReasons unexpectedMediaFileParameters(UnexpectedMediaFileParametersEnum unexpectedMediaFileParameters) {
    this.unexpectedMediaFileParameters = unexpectedMediaFileParameters;
    return this;
  }

  /**
   * A catch-all reason when the input file in created with non-standard encoding parameters.
   * @return unexpectedMediaFileParameters
   */
  @javax.annotation.Nullable
  public UnexpectedMediaFileParametersEnum getUnexpectedMediaFileParameters() {
    return unexpectedMediaFileParameters;
  }

  public void setUnexpectedMediaFileParameters(UnexpectedMediaFileParametersEnum unexpectedMediaFileParameters) {
    this.unexpectedMediaFileParameters = unexpectedMediaFileParameters;
  }


  public AssetNonStandardInputReasons unsupportedPixelFormat(String unsupportedPixelFormat) {
    this.unsupportedPixelFormat = unsupportedPixelFormat;
    return this;
  }

  /**
   * The video pixel format, as a string, returned by libav. Considered non-standard if not one of yuv420p or yuvj420p.
   * @return unsupportedPixelFormat
   */
  @javax.annotation.Nullable
  public String getUnsupportedPixelFormat() {
    return unsupportedPixelFormat;
  }

  public void setUnsupportedPixelFormat(String unsupportedPixelFormat) {
    this.unsupportedPixelFormat = unsupportedPixelFormat;
  }


  public AssetNonStandardInputReasons videoBitrate(VideoBitrateEnum videoBitrate) {
    this.videoBitrate = videoBitrate;
    return this;
  }

  /**
   * The video bitrate of the input file is &#x60;high&#x60;. This parameter is present when the average bitrate of any key frame interval (also known as Group of Pictures or GOP) is higher than what&#39;s considered standard which typically is 16 Mbps.
   * @return videoBitrate
   */
  @javax.annotation.Nullable
  public VideoBitrateEnum getVideoBitrate() {
    return videoBitrate;
  }

  public void setVideoBitrate(VideoBitrateEnum videoBitrate) {
    this.videoBitrate = videoBitrate;
  }


  public AssetNonStandardInputReasons videoCodec(String videoCodec) {
    this.videoCodec = videoCodec;
    return this;
  }

  /**
   * The video codec used on the input file. For example, the input file encoded with &#x60;hevc&#x60; video codec is non-standard and the value of this parameter is &#x60;hevc&#x60;.
   * @return videoCodec
   */
  @javax.annotation.Nullable
  public String getVideoCodec() {
    return videoCodec;
  }

  public void setVideoCodec(String videoCodec) {
    this.videoCodec = videoCodec;
  }


  public AssetNonStandardInputReasons videoEditList(VideoEditListEnum videoEditList) {
    this.videoEditList = videoEditList;
    return this;
  }

  /**
   * Video Edit List reason indicates that the input file&#39;s video track contains a complex Edit Decision List.
   * @return videoEditList
   */
  @javax.annotation.Nullable
  public VideoEditListEnum getVideoEditList() {
    return videoEditList;
  }

  public void setVideoEditList(VideoEditListEnum videoEditList) {
    this.videoEditList = videoEditList;
  }


  public AssetNonStandardInputReasons videoFrameRate(String videoFrameRate) {
    this.videoFrameRate = videoFrameRate;
    return this;
  }

  /**
   * The video frame rate of the input file. Video with average frames per second (fps) less than 5 or greater than 120 is non-standard. A &#x60;-1&#x60; frame rate value indicates Mux could not determine the frame rate of the video track.
   * @return videoFrameRate
   */
  @javax.annotation.Nullable
  public String getVideoFrameRate() {
    return videoFrameRate;
  }

  public void setVideoFrameRate(String videoFrameRate) {
    this.videoFrameRate = videoFrameRate;
  }


  public AssetNonStandardInputReasons videoGopSize(VideoGopSizeEnum videoGopSize) {
    this.videoGopSize = videoGopSize;
    return this;
  }

  /**
   * The video key frame Interval (also called as Group of Picture or GOP) of the input file is &#x60;high&#x60;. This parameter is present when the gop is greater than 20 seconds.
   * @return videoGopSize
   */
  @javax.annotation.Nullable
  public VideoGopSizeEnum getVideoGopSize() {
    return videoGopSize;
  }

  public void setVideoGopSize(VideoGopSizeEnum videoGopSize) {
    this.videoGopSize = videoGopSize;
  }


  public AssetNonStandardInputReasons videoResolution(String videoResolution) {
    this.videoResolution = videoResolution;
    return this;
  }

  /**
   * The video resolution of the input file. Video resolution higher than 2048 pixels on any one dimension (height or width) is considered non-standard, The resolution value is presented as &#x60;width&#x60; x &#x60;height&#x60; in pixels.
   * @return videoResolution
   */
  @javax.annotation.Nullable
  public String getVideoResolution() {
    return videoResolution;
  }

  public void setVideoResolution(String videoResolution) {
    this.videoResolution = videoResolution;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetNonStandardInputReasons assetNonStandardInputReasons = (AssetNonStandardInputReasons) o;
    return Objects.equals(this.audioCodec, assetNonStandardInputReasons.audioCodec) &&
        Objects.equals(this.audioEditList, assetNonStandardInputReasons.audioEditList) &&
        Objects.equals(this.pixelAspectRatio, assetNonStandardInputReasons.pixelAspectRatio) &&
        Objects.equals(this.unexpectedMediaFileParameters, assetNonStandardInputReasons.unexpectedMediaFileParameters) &&
        Objects.equals(this.unsupportedPixelFormat, assetNonStandardInputReasons.unsupportedPixelFormat) &&
        Objects.equals(this.videoBitrate, assetNonStandardInputReasons.videoBitrate) &&
        Objects.equals(this.videoCodec, assetNonStandardInputReasons.videoCodec) &&
        Objects.equals(this.videoEditList, assetNonStandardInputReasons.videoEditList) &&
        Objects.equals(this.videoFrameRate, assetNonStandardInputReasons.videoFrameRate) &&
        Objects.equals(this.videoGopSize, assetNonStandardInputReasons.videoGopSize) &&
        Objects.equals(this.videoResolution, assetNonStandardInputReasons.videoResolution);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioCodec, audioEditList, pixelAspectRatio, unexpectedMediaFileParameters, unsupportedPixelFormat, videoBitrate, videoCodec, videoEditList, videoFrameRate, videoGopSize, videoResolution);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetNonStandardInputReasons {\n");
    sb.append("    audioCodec: ").append(toIndentedString(audioCodec)).append("\n");
    sb.append("    audioEditList: ").append(toIndentedString(audioEditList)).append("\n");
    sb.append("    pixelAspectRatio: ").append(toIndentedString(pixelAspectRatio)).append("\n");
    sb.append("    unexpectedMediaFileParameters: ").append(toIndentedString(unexpectedMediaFileParameters)).append("\n");
    sb.append("    unsupportedPixelFormat: ").append(toIndentedString(unsupportedPixelFormat)).append("\n");
    sb.append("    videoBitrate: ").append(toIndentedString(videoBitrate)).append("\n");
    sb.append("    videoCodec: ").append(toIndentedString(videoCodec)).append("\n");
    sb.append("    videoEditList: ").append(toIndentedString(videoEditList)).append("\n");
    sb.append("    videoFrameRate: ").append(toIndentedString(videoFrameRate)).append("\n");
    sb.append("    videoGopSize: ").append(toIndentedString(videoGopSize)).append("\n");
    sb.append("    videoResolution: ").append(toIndentedString(videoResolution)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audio_codec");
    openapiFields.add("audio_edit_list");
    openapiFields.add("pixel_aspect_ratio");
    openapiFields.add("unexpected_media_file_parameters");
    openapiFields.add("unsupported_pixel_format");
    openapiFields.add("video_bitrate");
    openapiFields.add("video_codec");
    openapiFields.add("video_edit_list");
    openapiFields.add("video_frame_rate");
    openapiFields.add("video_gop_size");
    openapiFields.add("video_resolution");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetNonStandardInputReasons
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetNonStandardInputReasons.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetNonStandardInputReasons is not found in the empty JSON string", AssetNonStandardInputReasons.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetNonStandardInputReasons.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetNonStandardInputReasons` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("audio_codec") != null && !jsonObj.get("audio_codec").isJsonNull()) && !jsonObj.get("audio_codec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audio_codec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audio_codec").toString()));
      }
      if ((jsonObj.get("audio_edit_list") != null && !jsonObj.get("audio_edit_list").isJsonNull()) && !jsonObj.get("audio_edit_list").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audio_edit_list` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audio_edit_list").toString()));
      }
      // validate the optional field `audio_edit_list`
      if (jsonObj.get("audio_edit_list") != null && !jsonObj.get("audio_edit_list").isJsonNull()) {
        AudioEditListEnum.validateJsonElement(jsonObj.get("audio_edit_list"));
      }
      if ((jsonObj.get("pixel_aspect_ratio") != null && !jsonObj.get("pixel_aspect_ratio").isJsonNull()) && !jsonObj.get("pixel_aspect_ratio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pixel_aspect_ratio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pixel_aspect_ratio").toString()));
      }
      if ((jsonObj.get("unexpected_media_file_parameters") != null && !jsonObj.get("unexpected_media_file_parameters").isJsonNull()) && !jsonObj.get("unexpected_media_file_parameters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unexpected_media_file_parameters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unexpected_media_file_parameters").toString()));
      }
      // validate the optional field `unexpected_media_file_parameters`
      if (jsonObj.get("unexpected_media_file_parameters") != null && !jsonObj.get("unexpected_media_file_parameters").isJsonNull()) {
        UnexpectedMediaFileParametersEnum.validateJsonElement(jsonObj.get("unexpected_media_file_parameters"));
      }
      if ((jsonObj.get("unsupported_pixel_format") != null && !jsonObj.get("unsupported_pixel_format").isJsonNull()) && !jsonObj.get("unsupported_pixel_format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unsupported_pixel_format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unsupported_pixel_format").toString()));
      }
      if ((jsonObj.get("video_bitrate") != null && !jsonObj.get("video_bitrate").isJsonNull()) && !jsonObj.get("video_bitrate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video_bitrate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video_bitrate").toString()));
      }
      // validate the optional field `video_bitrate`
      if (jsonObj.get("video_bitrate") != null && !jsonObj.get("video_bitrate").isJsonNull()) {
        VideoBitrateEnum.validateJsonElement(jsonObj.get("video_bitrate"));
      }
      if ((jsonObj.get("video_codec") != null && !jsonObj.get("video_codec").isJsonNull()) && !jsonObj.get("video_codec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video_codec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video_codec").toString()));
      }
      if ((jsonObj.get("video_edit_list") != null && !jsonObj.get("video_edit_list").isJsonNull()) && !jsonObj.get("video_edit_list").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video_edit_list` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video_edit_list").toString()));
      }
      // validate the optional field `video_edit_list`
      if (jsonObj.get("video_edit_list") != null && !jsonObj.get("video_edit_list").isJsonNull()) {
        VideoEditListEnum.validateJsonElement(jsonObj.get("video_edit_list"));
      }
      if ((jsonObj.get("video_frame_rate") != null && !jsonObj.get("video_frame_rate").isJsonNull()) && !jsonObj.get("video_frame_rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video_frame_rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video_frame_rate").toString()));
      }
      if ((jsonObj.get("video_gop_size") != null && !jsonObj.get("video_gop_size").isJsonNull()) && !jsonObj.get("video_gop_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video_gop_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video_gop_size").toString()));
      }
      // validate the optional field `video_gop_size`
      if (jsonObj.get("video_gop_size") != null && !jsonObj.get("video_gop_size").isJsonNull()) {
        VideoGopSizeEnum.validateJsonElement(jsonObj.get("video_gop_size"));
      }
      if ((jsonObj.get("video_resolution") != null && !jsonObj.get("video_resolution").isJsonNull()) && !jsonObj.get("video_resolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video_resolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video_resolution").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetNonStandardInputReasons.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetNonStandardInputReasons' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetNonStandardInputReasons> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetNonStandardInputReasons.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetNonStandardInputReasons>() {
           @Override
           public void write(JsonWriter out, AssetNonStandardInputReasons value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetNonStandardInputReasons read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetNonStandardInputReasons given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetNonStandardInputReasons
   * @throws IOException if the JSON string is invalid with respect to AssetNonStandardInputReasons
   */
  public static AssetNonStandardInputReasons fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetNonStandardInputReasons.class);
  }

  /**
   * Convert an instance of AssetNonStandardInputReasons to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

