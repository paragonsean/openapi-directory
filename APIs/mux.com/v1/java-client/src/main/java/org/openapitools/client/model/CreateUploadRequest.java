/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateAssetRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateUploadRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:45.471488-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateUploadRequest {
  public static final String SERIALIZED_NAME_CORS_ORIGIN = "cors_origin";
  @SerializedName(SERIALIZED_NAME_CORS_ORIGIN)
  private String corsOrigin;

  public static final String SERIALIZED_NAME_NEW_ASSET_SETTINGS = "new_asset_settings";
  @SerializedName(SERIALIZED_NAME_NEW_ASSET_SETTINGS)
  private CreateAssetRequest newAssetSettings;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private Boolean test;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout = 3600;

  public CreateUploadRequest() {
  }

  public CreateUploadRequest corsOrigin(String corsOrigin) {
    this.corsOrigin = corsOrigin;
    return this;
  }

  /**
   * If the upload URL will be used in a browser, you must specify the origin in order for the signed URL to have the correct CORS headers.
   * @return corsOrigin
   */
  @javax.annotation.Nullable
  public String getCorsOrigin() {
    return corsOrigin;
  }

  public void setCorsOrigin(String corsOrigin) {
    this.corsOrigin = corsOrigin;
  }


  public CreateUploadRequest newAssetSettings(CreateAssetRequest newAssetSettings) {
    this.newAssetSettings = newAssetSettings;
    return this;
  }

  /**
   * Get newAssetSettings
   * @return newAssetSettings
   */
  @javax.annotation.Nonnull
  public CreateAssetRequest getNewAssetSettings() {
    return newAssetSettings;
  }

  public void setNewAssetSettings(CreateAssetRequest newAssetSettings) {
    this.newAssetSettings = newAssetSettings;
  }


  public CreateUploadRequest test(Boolean test) {
    this.test = test;
    return this;
  }

  /**
   * Get test
   * @return test
   */
  @javax.annotation.Nullable
  public Boolean getTest() {
    return test;
  }

  public void setTest(Boolean test) {
    this.test = test;
  }


  public CreateUploadRequest timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Max time in seconds for the signed upload URL to be valid. If a successful upload has not occurred before the timeout limit, the direct upload is marked &#x60;timed_out&#x60;
   * minimum: 60
   * maximum: 604800
   * @return timeout
   */
  @javax.annotation.Nullable
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateUploadRequest createUploadRequest = (CreateUploadRequest) o;
    return Objects.equals(this.corsOrigin, createUploadRequest.corsOrigin) &&
        Objects.equals(this.newAssetSettings, createUploadRequest.newAssetSettings) &&
        Objects.equals(this.test, createUploadRequest.test) &&
        Objects.equals(this.timeout, createUploadRequest.timeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(corsOrigin, newAssetSettings, test, timeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateUploadRequest {\n");
    sb.append("    corsOrigin: ").append(toIndentedString(corsOrigin)).append("\n");
    sb.append("    newAssetSettings: ").append(toIndentedString(newAssetSettings)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cors_origin");
    openapiFields.add("new_asset_settings");
    openapiFields.add("test");
    openapiFields.add("timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("new_asset_settings");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateUploadRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateUploadRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateUploadRequest is not found in the empty JSON string", CreateUploadRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateUploadRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateUploadRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateUploadRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cors_origin") != null && !jsonObj.get("cors_origin").isJsonNull()) && !jsonObj.get("cors_origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cors_origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cors_origin").toString()));
      }
      // validate the required field `new_asset_settings`
      CreateAssetRequest.validateJsonElement(jsonObj.get("new_asset_settings"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateUploadRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateUploadRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateUploadRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateUploadRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateUploadRequest>() {
           @Override
           public void write(JsonWriter out, CreateUploadRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateUploadRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateUploadRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateUploadRequest
   * @throws IOException if the JSON string is invalid with respect to CreateUploadRequest
   */
  public static CreateUploadRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateUploadRequest.class);
  }

  /**
   * Convert an instance of CreateUploadRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

