/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LiveStreamEmbeddedSubtitleSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:45.471488-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LiveStreamEmbeddedSubtitleSettings {
  /**
   * CEA-608 caption channel to read data from.
   */
  @JsonAdapter(LanguageChannelEnum.Adapter.class)
  public enum LanguageChannelEnum {
    CC1("cc1"),
    
    CC2("cc2"),
    
    CC3("cc3"),
    
    CC4("cc4");

    private String value;

    LanguageChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageChannelEnum fromValue(String value) {
      for (LanguageChannelEnum b : LanguageChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageChannelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LanguageChannelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE_CHANNEL = "language_channel";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CHANNEL)
  private LanguageChannelEnum languageChannel = LanguageChannelEnum.CC1;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "language_code";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode = "en";

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PASSTHROUGH = "passthrough";
  @SerializedName(SERIALIZED_NAME_PASSTHROUGH)
  private String passthrough;

  public LiveStreamEmbeddedSubtitleSettings() {
  }

  public LiveStreamEmbeddedSubtitleSettings languageChannel(LanguageChannelEnum languageChannel) {
    this.languageChannel = languageChannel;
    return this;
  }

  /**
   * CEA-608 caption channel to read data from.
   * @return languageChannel
   */
  @javax.annotation.Nullable
  public LanguageChannelEnum getLanguageChannel() {
    return languageChannel;
  }

  public void setLanguageChannel(LanguageChannelEnum languageChannel) {
    this.languageChannel = languageChannel;
  }


  public LiveStreamEmbeddedSubtitleSettings languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * The language of the closed caption stream. Value must be BCP 47 compliant.
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public LiveStreamEmbeddedSubtitleSettings name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A name for this live stream closed caption track.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LiveStreamEmbeddedSubtitleSettings passthrough(String passthrough) {
    this.passthrough = passthrough;
    return this;
  }

  /**
   * Arbitrary user-supplied metadata set for the live stream closed caption track. Max 255 characters.
   * @return passthrough
   */
  @javax.annotation.Nullable
  public String getPassthrough() {
    return passthrough;
  }

  public void setPassthrough(String passthrough) {
    this.passthrough = passthrough;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveStreamEmbeddedSubtitleSettings liveStreamEmbeddedSubtitleSettings = (LiveStreamEmbeddedSubtitleSettings) o;
    return Objects.equals(this.languageChannel, liveStreamEmbeddedSubtitleSettings.languageChannel) &&
        Objects.equals(this.languageCode, liveStreamEmbeddedSubtitleSettings.languageCode) &&
        Objects.equals(this.name, liveStreamEmbeddedSubtitleSettings.name) &&
        Objects.equals(this.passthrough, liveStreamEmbeddedSubtitleSettings.passthrough);
  }

  @Override
  public int hashCode() {
    return Objects.hash(languageChannel, languageCode, name, passthrough);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveStreamEmbeddedSubtitleSettings {\n");
    sb.append("    languageChannel: ").append(toIndentedString(languageChannel)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    passthrough: ").append(toIndentedString(passthrough)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("language_channel");
    openapiFields.add("language_code");
    openapiFields.add("name");
    openapiFields.add("passthrough");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LiveStreamEmbeddedSubtitleSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LiveStreamEmbeddedSubtitleSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveStreamEmbeddedSubtitleSettings is not found in the empty JSON string", LiveStreamEmbeddedSubtitleSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LiveStreamEmbeddedSubtitleSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveStreamEmbeddedSubtitleSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("language_channel") != null && !jsonObj.get("language_channel").isJsonNull()) && !jsonObj.get("language_channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language_channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language_channel").toString()));
      }
      // validate the optional field `language_channel`
      if (jsonObj.get("language_channel") != null && !jsonObj.get("language_channel").isJsonNull()) {
        LanguageChannelEnum.validateJsonElement(jsonObj.get("language_channel"));
      }
      if ((jsonObj.get("language_code") != null && !jsonObj.get("language_code").isJsonNull()) && !jsonObj.get("language_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language_code").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("passthrough") != null && !jsonObj.get("passthrough").isJsonNull()) && !jsonObj.get("passthrough").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passthrough` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passthrough").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveStreamEmbeddedSubtitleSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveStreamEmbeddedSubtitleSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveStreamEmbeddedSubtitleSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveStreamEmbeddedSubtitleSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveStreamEmbeddedSubtitleSettings>() {
           @Override
           public void write(JsonWriter out, LiveStreamEmbeddedSubtitleSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveStreamEmbeddedSubtitleSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LiveStreamEmbeddedSubtitleSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LiveStreamEmbeddedSubtitleSettings
   * @throws IOException if the JSON string is invalid with respect to LiveStreamEmbeddedSubtitleSettings
   */
  public static LiveStreamEmbeddedSubtitleSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveStreamEmbeddedSubtitleSettings.class);
  }

  /**
   * Convert an instance of LiveStreamEmbeddedSubtitleSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

