/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetAssetOrLiveStreamIdResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlaybackIdApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PlaybackIdApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PlaybackIdApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAssetOrLivestreamIdCall(String PLAYBACK_ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/video/v1/playback-ids/{PLAYBACK_ID}"
            .replace("{" + "PLAYBACK_ID" + "}", localVarApiClient.escapeString(PLAYBACK_ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetOrLivestreamIdValidateBeforeCall(String PLAYBACK_ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'PLAYBACK_ID' is set
        if (PLAYBACK_ID == null) {
            throw new ApiException("Missing the required parameter 'PLAYBACK_ID' when calling getAssetOrLivestreamId(Async)");
        }

        return getAssetOrLivestreamIdCall(PLAYBACK_ID, _callback);

    }


    private ApiResponse<GetAssetOrLiveStreamIdResponse> getAssetOrLivestreamIdWithHttpInfo(String PLAYBACK_ID) throws ApiException {
        okhttp3.Call localVarCall = getAssetOrLivestreamIdValidateBeforeCall(PLAYBACK_ID, null);
        Type localVarReturnType = new TypeToken<GetAssetOrLiveStreamIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssetOrLivestreamIdAsync(String PLAYBACK_ID, final ApiCallback<GetAssetOrLiveStreamIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssetOrLivestreamIdValidateBeforeCall(PLAYBACK_ID, _callback);
        Type localVarReturnType = new TypeToken<GetAssetOrLiveStreamIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAssetOrLivestreamIdRequest {
        private final String PLAYBACK_ID;

        private APIgetAssetOrLivestreamIdRequest(String PLAYBACK_ID) {
            this.PLAYBACK_ID = PLAYBACK_ID;
        }

        /**
         * Build call for getAssetOrLivestreamId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssetOrLivestreamIdCall(PLAYBACK_ID, _callback);
        }

        /**
         * Execute getAssetOrLivestreamId request
         * @return GetAssetOrLiveStreamIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GetAssetOrLiveStreamIdResponse execute() throws ApiException {
            ApiResponse<GetAssetOrLiveStreamIdResponse> localVarResp = getAssetOrLivestreamIdWithHttpInfo(PLAYBACK_ID);
            return localVarResp.getData();
        }

        /**
         * Execute getAssetOrLivestreamId request with HTTP info returned
         * @return ApiResponse&lt;GetAssetOrLiveStreamIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetAssetOrLiveStreamIdResponse> executeWithHttpInfo() throws ApiException {
            return getAssetOrLivestreamIdWithHttpInfo(PLAYBACK_ID);
        }

        /**
         * Execute getAssetOrLivestreamId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetAssetOrLiveStreamIdResponse> _callback) throws ApiException {
            return getAssetOrLivestreamIdAsync(PLAYBACK_ID, _callback);
        }
    }

    /**
     * Retrieve an Asset or Live Stream ID
     * Retrieves the Identifier of the Asset or Live Stream associated with the Playback ID.
     * @param PLAYBACK_ID The live stream&#39;s playback ID. (required)
     * @return APIgetAssetOrLivestreamIdRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAssetOrLivestreamIdRequest getAssetOrLivestreamId(String PLAYBACK_ID) {
        return new APIgetAssetOrLivestreamIdRequest(PLAYBACK_ID);
    }
}
