/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DeliveryReportDeliveredSecondsByResolution;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeliveryReport
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:45.471488-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeliveryReport {
  public static final String SERIALIZED_NAME_ASSET_DURATION = "asset_duration";
  @SerializedName(SERIALIZED_NAME_ASSET_DURATION)
  private Double assetDuration;

  public static final String SERIALIZED_NAME_ASSET_ID = "asset_id";
  @SerializedName(SERIALIZED_NAME_ASSET_ID)
  private String assetId;

  /**
   * The resolution tier that the asset was ingested at, affecting billing for ingest &amp; storage
   */
  @JsonAdapter(AssetResolutionTierEnum.Adapter.class)
  public enum AssetResolutionTierEnum {
    AUDIO_ONLY("audio-only"),
    
    _720P("720p"),
    
    _1080P("1080p"),
    
    _1440P("1440p"),
    
    _2160P("2160p");

    private String value;

    AssetResolutionTierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssetResolutionTierEnum fromValue(String value) {
      for (AssetResolutionTierEnum b : AssetResolutionTierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssetResolutionTierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssetResolutionTierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssetResolutionTierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssetResolutionTierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssetResolutionTierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSET_RESOLUTION_TIER = "asset_resolution_tier";
  @SerializedName(SERIALIZED_NAME_ASSET_RESOLUTION_TIER)
  private AssetResolutionTierEnum assetResolutionTier;

  /**
   * The state of the asset.
   */
  @JsonAdapter(AssetStateEnum.Adapter.class)
  public enum AssetStateEnum {
    READY("ready"),
    
    ERRORED("errored"),
    
    DELETED("deleted");

    private String value;

    AssetStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssetStateEnum fromValue(String value) {
      for (AssetStateEnum b : AssetStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssetStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssetStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssetStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssetStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssetStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSET_STATE = "asset_state";
  @SerializedName(SERIALIZED_NAME_ASSET_STATE)
  private AssetStateEnum assetState;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "deleted_at";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private String deletedAt;

  public static final String SERIALIZED_NAME_DELIVERED_SECONDS = "delivered_seconds";
  @SerializedName(SERIALIZED_NAME_DELIVERED_SECONDS)
  private Double deliveredSeconds;

  public static final String SERIALIZED_NAME_DELIVERED_SECONDS_BY_RESOLUTION = "delivered_seconds_by_resolution";
  @SerializedName(SERIALIZED_NAME_DELIVERED_SECONDS_BY_RESOLUTION)
  private DeliveryReportDeliveredSecondsByResolution deliveredSecondsByResolution;

  public static final String SERIALIZED_NAME_LIVE_STREAM_ID = "live_stream_id";
  @SerializedName(SERIALIZED_NAME_LIVE_STREAM_ID)
  private String liveStreamId;

  public static final String SERIALIZED_NAME_PASSTHROUGH = "passthrough";
  @SerializedName(SERIALIZED_NAME_PASSTHROUGH)
  private String passthrough;

  public DeliveryReport() {
  }

  public DeliveryReport assetDuration(Double assetDuration) {
    this.assetDuration = assetDuration;
    return this;
  }

  /**
   * The duration of the asset in seconds.
   * @return assetDuration
   */
  @javax.annotation.Nullable
  public Double getAssetDuration() {
    return assetDuration;
  }

  public void setAssetDuration(Double assetDuration) {
    this.assetDuration = assetDuration;
  }


  public DeliveryReport assetId(String assetId) {
    this.assetId = assetId;
    return this;
  }

  /**
   * Unique identifier for the asset.
   * @return assetId
   */
  @javax.annotation.Nullable
  public String getAssetId() {
    return assetId;
  }

  public void setAssetId(String assetId) {
    this.assetId = assetId;
  }


  public DeliveryReport assetResolutionTier(AssetResolutionTierEnum assetResolutionTier) {
    this.assetResolutionTier = assetResolutionTier;
    return this;
  }

  /**
   * The resolution tier that the asset was ingested at, affecting billing for ingest &amp; storage
   * @return assetResolutionTier
   */
  @javax.annotation.Nullable
  public AssetResolutionTierEnum getAssetResolutionTier() {
    return assetResolutionTier;
  }

  public void setAssetResolutionTier(AssetResolutionTierEnum assetResolutionTier) {
    this.assetResolutionTier = assetResolutionTier;
  }


  public DeliveryReport assetState(AssetStateEnum assetState) {
    this.assetState = assetState;
    return this;
  }

  /**
   * The state of the asset.
   * @return assetState
   */
  @javax.annotation.Nullable
  public AssetStateEnum getAssetState() {
    return assetState;
  }

  public void setAssetState(AssetStateEnum assetState) {
    this.assetState = assetState;
  }


  public DeliveryReport createdAt(String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Time at which the asset was created. Measured in seconds since the Unix epoch.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(String createdAt) {
    this.createdAt = createdAt;
  }


  public DeliveryReport deletedAt(String deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

  /**
   * If exists, time at which the asset was deleted. Measured in seconds since the Unix epoch.
   * @return deletedAt
   */
  @javax.annotation.Nullable
  public String getDeletedAt() {
    return deletedAt;
  }

  public void setDeletedAt(String deletedAt) {
    this.deletedAt = deletedAt;
  }


  public DeliveryReport deliveredSeconds(Double deliveredSeconds) {
    this.deliveredSeconds = deliveredSeconds;
    return this;
  }

  /**
   * Total number of delivered seconds during this time window.
   * @return deliveredSeconds
   */
  @javax.annotation.Nullable
  public Double getDeliveredSeconds() {
    return deliveredSeconds;
  }

  public void setDeliveredSeconds(Double deliveredSeconds) {
    this.deliveredSeconds = deliveredSeconds;
  }


  public DeliveryReport deliveredSecondsByResolution(DeliveryReportDeliveredSecondsByResolution deliveredSecondsByResolution) {
    this.deliveredSecondsByResolution = deliveredSecondsByResolution;
    return this;
  }

  /**
   * Get deliveredSecondsByResolution
   * @return deliveredSecondsByResolution
   */
  @javax.annotation.Nullable
  public DeliveryReportDeliveredSecondsByResolution getDeliveredSecondsByResolution() {
    return deliveredSecondsByResolution;
  }

  public void setDeliveredSecondsByResolution(DeliveryReportDeliveredSecondsByResolution deliveredSecondsByResolution) {
    this.deliveredSecondsByResolution = deliveredSecondsByResolution;
  }


  public DeliveryReport liveStreamId(String liveStreamId) {
    this.liveStreamId = liveStreamId;
    return this;
  }

  /**
   * Unique identifier for the live stream that created the asset.
   * @return liveStreamId
   */
  @javax.annotation.Nullable
  public String getLiveStreamId() {
    return liveStreamId;
  }

  public void setLiveStreamId(String liveStreamId) {
    this.liveStreamId = liveStreamId;
  }


  public DeliveryReport passthrough(String passthrough) {
    this.passthrough = passthrough;
    return this;
  }

  /**
   * The &#x60;passthrough&#x60; value for the asset.
   * @return passthrough
   */
  @javax.annotation.Nullable
  public String getPassthrough() {
    return passthrough;
  }

  public void setPassthrough(String passthrough) {
    this.passthrough = passthrough;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeliveryReport deliveryReport = (DeliveryReport) o;
    return Objects.equals(this.assetDuration, deliveryReport.assetDuration) &&
        Objects.equals(this.assetId, deliveryReport.assetId) &&
        Objects.equals(this.assetResolutionTier, deliveryReport.assetResolutionTier) &&
        Objects.equals(this.assetState, deliveryReport.assetState) &&
        Objects.equals(this.createdAt, deliveryReport.createdAt) &&
        Objects.equals(this.deletedAt, deliveryReport.deletedAt) &&
        Objects.equals(this.deliveredSeconds, deliveryReport.deliveredSeconds) &&
        Objects.equals(this.deliveredSecondsByResolution, deliveryReport.deliveredSecondsByResolution) &&
        Objects.equals(this.liveStreamId, deliveryReport.liveStreamId) &&
        Objects.equals(this.passthrough, deliveryReport.passthrough);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetDuration, assetId, assetResolutionTier, assetState, createdAt, deletedAt, deliveredSeconds, deliveredSecondsByResolution, liveStreamId, passthrough);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeliveryReport {\n");
    sb.append("    assetDuration: ").append(toIndentedString(assetDuration)).append("\n");
    sb.append("    assetId: ").append(toIndentedString(assetId)).append("\n");
    sb.append("    assetResolutionTier: ").append(toIndentedString(assetResolutionTier)).append("\n");
    sb.append("    assetState: ").append(toIndentedString(assetState)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    deliveredSeconds: ").append(toIndentedString(deliveredSeconds)).append("\n");
    sb.append("    deliveredSecondsByResolution: ").append(toIndentedString(deliveredSecondsByResolution)).append("\n");
    sb.append("    liveStreamId: ").append(toIndentedString(liveStreamId)).append("\n");
    sb.append("    passthrough: ").append(toIndentedString(passthrough)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asset_duration");
    openapiFields.add("asset_id");
    openapiFields.add("asset_resolution_tier");
    openapiFields.add("asset_state");
    openapiFields.add("created_at");
    openapiFields.add("deleted_at");
    openapiFields.add("delivered_seconds");
    openapiFields.add("delivered_seconds_by_resolution");
    openapiFields.add("live_stream_id");
    openapiFields.add("passthrough");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeliveryReport
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeliveryReport.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeliveryReport is not found in the empty JSON string", DeliveryReport.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeliveryReport.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeliveryReport` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("asset_id") != null && !jsonObj.get("asset_id").isJsonNull()) && !jsonObj.get("asset_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asset_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_id").toString()));
      }
      if ((jsonObj.get("asset_resolution_tier") != null && !jsonObj.get("asset_resolution_tier").isJsonNull()) && !jsonObj.get("asset_resolution_tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asset_resolution_tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_resolution_tier").toString()));
      }
      // validate the optional field `asset_resolution_tier`
      if (jsonObj.get("asset_resolution_tier") != null && !jsonObj.get("asset_resolution_tier").isJsonNull()) {
        AssetResolutionTierEnum.validateJsonElement(jsonObj.get("asset_resolution_tier"));
      }
      if ((jsonObj.get("asset_state") != null && !jsonObj.get("asset_state").isJsonNull()) && !jsonObj.get("asset_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asset_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_state").toString()));
      }
      // validate the optional field `asset_state`
      if (jsonObj.get("asset_state") != null && !jsonObj.get("asset_state").isJsonNull()) {
        AssetStateEnum.validateJsonElement(jsonObj.get("asset_state"));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("deleted_at") != null && !jsonObj.get("deleted_at").isJsonNull()) && !jsonObj.get("deleted_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleted_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleted_at").toString()));
      }
      // validate the optional field `delivered_seconds_by_resolution`
      if (jsonObj.get("delivered_seconds_by_resolution") != null && !jsonObj.get("delivered_seconds_by_resolution").isJsonNull()) {
        DeliveryReportDeliveredSecondsByResolution.validateJsonElement(jsonObj.get("delivered_seconds_by_resolution"));
      }
      if ((jsonObj.get("live_stream_id") != null && !jsonObj.get("live_stream_id").isJsonNull()) && !jsonObj.get("live_stream_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `live_stream_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("live_stream_id").toString()));
      }
      if ((jsonObj.get("passthrough") != null && !jsonObj.get("passthrough").isJsonNull()) && !jsonObj.get("passthrough").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passthrough` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passthrough").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeliveryReport.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeliveryReport' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeliveryReport> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeliveryReport.class));

       return (TypeAdapter<T>) new TypeAdapter<DeliveryReport>() {
           @Override
           public void write(JsonWriter out, DeliveryReport value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeliveryReport read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeliveryReport given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeliveryReport
   * @throws IOException if the JSON string is invalid with respect to DeliveryReport
   */
  public static DeliveryReport fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeliveryReport.class);
  }

  /**
   * Convert an instance of DeliveryReport to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

