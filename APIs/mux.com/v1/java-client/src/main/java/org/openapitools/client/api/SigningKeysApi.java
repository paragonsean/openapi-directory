/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListSigningKeysResponse;
import org.openapitools.client.model.SigningKeyResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SigningKeysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SigningKeysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SigningKeysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createSigningKeyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/v1/signing-keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSigningKeyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return createSigningKeyCall(_callback);

    }


    private ApiResponse<SigningKeyResponse> createSigningKeyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createSigningKeyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SigningKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSigningKeyAsync(final ApiCallback<SigningKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSigningKeyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SigningKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateSigningKeyRequest {

        private APIcreateSigningKeyRequest() {
        }

        /**
         * Build call for createSigningKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createSigningKeyCall(_callback);
        }

        /**
         * Execute createSigningKey request
         * @return SigningKeyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public SigningKeyResponse execute() throws ApiException {
            ApiResponse<SigningKeyResponse> localVarResp = createSigningKeyWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute createSigningKey request with HTTP info returned
         * @return ApiResponse&lt;SigningKeyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SigningKeyResponse> executeWithHttpInfo() throws ApiException {
            return createSigningKeyWithHttpInfo();
        }

        /**
         * Execute createSigningKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SigningKeyResponse> _callback) throws ApiException {
            return createSigningKeyAsync(_callback);
        }
    }

    /**
     * Create a signing key
     * Creates a new signing key pair. When creating a new signing key, the API will generate a 2048-bit RSA key-pair and return the private key and a generated key-id; the public key will be stored at Mux to validate signed tokens.
     * @return APIcreateSigningKeyRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateSigningKeyRequest createSigningKey() {
        return new APIcreateSigningKeyRequest();
    }
    private okhttp3.Call deleteSigningKeyCall(String SIGNING_KEY_ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/v1/signing-keys/{SIGNING_KEY_ID}"
            .replace("{" + "SIGNING_KEY_ID" + "}", localVarApiClient.escapeString(SIGNING_KEY_ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSigningKeyValidateBeforeCall(String SIGNING_KEY_ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'SIGNING_KEY_ID' is set
        if (SIGNING_KEY_ID == null) {
            throw new ApiException("Missing the required parameter 'SIGNING_KEY_ID' when calling deleteSigningKey(Async)");
        }

        return deleteSigningKeyCall(SIGNING_KEY_ID, _callback);

    }


    private ApiResponse<Void> deleteSigningKeyWithHttpInfo(String SIGNING_KEY_ID) throws ApiException {
        okhttp3.Call localVarCall = deleteSigningKeyValidateBeforeCall(SIGNING_KEY_ID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSigningKeyAsync(String SIGNING_KEY_ID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSigningKeyValidateBeforeCall(SIGNING_KEY_ID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteSigningKeyRequest {
        private final String SIGNING_KEY_ID;

        private APIdeleteSigningKeyRequest(String SIGNING_KEY_ID) {
            this.SIGNING_KEY_ID = SIGNING_KEY_ID;
        }

        /**
         * Build call for deleteSigningKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSigningKeyCall(SIGNING_KEY_ID, _callback);
        }

        /**
         * Execute deleteSigningKey request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSigningKeyWithHttpInfo(SIGNING_KEY_ID);
        }

        /**
         * Execute deleteSigningKey request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSigningKeyWithHttpInfo(SIGNING_KEY_ID);
        }

        /**
         * Execute deleteSigningKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSigningKeyAsync(SIGNING_KEY_ID, _callback);
        }
    }

    /**
     * Delete a signing key
     * Deletes an existing signing key. Use with caution, as this will invalidate any existing signatures and no JWTs can be signed using the key again.
     * @param SIGNING_KEY_ID The ID of the signing key. (required)
     * @return APIdeleteSigningKeyRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteSigningKeyRequest deleteSigningKey(String SIGNING_KEY_ID) {
        return new APIdeleteSigningKeyRequest(SIGNING_KEY_ID);
    }
    private okhttp3.Call getSigningKeyCall(String SIGNING_KEY_ID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/v1/signing-keys/{SIGNING_KEY_ID}"
            .replace("{" + "SIGNING_KEY_ID" + "}", localVarApiClient.escapeString(SIGNING_KEY_ID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSigningKeyValidateBeforeCall(String SIGNING_KEY_ID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'SIGNING_KEY_ID' is set
        if (SIGNING_KEY_ID == null) {
            throw new ApiException("Missing the required parameter 'SIGNING_KEY_ID' when calling getSigningKey(Async)");
        }

        return getSigningKeyCall(SIGNING_KEY_ID, _callback);

    }


    private ApiResponse<SigningKeyResponse> getSigningKeyWithHttpInfo(String SIGNING_KEY_ID) throws ApiException {
        okhttp3.Call localVarCall = getSigningKeyValidateBeforeCall(SIGNING_KEY_ID, null);
        Type localVarReturnType = new TypeToken<SigningKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSigningKeyAsync(String SIGNING_KEY_ID, final ApiCallback<SigningKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSigningKeyValidateBeforeCall(SIGNING_KEY_ID, _callback);
        Type localVarReturnType = new TypeToken<SigningKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSigningKeyRequest {
        private final String SIGNING_KEY_ID;

        private APIgetSigningKeyRequest(String SIGNING_KEY_ID) {
            this.SIGNING_KEY_ID = SIGNING_KEY_ID;
        }

        /**
         * Build call for getSigningKey
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSigningKeyCall(SIGNING_KEY_ID, _callback);
        }

        /**
         * Execute getSigningKey request
         * @return SigningKeyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public SigningKeyResponse execute() throws ApiException {
            ApiResponse<SigningKeyResponse> localVarResp = getSigningKeyWithHttpInfo(SIGNING_KEY_ID);
            return localVarResp.getData();
        }

        /**
         * Execute getSigningKey request with HTTP info returned
         * @return ApiResponse&lt;SigningKeyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SigningKeyResponse> executeWithHttpInfo() throws ApiException {
            return getSigningKeyWithHttpInfo(SIGNING_KEY_ID);
        }

        /**
         * Execute getSigningKey request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SigningKeyResponse> _callback) throws ApiException {
            return getSigningKeyAsync(SIGNING_KEY_ID, _callback);
        }
    }

    /**
     * Retrieve a signing key
     * Retrieves the details of a signing key that has previously been created. Supply the unique signing key ID that was returned from your previous request, and Mux will return the corresponding signing key information. **The private key is not returned in this response.** 
     * @param SIGNING_KEY_ID The ID of the signing key. (required)
     * @return APIgetSigningKeyRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSigningKeyRequest getSigningKey(String SIGNING_KEY_ID) {
        return new APIgetSigningKeyRequest(SIGNING_KEY_ID);
    }
    private okhttp3.Call listSigningKeysCall(Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/system/v1/signing-keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "accessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSigningKeysValidateBeforeCall(Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        return listSigningKeysCall(limit, page, _callback);

    }


    private ApiResponse<ListSigningKeysResponse> listSigningKeysWithHttpInfo(Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listSigningKeysValidateBeforeCall(limit, page, null);
        Type localVarReturnType = new TypeToken<ListSigningKeysResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSigningKeysAsync(Integer limit, Integer page, final ApiCallback<ListSigningKeysResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSigningKeysValidateBeforeCall(limit, page, _callback);
        Type localVarReturnType = new TypeToken<ListSigningKeysResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistSigningKeysRequest {
        private Integer limit;
        private Integer page;

        private APIlistSigningKeysRequest() {
        }

        /**
         * Set limit
         * @param limit Number of items to include in the response (optional, default to 25)
         * @return APIlistSigningKeysRequest
         */
        public APIlistSigningKeysRequest limit(Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set page
         * @param page Offset by this many pages, of the size of &#x60;limit&#x60; (optional, default to 1)
         * @return APIlistSigningKeysRequest
         */
        public APIlistSigningKeysRequest page(Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Build call for listSigningKeys
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSigningKeysCall(limit, page, _callback);
        }

        /**
         * Execute listSigningKeys request
         * @return ListSigningKeysResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ListSigningKeysResponse execute() throws ApiException {
            ApiResponse<ListSigningKeysResponse> localVarResp = listSigningKeysWithHttpInfo(limit, page);
            return localVarResp.getData();
        }

        /**
         * Execute listSigningKeys request with HTTP info returned
         * @return ApiResponse&lt;ListSigningKeysResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListSigningKeysResponse> executeWithHttpInfo() throws ApiException {
            return listSigningKeysWithHttpInfo(limit, page);
        }

        /**
         * Execute listSigningKeys request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListSigningKeysResponse> _callback) throws ApiException {
            return listSigningKeysAsync(limit, page, _callback);
        }
    }

    /**
     * List signing keys
     * Returns a list of signing keys.
     * @return APIlistSigningKeysRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIlistSigningKeysRequest listSigningKeys() {
        return new APIlistSigningKeysRequest();
    }
}
