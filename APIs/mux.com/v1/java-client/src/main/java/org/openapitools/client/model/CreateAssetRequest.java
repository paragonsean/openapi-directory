/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InputSettings;
import org.openapitools.client.model.PlaybackPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAssetRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:45.471488-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAssetRequest {
  /**
   * The encoding tier informs the cost, quality, and available platform features for the asset. By default the &#x60;smart&#x60; encoding tier is used.
   */
  @JsonAdapter(EncodingTierEnum.Adapter.class)
  public enum EncodingTierEnum {
    SMART("smart"),
    
    BASELINE("baseline");

    private String value;

    EncodingTierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EncodingTierEnum fromValue(String value) {
      for (EncodingTierEnum b : EncodingTierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EncodingTierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EncodingTierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EncodingTierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EncodingTierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EncodingTierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENCODING_TIER = "encoding_tier";
  @SerializedName(SERIALIZED_NAME_ENCODING_TIER)
  private EncodingTierEnum encodingTier;

  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private List<InputSettings> input = new ArrayList<>();

  /**
   * Specify what level (if any) of support for master access. Master access can be enabled temporarily for your asset to be downloaded. See the [Download your videos guide](/guides/video/download-your-videos) for more information.
   */
  @JsonAdapter(MasterAccessEnum.Adapter.class)
  public enum MasterAccessEnum {
    NONE("none"),
    
    TEMPORARY("temporary");

    private String value;

    MasterAccessEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MasterAccessEnum fromValue(String value) {
      for (MasterAccessEnum b : MasterAccessEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MasterAccessEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MasterAccessEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MasterAccessEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MasterAccessEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MasterAccessEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MASTER_ACCESS = "master_access";
  @SerializedName(SERIALIZED_NAME_MASTER_ACCESS)
  private MasterAccessEnum masterAccess;

  /**
   * Max resolution tier can be used to control the maximum &#x60;resolution_tier&#x60; your asset is encoded, stored, and streamed at. If not set, this defaults to &#x60;1080p&#x60;.
   */
  @JsonAdapter(MaxResolutionTierEnum.Adapter.class)
  public enum MaxResolutionTierEnum {
    _1080P("1080p"),
    
    _1440P("1440p"),
    
    _2160P("2160p");

    private String value;

    MaxResolutionTierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MaxResolutionTierEnum fromValue(String value) {
      for (MaxResolutionTierEnum b : MaxResolutionTierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MaxResolutionTierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MaxResolutionTierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MaxResolutionTierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MaxResolutionTierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MaxResolutionTierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAX_RESOLUTION_TIER = "max_resolution_tier";
  @SerializedName(SERIALIZED_NAME_MAX_RESOLUTION_TIER)
  private MaxResolutionTierEnum maxResolutionTier;

  /**
   * Specify what level (if any) of support for mp4 playback. In most cases you should use our default HLS-based streaming playback ({playback_id}.m3u8) which can automatically adjust to viewers&#39; connection speeds, but an mp4 can be useful for some legacy devices or downloading for offline playback. See the [Download your videos guide](/guides/video/download-your-videos) for more information.
   */
  @JsonAdapter(Mp4SupportEnum.Adapter.class)
  public enum Mp4SupportEnum {
    NONE("none"),
    
    STANDARD("standard");

    private String value;

    Mp4SupportEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static Mp4SupportEnum fromValue(String value) {
      for (Mp4SupportEnum b : Mp4SupportEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<Mp4SupportEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final Mp4SupportEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public Mp4SupportEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return Mp4SupportEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      Mp4SupportEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MP4_SUPPORT = "mp4_support";
  @SerializedName(SERIALIZED_NAME_MP4_SUPPORT)
  private Mp4SupportEnum mp4Support;

  public static final String SERIALIZED_NAME_NORMALIZE_AUDIO = "normalize_audio";
  @SerializedName(SERIALIZED_NAME_NORMALIZE_AUDIO)
  private Boolean normalizeAudio = false;

  public static final String SERIALIZED_NAME_PASSTHROUGH = "passthrough";
  @SerializedName(SERIALIZED_NAME_PASSTHROUGH)
  private String passthrough;

  public static final String SERIALIZED_NAME_PER_TITLE_ENCODE = "per_title_encode";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PER_TITLE_ENCODE)
  private Boolean perTitleEncode;

  public static final String SERIALIZED_NAME_PLAYBACK_POLICY = "playback_policy";
  @SerializedName(SERIALIZED_NAME_PLAYBACK_POLICY)
  private List<PlaybackPolicy> playbackPolicy = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private Boolean test;

  public CreateAssetRequest() {
  }

  public CreateAssetRequest encodingTier(EncodingTierEnum encodingTier) {
    this.encodingTier = encodingTier;
    return this;
  }

  /**
   * The encoding tier informs the cost, quality, and available platform features for the asset. By default the &#x60;smart&#x60; encoding tier is used.
   * @return encodingTier
   */
  @javax.annotation.Nullable
  public EncodingTierEnum getEncodingTier() {
    return encodingTier;
  }

  public void setEncodingTier(EncodingTierEnum encodingTier) {
    this.encodingTier = encodingTier;
  }


  public CreateAssetRequest input(List<InputSettings> input) {
    this.input = input;
    return this;
  }

  public CreateAssetRequest addInputItem(InputSettings inputItem) {
    if (this.input == null) {
      this.input = new ArrayList<>();
    }
    this.input.add(inputItem);
    return this;
  }

  /**
   * An array of objects that each describe an input file to be used to create the asset. As a shortcut, input can also be a string URL for a file when only one input file is used. See &#x60;input[].url&#x60; for requirements.
   * @return input
   */
  @javax.annotation.Nullable
  public List<InputSettings> getInput() {
    return input;
  }

  public void setInput(List<InputSettings> input) {
    this.input = input;
  }


  public CreateAssetRequest masterAccess(MasterAccessEnum masterAccess) {
    this.masterAccess = masterAccess;
    return this;
  }

  /**
   * Specify what level (if any) of support for master access. Master access can be enabled temporarily for your asset to be downloaded. See the [Download your videos guide](/guides/video/download-your-videos) for more information.
   * @return masterAccess
   */
  @javax.annotation.Nullable
  public MasterAccessEnum getMasterAccess() {
    return masterAccess;
  }

  public void setMasterAccess(MasterAccessEnum masterAccess) {
    this.masterAccess = masterAccess;
  }


  public CreateAssetRequest maxResolutionTier(MaxResolutionTierEnum maxResolutionTier) {
    this.maxResolutionTier = maxResolutionTier;
    return this;
  }

  /**
   * Max resolution tier can be used to control the maximum &#x60;resolution_tier&#x60; your asset is encoded, stored, and streamed at. If not set, this defaults to &#x60;1080p&#x60;.
   * @return maxResolutionTier
   */
  @javax.annotation.Nullable
  public MaxResolutionTierEnum getMaxResolutionTier() {
    return maxResolutionTier;
  }

  public void setMaxResolutionTier(MaxResolutionTierEnum maxResolutionTier) {
    this.maxResolutionTier = maxResolutionTier;
  }


  public CreateAssetRequest mp4Support(Mp4SupportEnum mp4Support) {
    this.mp4Support = mp4Support;
    return this;
  }

  /**
   * Specify what level (if any) of support for mp4 playback. In most cases you should use our default HLS-based streaming playback ({playback_id}.m3u8) which can automatically adjust to viewers&#39; connection speeds, but an mp4 can be useful for some legacy devices or downloading for offline playback. See the [Download your videos guide](/guides/video/download-your-videos) for more information.
   * @return mp4Support
   */
  @javax.annotation.Nullable
  public Mp4SupportEnum getMp4Support() {
    return mp4Support;
  }

  public void setMp4Support(Mp4SupportEnum mp4Support) {
    this.mp4Support = mp4Support;
  }


  public CreateAssetRequest normalizeAudio(Boolean normalizeAudio) {
    this.normalizeAudio = normalizeAudio;
    return this;
  }

  /**
   * Normalize the audio track loudness level. This parameter is only applicable to on-demand (not live) assets.
   * @return normalizeAudio
   */
  @javax.annotation.Nullable
  public Boolean getNormalizeAudio() {
    return normalizeAudio;
  }

  public void setNormalizeAudio(Boolean normalizeAudio) {
    this.normalizeAudio = normalizeAudio;
  }


  public CreateAssetRequest passthrough(String passthrough) {
    this.passthrough = passthrough;
    return this;
  }

  /**
   * Arbitrary user-supplied metadata that will be included in the asset details and related webhooks. Can be used to store your own ID for a video along with the asset. **Max: 255 characters**.
   * @return passthrough
   */
  @javax.annotation.Nullable
  public String getPassthrough() {
    return passthrough;
  }

  public void setPassthrough(String passthrough) {
    this.passthrough = passthrough;
  }


  @Deprecated
  public CreateAssetRequest perTitleEncode(Boolean perTitleEncode) {
    this.perTitleEncode = perTitleEncode;
    return this;
  }

  /**
   * Get perTitleEncode
   * @return perTitleEncode
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getPerTitleEncode() {
    return perTitleEncode;
  }

  @Deprecated
  public void setPerTitleEncode(Boolean perTitleEncode) {
    this.perTitleEncode = perTitleEncode;
  }


  public CreateAssetRequest playbackPolicy(List<PlaybackPolicy> playbackPolicy) {
    this.playbackPolicy = playbackPolicy;
    return this;
  }

  public CreateAssetRequest addPlaybackPolicyItem(PlaybackPolicy playbackPolicyItem) {
    if (this.playbackPolicy == null) {
      this.playbackPolicy = new ArrayList<>();
    }
    this.playbackPolicy.add(playbackPolicyItem);
    return this;
  }

  /**
   * An array of playback policy names that you want applied to this asset and available through &#x60;playback_ids&#x60;. Options include: &#x60;\&quot;public\&quot;&#x60; (anyone with the playback URL can stream the asset). And &#x60;\&quot;signed\&quot;&#x60; (an additional access token is required to play the asset). If no playback_policy is set, the asset will have no playback IDs and will therefore not be playable. For simplicity, a single string name can be used in place of the array in the case of only one playback policy.
   * @return playbackPolicy
   */
  @javax.annotation.Nullable
  public List<PlaybackPolicy> getPlaybackPolicy() {
    return playbackPolicy;
  }

  public void setPlaybackPolicy(List<PlaybackPolicy> playbackPolicy) {
    this.playbackPolicy = playbackPolicy;
  }


  public CreateAssetRequest test(Boolean test) {
    this.test = test;
    return this;
  }

  /**
   * Marks the asset as a test asset when the value is set to true. A Test asset can help evaluate the Mux Video APIs without incurring any cost. There is no limit on number of test assets created. Test asset are watermarked with the Mux logo, limited to 10 seconds, deleted after 24 hrs.
   * @return test
   */
  @javax.annotation.Nullable
  public Boolean getTest() {
    return test;
  }

  public void setTest(Boolean test) {
    this.test = test;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAssetRequest createAssetRequest = (CreateAssetRequest) o;
    return Objects.equals(this.encodingTier, createAssetRequest.encodingTier) &&
        Objects.equals(this.input, createAssetRequest.input) &&
        Objects.equals(this.masterAccess, createAssetRequest.masterAccess) &&
        Objects.equals(this.maxResolutionTier, createAssetRequest.maxResolutionTier) &&
        Objects.equals(this.mp4Support, createAssetRequest.mp4Support) &&
        Objects.equals(this.normalizeAudio, createAssetRequest.normalizeAudio) &&
        Objects.equals(this.passthrough, createAssetRequest.passthrough) &&
        Objects.equals(this.perTitleEncode, createAssetRequest.perTitleEncode) &&
        Objects.equals(this.playbackPolicy, createAssetRequest.playbackPolicy) &&
        Objects.equals(this.test, createAssetRequest.test);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encodingTier, input, masterAccess, maxResolutionTier, mp4Support, normalizeAudio, passthrough, perTitleEncode, playbackPolicy, test);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAssetRequest {\n");
    sb.append("    encodingTier: ").append(toIndentedString(encodingTier)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    masterAccess: ").append(toIndentedString(masterAccess)).append("\n");
    sb.append("    maxResolutionTier: ").append(toIndentedString(maxResolutionTier)).append("\n");
    sb.append("    mp4Support: ").append(toIndentedString(mp4Support)).append("\n");
    sb.append("    normalizeAudio: ").append(toIndentedString(normalizeAudio)).append("\n");
    sb.append("    passthrough: ").append(toIndentedString(passthrough)).append("\n");
    sb.append("    perTitleEncode: ").append(toIndentedString(perTitleEncode)).append("\n");
    sb.append("    playbackPolicy: ").append(toIndentedString(playbackPolicy)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encoding_tier");
    openapiFields.add("input");
    openapiFields.add("master_access");
    openapiFields.add("max_resolution_tier");
    openapiFields.add("mp4_support");
    openapiFields.add("normalize_audio");
    openapiFields.add("passthrough");
    openapiFields.add("per_title_encode");
    openapiFields.add("playback_policy");
    openapiFields.add("test");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAssetRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAssetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAssetRequest is not found in the empty JSON string", CreateAssetRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAssetRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAssetRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("encoding_tier") != null && !jsonObj.get("encoding_tier").isJsonNull()) && !jsonObj.get("encoding_tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encoding_tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encoding_tier").toString()));
      }
      // validate the optional field `encoding_tier`
      if (jsonObj.get("encoding_tier") != null && !jsonObj.get("encoding_tier").isJsonNull()) {
        EncodingTierEnum.validateJsonElement(jsonObj.get("encoding_tier"));
      }
      if (jsonObj.get("input") != null && !jsonObj.get("input").isJsonNull()) {
        JsonArray jsonArrayinput = jsonObj.getAsJsonArray("input");
        if (jsonArrayinput != null) {
          // ensure the json data is an array
          if (!jsonObj.get("input").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `input` to be an array in the JSON string but got `%s`", jsonObj.get("input").toString()));
          }

          // validate the optional field `input` (array)
          for (int i = 0; i < jsonArrayinput.size(); i++) {
            InputSettings.validateJsonElement(jsonArrayinput.get(i));
          };
        }
      }
      if ((jsonObj.get("master_access") != null && !jsonObj.get("master_access").isJsonNull()) && !jsonObj.get("master_access").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `master_access` to be a primitive type in the JSON string but got `%s`", jsonObj.get("master_access").toString()));
      }
      // validate the optional field `master_access`
      if (jsonObj.get("master_access") != null && !jsonObj.get("master_access").isJsonNull()) {
        MasterAccessEnum.validateJsonElement(jsonObj.get("master_access"));
      }
      if ((jsonObj.get("max_resolution_tier") != null && !jsonObj.get("max_resolution_tier").isJsonNull()) && !jsonObj.get("max_resolution_tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_resolution_tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_resolution_tier").toString()));
      }
      // validate the optional field `max_resolution_tier`
      if (jsonObj.get("max_resolution_tier") != null && !jsonObj.get("max_resolution_tier").isJsonNull()) {
        MaxResolutionTierEnum.validateJsonElement(jsonObj.get("max_resolution_tier"));
      }
      if ((jsonObj.get("mp4_support") != null && !jsonObj.get("mp4_support").isJsonNull()) && !jsonObj.get("mp4_support").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mp4_support` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mp4_support").toString()));
      }
      // validate the optional field `mp4_support`
      if (jsonObj.get("mp4_support") != null && !jsonObj.get("mp4_support").isJsonNull()) {
        Mp4SupportEnum.validateJsonElement(jsonObj.get("mp4_support"));
      }
      if ((jsonObj.get("passthrough") != null && !jsonObj.get("passthrough").isJsonNull()) && !jsonObj.get("passthrough").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passthrough` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passthrough").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("playback_policy") != null && !jsonObj.get("playback_policy").isJsonNull() && !jsonObj.get("playback_policy").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `playback_policy` to be an array in the JSON string but got `%s`", jsonObj.get("playback_policy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAssetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAssetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAssetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAssetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAssetRequest>() {
           @Override
           public void write(JsonWriter out, CreateAssetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAssetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAssetRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAssetRequest
   * @throws IOException if the JSON string is invalid with respect to CreateAssetRequest
   */
  public static CreateAssetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAssetRequest.class);
  }

  /**
   * Convert an instance of CreateAssetRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

