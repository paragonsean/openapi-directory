/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Insight
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:45.471488-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Insight {
  public static final String SERIALIZED_NAME_FILTER_COLUMN = "filter_column";
  @SerializedName(SERIALIZED_NAME_FILTER_COLUMN)
  private String filterColumn;

  public static final String SERIALIZED_NAME_FILTER_VALUE = "filter_value";
  @SerializedName(SERIALIZED_NAME_FILTER_VALUE)
  private String filterValue;

  public static final String SERIALIZED_NAME_METRIC = "metric";
  @SerializedName(SERIALIZED_NAME_METRIC)
  private Double metric;

  public static final String SERIALIZED_NAME_NEGATIVE_IMPACT_SCORE = "negative_impact_score";
  @SerializedName(SERIALIZED_NAME_NEGATIVE_IMPACT_SCORE)
  private Float negativeImpactScore;

  public static final String SERIALIZED_NAME_TOTAL_VIEWS = "total_views";
  @SerializedName(SERIALIZED_NAME_TOTAL_VIEWS)
  private Long totalViews;

  public static final String SERIALIZED_NAME_TOTAL_WATCH_TIME = "total_watch_time";
  @SerializedName(SERIALIZED_NAME_TOTAL_WATCH_TIME)
  private Long totalWatchTime;

  public Insight() {
  }

  public Insight filterColumn(String filterColumn) {
    this.filterColumn = filterColumn;
    return this;
  }

  /**
   * Get filterColumn
   * @return filterColumn
   */
  @javax.annotation.Nullable
  public String getFilterColumn() {
    return filterColumn;
  }

  public void setFilterColumn(String filterColumn) {
    this.filterColumn = filterColumn;
  }


  public Insight filterValue(String filterValue) {
    this.filterValue = filterValue;
    return this;
  }

  /**
   * Get filterValue
   * @return filterValue
   */
  @javax.annotation.Nullable
  public String getFilterValue() {
    return filterValue;
  }

  public void setFilterValue(String filterValue) {
    this.filterValue = filterValue;
  }


  public Insight metric(Double metric) {
    this.metric = metric;
    return this;
  }

  /**
   * Get metric
   * @return metric
   */
  @javax.annotation.Nullable
  public Double getMetric() {
    return metric;
  }

  public void setMetric(Double metric) {
    this.metric = metric;
  }


  public Insight negativeImpactScore(Float negativeImpactScore) {
    this.negativeImpactScore = negativeImpactScore;
    return this;
  }

  /**
   * Get negativeImpactScore
   * @return negativeImpactScore
   */
  @javax.annotation.Nullable
  public Float getNegativeImpactScore() {
    return negativeImpactScore;
  }

  public void setNegativeImpactScore(Float negativeImpactScore) {
    this.negativeImpactScore = negativeImpactScore;
  }


  public Insight totalViews(Long totalViews) {
    this.totalViews = totalViews;
    return this;
  }

  /**
   * Get totalViews
   * @return totalViews
   */
  @javax.annotation.Nullable
  public Long getTotalViews() {
    return totalViews;
  }

  public void setTotalViews(Long totalViews) {
    this.totalViews = totalViews;
  }


  public Insight totalWatchTime(Long totalWatchTime) {
    this.totalWatchTime = totalWatchTime;
    return this;
  }

  /**
   * Get totalWatchTime
   * @return totalWatchTime
   */
  @javax.annotation.Nullable
  public Long getTotalWatchTime() {
    return totalWatchTime;
  }

  public void setTotalWatchTime(Long totalWatchTime) {
    this.totalWatchTime = totalWatchTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Insight insight = (Insight) o;
    return Objects.equals(this.filterColumn, insight.filterColumn) &&
        Objects.equals(this.filterValue, insight.filterValue) &&
        Objects.equals(this.metric, insight.metric) &&
        Objects.equals(this.negativeImpactScore, insight.negativeImpactScore) &&
        Objects.equals(this.totalViews, insight.totalViews) &&
        Objects.equals(this.totalWatchTime, insight.totalWatchTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterColumn, filterValue, metric, negativeImpactScore, totalViews, totalWatchTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Insight {\n");
    sb.append("    filterColumn: ").append(toIndentedString(filterColumn)).append("\n");
    sb.append("    filterValue: ").append(toIndentedString(filterValue)).append("\n");
    sb.append("    metric: ").append(toIndentedString(metric)).append("\n");
    sb.append("    negativeImpactScore: ").append(toIndentedString(negativeImpactScore)).append("\n");
    sb.append("    totalViews: ").append(toIndentedString(totalViews)).append("\n");
    sb.append("    totalWatchTime: ").append(toIndentedString(totalWatchTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filter_column");
    openapiFields.add("filter_value");
    openapiFields.add("metric");
    openapiFields.add("negative_impact_score");
    openapiFields.add("total_views");
    openapiFields.add("total_watch_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Insight
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Insight.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Insight is not found in the empty JSON string", Insight.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Insight.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Insight` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("filter_column") != null && !jsonObj.get("filter_column").isJsonNull()) && !jsonObj.get("filter_column").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter_column` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter_column").toString()));
      }
      if ((jsonObj.get("filter_value") != null && !jsonObj.get("filter_value").isJsonNull()) && !jsonObj.get("filter_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter_value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Insight.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Insight' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Insight> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Insight.class));

       return (TypeAdapter<T>) new TypeAdapter<Insight>() {
           @Override
           public void write(JsonWriter out, Insight value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Insight read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Insight given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Insight
   * @throws IOException if the JSON string is invalid with respect to Insight
   */
  public static Insight fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Insight.class);
  }

  /**
   * Convert an instance of Insight to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

