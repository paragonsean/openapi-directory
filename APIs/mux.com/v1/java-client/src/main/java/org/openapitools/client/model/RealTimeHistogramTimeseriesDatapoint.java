/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RealTimeHistogramTimeseriesBucketValues;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RealTimeHistogramTimeseriesDatapoint
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:45.471488-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RealTimeHistogramTimeseriesDatapoint {
  public static final String SERIALIZED_NAME_AVERAGE = "average";
  @SerializedName(SERIALIZED_NAME_AVERAGE)
  private Double average;

  public static final String SERIALIZED_NAME_BUCKET_VALUES = "bucket_values";
  @SerializedName(SERIALIZED_NAME_BUCKET_VALUES)
  private List<RealTimeHistogramTimeseriesBucketValues> bucketValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_PERCENTAGE = "max_percentage";
  @SerializedName(SERIALIZED_NAME_MAX_PERCENTAGE)
  private Double maxPercentage;

  public static final String SERIALIZED_NAME_MEDIAN = "median";
  @SerializedName(SERIALIZED_NAME_MEDIAN)
  private Double median;

  public static final String SERIALIZED_NAME_P95 = "p95";
  @SerializedName(SERIALIZED_NAME_P95)
  private Double p95;

  public static final String SERIALIZED_NAME_SUM = "sum";
  @SerializedName(SERIALIZED_NAME_SUM)
  private Long sum;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public RealTimeHistogramTimeseriesDatapoint() {
  }

  public RealTimeHistogramTimeseriesDatapoint average(Double average) {
    this.average = average;
    return this;
  }

  /**
   * Get average
   * @return average
   */
  @javax.annotation.Nullable
  public Double getAverage() {
    return average;
  }

  public void setAverage(Double average) {
    this.average = average;
  }


  public RealTimeHistogramTimeseriesDatapoint bucketValues(List<RealTimeHistogramTimeseriesBucketValues> bucketValues) {
    this.bucketValues = bucketValues;
    return this;
  }

  public RealTimeHistogramTimeseriesDatapoint addBucketValuesItem(RealTimeHistogramTimeseriesBucketValues bucketValuesItem) {
    if (this.bucketValues == null) {
      this.bucketValues = new ArrayList<>();
    }
    this.bucketValues.add(bucketValuesItem);
    return this;
  }

  /**
   * Get bucketValues
   * @return bucketValues
   */
  @javax.annotation.Nullable
  public List<RealTimeHistogramTimeseriesBucketValues> getBucketValues() {
    return bucketValues;
  }

  public void setBucketValues(List<RealTimeHistogramTimeseriesBucketValues> bucketValues) {
    this.bucketValues = bucketValues;
  }


  public RealTimeHistogramTimeseriesDatapoint maxPercentage(Double maxPercentage) {
    this.maxPercentage = maxPercentage;
    return this;
  }

  /**
   * Get maxPercentage
   * @return maxPercentage
   */
  @javax.annotation.Nullable
  public Double getMaxPercentage() {
    return maxPercentage;
  }

  public void setMaxPercentage(Double maxPercentage) {
    this.maxPercentage = maxPercentage;
  }


  public RealTimeHistogramTimeseriesDatapoint median(Double median) {
    this.median = median;
    return this;
  }

  /**
   * Get median
   * @return median
   */
  @javax.annotation.Nullable
  public Double getMedian() {
    return median;
  }

  public void setMedian(Double median) {
    this.median = median;
  }


  public RealTimeHistogramTimeseriesDatapoint p95(Double p95) {
    this.p95 = p95;
    return this;
  }

  /**
   * Get p95
   * @return p95
   */
  @javax.annotation.Nullable
  public Double getP95() {
    return p95;
  }

  public void setP95(Double p95) {
    this.p95 = p95;
  }


  public RealTimeHistogramTimeseriesDatapoint sum(Long sum) {
    this.sum = sum;
    return this;
  }

  /**
   * Get sum
   * @return sum
   */
  @javax.annotation.Nullable
  public Long getSum() {
    return sum;
  }

  public void setSum(Long sum) {
    this.sum = sum;
  }


  public RealTimeHistogramTimeseriesDatapoint timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RealTimeHistogramTimeseriesDatapoint realTimeHistogramTimeseriesDatapoint = (RealTimeHistogramTimeseriesDatapoint) o;
    return Objects.equals(this.average, realTimeHistogramTimeseriesDatapoint.average) &&
        Objects.equals(this.bucketValues, realTimeHistogramTimeseriesDatapoint.bucketValues) &&
        Objects.equals(this.maxPercentage, realTimeHistogramTimeseriesDatapoint.maxPercentage) &&
        Objects.equals(this.median, realTimeHistogramTimeseriesDatapoint.median) &&
        Objects.equals(this.p95, realTimeHistogramTimeseriesDatapoint.p95) &&
        Objects.equals(this.sum, realTimeHistogramTimeseriesDatapoint.sum) &&
        Objects.equals(this.timestamp, realTimeHistogramTimeseriesDatapoint.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(average, bucketValues, maxPercentage, median, p95, sum, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RealTimeHistogramTimeseriesDatapoint {\n");
    sb.append("    average: ").append(toIndentedString(average)).append("\n");
    sb.append("    bucketValues: ").append(toIndentedString(bucketValues)).append("\n");
    sb.append("    maxPercentage: ").append(toIndentedString(maxPercentage)).append("\n");
    sb.append("    median: ").append(toIndentedString(median)).append("\n");
    sb.append("    p95: ").append(toIndentedString(p95)).append("\n");
    sb.append("    sum: ").append(toIndentedString(sum)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("average");
    openapiFields.add("bucket_values");
    openapiFields.add("max_percentage");
    openapiFields.add("median");
    openapiFields.add("p95");
    openapiFields.add("sum");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RealTimeHistogramTimeseriesDatapoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RealTimeHistogramTimeseriesDatapoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RealTimeHistogramTimeseriesDatapoint is not found in the empty JSON string", RealTimeHistogramTimeseriesDatapoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RealTimeHistogramTimeseriesDatapoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RealTimeHistogramTimeseriesDatapoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("bucket_values") != null && !jsonObj.get("bucket_values").isJsonNull()) {
        JsonArray jsonArraybucketValues = jsonObj.getAsJsonArray("bucket_values");
        if (jsonArraybucketValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bucket_values").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bucket_values` to be an array in the JSON string but got `%s`", jsonObj.get("bucket_values").toString()));
          }

          // validate the optional field `bucket_values` (array)
          for (int i = 0; i < jsonArraybucketValues.size(); i++) {
            RealTimeHistogramTimeseriesBucketValues.validateJsonElement(jsonArraybucketValues.get(i));
          };
        }
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RealTimeHistogramTimeseriesDatapoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RealTimeHistogramTimeseriesDatapoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RealTimeHistogramTimeseriesDatapoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RealTimeHistogramTimeseriesDatapoint.class));

       return (TypeAdapter<T>) new TypeAdapter<RealTimeHistogramTimeseriesDatapoint>() {
           @Override
           public void write(JsonWriter out, RealTimeHistogramTimeseriesDatapoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RealTimeHistogramTimeseriesDatapoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RealTimeHistogramTimeseriesDatapoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RealTimeHistogramTimeseriesDatapoint
   * @throws IOException if the JSON string is invalid with respect to RealTimeHistogramTimeseriesDatapoint
   */
  public static RealTimeHistogramTimeseriesDatapoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RealTimeHistogramTimeseriesDatapoint.class);
  }

  /**
   * Convert an instance of RealTimeHistogramTimeseriesDatapoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

