/*
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Seconds delivered broken into resolution tiers. Each tier will only be displayed if there was content delivered in the tier.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:45.471488-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeliveryReportDeliveredSecondsByResolution {
  public static final String SERIALIZED_NAME_TIER1080P = "tier_1080p";
  @SerializedName(SERIALIZED_NAME_TIER1080P)
  private Double tier1080p;

  public static final String SERIALIZED_NAME_TIER1440P = "tier_1440p";
  @SerializedName(SERIALIZED_NAME_TIER1440P)
  private Double tier1440p;

  public static final String SERIALIZED_NAME_TIER2160P = "tier_2160p";
  @SerializedName(SERIALIZED_NAME_TIER2160P)
  private Double tier2160p;

  public static final String SERIALIZED_NAME_TIER720P = "tier_720p";
  @SerializedName(SERIALIZED_NAME_TIER720P)
  private Double tier720p;

  public static final String SERIALIZED_NAME_TIER_AUDIO_ONLY = "tier_audio_only";
  @SerializedName(SERIALIZED_NAME_TIER_AUDIO_ONLY)
  private Double tierAudioOnly;

  public DeliveryReportDeliveredSecondsByResolution() {
  }

  public DeliveryReportDeliveredSecondsByResolution tier1080p(Double tier1080p) {
    this.tier1080p = tier1080p;
    return this;
  }

  /**
   * Total number of delivered seconds during this time window that had a resolution larger than the 720p tier but less than or equal to the 1440p tier (over 921,600 and &lt;&#x3D; 2,073,600 pixels total).
   * @return tier1080p
   */
  @javax.annotation.Nullable
  public Double getTier1080p() {
    return tier1080p;
  }

  public void setTier1080p(Double tier1080p) {
    this.tier1080p = tier1080p;
  }


  public DeliveryReportDeliveredSecondsByResolution tier1440p(Double tier1440p) {
    this.tier1440p = tier1440p;
    return this;
  }

  /**
   * Total number of delivered seconds during this time window that had a resolution larger than the 1080p tier but less than or equal to the 2160p tier (over 2,073,600 and &lt;&#x3D; 4,194,304 pixels total).
   * @return tier1440p
   */
  @javax.annotation.Nullable
  public Double getTier1440p() {
    return tier1440p;
  }

  public void setTier1440p(Double tier1440p) {
    this.tier1440p = tier1440p;
  }


  public DeliveryReportDeliveredSecondsByResolution tier2160p(Double tier2160p) {
    this.tier2160p = tier2160p;
    return this;
  }

  /**
   * Total number of delivered seconds during this time window that had a resolution larger than the 1440p tier (over 4,194,304 pixels total).
   * @return tier2160p
   */
  @javax.annotation.Nullable
  public Double getTier2160p() {
    return tier2160p;
  }

  public void setTier2160p(Double tier2160p) {
    this.tier2160p = tier2160p;
  }


  public DeliveryReportDeliveredSecondsByResolution tier720p(Double tier720p) {
    this.tier720p = tier720p;
    return this;
  }

  /**
   * Total number of delivered seconds during this time window that had a resolution within the 720p tier (up to 921,600 pixels total, based on typical 1280x720).
   * @return tier720p
   */
  @javax.annotation.Nullable
  public Double getTier720p() {
    return tier720p;
  }

  public void setTier720p(Double tier720p) {
    this.tier720p = tier720p;
  }


  public DeliveryReportDeliveredSecondsByResolution tierAudioOnly(Double tierAudioOnly) {
    this.tierAudioOnly = tierAudioOnly;
    return this;
  }

  /**
   * Total number of delivered seconds during this time window that had a resolution of audio only.
   * @return tierAudioOnly
   */
  @javax.annotation.Nullable
  public Double getTierAudioOnly() {
    return tierAudioOnly;
  }

  public void setTierAudioOnly(Double tierAudioOnly) {
    this.tierAudioOnly = tierAudioOnly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeliveryReportDeliveredSecondsByResolution deliveryReportDeliveredSecondsByResolution = (DeliveryReportDeliveredSecondsByResolution) o;
    return Objects.equals(this.tier1080p, deliveryReportDeliveredSecondsByResolution.tier1080p) &&
        Objects.equals(this.tier1440p, deliveryReportDeliveredSecondsByResolution.tier1440p) &&
        Objects.equals(this.tier2160p, deliveryReportDeliveredSecondsByResolution.tier2160p) &&
        Objects.equals(this.tier720p, deliveryReportDeliveredSecondsByResolution.tier720p) &&
        Objects.equals(this.tierAudioOnly, deliveryReportDeliveredSecondsByResolution.tierAudioOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tier1080p, tier1440p, tier2160p, tier720p, tierAudioOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeliveryReportDeliveredSecondsByResolution {\n");
    sb.append("    tier1080p: ").append(toIndentedString(tier1080p)).append("\n");
    sb.append("    tier1440p: ").append(toIndentedString(tier1440p)).append("\n");
    sb.append("    tier2160p: ").append(toIndentedString(tier2160p)).append("\n");
    sb.append("    tier720p: ").append(toIndentedString(tier720p)).append("\n");
    sb.append("    tierAudioOnly: ").append(toIndentedString(tierAudioOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tier_1080p");
    openapiFields.add("tier_1440p");
    openapiFields.add("tier_2160p");
    openapiFields.add("tier_720p");
    openapiFields.add("tier_audio_only");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeliveryReportDeliveredSecondsByResolution
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeliveryReportDeliveredSecondsByResolution.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeliveryReportDeliveredSecondsByResolution is not found in the empty JSON string", DeliveryReportDeliveredSecondsByResolution.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeliveryReportDeliveredSecondsByResolution.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeliveryReportDeliveredSecondsByResolution` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeliveryReportDeliveredSecondsByResolution.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeliveryReportDeliveredSecondsByResolution' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeliveryReportDeliveredSecondsByResolution> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeliveryReportDeliveredSecondsByResolution.class));

       return (TypeAdapter<T>) new TypeAdapter<DeliveryReportDeliveredSecondsByResolution>() {
           @Override
           public void write(JsonWriter out, DeliveryReportDeliveredSecondsByResolution value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeliveryReportDeliveredSecondsByResolution read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeliveryReportDeliveredSecondsByResolution given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeliveryReportDeliveredSecondsByResolution
   * @throws IOException if the JSON string is invalid with respect to DeliveryReportDeliveredSecondsByResolution
   */
  public static DeliveryReportDeliveredSecondsByResolution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeliveryReportDeliveredSecondsByResolution.class);
  }

  /**
   * Convert an instance of DeliveryReportDeliveredSecondsByResolution to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

