/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateSimulcastTargetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateSimulcastTargetRequest::OAICreateSimulcastTargetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateSimulcastTargetRequest::OAICreateSimulcastTargetRequest() {
    this->initializeModel();
}

OAICreateSimulcastTargetRequest::~OAICreateSimulcastTargetRequest() {}

void OAICreateSimulcastTargetRequest::initializeModel() {

    m_passthrough_isSet = false;
    m_passthrough_isValid = false;

    m_stream_key_isSet = false;
    m_stream_key_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICreateSimulcastTargetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateSimulcastTargetRequest::fromJsonObject(QJsonObject json) {

    m_passthrough_isValid = ::OpenAPI::fromJsonValue(m_passthrough, json[QString("passthrough")]);
    m_passthrough_isSet = !json[QString("passthrough")].isNull() && m_passthrough_isValid;

    m_stream_key_isValid = ::OpenAPI::fromJsonValue(m_stream_key, json[QString("stream_key")]);
    m_stream_key_isSet = !json[QString("stream_key")].isNull() && m_stream_key_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICreateSimulcastTargetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateSimulcastTargetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_passthrough_isSet) {
        obj.insert(QString("passthrough"), ::OpenAPI::toJsonValue(m_passthrough));
    }
    if (m_stream_key_isSet) {
        obj.insert(QString("stream_key"), ::OpenAPI::toJsonValue(m_stream_key));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAICreateSimulcastTargetRequest::getPassthrough() const {
    return m_passthrough;
}
void OAICreateSimulcastTargetRequest::setPassthrough(const QString &passthrough) {
    m_passthrough = passthrough;
    m_passthrough_isSet = true;
}

bool OAICreateSimulcastTargetRequest::is_passthrough_Set() const{
    return m_passthrough_isSet;
}

bool OAICreateSimulcastTargetRequest::is_passthrough_Valid() const{
    return m_passthrough_isValid;
}

QString OAICreateSimulcastTargetRequest::getStreamKey() const {
    return m_stream_key;
}
void OAICreateSimulcastTargetRequest::setStreamKey(const QString &stream_key) {
    m_stream_key = stream_key;
    m_stream_key_isSet = true;
}

bool OAICreateSimulcastTargetRequest::is_stream_key_Set() const{
    return m_stream_key_isSet;
}

bool OAICreateSimulcastTargetRequest::is_stream_key_Valid() const{
    return m_stream_key_isValid;
}

QString OAICreateSimulcastTargetRequest::getUrl() const {
    return m_url;
}
void OAICreateSimulcastTargetRequest::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICreateSimulcastTargetRequest::is_url_Set() const{
    return m_url_isSet;
}

bool OAICreateSimulcastTargetRequest::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICreateSimulcastTargetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_passthrough_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateSimulcastTargetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_url_isValid && true;
}

} // namespace OpenAPI
