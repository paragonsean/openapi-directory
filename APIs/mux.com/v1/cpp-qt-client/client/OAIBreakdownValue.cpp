/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBreakdownValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBreakdownValue::OAIBreakdownValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBreakdownValue::OAIBreakdownValue() {
    this->initializeModel();
}

OAIBreakdownValue::~OAIBreakdownValue() {}

void OAIBreakdownValue::initializeModel() {

    m_field_isSet = false;
    m_field_isValid = false;

    m_negative_impact_isSet = false;
    m_negative_impact_isValid = false;

    m_total_watch_time_isSet = false;
    m_total_watch_time_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;
}

void OAIBreakdownValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBreakdownValue::fromJsonObject(QJsonObject json) {

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("field")]);
    m_field_isSet = !json[QString("field")].isNull() && m_field_isValid;

    m_negative_impact_isValid = ::OpenAPI::fromJsonValue(m_negative_impact, json[QString("negative_impact")]);
    m_negative_impact_isSet = !json[QString("negative_impact")].isNull() && m_negative_impact_isValid;

    m_total_watch_time_isValid = ::OpenAPI::fromJsonValue(m_total_watch_time, json[QString("total_watch_time")]);
    m_total_watch_time_isSet = !json[QString("total_watch_time")].isNull() && m_total_watch_time_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(m_views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;
}

QString OAIBreakdownValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBreakdownValue::asJsonObject() const {
    QJsonObject obj;
    if (m_field_isSet) {
        obj.insert(QString("field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_negative_impact_isSet) {
        obj.insert(QString("negative_impact"), ::OpenAPI::toJsonValue(m_negative_impact));
    }
    if (m_total_watch_time_isSet) {
        obj.insert(QString("total_watch_time"), ::OpenAPI::toJsonValue(m_total_watch_time));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_views_isSet) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(m_views));
    }
    return obj;
}

QString OAIBreakdownValue::getField() const {
    return m_field;
}
void OAIBreakdownValue::setField(const QString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIBreakdownValue::is_field_Set() const{
    return m_field_isSet;
}

bool OAIBreakdownValue::is_field_Valid() const{
    return m_field_isValid;
}

qint32 OAIBreakdownValue::getNegativeImpact() const {
    return m_negative_impact;
}
void OAIBreakdownValue::setNegativeImpact(const qint32 &negative_impact) {
    m_negative_impact = negative_impact;
    m_negative_impact_isSet = true;
}

bool OAIBreakdownValue::is_negative_impact_Set() const{
    return m_negative_impact_isSet;
}

bool OAIBreakdownValue::is_negative_impact_Valid() const{
    return m_negative_impact_isValid;
}

qint64 OAIBreakdownValue::getTotalWatchTime() const {
    return m_total_watch_time;
}
void OAIBreakdownValue::setTotalWatchTime(const qint64 &total_watch_time) {
    m_total_watch_time = total_watch_time;
    m_total_watch_time_isSet = true;
}

bool OAIBreakdownValue::is_total_watch_time_Set() const{
    return m_total_watch_time_isSet;
}

bool OAIBreakdownValue::is_total_watch_time_Valid() const{
    return m_total_watch_time_isValid;
}

double OAIBreakdownValue::getValue() const {
    return m_value;
}
void OAIBreakdownValue::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIBreakdownValue::is_value_Set() const{
    return m_value_isSet;
}

bool OAIBreakdownValue::is_value_Valid() const{
    return m_value_isValid;
}

qint64 OAIBreakdownValue::getViews() const {
    return m_views;
}
void OAIBreakdownValue::setViews(const qint64 &views) {
    m_views = views;
    m_views_isSet = true;
}

bool OAIBreakdownValue::is_views_Set() const{
    return m_views_isSet;
}

bool OAIBreakdownValue::is_views_Valid() const{
    return m_views_isValid;
}

bool OAIBreakdownValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negative_impact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_watch_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_views_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBreakdownValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
