/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeliveryReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeliveryReport::OAIDeliveryReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeliveryReport::OAIDeliveryReport() {
    this->initializeModel();
}

OAIDeliveryReport::~OAIDeliveryReport() {}

void OAIDeliveryReport::initializeModel() {

    m_asset_duration_isSet = false;
    m_asset_duration_isValid = false;

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_asset_resolution_tier_isSet = false;
    m_asset_resolution_tier_isValid = false;

    m_asset_state_isSet = false;
    m_asset_state_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;

    m_delivered_seconds_isSet = false;
    m_delivered_seconds_isValid = false;

    m_delivered_seconds_by_resolution_isSet = false;
    m_delivered_seconds_by_resolution_isValid = false;

    m_live_stream_id_isSet = false;
    m_live_stream_id_isValid = false;

    m_passthrough_isSet = false;
    m_passthrough_isValid = false;
}

void OAIDeliveryReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeliveryReport::fromJsonObject(QJsonObject json) {

    m_asset_duration_isValid = ::OpenAPI::fromJsonValue(m_asset_duration, json[QString("asset_duration")]);
    m_asset_duration_isSet = !json[QString("asset_duration")].isNull() && m_asset_duration_isValid;

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("asset_id")]);
    m_asset_id_isSet = !json[QString("asset_id")].isNull() && m_asset_id_isValid;

    m_asset_resolution_tier_isValid = ::OpenAPI::fromJsonValue(m_asset_resolution_tier, json[QString("asset_resolution_tier")]);
    m_asset_resolution_tier_isSet = !json[QString("asset_resolution_tier")].isNull() && m_asset_resolution_tier_isValid;

    m_asset_state_isValid = ::OpenAPI::fromJsonValue(m_asset_state, json[QString("asset_state")]);
    m_asset_state_isSet = !json[QString("asset_state")].isNull() && m_asset_state_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("deleted_at")]);
    m_deleted_at_isSet = !json[QString("deleted_at")].isNull() && m_deleted_at_isValid;

    m_delivered_seconds_isValid = ::OpenAPI::fromJsonValue(m_delivered_seconds, json[QString("delivered_seconds")]);
    m_delivered_seconds_isSet = !json[QString("delivered_seconds")].isNull() && m_delivered_seconds_isValid;

    m_delivered_seconds_by_resolution_isValid = ::OpenAPI::fromJsonValue(m_delivered_seconds_by_resolution, json[QString("delivered_seconds_by_resolution")]);
    m_delivered_seconds_by_resolution_isSet = !json[QString("delivered_seconds_by_resolution")].isNull() && m_delivered_seconds_by_resolution_isValid;

    m_live_stream_id_isValid = ::OpenAPI::fromJsonValue(m_live_stream_id, json[QString("live_stream_id")]);
    m_live_stream_id_isSet = !json[QString("live_stream_id")].isNull() && m_live_stream_id_isValid;

    m_passthrough_isValid = ::OpenAPI::fromJsonValue(m_passthrough, json[QString("passthrough")]);
    m_passthrough_isSet = !json[QString("passthrough")].isNull() && m_passthrough_isValid;
}

QString OAIDeliveryReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeliveryReport::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_duration_isSet) {
        obj.insert(QString("asset_duration"), ::OpenAPI::toJsonValue(m_asset_duration));
    }
    if (m_asset_id_isSet) {
        obj.insert(QString("asset_id"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_asset_resolution_tier_isSet) {
        obj.insert(QString("asset_resolution_tier"), ::OpenAPI::toJsonValue(m_asset_resolution_tier));
    }
    if (m_asset_state_isSet) {
        obj.insert(QString("asset_state"), ::OpenAPI::toJsonValue(m_asset_state));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deleted_at_isSet) {
        obj.insert(QString("deleted_at"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    if (m_delivered_seconds_isSet) {
        obj.insert(QString("delivered_seconds"), ::OpenAPI::toJsonValue(m_delivered_seconds));
    }
    if (m_delivered_seconds_by_resolution.isSet()) {
        obj.insert(QString("delivered_seconds_by_resolution"), ::OpenAPI::toJsonValue(m_delivered_seconds_by_resolution));
    }
    if (m_live_stream_id_isSet) {
        obj.insert(QString("live_stream_id"), ::OpenAPI::toJsonValue(m_live_stream_id));
    }
    if (m_passthrough_isSet) {
        obj.insert(QString("passthrough"), ::OpenAPI::toJsonValue(m_passthrough));
    }
    return obj;
}

double OAIDeliveryReport::getAssetDuration() const {
    return m_asset_duration;
}
void OAIDeliveryReport::setAssetDuration(const double &asset_duration) {
    m_asset_duration = asset_duration;
    m_asset_duration_isSet = true;
}

bool OAIDeliveryReport::is_asset_duration_Set() const{
    return m_asset_duration_isSet;
}

bool OAIDeliveryReport::is_asset_duration_Valid() const{
    return m_asset_duration_isValid;
}

QString OAIDeliveryReport::getAssetId() const {
    return m_asset_id;
}
void OAIDeliveryReport::setAssetId(const QString &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAIDeliveryReport::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIDeliveryReport::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

QString OAIDeliveryReport::getAssetResolutionTier() const {
    return m_asset_resolution_tier;
}
void OAIDeliveryReport::setAssetResolutionTier(const QString &asset_resolution_tier) {
    m_asset_resolution_tier = asset_resolution_tier;
    m_asset_resolution_tier_isSet = true;
}

bool OAIDeliveryReport::is_asset_resolution_tier_Set() const{
    return m_asset_resolution_tier_isSet;
}

bool OAIDeliveryReport::is_asset_resolution_tier_Valid() const{
    return m_asset_resolution_tier_isValid;
}

QString OAIDeliveryReport::getAssetState() const {
    return m_asset_state;
}
void OAIDeliveryReport::setAssetState(const QString &asset_state) {
    m_asset_state = asset_state;
    m_asset_state_isSet = true;
}

bool OAIDeliveryReport::is_asset_state_Set() const{
    return m_asset_state_isSet;
}

bool OAIDeliveryReport::is_asset_state_Valid() const{
    return m_asset_state_isValid;
}

QString OAIDeliveryReport::getCreatedAt() const {
    return m_created_at;
}
void OAIDeliveryReport::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIDeliveryReport::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIDeliveryReport::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIDeliveryReport::getDeletedAt() const {
    return m_deleted_at;
}
void OAIDeliveryReport::setDeletedAt(const QString &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAIDeliveryReport::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAIDeliveryReport::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

double OAIDeliveryReport::getDeliveredSeconds() const {
    return m_delivered_seconds;
}
void OAIDeliveryReport::setDeliveredSeconds(const double &delivered_seconds) {
    m_delivered_seconds = delivered_seconds;
    m_delivered_seconds_isSet = true;
}

bool OAIDeliveryReport::is_delivered_seconds_Set() const{
    return m_delivered_seconds_isSet;
}

bool OAIDeliveryReport::is_delivered_seconds_Valid() const{
    return m_delivered_seconds_isValid;
}

OAIDeliveryReport_delivered_seconds_by_resolution OAIDeliveryReport::getDeliveredSecondsByResolution() const {
    return m_delivered_seconds_by_resolution;
}
void OAIDeliveryReport::setDeliveredSecondsByResolution(const OAIDeliveryReport_delivered_seconds_by_resolution &delivered_seconds_by_resolution) {
    m_delivered_seconds_by_resolution = delivered_seconds_by_resolution;
    m_delivered_seconds_by_resolution_isSet = true;
}

bool OAIDeliveryReport::is_delivered_seconds_by_resolution_Set() const{
    return m_delivered_seconds_by_resolution_isSet;
}

bool OAIDeliveryReport::is_delivered_seconds_by_resolution_Valid() const{
    return m_delivered_seconds_by_resolution_isValid;
}

QString OAIDeliveryReport::getLiveStreamId() const {
    return m_live_stream_id;
}
void OAIDeliveryReport::setLiveStreamId(const QString &live_stream_id) {
    m_live_stream_id = live_stream_id;
    m_live_stream_id_isSet = true;
}

bool OAIDeliveryReport::is_live_stream_id_Set() const{
    return m_live_stream_id_isSet;
}

bool OAIDeliveryReport::is_live_stream_id_Valid() const{
    return m_live_stream_id_isValid;
}

QString OAIDeliveryReport::getPassthrough() const {
    return m_passthrough;
}
void OAIDeliveryReport::setPassthrough(const QString &passthrough) {
    m_passthrough = passthrough;
    m_passthrough_isSet = true;
}

bool OAIDeliveryReport::is_passthrough_Set() const{
    return m_passthrough_isSet;
}

bool OAIDeliveryReport::is_passthrough_Valid() const{
    return m_passthrough_isValid;
}

bool OAIDeliveryReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_resolution_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivered_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivered_seconds_by_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passthrough_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeliveryReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
