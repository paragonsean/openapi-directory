/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoViewEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoViewEvent::OAIVideoViewEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoViewEvent::OAIVideoViewEvent() {
    this->initializeModel();
}

OAIVideoViewEvent::~OAIVideoViewEvent() {}

void OAIVideoViewEvent::initializeModel() {

    m_event_time_isSet = false;
    m_event_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_playback_time_isSet = false;
    m_playback_time_isValid = false;

    m_viewer_time_isSet = false;
    m_viewer_time_isValid = false;
}

void OAIVideoViewEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoViewEvent::fromJsonObject(QJsonObject json) {

    m_event_time_isValid = ::OpenAPI::fromJsonValue(m_event_time, json[QString("event_time")]);
    m_event_time_isSet = !json[QString("event_time")].isNull() && m_event_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_playback_time_isValid = ::OpenAPI::fromJsonValue(m_playback_time, json[QString("playback_time")]);
    m_playback_time_isSet = !json[QString("playback_time")].isNull() && m_playback_time_isValid;

    m_viewer_time_isValid = ::OpenAPI::fromJsonValue(m_viewer_time, json[QString("viewer_time")]);
    m_viewer_time_isSet = !json[QString("viewer_time")].isNull() && m_viewer_time_isValid;
}

QString OAIVideoViewEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoViewEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_event_time_isSet) {
        obj.insert(QString("event_time"), ::OpenAPI::toJsonValue(m_event_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_playback_time_isSet) {
        obj.insert(QString("playback_time"), ::OpenAPI::toJsonValue(m_playback_time));
    }
    if (m_viewer_time_isSet) {
        obj.insert(QString("viewer_time"), ::OpenAPI::toJsonValue(m_viewer_time));
    }
    return obj;
}

qint64 OAIVideoViewEvent::getEventTime() const {
    return m_event_time;
}
void OAIVideoViewEvent::setEventTime(const qint64 &event_time) {
    m_event_time = event_time;
    m_event_time_isSet = true;
}

bool OAIVideoViewEvent::is_event_time_Set() const{
    return m_event_time_isSet;
}

bool OAIVideoViewEvent::is_event_time_Valid() const{
    return m_event_time_isValid;
}

QString OAIVideoViewEvent::getName() const {
    return m_name;
}
void OAIVideoViewEvent::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVideoViewEvent::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVideoViewEvent::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIVideoViewEvent::getPlaybackTime() const {
    return m_playback_time;
}
void OAIVideoViewEvent::setPlaybackTime(const qint64 &playback_time) {
    m_playback_time = playback_time;
    m_playback_time_isSet = true;
}

bool OAIVideoViewEvent::is_playback_time_Set() const{
    return m_playback_time_isSet;
}

bool OAIVideoViewEvent::is_playback_time_Valid() const{
    return m_playback_time_isValid;
}

qint64 OAIVideoViewEvent::getViewerTime() const {
    return m_viewer_time;
}
void OAIVideoViewEvent::setViewerTime(const qint64 &viewer_time) {
    m_viewer_time = viewer_time;
    m_viewer_time_isSet = true;
}

bool OAIVideoViewEvent::is_viewer_time_Set() const{
    return m_viewer_time_isSet;
}

bool OAIVideoViewEvent::is_viewer_time_Valid() const{
    return m_viewer_time_isValid;
}

bool OAIVideoViewEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoViewEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
