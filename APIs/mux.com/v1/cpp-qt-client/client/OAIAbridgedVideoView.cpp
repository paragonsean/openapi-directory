/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAbridgedVideoView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAbridgedVideoView::OAIAbridgedVideoView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAbridgedVideoView::OAIAbridgedVideoView() {
    this->initializeModel();
}

OAIAbridgedVideoView::~OAIAbridgedVideoView() {}

void OAIAbridgedVideoView::initializeModel() {

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_error_type_id_isSet = false;
    m_error_type_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_player_error_code_isSet = false;
    m_player_error_code_isValid = false;

    m_player_error_message_isSet = false;
    m_player_error_message_isValid = false;

    m_total_row_count_isSet = false;
    m_total_row_count_isValid = false;

    m_video_title_isSet = false;
    m_video_title_isValid = false;

    m_view_end_isSet = false;
    m_view_end_isValid = false;

    m_view_start_isSet = false;
    m_view_start_isValid = false;

    m_viewer_application_name_isSet = false;
    m_viewer_application_name_isValid = false;

    m_viewer_os_family_isSet = false;
    m_viewer_os_family_isValid = false;
}

void OAIAbridgedVideoView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAbridgedVideoView::fromJsonObject(QJsonObject json) {

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_error_type_id_isValid = ::OpenAPI::fromJsonValue(m_error_type_id, json[QString("error_type_id")]);
    m_error_type_id_isSet = !json[QString("error_type_id")].isNull() && m_error_type_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_player_error_code_isValid = ::OpenAPI::fromJsonValue(m_player_error_code, json[QString("player_error_code")]);
    m_player_error_code_isSet = !json[QString("player_error_code")].isNull() && m_player_error_code_isValid;

    m_player_error_message_isValid = ::OpenAPI::fromJsonValue(m_player_error_message, json[QString("player_error_message")]);
    m_player_error_message_isSet = !json[QString("player_error_message")].isNull() && m_player_error_message_isValid;

    m_total_row_count_isValid = ::OpenAPI::fromJsonValue(m_total_row_count, json[QString("total_row_count")]);
    m_total_row_count_isSet = !json[QString("total_row_count")].isNull() && m_total_row_count_isValid;

    m_video_title_isValid = ::OpenAPI::fromJsonValue(m_video_title, json[QString("video_title")]);
    m_video_title_isSet = !json[QString("video_title")].isNull() && m_video_title_isValid;

    m_view_end_isValid = ::OpenAPI::fromJsonValue(m_view_end, json[QString("view_end")]);
    m_view_end_isSet = !json[QString("view_end")].isNull() && m_view_end_isValid;

    m_view_start_isValid = ::OpenAPI::fromJsonValue(m_view_start, json[QString("view_start")]);
    m_view_start_isSet = !json[QString("view_start")].isNull() && m_view_start_isValid;

    m_viewer_application_name_isValid = ::OpenAPI::fromJsonValue(m_viewer_application_name, json[QString("viewer_application_name")]);
    m_viewer_application_name_isSet = !json[QString("viewer_application_name")].isNull() && m_viewer_application_name_isValid;

    m_viewer_os_family_isValid = ::OpenAPI::fromJsonValue(m_viewer_os_family, json[QString("viewer_os_family")]);
    m_viewer_os_family_isSet = !json[QString("viewer_os_family")].isNull() && m_viewer_os_family_isValid;
}

QString OAIAbridgedVideoView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAbridgedVideoView::asJsonObject() const {
    QJsonObject obj;
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_error_type_id_isSet) {
        obj.insert(QString("error_type_id"), ::OpenAPI::toJsonValue(m_error_type_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_player_error_code_isSet) {
        obj.insert(QString("player_error_code"), ::OpenAPI::toJsonValue(m_player_error_code));
    }
    if (m_player_error_message_isSet) {
        obj.insert(QString("player_error_message"), ::OpenAPI::toJsonValue(m_player_error_message));
    }
    if (m_total_row_count_isSet) {
        obj.insert(QString("total_row_count"), ::OpenAPI::toJsonValue(m_total_row_count));
    }
    if (m_video_title_isSet) {
        obj.insert(QString("video_title"), ::OpenAPI::toJsonValue(m_video_title));
    }
    if (m_view_end_isSet) {
        obj.insert(QString("view_end"), ::OpenAPI::toJsonValue(m_view_end));
    }
    if (m_view_start_isSet) {
        obj.insert(QString("view_start"), ::OpenAPI::toJsonValue(m_view_start));
    }
    if (m_viewer_application_name_isSet) {
        obj.insert(QString("viewer_application_name"), ::OpenAPI::toJsonValue(m_viewer_application_name));
    }
    if (m_viewer_os_family_isSet) {
        obj.insert(QString("viewer_os_family"), ::OpenAPI::toJsonValue(m_viewer_os_family));
    }
    return obj;
}

QString OAIAbridgedVideoView::getCountryCode() const {
    return m_country_code;
}
void OAIAbridgedVideoView::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIAbridgedVideoView::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIAbridgedVideoView::is_country_code_Valid() const{
    return m_country_code_isValid;
}

qint32 OAIAbridgedVideoView::getErrorTypeId() const {
    return m_error_type_id;
}
void OAIAbridgedVideoView::setErrorTypeId(const qint32 &error_type_id) {
    m_error_type_id = error_type_id;
    m_error_type_id_isSet = true;
}

bool OAIAbridgedVideoView::is_error_type_id_Set() const{
    return m_error_type_id_isSet;
}

bool OAIAbridgedVideoView::is_error_type_id_Valid() const{
    return m_error_type_id_isValid;
}

QString OAIAbridgedVideoView::getId() const {
    return m_id;
}
void OAIAbridgedVideoView::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAbridgedVideoView::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAbridgedVideoView::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAbridgedVideoView::getPlayerErrorCode() const {
    return m_player_error_code;
}
void OAIAbridgedVideoView::setPlayerErrorCode(const QString &player_error_code) {
    m_player_error_code = player_error_code;
    m_player_error_code_isSet = true;
}

bool OAIAbridgedVideoView::is_player_error_code_Set() const{
    return m_player_error_code_isSet;
}

bool OAIAbridgedVideoView::is_player_error_code_Valid() const{
    return m_player_error_code_isValid;
}

QString OAIAbridgedVideoView::getPlayerErrorMessage() const {
    return m_player_error_message;
}
void OAIAbridgedVideoView::setPlayerErrorMessage(const QString &player_error_message) {
    m_player_error_message = player_error_message;
    m_player_error_message_isSet = true;
}

bool OAIAbridgedVideoView::is_player_error_message_Set() const{
    return m_player_error_message_isSet;
}

bool OAIAbridgedVideoView::is_player_error_message_Valid() const{
    return m_player_error_message_isValid;
}

qint64 OAIAbridgedVideoView::getTotalRowCount() const {
    return m_total_row_count;
}
void OAIAbridgedVideoView::setTotalRowCount(const qint64 &total_row_count) {
    m_total_row_count = total_row_count;
    m_total_row_count_isSet = true;
}

bool OAIAbridgedVideoView::is_total_row_count_Set() const{
    return m_total_row_count_isSet;
}

bool OAIAbridgedVideoView::is_total_row_count_Valid() const{
    return m_total_row_count_isValid;
}

QString OAIAbridgedVideoView::getVideoTitle() const {
    return m_video_title;
}
void OAIAbridgedVideoView::setVideoTitle(const QString &video_title) {
    m_video_title = video_title;
    m_video_title_isSet = true;
}

bool OAIAbridgedVideoView::is_video_title_Set() const{
    return m_video_title_isSet;
}

bool OAIAbridgedVideoView::is_video_title_Valid() const{
    return m_video_title_isValid;
}

QString OAIAbridgedVideoView::getViewEnd() const {
    return m_view_end;
}
void OAIAbridgedVideoView::setViewEnd(const QString &view_end) {
    m_view_end = view_end;
    m_view_end_isSet = true;
}

bool OAIAbridgedVideoView::is_view_end_Set() const{
    return m_view_end_isSet;
}

bool OAIAbridgedVideoView::is_view_end_Valid() const{
    return m_view_end_isValid;
}

QString OAIAbridgedVideoView::getViewStart() const {
    return m_view_start;
}
void OAIAbridgedVideoView::setViewStart(const QString &view_start) {
    m_view_start = view_start;
    m_view_start_isSet = true;
}

bool OAIAbridgedVideoView::is_view_start_Set() const{
    return m_view_start_isSet;
}

bool OAIAbridgedVideoView::is_view_start_Valid() const{
    return m_view_start_isValid;
}

QString OAIAbridgedVideoView::getViewerApplicationName() const {
    return m_viewer_application_name;
}
void OAIAbridgedVideoView::setViewerApplicationName(const QString &viewer_application_name) {
    m_viewer_application_name = viewer_application_name;
    m_viewer_application_name_isSet = true;
}

bool OAIAbridgedVideoView::is_viewer_application_name_Set() const{
    return m_viewer_application_name_isSet;
}

bool OAIAbridgedVideoView::is_viewer_application_name_Valid() const{
    return m_viewer_application_name_isValid;
}

QString OAIAbridgedVideoView::getViewerOsFamily() const {
    return m_viewer_os_family;
}
void OAIAbridgedVideoView::setViewerOsFamily(const QString &viewer_os_family) {
    m_viewer_os_family = viewer_os_family;
    m_viewer_os_family_isSet = true;
}

bool OAIAbridgedVideoView::is_viewer_os_family_Set() const{
    return m_viewer_os_family_isSet;
}

bool OAIAbridgedVideoView::is_viewer_os_family_Valid() const{
    return m_viewer_os_family_isValid;
}

bool OAIAbridgedVideoView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_os_family_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAbridgedVideoView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
