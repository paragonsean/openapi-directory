/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOverallValues.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOverallValues::OAIOverallValues(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOverallValues::OAIOverallValues() {
    this->initializeModel();
}

OAIOverallValues::~OAIOverallValues() {}

void OAIOverallValues::initializeModel() {

    m_global_value_isSet = false;
    m_global_value_isValid = false;

    m_total_views_isSet = false;
    m_total_views_isValid = false;

    m_total_watch_time_isSet = false;
    m_total_watch_time_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIOverallValues::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOverallValues::fromJsonObject(QJsonObject json) {

    m_global_value_isValid = ::OpenAPI::fromJsonValue(m_global_value, json[QString("global_value")]);
    m_global_value_isSet = !json[QString("global_value")].isNull() && m_global_value_isValid;

    m_total_views_isValid = ::OpenAPI::fromJsonValue(m_total_views, json[QString("total_views")]);
    m_total_views_isSet = !json[QString("total_views")].isNull() && m_total_views_isValid;

    m_total_watch_time_isValid = ::OpenAPI::fromJsonValue(m_total_watch_time, json[QString("total_watch_time")]);
    m_total_watch_time_isSet = !json[QString("total_watch_time")].isNull() && m_total_watch_time_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIOverallValues::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOverallValues::asJsonObject() const {
    QJsonObject obj;
    if (m_global_value_isSet) {
        obj.insert(QString("global_value"), ::OpenAPI::toJsonValue(m_global_value));
    }
    if (m_total_views_isSet) {
        obj.insert(QString("total_views"), ::OpenAPI::toJsonValue(m_total_views));
    }
    if (m_total_watch_time_isSet) {
        obj.insert(QString("total_watch_time"), ::OpenAPI::toJsonValue(m_total_watch_time));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

double OAIOverallValues::getGlobalValue() const {
    return m_global_value;
}
void OAIOverallValues::setGlobalValue(const double &global_value) {
    m_global_value = global_value;
    m_global_value_isSet = true;
}

bool OAIOverallValues::is_global_value_Set() const{
    return m_global_value_isSet;
}

bool OAIOverallValues::is_global_value_Valid() const{
    return m_global_value_isValid;
}

qint64 OAIOverallValues::getTotalViews() const {
    return m_total_views;
}
void OAIOverallValues::setTotalViews(const qint64 &total_views) {
    m_total_views = total_views;
    m_total_views_isSet = true;
}

bool OAIOverallValues::is_total_views_Set() const{
    return m_total_views_isSet;
}

bool OAIOverallValues::is_total_views_Valid() const{
    return m_total_views_isValid;
}

qint64 OAIOverallValues::getTotalWatchTime() const {
    return m_total_watch_time;
}
void OAIOverallValues::setTotalWatchTime(const qint64 &total_watch_time) {
    m_total_watch_time = total_watch_time;
    m_total_watch_time_isSet = true;
}

bool OAIOverallValues::is_total_watch_time_Set() const{
    return m_total_watch_time_isSet;
}

bool OAIOverallValues::is_total_watch_time_Valid() const{
    return m_total_watch_time_isValid;
}

double OAIOverallValues::getValue() const {
    return m_value;
}
void OAIOverallValues::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIOverallValues::is_value_Set() const{
    return m_value_isSet;
}

bool OAIOverallValues::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIOverallValues::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_global_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_views_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_watch_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOverallValues::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
