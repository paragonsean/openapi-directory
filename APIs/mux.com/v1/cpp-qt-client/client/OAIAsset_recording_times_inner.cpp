/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsset_recording_times_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsset_recording_times_inner::OAIAsset_recording_times_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsset_recording_times_inner::OAIAsset_recording_times_inner() {
    this->initializeModel();
}

OAIAsset_recording_times_inner::~OAIAsset_recording_times_inner() {}

void OAIAsset_recording_times_inner::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAsset_recording_times_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsset_recording_times_inner::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("started_at")]);
    m_started_at_isSet = !json[QString("started_at")].isNull() && m_started_at_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAsset_recording_times_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsset_recording_times_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("started_at"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

double OAIAsset_recording_times_inner::getDuration() const {
    return m_duration;
}
void OAIAsset_recording_times_inner::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIAsset_recording_times_inner::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIAsset_recording_times_inner::is_duration_Valid() const{
    return m_duration_isValid;
}

QDateTime OAIAsset_recording_times_inner::getStartedAt() const {
    return m_started_at;
}
void OAIAsset_recording_times_inner::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIAsset_recording_times_inner::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIAsset_recording_times_inner::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAIAsset_recording_times_inner::getType() const {
    return m_type;
}
void OAIAsset_recording_times_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAsset_recording_times_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAsset_recording_times_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAsset_recording_times_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsset_recording_times_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
