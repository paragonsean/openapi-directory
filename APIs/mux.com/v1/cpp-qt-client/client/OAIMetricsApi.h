/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMetricsApi_H
#define OAI_OAIMetricsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetMetricTimeseriesDataResponse.h"
#include "OAIGetOverallValuesResponse.h"
#include "OAIListAllMetricValuesResponse.h"
#include "OAIListBreakdownValuesResponse.h"
#include "OAIListInsightsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMetricsApi : public QObject {
    Q_OBJECT

public:
    OAIMetricsApi(const int timeOut = 0);
    ~OAIMetricsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  metric_id QString [required]
    * @param[in]  timeframe QList<QString> [optional]
    * @param[in]  filters QList<QString> [optional]
    * @param[in]  measurement QString [optional]
    * @param[in]  order_direction QString [optional]
    * @param[in]  group_by QString [optional]
    */
    virtual void getMetricTimeseriesData(const QString &metric_id, const ::OpenAPI::OptionalParam<QList<QString>> &timeframe = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &measurement = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &group_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  metric_id QString [required]
    * @param[in]  timeframe QList<QString> [optional]
    * @param[in]  filters QList<QString> [optional]
    * @param[in]  measurement QString [optional]
    */
    virtual void getOverallValues(const QString &metric_id, const ::OpenAPI::OptionalParam<QList<QString>> &timeframe = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &measurement = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  timeframe QList<QString> [optional]
    * @param[in]  filters QList<QString> [optional]
    * @param[in]  dimension QString [optional]
    * @param[in]  value QString [optional]
    */
    virtual void listAllMetricValues(const ::OpenAPI::OptionalParam<QList<QString>> &timeframe = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &dimension = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &value = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  metric_id QString [required]
    * @param[in]  group_by QString [optional]
    * @param[in]  measurement QString [optional]
    * @param[in]  filters QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  order_direction QString [optional]
    * @param[in]  timeframe QList<QString> [optional]
    */
    virtual void listBreakdownValues(const QString &metric_id, const ::OpenAPI::OptionalParam<QString> &group_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &measurement = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &timeframe = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  metric_id QString [required]
    * @param[in]  measurement QString [optional]
    * @param[in]  order_direction QString [optional]
    * @param[in]  timeframe QList<QString> [optional]
    */
    virtual void listInsights(const QString &metric_id, const ::OpenAPI::OptionalParam<QString> &measurement = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &timeframe = ::OpenAPI::OptionalParam<QList<QString>>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getMetricTimeseriesDataCallback(OAIHttpRequestWorker *worker);
    void getOverallValuesCallback(OAIHttpRequestWorker *worker);
    void listAllMetricValuesCallback(OAIHttpRequestWorker *worker);
    void listBreakdownValuesCallback(OAIHttpRequestWorker *worker);
    void listInsightsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getMetricTimeseriesDataSignal(OAIGetMetricTimeseriesDataResponse summary);
    void getOverallValuesSignal(OAIGetOverallValuesResponse summary);
    void listAllMetricValuesSignal(OAIListAllMetricValuesResponse summary);
    void listBreakdownValuesSignal(OAIListBreakdownValuesResponse summary);
    void listInsightsSignal(OAIListInsightsResponse summary);


    void getMetricTimeseriesDataSignalFull(OAIHttpRequestWorker *worker, OAIGetMetricTimeseriesDataResponse summary);
    void getOverallValuesSignalFull(OAIHttpRequestWorker *worker, OAIGetOverallValuesResponse summary);
    void listAllMetricValuesSignalFull(OAIHttpRequestWorker *worker, OAIListAllMetricValuesResponse summary);
    void listBreakdownValuesSignalFull(OAIHttpRequestWorker *worker, OAIListBreakdownValuesResponse summary);
    void listInsightsSignalFull(OAIHttpRequestWorker *worker, OAIListInsightsResponse summary);

    Q_DECL_DEPRECATED_X("Use getMetricTimeseriesDataSignalError() instead")
    void getMetricTimeseriesDataSignalE(OAIGetMetricTimeseriesDataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMetricTimeseriesDataSignalError(OAIGetMetricTimeseriesDataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOverallValuesSignalError() instead")
    void getOverallValuesSignalE(OAIGetOverallValuesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOverallValuesSignalError(OAIGetOverallValuesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllMetricValuesSignalError() instead")
    void listAllMetricValuesSignalE(OAIListAllMetricValuesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllMetricValuesSignalError(OAIListAllMetricValuesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBreakdownValuesSignalError() instead")
    void listBreakdownValuesSignalE(OAIListBreakdownValuesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listBreakdownValuesSignalError(OAIListBreakdownValuesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInsightsSignalError() instead")
    void listInsightsSignalE(OAIListInsightsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listInsightsSignalError(OAIListInsightsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getMetricTimeseriesDataSignalErrorFull() instead")
    void getMetricTimeseriesDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMetricTimeseriesDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOverallValuesSignalErrorFull() instead")
    void getOverallValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOverallValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAllMetricValuesSignalErrorFull() instead")
    void listAllMetricValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAllMetricValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBreakdownValuesSignalErrorFull() instead")
    void listBreakdownValuesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listBreakdownValuesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInsightsSignalErrorFull() instead")
    void listInsightsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listInsightsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
