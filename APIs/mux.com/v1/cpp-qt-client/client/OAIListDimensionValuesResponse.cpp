/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDimensionValuesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDimensionValuesResponse::OAIListDimensionValuesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDimensionValuesResponse::OAIListDimensionValuesResponse() {
    this->initializeModel();
}

OAIListDimensionValuesResponse::~OAIListDimensionValuesResponse() {}

void OAIListDimensionValuesResponse::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_timeframe_isSet = false;
    m_timeframe_isValid = false;

    m_total_row_count_isSet = false;
    m_total_row_count_isValid = false;
}

void OAIListDimensionValuesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDimensionValuesResponse::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_timeframe_isValid = ::OpenAPI::fromJsonValue(m_timeframe, json[QString("timeframe")]);
    m_timeframe_isSet = !json[QString("timeframe")].isNull() && m_timeframe_isValid;

    m_total_row_count_isValid = ::OpenAPI::fromJsonValue(m_total_row_count, json[QString("total_row_count")]);
    m_total_row_count_isSet = !json[QString("total_row_count")].isNull() && m_total_row_count_isValid;
}

QString OAIListDimensionValuesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDimensionValuesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_timeframe.size() > 0) {
        obj.insert(QString("timeframe"), ::OpenAPI::toJsonValue(m_timeframe));
    }
    if (m_total_row_count_isSet) {
        obj.insert(QString("total_row_count"), ::OpenAPI::toJsonValue(m_total_row_count));
    }
    return obj;
}

QList<OAIDimensionValue> OAIListDimensionValuesResponse::getData() const {
    return m_data;
}
void OAIListDimensionValuesResponse::setData(const QList<OAIDimensionValue> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIListDimensionValuesResponse::is_data_Set() const{
    return m_data_isSet;
}

bool OAIListDimensionValuesResponse::is_data_Valid() const{
    return m_data_isValid;
}

QList<qint64> OAIListDimensionValuesResponse::getTimeframe() const {
    return m_timeframe;
}
void OAIListDimensionValuesResponse::setTimeframe(const QList<qint64> &timeframe) {
    m_timeframe = timeframe;
    m_timeframe_isSet = true;
}

bool OAIListDimensionValuesResponse::is_timeframe_Set() const{
    return m_timeframe_isSet;
}

bool OAIListDimensionValuesResponse::is_timeframe_Valid() const{
    return m_timeframe_isValid;
}

qint64 OAIListDimensionValuesResponse::getTotalRowCount() const {
    return m_total_row_count;
}
void OAIListDimensionValuesResponse::setTotalRowCount(const qint64 &total_row_count) {
    m_total_row_count = total_row_count;
    m_total_row_count_isSet = true;
}

bool OAIListDimensionValuesResponse::is_total_row_count_Set() const{
    return m_total_row_count_isSet;
}

bool OAIListDimensionValuesResponse::is_total_row_count_Valid() const{
    return m_total_row_count_isValid;
}

bool OAIListDimensionValuesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeframe.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_row_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDimensionValuesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
