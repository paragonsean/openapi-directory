/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateUploadRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateUploadRequest::OAICreateUploadRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateUploadRequest::OAICreateUploadRequest() {
    this->initializeModel();
}

OAICreateUploadRequest::~OAICreateUploadRequest() {}

void OAICreateUploadRequest::initializeModel() {

    m_cors_origin_isSet = false;
    m_cors_origin_isValid = false;

    m_new_asset_settings_isSet = false;
    m_new_asset_settings_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;
}

void OAICreateUploadRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateUploadRequest::fromJsonObject(QJsonObject json) {

    m_cors_origin_isValid = ::OpenAPI::fromJsonValue(m_cors_origin, json[QString("cors_origin")]);
    m_cors_origin_isSet = !json[QString("cors_origin")].isNull() && m_cors_origin_isValid;

    m_new_asset_settings_isValid = ::OpenAPI::fromJsonValue(m_new_asset_settings, json[QString("new_asset_settings")]);
    m_new_asset_settings_isSet = !json[QString("new_asset_settings")].isNull() && m_new_asset_settings_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;
}

QString OAICreateUploadRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateUploadRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cors_origin_isSet) {
        obj.insert(QString("cors_origin"), ::OpenAPI::toJsonValue(m_cors_origin));
    }
    if (m_new_asset_settings.isSet()) {
        obj.insert(QString("new_asset_settings"), ::OpenAPI::toJsonValue(m_new_asset_settings));
    }
    if (m_test_isSet) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    return obj;
}

QString OAICreateUploadRequest::getCorsOrigin() const {
    return m_cors_origin;
}
void OAICreateUploadRequest::setCorsOrigin(const QString &cors_origin) {
    m_cors_origin = cors_origin;
    m_cors_origin_isSet = true;
}

bool OAICreateUploadRequest::is_cors_origin_Set() const{
    return m_cors_origin_isSet;
}

bool OAICreateUploadRequest::is_cors_origin_Valid() const{
    return m_cors_origin_isValid;
}

OAICreateAssetRequest OAICreateUploadRequest::getNewAssetSettings() const {
    return m_new_asset_settings;
}
void OAICreateUploadRequest::setNewAssetSettings(const OAICreateAssetRequest &new_asset_settings) {
    m_new_asset_settings = new_asset_settings;
    m_new_asset_settings_isSet = true;
}

bool OAICreateUploadRequest::is_new_asset_settings_Set() const{
    return m_new_asset_settings_isSet;
}

bool OAICreateUploadRequest::is_new_asset_settings_Valid() const{
    return m_new_asset_settings_isValid;
}

bool OAICreateUploadRequest::isTest() const {
    return m_test;
}
void OAICreateUploadRequest::setTest(const bool &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAICreateUploadRequest::is_test_Set() const{
    return m_test_isSet;
}

bool OAICreateUploadRequest::is_test_Valid() const{
    return m_test_isValid;
}

qint32 OAICreateUploadRequest::getTimeout() const {
    return m_timeout;
}
void OAICreateUploadRequest::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAICreateUploadRequest::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAICreateUploadRequest::is_timeout_Valid() const{
    return m_timeout_isValid;
}

bool OAICreateUploadRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cors_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_asset_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateUploadRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_new_asset_settings_isValid && true;
}

} // namespace OpenAPI
