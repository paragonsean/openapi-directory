/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputSettings_overlay_settings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputSettings_overlay_settings::OAIInputSettings_overlay_settings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputSettings_overlay_settings::OAIInputSettings_overlay_settings() {
    this->initializeModel();
}

OAIInputSettings_overlay_settings::~OAIInputSettings_overlay_settings() {}

void OAIInputSettings_overlay_settings::initializeModel() {

    m_height_isSet = false;
    m_height_isValid = false;

    m_horizontal_align_isSet = false;
    m_horizontal_align_isValid = false;

    m_horizontal_margin_isSet = false;
    m_horizontal_margin_isValid = false;

    m_opacity_isSet = false;
    m_opacity_isValid = false;

    m_vertical_align_isSet = false;
    m_vertical_align_isValid = false;

    m_vertical_margin_isSet = false;
    m_vertical_margin_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIInputSettings_overlay_settings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputSettings_overlay_settings::fromJsonObject(QJsonObject json) {

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_horizontal_align_isValid = ::OpenAPI::fromJsonValue(m_horizontal_align, json[QString("horizontal_align")]);
    m_horizontal_align_isSet = !json[QString("horizontal_align")].isNull() && m_horizontal_align_isValid;

    m_horizontal_margin_isValid = ::OpenAPI::fromJsonValue(m_horizontal_margin, json[QString("horizontal_margin")]);
    m_horizontal_margin_isSet = !json[QString("horizontal_margin")].isNull() && m_horizontal_margin_isValid;

    m_opacity_isValid = ::OpenAPI::fromJsonValue(m_opacity, json[QString("opacity")]);
    m_opacity_isSet = !json[QString("opacity")].isNull() && m_opacity_isValid;

    m_vertical_align_isValid = ::OpenAPI::fromJsonValue(m_vertical_align, json[QString("vertical_align")]);
    m_vertical_align_isSet = !json[QString("vertical_align")].isNull() && m_vertical_align_isValid;

    m_vertical_margin_isValid = ::OpenAPI::fromJsonValue(m_vertical_margin, json[QString("vertical_margin")]);
    m_vertical_margin_isSet = !json[QString("vertical_margin")].isNull() && m_vertical_margin_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIInputSettings_overlay_settings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputSettings_overlay_settings::asJsonObject() const {
    QJsonObject obj;
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_horizontal_align_isSet) {
        obj.insert(QString("horizontal_align"), ::OpenAPI::toJsonValue(m_horizontal_align));
    }
    if (m_horizontal_margin_isSet) {
        obj.insert(QString("horizontal_margin"), ::OpenAPI::toJsonValue(m_horizontal_margin));
    }
    if (m_opacity_isSet) {
        obj.insert(QString("opacity"), ::OpenAPI::toJsonValue(m_opacity));
    }
    if (m_vertical_align_isSet) {
        obj.insert(QString("vertical_align"), ::OpenAPI::toJsonValue(m_vertical_align));
    }
    if (m_vertical_margin_isSet) {
        obj.insert(QString("vertical_margin"), ::OpenAPI::toJsonValue(m_vertical_margin));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIInputSettings_overlay_settings::getHeight() const {
    return m_height;
}
void OAIInputSettings_overlay_settings::setHeight(const QString &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIInputSettings_overlay_settings::is_height_Set() const{
    return m_height_isSet;
}

bool OAIInputSettings_overlay_settings::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIInputSettings_overlay_settings::getHorizontalAlign() const {
    return m_horizontal_align;
}
void OAIInputSettings_overlay_settings::setHorizontalAlign(const QString &horizontal_align) {
    m_horizontal_align = horizontal_align;
    m_horizontal_align_isSet = true;
}

bool OAIInputSettings_overlay_settings::is_horizontal_align_Set() const{
    return m_horizontal_align_isSet;
}

bool OAIInputSettings_overlay_settings::is_horizontal_align_Valid() const{
    return m_horizontal_align_isValid;
}

QString OAIInputSettings_overlay_settings::getHorizontalMargin() const {
    return m_horizontal_margin;
}
void OAIInputSettings_overlay_settings::setHorizontalMargin(const QString &horizontal_margin) {
    m_horizontal_margin = horizontal_margin;
    m_horizontal_margin_isSet = true;
}

bool OAIInputSettings_overlay_settings::is_horizontal_margin_Set() const{
    return m_horizontal_margin_isSet;
}

bool OAIInputSettings_overlay_settings::is_horizontal_margin_Valid() const{
    return m_horizontal_margin_isValid;
}

QString OAIInputSettings_overlay_settings::getOpacity() const {
    return m_opacity;
}
void OAIInputSettings_overlay_settings::setOpacity(const QString &opacity) {
    m_opacity = opacity;
    m_opacity_isSet = true;
}

bool OAIInputSettings_overlay_settings::is_opacity_Set() const{
    return m_opacity_isSet;
}

bool OAIInputSettings_overlay_settings::is_opacity_Valid() const{
    return m_opacity_isValid;
}

QString OAIInputSettings_overlay_settings::getVerticalAlign() const {
    return m_vertical_align;
}
void OAIInputSettings_overlay_settings::setVerticalAlign(const QString &vertical_align) {
    m_vertical_align = vertical_align;
    m_vertical_align_isSet = true;
}

bool OAIInputSettings_overlay_settings::is_vertical_align_Set() const{
    return m_vertical_align_isSet;
}

bool OAIInputSettings_overlay_settings::is_vertical_align_Valid() const{
    return m_vertical_align_isValid;
}

QString OAIInputSettings_overlay_settings::getVerticalMargin() const {
    return m_vertical_margin;
}
void OAIInputSettings_overlay_settings::setVerticalMargin(const QString &vertical_margin) {
    m_vertical_margin = vertical_margin;
    m_vertical_margin_isSet = true;
}

bool OAIInputSettings_overlay_settings::is_vertical_margin_Set() const{
    return m_vertical_margin_isSet;
}

bool OAIInputSettings_overlay_settings::is_vertical_margin_Valid() const{
    return m_vertical_margin_isValid;
}

QString OAIInputSettings_overlay_settings::getWidth() const {
    return m_width;
}
void OAIInputSettings_overlay_settings::setWidth(const QString &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIInputSettings_overlay_settings::is_width_Set() const{
    return m_width_isSet;
}

bool OAIInputSettings_overlay_settings::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIInputSettings_overlay_settings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontal_align_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_horizontal_margin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertical_align_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertical_margin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputSettings_overlay_settings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
