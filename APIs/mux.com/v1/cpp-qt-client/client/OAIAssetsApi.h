/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAssetsApi_H
#define OAI_OAIAssetsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssetResponse.h"
#include "OAICreateAssetRequest.h"
#include "OAICreatePlaybackIDRequest.h"
#include "OAICreatePlaybackIDResponse.h"
#include "OAICreateTrackRequest.h"
#include "OAICreateTrackResponse.h"
#include "OAIGetAssetInputInfoResponse.h"
#include "OAIGetAssetPlaybackIDResponse.h"
#include "OAIListAssetsResponse.h"
#include "OAIUpdateAssetMP4SupportRequest.h"
#include "OAIUpdateAssetMasterAccessRequest.h"
#include "OAIUpdateAssetRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAssetsApi : public QObject {
    Q_OBJECT

public:
    OAIAssetsApi(const int timeOut = 0);
    ~OAIAssetsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_asset_request OAICreateAssetRequest [required]
    */
    virtual void createAsset(const OAICreateAssetRequest &oai_create_asset_request);

    /**
    * @param[in]  asset_id QString [required]
    * @param[in]  oai_create_playback_id_request OAICreatePlaybackIDRequest [required]
    */
    virtual void createAssetPlaybackId(const QString &asset_id, const OAICreatePlaybackIDRequest &oai_create_playback_id_request);

    /**
    * @param[in]  asset_id QString [required]
    * @param[in]  oai_create_track_request OAICreateTrackRequest [required]
    */
    virtual void createAssetTrack(const QString &asset_id, const OAICreateTrackRequest &oai_create_track_request);

    /**
    * @param[in]  asset_id QString [required]
    */
    virtual void deleteAsset(const QString &asset_id);

    /**
    * @param[in]  asset_id QString [required]
    * @param[in]  playback_id QString [required]
    */
    virtual void deleteAssetPlaybackId(const QString &asset_id, const QString &playback_id);

    /**
    * @param[in]  asset_id QString [required]
    * @param[in]  track_id QString [required]
    */
    virtual void deleteAssetTrack(const QString &asset_id, const QString &track_id);

    /**
    * @param[in]  asset_id QString [required]
    */
    virtual void getAsset(const QString &asset_id);

    /**
    * @param[in]  asset_id QString [required]
    */
    virtual void getAssetInputInfo(const QString &asset_id);

    /**
    * @param[in]  asset_id QString [required]
    * @param[in]  playback_id QString [required]
    */
    virtual void getAssetPlaybackId(const QString &asset_id, const QString &playback_id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  live_stream_id QString [optional]
    * @param[in]  upload_id QString [optional]
    */
    virtual void listAssets(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &live_stream_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  asset_id QString [required]
    * @param[in]  oai_update_asset_request OAIUpdateAssetRequest [required]
    */
    virtual void updateAsset(const QString &asset_id, const OAIUpdateAssetRequest &oai_update_asset_request);

    /**
    * @param[in]  asset_id QString [required]
    * @param[in]  oai_update_asset_master_access_request OAIUpdateAssetMasterAccessRequest [required]
    */
    virtual void updateAssetMasterAccess(const QString &asset_id, const OAIUpdateAssetMasterAccessRequest &oai_update_asset_master_access_request);

    /**
    * @param[in]  asset_id QString [required]
    * @param[in]  oai_update_asset_mp4_support_request OAIUpdateAssetMP4SupportRequest [required]
    */
    virtual void updateAssetMp4Support(const QString &asset_id, const OAIUpdateAssetMP4SupportRequest &oai_update_asset_mp4_support_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAssetCallback(OAIHttpRequestWorker *worker);
    void createAssetPlaybackIdCallback(OAIHttpRequestWorker *worker);
    void createAssetTrackCallback(OAIHttpRequestWorker *worker);
    void deleteAssetCallback(OAIHttpRequestWorker *worker);
    void deleteAssetPlaybackIdCallback(OAIHttpRequestWorker *worker);
    void deleteAssetTrackCallback(OAIHttpRequestWorker *worker);
    void getAssetCallback(OAIHttpRequestWorker *worker);
    void getAssetInputInfoCallback(OAIHttpRequestWorker *worker);
    void getAssetPlaybackIdCallback(OAIHttpRequestWorker *worker);
    void listAssetsCallback(OAIHttpRequestWorker *worker);
    void updateAssetCallback(OAIHttpRequestWorker *worker);
    void updateAssetMasterAccessCallback(OAIHttpRequestWorker *worker);
    void updateAssetMp4SupportCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAssetSignal(OAIAssetResponse summary);
    void createAssetPlaybackIdSignal(OAICreatePlaybackIDResponse summary);
    void createAssetTrackSignal(OAICreateTrackResponse summary);
    void deleteAssetSignal();
    void deleteAssetPlaybackIdSignal();
    void deleteAssetTrackSignal();
    void getAssetSignal(OAIAssetResponse summary);
    void getAssetInputInfoSignal(OAIGetAssetInputInfoResponse summary);
    void getAssetPlaybackIdSignal(OAIGetAssetPlaybackIDResponse summary);
    void listAssetsSignal(OAIListAssetsResponse summary);
    void updateAssetSignal(OAIAssetResponse summary);
    void updateAssetMasterAccessSignal(OAIAssetResponse summary);
    void updateAssetMp4SupportSignal(OAIAssetResponse summary);


    void createAssetSignalFull(OAIHttpRequestWorker *worker, OAIAssetResponse summary);
    void createAssetPlaybackIdSignalFull(OAIHttpRequestWorker *worker, OAICreatePlaybackIDResponse summary);
    void createAssetTrackSignalFull(OAIHttpRequestWorker *worker, OAICreateTrackResponse summary);
    void deleteAssetSignalFull(OAIHttpRequestWorker *worker);
    void deleteAssetPlaybackIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteAssetTrackSignalFull(OAIHttpRequestWorker *worker);
    void getAssetSignalFull(OAIHttpRequestWorker *worker, OAIAssetResponse summary);
    void getAssetInputInfoSignalFull(OAIHttpRequestWorker *worker, OAIGetAssetInputInfoResponse summary);
    void getAssetPlaybackIdSignalFull(OAIHttpRequestWorker *worker, OAIGetAssetPlaybackIDResponse summary);
    void listAssetsSignalFull(OAIHttpRequestWorker *worker, OAIListAssetsResponse summary);
    void updateAssetSignalFull(OAIHttpRequestWorker *worker, OAIAssetResponse summary);
    void updateAssetMasterAccessSignalFull(OAIHttpRequestWorker *worker, OAIAssetResponse summary);
    void updateAssetMp4SupportSignalFull(OAIHttpRequestWorker *worker, OAIAssetResponse summary);

    Q_DECL_DEPRECATED_X("Use createAssetSignalError() instead")
    void createAssetSignalE(OAIAssetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssetSignalError(OAIAssetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAssetPlaybackIdSignalError() instead")
    void createAssetPlaybackIdSignalE(OAICreatePlaybackIDResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssetPlaybackIdSignalError(OAICreatePlaybackIDResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAssetTrackSignalError() instead")
    void createAssetTrackSignalE(OAICreateTrackResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssetTrackSignalError(OAICreateTrackResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAssetSignalError() instead")
    void deleteAssetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAssetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAssetPlaybackIdSignalError() instead")
    void deleteAssetPlaybackIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAssetPlaybackIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAssetTrackSignalError() instead")
    void deleteAssetTrackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAssetTrackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssetSignalError() instead")
    void getAssetSignalE(OAIAssetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssetSignalError(OAIAssetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssetInputInfoSignalError() instead")
    void getAssetInputInfoSignalE(OAIGetAssetInputInfoResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssetInputInfoSignalError(OAIGetAssetInputInfoResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssetPlaybackIdSignalError() instead")
    void getAssetPlaybackIdSignalE(OAIGetAssetPlaybackIDResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssetPlaybackIdSignalError(OAIGetAssetPlaybackIDResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAssetsSignalError() instead")
    void listAssetsSignalE(OAIListAssetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAssetsSignalError(OAIListAssetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAssetSignalError() instead")
    void updateAssetSignalE(OAIAssetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAssetSignalError(OAIAssetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAssetMasterAccessSignalError() instead")
    void updateAssetMasterAccessSignalE(OAIAssetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAssetMasterAccessSignalError(OAIAssetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAssetMp4SupportSignalError() instead")
    void updateAssetMp4SupportSignalE(OAIAssetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAssetMp4SupportSignalError(OAIAssetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAssetSignalErrorFull() instead")
    void createAssetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAssetPlaybackIdSignalErrorFull() instead")
    void createAssetPlaybackIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssetPlaybackIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAssetTrackSignalErrorFull() instead")
    void createAssetTrackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAssetTrackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAssetSignalErrorFull() instead")
    void deleteAssetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAssetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAssetPlaybackIdSignalErrorFull() instead")
    void deleteAssetPlaybackIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAssetPlaybackIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAssetTrackSignalErrorFull() instead")
    void deleteAssetTrackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAssetTrackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssetSignalErrorFull() instead")
    void getAssetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssetInputInfoSignalErrorFull() instead")
    void getAssetInputInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssetInputInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAssetPlaybackIdSignalErrorFull() instead")
    void getAssetPlaybackIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAssetPlaybackIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAssetsSignalErrorFull() instead")
    void listAssetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAssetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAssetSignalErrorFull() instead")
    void updateAssetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAssetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAssetMasterAccessSignalErrorFull() instead")
    void updateAssetMasterAccessSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAssetMasterAccessSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAssetMp4SupportSignalErrorFull() instead")
    void updateAssetMp4SupportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAssetMp4SupportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
