/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoView.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoView::OAIVideoView(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoView::OAIVideoView() {
    this->initializeModel();
}

OAIVideoView::~OAIVideoView() {}

void OAIVideoView::initializeModel() {

    m_asn_isSet = false;
    m_asn_isValid = false;

    m_asn_name_isSet = false;
    m_asn_name_isValid = false;

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_buffering_count_isSet = false;
    m_buffering_count_isValid = false;

    m_buffering_duration_isSet = false;
    m_buffering_duration_isValid = false;

    m_buffering_rate_isSet = false;
    m_buffering_rate_isValid = false;

    m_cdn_isSet = false;
    m_cdn_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_continent_code_isSet = false;
    m_continent_code_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_name_isSet = false;
    m_country_name_isValid = false;

    m_custom_1_isSet = false;
    m_custom_1_isValid = false;

    m_custom_10_isSet = false;
    m_custom_10_isValid = false;

    m_custom_2_isSet = false;
    m_custom_2_isValid = false;

    m_custom_3_isSet = false;
    m_custom_3_isValid = false;

    m_custom_4_isSet = false;
    m_custom_4_isValid = false;

    m_custom_5_isSet = false;
    m_custom_5_isValid = false;

    m_custom_6_isSet = false;
    m_custom_6_isValid = false;

    m_custom_7_isSet = false;
    m_custom_7_isValid = false;

    m_custom_8_isSet = false;
    m_custom_8_isValid = false;

    m_custom_9_isSet = false;
    m_custom_9_isValid = false;

    m_environment_id_isSet = false;
    m_environment_id_isValid = false;

    m_error_type_id_isSet = false;
    m_error_type_id_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_exit_before_video_start_isSet = false;
    m_exit_before_video_start_isValid = false;

    m_experiment_name_isSet = false;
    m_experiment_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_inserted_at_isSet = false;
    m_inserted_at_isValid = false;

    m_isp_isSet = false;
    m_isp_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_live_stream_id_isSet = false;
    m_live_stream_id_isValid = false;

    m_live_stream_latency_isSet = false;
    m_live_stream_latency_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_metro_isSet = false;
    m_metro_isValid = false;

    m_mux_api_version_isSet = false;
    m_mux_api_version_isValid = false;

    m_mux_embed_isSet = false;
    m_mux_embed_isValid = false;

    m_mux_embed_version_isSet = false;
    m_mux_embed_version_isValid = false;

    m_mux_viewer_id_isSet = false;
    m_mux_viewer_id_isValid = false;

    m_page_load_time_isSet = false;
    m_page_load_time_isValid = false;

    m_page_type_isSet = false;
    m_page_type_isValid = false;

    m_page_url_isSet = false;
    m_page_url_isValid = false;

    m_platform_description_isSet = false;
    m_platform_description_isValid = false;

    m_platform_summary_isSet = false;
    m_platform_summary_isValid = false;

    m_playback_id_isSet = false;
    m_playback_id_isValid = false;

    m_playback_score_isSet = false;
    m_playback_score_isValid = false;

    m_player_autoplay_isSet = false;
    m_player_autoplay_isValid = false;

    m_player_error_code_isSet = false;
    m_player_error_code_isValid = false;

    m_player_error_context_isSet = false;
    m_player_error_context_isValid = false;

    m_player_error_message_isSet = false;
    m_player_error_message_isValid = false;

    m_player_height_isSet = false;
    m_player_height_isValid = false;

    m_player_instance_id_isSet = false;
    m_player_instance_id_isValid = false;

    m_player_language_isSet = false;
    m_player_language_isValid = false;

    m_player_load_time_isSet = false;
    m_player_load_time_isValid = false;

    m_player_mux_plugin_name_isSet = false;
    m_player_mux_plugin_name_isValid = false;

    m_player_mux_plugin_version_isSet = false;
    m_player_mux_plugin_version_isValid = false;

    m_player_name_isSet = false;
    m_player_name_isValid = false;

    m_player_poster_isSet = false;
    m_player_poster_isValid = false;

    m_player_preload_isSet = false;
    m_player_preload_isValid = false;

    m_player_remote_played_isSet = false;
    m_player_remote_played_isValid = false;

    m_player_software_isSet = false;
    m_player_software_isValid = false;

    m_player_software_version_isSet = false;
    m_player_software_version_isValid = false;

    m_player_source_domain_isSet = false;
    m_player_source_domain_isValid = false;

    m_player_source_duration_isSet = false;
    m_player_source_duration_isValid = false;

    m_player_source_height_isSet = false;
    m_player_source_height_isValid = false;

    m_player_source_host_name_isSet = false;
    m_player_source_host_name_isValid = false;

    m_player_source_stream_type_isSet = false;
    m_player_source_stream_type_isValid = false;

    m_player_source_type_isSet = false;
    m_player_source_type_isValid = false;

    m_player_source_url_isSet = false;
    m_player_source_url_isValid = false;

    m_player_source_width_isSet = false;
    m_player_source_width_isValid = false;

    m_player_startup_time_isSet = false;
    m_player_startup_time_isValid = false;

    m_player_version_isSet = false;
    m_player_version_isValid = false;

    m_player_view_count_isSet = false;
    m_player_view_count_isValid = false;

    m_player_width_isSet = false;
    m_player_width_isValid = false;

    m_preroll_ad_asset_hostname_isSet = false;
    m_preroll_ad_asset_hostname_isValid = false;

    m_preroll_ad_tag_hostname_isSet = false;
    m_preroll_ad_tag_hostname_isValid = false;

    m_preroll_played_isSet = false;
    m_preroll_played_isValid = false;

    m_preroll_requested_isSet = false;
    m_preroll_requested_isValid = false;

    m_property_id_isSet = false;
    m_property_id_isValid = false;

    m_quality_score_isSet = false;
    m_quality_score_isValid = false;

    m_rebuffer_percentage_isSet = false;
    m_rebuffer_percentage_isValid = false;

    m_rebuffering_score_isSet = false;
    m_rebuffering_score_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_requests_for_first_preroll_isSet = false;
    m_requests_for_first_preroll_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_short_time_isSet = false;
    m_short_time_isValid = false;

    m_startup_score_isSet = false;
    m_startup_score_isValid = false;

    m_sub_property_id_isSet = false;
    m_sub_property_id_isValid = false;

    m_time_to_first_frame_isSet = false;
    m_time_to_first_frame_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_used_fullscreen_isSet = false;
    m_used_fullscreen_isValid = false;

    m_video_content_type_isSet = false;
    m_video_content_type_isValid = false;

    m_video_duration_isSet = false;
    m_video_duration_isValid = false;

    m_video_encoding_variant_isSet = false;
    m_video_encoding_variant_isValid = false;

    m_video_id_isSet = false;
    m_video_id_isValid = false;

    m_video_language_isSet = false;
    m_video_language_isValid = false;

    m_video_producer_isSet = false;
    m_video_producer_isValid = false;

    m_video_series_isSet = false;
    m_video_series_isValid = false;

    m_video_startup_failure_isSet = false;
    m_video_startup_failure_isValid = false;

    m_video_startup_preroll_load_time_isSet = false;
    m_video_startup_preroll_load_time_isValid = false;

    m_video_startup_preroll_request_time_isSet = false;
    m_video_startup_preroll_request_time_isValid = false;

    m_video_stream_type_isSet = false;
    m_video_stream_type_isValid = false;

    m_video_title_isSet = false;
    m_video_title_isValid = false;

    m_video_variant_id_isSet = false;
    m_video_variant_id_isValid = false;

    m_video_variant_name_isSet = false;
    m_video_variant_name_isValid = false;

    m_view_average_request_latency_isSet = false;
    m_view_average_request_latency_isValid = false;

    m_view_average_request_throughput_isSet = false;
    m_view_average_request_throughput_isValid = false;

    m_view_drm_type_isSet = false;
    m_view_drm_type_isValid = false;

    m_view_dropped_frame_count_isSet = false;
    m_view_dropped_frame_count_isValid = false;

    m_view_end_isSet = false;
    m_view_end_isValid = false;

    m_view_error_id_isSet = false;
    m_view_error_id_isValid = false;

    m_view_has_ad_isSet = false;
    m_view_has_ad_isValid = false;

    m_view_id_isSet = false;
    m_view_id_isValid = false;

    m_view_max_downscale_percentage_isSet = false;
    m_view_max_downscale_percentage_isValid = false;

    m_view_max_playhead_position_isSet = false;
    m_view_max_playhead_position_isValid = false;

    m_view_max_request_latency_isSet = false;
    m_view_max_request_latency_isValid = false;

    m_view_max_upscale_percentage_isSet = false;
    m_view_max_upscale_percentage_isValid = false;

    m_view_playing_time_isSet = false;
    m_view_playing_time_isValid = false;

    m_view_seek_count_isSet = false;
    m_view_seek_count_isValid = false;

    m_view_seek_duration_isSet = false;
    m_view_seek_duration_isValid = false;

    m_view_session_id_isSet = false;
    m_view_session_id_isValid = false;

    m_view_start_isSet = false;
    m_view_start_isValid = false;

    m_view_total_content_playback_time_isSet = false;
    m_view_total_content_playback_time_isValid = false;

    m_view_total_downscaling_isSet = false;
    m_view_total_downscaling_isValid = false;

    m_view_total_upscaling_isSet = false;
    m_view_total_upscaling_isValid = false;

    m_viewer_application_engine_isSet = false;
    m_viewer_application_engine_isValid = false;

    m_viewer_application_name_isSet = false;
    m_viewer_application_name_isValid = false;

    m_viewer_application_version_isSet = false;
    m_viewer_application_version_isValid = false;

    m_viewer_connection_type_isSet = false;
    m_viewer_connection_type_isValid = false;

    m_viewer_device_category_isSet = false;
    m_viewer_device_category_isValid = false;

    m_viewer_device_manufacturer_isSet = false;
    m_viewer_device_manufacturer_isValid = false;

    m_viewer_device_model_isSet = false;
    m_viewer_device_model_isValid = false;

    m_viewer_device_name_isSet = false;
    m_viewer_device_name_isValid = false;

    m_viewer_experience_score_isSet = false;
    m_viewer_experience_score_isValid = false;

    m_viewer_os_architecture_isSet = false;
    m_viewer_os_architecture_isValid = false;

    m_viewer_os_family_isSet = false;
    m_viewer_os_family_isValid = false;

    m_viewer_os_version_isSet = false;
    m_viewer_os_version_isValid = false;

    m_viewer_user_agent_isSet = false;
    m_viewer_user_agent_isValid = false;

    m_viewer_user_id_isSet = false;
    m_viewer_user_id_isValid = false;

    m_watch_time_isSet = false;
    m_watch_time_isValid = false;

    m_watched_isSet = false;
    m_watched_isValid = false;

    m_weighted_average_bitrate_isSet = false;
    m_weighted_average_bitrate_isValid = false;
}

void OAIVideoView::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoView::fromJsonObject(QJsonObject json) {

    m_asn_isValid = ::OpenAPI::fromJsonValue(m_asn, json[QString("asn")]);
    m_asn_isSet = !json[QString("asn")].isNull() && m_asn_isValid;

    m_asn_name_isValid = ::OpenAPI::fromJsonValue(m_asn_name, json[QString("asn_name")]);
    m_asn_name_isSet = !json[QString("asn_name")].isNull() && m_asn_name_isValid;

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("asset_id")]);
    m_asset_id_isSet = !json[QString("asset_id")].isNull() && m_asset_id_isValid;

    m_buffering_count_isValid = ::OpenAPI::fromJsonValue(m_buffering_count, json[QString("buffering_count")]);
    m_buffering_count_isSet = !json[QString("buffering_count")].isNull() && m_buffering_count_isValid;

    m_buffering_duration_isValid = ::OpenAPI::fromJsonValue(m_buffering_duration, json[QString("buffering_duration")]);
    m_buffering_duration_isSet = !json[QString("buffering_duration")].isNull() && m_buffering_duration_isValid;

    m_buffering_rate_isValid = ::OpenAPI::fromJsonValue(m_buffering_rate, json[QString("buffering_rate")]);
    m_buffering_rate_isSet = !json[QString("buffering_rate")].isNull() && m_buffering_rate_isValid;

    m_cdn_isValid = ::OpenAPI::fromJsonValue(m_cdn, json[QString("cdn")]);
    m_cdn_isSet = !json[QString("cdn")].isNull() && m_cdn_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_continent_code_isValid = ::OpenAPI::fromJsonValue(m_continent_code, json[QString("continent_code")]);
    m_continent_code_isSet = !json[QString("continent_code")].isNull() && m_continent_code_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_country_name_isValid = ::OpenAPI::fromJsonValue(m_country_name, json[QString("country_name")]);
    m_country_name_isSet = !json[QString("country_name")].isNull() && m_country_name_isValid;

    m_custom_1_isValid = ::OpenAPI::fromJsonValue(m_custom_1, json[QString("custom_1")]);
    m_custom_1_isSet = !json[QString("custom_1")].isNull() && m_custom_1_isValid;

    m_custom_10_isValid = ::OpenAPI::fromJsonValue(m_custom_10, json[QString("custom_10")]);
    m_custom_10_isSet = !json[QString("custom_10")].isNull() && m_custom_10_isValid;

    m_custom_2_isValid = ::OpenAPI::fromJsonValue(m_custom_2, json[QString("custom_2")]);
    m_custom_2_isSet = !json[QString("custom_2")].isNull() && m_custom_2_isValid;

    m_custom_3_isValid = ::OpenAPI::fromJsonValue(m_custom_3, json[QString("custom_3")]);
    m_custom_3_isSet = !json[QString("custom_3")].isNull() && m_custom_3_isValid;

    m_custom_4_isValid = ::OpenAPI::fromJsonValue(m_custom_4, json[QString("custom_4")]);
    m_custom_4_isSet = !json[QString("custom_4")].isNull() && m_custom_4_isValid;

    m_custom_5_isValid = ::OpenAPI::fromJsonValue(m_custom_5, json[QString("custom_5")]);
    m_custom_5_isSet = !json[QString("custom_5")].isNull() && m_custom_5_isValid;

    m_custom_6_isValid = ::OpenAPI::fromJsonValue(m_custom_6, json[QString("custom_6")]);
    m_custom_6_isSet = !json[QString("custom_6")].isNull() && m_custom_6_isValid;

    m_custom_7_isValid = ::OpenAPI::fromJsonValue(m_custom_7, json[QString("custom_7")]);
    m_custom_7_isSet = !json[QString("custom_7")].isNull() && m_custom_7_isValid;

    m_custom_8_isValid = ::OpenAPI::fromJsonValue(m_custom_8, json[QString("custom_8")]);
    m_custom_8_isSet = !json[QString("custom_8")].isNull() && m_custom_8_isValid;

    m_custom_9_isValid = ::OpenAPI::fromJsonValue(m_custom_9, json[QString("custom_9")]);
    m_custom_9_isSet = !json[QString("custom_9")].isNull() && m_custom_9_isValid;

    m_environment_id_isValid = ::OpenAPI::fromJsonValue(m_environment_id, json[QString("environment_id")]);
    m_environment_id_isSet = !json[QString("environment_id")].isNull() && m_environment_id_isValid;

    m_error_type_id_isValid = ::OpenAPI::fromJsonValue(m_error_type_id, json[QString("error_type_id")]);
    m_error_type_id_isSet = !json[QString("error_type_id")].isNull() && m_error_type_id_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_exit_before_video_start_isValid = ::OpenAPI::fromJsonValue(m_exit_before_video_start, json[QString("exit_before_video_start")]);
    m_exit_before_video_start_isSet = !json[QString("exit_before_video_start")].isNull() && m_exit_before_video_start_isValid;

    m_experiment_name_isValid = ::OpenAPI::fromJsonValue(m_experiment_name, json[QString("experiment_name")]);
    m_experiment_name_isSet = !json[QString("experiment_name")].isNull() && m_experiment_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_inserted_at_isValid = ::OpenAPI::fromJsonValue(m_inserted_at, json[QString("inserted_at")]);
    m_inserted_at_isSet = !json[QString("inserted_at")].isNull() && m_inserted_at_isValid;

    m_isp_isValid = ::OpenAPI::fromJsonValue(m_isp, json[QString("isp")]);
    m_isp_isSet = !json[QString("isp")].isNull() && m_isp_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_live_stream_id_isValid = ::OpenAPI::fromJsonValue(m_live_stream_id, json[QString("live_stream_id")]);
    m_live_stream_id_isSet = !json[QString("live_stream_id")].isNull() && m_live_stream_id_isValid;

    m_live_stream_latency_isValid = ::OpenAPI::fromJsonValue(m_live_stream_latency, json[QString("live_stream_latency")]);
    m_live_stream_latency_isSet = !json[QString("live_stream_latency")].isNull() && m_live_stream_latency_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_metro_isValid = ::OpenAPI::fromJsonValue(m_metro, json[QString("metro")]);
    m_metro_isSet = !json[QString("metro")].isNull() && m_metro_isValid;

    m_mux_api_version_isValid = ::OpenAPI::fromJsonValue(m_mux_api_version, json[QString("mux_api_version")]);
    m_mux_api_version_isSet = !json[QString("mux_api_version")].isNull() && m_mux_api_version_isValid;

    m_mux_embed_isValid = ::OpenAPI::fromJsonValue(m_mux_embed, json[QString("mux_embed")]);
    m_mux_embed_isSet = !json[QString("mux_embed")].isNull() && m_mux_embed_isValid;

    m_mux_embed_version_isValid = ::OpenAPI::fromJsonValue(m_mux_embed_version, json[QString("mux_embed_version")]);
    m_mux_embed_version_isSet = !json[QString("mux_embed_version")].isNull() && m_mux_embed_version_isValid;

    m_mux_viewer_id_isValid = ::OpenAPI::fromJsonValue(m_mux_viewer_id, json[QString("mux_viewer_id")]);
    m_mux_viewer_id_isSet = !json[QString("mux_viewer_id")].isNull() && m_mux_viewer_id_isValid;

    m_page_load_time_isValid = ::OpenAPI::fromJsonValue(m_page_load_time, json[QString("page_load_time")]);
    m_page_load_time_isSet = !json[QString("page_load_time")].isNull() && m_page_load_time_isValid;

    m_page_type_isValid = ::OpenAPI::fromJsonValue(m_page_type, json[QString("page_type")]);
    m_page_type_isSet = !json[QString("page_type")].isNull() && m_page_type_isValid;

    m_page_url_isValid = ::OpenAPI::fromJsonValue(m_page_url, json[QString("page_url")]);
    m_page_url_isSet = !json[QString("page_url")].isNull() && m_page_url_isValid;

    m_platform_description_isValid = ::OpenAPI::fromJsonValue(m_platform_description, json[QString("platform_description")]);
    m_platform_description_isSet = !json[QString("platform_description")].isNull() && m_platform_description_isValid;

    m_platform_summary_isValid = ::OpenAPI::fromJsonValue(m_platform_summary, json[QString("platform_summary")]);
    m_platform_summary_isSet = !json[QString("platform_summary")].isNull() && m_platform_summary_isValid;

    m_playback_id_isValid = ::OpenAPI::fromJsonValue(m_playback_id, json[QString("playback_id")]);
    m_playback_id_isSet = !json[QString("playback_id")].isNull() && m_playback_id_isValid;

    m_playback_score_isValid = ::OpenAPI::fromJsonValue(m_playback_score, json[QString("playback_score")]);
    m_playback_score_isSet = !json[QString("playback_score")].isNull() && m_playback_score_isValid;

    m_player_autoplay_isValid = ::OpenAPI::fromJsonValue(m_player_autoplay, json[QString("player_autoplay")]);
    m_player_autoplay_isSet = !json[QString("player_autoplay")].isNull() && m_player_autoplay_isValid;

    m_player_error_code_isValid = ::OpenAPI::fromJsonValue(m_player_error_code, json[QString("player_error_code")]);
    m_player_error_code_isSet = !json[QString("player_error_code")].isNull() && m_player_error_code_isValid;

    m_player_error_context_isValid = ::OpenAPI::fromJsonValue(m_player_error_context, json[QString("player_error_context")]);
    m_player_error_context_isSet = !json[QString("player_error_context")].isNull() && m_player_error_context_isValid;

    m_player_error_message_isValid = ::OpenAPI::fromJsonValue(m_player_error_message, json[QString("player_error_message")]);
    m_player_error_message_isSet = !json[QString("player_error_message")].isNull() && m_player_error_message_isValid;

    m_player_height_isValid = ::OpenAPI::fromJsonValue(m_player_height, json[QString("player_height")]);
    m_player_height_isSet = !json[QString("player_height")].isNull() && m_player_height_isValid;

    m_player_instance_id_isValid = ::OpenAPI::fromJsonValue(m_player_instance_id, json[QString("player_instance_id")]);
    m_player_instance_id_isSet = !json[QString("player_instance_id")].isNull() && m_player_instance_id_isValid;

    m_player_language_isValid = ::OpenAPI::fromJsonValue(m_player_language, json[QString("player_language")]);
    m_player_language_isSet = !json[QString("player_language")].isNull() && m_player_language_isValid;

    m_player_load_time_isValid = ::OpenAPI::fromJsonValue(m_player_load_time, json[QString("player_load_time")]);
    m_player_load_time_isSet = !json[QString("player_load_time")].isNull() && m_player_load_time_isValid;

    m_player_mux_plugin_name_isValid = ::OpenAPI::fromJsonValue(m_player_mux_plugin_name, json[QString("player_mux_plugin_name")]);
    m_player_mux_plugin_name_isSet = !json[QString("player_mux_plugin_name")].isNull() && m_player_mux_plugin_name_isValid;

    m_player_mux_plugin_version_isValid = ::OpenAPI::fromJsonValue(m_player_mux_plugin_version, json[QString("player_mux_plugin_version")]);
    m_player_mux_plugin_version_isSet = !json[QString("player_mux_plugin_version")].isNull() && m_player_mux_plugin_version_isValid;

    m_player_name_isValid = ::OpenAPI::fromJsonValue(m_player_name, json[QString("player_name")]);
    m_player_name_isSet = !json[QString("player_name")].isNull() && m_player_name_isValid;

    m_player_poster_isValid = ::OpenAPI::fromJsonValue(m_player_poster, json[QString("player_poster")]);
    m_player_poster_isSet = !json[QString("player_poster")].isNull() && m_player_poster_isValid;

    m_player_preload_isValid = ::OpenAPI::fromJsonValue(m_player_preload, json[QString("player_preload")]);
    m_player_preload_isSet = !json[QString("player_preload")].isNull() && m_player_preload_isValid;

    m_player_remote_played_isValid = ::OpenAPI::fromJsonValue(m_player_remote_played, json[QString("player_remote_played")]);
    m_player_remote_played_isSet = !json[QString("player_remote_played")].isNull() && m_player_remote_played_isValid;

    m_player_software_isValid = ::OpenAPI::fromJsonValue(m_player_software, json[QString("player_software")]);
    m_player_software_isSet = !json[QString("player_software")].isNull() && m_player_software_isValid;

    m_player_software_version_isValid = ::OpenAPI::fromJsonValue(m_player_software_version, json[QString("player_software_version")]);
    m_player_software_version_isSet = !json[QString("player_software_version")].isNull() && m_player_software_version_isValid;

    m_player_source_domain_isValid = ::OpenAPI::fromJsonValue(m_player_source_domain, json[QString("player_source_domain")]);
    m_player_source_domain_isSet = !json[QString("player_source_domain")].isNull() && m_player_source_domain_isValid;

    m_player_source_duration_isValid = ::OpenAPI::fromJsonValue(m_player_source_duration, json[QString("player_source_duration")]);
    m_player_source_duration_isSet = !json[QString("player_source_duration")].isNull() && m_player_source_duration_isValid;

    m_player_source_height_isValid = ::OpenAPI::fromJsonValue(m_player_source_height, json[QString("player_source_height")]);
    m_player_source_height_isSet = !json[QString("player_source_height")].isNull() && m_player_source_height_isValid;

    m_player_source_host_name_isValid = ::OpenAPI::fromJsonValue(m_player_source_host_name, json[QString("player_source_host_name")]);
    m_player_source_host_name_isSet = !json[QString("player_source_host_name")].isNull() && m_player_source_host_name_isValid;

    m_player_source_stream_type_isValid = ::OpenAPI::fromJsonValue(m_player_source_stream_type, json[QString("player_source_stream_type")]);
    m_player_source_stream_type_isSet = !json[QString("player_source_stream_type")].isNull() && m_player_source_stream_type_isValid;

    m_player_source_type_isValid = ::OpenAPI::fromJsonValue(m_player_source_type, json[QString("player_source_type")]);
    m_player_source_type_isSet = !json[QString("player_source_type")].isNull() && m_player_source_type_isValid;

    m_player_source_url_isValid = ::OpenAPI::fromJsonValue(m_player_source_url, json[QString("player_source_url")]);
    m_player_source_url_isSet = !json[QString("player_source_url")].isNull() && m_player_source_url_isValid;

    m_player_source_width_isValid = ::OpenAPI::fromJsonValue(m_player_source_width, json[QString("player_source_width")]);
    m_player_source_width_isSet = !json[QString("player_source_width")].isNull() && m_player_source_width_isValid;

    m_player_startup_time_isValid = ::OpenAPI::fromJsonValue(m_player_startup_time, json[QString("player_startup_time")]);
    m_player_startup_time_isSet = !json[QString("player_startup_time")].isNull() && m_player_startup_time_isValid;

    m_player_version_isValid = ::OpenAPI::fromJsonValue(m_player_version, json[QString("player_version")]);
    m_player_version_isSet = !json[QString("player_version")].isNull() && m_player_version_isValid;

    m_player_view_count_isValid = ::OpenAPI::fromJsonValue(m_player_view_count, json[QString("player_view_count")]);
    m_player_view_count_isSet = !json[QString("player_view_count")].isNull() && m_player_view_count_isValid;

    m_player_width_isValid = ::OpenAPI::fromJsonValue(m_player_width, json[QString("player_width")]);
    m_player_width_isSet = !json[QString("player_width")].isNull() && m_player_width_isValid;

    m_preroll_ad_asset_hostname_isValid = ::OpenAPI::fromJsonValue(m_preroll_ad_asset_hostname, json[QString("preroll_ad_asset_hostname")]);
    m_preroll_ad_asset_hostname_isSet = !json[QString("preroll_ad_asset_hostname")].isNull() && m_preroll_ad_asset_hostname_isValid;

    m_preroll_ad_tag_hostname_isValid = ::OpenAPI::fromJsonValue(m_preroll_ad_tag_hostname, json[QString("preroll_ad_tag_hostname")]);
    m_preroll_ad_tag_hostname_isSet = !json[QString("preroll_ad_tag_hostname")].isNull() && m_preroll_ad_tag_hostname_isValid;

    m_preroll_played_isValid = ::OpenAPI::fromJsonValue(m_preroll_played, json[QString("preroll_played")]);
    m_preroll_played_isSet = !json[QString("preroll_played")].isNull() && m_preroll_played_isValid;

    m_preroll_requested_isValid = ::OpenAPI::fromJsonValue(m_preroll_requested, json[QString("preroll_requested")]);
    m_preroll_requested_isSet = !json[QString("preroll_requested")].isNull() && m_preroll_requested_isValid;

    m_property_id_isValid = ::OpenAPI::fromJsonValue(m_property_id, json[QString("property_id")]);
    m_property_id_isSet = !json[QString("property_id")].isNull() && m_property_id_isValid;

    m_quality_score_isValid = ::OpenAPI::fromJsonValue(m_quality_score, json[QString("quality_score")]);
    m_quality_score_isSet = !json[QString("quality_score")].isNull() && m_quality_score_isValid;

    m_rebuffer_percentage_isValid = ::OpenAPI::fromJsonValue(m_rebuffer_percentage, json[QString("rebuffer_percentage")]);
    m_rebuffer_percentage_isSet = !json[QString("rebuffer_percentage")].isNull() && m_rebuffer_percentage_isValid;

    m_rebuffering_score_isValid = ::OpenAPI::fromJsonValue(m_rebuffering_score, json[QString("rebuffering_score")]);
    m_rebuffering_score_isSet = !json[QString("rebuffering_score")].isNull() && m_rebuffering_score_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_requests_for_first_preroll_isValid = ::OpenAPI::fromJsonValue(m_requests_for_first_preroll, json[QString("requests_for_first_preroll")]);
    m_requests_for_first_preroll_isSet = !json[QString("requests_for_first_preroll")].isNull() && m_requests_for_first_preroll_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("session_id")]);
    m_session_id_isSet = !json[QString("session_id")].isNull() && m_session_id_isValid;

    m_short_time_isValid = ::OpenAPI::fromJsonValue(m_short_time, json[QString("short_time")]);
    m_short_time_isSet = !json[QString("short_time")].isNull() && m_short_time_isValid;

    m_startup_score_isValid = ::OpenAPI::fromJsonValue(m_startup_score, json[QString("startup_score")]);
    m_startup_score_isSet = !json[QString("startup_score")].isNull() && m_startup_score_isValid;

    m_sub_property_id_isValid = ::OpenAPI::fromJsonValue(m_sub_property_id, json[QString("sub_property_id")]);
    m_sub_property_id_isSet = !json[QString("sub_property_id")].isNull() && m_sub_property_id_isValid;

    m_time_to_first_frame_isValid = ::OpenAPI::fromJsonValue(m_time_to_first_frame, json[QString("time_to_first_frame")]);
    m_time_to_first_frame_isSet = !json[QString("time_to_first_frame")].isNull() && m_time_to_first_frame_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_used_fullscreen_isValid = ::OpenAPI::fromJsonValue(m_used_fullscreen, json[QString("used_fullscreen")]);
    m_used_fullscreen_isSet = !json[QString("used_fullscreen")].isNull() && m_used_fullscreen_isValid;

    m_video_content_type_isValid = ::OpenAPI::fromJsonValue(m_video_content_type, json[QString("video_content_type")]);
    m_video_content_type_isSet = !json[QString("video_content_type")].isNull() && m_video_content_type_isValid;

    m_video_duration_isValid = ::OpenAPI::fromJsonValue(m_video_duration, json[QString("video_duration")]);
    m_video_duration_isSet = !json[QString("video_duration")].isNull() && m_video_duration_isValid;

    m_video_encoding_variant_isValid = ::OpenAPI::fromJsonValue(m_video_encoding_variant, json[QString("video_encoding_variant")]);
    m_video_encoding_variant_isSet = !json[QString("video_encoding_variant")].isNull() && m_video_encoding_variant_isValid;

    m_video_id_isValid = ::OpenAPI::fromJsonValue(m_video_id, json[QString("video_id")]);
    m_video_id_isSet = !json[QString("video_id")].isNull() && m_video_id_isValid;

    m_video_language_isValid = ::OpenAPI::fromJsonValue(m_video_language, json[QString("video_language")]);
    m_video_language_isSet = !json[QString("video_language")].isNull() && m_video_language_isValid;

    m_video_producer_isValid = ::OpenAPI::fromJsonValue(m_video_producer, json[QString("video_producer")]);
    m_video_producer_isSet = !json[QString("video_producer")].isNull() && m_video_producer_isValid;

    m_video_series_isValid = ::OpenAPI::fromJsonValue(m_video_series, json[QString("video_series")]);
    m_video_series_isSet = !json[QString("video_series")].isNull() && m_video_series_isValid;

    m_video_startup_failure_isValid = ::OpenAPI::fromJsonValue(m_video_startup_failure, json[QString("video_startup_failure")]);
    m_video_startup_failure_isSet = !json[QString("video_startup_failure")].isNull() && m_video_startup_failure_isValid;

    m_video_startup_preroll_load_time_isValid = ::OpenAPI::fromJsonValue(m_video_startup_preroll_load_time, json[QString("video_startup_preroll_load_time")]);
    m_video_startup_preroll_load_time_isSet = !json[QString("video_startup_preroll_load_time")].isNull() && m_video_startup_preroll_load_time_isValid;

    m_video_startup_preroll_request_time_isValid = ::OpenAPI::fromJsonValue(m_video_startup_preroll_request_time, json[QString("video_startup_preroll_request_time")]);
    m_video_startup_preroll_request_time_isSet = !json[QString("video_startup_preroll_request_time")].isNull() && m_video_startup_preroll_request_time_isValid;

    m_video_stream_type_isValid = ::OpenAPI::fromJsonValue(m_video_stream_type, json[QString("video_stream_type")]);
    m_video_stream_type_isSet = !json[QString("video_stream_type")].isNull() && m_video_stream_type_isValid;

    m_video_title_isValid = ::OpenAPI::fromJsonValue(m_video_title, json[QString("video_title")]);
    m_video_title_isSet = !json[QString("video_title")].isNull() && m_video_title_isValid;

    m_video_variant_id_isValid = ::OpenAPI::fromJsonValue(m_video_variant_id, json[QString("video_variant_id")]);
    m_video_variant_id_isSet = !json[QString("video_variant_id")].isNull() && m_video_variant_id_isValid;

    m_video_variant_name_isValid = ::OpenAPI::fromJsonValue(m_video_variant_name, json[QString("video_variant_name")]);
    m_video_variant_name_isSet = !json[QString("video_variant_name")].isNull() && m_video_variant_name_isValid;

    m_view_average_request_latency_isValid = ::OpenAPI::fromJsonValue(m_view_average_request_latency, json[QString("view_average_request_latency")]);
    m_view_average_request_latency_isSet = !json[QString("view_average_request_latency")].isNull() && m_view_average_request_latency_isValid;

    m_view_average_request_throughput_isValid = ::OpenAPI::fromJsonValue(m_view_average_request_throughput, json[QString("view_average_request_throughput")]);
    m_view_average_request_throughput_isSet = !json[QString("view_average_request_throughput")].isNull() && m_view_average_request_throughput_isValid;

    m_view_drm_type_isValid = ::OpenAPI::fromJsonValue(m_view_drm_type, json[QString("view_drm_type")]);
    m_view_drm_type_isSet = !json[QString("view_drm_type")].isNull() && m_view_drm_type_isValid;

    m_view_dropped_frame_count_isValid = ::OpenAPI::fromJsonValue(m_view_dropped_frame_count, json[QString("view_dropped_frame_count")]);
    m_view_dropped_frame_count_isSet = !json[QString("view_dropped_frame_count")].isNull() && m_view_dropped_frame_count_isValid;

    m_view_end_isValid = ::OpenAPI::fromJsonValue(m_view_end, json[QString("view_end")]);
    m_view_end_isSet = !json[QString("view_end")].isNull() && m_view_end_isValid;

    m_view_error_id_isValid = ::OpenAPI::fromJsonValue(m_view_error_id, json[QString("view_error_id")]);
    m_view_error_id_isSet = !json[QString("view_error_id")].isNull() && m_view_error_id_isValid;

    m_view_has_ad_isValid = ::OpenAPI::fromJsonValue(m_view_has_ad, json[QString("view_has_ad")]);
    m_view_has_ad_isSet = !json[QString("view_has_ad")].isNull() && m_view_has_ad_isValid;

    m_view_id_isValid = ::OpenAPI::fromJsonValue(m_view_id, json[QString("view_id")]);
    m_view_id_isSet = !json[QString("view_id")].isNull() && m_view_id_isValid;

    m_view_max_downscale_percentage_isValid = ::OpenAPI::fromJsonValue(m_view_max_downscale_percentage, json[QString("view_max_downscale_percentage")]);
    m_view_max_downscale_percentage_isSet = !json[QString("view_max_downscale_percentage")].isNull() && m_view_max_downscale_percentage_isValid;

    m_view_max_playhead_position_isValid = ::OpenAPI::fromJsonValue(m_view_max_playhead_position, json[QString("view_max_playhead_position")]);
    m_view_max_playhead_position_isSet = !json[QString("view_max_playhead_position")].isNull() && m_view_max_playhead_position_isValid;

    m_view_max_request_latency_isValid = ::OpenAPI::fromJsonValue(m_view_max_request_latency, json[QString("view_max_request_latency")]);
    m_view_max_request_latency_isSet = !json[QString("view_max_request_latency")].isNull() && m_view_max_request_latency_isValid;

    m_view_max_upscale_percentage_isValid = ::OpenAPI::fromJsonValue(m_view_max_upscale_percentage, json[QString("view_max_upscale_percentage")]);
    m_view_max_upscale_percentage_isSet = !json[QString("view_max_upscale_percentage")].isNull() && m_view_max_upscale_percentage_isValid;

    m_view_playing_time_isValid = ::OpenAPI::fromJsonValue(m_view_playing_time, json[QString("view_playing_time")]);
    m_view_playing_time_isSet = !json[QString("view_playing_time")].isNull() && m_view_playing_time_isValid;

    m_view_seek_count_isValid = ::OpenAPI::fromJsonValue(m_view_seek_count, json[QString("view_seek_count")]);
    m_view_seek_count_isSet = !json[QString("view_seek_count")].isNull() && m_view_seek_count_isValid;

    m_view_seek_duration_isValid = ::OpenAPI::fromJsonValue(m_view_seek_duration, json[QString("view_seek_duration")]);
    m_view_seek_duration_isSet = !json[QString("view_seek_duration")].isNull() && m_view_seek_duration_isValid;

    m_view_session_id_isValid = ::OpenAPI::fromJsonValue(m_view_session_id, json[QString("view_session_id")]);
    m_view_session_id_isSet = !json[QString("view_session_id")].isNull() && m_view_session_id_isValid;

    m_view_start_isValid = ::OpenAPI::fromJsonValue(m_view_start, json[QString("view_start")]);
    m_view_start_isSet = !json[QString("view_start")].isNull() && m_view_start_isValid;

    m_view_total_content_playback_time_isValid = ::OpenAPI::fromJsonValue(m_view_total_content_playback_time, json[QString("view_total_content_playback_time")]);
    m_view_total_content_playback_time_isSet = !json[QString("view_total_content_playback_time")].isNull() && m_view_total_content_playback_time_isValid;

    m_view_total_downscaling_isValid = ::OpenAPI::fromJsonValue(m_view_total_downscaling, json[QString("view_total_downscaling")]);
    m_view_total_downscaling_isSet = !json[QString("view_total_downscaling")].isNull() && m_view_total_downscaling_isValid;

    m_view_total_upscaling_isValid = ::OpenAPI::fromJsonValue(m_view_total_upscaling, json[QString("view_total_upscaling")]);
    m_view_total_upscaling_isSet = !json[QString("view_total_upscaling")].isNull() && m_view_total_upscaling_isValid;

    m_viewer_application_engine_isValid = ::OpenAPI::fromJsonValue(m_viewer_application_engine, json[QString("viewer_application_engine")]);
    m_viewer_application_engine_isSet = !json[QString("viewer_application_engine")].isNull() && m_viewer_application_engine_isValid;

    m_viewer_application_name_isValid = ::OpenAPI::fromJsonValue(m_viewer_application_name, json[QString("viewer_application_name")]);
    m_viewer_application_name_isSet = !json[QString("viewer_application_name")].isNull() && m_viewer_application_name_isValid;

    m_viewer_application_version_isValid = ::OpenAPI::fromJsonValue(m_viewer_application_version, json[QString("viewer_application_version")]);
    m_viewer_application_version_isSet = !json[QString("viewer_application_version")].isNull() && m_viewer_application_version_isValid;

    m_viewer_connection_type_isValid = ::OpenAPI::fromJsonValue(m_viewer_connection_type, json[QString("viewer_connection_type")]);
    m_viewer_connection_type_isSet = !json[QString("viewer_connection_type")].isNull() && m_viewer_connection_type_isValid;

    m_viewer_device_category_isValid = ::OpenAPI::fromJsonValue(m_viewer_device_category, json[QString("viewer_device_category")]);
    m_viewer_device_category_isSet = !json[QString("viewer_device_category")].isNull() && m_viewer_device_category_isValid;

    m_viewer_device_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_viewer_device_manufacturer, json[QString("viewer_device_manufacturer")]);
    m_viewer_device_manufacturer_isSet = !json[QString("viewer_device_manufacturer")].isNull() && m_viewer_device_manufacturer_isValid;

    m_viewer_device_model_isValid = ::OpenAPI::fromJsonValue(m_viewer_device_model, json[QString("viewer_device_model")]);
    m_viewer_device_model_isSet = !json[QString("viewer_device_model")].isNull() && m_viewer_device_model_isValid;

    m_viewer_device_name_isValid = ::OpenAPI::fromJsonValue(m_viewer_device_name, json[QString("viewer_device_name")]);
    m_viewer_device_name_isSet = !json[QString("viewer_device_name")].isNull() && m_viewer_device_name_isValid;

    m_viewer_experience_score_isValid = ::OpenAPI::fromJsonValue(m_viewer_experience_score, json[QString("viewer_experience_score")]);
    m_viewer_experience_score_isSet = !json[QString("viewer_experience_score")].isNull() && m_viewer_experience_score_isValid;

    m_viewer_os_architecture_isValid = ::OpenAPI::fromJsonValue(m_viewer_os_architecture, json[QString("viewer_os_architecture")]);
    m_viewer_os_architecture_isSet = !json[QString("viewer_os_architecture")].isNull() && m_viewer_os_architecture_isValid;

    m_viewer_os_family_isValid = ::OpenAPI::fromJsonValue(m_viewer_os_family, json[QString("viewer_os_family")]);
    m_viewer_os_family_isSet = !json[QString("viewer_os_family")].isNull() && m_viewer_os_family_isValid;

    m_viewer_os_version_isValid = ::OpenAPI::fromJsonValue(m_viewer_os_version, json[QString("viewer_os_version")]);
    m_viewer_os_version_isSet = !json[QString("viewer_os_version")].isNull() && m_viewer_os_version_isValid;

    m_viewer_user_agent_isValid = ::OpenAPI::fromJsonValue(m_viewer_user_agent, json[QString("viewer_user_agent")]);
    m_viewer_user_agent_isSet = !json[QString("viewer_user_agent")].isNull() && m_viewer_user_agent_isValid;

    m_viewer_user_id_isValid = ::OpenAPI::fromJsonValue(m_viewer_user_id, json[QString("viewer_user_id")]);
    m_viewer_user_id_isSet = !json[QString("viewer_user_id")].isNull() && m_viewer_user_id_isValid;

    m_watch_time_isValid = ::OpenAPI::fromJsonValue(m_watch_time, json[QString("watch_time")]);
    m_watch_time_isSet = !json[QString("watch_time")].isNull() && m_watch_time_isValid;

    m_watched_isValid = ::OpenAPI::fromJsonValue(m_watched, json[QString("watched")]);
    m_watched_isSet = !json[QString("watched")].isNull() && m_watched_isValid;

    m_weighted_average_bitrate_isValid = ::OpenAPI::fromJsonValue(m_weighted_average_bitrate, json[QString("weighted_average_bitrate")]);
    m_weighted_average_bitrate_isSet = !json[QString("weighted_average_bitrate")].isNull() && m_weighted_average_bitrate_isValid;
}

QString OAIVideoView::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoView::asJsonObject() const {
    QJsonObject obj;
    if (m_asn_isSet) {
        obj.insert(QString("asn"), ::OpenAPI::toJsonValue(m_asn));
    }
    if (m_asn_name_isSet) {
        obj.insert(QString("asn_name"), ::OpenAPI::toJsonValue(m_asn_name));
    }
    if (m_asset_id_isSet) {
        obj.insert(QString("asset_id"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_buffering_count_isSet) {
        obj.insert(QString("buffering_count"), ::OpenAPI::toJsonValue(m_buffering_count));
    }
    if (m_buffering_duration_isSet) {
        obj.insert(QString("buffering_duration"), ::OpenAPI::toJsonValue(m_buffering_duration));
    }
    if (m_buffering_rate_isSet) {
        obj.insert(QString("buffering_rate"), ::OpenAPI::toJsonValue(m_buffering_rate));
    }
    if (m_cdn_isSet) {
        obj.insert(QString("cdn"), ::OpenAPI::toJsonValue(m_cdn));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_continent_code_isSet) {
        obj.insert(QString("continent_code"), ::OpenAPI::toJsonValue(m_continent_code));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_name_isSet) {
        obj.insert(QString("country_name"), ::OpenAPI::toJsonValue(m_country_name));
    }
    if (m_custom_1_isSet) {
        obj.insert(QString("custom_1"), ::OpenAPI::toJsonValue(m_custom_1));
    }
    if (m_custom_10_isSet) {
        obj.insert(QString("custom_10"), ::OpenAPI::toJsonValue(m_custom_10));
    }
    if (m_custom_2_isSet) {
        obj.insert(QString("custom_2"), ::OpenAPI::toJsonValue(m_custom_2));
    }
    if (m_custom_3_isSet) {
        obj.insert(QString("custom_3"), ::OpenAPI::toJsonValue(m_custom_3));
    }
    if (m_custom_4_isSet) {
        obj.insert(QString("custom_4"), ::OpenAPI::toJsonValue(m_custom_4));
    }
    if (m_custom_5_isSet) {
        obj.insert(QString("custom_5"), ::OpenAPI::toJsonValue(m_custom_5));
    }
    if (m_custom_6_isSet) {
        obj.insert(QString("custom_6"), ::OpenAPI::toJsonValue(m_custom_6));
    }
    if (m_custom_7_isSet) {
        obj.insert(QString("custom_7"), ::OpenAPI::toJsonValue(m_custom_7));
    }
    if (m_custom_8_isSet) {
        obj.insert(QString("custom_8"), ::OpenAPI::toJsonValue(m_custom_8));
    }
    if (m_custom_9_isSet) {
        obj.insert(QString("custom_9"), ::OpenAPI::toJsonValue(m_custom_9));
    }
    if (m_environment_id_isSet) {
        obj.insert(QString("environment_id"), ::OpenAPI::toJsonValue(m_environment_id));
    }
    if (m_error_type_id_isSet) {
        obj.insert(QString("error_type_id"), ::OpenAPI::toJsonValue(m_error_type_id));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_exit_before_video_start_isSet) {
        obj.insert(QString("exit_before_video_start"), ::OpenAPI::toJsonValue(m_exit_before_video_start));
    }
    if (m_experiment_name_isSet) {
        obj.insert(QString("experiment_name"), ::OpenAPI::toJsonValue(m_experiment_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_inserted_at_isSet) {
        obj.insert(QString("inserted_at"), ::OpenAPI::toJsonValue(m_inserted_at));
    }
    if (m_isp_isSet) {
        obj.insert(QString("isp"), ::OpenAPI::toJsonValue(m_isp));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_live_stream_id_isSet) {
        obj.insert(QString("live_stream_id"), ::OpenAPI::toJsonValue(m_live_stream_id));
    }
    if (m_live_stream_latency_isSet) {
        obj.insert(QString("live_stream_latency"), ::OpenAPI::toJsonValue(m_live_stream_latency));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_metro_isSet) {
        obj.insert(QString("metro"), ::OpenAPI::toJsonValue(m_metro));
    }
    if (m_mux_api_version_isSet) {
        obj.insert(QString("mux_api_version"), ::OpenAPI::toJsonValue(m_mux_api_version));
    }
    if (m_mux_embed_isSet) {
        obj.insert(QString("mux_embed"), ::OpenAPI::toJsonValue(m_mux_embed));
    }
    if (m_mux_embed_version_isSet) {
        obj.insert(QString("mux_embed_version"), ::OpenAPI::toJsonValue(m_mux_embed_version));
    }
    if (m_mux_viewer_id_isSet) {
        obj.insert(QString("mux_viewer_id"), ::OpenAPI::toJsonValue(m_mux_viewer_id));
    }
    if (m_page_load_time_isSet) {
        obj.insert(QString("page_load_time"), ::OpenAPI::toJsonValue(m_page_load_time));
    }
    if (m_page_type_isSet) {
        obj.insert(QString("page_type"), ::OpenAPI::toJsonValue(m_page_type));
    }
    if (m_page_url_isSet) {
        obj.insert(QString("page_url"), ::OpenAPI::toJsonValue(m_page_url));
    }
    if (m_platform_description_isSet) {
        obj.insert(QString("platform_description"), ::OpenAPI::toJsonValue(m_platform_description));
    }
    if (m_platform_summary_isSet) {
        obj.insert(QString("platform_summary"), ::OpenAPI::toJsonValue(m_platform_summary));
    }
    if (m_playback_id_isSet) {
        obj.insert(QString("playback_id"), ::OpenAPI::toJsonValue(m_playback_id));
    }
    if (m_playback_score_isSet) {
        obj.insert(QString("playback_score"), ::OpenAPI::toJsonValue(m_playback_score));
    }
    if (m_player_autoplay_isSet) {
        obj.insert(QString("player_autoplay"), ::OpenAPI::toJsonValue(m_player_autoplay));
    }
    if (m_player_error_code_isSet) {
        obj.insert(QString("player_error_code"), ::OpenAPI::toJsonValue(m_player_error_code));
    }
    if (m_player_error_context_isSet) {
        obj.insert(QString("player_error_context"), ::OpenAPI::toJsonValue(m_player_error_context));
    }
    if (m_player_error_message_isSet) {
        obj.insert(QString("player_error_message"), ::OpenAPI::toJsonValue(m_player_error_message));
    }
    if (m_player_height_isSet) {
        obj.insert(QString("player_height"), ::OpenAPI::toJsonValue(m_player_height));
    }
    if (m_player_instance_id_isSet) {
        obj.insert(QString("player_instance_id"), ::OpenAPI::toJsonValue(m_player_instance_id));
    }
    if (m_player_language_isSet) {
        obj.insert(QString("player_language"), ::OpenAPI::toJsonValue(m_player_language));
    }
    if (m_player_load_time_isSet) {
        obj.insert(QString("player_load_time"), ::OpenAPI::toJsonValue(m_player_load_time));
    }
    if (m_player_mux_plugin_name_isSet) {
        obj.insert(QString("player_mux_plugin_name"), ::OpenAPI::toJsonValue(m_player_mux_plugin_name));
    }
    if (m_player_mux_plugin_version_isSet) {
        obj.insert(QString("player_mux_plugin_version"), ::OpenAPI::toJsonValue(m_player_mux_plugin_version));
    }
    if (m_player_name_isSet) {
        obj.insert(QString("player_name"), ::OpenAPI::toJsonValue(m_player_name));
    }
    if (m_player_poster_isSet) {
        obj.insert(QString("player_poster"), ::OpenAPI::toJsonValue(m_player_poster));
    }
    if (m_player_preload_isSet) {
        obj.insert(QString("player_preload"), ::OpenAPI::toJsonValue(m_player_preload));
    }
    if (m_player_remote_played_isSet) {
        obj.insert(QString("player_remote_played"), ::OpenAPI::toJsonValue(m_player_remote_played));
    }
    if (m_player_software_isSet) {
        obj.insert(QString("player_software"), ::OpenAPI::toJsonValue(m_player_software));
    }
    if (m_player_software_version_isSet) {
        obj.insert(QString("player_software_version"), ::OpenAPI::toJsonValue(m_player_software_version));
    }
    if (m_player_source_domain_isSet) {
        obj.insert(QString("player_source_domain"), ::OpenAPI::toJsonValue(m_player_source_domain));
    }
    if (m_player_source_duration_isSet) {
        obj.insert(QString("player_source_duration"), ::OpenAPI::toJsonValue(m_player_source_duration));
    }
    if (m_player_source_height_isSet) {
        obj.insert(QString("player_source_height"), ::OpenAPI::toJsonValue(m_player_source_height));
    }
    if (m_player_source_host_name_isSet) {
        obj.insert(QString("player_source_host_name"), ::OpenAPI::toJsonValue(m_player_source_host_name));
    }
    if (m_player_source_stream_type_isSet) {
        obj.insert(QString("player_source_stream_type"), ::OpenAPI::toJsonValue(m_player_source_stream_type));
    }
    if (m_player_source_type_isSet) {
        obj.insert(QString("player_source_type"), ::OpenAPI::toJsonValue(m_player_source_type));
    }
    if (m_player_source_url_isSet) {
        obj.insert(QString("player_source_url"), ::OpenAPI::toJsonValue(m_player_source_url));
    }
    if (m_player_source_width_isSet) {
        obj.insert(QString("player_source_width"), ::OpenAPI::toJsonValue(m_player_source_width));
    }
    if (m_player_startup_time_isSet) {
        obj.insert(QString("player_startup_time"), ::OpenAPI::toJsonValue(m_player_startup_time));
    }
    if (m_player_version_isSet) {
        obj.insert(QString("player_version"), ::OpenAPI::toJsonValue(m_player_version));
    }
    if (m_player_view_count_isSet) {
        obj.insert(QString("player_view_count"), ::OpenAPI::toJsonValue(m_player_view_count));
    }
    if (m_player_width_isSet) {
        obj.insert(QString("player_width"), ::OpenAPI::toJsonValue(m_player_width));
    }
    if (m_preroll_ad_asset_hostname_isSet) {
        obj.insert(QString("preroll_ad_asset_hostname"), ::OpenAPI::toJsonValue(m_preroll_ad_asset_hostname));
    }
    if (m_preroll_ad_tag_hostname_isSet) {
        obj.insert(QString("preroll_ad_tag_hostname"), ::OpenAPI::toJsonValue(m_preroll_ad_tag_hostname));
    }
    if (m_preroll_played_isSet) {
        obj.insert(QString("preroll_played"), ::OpenAPI::toJsonValue(m_preroll_played));
    }
    if (m_preroll_requested_isSet) {
        obj.insert(QString("preroll_requested"), ::OpenAPI::toJsonValue(m_preroll_requested));
    }
    if (m_property_id_isSet) {
        obj.insert(QString("property_id"), ::OpenAPI::toJsonValue(m_property_id));
    }
    if (m_quality_score_isSet) {
        obj.insert(QString("quality_score"), ::OpenAPI::toJsonValue(m_quality_score));
    }
    if (m_rebuffer_percentage_isSet) {
        obj.insert(QString("rebuffer_percentage"), ::OpenAPI::toJsonValue(m_rebuffer_percentage));
    }
    if (m_rebuffering_score_isSet) {
        obj.insert(QString("rebuffering_score"), ::OpenAPI::toJsonValue(m_rebuffering_score));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_requests_for_first_preroll_isSet) {
        obj.insert(QString("requests_for_first_preroll"), ::OpenAPI::toJsonValue(m_requests_for_first_preroll));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("session_id"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_short_time_isSet) {
        obj.insert(QString("short_time"), ::OpenAPI::toJsonValue(m_short_time));
    }
    if (m_startup_score_isSet) {
        obj.insert(QString("startup_score"), ::OpenAPI::toJsonValue(m_startup_score));
    }
    if (m_sub_property_id_isSet) {
        obj.insert(QString("sub_property_id"), ::OpenAPI::toJsonValue(m_sub_property_id));
    }
    if (m_time_to_first_frame_isSet) {
        obj.insert(QString("time_to_first_frame"), ::OpenAPI::toJsonValue(m_time_to_first_frame));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_used_fullscreen_isSet) {
        obj.insert(QString("used_fullscreen"), ::OpenAPI::toJsonValue(m_used_fullscreen));
    }
    if (m_video_content_type_isSet) {
        obj.insert(QString("video_content_type"), ::OpenAPI::toJsonValue(m_video_content_type));
    }
    if (m_video_duration_isSet) {
        obj.insert(QString("video_duration"), ::OpenAPI::toJsonValue(m_video_duration));
    }
    if (m_video_encoding_variant_isSet) {
        obj.insert(QString("video_encoding_variant"), ::OpenAPI::toJsonValue(m_video_encoding_variant));
    }
    if (m_video_id_isSet) {
        obj.insert(QString("video_id"), ::OpenAPI::toJsonValue(m_video_id));
    }
    if (m_video_language_isSet) {
        obj.insert(QString("video_language"), ::OpenAPI::toJsonValue(m_video_language));
    }
    if (m_video_producer_isSet) {
        obj.insert(QString("video_producer"), ::OpenAPI::toJsonValue(m_video_producer));
    }
    if (m_video_series_isSet) {
        obj.insert(QString("video_series"), ::OpenAPI::toJsonValue(m_video_series));
    }
    if (m_video_startup_failure_isSet) {
        obj.insert(QString("video_startup_failure"), ::OpenAPI::toJsonValue(m_video_startup_failure));
    }
    if (m_video_startup_preroll_load_time_isSet) {
        obj.insert(QString("video_startup_preroll_load_time"), ::OpenAPI::toJsonValue(m_video_startup_preroll_load_time));
    }
    if (m_video_startup_preroll_request_time_isSet) {
        obj.insert(QString("video_startup_preroll_request_time"), ::OpenAPI::toJsonValue(m_video_startup_preroll_request_time));
    }
    if (m_video_stream_type_isSet) {
        obj.insert(QString("video_stream_type"), ::OpenAPI::toJsonValue(m_video_stream_type));
    }
    if (m_video_title_isSet) {
        obj.insert(QString("video_title"), ::OpenAPI::toJsonValue(m_video_title));
    }
    if (m_video_variant_id_isSet) {
        obj.insert(QString("video_variant_id"), ::OpenAPI::toJsonValue(m_video_variant_id));
    }
    if (m_video_variant_name_isSet) {
        obj.insert(QString("video_variant_name"), ::OpenAPI::toJsonValue(m_video_variant_name));
    }
    if (m_view_average_request_latency_isSet) {
        obj.insert(QString("view_average_request_latency"), ::OpenAPI::toJsonValue(m_view_average_request_latency));
    }
    if (m_view_average_request_throughput_isSet) {
        obj.insert(QString("view_average_request_throughput"), ::OpenAPI::toJsonValue(m_view_average_request_throughput));
    }
    if (m_view_drm_type_isSet) {
        obj.insert(QString("view_drm_type"), ::OpenAPI::toJsonValue(m_view_drm_type));
    }
    if (m_view_dropped_frame_count_isSet) {
        obj.insert(QString("view_dropped_frame_count"), ::OpenAPI::toJsonValue(m_view_dropped_frame_count));
    }
    if (m_view_end_isSet) {
        obj.insert(QString("view_end"), ::OpenAPI::toJsonValue(m_view_end));
    }
    if (m_view_error_id_isSet) {
        obj.insert(QString("view_error_id"), ::OpenAPI::toJsonValue(m_view_error_id));
    }
    if (m_view_has_ad_isSet) {
        obj.insert(QString("view_has_ad"), ::OpenAPI::toJsonValue(m_view_has_ad));
    }
    if (m_view_id_isSet) {
        obj.insert(QString("view_id"), ::OpenAPI::toJsonValue(m_view_id));
    }
    if (m_view_max_downscale_percentage_isSet) {
        obj.insert(QString("view_max_downscale_percentage"), ::OpenAPI::toJsonValue(m_view_max_downscale_percentage));
    }
    if (m_view_max_playhead_position_isSet) {
        obj.insert(QString("view_max_playhead_position"), ::OpenAPI::toJsonValue(m_view_max_playhead_position));
    }
    if (m_view_max_request_latency_isSet) {
        obj.insert(QString("view_max_request_latency"), ::OpenAPI::toJsonValue(m_view_max_request_latency));
    }
    if (m_view_max_upscale_percentage_isSet) {
        obj.insert(QString("view_max_upscale_percentage"), ::OpenAPI::toJsonValue(m_view_max_upscale_percentage));
    }
    if (m_view_playing_time_isSet) {
        obj.insert(QString("view_playing_time"), ::OpenAPI::toJsonValue(m_view_playing_time));
    }
    if (m_view_seek_count_isSet) {
        obj.insert(QString("view_seek_count"), ::OpenAPI::toJsonValue(m_view_seek_count));
    }
    if (m_view_seek_duration_isSet) {
        obj.insert(QString("view_seek_duration"), ::OpenAPI::toJsonValue(m_view_seek_duration));
    }
    if (m_view_session_id_isSet) {
        obj.insert(QString("view_session_id"), ::OpenAPI::toJsonValue(m_view_session_id));
    }
    if (m_view_start_isSet) {
        obj.insert(QString("view_start"), ::OpenAPI::toJsonValue(m_view_start));
    }
    if (m_view_total_content_playback_time_isSet) {
        obj.insert(QString("view_total_content_playback_time"), ::OpenAPI::toJsonValue(m_view_total_content_playback_time));
    }
    if (m_view_total_downscaling_isSet) {
        obj.insert(QString("view_total_downscaling"), ::OpenAPI::toJsonValue(m_view_total_downscaling));
    }
    if (m_view_total_upscaling_isSet) {
        obj.insert(QString("view_total_upscaling"), ::OpenAPI::toJsonValue(m_view_total_upscaling));
    }
    if (m_viewer_application_engine_isSet) {
        obj.insert(QString("viewer_application_engine"), ::OpenAPI::toJsonValue(m_viewer_application_engine));
    }
    if (m_viewer_application_name_isSet) {
        obj.insert(QString("viewer_application_name"), ::OpenAPI::toJsonValue(m_viewer_application_name));
    }
    if (m_viewer_application_version_isSet) {
        obj.insert(QString("viewer_application_version"), ::OpenAPI::toJsonValue(m_viewer_application_version));
    }
    if (m_viewer_connection_type_isSet) {
        obj.insert(QString("viewer_connection_type"), ::OpenAPI::toJsonValue(m_viewer_connection_type));
    }
    if (m_viewer_device_category_isSet) {
        obj.insert(QString("viewer_device_category"), ::OpenAPI::toJsonValue(m_viewer_device_category));
    }
    if (m_viewer_device_manufacturer_isSet) {
        obj.insert(QString("viewer_device_manufacturer"), ::OpenAPI::toJsonValue(m_viewer_device_manufacturer));
    }
    if (m_viewer_device_model_isSet) {
        obj.insert(QString("viewer_device_model"), ::OpenAPI::toJsonValue(m_viewer_device_model));
    }
    if (m_viewer_device_name_isSet) {
        obj.insert(QString("viewer_device_name"), ::OpenAPI::toJsonValue(m_viewer_device_name));
    }
    if (m_viewer_experience_score_isSet) {
        obj.insert(QString("viewer_experience_score"), ::OpenAPI::toJsonValue(m_viewer_experience_score));
    }
    if (m_viewer_os_architecture_isSet) {
        obj.insert(QString("viewer_os_architecture"), ::OpenAPI::toJsonValue(m_viewer_os_architecture));
    }
    if (m_viewer_os_family_isSet) {
        obj.insert(QString("viewer_os_family"), ::OpenAPI::toJsonValue(m_viewer_os_family));
    }
    if (m_viewer_os_version_isSet) {
        obj.insert(QString("viewer_os_version"), ::OpenAPI::toJsonValue(m_viewer_os_version));
    }
    if (m_viewer_user_agent_isSet) {
        obj.insert(QString("viewer_user_agent"), ::OpenAPI::toJsonValue(m_viewer_user_agent));
    }
    if (m_viewer_user_id_isSet) {
        obj.insert(QString("viewer_user_id"), ::OpenAPI::toJsonValue(m_viewer_user_id));
    }
    if (m_watch_time_isSet) {
        obj.insert(QString("watch_time"), ::OpenAPI::toJsonValue(m_watch_time));
    }
    if (m_watched_isSet) {
        obj.insert(QString("watched"), ::OpenAPI::toJsonValue(m_watched));
    }
    if (m_weighted_average_bitrate_isSet) {
        obj.insert(QString("weighted_average_bitrate"), ::OpenAPI::toJsonValue(m_weighted_average_bitrate));
    }
    return obj;
}

qint64 OAIVideoView::getAsn() const {
    return m_asn;
}
void OAIVideoView::setAsn(const qint64 &asn) {
    m_asn = asn;
    m_asn_isSet = true;
}

bool OAIVideoView::is_asn_Set() const{
    return m_asn_isSet;
}

bool OAIVideoView::is_asn_Valid() const{
    return m_asn_isValid;
}

QString OAIVideoView::getAsnName() const {
    return m_asn_name;
}
void OAIVideoView::setAsnName(const QString &asn_name) {
    m_asn_name = asn_name;
    m_asn_name_isSet = true;
}

bool OAIVideoView::is_asn_name_Set() const{
    return m_asn_name_isSet;
}

bool OAIVideoView::is_asn_name_Valid() const{
    return m_asn_name_isValid;
}

QString OAIVideoView::getAssetId() const {
    return m_asset_id;
}
void OAIVideoView::setAssetId(const QString &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAIVideoView::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIVideoView::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

qint64 OAIVideoView::getBufferingCount() const {
    return m_buffering_count;
}
void OAIVideoView::setBufferingCount(const qint64 &buffering_count) {
    m_buffering_count = buffering_count;
    m_buffering_count_isSet = true;
}

bool OAIVideoView::is_buffering_count_Set() const{
    return m_buffering_count_isSet;
}

bool OAIVideoView::is_buffering_count_Valid() const{
    return m_buffering_count_isValid;
}

qint64 OAIVideoView::getBufferingDuration() const {
    return m_buffering_duration;
}
void OAIVideoView::setBufferingDuration(const qint64 &buffering_duration) {
    m_buffering_duration = buffering_duration;
    m_buffering_duration_isSet = true;
}

bool OAIVideoView::is_buffering_duration_Set() const{
    return m_buffering_duration_isSet;
}

bool OAIVideoView::is_buffering_duration_Valid() const{
    return m_buffering_duration_isValid;
}

QString OAIVideoView::getBufferingRate() const {
    return m_buffering_rate;
}
void OAIVideoView::setBufferingRate(const QString &buffering_rate) {
    m_buffering_rate = buffering_rate;
    m_buffering_rate_isSet = true;
}

bool OAIVideoView::is_buffering_rate_Set() const{
    return m_buffering_rate_isSet;
}

bool OAIVideoView::is_buffering_rate_Valid() const{
    return m_buffering_rate_isValid;
}

QString OAIVideoView::getCdn() const {
    return m_cdn;
}
void OAIVideoView::setCdn(const QString &cdn) {
    m_cdn = cdn;
    m_cdn_isSet = true;
}

bool OAIVideoView::is_cdn_Set() const{
    return m_cdn_isSet;
}

bool OAIVideoView::is_cdn_Valid() const{
    return m_cdn_isValid;
}

QString OAIVideoView::getCity() const {
    return m_city;
}
void OAIVideoView::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIVideoView::is_city_Set() const{
    return m_city_isSet;
}

bool OAIVideoView::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIVideoView::getContinentCode() const {
    return m_continent_code;
}
void OAIVideoView::setContinentCode(const QString &continent_code) {
    m_continent_code = continent_code;
    m_continent_code_isSet = true;
}

bool OAIVideoView::is_continent_code_Set() const{
    return m_continent_code_isSet;
}

bool OAIVideoView::is_continent_code_Valid() const{
    return m_continent_code_isValid;
}

QString OAIVideoView::getCountryCode() const {
    return m_country_code;
}
void OAIVideoView::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIVideoView::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIVideoView::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIVideoView::getCountryName() const {
    return m_country_name;
}
void OAIVideoView::setCountryName(const QString &country_name) {
    m_country_name = country_name;
    m_country_name_isSet = true;
}

bool OAIVideoView::is_country_name_Set() const{
    return m_country_name_isSet;
}

bool OAIVideoView::is_country_name_Valid() const{
    return m_country_name_isValid;
}

QString OAIVideoView::getCustom1() const {
    return m_custom_1;
}
void OAIVideoView::setCustom1(const QString &custom_1) {
    m_custom_1 = custom_1;
    m_custom_1_isSet = true;
}

bool OAIVideoView::is_custom_1_Set() const{
    return m_custom_1_isSet;
}

bool OAIVideoView::is_custom_1_Valid() const{
    return m_custom_1_isValid;
}

QString OAIVideoView::getCustom10() const {
    return m_custom_10;
}
void OAIVideoView::setCustom10(const QString &custom_10) {
    m_custom_10 = custom_10;
    m_custom_10_isSet = true;
}

bool OAIVideoView::is_custom_10_Set() const{
    return m_custom_10_isSet;
}

bool OAIVideoView::is_custom_10_Valid() const{
    return m_custom_10_isValid;
}

QString OAIVideoView::getCustom2() const {
    return m_custom_2;
}
void OAIVideoView::setCustom2(const QString &custom_2) {
    m_custom_2 = custom_2;
    m_custom_2_isSet = true;
}

bool OAIVideoView::is_custom_2_Set() const{
    return m_custom_2_isSet;
}

bool OAIVideoView::is_custom_2_Valid() const{
    return m_custom_2_isValid;
}

QString OAIVideoView::getCustom3() const {
    return m_custom_3;
}
void OAIVideoView::setCustom3(const QString &custom_3) {
    m_custom_3 = custom_3;
    m_custom_3_isSet = true;
}

bool OAIVideoView::is_custom_3_Set() const{
    return m_custom_3_isSet;
}

bool OAIVideoView::is_custom_3_Valid() const{
    return m_custom_3_isValid;
}

QString OAIVideoView::getCustom4() const {
    return m_custom_4;
}
void OAIVideoView::setCustom4(const QString &custom_4) {
    m_custom_4 = custom_4;
    m_custom_4_isSet = true;
}

bool OAIVideoView::is_custom_4_Set() const{
    return m_custom_4_isSet;
}

bool OAIVideoView::is_custom_4_Valid() const{
    return m_custom_4_isValid;
}

QString OAIVideoView::getCustom5() const {
    return m_custom_5;
}
void OAIVideoView::setCustom5(const QString &custom_5) {
    m_custom_5 = custom_5;
    m_custom_5_isSet = true;
}

bool OAIVideoView::is_custom_5_Set() const{
    return m_custom_5_isSet;
}

bool OAIVideoView::is_custom_5_Valid() const{
    return m_custom_5_isValid;
}

QString OAIVideoView::getCustom6() const {
    return m_custom_6;
}
void OAIVideoView::setCustom6(const QString &custom_6) {
    m_custom_6 = custom_6;
    m_custom_6_isSet = true;
}

bool OAIVideoView::is_custom_6_Set() const{
    return m_custom_6_isSet;
}

bool OAIVideoView::is_custom_6_Valid() const{
    return m_custom_6_isValid;
}

QString OAIVideoView::getCustom7() const {
    return m_custom_7;
}
void OAIVideoView::setCustom7(const QString &custom_7) {
    m_custom_7 = custom_7;
    m_custom_7_isSet = true;
}

bool OAIVideoView::is_custom_7_Set() const{
    return m_custom_7_isSet;
}

bool OAIVideoView::is_custom_7_Valid() const{
    return m_custom_7_isValid;
}

QString OAIVideoView::getCustom8() const {
    return m_custom_8;
}
void OAIVideoView::setCustom8(const QString &custom_8) {
    m_custom_8 = custom_8;
    m_custom_8_isSet = true;
}

bool OAIVideoView::is_custom_8_Set() const{
    return m_custom_8_isSet;
}

bool OAIVideoView::is_custom_8_Valid() const{
    return m_custom_8_isValid;
}

QString OAIVideoView::getCustom9() const {
    return m_custom_9;
}
void OAIVideoView::setCustom9(const QString &custom_9) {
    m_custom_9 = custom_9;
    m_custom_9_isSet = true;
}

bool OAIVideoView::is_custom_9_Set() const{
    return m_custom_9_isSet;
}

bool OAIVideoView::is_custom_9_Valid() const{
    return m_custom_9_isValid;
}

QString OAIVideoView::getEnvironmentId() const {
    return m_environment_id;
}
void OAIVideoView::setEnvironmentId(const QString &environment_id) {
    m_environment_id = environment_id;
    m_environment_id_isSet = true;
}

bool OAIVideoView::is_environment_id_Set() const{
    return m_environment_id_isSet;
}

bool OAIVideoView::is_environment_id_Valid() const{
    return m_environment_id_isValid;
}

qint32 OAIVideoView::getErrorTypeId() const {
    return m_error_type_id;
}
void OAIVideoView::setErrorTypeId(const qint32 &error_type_id) {
    m_error_type_id = error_type_id;
    m_error_type_id_isSet = true;
}

bool OAIVideoView::is_error_type_id_Set() const{
    return m_error_type_id_isSet;
}

bool OAIVideoView::is_error_type_id_Valid() const{
    return m_error_type_id_isValid;
}

QList<OAIVideoViewEvent> OAIVideoView::getEvents() const {
    return m_events;
}
void OAIVideoView::setEvents(const QList<OAIVideoViewEvent> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIVideoView::is_events_Set() const{
    return m_events_isSet;
}

bool OAIVideoView::is_events_Valid() const{
    return m_events_isValid;
}

bool OAIVideoView::isExitBeforeVideoStart() const {
    return m_exit_before_video_start;
}
void OAIVideoView::setExitBeforeVideoStart(const bool &exit_before_video_start) {
    m_exit_before_video_start = exit_before_video_start;
    m_exit_before_video_start_isSet = true;
}

bool OAIVideoView::is_exit_before_video_start_Set() const{
    return m_exit_before_video_start_isSet;
}

bool OAIVideoView::is_exit_before_video_start_Valid() const{
    return m_exit_before_video_start_isValid;
}

QString OAIVideoView::getExperimentName() const {
    return m_experiment_name;
}
void OAIVideoView::setExperimentName(const QString &experiment_name) {
    m_experiment_name = experiment_name;
    m_experiment_name_isSet = true;
}

bool OAIVideoView::is_experiment_name_Set() const{
    return m_experiment_name_isSet;
}

bool OAIVideoView::is_experiment_name_Valid() const{
    return m_experiment_name_isValid;
}

QString OAIVideoView::getId() const {
    return m_id;
}
void OAIVideoView::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVideoView::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVideoView::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIVideoView::getInsertedAt() const {
    return m_inserted_at;
}
void OAIVideoView::setInsertedAt(const QString &inserted_at) {
    m_inserted_at = inserted_at;
    m_inserted_at_isSet = true;
}

bool OAIVideoView::is_inserted_at_Set() const{
    return m_inserted_at_isSet;
}

bool OAIVideoView::is_inserted_at_Valid() const{
    return m_inserted_at_isValid;
}

QString OAIVideoView::getIsp() const {
    return m_isp;
}
void OAIVideoView::setIsp(const QString &isp) {
    m_isp = isp;
    m_isp_isSet = true;
}

bool OAIVideoView::is_isp_Set() const{
    return m_isp_isSet;
}

bool OAIVideoView::is_isp_Valid() const{
    return m_isp_isValid;
}

QString OAIVideoView::getLatitude() const {
    return m_latitude;
}
void OAIVideoView::setLatitude(const QString &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIVideoView::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIVideoView::is_latitude_Valid() const{
    return m_latitude_isValid;
}

QString OAIVideoView::getLiveStreamId() const {
    return m_live_stream_id;
}
void OAIVideoView::setLiveStreamId(const QString &live_stream_id) {
    m_live_stream_id = live_stream_id;
    m_live_stream_id_isSet = true;
}

bool OAIVideoView::is_live_stream_id_Set() const{
    return m_live_stream_id_isSet;
}

bool OAIVideoView::is_live_stream_id_Valid() const{
    return m_live_stream_id_isValid;
}

qint64 OAIVideoView::getLiveStreamLatency() const {
    return m_live_stream_latency;
}
void OAIVideoView::setLiveStreamLatency(const qint64 &live_stream_latency) {
    m_live_stream_latency = live_stream_latency;
    m_live_stream_latency_isSet = true;
}

bool OAIVideoView::is_live_stream_latency_Set() const{
    return m_live_stream_latency_isSet;
}

bool OAIVideoView::is_live_stream_latency_Valid() const{
    return m_live_stream_latency_isValid;
}

QString OAIVideoView::getLongitude() const {
    return m_longitude;
}
void OAIVideoView::setLongitude(const QString &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIVideoView::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIVideoView::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAIVideoView::getMetro() const {
    return m_metro;
}
void OAIVideoView::setMetro(const QString &metro) {
    m_metro = metro;
    m_metro_isSet = true;
}

bool OAIVideoView::is_metro_Set() const{
    return m_metro_isSet;
}

bool OAIVideoView::is_metro_Valid() const{
    return m_metro_isValid;
}

QString OAIVideoView::getMuxApiVersion() const {
    return m_mux_api_version;
}
void OAIVideoView::setMuxApiVersion(const QString &mux_api_version) {
    m_mux_api_version = mux_api_version;
    m_mux_api_version_isSet = true;
}

bool OAIVideoView::is_mux_api_version_Set() const{
    return m_mux_api_version_isSet;
}

bool OAIVideoView::is_mux_api_version_Valid() const{
    return m_mux_api_version_isValid;
}

QString OAIVideoView::getMuxEmbed() const {
    return m_mux_embed;
}
void OAIVideoView::setMuxEmbed(const QString &mux_embed) {
    m_mux_embed = mux_embed;
    m_mux_embed_isSet = true;
}

bool OAIVideoView::is_mux_embed_Set() const{
    return m_mux_embed_isSet;
}

bool OAIVideoView::is_mux_embed_Valid() const{
    return m_mux_embed_isValid;
}

QString OAIVideoView::getMuxEmbedVersion() const {
    return m_mux_embed_version;
}
void OAIVideoView::setMuxEmbedVersion(const QString &mux_embed_version) {
    m_mux_embed_version = mux_embed_version;
    m_mux_embed_version_isSet = true;
}

bool OAIVideoView::is_mux_embed_version_Set() const{
    return m_mux_embed_version_isSet;
}

bool OAIVideoView::is_mux_embed_version_Valid() const{
    return m_mux_embed_version_isValid;
}

QString OAIVideoView::getMuxViewerId() const {
    return m_mux_viewer_id;
}
void OAIVideoView::setMuxViewerId(const QString &mux_viewer_id) {
    m_mux_viewer_id = mux_viewer_id;
    m_mux_viewer_id_isSet = true;
}

bool OAIVideoView::is_mux_viewer_id_Set() const{
    return m_mux_viewer_id_isSet;
}

bool OAIVideoView::is_mux_viewer_id_Valid() const{
    return m_mux_viewer_id_isValid;
}

qint64 OAIVideoView::getPageLoadTime() const {
    return m_page_load_time;
}
void OAIVideoView::setPageLoadTime(const qint64 &page_load_time) {
    m_page_load_time = page_load_time;
    m_page_load_time_isSet = true;
}

bool OAIVideoView::is_page_load_time_Set() const{
    return m_page_load_time_isSet;
}

bool OAIVideoView::is_page_load_time_Valid() const{
    return m_page_load_time_isValid;
}

QString OAIVideoView::getPageType() const {
    return m_page_type;
}
void OAIVideoView::setPageType(const QString &page_type) {
    m_page_type = page_type;
    m_page_type_isSet = true;
}

bool OAIVideoView::is_page_type_Set() const{
    return m_page_type_isSet;
}

bool OAIVideoView::is_page_type_Valid() const{
    return m_page_type_isValid;
}

QString OAIVideoView::getPageUrl() const {
    return m_page_url;
}
void OAIVideoView::setPageUrl(const QString &page_url) {
    m_page_url = page_url;
    m_page_url_isSet = true;
}

bool OAIVideoView::is_page_url_Set() const{
    return m_page_url_isSet;
}

bool OAIVideoView::is_page_url_Valid() const{
    return m_page_url_isValid;
}

QString OAIVideoView::getPlatformDescription() const {
    return m_platform_description;
}
void OAIVideoView::setPlatformDescription(const QString &platform_description) {
    m_platform_description = platform_description;
    m_platform_description_isSet = true;
}

bool OAIVideoView::is_platform_description_Set() const{
    return m_platform_description_isSet;
}

bool OAIVideoView::is_platform_description_Valid() const{
    return m_platform_description_isValid;
}

QString OAIVideoView::getPlatformSummary() const {
    return m_platform_summary;
}
void OAIVideoView::setPlatformSummary(const QString &platform_summary) {
    m_platform_summary = platform_summary;
    m_platform_summary_isSet = true;
}

bool OAIVideoView::is_platform_summary_Set() const{
    return m_platform_summary_isSet;
}

bool OAIVideoView::is_platform_summary_Valid() const{
    return m_platform_summary_isValid;
}

QString OAIVideoView::getPlaybackId() const {
    return m_playback_id;
}
void OAIVideoView::setPlaybackId(const QString &playback_id) {
    m_playback_id = playback_id;
    m_playback_id_isSet = true;
}

bool OAIVideoView::is_playback_id_Set() const{
    return m_playback_id_isSet;
}

bool OAIVideoView::is_playback_id_Valid() const{
    return m_playback_id_isValid;
}

QString OAIVideoView::getPlaybackScore() const {
    return m_playback_score;
}
void OAIVideoView::setPlaybackScore(const QString &playback_score) {
    m_playback_score = playback_score;
    m_playback_score_isSet = true;
}

bool OAIVideoView::is_playback_score_Set() const{
    return m_playback_score_isSet;
}

bool OAIVideoView::is_playback_score_Valid() const{
    return m_playback_score_isValid;
}

bool OAIVideoView::isPlayerAutoplay() const {
    return m_player_autoplay;
}
void OAIVideoView::setPlayerAutoplay(const bool &player_autoplay) {
    m_player_autoplay = player_autoplay;
    m_player_autoplay_isSet = true;
}

bool OAIVideoView::is_player_autoplay_Set() const{
    return m_player_autoplay_isSet;
}

bool OAIVideoView::is_player_autoplay_Valid() const{
    return m_player_autoplay_isValid;
}

QString OAIVideoView::getPlayerErrorCode() const {
    return m_player_error_code;
}
void OAIVideoView::setPlayerErrorCode(const QString &player_error_code) {
    m_player_error_code = player_error_code;
    m_player_error_code_isSet = true;
}

bool OAIVideoView::is_player_error_code_Set() const{
    return m_player_error_code_isSet;
}

bool OAIVideoView::is_player_error_code_Valid() const{
    return m_player_error_code_isValid;
}

QString OAIVideoView::getPlayerErrorContext() const {
    return m_player_error_context;
}
void OAIVideoView::setPlayerErrorContext(const QString &player_error_context) {
    m_player_error_context = player_error_context;
    m_player_error_context_isSet = true;
}

bool OAIVideoView::is_player_error_context_Set() const{
    return m_player_error_context_isSet;
}

bool OAIVideoView::is_player_error_context_Valid() const{
    return m_player_error_context_isValid;
}

QString OAIVideoView::getPlayerErrorMessage() const {
    return m_player_error_message;
}
void OAIVideoView::setPlayerErrorMessage(const QString &player_error_message) {
    m_player_error_message = player_error_message;
    m_player_error_message_isSet = true;
}

bool OAIVideoView::is_player_error_message_Set() const{
    return m_player_error_message_isSet;
}

bool OAIVideoView::is_player_error_message_Valid() const{
    return m_player_error_message_isValid;
}

qint32 OAIVideoView::getPlayerHeight() const {
    return m_player_height;
}
void OAIVideoView::setPlayerHeight(const qint32 &player_height) {
    m_player_height = player_height;
    m_player_height_isSet = true;
}

bool OAIVideoView::is_player_height_Set() const{
    return m_player_height_isSet;
}

bool OAIVideoView::is_player_height_Valid() const{
    return m_player_height_isValid;
}

QString OAIVideoView::getPlayerInstanceId() const {
    return m_player_instance_id;
}
void OAIVideoView::setPlayerInstanceId(const QString &player_instance_id) {
    m_player_instance_id = player_instance_id;
    m_player_instance_id_isSet = true;
}

bool OAIVideoView::is_player_instance_id_Set() const{
    return m_player_instance_id_isSet;
}

bool OAIVideoView::is_player_instance_id_Valid() const{
    return m_player_instance_id_isValid;
}

QString OAIVideoView::getPlayerLanguage() const {
    return m_player_language;
}
void OAIVideoView::setPlayerLanguage(const QString &player_language) {
    m_player_language = player_language;
    m_player_language_isSet = true;
}

bool OAIVideoView::is_player_language_Set() const{
    return m_player_language_isSet;
}

bool OAIVideoView::is_player_language_Valid() const{
    return m_player_language_isValid;
}

qint64 OAIVideoView::getPlayerLoadTime() const {
    return m_player_load_time;
}
void OAIVideoView::setPlayerLoadTime(const qint64 &player_load_time) {
    m_player_load_time = player_load_time;
    m_player_load_time_isSet = true;
}

bool OAIVideoView::is_player_load_time_Set() const{
    return m_player_load_time_isSet;
}

bool OAIVideoView::is_player_load_time_Valid() const{
    return m_player_load_time_isValid;
}

QString OAIVideoView::getPlayerMuxPluginName() const {
    return m_player_mux_plugin_name;
}
void OAIVideoView::setPlayerMuxPluginName(const QString &player_mux_plugin_name) {
    m_player_mux_plugin_name = player_mux_plugin_name;
    m_player_mux_plugin_name_isSet = true;
}

bool OAIVideoView::is_player_mux_plugin_name_Set() const{
    return m_player_mux_plugin_name_isSet;
}

bool OAIVideoView::is_player_mux_plugin_name_Valid() const{
    return m_player_mux_plugin_name_isValid;
}

QString OAIVideoView::getPlayerMuxPluginVersion() const {
    return m_player_mux_plugin_version;
}
void OAIVideoView::setPlayerMuxPluginVersion(const QString &player_mux_plugin_version) {
    m_player_mux_plugin_version = player_mux_plugin_version;
    m_player_mux_plugin_version_isSet = true;
}

bool OAIVideoView::is_player_mux_plugin_version_Set() const{
    return m_player_mux_plugin_version_isSet;
}

bool OAIVideoView::is_player_mux_plugin_version_Valid() const{
    return m_player_mux_plugin_version_isValid;
}

QString OAIVideoView::getPlayerName() const {
    return m_player_name;
}
void OAIVideoView::setPlayerName(const QString &player_name) {
    m_player_name = player_name;
    m_player_name_isSet = true;
}

bool OAIVideoView::is_player_name_Set() const{
    return m_player_name_isSet;
}

bool OAIVideoView::is_player_name_Valid() const{
    return m_player_name_isValid;
}

QString OAIVideoView::getPlayerPoster() const {
    return m_player_poster;
}
void OAIVideoView::setPlayerPoster(const QString &player_poster) {
    m_player_poster = player_poster;
    m_player_poster_isSet = true;
}

bool OAIVideoView::is_player_poster_Set() const{
    return m_player_poster_isSet;
}

bool OAIVideoView::is_player_poster_Valid() const{
    return m_player_poster_isValid;
}

bool OAIVideoView::isPlayerPreload() const {
    return m_player_preload;
}
void OAIVideoView::setPlayerPreload(const bool &player_preload) {
    m_player_preload = player_preload;
    m_player_preload_isSet = true;
}

bool OAIVideoView::is_player_preload_Set() const{
    return m_player_preload_isSet;
}

bool OAIVideoView::is_player_preload_Valid() const{
    return m_player_preload_isValid;
}

bool OAIVideoView::isPlayerRemotePlayed() const {
    return m_player_remote_played;
}
void OAIVideoView::setPlayerRemotePlayed(const bool &player_remote_played) {
    m_player_remote_played = player_remote_played;
    m_player_remote_played_isSet = true;
}

bool OAIVideoView::is_player_remote_played_Set() const{
    return m_player_remote_played_isSet;
}

bool OAIVideoView::is_player_remote_played_Valid() const{
    return m_player_remote_played_isValid;
}

QString OAIVideoView::getPlayerSoftware() const {
    return m_player_software;
}
void OAIVideoView::setPlayerSoftware(const QString &player_software) {
    m_player_software = player_software;
    m_player_software_isSet = true;
}

bool OAIVideoView::is_player_software_Set() const{
    return m_player_software_isSet;
}

bool OAIVideoView::is_player_software_Valid() const{
    return m_player_software_isValid;
}

QString OAIVideoView::getPlayerSoftwareVersion() const {
    return m_player_software_version;
}
void OAIVideoView::setPlayerSoftwareVersion(const QString &player_software_version) {
    m_player_software_version = player_software_version;
    m_player_software_version_isSet = true;
}

bool OAIVideoView::is_player_software_version_Set() const{
    return m_player_software_version_isSet;
}

bool OAIVideoView::is_player_software_version_Valid() const{
    return m_player_software_version_isValid;
}

QString OAIVideoView::getPlayerSourceDomain() const {
    return m_player_source_domain;
}
void OAIVideoView::setPlayerSourceDomain(const QString &player_source_domain) {
    m_player_source_domain = player_source_domain;
    m_player_source_domain_isSet = true;
}

bool OAIVideoView::is_player_source_domain_Set() const{
    return m_player_source_domain_isSet;
}

bool OAIVideoView::is_player_source_domain_Valid() const{
    return m_player_source_domain_isValid;
}

qint64 OAIVideoView::getPlayerSourceDuration() const {
    return m_player_source_duration;
}
void OAIVideoView::setPlayerSourceDuration(const qint64 &player_source_duration) {
    m_player_source_duration = player_source_duration;
    m_player_source_duration_isSet = true;
}

bool OAIVideoView::is_player_source_duration_Set() const{
    return m_player_source_duration_isSet;
}

bool OAIVideoView::is_player_source_duration_Valid() const{
    return m_player_source_duration_isValid;
}

qint32 OAIVideoView::getPlayerSourceHeight() const {
    return m_player_source_height;
}
void OAIVideoView::setPlayerSourceHeight(const qint32 &player_source_height) {
    m_player_source_height = player_source_height;
    m_player_source_height_isSet = true;
}

bool OAIVideoView::is_player_source_height_Set() const{
    return m_player_source_height_isSet;
}

bool OAIVideoView::is_player_source_height_Valid() const{
    return m_player_source_height_isValid;
}

QString OAIVideoView::getPlayerSourceHostName() const {
    return m_player_source_host_name;
}
void OAIVideoView::setPlayerSourceHostName(const QString &player_source_host_name) {
    m_player_source_host_name = player_source_host_name;
    m_player_source_host_name_isSet = true;
}

bool OAIVideoView::is_player_source_host_name_Set() const{
    return m_player_source_host_name_isSet;
}

bool OAIVideoView::is_player_source_host_name_Valid() const{
    return m_player_source_host_name_isValid;
}

QString OAIVideoView::getPlayerSourceStreamType() const {
    return m_player_source_stream_type;
}
void OAIVideoView::setPlayerSourceStreamType(const QString &player_source_stream_type) {
    m_player_source_stream_type = player_source_stream_type;
    m_player_source_stream_type_isSet = true;
}

bool OAIVideoView::is_player_source_stream_type_Set() const{
    return m_player_source_stream_type_isSet;
}

bool OAIVideoView::is_player_source_stream_type_Valid() const{
    return m_player_source_stream_type_isValid;
}

QString OAIVideoView::getPlayerSourceType() const {
    return m_player_source_type;
}
void OAIVideoView::setPlayerSourceType(const QString &player_source_type) {
    m_player_source_type = player_source_type;
    m_player_source_type_isSet = true;
}

bool OAIVideoView::is_player_source_type_Set() const{
    return m_player_source_type_isSet;
}

bool OAIVideoView::is_player_source_type_Valid() const{
    return m_player_source_type_isValid;
}

QString OAIVideoView::getPlayerSourceUrl() const {
    return m_player_source_url;
}
void OAIVideoView::setPlayerSourceUrl(const QString &player_source_url) {
    m_player_source_url = player_source_url;
    m_player_source_url_isSet = true;
}

bool OAIVideoView::is_player_source_url_Set() const{
    return m_player_source_url_isSet;
}

bool OAIVideoView::is_player_source_url_Valid() const{
    return m_player_source_url_isValid;
}

qint32 OAIVideoView::getPlayerSourceWidth() const {
    return m_player_source_width;
}
void OAIVideoView::setPlayerSourceWidth(const qint32 &player_source_width) {
    m_player_source_width = player_source_width;
    m_player_source_width_isSet = true;
}

bool OAIVideoView::is_player_source_width_Set() const{
    return m_player_source_width_isSet;
}

bool OAIVideoView::is_player_source_width_Valid() const{
    return m_player_source_width_isValid;
}

qint64 OAIVideoView::getPlayerStartupTime() const {
    return m_player_startup_time;
}
void OAIVideoView::setPlayerStartupTime(const qint64 &player_startup_time) {
    m_player_startup_time = player_startup_time;
    m_player_startup_time_isSet = true;
}

bool OAIVideoView::is_player_startup_time_Set() const{
    return m_player_startup_time_isSet;
}

bool OAIVideoView::is_player_startup_time_Valid() const{
    return m_player_startup_time_isValid;
}

QString OAIVideoView::getPlayerVersion() const {
    return m_player_version;
}
void OAIVideoView::setPlayerVersion(const QString &player_version) {
    m_player_version = player_version;
    m_player_version_isSet = true;
}

bool OAIVideoView::is_player_version_Set() const{
    return m_player_version_isSet;
}

bool OAIVideoView::is_player_version_Valid() const{
    return m_player_version_isValid;
}

qint64 OAIVideoView::getPlayerViewCount() const {
    return m_player_view_count;
}
void OAIVideoView::setPlayerViewCount(const qint64 &player_view_count) {
    m_player_view_count = player_view_count;
    m_player_view_count_isSet = true;
}

bool OAIVideoView::is_player_view_count_Set() const{
    return m_player_view_count_isSet;
}

bool OAIVideoView::is_player_view_count_Valid() const{
    return m_player_view_count_isValid;
}

qint32 OAIVideoView::getPlayerWidth() const {
    return m_player_width;
}
void OAIVideoView::setPlayerWidth(const qint32 &player_width) {
    m_player_width = player_width;
    m_player_width_isSet = true;
}

bool OAIVideoView::is_player_width_Set() const{
    return m_player_width_isSet;
}

bool OAIVideoView::is_player_width_Valid() const{
    return m_player_width_isValid;
}

QString OAIVideoView::getPrerollAdAssetHostname() const {
    return m_preroll_ad_asset_hostname;
}
void OAIVideoView::setPrerollAdAssetHostname(const QString &preroll_ad_asset_hostname) {
    m_preroll_ad_asset_hostname = preroll_ad_asset_hostname;
    m_preroll_ad_asset_hostname_isSet = true;
}

bool OAIVideoView::is_preroll_ad_asset_hostname_Set() const{
    return m_preroll_ad_asset_hostname_isSet;
}

bool OAIVideoView::is_preroll_ad_asset_hostname_Valid() const{
    return m_preroll_ad_asset_hostname_isValid;
}

QString OAIVideoView::getPrerollAdTagHostname() const {
    return m_preroll_ad_tag_hostname;
}
void OAIVideoView::setPrerollAdTagHostname(const QString &preroll_ad_tag_hostname) {
    m_preroll_ad_tag_hostname = preroll_ad_tag_hostname;
    m_preroll_ad_tag_hostname_isSet = true;
}

bool OAIVideoView::is_preroll_ad_tag_hostname_Set() const{
    return m_preroll_ad_tag_hostname_isSet;
}

bool OAIVideoView::is_preroll_ad_tag_hostname_Valid() const{
    return m_preroll_ad_tag_hostname_isValid;
}

bool OAIVideoView::isPrerollPlayed() const {
    return m_preroll_played;
}
void OAIVideoView::setPrerollPlayed(const bool &preroll_played) {
    m_preroll_played = preroll_played;
    m_preroll_played_isSet = true;
}

bool OAIVideoView::is_preroll_played_Set() const{
    return m_preroll_played_isSet;
}

bool OAIVideoView::is_preroll_played_Valid() const{
    return m_preroll_played_isValid;
}

bool OAIVideoView::isPrerollRequested() const {
    return m_preroll_requested;
}
void OAIVideoView::setPrerollRequested(const bool &preroll_requested) {
    m_preroll_requested = preroll_requested;
    m_preroll_requested_isSet = true;
}

bool OAIVideoView::is_preroll_requested_Set() const{
    return m_preroll_requested_isSet;
}

bool OAIVideoView::is_preroll_requested_Valid() const{
    return m_preroll_requested_isValid;
}

qint64 OAIVideoView::getPropertyId() const {
    return m_property_id;
}
void OAIVideoView::setPropertyId(const qint64 &property_id) {
    m_property_id = property_id;
    m_property_id_isSet = true;
}

bool OAIVideoView::is_property_id_Set() const{
    return m_property_id_isSet;
}

bool OAIVideoView::is_property_id_Valid() const{
    return m_property_id_isValid;
}

QString OAIVideoView::getQualityScore() const {
    return m_quality_score;
}
void OAIVideoView::setQualityScore(const QString &quality_score) {
    m_quality_score = quality_score;
    m_quality_score_isSet = true;
}

bool OAIVideoView::is_quality_score_Set() const{
    return m_quality_score_isSet;
}

bool OAIVideoView::is_quality_score_Valid() const{
    return m_quality_score_isValid;
}

QString OAIVideoView::getRebufferPercentage() const {
    return m_rebuffer_percentage;
}
void OAIVideoView::setRebufferPercentage(const QString &rebuffer_percentage) {
    m_rebuffer_percentage = rebuffer_percentage;
    m_rebuffer_percentage_isSet = true;
}

bool OAIVideoView::is_rebuffer_percentage_Set() const{
    return m_rebuffer_percentage_isSet;
}

bool OAIVideoView::is_rebuffer_percentage_Valid() const{
    return m_rebuffer_percentage_isValid;
}

QString OAIVideoView::getRebufferingScore() const {
    return m_rebuffering_score;
}
void OAIVideoView::setRebufferingScore(const QString &rebuffering_score) {
    m_rebuffering_score = rebuffering_score;
    m_rebuffering_score_isSet = true;
}

bool OAIVideoView::is_rebuffering_score_Set() const{
    return m_rebuffering_score_isSet;
}

bool OAIVideoView::is_rebuffering_score_Valid() const{
    return m_rebuffering_score_isValid;
}

QString OAIVideoView::getRegion() const {
    return m_region;
}
void OAIVideoView::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIVideoView::is_region_Set() const{
    return m_region_isSet;
}

bool OAIVideoView::is_region_Valid() const{
    return m_region_isValid;
}

qint64 OAIVideoView::getRequestsForFirstPreroll() const {
    return m_requests_for_first_preroll;
}
void OAIVideoView::setRequestsForFirstPreroll(const qint64 &requests_for_first_preroll) {
    m_requests_for_first_preroll = requests_for_first_preroll;
    m_requests_for_first_preroll_isSet = true;
}

bool OAIVideoView::is_requests_for_first_preroll_Set() const{
    return m_requests_for_first_preroll_isSet;
}

bool OAIVideoView::is_requests_for_first_preroll_Valid() const{
    return m_requests_for_first_preroll_isValid;
}

QString OAIVideoView::getSessionId() const {
    return m_session_id;
}
void OAIVideoView::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIVideoView::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIVideoView::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QString OAIVideoView::getShortTime() const {
    return m_short_time;
}
void OAIVideoView::setShortTime(const QString &short_time) {
    m_short_time = short_time;
    m_short_time_isSet = true;
}

bool OAIVideoView::is_short_time_Set() const{
    return m_short_time_isSet;
}

bool OAIVideoView::is_short_time_Valid() const{
    return m_short_time_isValid;
}

QString OAIVideoView::getStartupScore() const {
    return m_startup_score;
}
void OAIVideoView::setStartupScore(const QString &startup_score) {
    m_startup_score = startup_score;
    m_startup_score_isSet = true;
}

bool OAIVideoView::is_startup_score_Set() const{
    return m_startup_score_isSet;
}

bool OAIVideoView::is_startup_score_Valid() const{
    return m_startup_score_isValid;
}

QString OAIVideoView::getSubPropertyId() const {
    return m_sub_property_id;
}
void OAIVideoView::setSubPropertyId(const QString &sub_property_id) {
    m_sub_property_id = sub_property_id;
    m_sub_property_id_isSet = true;
}

bool OAIVideoView::is_sub_property_id_Set() const{
    return m_sub_property_id_isSet;
}

bool OAIVideoView::is_sub_property_id_Valid() const{
    return m_sub_property_id_isValid;
}

qint64 OAIVideoView::getTimeToFirstFrame() const {
    return m_time_to_first_frame;
}
void OAIVideoView::setTimeToFirstFrame(const qint64 &time_to_first_frame) {
    m_time_to_first_frame = time_to_first_frame;
    m_time_to_first_frame_isSet = true;
}

bool OAIVideoView::is_time_to_first_frame_Set() const{
    return m_time_to_first_frame_isSet;
}

bool OAIVideoView::is_time_to_first_frame_Valid() const{
    return m_time_to_first_frame_isValid;
}

QString OAIVideoView::getUpdatedAt() const {
    return m_updated_at;
}
void OAIVideoView::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIVideoView::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIVideoView::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIVideoView::isUsedFullscreen() const {
    return m_used_fullscreen;
}
void OAIVideoView::setUsedFullscreen(const bool &used_fullscreen) {
    m_used_fullscreen = used_fullscreen;
    m_used_fullscreen_isSet = true;
}

bool OAIVideoView::is_used_fullscreen_Set() const{
    return m_used_fullscreen_isSet;
}

bool OAIVideoView::is_used_fullscreen_Valid() const{
    return m_used_fullscreen_isValid;
}

QString OAIVideoView::getVideoContentType() const {
    return m_video_content_type;
}
void OAIVideoView::setVideoContentType(const QString &video_content_type) {
    m_video_content_type = video_content_type;
    m_video_content_type_isSet = true;
}

bool OAIVideoView::is_video_content_type_Set() const{
    return m_video_content_type_isSet;
}

bool OAIVideoView::is_video_content_type_Valid() const{
    return m_video_content_type_isValid;
}

qint64 OAIVideoView::getVideoDuration() const {
    return m_video_duration;
}
void OAIVideoView::setVideoDuration(const qint64 &video_duration) {
    m_video_duration = video_duration;
    m_video_duration_isSet = true;
}

bool OAIVideoView::is_video_duration_Set() const{
    return m_video_duration_isSet;
}

bool OAIVideoView::is_video_duration_Valid() const{
    return m_video_duration_isValid;
}

QString OAIVideoView::getVideoEncodingVariant() const {
    return m_video_encoding_variant;
}
void OAIVideoView::setVideoEncodingVariant(const QString &video_encoding_variant) {
    m_video_encoding_variant = video_encoding_variant;
    m_video_encoding_variant_isSet = true;
}

bool OAIVideoView::is_video_encoding_variant_Set() const{
    return m_video_encoding_variant_isSet;
}

bool OAIVideoView::is_video_encoding_variant_Valid() const{
    return m_video_encoding_variant_isValid;
}

QString OAIVideoView::getVideoId() const {
    return m_video_id;
}
void OAIVideoView::setVideoId(const QString &video_id) {
    m_video_id = video_id;
    m_video_id_isSet = true;
}

bool OAIVideoView::is_video_id_Set() const{
    return m_video_id_isSet;
}

bool OAIVideoView::is_video_id_Valid() const{
    return m_video_id_isValid;
}

QString OAIVideoView::getVideoLanguage() const {
    return m_video_language;
}
void OAIVideoView::setVideoLanguage(const QString &video_language) {
    m_video_language = video_language;
    m_video_language_isSet = true;
}

bool OAIVideoView::is_video_language_Set() const{
    return m_video_language_isSet;
}

bool OAIVideoView::is_video_language_Valid() const{
    return m_video_language_isValid;
}

QString OAIVideoView::getVideoProducer() const {
    return m_video_producer;
}
void OAIVideoView::setVideoProducer(const QString &video_producer) {
    m_video_producer = video_producer;
    m_video_producer_isSet = true;
}

bool OAIVideoView::is_video_producer_Set() const{
    return m_video_producer_isSet;
}

bool OAIVideoView::is_video_producer_Valid() const{
    return m_video_producer_isValid;
}

QString OAIVideoView::getVideoSeries() const {
    return m_video_series;
}
void OAIVideoView::setVideoSeries(const QString &video_series) {
    m_video_series = video_series;
    m_video_series_isSet = true;
}

bool OAIVideoView::is_video_series_Set() const{
    return m_video_series_isSet;
}

bool OAIVideoView::is_video_series_Valid() const{
    return m_video_series_isValid;
}

bool OAIVideoView::isVideoStartupFailure() const {
    return m_video_startup_failure;
}
void OAIVideoView::setVideoStartupFailure(const bool &video_startup_failure) {
    m_video_startup_failure = video_startup_failure;
    m_video_startup_failure_isSet = true;
}

bool OAIVideoView::is_video_startup_failure_Set() const{
    return m_video_startup_failure_isSet;
}

bool OAIVideoView::is_video_startup_failure_Valid() const{
    return m_video_startup_failure_isValid;
}

qint64 OAIVideoView::getVideoStartupPrerollLoadTime() const {
    return m_video_startup_preroll_load_time;
}
void OAIVideoView::setVideoStartupPrerollLoadTime(const qint64 &video_startup_preroll_load_time) {
    m_video_startup_preroll_load_time = video_startup_preroll_load_time;
    m_video_startup_preroll_load_time_isSet = true;
}

bool OAIVideoView::is_video_startup_preroll_load_time_Set() const{
    return m_video_startup_preroll_load_time_isSet;
}

bool OAIVideoView::is_video_startup_preroll_load_time_Valid() const{
    return m_video_startup_preroll_load_time_isValid;
}

qint64 OAIVideoView::getVideoStartupPrerollRequestTime() const {
    return m_video_startup_preroll_request_time;
}
void OAIVideoView::setVideoStartupPrerollRequestTime(const qint64 &video_startup_preroll_request_time) {
    m_video_startup_preroll_request_time = video_startup_preroll_request_time;
    m_video_startup_preroll_request_time_isSet = true;
}

bool OAIVideoView::is_video_startup_preroll_request_time_Set() const{
    return m_video_startup_preroll_request_time_isSet;
}

bool OAIVideoView::is_video_startup_preroll_request_time_Valid() const{
    return m_video_startup_preroll_request_time_isValid;
}

QString OAIVideoView::getVideoStreamType() const {
    return m_video_stream_type;
}
void OAIVideoView::setVideoStreamType(const QString &video_stream_type) {
    m_video_stream_type = video_stream_type;
    m_video_stream_type_isSet = true;
}

bool OAIVideoView::is_video_stream_type_Set() const{
    return m_video_stream_type_isSet;
}

bool OAIVideoView::is_video_stream_type_Valid() const{
    return m_video_stream_type_isValid;
}

QString OAIVideoView::getVideoTitle() const {
    return m_video_title;
}
void OAIVideoView::setVideoTitle(const QString &video_title) {
    m_video_title = video_title;
    m_video_title_isSet = true;
}

bool OAIVideoView::is_video_title_Set() const{
    return m_video_title_isSet;
}

bool OAIVideoView::is_video_title_Valid() const{
    return m_video_title_isValid;
}

QString OAIVideoView::getVideoVariantId() const {
    return m_video_variant_id;
}
void OAIVideoView::setVideoVariantId(const QString &video_variant_id) {
    m_video_variant_id = video_variant_id;
    m_video_variant_id_isSet = true;
}

bool OAIVideoView::is_video_variant_id_Set() const{
    return m_video_variant_id_isSet;
}

bool OAIVideoView::is_video_variant_id_Valid() const{
    return m_video_variant_id_isValid;
}

QString OAIVideoView::getVideoVariantName() const {
    return m_video_variant_name;
}
void OAIVideoView::setVideoVariantName(const QString &video_variant_name) {
    m_video_variant_name = video_variant_name;
    m_video_variant_name_isSet = true;
}

bool OAIVideoView::is_video_variant_name_Set() const{
    return m_video_variant_name_isSet;
}

bool OAIVideoView::is_video_variant_name_Valid() const{
    return m_video_variant_name_isValid;
}

qint64 OAIVideoView::getViewAverageRequestLatency() const {
    return m_view_average_request_latency;
}
void OAIVideoView::setViewAverageRequestLatency(const qint64 &view_average_request_latency) {
    m_view_average_request_latency = view_average_request_latency;
    m_view_average_request_latency_isSet = true;
}

bool OAIVideoView::is_view_average_request_latency_Set() const{
    return m_view_average_request_latency_isSet;
}

bool OAIVideoView::is_view_average_request_latency_Valid() const{
    return m_view_average_request_latency_isValid;
}

qint64 OAIVideoView::getViewAverageRequestThroughput() const {
    return m_view_average_request_throughput;
}
void OAIVideoView::setViewAverageRequestThroughput(const qint64 &view_average_request_throughput) {
    m_view_average_request_throughput = view_average_request_throughput;
    m_view_average_request_throughput_isSet = true;
}

bool OAIVideoView::is_view_average_request_throughput_Set() const{
    return m_view_average_request_throughput_isSet;
}

bool OAIVideoView::is_view_average_request_throughput_Valid() const{
    return m_view_average_request_throughput_isValid;
}

QString OAIVideoView::getViewDrmType() const {
    return m_view_drm_type;
}
void OAIVideoView::setViewDrmType(const QString &view_drm_type) {
    m_view_drm_type = view_drm_type;
    m_view_drm_type_isSet = true;
}

bool OAIVideoView::is_view_drm_type_Set() const{
    return m_view_drm_type_isSet;
}

bool OAIVideoView::is_view_drm_type_Valid() const{
    return m_view_drm_type_isValid;
}

qint64 OAIVideoView::getViewDroppedFrameCount() const {
    return m_view_dropped_frame_count;
}
void OAIVideoView::setViewDroppedFrameCount(const qint64 &view_dropped_frame_count) {
    m_view_dropped_frame_count = view_dropped_frame_count;
    m_view_dropped_frame_count_isSet = true;
}

bool OAIVideoView::is_view_dropped_frame_count_Set() const{
    return m_view_dropped_frame_count_isSet;
}

bool OAIVideoView::is_view_dropped_frame_count_Valid() const{
    return m_view_dropped_frame_count_isValid;
}

QString OAIVideoView::getViewEnd() const {
    return m_view_end;
}
void OAIVideoView::setViewEnd(const QString &view_end) {
    m_view_end = view_end;
    m_view_end_isSet = true;
}

bool OAIVideoView::is_view_end_Set() const{
    return m_view_end_isSet;
}

bool OAIVideoView::is_view_end_Valid() const{
    return m_view_end_isValid;
}

qint32 OAIVideoView::getViewErrorId() const {
    return m_view_error_id;
}
void OAIVideoView::setViewErrorId(const qint32 &view_error_id) {
    m_view_error_id = view_error_id;
    m_view_error_id_isSet = true;
}

bool OAIVideoView::is_view_error_id_Set() const{
    return m_view_error_id_isSet;
}

bool OAIVideoView::is_view_error_id_Valid() const{
    return m_view_error_id_isValid;
}

bool OAIVideoView::isViewHasAd() const {
    return m_view_has_ad;
}
void OAIVideoView::setViewHasAd(const bool &view_has_ad) {
    m_view_has_ad = view_has_ad;
    m_view_has_ad_isSet = true;
}

bool OAIVideoView::is_view_has_ad_Set() const{
    return m_view_has_ad_isSet;
}

bool OAIVideoView::is_view_has_ad_Valid() const{
    return m_view_has_ad_isValid;
}

QString OAIVideoView::getViewId() const {
    return m_view_id;
}
void OAIVideoView::setViewId(const QString &view_id) {
    m_view_id = view_id;
    m_view_id_isSet = true;
}

bool OAIVideoView::is_view_id_Set() const{
    return m_view_id_isSet;
}

bool OAIVideoView::is_view_id_Valid() const{
    return m_view_id_isValid;
}

QString OAIVideoView::getViewMaxDownscalePercentage() const {
    return m_view_max_downscale_percentage;
}
void OAIVideoView::setViewMaxDownscalePercentage(const QString &view_max_downscale_percentage) {
    m_view_max_downscale_percentage = view_max_downscale_percentage;
    m_view_max_downscale_percentage_isSet = true;
}

bool OAIVideoView::is_view_max_downscale_percentage_Set() const{
    return m_view_max_downscale_percentage_isSet;
}

bool OAIVideoView::is_view_max_downscale_percentage_Valid() const{
    return m_view_max_downscale_percentage_isValid;
}

QString OAIVideoView::getViewMaxPlayheadPosition() const {
    return m_view_max_playhead_position;
}
void OAIVideoView::setViewMaxPlayheadPosition(const QString &view_max_playhead_position) {
    m_view_max_playhead_position = view_max_playhead_position;
    m_view_max_playhead_position_isSet = true;
}

bool OAIVideoView::is_view_max_playhead_position_Set() const{
    return m_view_max_playhead_position_isSet;
}

bool OAIVideoView::is_view_max_playhead_position_Valid() const{
    return m_view_max_playhead_position_isValid;
}

qint64 OAIVideoView::getViewMaxRequestLatency() const {
    return m_view_max_request_latency;
}
void OAIVideoView::setViewMaxRequestLatency(const qint64 &view_max_request_latency) {
    m_view_max_request_latency = view_max_request_latency;
    m_view_max_request_latency_isSet = true;
}

bool OAIVideoView::is_view_max_request_latency_Set() const{
    return m_view_max_request_latency_isSet;
}

bool OAIVideoView::is_view_max_request_latency_Valid() const{
    return m_view_max_request_latency_isValid;
}

QString OAIVideoView::getViewMaxUpscalePercentage() const {
    return m_view_max_upscale_percentage;
}
void OAIVideoView::setViewMaxUpscalePercentage(const QString &view_max_upscale_percentage) {
    m_view_max_upscale_percentage = view_max_upscale_percentage;
    m_view_max_upscale_percentage_isSet = true;
}

bool OAIVideoView::is_view_max_upscale_percentage_Set() const{
    return m_view_max_upscale_percentage_isSet;
}

bool OAIVideoView::is_view_max_upscale_percentage_Valid() const{
    return m_view_max_upscale_percentage_isValid;
}

QString OAIVideoView::getViewPlayingTime() const {
    return m_view_playing_time;
}
void OAIVideoView::setViewPlayingTime(const QString &view_playing_time) {
    m_view_playing_time = view_playing_time;
    m_view_playing_time_isSet = true;
}

bool OAIVideoView::is_view_playing_time_Set() const{
    return m_view_playing_time_isSet;
}

bool OAIVideoView::is_view_playing_time_Valid() const{
    return m_view_playing_time_isValid;
}

qint64 OAIVideoView::getViewSeekCount() const {
    return m_view_seek_count;
}
void OAIVideoView::setViewSeekCount(const qint64 &view_seek_count) {
    m_view_seek_count = view_seek_count;
    m_view_seek_count_isSet = true;
}

bool OAIVideoView::is_view_seek_count_Set() const{
    return m_view_seek_count_isSet;
}

bool OAIVideoView::is_view_seek_count_Valid() const{
    return m_view_seek_count_isValid;
}

qint64 OAIVideoView::getViewSeekDuration() const {
    return m_view_seek_duration;
}
void OAIVideoView::setViewSeekDuration(const qint64 &view_seek_duration) {
    m_view_seek_duration = view_seek_duration;
    m_view_seek_duration_isSet = true;
}

bool OAIVideoView::is_view_seek_duration_Set() const{
    return m_view_seek_duration_isSet;
}

bool OAIVideoView::is_view_seek_duration_Valid() const{
    return m_view_seek_duration_isValid;
}

QString OAIVideoView::getViewSessionId() const {
    return m_view_session_id;
}
void OAIVideoView::setViewSessionId(const QString &view_session_id) {
    m_view_session_id = view_session_id;
    m_view_session_id_isSet = true;
}

bool OAIVideoView::is_view_session_id_Set() const{
    return m_view_session_id_isSet;
}

bool OAIVideoView::is_view_session_id_Valid() const{
    return m_view_session_id_isValid;
}

QString OAIVideoView::getViewStart() const {
    return m_view_start;
}
void OAIVideoView::setViewStart(const QString &view_start) {
    m_view_start = view_start;
    m_view_start_isSet = true;
}

bool OAIVideoView::is_view_start_Set() const{
    return m_view_start_isSet;
}

bool OAIVideoView::is_view_start_Valid() const{
    return m_view_start_isValid;
}

qint64 OAIVideoView::getViewTotalContentPlaybackTime() const {
    return m_view_total_content_playback_time;
}
void OAIVideoView::setViewTotalContentPlaybackTime(const qint64 &view_total_content_playback_time) {
    m_view_total_content_playback_time = view_total_content_playback_time;
    m_view_total_content_playback_time_isSet = true;
}

bool OAIVideoView::is_view_total_content_playback_time_Set() const{
    return m_view_total_content_playback_time_isSet;
}

bool OAIVideoView::is_view_total_content_playback_time_Valid() const{
    return m_view_total_content_playback_time_isValid;
}

QString OAIVideoView::getViewTotalDownscaling() const {
    return m_view_total_downscaling;
}
void OAIVideoView::setViewTotalDownscaling(const QString &view_total_downscaling) {
    m_view_total_downscaling = view_total_downscaling;
    m_view_total_downscaling_isSet = true;
}

bool OAIVideoView::is_view_total_downscaling_Set() const{
    return m_view_total_downscaling_isSet;
}

bool OAIVideoView::is_view_total_downscaling_Valid() const{
    return m_view_total_downscaling_isValid;
}

QString OAIVideoView::getViewTotalUpscaling() const {
    return m_view_total_upscaling;
}
void OAIVideoView::setViewTotalUpscaling(const QString &view_total_upscaling) {
    m_view_total_upscaling = view_total_upscaling;
    m_view_total_upscaling_isSet = true;
}

bool OAIVideoView::is_view_total_upscaling_Set() const{
    return m_view_total_upscaling_isSet;
}

bool OAIVideoView::is_view_total_upscaling_Valid() const{
    return m_view_total_upscaling_isValid;
}

QString OAIVideoView::getViewerApplicationEngine() const {
    return m_viewer_application_engine;
}
void OAIVideoView::setViewerApplicationEngine(const QString &viewer_application_engine) {
    m_viewer_application_engine = viewer_application_engine;
    m_viewer_application_engine_isSet = true;
}

bool OAIVideoView::is_viewer_application_engine_Set() const{
    return m_viewer_application_engine_isSet;
}

bool OAIVideoView::is_viewer_application_engine_Valid() const{
    return m_viewer_application_engine_isValid;
}

QString OAIVideoView::getViewerApplicationName() const {
    return m_viewer_application_name;
}
void OAIVideoView::setViewerApplicationName(const QString &viewer_application_name) {
    m_viewer_application_name = viewer_application_name;
    m_viewer_application_name_isSet = true;
}

bool OAIVideoView::is_viewer_application_name_Set() const{
    return m_viewer_application_name_isSet;
}

bool OAIVideoView::is_viewer_application_name_Valid() const{
    return m_viewer_application_name_isValid;
}

QString OAIVideoView::getViewerApplicationVersion() const {
    return m_viewer_application_version;
}
void OAIVideoView::setViewerApplicationVersion(const QString &viewer_application_version) {
    m_viewer_application_version = viewer_application_version;
    m_viewer_application_version_isSet = true;
}

bool OAIVideoView::is_viewer_application_version_Set() const{
    return m_viewer_application_version_isSet;
}

bool OAIVideoView::is_viewer_application_version_Valid() const{
    return m_viewer_application_version_isValid;
}

QString OAIVideoView::getViewerConnectionType() const {
    return m_viewer_connection_type;
}
void OAIVideoView::setViewerConnectionType(const QString &viewer_connection_type) {
    m_viewer_connection_type = viewer_connection_type;
    m_viewer_connection_type_isSet = true;
}

bool OAIVideoView::is_viewer_connection_type_Set() const{
    return m_viewer_connection_type_isSet;
}

bool OAIVideoView::is_viewer_connection_type_Valid() const{
    return m_viewer_connection_type_isValid;
}

QString OAIVideoView::getViewerDeviceCategory() const {
    return m_viewer_device_category;
}
void OAIVideoView::setViewerDeviceCategory(const QString &viewer_device_category) {
    m_viewer_device_category = viewer_device_category;
    m_viewer_device_category_isSet = true;
}

bool OAIVideoView::is_viewer_device_category_Set() const{
    return m_viewer_device_category_isSet;
}

bool OAIVideoView::is_viewer_device_category_Valid() const{
    return m_viewer_device_category_isValid;
}

QString OAIVideoView::getViewerDeviceManufacturer() const {
    return m_viewer_device_manufacturer;
}
void OAIVideoView::setViewerDeviceManufacturer(const QString &viewer_device_manufacturer) {
    m_viewer_device_manufacturer = viewer_device_manufacturer;
    m_viewer_device_manufacturer_isSet = true;
}

bool OAIVideoView::is_viewer_device_manufacturer_Set() const{
    return m_viewer_device_manufacturer_isSet;
}

bool OAIVideoView::is_viewer_device_manufacturer_Valid() const{
    return m_viewer_device_manufacturer_isValid;
}

QString OAIVideoView::getViewerDeviceModel() const {
    return m_viewer_device_model;
}
void OAIVideoView::setViewerDeviceModel(const QString &viewer_device_model) {
    m_viewer_device_model = viewer_device_model;
    m_viewer_device_model_isSet = true;
}

bool OAIVideoView::is_viewer_device_model_Set() const{
    return m_viewer_device_model_isSet;
}

bool OAIVideoView::is_viewer_device_model_Valid() const{
    return m_viewer_device_model_isValid;
}

QString OAIVideoView::getViewerDeviceName() const {
    return m_viewer_device_name;
}
void OAIVideoView::setViewerDeviceName(const QString &viewer_device_name) {
    m_viewer_device_name = viewer_device_name;
    m_viewer_device_name_isSet = true;
}

bool OAIVideoView::is_viewer_device_name_Set() const{
    return m_viewer_device_name_isSet;
}

bool OAIVideoView::is_viewer_device_name_Valid() const{
    return m_viewer_device_name_isValid;
}

QString OAIVideoView::getViewerExperienceScore() const {
    return m_viewer_experience_score;
}
void OAIVideoView::setViewerExperienceScore(const QString &viewer_experience_score) {
    m_viewer_experience_score = viewer_experience_score;
    m_viewer_experience_score_isSet = true;
}

bool OAIVideoView::is_viewer_experience_score_Set() const{
    return m_viewer_experience_score_isSet;
}

bool OAIVideoView::is_viewer_experience_score_Valid() const{
    return m_viewer_experience_score_isValid;
}

QString OAIVideoView::getViewerOsArchitecture() const {
    return m_viewer_os_architecture;
}
void OAIVideoView::setViewerOsArchitecture(const QString &viewer_os_architecture) {
    m_viewer_os_architecture = viewer_os_architecture;
    m_viewer_os_architecture_isSet = true;
}

bool OAIVideoView::is_viewer_os_architecture_Set() const{
    return m_viewer_os_architecture_isSet;
}

bool OAIVideoView::is_viewer_os_architecture_Valid() const{
    return m_viewer_os_architecture_isValid;
}

QString OAIVideoView::getViewerOsFamily() const {
    return m_viewer_os_family;
}
void OAIVideoView::setViewerOsFamily(const QString &viewer_os_family) {
    m_viewer_os_family = viewer_os_family;
    m_viewer_os_family_isSet = true;
}

bool OAIVideoView::is_viewer_os_family_Set() const{
    return m_viewer_os_family_isSet;
}

bool OAIVideoView::is_viewer_os_family_Valid() const{
    return m_viewer_os_family_isValid;
}

QString OAIVideoView::getViewerOsVersion() const {
    return m_viewer_os_version;
}
void OAIVideoView::setViewerOsVersion(const QString &viewer_os_version) {
    m_viewer_os_version = viewer_os_version;
    m_viewer_os_version_isSet = true;
}

bool OAIVideoView::is_viewer_os_version_Set() const{
    return m_viewer_os_version_isSet;
}

bool OAIVideoView::is_viewer_os_version_Valid() const{
    return m_viewer_os_version_isValid;
}

QString OAIVideoView::getViewerUserAgent() const {
    return m_viewer_user_agent;
}
void OAIVideoView::setViewerUserAgent(const QString &viewer_user_agent) {
    m_viewer_user_agent = viewer_user_agent;
    m_viewer_user_agent_isSet = true;
}

bool OAIVideoView::is_viewer_user_agent_Set() const{
    return m_viewer_user_agent_isSet;
}

bool OAIVideoView::is_viewer_user_agent_Valid() const{
    return m_viewer_user_agent_isValid;
}

QString OAIVideoView::getViewerUserId() const {
    return m_viewer_user_id;
}
void OAIVideoView::setViewerUserId(const QString &viewer_user_id) {
    m_viewer_user_id = viewer_user_id;
    m_viewer_user_id_isSet = true;
}

bool OAIVideoView::is_viewer_user_id_Set() const{
    return m_viewer_user_id_isSet;
}

bool OAIVideoView::is_viewer_user_id_Valid() const{
    return m_viewer_user_id_isValid;
}

qint64 OAIVideoView::getWatchTime() const {
    return m_watch_time;
}
void OAIVideoView::setWatchTime(const qint64 &watch_time) {
    m_watch_time = watch_time;
    m_watch_time_isSet = true;
}

bool OAIVideoView::is_watch_time_Set() const{
    return m_watch_time_isSet;
}

bool OAIVideoView::is_watch_time_Valid() const{
    return m_watch_time_isValid;
}

bool OAIVideoView::isWatched() const {
    return m_watched;
}
void OAIVideoView::setWatched(const bool &watched) {
    m_watched = watched;
    m_watched_isSet = true;
}

bool OAIVideoView::is_watched_Set() const{
    return m_watched_isSet;
}

bool OAIVideoView::is_watched_Valid() const{
    return m_watched_isValid;
}

qint64 OAIVideoView::getWeightedAverageBitrate() const {
    return m_weighted_average_bitrate;
}
void OAIVideoView::setWeightedAverageBitrate(const qint64 &weighted_average_bitrate) {
    m_weighted_average_bitrate = weighted_average_bitrate;
    m_weighted_average_bitrate_isSet = true;
}

bool OAIVideoView::is_weighted_average_bitrate_Set() const{
    return m_weighted_average_bitrate_isSet;
}

bool OAIVideoView::is_weighted_average_bitrate_Valid() const{
    return m_weighted_average_bitrate_isValid;
}

bool OAIVideoView::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asn_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buffering_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buffering_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buffering_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_continent_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_10_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_6_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_7_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_8_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_9_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exit_before_video_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_experiment_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inserted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_stream_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metro_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mux_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mux_embed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mux_embed_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mux_viewer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_load_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_autoplay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_error_context_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_load_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_mux_plugin_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_mux_plugin_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_poster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_preload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_remote_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_software_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_software_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_source_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_source_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_source_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_source_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_source_stream_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_source_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_startup_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_view_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preroll_ad_asset_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preroll_ad_tag_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preroll_played_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preroll_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rebuffer_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rebuffering_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requests_for_first_preroll_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_startup_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_property_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_first_frame_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_fullscreen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_encoding_variant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_producer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_series_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_startup_failure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_startup_preroll_load_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_startup_preroll_request_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_stream_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_variant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_variant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_average_request_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_average_request_throughput_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_drm_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_dropped_frame_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_error_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_has_ad_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_max_downscale_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_max_playhead_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_max_request_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_max_upscale_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_playing_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_seek_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_seek_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_total_content_playback_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_total_downscaling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_total_upscaling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_application_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_application_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_connection_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_device_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_device_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_device_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_experience_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_os_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_os_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewer_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watch_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watched_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weighted_average_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoView::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
