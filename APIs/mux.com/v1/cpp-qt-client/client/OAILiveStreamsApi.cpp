/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILiveStreamsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAILiveStreamsApi::OAILiveStreamsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAILiveStreamsApi::~OAILiveStreamsApi() {
}

void OAILiveStreamsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.mux.com"),
    "Mux Production Environment",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("createLiveStream", defaultConf);
    _serverIndices.insert("createLiveStream", 0);
    _serverConfigs.insert("createLiveStreamPlaybackId", defaultConf);
    _serverIndices.insert("createLiveStreamPlaybackId", 0);
    _serverConfigs.insert("createLiveStreamSimulcastTarget", defaultConf);
    _serverIndices.insert("createLiveStreamSimulcastTarget", 0);
    _serverConfigs.insert("deleteLiveStream", defaultConf);
    _serverIndices.insert("deleteLiveStream", 0);
    _serverConfigs.insert("deleteLiveStreamPlaybackId", defaultConf);
    _serverIndices.insert("deleteLiveStreamPlaybackId", 0);
    _serverConfigs.insert("deleteLiveStreamSimulcastTarget", defaultConf);
    _serverIndices.insert("deleteLiveStreamSimulcastTarget", 0);
    _serverConfigs.insert("disableLiveStream", defaultConf);
    _serverIndices.insert("disableLiveStream", 0);
    _serverConfigs.insert("enableLiveStream", defaultConf);
    _serverIndices.insert("enableLiveStream", 0);
    _serverConfigs.insert("getLiveStream", defaultConf);
    _serverIndices.insert("getLiveStream", 0);
    _serverConfigs.insert("getLiveStreamPlaybackId", defaultConf);
    _serverIndices.insert("getLiveStreamPlaybackId", 0);
    _serverConfigs.insert("getLiveStreamSimulcastTarget", defaultConf);
    _serverIndices.insert("getLiveStreamSimulcastTarget", 0);
    _serverConfigs.insert("listLiveStreams", defaultConf);
    _serverIndices.insert("listLiveStreams", 0);
    _serverConfigs.insert("resetStreamKey", defaultConf);
    _serverIndices.insert("resetStreamKey", 0);
    _serverConfigs.insert("signalLiveStreamComplete", defaultConf);
    _serverIndices.insert("signalLiveStreamComplete", 0);
    _serverConfigs.insert("updateLiveStream", defaultConf);
    _serverIndices.insert("updateLiveStream", 0);
    _serverConfigs.insert("updateLiveStreamEmbeddedSubtitles", defaultConf);
    _serverIndices.insert("updateLiveStreamEmbeddedSubtitles", 0);
    _serverConfigs.insert("updateLiveStreamGeneratedSubtitles", defaultConf);
    _serverIndices.insert("updateLiveStreamGeneratedSubtitles", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAILiveStreamsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAILiveStreamsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAILiveStreamsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAILiveStreamsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAILiveStreamsApi::setUsername(const QString &username) {
    _username = username;
}

void OAILiveStreamsApi::setPassword(const QString &password) {
    _password = password;
}


void OAILiveStreamsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAILiveStreamsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAILiveStreamsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAILiveStreamsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAILiveStreamsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAILiveStreamsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAILiveStreamsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAILiveStreamsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAILiveStreamsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAILiveStreamsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAILiveStreamsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAILiveStreamsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAILiveStreamsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAILiveStreamsApi::createLiveStream(const OAICreateLiveStreamRequest &oai_create_live_stream_request) {
    QString fullPath = QString(_serverConfigs["createLiveStream"][_serverIndices.value("createLiveStream")].URL()+"/video/v1/live-streams");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_create_live_stream_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILiveStreamsApi::createLiveStreamCallback);
    connect(this, &OAILiveStreamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILiveStreamsApi::createLiveStreamCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILiveStreamResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createLiveStreamSignal(output);
        Q_EMIT createLiveStreamSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createLiveStreamSignalE(output, error_type, error_str);
        Q_EMIT createLiveStreamSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createLiveStreamSignalError(output, error_type, error_str);
        Q_EMIT createLiveStreamSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILiveStreamsApi::createLiveStreamPlaybackId(const QString &live_stream_id, const OAICreatePlaybackIDRequest &oai_create_playback_id_request) {
    QString fullPath = QString(_serverConfigs["createLiveStreamPlaybackId"][_serverIndices.value("createLiveStreamPlaybackId")].URL()+"/video/v1/live-streams/{LIVE_STREAM_ID}/playback-ids");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString live_stream_idPathParam("{");
        live_stream_idPathParam.append("LIVE_STREAM_ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "LIVE_STREAM_ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"LIVE_STREAM_ID"+pathSuffix : pathPrefix;
        fullPath.replace(live_stream_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(live_stream_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_create_playback_id_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILiveStreamsApi::createLiveStreamPlaybackIdCallback);
    connect(this, &OAILiveStreamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILiveStreamsApi::createLiveStreamPlaybackIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICreatePlaybackIDResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createLiveStreamPlaybackIdSignal(output);
        Q_EMIT createLiveStreamPlaybackIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createLiveStreamPlaybackIdSignalE(output, error_type, error_str);
        Q_EMIT createLiveStreamPlaybackIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createLiveStreamPlaybackIdSignalError(output, error_type, error_str);
        Q_EMIT createLiveStreamPlaybackIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILiveStreamsApi::createLiveStreamSimulcastTarget(const QString &live_stream_id, const OAICreateSimulcastTargetRequest &oai_create_simulcast_target_request) {
    QString fullPath = QString(_serverConfigs["createLiveStreamSimulcastTarget"][_serverIndices.value("createLiveStreamSimulcastTarget")].URL()+"/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString live_stream_idPathParam("{");
        live_stream_idPathParam.append("LIVE_STREAM_ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "LIVE_STREAM_ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"LIVE_STREAM_ID"+pathSuffix : pathPrefix;
        fullPath.replace(live_stream_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(live_stream_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = oai_create_simulcast_target_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILiveStreamsApi::createLiveStreamSimulcastTargetCallback);
    connect(this, &OAILiveStreamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILiveStreamsApi::createLiveStreamSimulcastTargetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISimulcastTargetResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT createLiveStreamSimulcastTargetSignal(output);
        Q_EMIT createLiveStreamSimulcastTargetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT createLiveStreamSimulcastTargetSignalE(output, error_type, error_str);
        Q_EMIT createLiveStreamSimulcastTargetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT createLiveStreamSimulcastTargetSignalError(output, error_type, error_str);
        Q_EMIT createLiveStreamSimulcastTargetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILiveStreamsApi::deleteLiveStream(const QString &live_stream_id) {
    QString fullPath = QString(_serverConfigs["deleteLiveStream"][_serverIndices.value("deleteLiveStream")].URL()+"/video/v1/live-streams/{LIVE_STREAM_ID}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString live_stream_idPathParam("{");
        live_stream_idPathParam.append("LIVE_STREAM_ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "LIVE_STREAM_ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"LIVE_STREAM_ID"+pathSuffix : pathPrefix;
        fullPath.replace(live_stream_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(live_stream_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILiveStreamsApi::deleteLiveStreamCallback);
    connect(this, &OAILiveStreamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILiveStreamsApi::deleteLiveStreamCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteLiveStreamSignal();
        Q_EMIT deleteLiveStreamSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteLiveStreamSignalE(error_type, error_str);
        Q_EMIT deleteLiveStreamSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteLiveStreamSignalError(error_type, error_str);
        Q_EMIT deleteLiveStreamSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILiveStreamsApi::deleteLiveStreamPlaybackId(const QString &live_stream_id, const QString &playback_id) {
    QString fullPath = QString(_serverConfigs["deleteLiveStreamPlaybackId"][_serverIndices.value("deleteLiveStreamPlaybackId")].URL()+"/video/v1/live-streams/{LIVE_STREAM_ID}/playback-ids/{PLAYBACK_ID}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString live_stream_idPathParam("{");
        live_stream_idPathParam.append("LIVE_STREAM_ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "LIVE_STREAM_ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"LIVE_STREAM_ID"+pathSuffix : pathPrefix;
        fullPath.replace(live_stream_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(live_stream_id)));
    }
    
    {
        QString playback_idPathParam("{");
        playback_idPathParam.append("PLAYBACK_ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "PLAYBACK_ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"PLAYBACK_ID"+pathSuffix : pathPrefix;
        fullPath.replace(playback_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(playback_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILiveStreamsApi::deleteLiveStreamPlaybackIdCallback);
    connect(this, &OAILiveStreamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILiveStreamsApi::deleteLiveStreamPlaybackIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteLiveStreamPlaybackIdSignal();
        Q_EMIT deleteLiveStreamPlaybackIdSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteLiveStreamPlaybackIdSignalE(error_type, error_str);
        Q_EMIT deleteLiveStreamPlaybackIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteLiveStreamPlaybackIdSignalError(error_type, error_str);
        Q_EMIT deleteLiveStreamPlaybackIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILiveStreamsApi::deleteLiveStreamSimulcastTarget(const QString &live_stream_id, const QString &simulcast_target_id) {
    QString fullPath = QString(_serverConfigs["deleteLiveStreamSimulcastTarget"][_serverIndices.value("deleteLiveStreamSimulcastTarget")].URL()+"/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets/{SIMULCAST_TARGET_ID}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString live_stream_idPathParam("{");
        live_stream_idPathParam.append("LIVE_STREAM_ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "LIVE_STREAM_ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"LIVE_STREAM_ID"+pathSuffix : pathPrefix;
        fullPath.replace(live_stream_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(live_stream_id)));
    }
    
    {
        QString simulcast_target_idPathParam("{");
        simulcast_target_idPathParam.append("SIMULCAST_TARGET_ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "SIMULCAST_TARGET_ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"SIMULCAST_TARGET_ID"+pathSuffix : pathPrefix;
        fullPath.replace(simulcast_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(simulcast_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "DELETE");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILiveStreamsApi::deleteLiveStreamSimulcastTargetCallback);
    connect(this, &OAILiveStreamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILiveStreamsApi::deleteLiveStreamSimulcastTargetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT deleteLiveStreamSimulcastTargetSignal();
        Q_EMIT deleteLiveStreamSimulcastTargetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT deleteLiveStreamSimulcastTargetSignalE(error_type, error_str);
        Q_EMIT deleteLiveStreamSimulcastTargetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT deleteLiveStreamSimulcastTargetSignalError(error_type, error_str);
        Q_EMIT deleteLiveStreamSimulcastTargetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILiveStreamsApi::disableLiveStream(const QString &live_stream_id) {
    QString fullPath = QString(_serverConfigs["disableLiveStream"][_serverIndices.value("disableLiveStream")].URL()+"/video/v1/live-streams/{LIVE_STREAM_ID}/disable");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString live_stream_idPathParam("{");
        live_stream_idPathParam.append("LIVE_STREAM_ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "LIVE_STREAM_ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"LIVE_STREAM_ID"+pathSuffix : pathPrefix;
        fullPath.replace(live_stream_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(live_stream_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILiveStreamsApi::disableLiveStreamCallback);
    connect(this, &OAILiveStreamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILiveStreamsApi::disableLiveStreamCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIDisableLiveStreamResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT disableLiveStreamSignal(output);
        Q_EMIT disableLiveStreamSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT disableLiveStreamSignalE(output, error_type, error_str);
        Q_EMIT disableLiveStreamSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT disableLiveStreamSignalError(output, error_type, error_str);
        Q_EMIT disableLiveStreamSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILiveStreamsApi::enableLiveStream(const QString &live_stream_id) {
    QString fullPath = QString(_serverConfigs["enableLiveStream"][_serverIndices.value("enableLiveStream")].URL()+"/video/v1/live-streams/{LIVE_STREAM_ID}/enable");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString live_stream_idPathParam("{");
        live_stream_idPathParam.append("LIVE_STREAM_ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "LIVE_STREAM_ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"LIVE_STREAM_ID"+pathSuffix : pathPrefix;
        fullPath.replace(live_stream_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(live_stream_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILiveStreamsApi::enableLiveStreamCallback);
    connect(this, &OAILiveStreamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILiveStreamsApi::enableLiveStreamCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIEnableLiveStreamResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT enableLiveStreamSignal(output);
        Q_EMIT enableLiveStreamSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT enableLiveStreamSignalE(output, error_type, error_str);
        Q_EMIT enableLiveStreamSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT enableLiveStreamSignalError(output, error_type, error_str);
        Q_EMIT enableLiveStreamSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILiveStreamsApi::getLiveStream(const QString &live_stream_id) {
    QString fullPath = QString(_serverConfigs["getLiveStream"][_serverIndices.value("getLiveStream")].URL()+"/video/v1/live-streams/{LIVE_STREAM_ID}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString live_stream_idPathParam("{");
        live_stream_idPathParam.append("LIVE_STREAM_ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "LIVE_STREAM_ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"LIVE_STREAM_ID"+pathSuffix : pathPrefix;
        fullPath.replace(live_stream_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(live_stream_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILiveStreamsApi::getLiveStreamCallback);
    connect(this, &OAILiveStreamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILiveStreamsApi::getLiveStreamCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILiveStreamResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getLiveStreamSignal(output);
        Q_EMIT getLiveStreamSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getLiveStreamSignalE(output, error_type, error_str);
        Q_EMIT getLiveStreamSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getLiveStreamSignalError(output, error_type, error_str);
        Q_EMIT getLiveStreamSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILiveStreamsApi::getLiveStreamPlaybackId(const QString &live_stream_id, const QString &playback_id) {
    QString fullPath = QString(_serverConfigs["getLiveStreamPlaybackId"][_serverIndices.value("getLiveStreamPlaybackId")].URL()+"/video/v1/live-streams/{LIVE_STREAM_ID}/playback-ids/{PLAYBACK_ID}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString live_stream_idPathParam("{");
        live_stream_idPathParam.append("LIVE_STREAM_ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "LIVE_STREAM_ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"LIVE_STREAM_ID"+pathSuffix : pathPrefix;
        fullPath.replace(live_stream_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(live_stream_id)));
    }
    
    {
        QString playback_idPathParam("{");
        playback_idPathParam.append("PLAYBACK_ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "PLAYBACK_ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"PLAYBACK_ID"+pathSuffix : pathPrefix;
        fullPath.replace(playback_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(playback_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILiveStreamsApi::getLiveStreamPlaybackIdCallback);
    connect(this, &OAILiveStreamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILiveStreamsApi::getLiveStreamPlaybackIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIGetLiveStreamPlaybackIDResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getLiveStreamPlaybackIdSignal(output);
        Q_EMIT getLiveStreamPlaybackIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getLiveStreamPlaybackIdSignalE(output, error_type, error_str);
        Q_EMIT getLiveStreamPlaybackIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getLiveStreamPlaybackIdSignalError(output, error_type, error_str);
        Q_EMIT getLiveStreamPlaybackIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILiveStreamsApi::getLiveStreamSimulcastTarget(const QString &live_stream_id, const QString &simulcast_target_id) {
    QString fullPath = QString(_serverConfigs["getLiveStreamSimulcastTarget"][_serverIndices.value("getLiveStreamSimulcastTarget")].URL()+"/video/v1/live-streams/{LIVE_STREAM_ID}/simulcast-targets/{SIMULCAST_TARGET_ID}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString live_stream_idPathParam("{");
        live_stream_idPathParam.append("LIVE_STREAM_ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "LIVE_STREAM_ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"LIVE_STREAM_ID"+pathSuffix : pathPrefix;
        fullPath.replace(live_stream_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(live_stream_id)));
    }
    
    {
        QString simulcast_target_idPathParam("{");
        simulcast_target_idPathParam.append("SIMULCAST_TARGET_ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "SIMULCAST_TARGET_ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"SIMULCAST_TARGET_ID"+pathSuffix : pathPrefix;
        fullPath.replace(simulcast_target_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(simulcast_target_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILiveStreamsApi::getLiveStreamSimulcastTargetCallback);
    connect(this, &OAILiveStreamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILiveStreamsApi::getLiveStreamSimulcastTargetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISimulcastTargetResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getLiveStreamSimulcastTargetSignal(output);
        Q_EMIT getLiveStreamSimulcastTargetSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getLiveStreamSimulcastTargetSignalE(output, error_type, error_str);
        Q_EMIT getLiveStreamSimulcastTargetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getLiveStreamSimulcastTargetSignalError(output, error_type, error_str);
        Q_EMIT getLiveStreamSimulcastTargetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILiveStreamsApi::listLiveStreams(const ::OpenAPI::OptionalParam<qint32> &limit, const ::OpenAPI::OptionalParam<qint32> &page, const ::OpenAPI::OptionalParam<QString> &stream_key, const ::OpenAPI::OptionalParam<OAILiveStreamStatus> &status) {
    QString fullPath = QString(_serverConfigs["listLiveStreams"][_serverIndices.value("listLiveStreams")].URL()+"/video/v1/live-streams");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (limit.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "limit", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("limit")).append(querySuffix).append(QUrl::toPercentEncoding(limit.stringValue()));
    }
    if (page.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "page", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("page")).append(querySuffix).append(QUrl::toPercentEncoding(page.stringValue()));
    }
    if (stream_key.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "stream_key", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("stream_key")).append(querySuffix).append(QUrl::toPercentEncoding(stream_key.stringValue()));
    }
    if (status.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "status", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");
        QString paramString = (queryStyle == "form" && true) ? "" : (queryStyle == "form" && !(true)) ? "status"+querySuffix : "";
        QJsonObject parameter = status.value().asJsonObject();
        qint32 count = 0;
        for(const QString& key : parameter.keys()) {
            if (count > 0) {
                queryDelimiter =  ((queryStyle == "form" || queryStyle == "deepObject") && true) ? "&" : getParamStyleDelimiter(queryStyle, key, true);
                paramString.append(queryDelimiter);
            }
            QString assignOperator;
            if (queryStyle == "form")
                assignOperator = (true) ? "=" : ",";
            else if (queryStyle == "deepObject")
                assignOperator = (true) ? "=" : "none";
            switch(parameter.value(key).type()) {
                case QJsonValue::String:
                {
                    paramString.append(((queryStyle == "form") ? key : QString("status").append("[").append(key).append("]"))+assignOperator+parameter.value(key).toString());
                    break;
                }
                case QJsonValue::Double:
                {
                    paramString.append(((queryStyle == "form") ? key : QString("status").append("[").append(key).append("]"))+assignOperator+QString::number(parameter.value(key).toDouble()));
                    break;
                }
                case QJsonValue::Bool:
                {
                    paramString.append(((queryStyle == "form") ? key : QString("status").append("[").append(key).append("]"))+assignOperator+QVariant(parameter.value(key).toBool()).toString());
                    break;
                }
                case QJsonValue::Array:
                {
                    paramString.append(((queryStyle == "form") ? key : QString("status").append("[").append(key).append("]"))+assignOperator+QVariant(parameter.value(key).toArray()).toString());
                    break;
                }
                case QJsonValue::Object:
                {
                    paramString.append(((queryStyle == "form") ? key : QString("status").append("[").append(key).append("]"))+assignOperator+QVariant(parameter.value(key).toObject()).toString());
                    break;
                }
                case QJsonValue::Null:
                case QJsonValue::Undefined:
                    break;
            }
            count++;
        }
        fullPath.append(paramString);
            }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILiveStreamsApi::listLiveStreamsCallback);
    connect(this, &OAILiveStreamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILiveStreamsApi::listLiveStreamsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListLiveStreamsResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT listLiveStreamsSignal(output);
        Q_EMIT listLiveStreamsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT listLiveStreamsSignalE(output, error_type, error_str);
        Q_EMIT listLiveStreamsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT listLiveStreamsSignalError(output, error_type, error_str);
        Q_EMIT listLiveStreamsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILiveStreamsApi::resetStreamKey(const QString &live_stream_id) {
    QString fullPath = QString(_serverConfigs["resetStreamKey"][_serverIndices.value("resetStreamKey")].URL()+"/video/v1/live-streams/{LIVE_STREAM_ID}/reset-stream-key");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString live_stream_idPathParam("{");
        live_stream_idPathParam.append("LIVE_STREAM_ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "LIVE_STREAM_ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"LIVE_STREAM_ID"+pathSuffix : pathPrefix;
        fullPath.replace(live_stream_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(live_stream_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILiveStreamsApi::resetStreamKeyCallback);
    connect(this, &OAILiveStreamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILiveStreamsApi::resetStreamKeyCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILiveStreamResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT resetStreamKeySignal(output);
        Q_EMIT resetStreamKeySignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT resetStreamKeySignalE(output, error_type, error_str);
        Q_EMIT resetStreamKeySignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT resetStreamKeySignalError(output, error_type, error_str);
        Q_EMIT resetStreamKeySignalErrorFull(worker, error_type, error_str);
    }
}

void OAILiveStreamsApi::signalLiveStreamComplete(const QString &live_stream_id) {
    QString fullPath = QString(_serverConfigs["signalLiveStreamComplete"][_serverIndices.value("signalLiveStreamComplete")].URL()+"/video/v1/live-streams/{LIVE_STREAM_ID}/complete");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString live_stream_idPathParam("{");
        live_stream_idPathParam.append("LIVE_STREAM_ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "LIVE_STREAM_ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"LIVE_STREAM_ID"+pathSuffix : pathPrefix;
        fullPath.replace(live_stream_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(live_stream_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILiveStreamsApi::signalLiveStreamCompleteCallback);
    connect(this, &OAILiveStreamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILiveStreamsApi::signalLiveStreamCompleteCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISignalLiveStreamCompleteResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT signalLiveStreamCompleteSignal(output);
        Q_EMIT signalLiveStreamCompleteSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT signalLiveStreamCompleteSignalE(output, error_type, error_str);
        Q_EMIT signalLiveStreamCompleteSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT signalLiveStreamCompleteSignalError(output, error_type, error_str);
        Q_EMIT signalLiveStreamCompleteSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILiveStreamsApi::updateLiveStream(const QString &live_stream_id, const OAIUpdateLiveStreamRequest &oai_update_live_stream_request) {
    QString fullPath = QString(_serverConfigs["updateLiveStream"][_serverIndices.value("updateLiveStream")].URL()+"/video/v1/live-streams/{LIVE_STREAM_ID}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString live_stream_idPathParam("{");
        live_stream_idPathParam.append("LIVE_STREAM_ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "LIVE_STREAM_ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"LIVE_STREAM_ID"+pathSuffix : pathPrefix;
        fullPath.replace(live_stream_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(live_stream_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    {

        
        QByteArray output = oai_update_live_stream_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILiveStreamsApi::updateLiveStreamCallback);
    connect(this, &OAILiveStreamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILiveStreamsApi::updateLiveStreamCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILiveStreamResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateLiveStreamSignal(output);
        Q_EMIT updateLiveStreamSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateLiveStreamSignalE(output, error_type, error_str);
        Q_EMIT updateLiveStreamSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateLiveStreamSignalError(output, error_type, error_str);
        Q_EMIT updateLiveStreamSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILiveStreamsApi::updateLiveStreamEmbeddedSubtitles(const QString &live_stream_id, const OAIUpdateLiveStreamEmbeddedSubtitlesRequest &oai_update_live_stream_embedded_subtitles_request) {
    QString fullPath = QString(_serverConfigs["updateLiveStreamEmbeddedSubtitles"][_serverIndices.value("updateLiveStreamEmbeddedSubtitles")].URL()+"/video/v1/live-streams/{LIVE_STREAM_ID}/embedded-subtitles");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString live_stream_idPathParam("{");
        live_stream_idPathParam.append("LIVE_STREAM_ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "LIVE_STREAM_ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"LIVE_STREAM_ID"+pathSuffix : pathPrefix;
        fullPath.replace(live_stream_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(live_stream_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_update_live_stream_embedded_subtitles_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILiveStreamsApi::updateLiveStreamEmbeddedSubtitlesCallback);
    connect(this, &OAILiveStreamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILiveStreamsApi::updateLiveStreamEmbeddedSubtitlesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILiveStreamResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateLiveStreamEmbeddedSubtitlesSignal(output);
        Q_EMIT updateLiveStreamEmbeddedSubtitlesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateLiveStreamEmbeddedSubtitlesSignalE(output, error_type, error_str);
        Q_EMIT updateLiveStreamEmbeddedSubtitlesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateLiveStreamEmbeddedSubtitlesSignalError(output, error_type, error_str);
        Q_EMIT updateLiveStreamEmbeddedSubtitlesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILiveStreamsApi::updateLiveStreamGeneratedSubtitles(const QString &live_stream_id, const OAIUpdateLiveStreamGeneratedSubtitlesRequest &oai_update_live_stream_generated_subtitles_request) {
    QString fullPath = QString(_serverConfigs["updateLiveStreamGeneratedSubtitles"][_serverIndices.value("updateLiveStreamGeneratedSubtitles")].URL()+"/video/v1/live-streams/{LIVE_STREAM_ID}/generated-subtitles");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    
    {
        QString live_stream_idPathParam("{");
        live_stream_idPathParam.append("LIVE_STREAM_ID").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "LIVE_STREAM_ID", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"LIVE_STREAM_ID"+pathSuffix : pathPrefix;
        fullPath.replace(live_stream_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(live_stream_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = oai_update_live_stream_generated_subtitles_request.asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAILiveStreamsApi::updateLiveStreamGeneratedSubtitlesCallback);
    connect(this, &OAILiveStreamsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAILiveStreamsApi::updateLiveStreamGeneratedSubtitlesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAILiveStreamResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT updateLiveStreamGeneratedSubtitlesSignal(output);
        Q_EMIT updateLiveStreamGeneratedSubtitlesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT updateLiveStreamGeneratedSubtitlesSignalE(output, error_type, error_str);
        Q_EMIT updateLiveStreamGeneratedSubtitlesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT updateLiveStreamGeneratedSubtitlesSignalError(output, error_type, error_str);
        Q_EMIT updateLiveStreamGeneratedSubtitlesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAILiveStreamsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
