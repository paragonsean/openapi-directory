/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIncidentsApi_H
#define OAI_OAIIncidentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIncidentResponse.h"
#include "OAIListIncidentsResponse.h"
#include "OAIListRelatedIncidentsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIncidentsApi : public QObject {
    Q_OBJECT

public:
    OAIIncidentsApi(const int timeOut = 0);
    ~OAIIncidentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  incident_id QString [required]
    */
    virtual void getIncident(const QString &incident_id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  order_direction QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  severity QString [optional]
    */
    virtual void listIncidents(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &severity = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  incident_id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  order_direction QString [optional]
    */
    virtual void listRelatedIncidents(const QString &incident_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_direction = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getIncidentCallback(OAIHttpRequestWorker *worker);
    void listIncidentsCallback(OAIHttpRequestWorker *worker);
    void listRelatedIncidentsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getIncidentSignal(OAIIncidentResponse summary);
    void listIncidentsSignal(OAIListIncidentsResponse summary);
    void listRelatedIncidentsSignal(OAIListRelatedIncidentsResponse summary);


    void getIncidentSignalFull(OAIHttpRequestWorker *worker, OAIIncidentResponse summary);
    void listIncidentsSignalFull(OAIHttpRequestWorker *worker, OAIListIncidentsResponse summary);
    void listRelatedIncidentsSignalFull(OAIHttpRequestWorker *worker, OAIListRelatedIncidentsResponse summary);

    Q_DECL_DEPRECATED_X("Use getIncidentSignalError() instead")
    void getIncidentSignalE(OAIIncidentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIncidentSignalError(OAIIncidentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIncidentsSignalError() instead")
    void listIncidentsSignalE(OAIListIncidentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listIncidentsSignalError(OAIListIncidentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRelatedIncidentsSignalError() instead")
    void listRelatedIncidentsSignalE(OAIListRelatedIncidentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRelatedIncidentsSignalError(OAIListRelatedIncidentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getIncidentSignalErrorFull() instead")
    void getIncidentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIncidentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listIncidentsSignalErrorFull() instead")
    void listIncidentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listIncidentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRelatedIncidentsSignalErrorFull() instead")
    void listRelatedIncidentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRelatedIncidentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
