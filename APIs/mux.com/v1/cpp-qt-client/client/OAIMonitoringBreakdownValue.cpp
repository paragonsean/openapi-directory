/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonitoringBreakdownValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonitoringBreakdownValue::OAIMonitoringBreakdownValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonitoringBreakdownValue::OAIMonitoringBreakdownValue() {
    this->initializeModel();
}

OAIMonitoringBreakdownValue::~OAIMonitoringBreakdownValue() {}

void OAIMonitoringBreakdownValue::initializeModel() {

    m_concurrent_viewers_isSet = false;
    m_concurrent_viewers_isValid = false;

    m_display_value_isSet = false;
    m_display_value_isValid = false;

    m_metric_value_isSet = false;
    m_metric_value_isValid = false;

    m_negative_impact_isSet = false;
    m_negative_impact_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIMonitoringBreakdownValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonitoringBreakdownValue::fromJsonObject(QJsonObject json) {

    m_concurrent_viewers_isValid = ::OpenAPI::fromJsonValue(m_concurrent_viewers, json[QString("concurrent_viewers")]);
    m_concurrent_viewers_isSet = !json[QString("concurrent_viewers")].isNull() && m_concurrent_viewers_isValid;

    m_display_value_isValid = ::OpenAPI::fromJsonValue(m_display_value, json[QString("display_value")]);
    m_display_value_isSet = !json[QString("display_value")].isNull() && m_display_value_isValid;

    m_metric_value_isValid = ::OpenAPI::fromJsonValue(m_metric_value, json[QString("metric_value")]);
    m_metric_value_isSet = !json[QString("metric_value")].isNull() && m_metric_value_isValid;

    m_negative_impact_isValid = ::OpenAPI::fromJsonValue(m_negative_impact, json[QString("negative_impact")]);
    m_negative_impact_isSet = !json[QString("negative_impact")].isNull() && m_negative_impact_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIMonitoringBreakdownValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonitoringBreakdownValue::asJsonObject() const {
    QJsonObject obj;
    if (m_concurrent_viewers_isSet) {
        obj.insert(QString("concurrent_viewers"), ::OpenAPI::toJsonValue(m_concurrent_viewers));
    }
    if (m_display_value_isSet) {
        obj.insert(QString("display_value"), ::OpenAPI::toJsonValue(m_display_value));
    }
    if (m_metric_value_isSet) {
        obj.insert(QString("metric_value"), ::OpenAPI::toJsonValue(m_metric_value));
    }
    if (m_negative_impact_isSet) {
        obj.insert(QString("negative_impact"), ::OpenAPI::toJsonValue(m_negative_impact));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

qint64 OAIMonitoringBreakdownValue::getConcurrentViewers() const {
    return m_concurrent_viewers;
}
void OAIMonitoringBreakdownValue::setConcurrentViewers(const qint64 &concurrent_viewers) {
    m_concurrent_viewers = concurrent_viewers;
    m_concurrent_viewers_isSet = true;
}

bool OAIMonitoringBreakdownValue::is_concurrent_viewers_Set() const{
    return m_concurrent_viewers_isSet;
}

bool OAIMonitoringBreakdownValue::is_concurrent_viewers_Valid() const{
    return m_concurrent_viewers_isValid;
}

QString OAIMonitoringBreakdownValue::getDisplayValue() const {
    return m_display_value;
}
void OAIMonitoringBreakdownValue::setDisplayValue(const QString &display_value) {
    m_display_value = display_value;
    m_display_value_isSet = true;
}

bool OAIMonitoringBreakdownValue::is_display_value_Set() const{
    return m_display_value_isSet;
}

bool OAIMonitoringBreakdownValue::is_display_value_Valid() const{
    return m_display_value_isValid;
}

double OAIMonitoringBreakdownValue::getMetricValue() const {
    return m_metric_value;
}
void OAIMonitoringBreakdownValue::setMetricValue(const double &metric_value) {
    m_metric_value = metric_value;
    m_metric_value_isSet = true;
}

bool OAIMonitoringBreakdownValue::is_metric_value_Set() const{
    return m_metric_value_isSet;
}

bool OAIMonitoringBreakdownValue::is_metric_value_Valid() const{
    return m_metric_value_isValid;
}

qint64 OAIMonitoringBreakdownValue::getNegativeImpact() const {
    return m_negative_impact;
}
void OAIMonitoringBreakdownValue::setNegativeImpact(const qint64 &negative_impact) {
    m_negative_impact = negative_impact;
    m_negative_impact_isSet = true;
}

bool OAIMonitoringBreakdownValue::is_negative_impact_Set() const{
    return m_negative_impact_isSet;
}

bool OAIMonitoringBreakdownValue::is_negative_impact_Valid() const{
    return m_negative_impact_isValid;
}

QString OAIMonitoringBreakdownValue::getValue() const {
    return m_value;
}
void OAIMonitoringBreakdownValue::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIMonitoringBreakdownValue::is_value_Set() const{
    return m_value_isSet;
}

bool OAIMonitoringBreakdownValue::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIMonitoringBreakdownValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concurrent_viewers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negative_impact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonitoringBreakdownValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
