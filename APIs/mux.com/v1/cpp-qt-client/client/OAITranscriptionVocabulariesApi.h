/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITranscriptionVocabulariesApi_H
#define OAI_OAITranscriptionVocabulariesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateTranscriptionVocabularyRequest.h"
#include "OAIListTranscriptionVocabulariesResponse.h"
#include "OAITranscriptionVocabularyResponse.h"
#include "OAIUpdateTranscriptionVocabularyRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITranscriptionVocabulariesApi : public QObject {
    Q_OBJECT

public:
    OAITranscriptionVocabulariesApi(const int timeOut = 0);
    ~OAITranscriptionVocabulariesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_transcription_vocabulary_request OAICreateTranscriptionVocabularyRequest [required]
    */
    virtual void createTranscriptionVocabulary(const OAICreateTranscriptionVocabularyRequest &oai_create_transcription_vocabulary_request);

    /**
    * @param[in]  transcription_vocabulary_id QString [required]
    */
    virtual void deleteTranscriptionVocabulary(const QString &transcription_vocabulary_id);

    /**
    * @param[in]  transcription_vocabulary_id QString [required]
    */
    virtual void getTranscriptionVocabulary(const QString &transcription_vocabulary_id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void listTranscriptionVocabularies(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  transcription_vocabulary_id QString [required]
    * @param[in]  oai_update_transcription_vocabulary_request OAIUpdateTranscriptionVocabularyRequest [required]
    */
    virtual void updateTranscriptionVocabulary(const QString &transcription_vocabulary_id, const OAIUpdateTranscriptionVocabularyRequest &oai_update_transcription_vocabulary_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createTranscriptionVocabularyCallback(OAIHttpRequestWorker *worker);
    void deleteTranscriptionVocabularyCallback(OAIHttpRequestWorker *worker);
    void getTranscriptionVocabularyCallback(OAIHttpRequestWorker *worker);
    void listTranscriptionVocabulariesCallback(OAIHttpRequestWorker *worker);
    void updateTranscriptionVocabularyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createTranscriptionVocabularySignal(OAITranscriptionVocabularyResponse summary);
    void deleteTranscriptionVocabularySignal();
    void getTranscriptionVocabularySignal(OAITranscriptionVocabularyResponse summary);
    void listTranscriptionVocabulariesSignal(OAIListTranscriptionVocabulariesResponse summary);
    void updateTranscriptionVocabularySignal(OAITranscriptionVocabularyResponse summary);


    void createTranscriptionVocabularySignalFull(OAIHttpRequestWorker *worker, OAITranscriptionVocabularyResponse summary);
    void deleteTranscriptionVocabularySignalFull(OAIHttpRequestWorker *worker);
    void getTranscriptionVocabularySignalFull(OAIHttpRequestWorker *worker, OAITranscriptionVocabularyResponse summary);
    void listTranscriptionVocabulariesSignalFull(OAIHttpRequestWorker *worker, OAIListTranscriptionVocabulariesResponse summary);
    void updateTranscriptionVocabularySignalFull(OAIHttpRequestWorker *worker, OAITranscriptionVocabularyResponse summary);

    Q_DECL_DEPRECATED_X("Use createTranscriptionVocabularySignalError() instead")
    void createTranscriptionVocabularySignalE(OAITranscriptionVocabularyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTranscriptionVocabularySignalError(OAITranscriptionVocabularyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTranscriptionVocabularySignalError() instead")
    void deleteTranscriptionVocabularySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTranscriptionVocabularySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTranscriptionVocabularySignalError() instead")
    void getTranscriptionVocabularySignalE(OAITranscriptionVocabularyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTranscriptionVocabularySignalError(OAITranscriptionVocabularyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTranscriptionVocabulariesSignalError() instead")
    void listTranscriptionVocabulariesSignalE(OAIListTranscriptionVocabulariesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTranscriptionVocabulariesSignalError(OAIListTranscriptionVocabulariesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTranscriptionVocabularySignalError() instead")
    void updateTranscriptionVocabularySignalE(OAITranscriptionVocabularyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTranscriptionVocabularySignalError(OAITranscriptionVocabularyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createTranscriptionVocabularySignalErrorFull() instead")
    void createTranscriptionVocabularySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTranscriptionVocabularySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTranscriptionVocabularySignalErrorFull() instead")
    void deleteTranscriptionVocabularySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTranscriptionVocabularySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTranscriptionVocabularySignalErrorFull() instead")
    void getTranscriptionVocabularySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTranscriptionVocabularySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTranscriptionVocabulariesSignalErrorFull() instead")
    void listTranscriptionVocabulariesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTranscriptionVocabulariesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTranscriptionVocabularySignalErrorFull() instead")
    void updateTranscriptionVocabularySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTranscriptionVocabularySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
