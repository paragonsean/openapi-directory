/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetric.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetric::OAIMetric(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetric::OAIMetric() {
    this->initializeModel();
}

OAIMetric::~OAIMetric() {}

void OAIMetric::initializeModel() {

    m_measurement_isSet = false;
    m_measurement_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIMetric::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetric::fromJsonObject(QJsonObject json) {

    m_measurement_isValid = ::OpenAPI::fromJsonValue(m_measurement, json[QString("measurement")]);
    m_measurement_isSet = !json[QString("measurement")].isNull() && m_measurement_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIMetric::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetric::asJsonObject() const {
    QJsonObject obj;
    if (m_measurement_isSet) {
        obj.insert(QString("measurement"), ::OpenAPI::toJsonValue(m_measurement));
    }
    if (m_metric_isSet) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIMetric::getMeasurement() const {
    return m_measurement;
}
void OAIMetric::setMeasurement(const QString &measurement) {
    m_measurement = measurement;
    m_measurement_isSet = true;
}

bool OAIMetric::is_measurement_Set() const{
    return m_measurement_isSet;
}

bool OAIMetric::is_measurement_Valid() const{
    return m_measurement_isValid;
}

QString OAIMetric::getMetric() const {
    return m_metric;
}
void OAIMetric::setMetric(const QString &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIMetric::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIMetric::is_metric_Valid() const{
    return m_metric_isValid;
}

QString OAIMetric::getName() const {
    return m_name;
}
void OAIMetric::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMetric::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMetric::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMetric::getType() const {
    return m_type;
}
void OAIMetric::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMetric::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMetric::is_type_Valid() const{
    return m_type_isValid;
}

double OAIMetric::getValue() const {
    return m_value;
}
void OAIMetric::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIMetric::is_value_Set() const{
    return m_value_isSet;
}

bool OAIMetric::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIMetric::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_measurement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetric::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
