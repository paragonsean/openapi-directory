/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateLiveStreamRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateLiveStreamRequest::OAIUpdateLiveStreamRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateLiveStreamRequest::OAIUpdateLiveStreamRequest() {
    this->initializeModel();
}

OAIUpdateLiveStreamRequest::~OAIUpdateLiveStreamRequest() {}

void OAIUpdateLiveStreamRequest::initializeModel() {

    m_latency_mode_isSet = false;
    m_latency_mode_isValid = false;

    m_max_continuous_duration_isSet = false;
    m_max_continuous_duration_isValid = false;

    m_passthrough_isSet = false;
    m_passthrough_isValid = false;

    m_reconnect_slate_url_isSet = false;
    m_reconnect_slate_url_isValid = false;

    m_reconnect_window_isSet = false;
    m_reconnect_window_isValid = false;

    m_use_slate_for_standard_latency_isSet = false;
    m_use_slate_for_standard_latency_isValid = false;
}

void OAIUpdateLiveStreamRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateLiveStreamRequest::fromJsonObject(QJsonObject json) {

    m_latency_mode_isValid = ::OpenAPI::fromJsonValue(m_latency_mode, json[QString("latency_mode")]);
    m_latency_mode_isSet = !json[QString("latency_mode")].isNull() && m_latency_mode_isValid;

    m_max_continuous_duration_isValid = ::OpenAPI::fromJsonValue(m_max_continuous_duration, json[QString("max_continuous_duration")]);
    m_max_continuous_duration_isSet = !json[QString("max_continuous_duration")].isNull() && m_max_continuous_duration_isValid;

    m_passthrough_isValid = ::OpenAPI::fromJsonValue(m_passthrough, json[QString("passthrough")]);
    m_passthrough_isSet = !json[QString("passthrough")].isNull() && m_passthrough_isValid;

    m_reconnect_slate_url_isValid = ::OpenAPI::fromJsonValue(m_reconnect_slate_url, json[QString("reconnect_slate_url")]);
    m_reconnect_slate_url_isSet = !json[QString("reconnect_slate_url")].isNull() && m_reconnect_slate_url_isValid;

    m_reconnect_window_isValid = ::OpenAPI::fromJsonValue(m_reconnect_window, json[QString("reconnect_window")]);
    m_reconnect_window_isSet = !json[QString("reconnect_window")].isNull() && m_reconnect_window_isValid;

    m_use_slate_for_standard_latency_isValid = ::OpenAPI::fromJsonValue(m_use_slate_for_standard_latency, json[QString("use_slate_for_standard_latency")]);
    m_use_slate_for_standard_latency_isSet = !json[QString("use_slate_for_standard_latency")].isNull() && m_use_slate_for_standard_latency_isValid;
}

QString OAIUpdateLiveStreamRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateLiveStreamRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_latency_mode_isSet) {
        obj.insert(QString("latency_mode"), ::OpenAPI::toJsonValue(m_latency_mode));
    }
    if (m_max_continuous_duration_isSet) {
        obj.insert(QString("max_continuous_duration"), ::OpenAPI::toJsonValue(m_max_continuous_duration));
    }
    if (m_passthrough_isSet) {
        obj.insert(QString("passthrough"), ::OpenAPI::toJsonValue(m_passthrough));
    }
    if (m_reconnect_slate_url_isSet) {
        obj.insert(QString("reconnect_slate_url"), ::OpenAPI::toJsonValue(m_reconnect_slate_url));
    }
    if (m_reconnect_window_isSet) {
        obj.insert(QString("reconnect_window"), ::OpenAPI::toJsonValue(m_reconnect_window));
    }
    if (m_use_slate_for_standard_latency_isSet) {
        obj.insert(QString("use_slate_for_standard_latency"), ::OpenAPI::toJsonValue(m_use_slate_for_standard_latency));
    }
    return obj;
}

QString OAIUpdateLiveStreamRequest::getLatencyMode() const {
    return m_latency_mode;
}
void OAIUpdateLiveStreamRequest::setLatencyMode(const QString &latency_mode) {
    m_latency_mode = latency_mode;
    m_latency_mode_isSet = true;
}

bool OAIUpdateLiveStreamRequest::is_latency_mode_Set() const{
    return m_latency_mode_isSet;
}

bool OAIUpdateLiveStreamRequest::is_latency_mode_Valid() const{
    return m_latency_mode_isValid;
}

qint32 OAIUpdateLiveStreamRequest::getMaxContinuousDuration() const {
    return m_max_continuous_duration;
}
void OAIUpdateLiveStreamRequest::setMaxContinuousDuration(const qint32 &max_continuous_duration) {
    m_max_continuous_duration = max_continuous_duration;
    m_max_continuous_duration_isSet = true;
}

bool OAIUpdateLiveStreamRequest::is_max_continuous_duration_Set() const{
    return m_max_continuous_duration_isSet;
}

bool OAIUpdateLiveStreamRequest::is_max_continuous_duration_Valid() const{
    return m_max_continuous_duration_isValid;
}

QString OAIUpdateLiveStreamRequest::getPassthrough() const {
    return m_passthrough;
}
void OAIUpdateLiveStreamRequest::setPassthrough(const QString &passthrough) {
    m_passthrough = passthrough;
    m_passthrough_isSet = true;
}

bool OAIUpdateLiveStreamRequest::is_passthrough_Set() const{
    return m_passthrough_isSet;
}

bool OAIUpdateLiveStreamRequest::is_passthrough_Valid() const{
    return m_passthrough_isValid;
}

QString OAIUpdateLiveStreamRequest::getReconnectSlateUrl() const {
    return m_reconnect_slate_url;
}
void OAIUpdateLiveStreamRequest::setReconnectSlateUrl(const QString &reconnect_slate_url) {
    m_reconnect_slate_url = reconnect_slate_url;
    m_reconnect_slate_url_isSet = true;
}

bool OAIUpdateLiveStreamRequest::is_reconnect_slate_url_Set() const{
    return m_reconnect_slate_url_isSet;
}

bool OAIUpdateLiveStreamRequest::is_reconnect_slate_url_Valid() const{
    return m_reconnect_slate_url_isValid;
}

float OAIUpdateLiveStreamRequest::getReconnectWindow() const {
    return m_reconnect_window;
}
void OAIUpdateLiveStreamRequest::setReconnectWindow(const float &reconnect_window) {
    m_reconnect_window = reconnect_window;
    m_reconnect_window_isSet = true;
}

bool OAIUpdateLiveStreamRequest::is_reconnect_window_Set() const{
    return m_reconnect_window_isSet;
}

bool OAIUpdateLiveStreamRequest::is_reconnect_window_Valid() const{
    return m_reconnect_window_isValid;
}

bool OAIUpdateLiveStreamRequest::isUseSlateForStandardLatency() const {
    return m_use_slate_for_standard_latency;
}
void OAIUpdateLiveStreamRequest::setUseSlateForStandardLatency(const bool &use_slate_for_standard_latency) {
    m_use_slate_for_standard_latency = use_slate_for_standard_latency;
    m_use_slate_for_standard_latency_isSet = true;
}

bool OAIUpdateLiveStreamRequest::is_use_slate_for_standard_latency_Set() const{
    return m_use_slate_for_standard_latency_isSet;
}

bool OAIUpdateLiveStreamRequest::is_use_slate_for_standard_latency_Valid() const{
    return m_use_slate_for_standard_latency_isValid;
}

bool OAIUpdateLiveStreamRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_latency_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_continuous_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passthrough_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconnect_slate_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconnect_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_slate_for_standard_latency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateLiveStreamRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
