/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError::OAIError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError::OAIError() {
    this->initializeModel();
}

OAIError::~OAIError() {}

void OAIError::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_seen_isSet = false;
    m_last_seen_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_percentage_isSet = false;
    m_percentage_isValid = false;
}

void OAIError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_seen_isValid = ::OpenAPI::fromJsonValue(m_last_seen, json[QString("last_seen")]);
    m_last_seen_isSet = !json[QString("last_seen")].isNull() && m_last_seen_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_percentage_isValid = ::OpenAPI::fromJsonValue(m_percentage, json[QString("percentage")]);
    m_percentage_isSet = !json[QString("percentage")].isNull() && m_percentage_isValid;
}

QString OAIError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_seen_isSet) {
        obj.insert(QString("last_seen"), ::OpenAPI::toJsonValue(m_last_seen));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_percentage_isSet) {
        obj.insert(QString("percentage"), ::OpenAPI::toJsonValue(m_percentage));
    }
    return obj;
}

qint64 OAIError::getCode() const {
    return m_code;
}
void OAIError::setCode(const qint64 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIError::is_code_Valid() const{
    return m_code_isValid;
}

qint64 OAIError::getCount() const {
    return m_count;
}
void OAIError::setCount(const qint64 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIError::is_count_Set() const{
    return m_count_isSet;
}

bool OAIError::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIError::getDescription() const {
    return m_description;
}
void OAIError::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIError::is_description_Set() const{
    return m_description_isSet;
}

bool OAIError::is_description_Valid() const{
    return m_description_isValid;
}

qint64 OAIError::getId() const {
    return m_id;
}
void OAIError::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIError::is_id_Set() const{
    return m_id_isSet;
}

bool OAIError::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIError::getLastSeen() const {
    return m_last_seen;
}
void OAIError::setLastSeen(const QString &last_seen) {
    m_last_seen = last_seen;
    m_last_seen_isSet = true;
}

bool OAIError::is_last_seen_Set() const{
    return m_last_seen_isSet;
}

bool OAIError::is_last_seen_Valid() const{
    return m_last_seen_isValid;
}

QString OAIError::getMessage() const {
    return m_message;
}
void OAIError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIError::getNotes() const {
    return m_notes;
}
void OAIError::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIError::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIError::is_notes_Valid() const{
    return m_notes_isValid;
}

double OAIError::getPercentage() const {
    return m_percentage;
}
void OAIError::setPercentage(const double &percentage) {
    m_percentage = percentage;
    m_percentage_isSet = true;
}

bool OAIError::is_percentage_Set() const{
    return m_percentage_isSet;
}

bool OAIError::is_percentage_Valid() const{
    return m_percentage_isValid;
}

bool OAIError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
