/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRealTimeApi_H
#define OAI_OAIRealTimeApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetRealTimeBreakdownResponse.h"
#include "OAIGetRealTimeHistogramTimeseriesResponse.h"
#include "OAIGetRealTimeTimeseriesResponse.h"
#include "OAIListRealTimeDimensionsResponse.h"
#include "OAIListRealTimeMetricsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRealTimeApi : public QObject {
    Q_OBJECT

public:
    OAIRealTimeApi(const int timeOut = 0);
    ~OAIRealTimeApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  realtime_metric_id QString [required]
    * @param[in]  dimension QString [optional]
    * @param[in]  timestamp qint32 [optional]
    * @param[in]  filters QList<QString> [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  order_direction QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getRealtimeBreakdown(const QString &realtime_metric_id, const ::OpenAPI::OptionalParam<QString> &dimension = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &timestamp = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_direction = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  realtime_histogram_metric_id QString [required]
    * @param[in]  filters QList<QString> [optional]
    */
    Q_DECL_DEPRECATED virtual void getRealtimeHistogramTimeseries(const QString &realtime_histogram_metric_id, const ::OpenAPI::OptionalParam<QList<QString>> &filters = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  realtime_metric_id QString [required]
    * @param[in]  filters QList<QString> [optional]
    * @param[in]  timestamp qint32 [optional]
    */
    Q_DECL_DEPRECATED virtual void getRealtimeTimeseries(const QString &realtime_metric_id, const ::OpenAPI::OptionalParam<QList<QString>> &filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &timestamp = ::OpenAPI::OptionalParam<qint32>());


    Q_DECL_DEPRECATED virtual void listRealtimeDimensions();


    Q_DECL_DEPRECATED virtual void listRealtimeMetrics();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getRealtimeBreakdownCallback(OAIHttpRequestWorker *worker);
    void getRealtimeHistogramTimeseriesCallback(OAIHttpRequestWorker *worker);
    void getRealtimeTimeseriesCallback(OAIHttpRequestWorker *worker);
    void listRealtimeDimensionsCallback(OAIHttpRequestWorker *worker);
    void listRealtimeMetricsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getRealtimeBreakdownSignal(OAIGetRealTimeBreakdownResponse summary);
    void getRealtimeHistogramTimeseriesSignal(OAIGetRealTimeHistogramTimeseriesResponse summary);
    void getRealtimeTimeseriesSignal(OAIGetRealTimeTimeseriesResponse summary);
    void listRealtimeDimensionsSignal(OAIListRealTimeDimensionsResponse summary);
    void listRealtimeMetricsSignal(OAIListRealTimeMetricsResponse summary);


    void getRealtimeBreakdownSignalFull(OAIHttpRequestWorker *worker, OAIGetRealTimeBreakdownResponse summary);
    void getRealtimeHistogramTimeseriesSignalFull(OAIHttpRequestWorker *worker, OAIGetRealTimeHistogramTimeseriesResponse summary);
    void getRealtimeTimeseriesSignalFull(OAIHttpRequestWorker *worker, OAIGetRealTimeTimeseriesResponse summary);
    void listRealtimeDimensionsSignalFull(OAIHttpRequestWorker *worker, OAIListRealTimeDimensionsResponse summary);
    void listRealtimeMetricsSignalFull(OAIHttpRequestWorker *worker, OAIListRealTimeMetricsResponse summary);

    Q_DECL_DEPRECATED_X("Use getRealtimeBreakdownSignalError() instead")
    void getRealtimeBreakdownSignalE(OAIGetRealTimeBreakdownResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRealtimeBreakdownSignalError(OAIGetRealTimeBreakdownResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRealtimeHistogramTimeseriesSignalError() instead")
    void getRealtimeHistogramTimeseriesSignalE(OAIGetRealTimeHistogramTimeseriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRealtimeHistogramTimeseriesSignalError(OAIGetRealTimeHistogramTimeseriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRealtimeTimeseriesSignalError() instead")
    void getRealtimeTimeseriesSignalE(OAIGetRealTimeTimeseriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRealtimeTimeseriesSignalError(OAIGetRealTimeTimeseriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRealtimeDimensionsSignalError() instead")
    void listRealtimeDimensionsSignalE(OAIListRealTimeDimensionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRealtimeDimensionsSignalError(OAIListRealTimeDimensionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRealtimeMetricsSignalError() instead")
    void listRealtimeMetricsSignalE(OAIListRealTimeMetricsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRealtimeMetricsSignalError(OAIListRealTimeMetricsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getRealtimeBreakdownSignalErrorFull() instead")
    void getRealtimeBreakdownSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRealtimeBreakdownSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRealtimeHistogramTimeseriesSignalErrorFull() instead")
    void getRealtimeHistogramTimeseriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRealtimeHistogramTimeseriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRealtimeTimeseriesSignalErrorFull() instead")
    void getRealtimeTimeseriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRealtimeTimeseriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRealtimeDimensionsSignalErrorFull() instead")
    void listRealtimeDimensionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRealtimeDimensionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRealtimeMetricsSignalErrorFull() instead")
    void listRealtimeMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRealtimeMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
