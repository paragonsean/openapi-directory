/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateBroadcastRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateBroadcastRequest::OAICreateBroadcastRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateBroadcastRequest::OAICreateBroadcastRequest() {
    this->initializeModel();
}

OAICreateBroadcastRequest::~OAICreateBroadcastRequest() {}

void OAICreateBroadcastRequest::initializeModel() {

    m_background_isSet = false;
    m_background_isValid = false;

    m_layout_isSet = false;
    m_layout_isValid = false;

    m_live_stream_id_isSet = false;
    m_live_stream_id_isValid = false;

    m_passthrough_isSet = false;
    m_passthrough_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;
}

void OAICreateBroadcastRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateBroadcastRequest::fromJsonObject(QJsonObject json) {

    m_background_isValid = ::OpenAPI::fromJsonValue(m_background, json[QString("background")]);
    m_background_isSet = !json[QString("background")].isNull() && m_background_isValid;

    m_layout_isValid = ::OpenAPI::fromJsonValue(m_layout, json[QString("layout")]);
    m_layout_isSet = !json[QString("layout")].isNull() && m_layout_isValid;

    m_live_stream_id_isValid = ::OpenAPI::fromJsonValue(m_live_stream_id, json[QString("live_stream_id")]);
    m_live_stream_id_isSet = !json[QString("live_stream_id")].isNull() && m_live_stream_id_isValid;

    m_passthrough_isValid = ::OpenAPI::fromJsonValue(m_passthrough, json[QString("passthrough")]);
    m_passthrough_isSet = !json[QString("passthrough")].isNull() && m_passthrough_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;
}

QString OAICreateBroadcastRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateBroadcastRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_background_isSet) {
        obj.insert(QString("background"), ::OpenAPI::toJsonValue(m_background));
    }
    if (m_layout.isSet()) {
        obj.insert(QString("layout"), ::OpenAPI::toJsonValue(m_layout));
    }
    if (m_live_stream_id_isSet) {
        obj.insert(QString("live_stream_id"), ::OpenAPI::toJsonValue(m_live_stream_id));
    }
    if (m_passthrough_isSet) {
        obj.insert(QString("passthrough"), ::OpenAPI::toJsonValue(m_passthrough));
    }
    if (m_resolution.isSet()) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    return obj;
}

QString OAICreateBroadcastRequest::getBackground() const {
    return m_background;
}
void OAICreateBroadcastRequest::setBackground(const QString &background) {
    m_background = background;
    m_background_isSet = true;
}

bool OAICreateBroadcastRequest::is_background_Set() const{
    return m_background_isSet;
}

bool OAICreateBroadcastRequest::is_background_Valid() const{
    return m_background_isValid;
}

OAIBroadcastLayout OAICreateBroadcastRequest::getLayout() const {
    return m_layout;
}
void OAICreateBroadcastRequest::setLayout(const OAIBroadcastLayout &layout) {
    m_layout = layout;
    m_layout_isSet = true;
}

bool OAICreateBroadcastRequest::is_layout_Set() const{
    return m_layout_isSet;
}

bool OAICreateBroadcastRequest::is_layout_Valid() const{
    return m_layout_isValid;
}

QString OAICreateBroadcastRequest::getLiveStreamId() const {
    return m_live_stream_id;
}
void OAICreateBroadcastRequest::setLiveStreamId(const QString &live_stream_id) {
    m_live_stream_id = live_stream_id;
    m_live_stream_id_isSet = true;
}

bool OAICreateBroadcastRequest::is_live_stream_id_Set() const{
    return m_live_stream_id_isSet;
}

bool OAICreateBroadcastRequest::is_live_stream_id_Valid() const{
    return m_live_stream_id_isValid;
}

QString OAICreateBroadcastRequest::getPassthrough() const {
    return m_passthrough;
}
void OAICreateBroadcastRequest::setPassthrough(const QString &passthrough) {
    m_passthrough = passthrough;
    m_passthrough_isSet = true;
}

bool OAICreateBroadcastRequest::is_passthrough_Set() const{
    return m_passthrough_isSet;
}

bool OAICreateBroadcastRequest::is_passthrough_Valid() const{
    return m_passthrough_isValid;
}

OAIBroadcastResolution OAICreateBroadcastRequest::getResolution() const {
    return m_resolution;
}
void OAICreateBroadcastRequest::setResolution(const OAIBroadcastResolution &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAICreateBroadcastRequest::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAICreateBroadcastRequest::is_resolution_Valid() const{
    return m_resolution_isValid;
}

bool OAICreateBroadcastRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layout.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passthrough_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateBroadcastRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_live_stream_id_isValid && true;
}

} // namespace OpenAPI
