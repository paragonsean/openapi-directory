/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpload::OAIUpload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpload::OAIUpload() {
    this->initializeModel();
}

OAIUpload::~OAIUpload() {}

void OAIUpload::initializeModel() {

    m_asset_id_isSet = false;
    m_asset_id_isValid = false;

    m_cors_origin_isSet = false;
    m_cors_origin_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_new_asset_settings_isSet = false;
    m_new_asset_settings_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIUpload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpload::fromJsonObject(QJsonObject json) {

    m_asset_id_isValid = ::OpenAPI::fromJsonValue(m_asset_id, json[QString("asset_id")]);
    m_asset_id_isSet = !json[QString("asset_id")].isNull() && m_asset_id_isValid;

    m_cors_origin_isValid = ::OpenAPI::fromJsonValue(m_cors_origin, json[QString("cors_origin")]);
    m_cors_origin_isSet = !json[QString("cors_origin")].isNull() && m_cors_origin_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_new_asset_settings_isValid = ::OpenAPI::fromJsonValue(m_new_asset_settings, json[QString("new_asset_settings")]);
    m_new_asset_settings_isSet = !json[QString("new_asset_settings")].isNull() && m_new_asset_settings_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIUpload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpload::asJsonObject() const {
    QJsonObject obj;
    if (m_asset_id_isSet) {
        obj.insert(QString("asset_id"), ::OpenAPI::toJsonValue(m_asset_id));
    }
    if (m_cors_origin_isSet) {
        obj.insert(QString("cors_origin"), ::OpenAPI::toJsonValue(m_cors_origin));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_new_asset_settings.isSet()) {
        obj.insert(QString("new_asset_settings"), ::OpenAPI::toJsonValue(m_new_asset_settings));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_test_isSet) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIUpload::getAssetId() const {
    return m_asset_id;
}
void OAIUpload::setAssetId(const QString &asset_id) {
    m_asset_id = asset_id;
    m_asset_id_isSet = true;
}

bool OAIUpload::is_asset_id_Set() const{
    return m_asset_id_isSet;
}

bool OAIUpload::is_asset_id_Valid() const{
    return m_asset_id_isValid;
}

QString OAIUpload::getCorsOrigin() const {
    return m_cors_origin;
}
void OAIUpload::setCorsOrigin(const QString &cors_origin) {
    m_cors_origin = cors_origin;
    m_cors_origin_isSet = true;
}

bool OAIUpload::is_cors_origin_Set() const{
    return m_cors_origin_isSet;
}

bool OAIUpload::is_cors_origin_Valid() const{
    return m_cors_origin_isValid;
}

OAIUpload_error OAIUpload::getError() const {
    return m_error;
}
void OAIUpload::setError(const OAIUpload_error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIUpload::is_error_Set() const{
    return m_error_isSet;
}

bool OAIUpload::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIUpload::getId() const {
    return m_id;
}
void OAIUpload::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpload::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpload::is_id_Valid() const{
    return m_id_isValid;
}

OAIAsset OAIUpload::getNewAssetSettings() const {
    return m_new_asset_settings;
}
void OAIUpload::setNewAssetSettings(const OAIAsset &new_asset_settings) {
    m_new_asset_settings = new_asset_settings;
    m_new_asset_settings_isSet = true;
}

bool OAIUpload::is_new_asset_settings_Set() const{
    return m_new_asset_settings_isSet;
}

bool OAIUpload::is_new_asset_settings_Valid() const{
    return m_new_asset_settings_isValid;
}

QString OAIUpload::getStatus() const {
    return m_status;
}
void OAIUpload::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUpload::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUpload::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIUpload::isTest() const {
    return m_test;
}
void OAIUpload::setTest(const bool &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAIUpload::is_test_Set() const{
    return m_test_isSet;
}

bool OAIUpload::is_test_Valid() const{
    return m_test_isValid;
}

qint32 OAIUpload::getTimeout() const {
    return m_timeout;
}
void OAIUpload::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIUpload::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIUpload::is_timeout_Valid() const{
    return m_timeout_isValid;
}

QString OAIUpload::getUrl() const {
    return m_url;
}
void OAIUpload::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIUpload::is_url_Set() const{
    return m_url_isSet;
}

bool OAIUpload::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIUpload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cors_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_asset_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
