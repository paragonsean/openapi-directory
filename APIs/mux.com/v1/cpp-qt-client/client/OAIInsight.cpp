/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsight.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsight::OAIInsight(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsight::OAIInsight() {
    this->initializeModel();
}

OAIInsight::~OAIInsight() {}

void OAIInsight::initializeModel() {

    m_filter_column_isSet = false;
    m_filter_column_isValid = false;

    m_filter_value_isSet = false;
    m_filter_value_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_negative_impact_score_isSet = false;
    m_negative_impact_score_isValid = false;

    m_total_views_isSet = false;
    m_total_views_isValid = false;

    m_total_watch_time_isSet = false;
    m_total_watch_time_isValid = false;
}

void OAIInsight::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsight::fromJsonObject(QJsonObject json) {

    m_filter_column_isValid = ::OpenAPI::fromJsonValue(m_filter_column, json[QString("filter_column")]);
    m_filter_column_isSet = !json[QString("filter_column")].isNull() && m_filter_column_isValid;

    m_filter_value_isValid = ::OpenAPI::fromJsonValue(m_filter_value, json[QString("filter_value")]);
    m_filter_value_isSet = !json[QString("filter_value")].isNull() && m_filter_value_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("metric")]);
    m_metric_isSet = !json[QString("metric")].isNull() && m_metric_isValid;

    m_negative_impact_score_isValid = ::OpenAPI::fromJsonValue(m_negative_impact_score, json[QString("negative_impact_score")]);
    m_negative_impact_score_isSet = !json[QString("negative_impact_score")].isNull() && m_negative_impact_score_isValid;

    m_total_views_isValid = ::OpenAPI::fromJsonValue(m_total_views, json[QString("total_views")]);
    m_total_views_isSet = !json[QString("total_views")].isNull() && m_total_views_isValid;

    m_total_watch_time_isValid = ::OpenAPI::fromJsonValue(m_total_watch_time, json[QString("total_watch_time")]);
    m_total_watch_time_isSet = !json[QString("total_watch_time")].isNull() && m_total_watch_time_isValid;
}

QString OAIInsight::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsight::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_column_isSet) {
        obj.insert(QString("filter_column"), ::OpenAPI::toJsonValue(m_filter_column));
    }
    if (m_filter_value_isSet) {
        obj.insert(QString("filter_value"), ::OpenAPI::toJsonValue(m_filter_value));
    }
    if (m_metric_isSet) {
        obj.insert(QString("metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_negative_impact_score_isSet) {
        obj.insert(QString("negative_impact_score"), ::OpenAPI::toJsonValue(m_negative_impact_score));
    }
    if (m_total_views_isSet) {
        obj.insert(QString("total_views"), ::OpenAPI::toJsonValue(m_total_views));
    }
    if (m_total_watch_time_isSet) {
        obj.insert(QString("total_watch_time"), ::OpenAPI::toJsonValue(m_total_watch_time));
    }
    return obj;
}

QString OAIInsight::getFilterColumn() const {
    return m_filter_column;
}
void OAIInsight::setFilterColumn(const QString &filter_column) {
    m_filter_column = filter_column;
    m_filter_column_isSet = true;
}

bool OAIInsight::is_filter_column_Set() const{
    return m_filter_column_isSet;
}

bool OAIInsight::is_filter_column_Valid() const{
    return m_filter_column_isValid;
}

QString OAIInsight::getFilterValue() const {
    return m_filter_value;
}
void OAIInsight::setFilterValue(const QString &filter_value) {
    m_filter_value = filter_value;
    m_filter_value_isSet = true;
}

bool OAIInsight::is_filter_value_Set() const{
    return m_filter_value_isSet;
}

bool OAIInsight::is_filter_value_Valid() const{
    return m_filter_value_isValid;
}

double OAIInsight::getMetric() const {
    return m_metric;
}
void OAIInsight::setMetric(const double &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIInsight::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIInsight::is_metric_Valid() const{
    return m_metric_isValid;
}

float OAIInsight::getNegativeImpactScore() const {
    return m_negative_impact_score;
}
void OAIInsight::setNegativeImpactScore(const float &negative_impact_score) {
    m_negative_impact_score = negative_impact_score;
    m_negative_impact_score_isSet = true;
}

bool OAIInsight::is_negative_impact_score_Set() const{
    return m_negative_impact_score_isSet;
}

bool OAIInsight::is_negative_impact_score_Valid() const{
    return m_negative_impact_score_isValid;
}

qint64 OAIInsight::getTotalViews() const {
    return m_total_views;
}
void OAIInsight::setTotalViews(const qint64 &total_views) {
    m_total_views = total_views;
    m_total_views_isSet = true;
}

bool OAIInsight::is_total_views_Set() const{
    return m_total_views_isSet;
}

bool OAIInsight::is_total_views_Valid() const{
    return m_total_views_isValid;
}

qint64 OAIInsight::getTotalWatchTime() const {
    return m_total_watch_time;
}
void OAIInsight::setTotalWatchTime(const qint64 &total_watch_time) {
    m_total_watch_time = total_watch_time;
    m_total_watch_time_isSet = true;
}

bool OAIInsight::is_total_watch_time_Set() const{
    return m_total_watch_time_isSet;
}

bool OAIInsight::is_total_watch_time_Valid() const{
    return m_total_watch_time_isValid;
}

bool OAIInsight::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_negative_impact_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_views_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_watch_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsight::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
