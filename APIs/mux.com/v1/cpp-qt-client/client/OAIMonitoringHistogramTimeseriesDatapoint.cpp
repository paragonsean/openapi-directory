/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonitoringHistogramTimeseriesDatapoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonitoringHistogramTimeseriesDatapoint::OAIMonitoringHistogramTimeseriesDatapoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonitoringHistogramTimeseriesDatapoint::OAIMonitoringHistogramTimeseriesDatapoint() {
    this->initializeModel();
}

OAIMonitoringHistogramTimeseriesDatapoint::~OAIMonitoringHistogramTimeseriesDatapoint() {}

void OAIMonitoringHistogramTimeseriesDatapoint::initializeModel() {

    m_average_isSet = false;
    m_average_isValid = false;

    m_bucket_values_isSet = false;
    m_bucket_values_isValid = false;

    m_max_percentage_isSet = false;
    m_max_percentage_isValid = false;

    m_median_isSet = false;
    m_median_isValid = false;

    m_p95_isSet = false;
    m_p95_isValid = false;

    m_sum_isSet = false;
    m_sum_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIMonitoringHistogramTimeseriesDatapoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonitoringHistogramTimeseriesDatapoint::fromJsonObject(QJsonObject json) {

    m_average_isValid = ::OpenAPI::fromJsonValue(m_average, json[QString("average")]);
    m_average_isSet = !json[QString("average")].isNull() && m_average_isValid;

    m_bucket_values_isValid = ::OpenAPI::fromJsonValue(m_bucket_values, json[QString("bucket_values")]);
    m_bucket_values_isSet = !json[QString("bucket_values")].isNull() && m_bucket_values_isValid;

    m_max_percentage_isValid = ::OpenAPI::fromJsonValue(m_max_percentage, json[QString("max_percentage")]);
    m_max_percentage_isSet = !json[QString("max_percentage")].isNull() && m_max_percentage_isValid;

    m_median_isValid = ::OpenAPI::fromJsonValue(m_median, json[QString("median")]);
    m_median_isSet = !json[QString("median")].isNull() && m_median_isValid;

    m_p95_isValid = ::OpenAPI::fromJsonValue(m_p95, json[QString("p95")]);
    m_p95_isSet = !json[QString("p95")].isNull() && m_p95_isValid;

    m_sum_isValid = ::OpenAPI::fromJsonValue(m_sum, json[QString("sum")]);
    m_sum_isSet = !json[QString("sum")].isNull() && m_sum_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIMonitoringHistogramTimeseriesDatapoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonitoringHistogramTimeseriesDatapoint::asJsonObject() const {
    QJsonObject obj;
    if (m_average_isSet) {
        obj.insert(QString("average"), ::OpenAPI::toJsonValue(m_average));
    }
    if (m_bucket_values.size() > 0) {
        obj.insert(QString("bucket_values"), ::OpenAPI::toJsonValue(m_bucket_values));
    }
    if (m_max_percentage_isSet) {
        obj.insert(QString("max_percentage"), ::OpenAPI::toJsonValue(m_max_percentage));
    }
    if (m_median_isSet) {
        obj.insert(QString("median"), ::OpenAPI::toJsonValue(m_median));
    }
    if (m_p95_isSet) {
        obj.insert(QString("p95"), ::OpenAPI::toJsonValue(m_p95));
    }
    if (m_sum_isSet) {
        obj.insert(QString("sum"), ::OpenAPI::toJsonValue(m_sum));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

double OAIMonitoringHistogramTimeseriesDatapoint::getAverage() const {
    return m_average;
}
void OAIMonitoringHistogramTimeseriesDatapoint::setAverage(const double &average) {
    m_average = average;
    m_average_isSet = true;
}

bool OAIMonitoringHistogramTimeseriesDatapoint::is_average_Set() const{
    return m_average_isSet;
}

bool OAIMonitoringHistogramTimeseriesDatapoint::is_average_Valid() const{
    return m_average_isValid;
}

QList<OAIMonitoringHistogramTimeseriesBucketValues> OAIMonitoringHistogramTimeseriesDatapoint::getBucketValues() const {
    return m_bucket_values;
}
void OAIMonitoringHistogramTimeseriesDatapoint::setBucketValues(const QList<OAIMonitoringHistogramTimeseriesBucketValues> &bucket_values) {
    m_bucket_values = bucket_values;
    m_bucket_values_isSet = true;
}

bool OAIMonitoringHistogramTimeseriesDatapoint::is_bucket_values_Set() const{
    return m_bucket_values_isSet;
}

bool OAIMonitoringHistogramTimeseriesDatapoint::is_bucket_values_Valid() const{
    return m_bucket_values_isValid;
}

double OAIMonitoringHistogramTimeseriesDatapoint::getMaxPercentage() const {
    return m_max_percentage;
}
void OAIMonitoringHistogramTimeseriesDatapoint::setMaxPercentage(const double &max_percentage) {
    m_max_percentage = max_percentage;
    m_max_percentage_isSet = true;
}

bool OAIMonitoringHistogramTimeseriesDatapoint::is_max_percentage_Set() const{
    return m_max_percentage_isSet;
}

bool OAIMonitoringHistogramTimeseriesDatapoint::is_max_percentage_Valid() const{
    return m_max_percentage_isValid;
}

double OAIMonitoringHistogramTimeseriesDatapoint::getMedian() const {
    return m_median;
}
void OAIMonitoringHistogramTimeseriesDatapoint::setMedian(const double &median) {
    m_median = median;
    m_median_isSet = true;
}

bool OAIMonitoringHistogramTimeseriesDatapoint::is_median_Set() const{
    return m_median_isSet;
}

bool OAIMonitoringHistogramTimeseriesDatapoint::is_median_Valid() const{
    return m_median_isValid;
}

double OAIMonitoringHistogramTimeseriesDatapoint::getP95() const {
    return m_p95;
}
void OAIMonitoringHistogramTimeseriesDatapoint::setP95(const double &p95) {
    m_p95 = p95;
    m_p95_isSet = true;
}

bool OAIMonitoringHistogramTimeseriesDatapoint::is_p95_Set() const{
    return m_p95_isSet;
}

bool OAIMonitoringHistogramTimeseriesDatapoint::is_p95_Valid() const{
    return m_p95_isValid;
}

qint64 OAIMonitoringHistogramTimeseriesDatapoint::getSum() const {
    return m_sum;
}
void OAIMonitoringHistogramTimeseriesDatapoint::setSum(const qint64 &sum) {
    m_sum = sum;
    m_sum_isSet = true;
}

bool OAIMonitoringHistogramTimeseriesDatapoint::is_sum_Set() const{
    return m_sum_isSet;
}

bool OAIMonitoringHistogramTimeseriesDatapoint::is_sum_Valid() const{
    return m_sum_isValid;
}

QString OAIMonitoringHistogramTimeseriesDatapoint::getTimestamp() const {
    return m_timestamp;
}
void OAIMonitoringHistogramTimeseriesDatapoint::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIMonitoringHistogramTimeseriesDatapoint::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIMonitoringHistogramTimeseriesDatapoint::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIMonitoringHistogramTimeseriesDatapoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_median_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p95_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonitoringHistogramTimeseriesDatapoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
