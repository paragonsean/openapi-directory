/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsset_static_renditions_files_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsset_static_renditions_files_inner::OAIAsset_static_renditions_files_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsset_static_renditions_files_inner::OAIAsset_static_renditions_files_inner() {
    this->initializeModel();
}

OAIAsset_static_renditions_files_inner::~OAIAsset_static_renditions_files_inner() {}

void OAIAsset_static_renditions_files_inner::initializeModel() {

    m_bitrate_isSet = false;
    m_bitrate_isValid = false;

    m_ext_isSet = false;
    m_ext_isValid = false;

    m_filesize_isSet = false;
    m_filesize_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIAsset_static_renditions_files_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsset_static_renditions_files_inner::fromJsonObject(QJsonObject json) {

    m_bitrate_isValid = ::OpenAPI::fromJsonValue(m_bitrate, json[QString("bitrate")]);
    m_bitrate_isSet = !json[QString("bitrate")].isNull() && m_bitrate_isValid;

    m_ext_isValid = ::OpenAPI::fromJsonValue(m_ext, json[QString("ext")]);
    m_ext_isSet = !json[QString("ext")].isNull() && m_ext_isValid;

    m_filesize_isValid = ::OpenAPI::fromJsonValue(m_filesize, json[QString("filesize")]);
    m_filesize_isSet = !json[QString("filesize")].isNull() && m_filesize_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIAsset_static_renditions_files_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsset_static_renditions_files_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_bitrate_isSet) {
        obj.insert(QString("bitrate"), ::OpenAPI::toJsonValue(m_bitrate));
    }
    if (m_ext_isSet) {
        obj.insert(QString("ext"), ::OpenAPI::toJsonValue(m_ext));
    }
    if (m_filesize_isSet) {
        obj.insert(QString("filesize"), ::OpenAPI::toJsonValue(m_filesize));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

qint64 OAIAsset_static_renditions_files_inner::getBitrate() const {
    return m_bitrate;
}
void OAIAsset_static_renditions_files_inner::setBitrate(const qint64 &bitrate) {
    m_bitrate = bitrate;
    m_bitrate_isSet = true;
}

bool OAIAsset_static_renditions_files_inner::is_bitrate_Set() const{
    return m_bitrate_isSet;
}

bool OAIAsset_static_renditions_files_inner::is_bitrate_Valid() const{
    return m_bitrate_isValid;
}

QString OAIAsset_static_renditions_files_inner::getExt() const {
    return m_ext;
}
void OAIAsset_static_renditions_files_inner::setExt(const QString &ext) {
    m_ext = ext;
    m_ext_isSet = true;
}

bool OAIAsset_static_renditions_files_inner::is_ext_Set() const{
    return m_ext_isSet;
}

bool OAIAsset_static_renditions_files_inner::is_ext_Valid() const{
    return m_ext_isValid;
}

QString OAIAsset_static_renditions_files_inner::getFilesize() const {
    return m_filesize;
}
void OAIAsset_static_renditions_files_inner::setFilesize(const QString &filesize) {
    m_filesize = filesize;
    m_filesize_isSet = true;
}

bool OAIAsset_static_renditions_files_inner::is_filesize_Set() const{
    return m_filesize_isSet;
}

bool OAIAsset_static_renditions_files_inner::is_filesize_Valid() const{
    return m_filesize_isValid;
}

qint32 OAIAsset_static_renditions_files_inner::getHeight() const {
    return m_height;
}
void OAIAsset_static_renditions_files_inner::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIAsset_static_renditions_files_inner::is_height_Set() const{
    return m_height_isSet;
}

bool OAIAsset_static_renditions_files_inner::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIAsset_static_renditions_files_inner::getName() const {
    return m_name;
}
void OAIAsset_static_renditions_files_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAsset_static_renditions_files_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAsset_static_renditions_files_inner::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIAsset_static_renditions_files_inner::getWidth() const {
    return m_width;
}
void OAIAsset_static_renditions_files_inner::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIAsset_static_renditions_files_inner::is_width_Set() const{
    return m_width_isSet;
}

bool OAIAsset_static_renditions_files_inner::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIAsset_static_renditions_files_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ext_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filesize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsset_static_renditions_files_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
