/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputFile::OAIInputFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputFile::OAIInputFile() {
    this->initializeModel();
}

OAIInputFile::~OAIInputFile() {}

void OAIInputFile::initializeModel() {

    m_container_format_isSet = false;
    m_container_format_isValid = false;

    m_tracks_isSet = false;
    m_tracks_isValid = false;
}

void OAIInputFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputFile::fromJsonObject(QJsonObject json) {

    m_container_format_isValid = ::OpenAPI::fromJsonValue(m_container_format, json[QString("container_format")]);
    m_container_format_isSet = !json[QString("container_format")].isNull() && m_container_format_isValid;

    m_tracks_isValid = ::OpenAPI::fromJsonValue(m_tracks, json[QString("tracks")]);
    m_tracks_isSet = !json[QString("tracks")].isNull() && m_tracks_isValid;
}

QString OAIInputFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputFile::asJsonObject() const {
    QJsonObject obj;
    if (m_container_format_isSet) {
        obj.insert(QString("container_format"), ::OpenAPI::toJsonValue(m_container_format));
    }
    if (m_tracks.size() > 0) {
        obj.insert(QString("tracks"), ::OpenAPI::toJsonValue(m_tracks));
    }
    return obj;
}

QString OAIInputFile::getContainerFormat() const {
    return m_container_format;
}
void OAIInputFile::setContainerFormat(const QString &container_format) {
    m_container_format = container_format;
    m_container_format_isSet = true;
}

bool OAIInputFile::is_container_format_Set() const{
    return m_container_format_isSet;
}

bool OAIInputFile::is_container_format_Valid() const{
    return m_container_format_isValid;
}

QList<OAIInputTrack> OAIInputFile::getTracks() const {
    return m_tracks;
}
void OAIInputFile::setTracks(const QList<OAIInputTrack> &tracks) {
    m_tracks = tracks;
    m_tracks_isSet = true;
}

bool OAIInputFile::is_tracks_Set() const{
    return m_tracks_isSet;
}

bool OAIInputFile::is_tracks_Valid() const{
    return m_tracks_isValid;
}

bool OAIInputFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
