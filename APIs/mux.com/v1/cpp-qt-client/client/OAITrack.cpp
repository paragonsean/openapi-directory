/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrack.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrack::OAITrack(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrack::OAITrack() {
    this->initializeModel();
}

OAITrack::~OAITrack() {}

void OAITrack::initializeModel() {

    m_closed_captions_isSet = false;
    m_closed_captions_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_max_channel_layout_isSet = false;
    m_max_channel_layout_isValid = false;

    m_max_channels_isSet = false;
    m_max_channels_isValid = false;

    m_max_frame_rate_isSet = false;
    m_max_frame_rate_isValid = false;

    m_max_height_isSet = false;
    m_max_height_isValid = false;

    m_max_width_isSet = false;
    m_max_width_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_passthrough_isSet = false;
    m_passthrough_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_text_source_isSet = false;
    m_text_source_isValid = false;

    m_text_type_isSet = false;
    m_text_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITrack::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrack::fromJsonObject(QJsonObject json) {

    m_closed_captions_isValid = ::OpenAPI::fromJsonValue(m_closed_captions, json[QString("closed_captions")]);
    m_closed_captions_isSet = !json[QString("closed_captions")].isNull() && m_closed_captions_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("language_code")]);
    m_language_code_isSet = !json[QString("language_code")].isNull() && m_language_code_isValid;

    m_max_channel_layout_isValid = ::OpenAPI::fromJsonValue(m_max_channel_layout, json[QString("max_channel_layout")]);
    m_max_channel_layout_isSet = !json[QString("max_channel_layout")].isNull() && m_max_channel_layout_isValid;

    m_max_channels_isValid = ::OpenAPI::fromJsonValue(m_max_channels, json[QString("max_channels")]);
    m_max_channels_isSet = !json[QString("max_channels")].isNull() && m_max_channels_isValid;

    m_max_frame_rate_isValid = ::OpenAPI::fromJsonValue(m_max_frame_rate, json[QString("max_frame_rate")]);
    m_max_frame_rate_isSet = !json[QString("max_frame_rate")].isNull() && m_max_frame_rate_isValid;

    m_max_height_isValid = ::OpenAPI::fromJsonValue(m_max_height, json[QString("max_height")]);
    m_max_height_isSet = !json[QString("max_height")].isNull() && m_max_height_isValid;

    m_max_width_isValid = ::OpenAPI::fromJsonValue(m_max_width, json[QString("max_width")]);
    m_max_width_isSet = !json[QString("max_width")].isNull() && m_max_width_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_passthrough_isValid = ::OpenAPI::fromJsonValue(m_passthrough, json[QString("passthrough")]);
    m_passthrough_isSet = !json[QString("passthrough")].isNull() && m_passthrough_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_text_source_isValid = ::OpenAPI::fromJsonValue(m_text_source, json[QString("text_source")]);
    m_text_source_isSet = !json[QString("text_source")].isNull() && m_text_source_isValid;

    m_text_type_isValid = ::OpenAPI::fromJsonValue(m_text_type, json[QString("text_type")]);
    m_text_type_isSet = !json[QString("text_type")].isNull() && m_text_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITrack::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrack::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_captions_isSet) {
        obj.insert(QString("closed_captions"), ::OpenAPI::toJsonValue(m_closed_captions));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("language_code"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_max_channel_layout_isSet) {
        obj.insert(QString("max_channel_layout"), ::OpenAPI::toJsonValue(m_max_channel_layout));
    }
    if (m_max_channels_isSet) {
        obj.insert(QString("max_channels"), ::OpenAPI::toJsonValue(m_max_channels));
    }
    if (m_max_frame_rate_isSet) {
        obj.insert(QString("max_frame_rate"), ::OpenAPI::toJsonValue(m_max_frame_rate));
    }
    if (m_max_height_isSet) {
        obj.insert(QString("max_height"), ::OpenAPI::toJsonValue(m_max_height));
    }
    if (m_max_width_isSet) {
        obj.insert(QString("max_width"), ::OpenAPI::toJsonValue(m_max_width));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_passthrough_isSet) {
        obj.insert(QString("passthrough"), ::OpenAPI::toJsonValue(m_passthrough));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_text_source_isSet) {
        obj.insert(QString("text_source"), ::OpenAPI::toJsonValue(m_text_source));
    }
    if (m_text_type_isSet) {
        obj.insert(QString("text_type"), ::OpenAPI::toJsonValue(m_text_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

bool OAITrack::isClosedCaptions() const {
    return m_closed_captions;
}
void OAITrack::setClosedCaptions(const bool &closed_captions) {
    m_closed_captions = closed_captions;
    m_closed_captions_isSet = true;
}

bool OAITrack::is_closed_captions_Set() const{
    return m_closed_captions_isSet;
}

bool OAITrack::is_closed_captions_Valid() const{
    return m_closed_captions_isValid;
}

double OAITrack::getDuration() const {
    return m_duration;
}
void OAITrack::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAITrack::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAITrack::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAITrack::getId() const {
    return m_id;
}
void OAITrack::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITrack::is_id_Set() const{
    return m_id_isSet;
}

bool OAITrack::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITrack::getLanguageCode() const {
    return m_language_code;
}
void OAITrack::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAITrack::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAITrack::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAITrack::getMaxChannelLayout() const {
    return m_max_channel_layout;
}
void OAITrack::setMaxChannelLayout(const QString &max_channel_layout) {
    m_max_channel_layout = max_channel_layout;
    m_max_channel_layout_isSet = true;
}

bool OAITrack::is_max_channel_layout_Set() const{
    return m_max_channel_layout_isSet;
}

bool OAITrack::is_max_channel_layout_Valid() const{
    return m_max_channel_layout_isValid;
}

qint64 OAITrack::getMaxChannels() const {
    return m_max_channels;
}
void OAITrack::setMaxChannels(const qint64 &max_channels) {
    m_max_channels = max_channels;
    m_max_channels_isSet = true;
}

bool OAITrack::is_max_channels_Set() const{
    return m_max_channels_isSet;
}

bool OAITrack::is_max_channels_Valid() const{
    return m_max_channels_isValid;
}

double OAITrack::getMaxFrameRate() const {
    return m_max_frame_rate;
}
void OAITrack::setMaxFrameRate(const double &max_frame_rate) {
    m_max_frame_rate = max_frame_rate;
    m_max_frame_rate_isSet = true;
}

bool OAITrack::is_max_frame_rate_Set() const{
    return m_max_frame_rate_isSet;
}

bool OAITrack::is_max_frame_rate_Valid() const{
    return m_max_frame_rate_isValid;
}

qint64 OAITrack::getMaxHeight() const {
    return m_max_height;
}
void OAITrack::setMaxHeight(const qint64 &max_height) {
    m_max_height = max_height;
    m_max_height_isSet = true;
}

bool OAITrack::is_max_height_Set() const{
    return m_max_height_isSet;
}

bool OAITrack::is_max_height_Valid() const{
    return m_max_height_isValid;
}

qint64 OAITrack::getMaxWidth() const {
    return m_max_width;
}
void OAITrack::setMaxWidth(const qint64 &max_width) {
    m_max_width = max_width;
    m_max_width_isSet = true;
}

bool OAITrack::is_max_width_Set() const{
    return m_max_width_isSet;
}

bool OAITrack::is_max_width_Valid() const{
    return m_max_width_isValid;
}

QString OAITrack::getName() const {
    return m_name;
}
void OAITrack::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITrack::is_name_Set() const{
    return m_name_isSet;
}

bool OAITrack::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITrack::getPassthrough() const {
    return m_passthrough;
}
void OAITrack::setPassthrough(const QString &passthrough) {
    m_passthrough = passthrough;
    m_passthrough_isSet = true;
}

bool OAITrack::is_passthrough_Set() const{
    return m_passthrough_isSet;
}

bool OAITrack::is_passthrough_Valid() const{
    return m_passthrough_isValid;
}

QString OAITrack::getStatus() const {
    return m_status;
}
void OAITrack::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITrack::is_status_Set() const{
    return m_status_isSet;
}

bool OAITrack::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITrack::getTextSource() const {
    return m_text_source;
}
void OAITrack::setTextSource(const QString &text_source) {
    m_text_source = text_source;
    m_text_source_isSet = true;
}

bool OAITrack::is_text_source_Set() const{
    return m_text_source_isSet;
}

bool OAITrack::is_text_source_Valid() const{
    return m_text_source_isValid;
}

QString OAITrack::getTextType() const {
    return m_text_type;
}
void OAITrack::setTextType(const QString &text_type) {
    m_text_type = text_type;
    m_text_type_isSet = true;
}

bool OAITrack::is_text_type_Set() const{
    return m_text_type_isSet;
}

bool OAITrack::is_text_type_Valid() const{
    return m_text_type_isValid;
}

QString OAITrack::getType() const {
    return m_type;
}
void OAITrack::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITrack::is_type_Set() const{
    return m_type_isSet;
}

bool OAITrack::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITrack::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_captions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_channel_layout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_frame_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passthrough_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrack::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
