/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBroadcastResolution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBroadcastResolution::OAIBroadcastResolution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBroadcastResolution::OAIBroadcastResolution() {
    this->initializeModel();
}

OAIBroadcastResolution::~OAIBroadcastResolution() {}

void OAIBroadcastResolution::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBroadcastResolution::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBroadcastResolution::fromJson(QString jsonString) {
    
    if ( jsonString.compare("1920x1080", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBroadcastResolution::_1920X1080;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("1280x720", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBroadcastResolution::_1280X720;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("1080x1920", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBroadcastResolution::_1080X1920;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("720x1280", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBroadcastResolution::_720X1280;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("1080x1080", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBroadcastResolution::_1080X1080;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("720x720", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBroadcastResolution::_720X720;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBroadcastResolution::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBroadcastResolution::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBroadcastResolution::_1920X1080:
            val = "1920x1080";
            break;
        case eOAIBroadcastResolution::_1280X720:
            val = "1280x720";
            break;
        case eOAIBroadcastResolution::_1080X1920:
            val = "1080x1920";
            break;
        case eOAIBroadcastResolution::_720X1280:
            val = "720x1280";
            break;
        case eOAIBroadcastResolution::_1080X1080:
            val = "1080x1080";
            break;
        case eOAIBroadcastResolution::_720X720:
            val = "720x720";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBroadcastResolution::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBroadcastResolution::eOAIBroadcastResolution OAIBroadcastResolution::getValue() const {
    return m_value;
}

void OAIBroadcastResolution::setValue(const OAIBroadcastResolution::eOAIBroadcastResolution& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBroadcastResolution::isSet() const {
    
    return m_value_isSet;
}

bool OAIBroadcastResolution::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
