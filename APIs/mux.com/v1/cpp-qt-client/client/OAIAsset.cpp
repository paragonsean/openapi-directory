/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsset::OAIAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsset::OAIAsset() {
    this->initializeModel();
}

OAIAsset::~OAIAsset() {}

void OAIAsset::initializeModel() {

    m_aspect_ratio_isSet = false;
    m_aspect_ratio_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_encoding_tier_isSet = false;
    m_encoding_tier_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_live_isSet = false;
    m_is_live_isValid = false;

    m_live_stream_id_isSet = false;
    m_live_stream_id_isValid = false;

    m_master_isSet = false;
    m_master_isValid = false;

    m_master_access_isSet = false;
    m_master_access_isValid = false;

    m_max_resolution_tier_isSet = false;
    m_max_resolution_tier_isValid = false;

    m_max_stored_frame_rate_isSet = false;
    m_max_stored_frame_rate_isValid = false;

    m_max_stored_resolution_isSet = false;
    m_max_stored_resolution_isValid = false;

    m_mp4_support_isSet = false;
    m_mp4_support_isValid = false;

    m_non_standard_input_reasons_isSet = false;
    m_non_standard_input_reasons_isValid = false;

    m_normalize_audio_isSet = false;
    m_normalize_audio_isValid = false;

    m_passthrough_isSet = false;
    m_passthrough_isValid = false;

    m_per_title_encode_isSet = false;
    m_per_title_encode_isValid = false;

    m_playback_ids_isSet = false;
    m_playback_ids_isValid = false;

    m_recording_times_isSet = false;
    m_recording_times_isValid = false;

    m_resolution_tier_isSet = false;
    m_resolution_tier_isValid = false;

    m_source_asset_id_isSet = false;
    m_source_asset_id_isValid = false;

    m_static_renditions_isSet = false;
    m_static_renditions_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;

    m_tracks_isSet = false;
    m_tracks_isValid = false;

    m_upload_id_isSet = false;
    m_upload_id_isValid = false;
}

void OAIAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsset::fromJsonObject(QJsonObject json) {

    m_aspect_ratio_isValid = ::OpenAPI::fromJsonValue(m_aspect_ratio, json[QString("aspect_ratio")]);
    m_aspect_ratio_isSet = !json[QString("aspect_ratio")].isNull() && m_aspect_ratio_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_encoding_tier_isValid = ::OpenAPI::fromJsonValue(m_encoding_tier, json[QString("encoding_tier")]);
    m_encoding_tier_isSet = !json[QString("encoding_tier")].isNull() && m_encoding_tier_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_live_isValid = ::OpenAPI::fromJsonValue(m_is_live, json[QString("is_live")]);
    m_is_live_isSet = !json[QString("is_live")].isNull() && m_is_live_isValid;

    m_live_stream_id_isValid = ::OpenAPI::fromJsonValue(m_live_stream_id, json[QString("live_stream_id")]);
    m_live_stream_id_isSet = !json[QString("live_stream_id")].isNull() && m_live_stream_id_isValid;

    m_master_isValid = ::OpenAPI::fromJsonValue(m_master, json[QString("master")]);
    m_master_isSet = !json[QString("master")].isNull() && m_master_isValid;

    m_master_access_isValid = ::OpenAPI::fromJsonValue(m_master_access, json[QString("master_access")]);
    m_master_access_isSet = !json[QString("master_access")].isNull() && m_master_access_isValid;

    m_max_resolution_tier_isValid = ::OpenAPI::fromJsonValue(m_max_resolution_tier, json[QString("max_resolution_tier")]);
    m_max_resolution_tier_isSet = !json[QString("max_resolution_tier")].isNull() && m_max_resolution_tier_isValid;

    m_max_stored_frame_rate_isValid = ::OpenAPI::fromJsonValue(m_max_stored_frame_rate, json[QString("max_stored_frame_rate")]);
    m_max_stored_frame_rate_isSet = !json[QString("max_stored_frame_rate")].isNull() && m_max_stored_frame_rate_isValid;

    m_max_stored_resolution_isValid = ::OpenAPI::fromJsonValue(m_max_stored_resolution, json[QString("max_stored_resolution")]);
    m_max_stored_resolution_isSet = !json[QString("max_stored_resolution")].isNull() && m_max_stored_resolution_isValid;

    m_mp4_support_isValid = ::OpenAPI::fromJsonValue(m_mp4_support, json[QString("mp4_support")]);
    m_mp4_support_isSet = !json[QString("mp4_support")].isNull() && m_mp4_support_isValid;

    m_non_standard_input_reasons_isValid = ::OpenAPI::fromJsonValue(m_non_standard_input_reasons, json[QString("non_standard_input_reasons")]);
    m_non_standard_input_reasons_isSet = !json[QString("non_standard_input_reasons")].isNull() && m_non_standard_input_reasons_isValid;

    m_normalize_audio_isValid = ::OpenAPI::fromJsonValue(m_normalize_audio, json[QString("normalize_audio")]);
    m_normalize_audio_isSet = !json[QString("normalize_audio")].isNull() && m_normalize_audio_isValid;

    m_passthrough_isValid = ::OpenAPI::fromJsonValue(m_passthrough, json[QString("passthrough")]);
    m_passthrough_isSet = !json[QString("passthrough")].isNull() && m_passthrough_isValid;

    m_per_title_encode_isValid = ::OpenAPI::fromJsonValue(m_per_title_encode, json[QString("per_title_encode")]);
    m_per_title_encode_isSet = !json[QString("per_title_encode")].isNull() && m_per_title_encode_isValid;

    m_playback_ids_isValid = ::OpenAPI::fromJsonValue(m_playback_ids, json[QString("playback_ids")]);
    m_playback_ids_isSet = !json[QString("playback_ids")].isNull() && m_playback_ids_isValid;

    m_recording_times_isValid = ::OpenAPI::fromJsonValue(m_recording_times, json[QString("recording_times")]);
    m_recording_times_isSet = !json[QString("recording_times")].isNull() && m_recording_times_isValid;

    m_resolution_tier_isValid = ::OpenAPI::fromJsonValue(m_resolution_tier, json[QString("resolution_tier")]);
    m_resolution_tier_isSet = !json[QString("resolution_tier")].isNull() && m_resolution_tier_isValid;

    m_source_asset_id_isValid = ::OpenAPI::fromJsonValue(m_source_asset_id, json[QString("source_asset_id")]);
    m_source_asset_id_isSet = !json[QString("source_asset_id")].isNull() && m_source_asset_id_isValid;

    m_static_renditions_isValid = ::OpenAPI::fromJsonValue(m_static_renditions, json[QString("static_renditions")]);
    m_static_renditions_isSet = !json[QString("static_renditions")].isNull() && m_static_renditions_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;

    m_tracks_isValid = ::OpenAPI::fromJsonValue(m_tracks, json[QString("tracks")]);
    m_tracks_isSet = !json[QString("tracks")].isNull() && m_tracks_isValid;

    m_upload_id_isValid = ::OpenAPI::fromJsonValue(m_upload_id, json[QString("upload_id")]);
    m_upload_id_isSet = !json[QString("upload_id")].isNull() && m_upload_id_isValid;
}

QString OAIAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_aspect_ratio_isSet) {
        obj.insert(QString("aspect_ratio"), ::OpenAPI::toJsonValue(m_aspect_ratio));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_encoding_tier_isSet) {
        obj.insert(QString("encoding_tier"), ::OpenAPI::toJsonValue(m_encoding_tier));
    }
    if (m_errors.isSet()) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_live_isSet) {
        obj.insert(QString("is_live"), ::OpenAPI::toJsonValue(m_is_live));
    }
    if (m_live_stream_id_isSet) {
        obj.insert(QString("live_stream_id"), ::OpenAPI::toJsonValue(m_live_stream_id));
    }
    if (m_master.isSet()) {
        obj.insert(QString("master"), ::OpenAPI::toJsonValue(m_master));
    }
    if (m_master_access_isSet) {
        obj.insert(QString("master_access"), ::OpenAPI::toJsonValue(m_master_access));
    }
    if (m_max_resolution_tier_isSet) {
        obj.insert(QString("max_resolution_tier"), ::OpenAPI::toJsonValue(m_max_resolution_tier));
    }
    if (m_max_stored_frame_rate_isSet) {
        obj.insert(QString("max_stored_frame_rate"), ::OpenAPI::toJsonValue(m_max_stored_frame_rate));
    }
    if (m_max_stored_resolution_isSet) {
        obj.insert(QString("max_stored_resolution"), ::OpenAPI::toJsonValue(m_max_stored_resolution));
    }
    if (m_mp4_support_isSet) {
        obj.insert(QString("mp4_support"), ::OpenAPI::toJsonValue(m_mp4_support));
    }
    if (m_non_standard_input_reasons.isSet()) {
        obj.insert(QString("non_standard_input_reasons"), ::OpenAPI::toJsonValue(m_non_standard_input_reasons));
    }
    if (m_normalize_audio_isSet) {
        obj.insert(QString("normalize_audio"), ::OpenAPI::toJsonValue(m_normalize_audio));
    }
    if (m_passthrough_isSet) {
        obj.insert(QString("passthrough"), ::OpenAPI::toJsonValue(m_passthrough));
    }
    if (m_per_title_encode_isSet) {
        obj.insert(QString("per_title_encode"), ::OpenAPI::toJsonValue(m_per_title_encode));
    }
    if (m_playback_ids.size() > 0) {
        obj.insert(QString("playback_ids"), ::OpenAPI::toJsonValue(m_playback_ids));
    }
    if (m_recording_times.size() > 0) {
        obj.insert(QString("recording_times"), ::OpenAPI::toJsonValue(m_recording_times));
    }
    if (m_resolution_tier_isSet) {
        obj.insert(QString("resolution_tier"), ::OpenAPI::toJsonValue(m_resolution_tier));
    }
    if (m_source_asset_id_isSet) {
        obj.insert(QString("source_asset_id"), ::OpenAPI::toJsonValue(m_source_asset_id));
    }
    if (m_static_renditions.isSet()) {
        obj.insert(QString("static_renditions"), ::OpenAPI::toJsonValue(m_static_renditions));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_test_isSet) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    if (m_tracks.size() > 0) {
        obj.insert(QString("tracks"), ::OpenAPI::toJsonValue(m_tracks));
    }
    if (m_upload_id_isSet) {
        obj.insert(QString("upload_id"), ::OpenAPI::toJsonValue(m_upload_id));
    }
    return obj;
}

QString OAIAsset::getAspectRatio() const {
    return m_aspect_ratio;
}
void OAIAsset::setAspectRatio(const QString &aspect_ratio) {
    m_aspect_ratio = aspect_ratio;
    m_aspect_ratio_isSet = true;
}

bool OAIAsset::is_aspect_ratio_Set() const{
    return m_aspect_ratio_isSet;
}

bool OAIAsset::is_aspect_ratio_Valid() const{
    return m_aspect_ratio_isValid;
}

QString OAIAsset::getCreatedAt() const {
    return m_created_at;
}
void OAIAsset::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAsset::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAsset::is_created_at_Valid() const{
    return m_created_at_isValid;
}

double OAIAsset::getDuration() const {
    return m_duration;
}
void OAIAsset::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIAsset::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIAsset::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIAsset::getEncodingTier() const {
    return m_encoding_tier;
}
void OAIAsset::setEncodingTier(const QString &encoding_tier) {
    m_encoding_tier = encoding_tier;
    m_encoding_tier_isSet = true;
}

bool OAIAsset::is_encoding_tier_Set() const{
    return m_encoding_tier_isSet;
}

bool OAIAsset::is_encoding_tier_Valid() const{
    return m_encoding_tier_isValid;
}

OAIAsset_errors OAIAsset::getErrors() const {
    return m_errors;
}
void OAIAsset::setErrors(const OAIAsset_errors &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIAsset::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIAsset::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIAsset::getId() const {
    return m_id;
}
void OAIAsset::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAsset::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAsset::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIAsset::isIsLive() const {
    return m_is_live;
}
void OAIAsset::setIsLive(const bool &is_live) {
    m_is_live = is_live;
    m_is_live_isSet = true;
}

bool OAIAsset::is_is_live_Set() const{
    return m_is_live_isSet;
}

bool OAIAsset::is_is_live_Valid() const{
    return m_is_live_isValid;
}

QString OAIAsset::getLiveStreamId() const {
    return m_live_stream_id;
}
void OAIAsset::setLiveStreamId(const QString &live_stream_id) {
    m_live_stream_id = live_stream_id;
    m_live_stream_id_isSet = true;
}

bool OAIAsset::is_live_stream_id_Set() const{
    return m_live_stream_id_isSet;
}

bool OAIAsset::is_live_stream_id_Valid() const{
    return m_live_stream_id_isValid;
}

OAIAsset_master OAIAsset::getMaster() const {
    return m_master;
}
void OAIAsset::setMaster(const OAIAsset_master &master) {
    m_master = master;
    m_master_isSet = true;
}

bool OAIAsset::is_master_Set() const{
    return m_master_isSet;
}

bool OAIAsset::is_master_Valid() const{
    return m_master_isValid;
}

QString OAIAsset::getMasterAccess() const {
    return m_master_access;
}
void OAIAsset::setMasterAccess(const QString &master_access) {
    m_master_access = master_access;
    m_master_access_isSet = true;
}

bool OAIAsset::is_master_access_Set() const{
    return m_master_access_isSet;
}

bool OAIAsset::is_master_access_Valid() const{
    return m_master_access_isValid;
}

QString OAIAsset::getMaxResolutionTier() const {
    return m_max_resolution_tier;
}
void OAIAsset::setMaxResolutionTier(const QString &max_resolution_tier) {
    m_max_resolution_tier = max_resolution_tier;
    m_max_resolution_tier_isSet = true;
}

bool OAIAsset::is_max_resolution_tier_Set() const{
    return m_max_resolution_tier_isSet;
}

bool OAIAsset::is_max_resolution_tier_Valid() const{
    return m_max_resolution_tier_isValid;
}

double OAIAsset::getMaxStoredFrameRate() const {
    return m_max_stored_frame_rate;
}
void OAIAsset::setMaxStoredFrameRate(const double &max_stored_frame_rate) {
    m_max_stored_frame_rate = max_stored_frame_rate;
    m_max_stored_frame_rate_isSet = true;
}

bool OAIAsset::is_max_stored_frame_rate_Set() const{
    return m_max_stored_frame_rate_isSet;
}

bool OAIAsset::is_max_stored_frame_rate_Valid() const{
    return m_max_stored_frame_rate_isValid;
}

QString OAIAsset::getMaxStoredResolution() const {
    return m_max_stored_resolution;
}
void OAIAsset::setMaxStoredResolution(const QString &max_stored_resolution) {
    m_max_stored_resolution = max_stored_resolution;
    m_max_stored_resolution_isSet = true;
}

bool OAIAsset::is_max_stored_resolution_Set() const{
    return m_max_stored_resolution_isSet;
}

bool OAIAsset::is_max_stored_resolution_Valid() const{
    return m_max_stored_resolution_isValid;
}

QString OAIAsset::getMp4Support() const {
    return m_mp4_support;
}
void OAIAsset::setMp4Support(const QString &mp4_support) {
    m_mp4_support = mp4_support;
    m_mp4_support_isSet = true;
}

bool OAIAsset::is_mp4_support_Set() const{
    return m_mp4_support_isSet;
}

bool OAIAsset::is_mp4_support_Valid() const{
    return m_mp4_support_isValid;
}

OAIAsset_non_standard_input_reasons OAIAsset::getNonStandardInputReasons() const {
    return m_non_standard_input_reasons;
}
void OAIAsset::setNonStandardInputReasons(const OAIAsset_non_standard_input_reasons &non_standard_input_reasons) {
    m_non_standard_input_reasons = non_standard_input_reasons;
    m_non_standard_input_reasons_isSet = true;
}

bool OAIAsset::is_non_standard_input_reasons_Set() const{
    return m_non_standard_input_reasons_isSet;
}

bool OAIAsset::is_non_standard_input_reasons_Valid() const{
    return m_non_standard_input_reasons_isValid;
}

bool OAIAsset::isNormalizeAudio() const {
    return m_normalize_audio;
}
void OAIAsset::setNormalizeAudio(const bool &normalize_audio) {
    m_normalize_audio = normalize_audio;
    m_normalize_audio_isSet = true;
}

bool OAIAsset::is_normalize_audio_Set() const{
    return m_normalize_audio_isSet;
}

bool OAIAsset::is_normalize_audio_Valid() const{
    return m_normalize_audio_isValid;
}

QString OAIAsset::getPassthrough() const {
    return m_passthrough;
}
void OAIAsset::setPassthrough(const QString &passthrough) {
    m_passthrough = passthrough;
    m_passthrough_isSet = true;
}

bool OAIAsset::is_passthrough_Set() const{
    return m_passthrough_isSet;
}

bool OAIAsset::is_passthrough_Valid() const{
    return m_passthrough_isValid;
}

bool OAIAsset::isPerTitleEncode() const {
    return m_per_title_encode;
}
void OAIAsset::setPerTitleEncode(const bool &per_title_encode) {
    m_per_title_encode = per_title_encode;
    m_per_title_encode_isSet = true;
}

bool OAIAsset::is_per_title_encode_Set() const{
    return m_per_title_encode_isSet;
}

bool OAIAsset::is_per_title_encode_Valid() const{
    return m_per_title_encode_isValid;
}

QList<OAIPlaybackID> OAIAsset::getPlaybackIds() const {
    return m_playback_ids;
}
void OAIAsset::setPlaybackIds(const QList<OAIPlaybackID> &playback_ids) {
    m_playback_ids = playback_ids;
    m_playback_ids_isSet = true;
}

bool OAIAsset::is_playback_ids_Set() const{
    return m_playback_ids_isSet;
}

bool OAIAsset::is_playback_ids_Valid() const{
    return m_playback_ids_isValid;
}

QList<OAIAsset_recording_times_inner> OAIAsset::getRecordingTimes() const {
    return m_recording_times;
}
void OAIAsset::setRecordingTimes(const QList<OAIAsset_recording_times_inner> &recording_times) {
    m_recording_times = recording_times;
    m_recording_times_isSet = true;
}

bool OAIAsset::is_recording_times_Set() const{
    return m_recording_times_isSet;
}

bool OAIAsset::is_recording_times_Valid() const{
    return m_recording_times_isValid;
}

QString OAIAsset::getResolutionTier() const {
    return m_resolution_tier;
}
void OAIAsset::setResolutionTier(const QString &resolution_tier) {
    m_resolution_tier = resolution_tier;
    m_resolution_tier_isSet = true;
}

bool OAIAsset::is_resolution_tier_Set() const{
    return m_resolution_tier_isSet;
}

bool OAIAsset::is_resolution_tier_Valid() const{
    return m_resolution_tier_isValid;
}

QString OAIAsset::getSourceAssetId() const {
    return m_source_asset_id;
}
void OAIAsset::setSourceAssetId(const QString &source_asset_id) {
    m_source_asset_id = source_asset_id;
    m_source_asset_id_isSet = true;
}

bool OAIAsset::is_source_asset_id_Set() const{
    return m_source_asset_id_isSet;
}

bool OAIAsset::is_source_asset_id_Valid() const{
    return m_source_asset_id_isValid;
}

OAIAsset_static_renditions OAIAsset::getStaticRenditions() const {
    return m_static_renditions;
}
void OAIAsset::setStaticRenditions(const OAIAsset_static_renditions &static_renditions) {
    m_static_renditions = static_renditions;
    m_static_renditions_isSet = true;
}

bool OAIAsset::is_static_renditions_Set() const{
    return m_static_renditions_isSet;
}

bool OAIAsset::is_static_renditions_Valid() const{
    return m_static_renditions_isValid;
}

QString OAIAsset::getStatus() const {
    return m_status;
}
void OAIAsset::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAsset::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAsset::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIAsset::isTest() const {
    return m_test;
}
void OAIAsset::setTest(const bool &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAIAsset::is_test_Set() const{
    return m_test_isSet;
}

bool OAIAsset::is_test_Valid() const{
    return m_test_isValid;
}

QList<OAITrack> OAIAsset::getTracks() const {
    return m_tracks;
}
void OAIAsset::setTracks(const QList<OAITrack> &tracks) {
    m_tracks = tracks;
    m_tracks_isSet = true;
}

bool OAIAsset::is_tracks_Set() const{
    return m_tracks_isSet;
}

bool OAIAsset::is_tracks_Valid() const{
    return m_tracks_isValid;
}

QString OAIAsset::getUploadId() const {
    return m_upload_id;
}
void OAIAsset::setUploadId(const QString &upload_id) {
    m_upload_id = upload_id;
    m_upload_id_isSet = true;
}

bool OAIAsset::is_upload_id_Set() const{
    return m_upload_id_isSet;
}

bool OAIAsset::is_upload_id_Valid() const{
    return m_upload_id_isValid;
}

bool OAIAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspect_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_stream_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_resolution_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_stored_frame_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_stored_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mp4_support_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_standard_input_reasons.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_normalize_audio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passthrough_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_title_encode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recording_times.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_asset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_renditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
