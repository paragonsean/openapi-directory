/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITrack.h
 *
 * 
 */

#ifndef OAITrack_H
#define OAITrack_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITrack : public OAIObject {
public:
    OAITrack();
    OAITrack(QString json);
    ~OAITrack() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isClosedCaptions() const;
    void setClosedCaptions(const bool &closed_captions);
    bool is_closed_captions_Set() const;
    bool is_closed_captions_Valid() const;

    double getDuration() const;
    void setDuration(const double &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLanguageCode() const;
    void setLanguageCode(const QString &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    Q_DECL_DEPRECATED QString getMaxChannelLayout() const;
    Q_DECL_DEPRECATED void setMaxChannelLayout(const QString &max_channel_layout);
    Q_DECL_DEPRECATED bool is_max_channel_layout_Set() const;
    Q_DECL_DEPRECATED bool is_max_channel_layout_Valid() const;

    qint64 getMaxChannels() const;
    void setMaxChannels(const qint64 &max_channels);
    bool is_max_channels_Set() const;
    bool is_max_channels_Valid() const;

    double getMaxFrameRate() const;
    void setMaxFrameRate(const double &max_frame_rate);
    bool is_max_frame_rate_Set() const;
    bool is_max_frame_rate_Valid() const;

    qint64 getMaxHeight() const;
    void setMaxHeight(const qint64 &max_height);
    bool is_max_height_Set() const;
    bool is_max_height_Valid() const;

    qint64 getMaxWidth() const;
    void setMaxWidth(const qint64 &max_width);
    bool is_max_width_Set() const;
    bool is_max_width_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPassthrough() const;
    void setPassthrough(const QString &passthrough);
    bool is_passthrough_Set() const;
    bool is_passthrough_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTextSource() const;
    void setTextSource(const QString &text_source);
    bool is_text_source_Set() const;
    bool is_text_source_Valid() const;

    QString getTextType() const;
    void setTextType(const QString &text_type);
    bool is_text_type_Set() const;
    bool is_text_type_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_closed_captions;
    bool m_closed_captions_isSet;
    bool m_closed_captions_isValid;

    double m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    QString m_max_channel_layout;
    bool m_max_channel_layout_isSet;
    bool m_max_channel_layout_isValid;

    qint64 m_max_channels;
    bool m_max_channels_isSet;
    bool m_max_channels_isValid;

    double m_max_frame_rate;
    bool m_max_frame_rate_isSet;
    bool m_max_frame_rate_isValid;

    qint64 m_max_height;
    bool m_max_height_isSet;
    bool m_max_height_isValid;

    qint64 m_max_width;
    bool m_max_width_isSet;
    bool m_max_width_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_passthrough;
    bool m_passthrough_isSet;
    bool m_passthrough_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_text_source;
    bool m_text_source_isSet;
    bool m_text_source_isValid;

    QString m_text_type;
    bool m_text_type_isSet;
    bool m_text_type_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITrack)

#endif // OAITrack_H
