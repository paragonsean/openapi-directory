/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIncidentNotificationRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIncidentNotificationRule::OAIIncidentNotificationRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIncidentNotificationRule::OAIIncidentNotificationRule() {
    this->initializeModel();
}

OAIIncidentNotificationRule::~OAIIncidentNotificationRule() {}

void OAIIncidentNotificationRule::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_property_id_isSet = false;
    m_property_id_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIIncidentNotificationRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIncidentNotificationRule::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_property_id_isValid = ::OpenAPI::fromJsonValue(m_property_id, json[QString("property_id")]);
    m_property_id_isSet = !json[QString("property_id")].isNull() && m_property_id_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIIncidentNotificationRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIncidentNotificationRule::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_property_id_isSet) {
        obj.insert(QString("property_id"), ::OpenAPI::toJsonValue(m_property_id));
    }
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIIncidentNotificationRule::getAction() const {
    return m_action;
}
void OAIIncidentNotificationRule::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIIncidentNotificationRule::is_action_Set() const{
    return m_action_isSet;
}

bool OAIIncidentNotificationRule::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIIncidentNotificationRule::getId() const {
    return m_id;
}
void OAIIncidentNotificationRule::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIncidentNotificationRule::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIncidentNotificationRule::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIIncidentNotificationRule::getPropertyId() const {
    return m_property_id;
}
void OAIIncidentNotificationRule::setPropertyId(const QString &property_id) {
    m_property_id = property_id;
    m_property_id_isSet = true;
}

bool OAIIncidentNotificationRule::is_property_id_Set() const{
    return m_property_id_isSet;
}

bool OAIIncidentNotificationRule::is_property_id_Valid() const{
    return m_property_id_isValid;
}

QList<OAINotificationRule> OAIIncidentNotificationRule::getRules() const {
    return m_rules;
}
void OAIIncidentNotificationRule::setRules(const QList<OAINotificationRule> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIIncidentNotificationRule::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIIncidentNotificationRule::is_rules_Valid() const{
    return m_rules_isValid;
}

QString OAIIncidentNotificationRule::getStatus() const {
    return m_status;
}
void OAIIncidentNotificationRule::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIIncidentNotificationRule::is_status_Set() const{
    return m_status_isSet;
}

bool OAIIncidentNotificationRule::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIIncidentNotificationRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIncidentNotificationRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
