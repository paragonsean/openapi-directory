/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILiveStreamsApi_H
#define OAI_OAILiveStreamsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateLiveStreamRequest.h"
#include "OAICreatePlaybackIDRequest.h"
#include "OAICreatePlaybackIDResponse.h"
#include "OAICreateSimulcastTargetRequest.h"
#include "OAIDisableLiveStreamResponse.h"
#include "OAIEnableLiveStreamResponse.h"
#include "OAIGetLiveStreamPlaybackIDResponse.h"
#include "OAIListLiveStreamsResponse.h"
#include "OAILiveStreamResponse.h"
#include "OAILiveStreamStatus.h"
#include "OAISignalLiveStreamCompleteResponse.h"
#include "OAISimulcastTargetResponse.h"
#include "OAIUpdateLiveStreamEmbeddedSubtitlesRequest.h"
#include "OAIUpdateLiveStreamGeneratedSubtitlesRequest.h"
#include "OAIUpdateLiveStreamRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILiveStreamsApi : public QObject {
    Q_OBJECT

public:
    OAILiveStreamsApi(const int timeOut = 0);
    ~OAILiveStreamsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_live_stream_request OAICreateLiveStreamRequest [required]
    */
    virtual void createLiveStream(const OAICreateLiveStreamRequest &oai_create_live_stream_request);

    /**
    * @param[in]  live_stream_id QString [required]
    * @param[in]  oai_create_playback_id_request OAICreatePlaybackIDRequest [required]
    */
    virtual void createLiveStreamPlaybackId(const QString &live_stream_id, const OAICreatePlaybackIDRequest &oai_create_playback_id_request);

    /**
    * @param[in]  live_stream_id QString [required]
    * @param[in]  oai_create_simulcast_target_request OAICreateSimulcastTargetRequest [required]
    */
    virtual void createLiveStreamSimulcastTarget(const QString &live_stream_id, const OAICreateSimulcastTargetRequest &oai_create_simulcast_target_request);

    /**
    * @param[in]  live_stream_id QString [required]
    */
    virtual void deleteLiveStream(const QString &live_stream_id);

    /**
    * @param[in]  live_stream_id QString [required]
    * @param[in]  playback_id QString [required]
    */
    virtual void deleteLiveStreamPlaybackId(const QString &live_stream_id, const QString &playback_id);

    /**
    * @param[in]  live_stream_id QString [required]
    * @param[in]  simulcast_target_id QString [required]
    */
    virtual void deleteLiveStreamSimulcastTarget(const QString &live_stream_id, const QString &simulcast_target_id);

    /**
    * @param[in]  live_stream_id QString [required]
    */
    virtual void disableLiveStream(const QString &live_stream_id);

    /**
    * @param[in]  live_stream_id QString [required]
    */
    virtual void enableLiveStream(const QString &live_stream_id);

    /**
    * @param[in]  live_stream_id QString [required]
    */
    virtual void getLiveStream(const QString &live_stream_id);

    /**
    * @param[in]  live_stream_id QString [required]
    * @param[in]  playback_id QString [required]
    */
    virtual void getLiveStreamPlaybackId(const QString &live_stream_id, const QString &playback_id);

    /**
    * @param[in]  live_stream_id QString [required]
    * @param[in]  simulcast_target_id QString [required]
    */
    virtual void getLiveStreamSimulcastTarget(const QString &live_stream_id, const QString &simulcast_target_id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  stream_key QString [optional]
    * @param[in]  status OAILiveStreamStatus [optional]
    */
    virtual void listLiveStreams(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &stream_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAILiveStreamStatus> &status = ::OpenAPI::OptionalParam<OAILiveStreamStatus>());

    /**
    * @param[in]  live_stream_id QString [required]
    */
    virtual void resetStreamKey(const QString &live_stream_id);

    /**
    * @param[in]  live_stream_id QString [required]
    */
    virtual void signalLiveStreamComplete(const QString &live_stream_id);

    /**
    * @param[in]  live_stream_id QString [required]
    * @param[in]  oai_update_live_stream_request OAIUpdateLiveStreamRequest [required]
    */
    virtual void updateLiveStream(const QString &live_stream_id, const OAIUpdateLiveStreamRequest &oai_update_live_stream_request);

    /**
    * @param[in]  live_stream_id QString [required]
    * @param[in]  oai_update_live_stream_embedded_subtitles_request OAIUpdateLiveStreamEmbeddedSubtitlesRequest [required]
    */
    virtual void updateLiveStreamEmbeddedSubtitles(const QString &live_stream_id, const OAIUpdateLiveStreamEmbeddedSubtitlesRequest &oai_update_live_stream_embedded_subtitles_request);

    /**
    * @param[in]  live_stream_id QString [required]
    * @param[in]  oai_update_live_stream_generated_subtitles_request OAIUpdateLiveStreamGeneratedSubtitlesRequest [required]
    */
    virtual void updateLiveStreamGeneratedSubtitles(const QString &live_stream_id, const OAIUpdateLiveStreamGeneratedSubtitlesRequest &oai_update_live_stream_generated_subtitles_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createLiveStreamCallback(OAIHttpRequestWorker *worker);
    void createLiveStreamPlaybackIdCallback(OAIHttpRequestWorker *worker);
    void createLiveStreamSimulcastTargetCallback(OAIHttpRequestWorker *worker);
    void deleteLiveStreamCallback(OAIHttpRequestWorker *worker);
    void deleteLiveStreamPlaybackIdCallback(OAIHttpRequestWorker *worker);
    void deleteLiveStreamSimulcastTargetCallback(OAIHttpRequestWorker *worker);
    void disableLiveStreamCallback(OAIHttpRequestWorker *worker);
    void enableLiveStreamCallback(OAIHttpRequestWorker *worker);
    void getLiveStreamCallback(OAIHttpRequestWorker *worker);
    void getLiveStreamPlaybackIdCallback(OAIHttpRequestWorker *worker);
    void getLiveStreamSimulcastTargetCallback(OAIHttpRequestWorker *worker);
    void listLiveStreamsCallback(OAIHttpRequestWorker *worker);
    void resetStreamKeyCallback(OAIHttpRequestWorker *worker);
    void signalLiveStreamCompleteCallback(OAIHttpRequestWorker *worker);
    void updateLiveStreamCallback(OAIHttpRequestWorker *worker);
    void updateLiveStreamEmbeddedSubtitlesCallback(OAIHttpRequestWorker *worker);
    void updateLiveStreamGeneratedSubtitlesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createLiveStreamSignal(OAILiveStreamResponse summary);
    void createLiveStreamPlaybackIdSignal(OAICreatePlaybackIDResponse summary);
    void createLiveStreamSimulcastTargetSignal(OAISimulcastTargetResponse summary);
    void deleteLiveStreamSignal();
    void deleteLiveStreamPlaybackIdSignal();
    void deleteLiveStreamSimulcastTargetSignal();
    void disableLiveStreamSignal(OAIDisableLiveStreamResponse summary);
    void enableLiveStreamSignal(OAIEnableLiveStreamResponse summary);
    void getLiveStreamSignal(OAILiveStreamResponse summary);
    void getLiveStreamPlaybackIdSignal(OAIGetLiveStreamPlaybackIDResponse summary);
    void getLiveStreamSimulcastTargetSignal(OAISimulcastTargetResponse summary);
    void listLiveStreamsSignal(OAIListLiveStreamsResponse summary);
    void resetStreamKeySignal(OAILiveStreamResponse summary);
    void signalLiveStreamCompleteSignal(OAISignalLiveStreamCompleteResponse summary);
    void updateLiveStreamSignal(OAILiveStreamResponse summary);
    void updateLiveStreamEmbeddedSubtitlesSignal(OAILiveStreamResponse summary);
    void updateLiveStreamGeneratedSubtitlesSignal(OAILiveStreamResponse summary);


    void createLiveStreamSignalFull(OAIHttpRequestWorker *worker, OAILiveStreamResponse summary);
    void createLiveStreamPlaybackIdSignalFull(OAIHttpRequestWorker *worker, OAICreatePlaybackIDResponse summary);
    void createLiveStreamSimulcastTargetSignalFull(OAIHttpRequestWorker *worker, OAISimulcastTargetResponse summary);
    void deleteLiveStreamSignalFull(OAIHttpRequestWorker *worker);
    void deleteLiveStreamPlaybackIdSignalFull(OAIHttpRequestWorker *worker);
    void deleteLiveStreamSimulcastTargetSignalFull(OAIHttpRequestWorker *worker);
    void disableLiveStreamSignalFull(OAIHttpRequestWorker *worker, OAIDisableLiveStreamResponse summary);
    void enableLiveStreamSignalFull(OAIHttpRequestWorker *worker, OAIEnableLiveStreamResponse summary);
    void getLiveStreamSignalFull(OAIHttpRequestWorker *worker, OAILiveStreamResponse summary);
    void getLiveStreamPlaybackIdSignalFull(OAIHttpRequestWorker *worker, OAIGetLiveStreamPlaybackIDResponse summary);
    void getLiveStreamSimulcastTargetSignalFull(OAIHttpRequestWorker *worker, OAISimulcastTargetResponse summary);
    void listLiveStreamsSignalFull(OAIHttpRequestWorker *worker, OAIListLiveStreamsResponse summary);
    void resetStreamKeySignalFull(OAIHttpRequestWorker *worker, OAILiveStreamResponse summary);
    void signalLiveStreamCompleteSignalFull(OAIHttpRequestWorker *worker, OAISignalLiveStreamCompleteResponse summary);
    void updateLiveStreamSignalFull(OAIHttpRequestWorker *worker, OAILiveStreamResponse summary);
    void updateLiveStreamEmbeddedSubtitlesSignalFull(OAIHttpRequestWorker *worker, OAILiveStreamResponse summary);
    void updateLiveStreamGeneratedSubtitlesSignalFull(OAIHttpRequestWorker *worker, OAILiveStreamResponse summary);

    Q_DECL_DEPRECATED_X("Use createLiveStreamSignalError() instead")
    void createLiveStreamSignalE(OAILiveStreamResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLiveStreamSignalError(OAILiveStreamResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLiveStreamPlaybackIdSignalError() instead")
    void createLiveStreamPlaybackIdSignalE(OAICreatePlaybackIDResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLiveStreamPlaybackIdSignalError(OAICreatePlaybackIDResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLiveStreamSimulcastTargetSignalError() instead")
    void createLiveStreamSimulcastTargetSignalE(OAISimulcastTargetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createLiveStreamSimulcastTargetSignalError(OAISimulcastTargetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLiveStreamSignalError() instead")
    void deleteLiveStreamSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLiveStreamSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLiveStreamPlaybackIdSignalError() instead")
    void deleteLiveStreamPlaybackIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLiveStreamPlaybackIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLiveStreamSimulcastTargetSignalError() instead")
    void deleteLiveStreamSimulcastTargetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLiveStreamSimulcastTargetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableLiveStreamSignalError() instead")
    void disableLiveStreamSignalE(OAIDisableLiveStreamResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disableLiveStreamSignalError(OAIDisableLiveStreamResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableLiveStreamSignalError() instead")
    void enableLiveStreamSignalE(OAIEnableLiveStreamResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enableLiveStreamSignalError(OAIEnableLiveStreamResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLiveStreamSignalError() instead")
    void getLiveStreamSignalE(OAILiveStreamResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLiveStreamSignalError(OAILiveStreamResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLiveStreamPlaybackIdSignalError() instead")
    void getLiveStreamPlaybackIdSignalE(OAIGetLiveStreamPlaybackIDResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLiveStreamPlaybackIdSignalError(OAIGetLiveStreamPlaybackIDResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLiveStreamSimulcastTargetSignalError() instead")
    void getLiveStreamSimulcastTargetSignalE(OAISimulcastTargetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLiveStreamSimulcastTargetSignalError(OAISimulcastTargetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLiveStreamsSignalError() instead")
    void listLiveStreamsSignalE(OAIListLiveStreamsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listLiveStreamsSignalError(OAIListLiveStreamsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetStreamKeySignalError() instead")
    void resetStreamKeySignalE(OAILiveStreamResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resetStreamKeySignalError(OAILiveStreamResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalLiveStreamCompleteSignalError() instead")
    void signalLiveStreamCompleteSignalE(OAISignalLiveStreamCompleteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void signalLiveStreamCompleteSignalError(OAISignalLiveStreamCompleteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLiveStreamSignalError() instead")
    void updateLiveStreamSignalE(OAILiveStreamResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLiveStreamSignalError(OAILiveStreamResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLiveStreamEmbeddedSubtitlesSignalError() instead")
    void updateLiveStreamEmbeddedSubtitlesSignalE(OAILiveStreamResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLiveStreamEmbeddedSubtitlesSignalError(OAILiveStreamResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLiveStreamGeneratedSubtitlesSignalError() instead")
    void updateLiveStreamGeneratedSubtitlesSignalE(OAILiveStreamResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLiveStreamGeneratedSubtitlesSignalError(OAILiveStreamResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createLiveStreamSignalErrorFull() instead")
    void createLiveStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLiveStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLiveStreamPlaybackIdSignalErrorFull() instead")
    void createLiveStreamPlaybackIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLiveStreamPlaybackIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createLiveStreamSimulcastTargetSignalErrorFull() instead")
    void createLiveStreamSimulcastTargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createLiveStreamSimulcastTargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLiveStreamSignalErrorFull() instead")
    void deleteLiveStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLiveStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLiveStreamPlaybackIdSignalErrorFull() instead")
    void deleteLiveStreamPlaybackIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLiveStreamPlaybackIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteLiveStreamSimulcastTargetSignalErrorFull() instead")
    void deleteLiveStreamSimulcastTargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteLiveStreamSimulcastTargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableLiveStreamSignalErrorFull() instead")
    void disableLiveStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableLiveStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableLiveStreamSignalErrorFull() instead")
    void enableLiveStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableLiveStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLiveStreamSignalErrorFull() instead")
    void getLiveStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLiveStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLiveStreamPlaybackIdSignalErrorFull() instead")
    void getLiveStreamPlaybackIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLiveStreamPlaybackIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLiveStreamSimulcastTargetSignalErrorFull() instead")
    void getLiveStreamSimulcastTargetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLiveStreamSimulcastTargetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLiveStreamsSignalErrorFull() instead")
    void listLiveStreamsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLiveStreamsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetStreamKeySignalErrorFull() instead")
    void resetStreamKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetStreamKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use signalLiveStreamCompleteSignalErrorFull() instead")
    void signalLiveStreamCompleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void signalLiveStreamCompleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLiveStreamSignalErrorFull() instead")
    void updateLiveStreamSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLiveStreamSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLiveStreamEmbeddedSubtitlesSignalErrorFull() instead")
    void updateLiveStreamEmbeddedSubtitlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLiveStreamEmbeddedSubtitlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateLiveStreamGeneratedSubtitlesSignalErrorFull() instead")
    void updateLiveStreamGeneratedSubtitlesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateLiveStreamGeneratedSubtitlesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
