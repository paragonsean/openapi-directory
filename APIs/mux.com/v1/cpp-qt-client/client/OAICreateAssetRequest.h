/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateAssetRequest.h
 *
 * 
 */

#ifndef OAICreateAssetRequest_H
#define OAICreateAssetRequest_H

#include <QJsonObject>

#include "OAIInputSettings.h"
#include "OAIPlaybackPolicy.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInputSettings;

class OAICreateAssetRequest : public OAIObject {
public:
    OAICreateAssetRequest();
    OAICreateAssetRequest(QString json);
    ~OAICreateAssetRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getEncodingTier() const;
    void setEncodingTier(const QString &encoding_tier);
    bool is_encoding_tier_Set() const;
    bool is_encoding_tier_Valid() const;

    QList<OAIInputSettings> getInput() const;
    void setInput(const QList<OAIInputSettings> &input);
    bool is_input_Set() const;
    bool is_input_Valid() const;

    QString getMasterAccess() const;
    void setMasterAccess(const QString &master_access);
    bool is_master_access_Set() const;
    bool is_master_access_Valid() const;

    QString getMaxResolutionTier() const;
    void setMaxResolutionTier(const QString &max_resolution_tier);
    bool is_max_resolution_tier_Set() const;
    bool is_max_resolution_tier_Valid() const;

    QString getMp4Support() const;
    void setMp4Support(const QString &mp4_support);
    bool is_mp4_support_Set() const;
    bool is_mp4_support_Valid() const;

    bool isNormalizeAudio() const;
    void setNormalizeAudio(const bool &normalize_audio);
    bool is_normalize_audio_Set() const;
    bool is_normalize_audio_Valid() const;

    QString getPassthrough() const;
    void setPassthrough(const QString &passthrough);
    bool is_passthrough_Set() const;
    bool is_passthrough_Valid() const;

    Q_DECL_DEPRECATED bool isPerTitleEncode() const;
    Q_DECL_DEPRECATED void setPerTitleEncode(const bool &per_title_encode);
    Q_DECL_DEPRECATED bool is_per_title_encode_Set() const;
    Q_DECL_DEPRECATED bool is_per_title_encode_Valid() const;

    QList<OAIPlaybackPolicy> getPlaybackPolicy() const;
    void setPlaybackPolicy(const QList<OAIPlaybackPolicy> &playback_policy);
    bool is_playback_policy_Set() const;
    bool is_playback_policy_Valid() const;

    bool isTest() const;
    void setTest(const bool &test);
    bool is_test_Set() const;
    bool is_test_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_encoding_tier;
    bool m_encoding_tier_isSet;
    bool m_encoding_tier_isValid;

    QList<OAIInputSettings> m_input;
    bool m_input_isSet;
    bool m_input_isValid;

    QString m_master_access;
    bool m_master_access_isSet;
    bool m_master_access_isValid;

    QString m_max_resolution_tier;
    bool m_max_resolution_tier_isSet;
    bool m_max_resolution_tier_isValid;

    QString m_mp4_support;
    bool m_mp4_support_isSet;
    bool m_mp4_support_isValid;

    bool m_normalize_audio;
    bool m_normalize_audio_isSet;
    bool m_normalize_audio_isValid;

    QString m_passthrough;
    bool m_passthrough_isSet;
    bool m_passthrough_isValid;

    bool m_per_title_encode;
    bool m_per_title_encode_isSet;
    bool m_per_title_encode_isValid;

    QList<OAIPlaybackPolicy> m_playback_policy;
    bool m_playback_policy_isSet;
    bool m_playback_policy_isValid;

    bool m_test;
    bool m_test_isSet;
    bool m_test_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateAssetRequest)

#endif // OAICreateAssetRequest_H
