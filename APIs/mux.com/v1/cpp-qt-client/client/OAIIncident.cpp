/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIncident.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIncident::OAIIncident(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIncident::OAIIncident() {
    this->initializeModel();
}

OAIIncident::~OAIIncident() {}

void OAIIncident::initializeModel() {

    m_affected_views_isSet = false;
    m_affected_views_isValid = false;

    m_affected_views_per_hour_isSet = false;
    m_affected_views_per_hour_isValid = false;

    m_affected_views_per_hour_on_open_isSet = false;
    m_affected_views_per_hour_on_open_isValid = false;

    m_breakdowns_isSet = false;
    m_breakdowns_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_description_isSet = false;
    m_error_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_impact_isSet = false;
    m_impact_isValid = false;

    m_incident_key_isSet = false;
    m_incident_key_isValid = false;

    m_measured_value_isSet = false;
    m_measured_value_isValid = false;

    m_measured_value_on_close_isSet = false;
    m_measured_value_on_close_isValid = false;

    m_measurement_isSet = false;
    m_measurement_isValid = false;

    m_notification_rules_isSet = false;
    m_notification_rules_isValid = false;

    m_notifications_isSet = false;
    m_notifications_isValid = false;

    m_resolved_at_isSet = false;
    m_resolved_at_isValid = false;

    m_sample_size_isSet = false;
    m_sample_size_isValid = false;

    m_sample_size_unit_isSet = false;
    m_sample_size_unit_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;
}

void OAIIncident::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIncident::fromJsonObject(QJsonObject json) {

    m_affected_views_isValid = ::OpenAPI::fromJsonValue(m_affected_views, json[QString("affected_views")]);
    m_affected_views_isSet = !json[QString("affected_views")].isNull() && m_affected_views_isValid;

    m_affected_views_per_hour_isValid = ::OpenAPI::fromJsonValue(m_affected_views_per_hour, json[QString("affected_views_per_hour")]);
    m_affected_views_per_hour_isSet = !json[QString("affected_views_per_hour")].isNull() && m_affected_views_per_hour_isValid;

    m_affected_views_per_hour_on_open_isValid = ::OpenAPI::fromJsonValue(m_affected_views_per_hour_on_open, json[QString("affected_views_per_hour_on_open")]);
    m_affected_views_per_hour_on_open_isSet = !json[QString("affected_views_per_hour_on_open")].isNull() && m_affected_views_per_hour_on_open_isValid;

    m_breakdowns_isValid = ::OpenAPI::fromJsonValue(m_breakdowns, json[QString("breakdowns")]);
    m_breakdowns_isSet = !json[QString("breakdowns")].isNull() && m_breakdowns_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_description_isValid = ::OpenAPI::fromJsonValue(m_error_description, json[QString("error_description")]);
    m_error_description_isSet = !json[QString("error_description")].isNull() && m_error_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_impact_isValid = ::OpenAPI::fromJsonValue(m_impact, json[QString("impact")]);
    m_impact_isSet = !json[QString("impact")].isNull() && m_impact_isValid;

    m_incident_key_isValid = ::OpenAPI::fromJsonValue(m_incident_key, json[QString("incident_key")]);
    m_incident_key_isSet = !json[QString("incident_key")].isNull() && m_incident_key_isValid;

    m_measured_value_isValid = ::OpenAPI::fromJsonValue(m_measured_value, json[QString("measured_value")]);
    m_measured_value_isSet = !json[QString("measured_value")].isNull() && m_measured_value_isValid;

    m_measured_value_on_close_isValid = ::OpenAPI::fromJsonValue(m_measured_value_on_close, json[QString("measured_value_on_close")]);
    m_measured_value_on_close_isSet = !json[QString("measured_value_on_close")].isNull() && m_measured_value_on_close_isValid;

    m_measurement_isValid = ::OpenAPI::fromJsonValue(m_measurement, json[QString("measurement")]);
    m_measurement_isSet = !json[QString("measurement")].isNull() && m_measurement_isValid;

    m_notification_rules_isValid = ::OpenAPI::fromJsonValue(m_notification_rules, json[QString("notification_rules")]);
    m_notification_rules_isSet = !json[QString("notification_rules")].isNull() && m_notification_rules_isValid;

    m_notifications_isValid = ::OpenAPI::fromJsonValue(m_notifications, json[QString("notifications")]);
    m_notifications_isSet = !json[QString("notifications")].isNull() && m_notifications_isValid;

    m_resolved_at_isValid = ::OpenAPI::fromJsonValue(m_resolved_at, json[QString("resolved_at")]);
    m_resolved_at_isSet = !json[QString("resolved_at")].isNull() && m_resolved_at_isValid;

    m_sample_size_isValid = ::OpenAPI::fromJsonValue(m_sample_size, json[QString("sample_size")]);
    m_sample_size_isSet = !json[QString("sample_size")].isNull() && m_sample_size_isValid;

    m_sample_size_unit_isValid = ::OpenAPI::fromJsonValue(m_sample_size_unit, json[QString("sample_size_unit")]);
    m_sample_size_unit_isSet = !json[QString("sample_size_unit")].isNull() && m_sample_size_unit_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("started_at")]);
    m_started_at_isSet = !json[QString("started_at")].isNull() && m_started_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("threshold")]);
    m_threshold_isSet = !json[QString("threshold")].isNull() && m_threshold_isValid;
}

QString OAIIncident::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIncident::asJsonObject() const {
    QJsonObject obj;
    if (m_affected_views_isSet) {
        obj.insert(QString("affected_views"), ::OpenAPI::toJsonValue(m_affected_views));
    }
    if (m_affected_views_per_hour_isSet) {
        obj.insert(QString("affected_views_per_hour"), ::OpenAPI::toJsonValue(m_affected_views_per_hour));
    }
    if (m_affected_views_per_hour_on_open_isSet) {
        obj.insert(QString("affected_views_per_hour_on_open"), ::OpenAPI::toJsonValue(m_affected_views_per_hour_on_open));
    }
    if (m_breakdowns.size() > 0) {
        obj.insert(QString("breakdowns"), ::OpenAPI::toJsonValue(m_breakdowns));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error_description_isSet) {
        obj.insert(QString("error_description"), ::OpenAPI::toJsonValue(m_error_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_impact_isSet) {
        obj.insert(QString("impact"), ::OpenAPI::toJsonValue(m_impact));
    }
    if (m_incident_key_isSet) {
        obj.insert(QString("incident_key"), ::OpenAPI::toJsonValue(m_incident_key));
    }
    if (m_measured_value_isSet) {
        obj.insert(QString("measured_value"), ::OpenAPI::toJsonValue(m_measured_value));
    }
    if (m_measured_value_on_close_isSet) {
        obj.insert(QString("measured_value_on_close"), ::OpenAPI::toJsonValue(m_measured_value_on_close));
    }
    if (m_measurement_isSet) {
        obj.insert(QString("measurement"), ::OpenAPI::toJsonValue(m_measurement));
    }
    if (m_notification_rules.size() > 0) {
        obj.insert(QString("notification_rules"), ::OpenAPI::toJsonValue(m_notification_rules));
    }
    if (m_notifications.size() > 0) {
        obj.insert(QString("notifications"), ::OpenAPI::toJsonValue(m_notifications));
    }
    if (m_resolved_at_isSet) {
        obj.insert(QString("resolved_at"), ::OpenAPI::toJsonValue(m_resolved_at));
    }
    if (m_sample_size_isSet) {
        obj.insert(QString("sample_size"), ::OpenAPI::toJsonValue(m_sample_size));
    }
    if (m_sample_size_unit_isSet) {
        obj.insert(QString("sample_size_unit"), ::OpenAPI::toJsonValue(m_sample_size_unit));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("started_at"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_threshold_isSet) {
        obj.insert(QString("threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    return obj;
}

qint64 OAIIncident::getAffectedViews() const {
    return m_affected_views;
}
void OAIIncident::setAffectedViews(const qint64 &affected_views) {
    m_affected_views = affected_views;
    m_affected_views_isSet = true;
}

bool OAIIncident::is_affected_views_Set() const{
    return m_affected_views_isSet;
}

bool OAIIncident::is_affected_views_Valid() const{
    return m_affected_views_isValid;
}

qint64 OAIIncident::getAffectedViewsPerHour() const {
    return m_affected_views_per_hour;
}
void OAIIncident::setAffectedViewsPerHour(const qint64 &affected_views_per_hour) {
    m_affected_views_per_hour = affected_views_per_hour;
    m_affected_views_per_hour_isSet = true;
}

bool OAIIncident::is_affected_views_per_hour_Set() const{
    return m_affected_views_per_hour_isSet;
}

bool OAIIncident::is_affected_views_per_hour_Valid() const{
    return m_affected_views_per_hour_isValid;
}

qint64 OAIIncident::getAffectedViewsPerHourOnOpen() const {
    return m_affected_views_per_hour_on_open;
}
void OAIIncident::setAffectedViewsPerHourOnOpen(const qint64 &affected_views_per_hour_on_open) {
    m_affected_views_per_hour_on_open = affected_views_per_hour_on_open;
    m_affected_views_per_hour_on_open_isSet = true;
}

bool OAIIncident::is_affected_views_per_hour_on_open_Set() const{
    return m_affected_views_per_hour_on_open_isSet;
}

bool OAIIncident::is_affected_views_per_hour_on_open_Valid() const{
    return m_affected_views_per_hour_on_open_isValid;
}

QList<OAIIncidentBreakdown> OAIIncident::getBreakdowns() const {
    return m_breakdowns;
}
void OAIIncident::setBreakdowns(const QList<OAIIncidentBreakdown> &breakdowns) {
    m_breakdowns = breakdowns;
    m_breakdowns_isSet = true;
}

bool OAIIncident::is_breakdowns_Set() const{
    return m_breakdowns_isSet;
}

bool OAIIncident::is_breakdowns_Valid() const{
    return m_breakdowns_isValid;
}

QString OAIIncident::getDescription() const {
    return m_description;
}
void OAIIncident::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIIncident::is_description_Set() const{
    return m_description_isSet;
}

bool OAIIncident::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIIncident::getErrorDescription() const {
    return m_error_description;
}
void OAIIncident::setErrorDescription(const QString &error_description) {
    m_error_description = error_description;
    m_error_description_isSet = true;
}

bool OAIIncident::is_error_description_Set() const{
    return m_error_description_isSet;
}

bool OAIIncident::is_error_description_Valid() const{
    return m_error_description_isValid;
}

QString OAIIncident::getId() const {
    return m_id;
}
void OAIIncident::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIncident::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIncident::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIIncident::getImpact() const {
    return m_impact;
}
void OAIIncident::setImpact(const QString &impact) {
    m_impact = impact;
    m_impact_isSet = true;
}

bool OAIIncident::is_impact_Set() const{
    return m_impact_isSet;
}

bool OAIIncident::is_impact_Valid() const{
    return m_impact_isValid;
}

QString OAIIncident::getIncidentKey() const {
    return m_incident_key;
}
void OAIIncident::setIncidentKey(const QString &incident_key) {
    m_incident_key = incident_key;
    m_incident_key_isSet = true;
}

bool OAIIncident::is_incident_key_Set() const{
    return m_incident_key_isSet;
}

bool OAIIncident::is_incident_key_Valid() const{
    return m_incident_key_isValid;
}

double OAIIncident::getMeasuredValue() const {
    return m_measured_value;
}
void OAIIncident::setMeasuredValue(const double &measured_value) {
    m_measured_value = measured_value;
    m_measured_value_isSet = true;
}

bool OAIIncident::is_measured_value_Set() const{
    return m_measured_value_isSet;
}

bool OAIIncident::is_measured_value_Valid() const{
    return m_measured_value_isValid;
}

double OAIIncident::getMeasuredValueOnClose() const {
    return m_measured_value_on_close;
}
void OAIIncident::setMeasuredValueOnClose(const double &measured_value_on_close) {
    m_measured_value_on_close = measured_value_on_close;
    m_measured_value_on_close_isSet = true;
}

bool OAIIncident::is_measured_value_on_close_Set() const{
    return m_measured_value_on_close_isSet;
}

bool OAIIncident::is_measured_value_on_close_Valid() const{
    return m_measured_value_on_close_isValid;
}

QString OAIIncident::getMeasurement() const {
    return m_measurement;
}
void OAIIncident::setMeasurement(const QString &measurement) {
    m_measurement = measurement;
    m_measurement_isSet = true;
}

bool OAIIncident::is_measurement_Set() const{
    return m_measurement_isSet;
}

bool OAIIncident::is_measurement_Valid() const{
    return m_measurement_isValid;
}

QList<OAIIncidentNotificationRule> OAIIncident::getNotificationRules() const {
    return m_notification_rules;
}
void OAIIncident::setNotificationRules(const QList<OAIIncidentNotificationRule> &notification_rules) {
    m_notification_rules = notification_rules;
    m_notification_rules_isSet = true;
}

bool OAIIncident::is_notification_rules_Set() const{
    return m_notification_rules_isSet;
}

bool OAIIncident::is_notification_rules_Valid() const{
    return m_notification_rules_isValid;
}

QList<OAIIncidentNotification> OAIIncident::getNotifications() const {
    return m_notifications;
}
void OAIIncident::setNotifications(const QList<OAIIncidentNotification> &notifications) {
    m_notifications = notifications;
    m_notifications_isSet = true;
}

bool OAIIncident::is_notifications_Set() const{
    return m_notifications_isSet;
}

bool OAIIncident::is_notifications_Valid() const{
    return m_notifications_isValid;
}

QString OAIIncident::getResolvedAt() const {
    return m_resolved_at;
}
void OAIIncident::setResolvedAt(const QString &resolved_at) {
    m_resolved_at = resolved_at;
    m_resolved_at_isSet = true;
}

bool OAIIncident::is_resolved_at_Set() const{
    return m_resolved_at_isSet;
}

bool OAIIncident::is_resolved_at_Valid() const{
    return m_resolved_at_isValid;
}

qint64 OAIIncident::getSampleSize() const {
    return m_sample_size;
}
void OAIIncident::setSampleSize(const qint64 &sample_size) {
    m_sample_size = sample_size;
    m_sample_size_isSet = true;
}

bool OAIIncident::is_sample_size_Set() const{
    return m_sample_size_isSet;
}

bool OAIIncident::is_sample_size_Valid() const{
    return m_sample_size_isValid;
}

QString OAIIncident::getSampleSizeUnit() const {
    return m_sample_size_unit;
}
void OAIIncident::setSampleSizeUnit(const QString &sample_size_unit) {
    m_sample_size_unit = sample_size_unit;
    m_sample_size_unit_isSet = true;
}

bool OAIIncident::is_sample_size_unit_Set() const{
    return m_sample_size_unit_isSet;
}

bool OAIIncident::is_sample_size_unit_Valid() const{
    return m_sample_size_unit_isValid;
}

QString OAIIncident::getSeverity() const {
    return m_severity;
}
void OAIIncident::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIIncident::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIIncident::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIIncident::getStartedAt() const {
    return m_started_at;
}
void OAIIncident::setStartedAt(const QString &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIIncident::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIIncident::is_started_at_Valid() const{
    return m_started_at_isValid;
}

QString OAIIncident::getStatus() const {
    return m_status;
}
void OAIIncident::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIIncident::is_status_Set() const{
    return m_status_isSet;
}

bool OAIIncident::is_status_Valid() const{
    return m_status_isValid;
}

double OAIIncident::getThreshold() const {
    return m_threshold;
}
void OAIIncident::setThreshold(const double &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAIIncident::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAIIncident::is_threshold_Valid() const{
    return m_threshold_isValid;
}

bool OAIIncident::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affected_views_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_affected_views_per_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_affected_views_per_hour_on_open_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_breakdowns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_incident_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measured_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measured_value_on_close_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_notifications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_size_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIncident::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
