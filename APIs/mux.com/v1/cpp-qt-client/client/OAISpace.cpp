/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpace::OAISpace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpace::OAISpace() {
    this->initializeModel();
}

OAISpace::~OAISpace() {}

void OAISpace::initializeModel() {

    m_active_session_id_isSet = false;
    m_active_session_id_isValid = false;

    m_broadcasts_isSet = false;
    m_broadcasts_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_passthrough_isSet = false;
    m_passthrough_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISpace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpace::fromJsonObject(QJsonObject json) {

    m_active_session_id_isValid = ::OpenAPI::fromJsonValue(m_active_session_id, json[QString("active_session_id")]);
    m_active_session_id_isSet = !json[QString("active_session_id")].isNull() && m_active_session_id_isValid;

    m_broadcasts_isValid = ::OpenAPI::fromJsonValue(m_broadcasts, json[QString("broadcasts")]);
    m_broadcasts_isSet = !json[QString("broadcasts")].isNull() && m_broadcasts_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_passthrough_isValid = ::OpenAPI::fromJsonValue(m_passthrough, json[QString("passthrough")]);
    m_passthrough_isSet = !json[QString("passthrough")].isNull() && m_passthrough_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISpace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpace::asJsonObject() const {
    QJsonObject obj;
    if (m_active_session_id_isSet) {
        obj.insert(QString("active_session_id"), ::OpenAPI::toJsonValue(m_active_session_id));
    }
    if (m_broadcasts.size() > 0) {
        obj.insert(QString("broadcasts"), ::OpenAPI::toJsonValue(m_broadcasts));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_passthrough_isSet) {
        obj.insert(QString("passthrough"), ::OpenAPI::toJsonValue(m_passthrough));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISpace::getActiveSessionId() const {
    return m_active_session_id;
}
void OAISpace::setActiveSessionId(const QString &active_session_id) {
    m_active_session_id = active_session_id;
    m_active_session_id_isSet = true;
}

bool OAISpace::is_active_session_id_Set() const{
    return m_active_session_id_isSet;
}

bool OAISpace::is_active_session_id_Valid() const{
    return m_active_session_id_isValid;
}

QList<OAIBroadcast> OAISpace::getBroadcasts() const {
    return m_broadcasts;
}
void OAISpace::setBroadcasts(const QList<OAIBroadcast> &broadcasts) {
    m_broadcasts = broadcasts;
    m_broadcasts_isSet = true;
}

bool OAISpace::is_broadcasts_Set() const{
    return m_broadcasts_isSet;
}

bool OAISpace::is_broadcasts_Valid() const{
    return m_broadcasts_isValid;
}

QString OAISpace::getCreatedAt() const {
    return m_created_at;
}
void OAISpace::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISpace::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISpace::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISpace::getId() const {
    return m_id;
}
void OAISpace::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISpace::is_id_Set() const{
    return m_id_isSet;
}

bool OAISpace::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISpace::getPassthrough() const {
    return m_passthrough;
}
void OAISpace::setPassthrough(const QString &passthrough) {
    m_passthrough = passthrough;
    m_passthrough_isSet = true;
}

bool OAISpace::is_passthrough_Set() const{
    return m_passthrough_isSet;
}

bool OAISpace::is_passthrough_Valid() const{
    return m_passthrough_isValid;
}

OAISpaceStatus OAISpace::getStatus() const {
    return m_status;
}
void OAISpace::setStatus(const OAISpaceStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISpace::is_status_Set() const{
    return m_status_isSet;
}

bool OAISpace::is_status_Valid() const{
    return m_status_isValid;
}

OAISpaceType OAISpace::getType() const {
    return m_type;
}
void OAISpace::setType(const OAISpaceType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISpace::is_type_Set() const{
    return m_type_isSet;
}

bool OAISpace::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISpace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_broadcasts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passthrough_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpace::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_id_isValid && m_status_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
