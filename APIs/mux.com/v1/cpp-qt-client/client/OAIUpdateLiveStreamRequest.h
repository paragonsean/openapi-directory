/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateLiveStreamRequest.h
 *
 * 
 */

#ifndef OAIUpdateLiveStreamRequest_H
#define OAIUpdateLiveStreamRequest_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUpdateLiveStreamRequest : public OAIObject {
public:
    OAIUpdateLiveStreamRequest();
    OAIUpdateLiveStreamRequest(QString json);
    ~OAIUpdateLiveStreamRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLatencyMode() const;
    void setLatencyMode(const QString &latency_mode);
    bool is_latency_mode_Set() const;
    bool is_latency_mode_Valid() const;

    qint32 getMaxContinuousDuration() const;
    void setMaxContinuousDuration(const qint32 &max_continuous_duration);
    bool is_max_continuous_duration_Set() const;
    bool is_max_continuous_duration_Valid() const;

    QString getPassthrough() const;
    void setPassthrough(const QString &passthrough);
    bool is_passthrough_Set() const;
    bool is_passthrough_Valid() const;

    QString getReconnectSlateUrl() const;
    void setReconnectSlateUrl(const QString &reconnect_slate_url);
    bool is_reconnect_slate_url_Set() const;
    bool is_reconnect_slate_url_Valid() const;

    float getReconnectWindow() const;
    void setReconnectWindow(const float &reconnect_window);
    bool is_reconnect_window_Set() const;
    bool is_reconnect_window_Valid() const;

    bool isUseSlateForStandardLatency() const;
    void setUseSlateForStandardLatency(const bool &use_slate_for_standard_latency);
    bool is_use_slate_for_standard_latency_Set() const;
    bool is_use_slate_for_standard_latency_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_latency_mode;
    bool m_latency_mode_isSet;
    bool m_latency_mode_isValid;

    qint32 m_max_continuous_duration;
    bool m_max_continuous_duration_isSet;
    bool m_max_continuous_duration_isValid;

    QString m_passthrough;
    bool m_passthrough_isSet;
    bool m_passthrough_isValid;

    QString m_reconnect_slate_url;
    bool m_reconnect_slate_url_isSet;
    bool m_reconnect_slate_url_isValid;

    float m_reconnect_window;
    bool m_reconnect_window_isSet;
    bool m_reconnect_window_isValid;

    bool m_use_slate_for_standard_latency;
    bool m_use_slate_for_standard_latency_isSet;
    bool m_use_slate_for_standard_latency_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateLiveStreamRequest)

#endif // OAIUpdateLiveStreamRequest_H
