/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIIncident.h
 *
 * 
 */

#ifndef OAIIncident_H
#define OAIIncident_H

#include <QJsonObject>

#include "OAIIncidentBreakdown.h"
#include "OAIIncidentNotification.h"
#include "OAIIncidentNotificationRule.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIIncidentBreakdown;
class OAIIncidentNotificationRule;
class OAIIncidentNotification;

class OAIIncident : public OAIObject {
public:
    OAIIncident();
    OAIIncident(QString json);
    ~OAIIncident() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getAffectedViews() const;
    void setAffectedViews(const qint64 &affected_views);
    bool is_affected_views_Set() const;
    bool is_affected_views_Valid() const;

    qint64 getAffectedViewsPerHour() const;
    void setAffectedViewsPerHour(const qint64 &affected_views_per_hour);
    bool is_affected_views_per_hour_Set() const;
    bool is_affected_views_per_hour_Valid() const;

    qint64 getAffectedViewsPerHourOnOpen() const;
    void setAffectedViewsPerHourOnOpen(const qint64 &affected_views_per_hour_on_open);
    bool is_affected_views_per_hour_on_open_Set() const;
    bool is_affected_views_per_hour_on_open_Valid() const;

    QList<OAIIncidentBreakdown> getBreakdowns() const;
    void setBreakdowns(const QList<OAIIncidentBreakdown> &breakdowns);
    bool is_breakdowns_Set() const;
    bool is_breakdowns_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getErrorDescription() const;
    void setErrorDescription(const QString &error_description);
    bool is_error_description_Set() const;
    bool is_error_description_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getImpact() const;
    void setImpact(const QString &impact);
    bool is_impact_Set() const;
    bool is_impact_Valid() const;

    QString getIncidentKey() const;
    void setIncidentKey(const QString &incident_key);
    bool is_incident_key_Set() const;
    bool is_incident_key_Valid() const;

    double getMeasuredValue() const;
    void setMeasuredValue(const double &measured_value);
    bool is_measured_value_Set() const;
    bool is_measured_value_Valid() const;

    double getMeasuredValueOnClose() const;
    void setMeasuredValueOnClose(const double &measured_value_on_close);
    bool is_measured_value_on_close_Set() const;
    bool is_measured_value_on_close_Valid() const;

    QString getMeasurement() const;
    void setMeasurement(const QString &measurement);
    bool is_measurement_Set() const;
    bool is_measurement_Valid() const;

    QList<OAIIncidentNotificationRule> getNotificationRules() const;
    void setNotificationRules(const QList<OAIIncidentNotificationRule> &notification_rules);
    bool is_notification_rules_Set() const;
    bool is_notification_rules_Valid() const;

    QList<OAIIncidentNotification> getNotifications() const;
    void setNotifications(const QList<OAIIncidentNotification> &notifications);
    bool is_notifications_Set() const;
    bool is_notifications_Valid() const;

    QString getResolvedAt() const;
    void setResolvedAt(const QString &resolved_at);
    bool is_resolved_at_Set() const;
    bool is_resolved_at_Valid() const;

    qint64 getSampleSize() const;
    void setSampleSize(const qint64 &sample_size);
    bool is_sample_size_Set() const;
    bool is_sample_size_Valid() const;

    QString getSampleSizeUnit() const;
    void setSampleSizeUnit(const QString &sample_size_unit);
    bool is_sample_size_unit_Set() const;
    bool is_sample_size_unit_Valid() const;

    QString getSeverity() const;
    void setSeverity(const QString &severity);
    bool is_severity_Set() const;
    bool is_severity_Valid() const;

    QString getStartedAt() const;
    void setStartedAt(const QString &started_at);
    bool is_started_at_Set() const;
    bool is_started_at_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    double getThreshold() const;
    void setThreshold(const double &threshold);
    bool is_threshold_Set() const;
    bool is_threshold_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_affected_views;
    bool m_affected_views_isSet;
    bool m_affected_views_isValid;

    qint64 m_affected_views_per_hour;
    bool m_affected_views_per_hour_isSet;
    bool m_affected_views_per_hour_isValid;

    qint64 m_affected_views_per_hour_on_open;
    bool m_affected_views_per_hour_on_open_isSet;
    bool m_affected_views_per_hour_on_open_isValid;

    QList<OAIIncidentBreakdown> m_breakdowns;
    bool m_breakdowns_isSet;
    bool m_breakdowns_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_error_description;
    bool m_error_description_isSet;
    bool m_error_description_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_impact;
    bool m_impact_isSet;
    bool m_impact_isValid;

    QString m_incident_key;
    bool m_incident_key_isSet;
    bool m_incident_key_isValid;

    double m_measured_value;
    bool m_measured_value_isSet;
    bool m_measured_value_isValid;

    double m_measured_value_on_close;
    bool m_measured_value_on_close_isSet;
    bool m_measured_value_on_close_isValid;

    QString m_measurement;
    bool m_measurement_isSet;
    bool m_measurement_isValid;

    QList<OAIIncidentNotificationRule> m_notification_rules;
    bool m_notification_rules_isSet;
    bool m_notification_rules_isValid;

    QList<OAIIncidentNotification> m_notifications;
    bool m_notifications_isSet;
    bool m_notifications_isValid;

    QString m_resolved_at;
    bool m_resolved_at_isSet;
    bool m_resolved_at_isValid;

    qint64 m_sample_size;
    bool m_sample_size_isSet;
    bool m_sample_size_isValid;

    QString m_sample_size_unit;
    bool m_sample_size_unit_isSet;
    bool m_sample_size_unit_isValid;

    QString m_severity;
    bool m_severity_isSet;
    bool m_severity_isValid;

    QString m_started_at;
    bool m_started_at_isSet;
    bool m_started_at_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    double m_threshold;
    bool m_threshold_isSet;
    bool m_threshold_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIIncident)

#endif // OAIIncident_H
