/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMonitoringApi_H
#define OAI_OAIMonitoringApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetMonitoringBreakdownResponse.h"
#include "OAIGetMonitoringBreakdownTimeseriesResponse.h"
#include "OAIGetMonitoringHistogramTimeseriesResponse.h"
#include "OAIGetMonitoringTimeseriesResponse.h"
#include "OAIListMonitoringDimensionsResponse.h"
#include "OAIListMonitoringMetricsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMonitoringApi : public QObject {
    Q_OBJECT

public:
    OAIMonitoringApi(const int timeOut = 0);
    ~OAIMonitoringApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  monitoring_metric_id QString [required]
    * @param[in]  dimension QString [optional]
    * @param[in]  timestamp qint32 [optional]
    * @param[in]  filters QList<QString> [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  order_direction QString [optional]
    */
    virtual void getMonitoringBreakdown(const QString &monitoring_metric_id, const ::OpenAPI::OptionalParam<QString> &dimension = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &timestamp = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_direction = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  monitoring_metric_id QString [required]
    * @param[in]  dimension QString [optional]
    * @param[in]  timeframe QList<QString> [optional]
    * @param[in]  filters QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  order_direction QString [optional]
    */
    virtual void getMonitoringBreakdownTimeseries(const QString &monitoring_metric_id, const ::OpenAPI::OptionalParam<QString> &dimension = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &timeframe = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_direction = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  monitoring_histogram_metric_id QString [required]
    * @param[in]  filters QList<QString> [optional]
    */
    virtual void getMonitoringHistogramTimeseries(const QString &monitoring_histogram_metric_id, const ::OpenAPI::OptionalParam<QList<QString>> &filters = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  monitoring_metric_id QString [required]
    * @param[in]  filters QList<QString> [optional]
    * @param[in]  timestamp qint32 [optional]
    */
    virtual void getMonitoringTimeseries(const QString &monitoring_metric_id, const ::OpenAPI::OptionalParam<QList<QString>> &filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &timestamp = ::OpenAPI::OptionalParam<qint32>());


    virtual void listMonitoringDimensions();


    virtual void listMonitoringMetrics();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getMonitoringBreakdownCallback(OAIHttpRequestWorker *worker);
    void getMonitoringBreakdownTimeseriesCallback(OAIHttpRequestWorker *worker);
    void getMonitoringHistogramTimeseriesCallback(OAIHttpRequestWorker *worker);
    void getMonitoringTimeseriesCallback(OAIHttpRequestWorker *worker);
    void listMonitoringDimensionsCallback(OAIHttpRequestWorker *worker);
    void listMonitoringMetricsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getMonitoringBreakdownSignal(OAIGetMonitoringBreakdownResponse summary);
    void getMonitoringBreakdownTimeseriesSignal(OAIGetMonitoringBreakdownTimeseriesResponse summary);
    void getMonitoringHistogramTimeseriesSignal(OAIGetMonitoringHistogramTimeseriesResponse summary);
    void getMonitoringTimeseriesSignal(OAIGetMonitoringTimeseriesResponse summary);
    void listMonitoringDimensionsSignal(OAIListMonitoringDimensionsResponse summary);
    void listMonitoringMetricsSignal(OAIListMonitoringMetricsResponse summary);


    void getMonitoringBreakdownSignalFull(OAIHttpRequestWorker *worker, OAIGetMonitoringBreakdownResponse summary);
    void getMonitoringBreakdownTimeseriesSignalFull(OAIHttpRequestWorker *worker, OAIGetMonitoringBreakdownTimeseriesResponse summary);
    void getMonitoringHistogramTimeseriesSignalFull(OAIHttpRequestWorker *worker, OAIGetMonitoringHistogramTimeseriesResponse summary);
    void getMonitoringTimeseriesSignalFull(OAIHttpRequestWorker *worker, OAIGetMonitoringTimeseriesResponse summary);
    void listMonitoringDimensionsSignalFull(OAIHttpRequestWorker *worker, OAIListMonitoringDimensionsResponse summary);
    void listMonitoringMetricsSignalFull(OAIHttpRequestWorker *worker, OAIListMonitoringMetricsResponse summary);

    Q_DECL_DEPRECATED_X("Use getMonitoringBreakdownSignalError() instead")
    void getMonitoringBreakdownSignalE(OAIGetMonitoringBreakdownResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMonitoringBreakdownSignalError(OAIGetMonitoringBreakdownResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMonitoringBreakdownTimeseriesSignalError() instead")
    void getMonitoringBreakdownTimeseriesSignalE(OAIGetMonitoringBreakdownTimeseriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMonitoringBreakdownTimeseriesSignalError(OAIGetMonitoringBreakdownTimeseriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMonitoringHistogramTimeseriesSignalError() instead")
    void getMonitoringHistogramTimeseriesSignalE(OAIGetMonitoringHistogramTimeseriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMonitoringHistogramTimeseriesSignalError(OAIGetMonitoringHistogramTimeseriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMonitoringTimeseriesSignalError() instead")
    void getMonitoringTimeseriesSignalE(OAIGetMonitoringTimeseriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMonitoringTimeseriesSignalError(OAIGetMonitoringTimeseriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMonitoringDimensionsSignalError() instead")
    void listMonitoringDimensionsSignalE(OAIListMonitoringDimensionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listMonitoringDimensionsSignalError(OAIListMonitoringDimensionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMonitoringMetricsSignalError() instead")
    void listMonitoringMetricsSignalE(OAIListMonitoringMetricsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listMonitoringMetricsSignalError(OAIListMonitoringMetricsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getMonitoringBreakdownSignalErrorFull() instead")
    void getMonitoringBreakdownSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMonitoringBreakdownSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMonitoringBreakdownTimeseriesSignalErrorFull() instead")
    void getMonitoringBreakdownTimeseriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMonitoringBreakdownTimeseriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMonitoringHistogramTimeseriesSignalErrorFull() instead")
    void getMonitoringHistogramTimeseriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMonitoringHistogramTimeseriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMonitoringTimeseriesSignalErrorFull() instead")
    void getMonitoringTimeseriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMonitoringTimeseriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMonitoringDimensionsSignalErrorFull() instead")
    void listMonitoringDimensionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listMonitoringDimensionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMonitoringMetricsSignalErrorFull() instead")
    void listMonitoringMetricsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listMonitoringMetricsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
