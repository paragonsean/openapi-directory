/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLiveStreamRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLiveStreamRequest::OAICreateLiveStreamRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLiveStreamRequest::OAICreateLiveStreamRequest() {
    this->initializeModel();
}

OAICreateLiveStreamRequest::~OAICreateLiveStreamRequest() {}

void OAICreateLiveStreamRequest::initializeModel() {

    m_audio_only_isSet = false;
    m_audio_only_isValid = false;

    m_embedded_subtitles_isSet = false;
    m_embedded_subtitles_isValid = false;

    m_generated_subtitles_isSet = false;
    m_generated_subtitles_isValid = false;

    m_latency_mode_isSet = false;
    m_latency_mode_isValid = false;

    m_low_latency_isSet = false;
    m_low_latency_isValid = false;

    m_max_continuous_duration_isSet = false;
    m_max_continuous_duration_isValid = false;

    m_new_asset_settings_isSet = false;
    m_new_asset_settings_isValid = false;

    m_passthrough_isSet = false;
    m_passthrough_isValid = false;

    m_playback_policy_isSet = false;
    m_playback_policy_isValid = false;

    m_reconnect_slate_url_isSet = false;
    m_reconnect_slate_url_isValid = false;

    m_reconnect_window_isSet = false;
    m_reconnect_window_isValid = false;

    m_reduced_latency_isSet = false;
    m_reduced_latency_isValid = false;

    m_simulcast_targets_isSet = false;
    m_simulcast_targets_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;

    m_use_slate_for_standard_latency_isSet = false;
    m_use_slate_for_standard_latency_isValid = false;
}

void OAICreateLiveStreamRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLiveStreamRequest::fromJsonObject(QJsonObject json) {

    m_audio_only_isValid = ::OpenAPI::fromJsonValue(m_audio_only, json[QString("audio_only")]);
    m_audio_only_isSet = !json[QString("audio_only")].isNull() && m_audio_only_isValid;

    m_embedded_subtitles_isValid = ::OpenAPI::fromJsonValue(m_embedded_subtitles, json[QString("embedded_subtitles")]);
    m_embedded_subtitles_isSet = !json[QString("embedded_subtitles")].isNull() && m_embedded_subtitles_isValid;

    m_generated_subtitles_isValid = ::OpenAPI::fromJsonValue(m_generated_subtitles, json[QString("generated_subtitles")]);
    m_generated_subtitles_isSet = !json[QString("generated_subtitles")].isNull() && m_generated_subtitles_isValid;

    m_latency_mode_isValid = ::OpenAPI::fromJsonValue(m_latency_mode, json[QString("latency_mode")]);
    m_latency_mode_isSet = !json[QString("latency_mode")].isNull() && m_latency_mode_isValid;

    m_low_latency_isValid = ::OpenAPI::fromJsonValue(m_low_latency, json[QString("low_latency")]);
    m_low_latency_isSet = !json[QString("low_latency")].isNull() && m_low_latency_isValid;

    m_max_continuous_duration_isValid = ::OpenAPI::fromJsonValue(m_max_continuous_duration, json[QString("max_continuous_duration")]);
    m_max_continuous_duration_isSet = !json[QString("max_continuous_duration")].isNull() && m_max_continuous_duration_isValid;

    m_new_asset_settings_isValid = ::OpenAPI::fromJsonValue(m_new_asset_settings, json[QString("new_asset_settings")]);
    m_new_asset_settings_isSet = !json[QString("new_asset_settings")].isNull() && m_new_asset_settings_isValid;

    m_passthrough_isValid = ::OpenAPI::fromJsonValue(m_passthrough, json[QString("passthrough")]);
    m_passthrough_isSet = !json[QString("passthrough")].isNull() && m_passthrough_isValid;

    m_playback_policy_isValid = ::OpenAPI::fromJsonValue(m_playback_policy, json[QString("playback_policy")]);
    m_playback_policy_isSet = !json[QString("playback_policy")].isNull() && m_playback_policy_isValid;

    m_reconnect_slate_url_isValid = ::OpenAPI::fromJsonValue(m_reconnect_slate_url, json[QString("reconnect_slate_url")]);
    m_reconnect_slate_url_isSet = !json[QString("reconnect_slate_url")].isNull() && m_reconnect_slate_url_isValid;

    m_reconnect_window_isValid = ::OpenAPI::fromJsonValue(m_reconnect_window, json[QString("reconnect_window")]);
    m_reconnect_window_isSet = !json[QString("reconnect_window")].isNull() && m_reconnect_window_isValid;

    m_reduced_latency_isValid = ::OpenAPI::fromJsonValue(m_reduced_latency, json[QString("reduced_latency")]);
    m_reduced_latency_isSet = !json[QString("reduced_latency")].isNull() && m_reduced_latency_isValid;

    m_simulcast_targets_isValid = ::OpenAPI::fromJsonValue(m_simulcast_targets, json[QString("simulcast_targets")]);
    m_simulcast_targets_isSet = !json[QString("simulcast_targets")].isNull() && m_simulcast_targets_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;

    m_use_slate_for_standard_latency_isValid = ::OpenAPI::fromJsonValue(m_use_slate_for_standard_latency, json[QString("use_slate_for_standard_latency")]);
    m_use_slate_for_standard_latency_isSet = !json[QString("use_slate_for_standard_latency")].isNull() && m_use_slate_for_standard_latency_isValid;
}

QString OAICreateLiveStreamRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLiveStreamRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_only_isSet) {
        obj.insert(QString("audio_only"), ::OpenAPI::toJsonValue(m_audio_only));
    }
    if (m_embedded_subtitles.size() > 0) {
        obj.insert(QString("embedded_subtitles"), ::OpenAPI::toJsonValue(m_embedded_subtitles));
    }
    if (m_generated_subtitles.size() > 0) {
        obj.insert(QString("generated_subtitles"), ::OpenAPI::toJsonValue(m_generated_subtitles));
    }
    if (m_latency_mode_isSet) {
        obj.insert(QString("latency_mode"), ::OpenAPI::toJsonValue(m_latency_mode));
    }
    if (m_low_latency_isSet) {
        obj.insert(QString("low_latency"), ::OpenAPI::toJsonValue(m_low_latency));
    }
    if (m_max_continuous_duration_isSet) {
        obj.insert(QString("max_continuous_duration"), ::OpenAPI::toJsonValue(m_max_continuous_duration));
    }
    if (m_new_asset_settings.isSet()) {
        obj.insert(QString("new_asset_settings"), ::OpenAPI::toJsonValue(m_new_asset_settings));
    }
    if (m_passthrough_isSet) {
        obj.insert(QString("passthrough"), ::OpenAPI::toJsonValue(m_passthrough));
    }
    if (m_playback_policy.size() > 0) {
        obj.insert(QString("playback_policy"), ::OpenAPI::toJsonValue(m_playback_policy));
    }
    if (m_reconnect_slate_url_isSet) {
        obj.insert(QString("reconnect_slate_url"), ::OpenAPI::toJsonValue(m_reconnect_slate_url));
    }
    if (m_reconnect_window_isSet) {
        obj.insert(QString("reconnect_window"), ::OpenAPI::toJsonValue(m_reconnect_window));
    }
    if (m_reduced_latency_isSet) {
        obj.insert(QString("reduced_latency"), ::OpenAPI::toJsonValue(m_reduced_latency));
    }
    if (m_simulcast_targets.size() > 0) {
        obj.insert(QString("simulcast_targets"), ::OpenAPI::toJsonValue(m_simulcast_targets));
    }
    if (m_test_isSet) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    if (m_use_slate_for_standard_latency_isSet) {
        obj.insert(QString("use_slate_for_standard_latency"), ::OpenAPI::toJsonValue(m_use_slate_for_standard_latency));
    }
    return obj;
}

bool OAICreateLiveStreamRequest::isAudioOnly() const {
    return m_audio_only;
}
void OAICreateLiveStreamRequest::setAudioOnly(const bool &audio_only) {
    m_audio_only = audio_only;
    m_audio_only_isSet = true;
}

bool OAICreateLiveStreamRequest::is_audio_only_Set() const{
    return m_audio_only_isSet;
}

bool OAICreateLiveStreamRequest::is_audio_only_Valid() const{
    return m_audio_only_isValid;
}

QList<OAILiveStreamEmbeddedSubtitleSettings> OAICreateLiveStreamRequest::getEmbeddedSubtitles() const {
    return m_embedded_subtitles;
}
void OAICreateLiveStreamRequest::setEmbeddedSubtitles(const QList<OAILiveStreamEmbeddedSubtitleSettings> &embedded_subtitles) {
    m_embedded_subtitles = embedded_subtitles;
    m_embedded_subtitles_isSet = true;
}

bool OAICreateLiveStreamRequest::is_embedded_subtitles_Set() const{
    return m_embedded_subtitles_isSet;
}

bool OAICreateLiveStreamRequest::is_embedded_subtitles_Valid() const{
    return m_embedded_subtitles_isValid;
}

QList<OAILiveStreamGeneratedSubtitleSettings> OAICreateLiveStreamRequest::getGeneratedSubtitles() const {
    return m_generated_subtitles;
}
void OAICreateLiveStreamRequest::setGeneratedSubtitles(const QList<OAILiveStreamGeneratedSubtitleSettings> &generated_subtitles) {
    m_generated_subtitles = generated_subtitles;
    m_generated_subtitles_isSet = true;
}

bool OAICreateLiveStreamRequest::is_generated_subtitles_Set() const{
    return m_generated_subtitles_isSet;
}

bool OAICreateLiveStreamRequest::is_generated_subtitles_Valid() const{
    return m_generated_subtitles_isValid;
}

QString OAICreateLiveStreamRequest::getLatencyMode() const {
    return m_latency_mode;
}
void OAICreateLiveStreamRequest::setLatencyMode(const QString &latency_mode) {
    m_latency_mode = latency_mode;
    m_latency_mode_isSet = true;
}

bool OAICreateLiveStreamRequest::is_latency_mode_Set() const{
    return m_latency_mode_isSet;
}

bool OAICreateLiveStreamRequest::is_latency_mode_Valid() const{
    return m_latency_mode_isValid;
}

bool OAICreateLiveStreamRequest::isLowLatency() const {
    return m_low_latency;
}
void OAICreateLiveStreamRequest::setLowLatency(const bool &low_latency) {
    m_low_latency = low_latency;
    m_low_latency_isSet = true;
}

bool OAICreateLiveStreamRequest::is_low_latency_Set() const{
    return m_low_latency_isSet;
}

bool OAICreateLiveStreamRequest::is_low_latency_Valid() const{
    return m_low_latency_isValid;
}

qint32 OAICreateLiveStreamRequest::getMaxContinuousDuration() const {
    return m_max_continuous_duration;
}
void OAICreateLiveStreamRequest::setMaxContinuousDuration(const qint32 &max_continuous_duration) {
    m_max_continuous_duration = max_continuous_duration;
    m_max_continuous_duration_isSet = true;
}

bool OAICreateLiveStreamRequest::is_max_continuous_duration_Set() const{
    return m_max_continuous_duration_isSet;
}

bool OAICreateLiveStreamRequest::is_max_continuous_duration_Valid() const{
    return m_max_continuous_duration_isValid;
}

OAICreateAssetRequest OAICreateLiveStreamRequest::getNewAssetSettings() const {
    return m_new_asset_settings;
}
void OAICreateLiveStreamRequest::setNewAssetSettings(const OAICreateAssetRequest &new_asset_settings) {
    m_new_asset_settings = new_asset_settings;
    m_new_asset_settings_isSet = true;
}

bool OAICreateLiveStreamRequest::is_new_asset_settings_Set() const{
    return m_new_asset_settings_isSet;
}

bool OAICreateLiveStreamRequest::is_new_asset_settings_Valid() const{
    return m_new_asset_settings_isValid;
}

QString OAICreateLiveStreamRequest::getPassthrough() const {
    return m_passthrough;
}
void OAICreateLiveStreamRequest::setPassthrough(const QString &passthrough) {
    m_passthrough = passthrough;
    m_passthrough_isSet = true;
}

bool OAICreateLiveStreamRequest::is_passthrough_Set() const{
    return m_passthrough_isSet;
}

bool OAICreateLiveStreamRequest::is_passthrough_Valid() const{
    return m_passthrough_isValid;
}

QList<OAIPlaybackPolicy> OAICreateLiveStreamRequest::getPlaybackPolicy() const {
    return m_playback_policy;
}
void OAICreateLiveStreamRequest::setPlaybackPolicy(const QList<OAIPlaybackPolicy> &playback_policy) {
    m_playback_policy = playback_policy;
    m_playback_policy_isSet = true;
}

bool OAICreateLiveStreamRequest::is_playback_policy_Set() const{
    return m_playback_policy_isSet;
}

bool OAICreateLiveStreamRequest::is_playback_policy_Valid() const{
    return m_playback_policy_isValid;
}

QString OAICreateLiveStreamRequest::getReconnectSlateUrl() const {
    return m_reconnect_slate_url;
}
void OAICreateLiveStreamRequest::setReconnectSlateUrl(const QString &reconnect_slate_url) {
    m_reconnect_slate_url = reconnect_slate_url;
    m_reconnect_slate_url_isSet = true;
}

bool OAICreateLiveStreamRequest::is_reconnect_slate_url_Set() const{
    return m_reconnect_slate_url_isSet;
}

bool OAICreateLiveStreamRequest::is_reconnect_slate_url_Valid() const{
    return m_reconnect_slate_url_isValid;
}

float OAICreateLiveStreamRequest::getReconnectWindow() const {
    return m_reconnect_window;
}
void OAICreateLiveStreamRequest::setReconnectWindow(const float &reconnect_window) {
    m_reconnect_window = reconnect_window;
    m_reconnect_window_isSet = true;
}

bool OAICreateLiveStreamRequest::is_reconnect_window_Set() const{
    return m_reconnect_window_isSet;
}

bool OAICreateLiveStreamRequest::is_reconnect_window_Valid() const{
    return m_reconnect_window_isValid;
}

bool OAICreateLiveStreamRequest::isReducedLatency() const {
    return m_reduced_latency;
}
void OAICreateLiveStreamRequest::setReducedLatency(const bool &reduced_latency) {
    m_reduced_latency = reduced_latency;
    m_reduced_latency_isSet = true;
}

bool OAICreateLiveStreamRequest::is_reduced_latency_Set() const{
    return m_reduced_latency_isSet;
}

bool OAICreateLiveStreamRequest::is_reduced_latency_Valid() const{
    return m_reduced_latency_isValid;
}

QList<OAICreateSimulcastTargetRequest> OAICreateLiveStreamRequest::getSimulcastTargets() const {
    return m_simulcast_targets;
}
void OAICreateLiveStreamRequest::setSimulcastTargets(const QList<OAICreateSimulcastTargetRequest> &simulcast_targets) {
    m_simulcast_targets = simulcast_targets;
    m_simulcast_targets_isSet = true;
}

bool OAICreateLiveStreamRequest::is_simulcast_targets_Set() const{
    return m_simulcast_targets_isSet;
}

bool OAICreateLiveStreamRequest::is_simulcast_targets_Valid() const{
    return m_simulcast_targets_isValid;
}

bool OAICreateLiveStreamRequest::isTest() const {
    return m_test;
}
void OAICreateLiveStreamRequest::setTest(const bool &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAICreateLiveStreamRequest::is_test_Set() const{
    return m_test_isSet;
}

bool OAICreateLiveStreamRequest::is_test_Valid() const{
    return m_test_isValid;
}

bool OAICreateLiveStreamRequest::isUseSlateForStandardLatency() const {
    return m_use_slate_for_standard_latency;
}
void OAICreateLiveStreamRequest::setUseSlateForStandardLatency(const bool &use_slate_for_standard_latency) {
    m_use_slate_for_standard_latency = use_slate_for_standard_latency;
    m_use_slate_for_standard_latency_isSet = true;
}

bool OAICreateLiveStreamRequest::is_use_slate_for_standard_latency_Set() const{
    return m_use_slate_for_standard_latency_isSet;
}

bool OAICreateLiveStreamRequest::is_use_slate_for_standard_latency_Valid() const{
    return m_use_slate_for_standard_latency_isValid;
}

bool OAICreateLiveStreamRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embedded_subtitles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_generated_subtitles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_low_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_continuous_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_asset_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_passthrough_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_policy.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconnect_slate_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconnect_window_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reduced_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simulcast_targets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_slate_for_standard_latency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLiveStreamRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
