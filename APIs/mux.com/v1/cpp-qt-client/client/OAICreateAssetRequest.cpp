/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAssetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAssetRequest::OAICreateAssetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAssetRequest::OAICreateAssetRequest() {
    this->initializeModel();
}

OAICreateAssetRequest::~OAICreateAssetRequest() {}

void OAICreateAssetRequest::initializeModel() {

    m_encoding_tier_isSet = false;
    m_encoding_tier_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_master_access_isSet = false;
    m_master_access_isValid = false;

    m_max_resolution_tier_isSet = false;
    m_max_resolution_tier_isValid = false;

    m_mp4_support_isSet = false;
    m_mp4_support_isValid = false;

    m_normalize_audio_isSet = false;
    m_normalize_audio_isValid = false;

    m_passthrough_isSet = false;
    m_passthrough_isValid = false;

    m_per_title_encode_isSet = false;
    m_per_title_encode_isValid = false;

    m_playback_policy_isSet = false;
    m_playback_policy_isValid = false;

    m_test_isSet = false;
    m_test_isValid = false;
}

void OAICreateAssetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAssetRequest::fromJsonObject(QJsonObject json) {

    m_encoding_tier_isValid = ::OpenAPI::fromJsonValue(m_encoding_tier, json[QString("encoding_tier")]);
    m_encoding_tier_isSet = !json[QString("encoding_tier")].isNull() && m_encoding_tier_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_master_access_isValid = ::OpenAPI::fromJsonValue(m_master_access, json[QString("master_access")]);
    m_master_access_isSet = !json[QString("master_access")].isNull() && m_master_access_isValid;

    m_max_resolution_tier_isValid = ::OpenAPI::fromJsonValue(m_max_resolution_tier, json[QString("max_resolution_tier")]);
    m_max_resolution_tier_isSet = !json[QString("max_resolution_tier")].isNull() && m_max_resolution_tier_isValid;

    m_mp4_support_isValid = ::OpenAPI::fromJsonValue(m_mp4_support, json[QString("mp4_support")]);
    m_mp4_support_isSet = !json[QString("mp4_support")].isNull() && m_mp4_support_isValid;

    m_normalize_audio_isValid = ::OpenAPI::fromJsonValue(m_normalize_audio, json[QString("normalize_audio")]);
    m_normalize_audio_isSet = !json[QString("normalize_audio")].isNull() && m_normalize_audio_isValid;

    m_passthrough_isValid = ::OpenAPI::fromJsonValue(m_passthrough, json[QString("passthrough")]);
    m_passthrough_isSet = !json[QString("passthrough")].isNull() && m_passthrough_isValid;

    m_per_title_encode_isValid = ::OpenAPI::fromJsonValue(m_per_title_encode, json[QString("per_title_encode")]);
    m_per_title_encode_isSet = !json[QString("per_title_encode")].isNull() && m_per_title_encode_isValid;

    m_playback_policy_isValid = ::OpenAPI::fromJsonValue(m_playback_policy, json[QString("playback_policy")]);
    m_playback_policy_isSet = !json[QString("playback_policy")].isNull() && m_playback_policy_isValid;

    m_test_isValid = ::OpenAPI::fromJsonValue(m_test, json[QString("test")]);
    m_test_isSet = !json[QString("test")].isNull() && m_test_isValid;
}

QString OAICreateAssetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAssetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_encoding_tier_isSet) {
        obj.insert(QString("encoding_tier"), ::OpenAPI::toJsonValue(m_encoding_tier));
    }
    if (m_input.size() > 0) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_master_access_isSet) {
        obj.insert(QString("master_access"), ::OpenAPI::toJsonValue(m_master_access));
    }
    if (m_max_resolution_tier_isSet) {
        obj.insert(QString("max_resolution_tier"), ::OpenAPI::toJsonValue(m_max_resolution_tier));
    }
    if (m_mp4_support_isSet) {
        obj.insert(QString("mp4_support"), ::OpenAPI::toJsonValue(m_mp4_support));
    }
    if (m_normalize_audio_isSet) {
        obj.insert(QString("normalize_audio"), ::OpenAPI::toJsonValue(m_normalize_audio));
    }
    if (m_passthrough_isSet) {
        obj.insert(QString("passthrough"), ::OpenAPI::toJsonValue(m_passthrough));
    }
    if (m_per_title_encode_isSet) {
        obj.insert(QString("per_title_encode"), ::OpenAPI::toJsonValue(m_per_title_encode));
    }
    if (m_playback_policy.size() > 0) {
        obj.insert(QString("playback_policy"), ::OpenAPI::toJsonValue(m_playback_policy));
    }
    if (m_test_isSet) {
        obj.insert(QString("test"), ::OpenAPI::toJsonValue(m_test));
    }
    return obj;
}

QString OAICreateAssetRequest::getEncodingTier() const {
    return m_encoding_tier;
}
void OAICreateAssetRequest::setEncodingTier(const QString &encoding_tier) {
    m_encoding_tier = encoding_tier;
    m_encoding_tier_isSet = true;
}

bool OAICreateAssetRequest::is_encoding_tier_Set() const{
    return m_encoding_tier_isSet;
}

bool OAICreateAssetRequest::is_encoding_tier_Valid() const{
    return m_encoding_tier_isValid;
}

QList<OAIInputSettings> OAICreateAssetRequest::getInput() const {
    return m_input;
}
void OAICreateAssetRequest::setInput(const QList<OAIInputSettings> &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAICreateAssetRequest::is_input_Set() const{
    return m_input_isSet;
}

bool OAICreateAssetRequest::is_input_Valid() const{
    return m_input_isValid;
}

QString OAICreateAssetRequest::getMasterAccess() const {
    return m_master_access;
}
void OAICreateAssetRequest::setMasterAccess(const QString &master_access) {
    m_master_access = master_access;
    m_master_access_isSet = true;
}

bool OAICreateAssetRequest::is_master_access_Set() const{
    return m_master_access_isSet;
}

bool OAICreateAssetRequest::is_master_access_Valid() const{
    return m_master_access_isValid;
}

QString OAICreateAssetRequest::getMaxResolutionTier() const {
    return m_max_resolution_tier;
}
void OAICreateAssetRequest::setMaxResolutionTier(const QString &max_resolution_tier) {
    m_max_resolution_tier = max_resolution_tier;
    m_max_resolution_tier_isSet = true;
}

bool OAICreateAssetRequest::is_max_resolution_tier_Set() const{
    return m_max_resolution_tier_isSet;
}

bool OAICreateAssetRequest::is_max_resolution_tier_Valid() const{
    return m_max_resolution_tier_isValid;
}

QString OAICreateAssetRequest::getMp4Support() const {
    return m_mp4_support;
}
void OAICreateAssetRequest::setMp4Support(const QString &mp4_support) {
    m_mp4_support = mp4_support;
    m_mp4_support_isSet = true;
}

bool OAICreateAssetRequest::is_mp4_support_Set() const{
    return m_mp4_support_isSet;
}

bool OAICreateAssetRequest::is_mp4_support_Valid() const{
    return m_mp4_support_isValid;
}

bool OAICreateAssetRequest::isNormalizeAudio() const {
    return m_normalize_audio;
}
void OAICreateAssetRequest::setNormalizeAudio(const bool &normalize_audio) {
    m_normalize_audio = normalize_audio;
    m_normalize_audio_isSet = true;
}

bool OAICreateAssetRequest::is_normalize_audio_Set() const{
    return m_normalize_audio_isSet;
}

bool OAICreateAssetRequest::is_normalize_audio_Valid() const{
    return m_normalize_audio_isValid;
}

QString OAICreateAssetRequest::getPassthrough() const {
    return m_passthrough;
}
void OAICreateAssetRequest::setPassthrough(const QString &passthrough) {
    m_passthrough = passthrough;
    m_passthrough_isSet = true;
}

bool OAICreateAssetRequest::is_passthrough_Set() const{
    return m_passthrough_isSet;
}

bool OAICreateAssetRequest::is_passthrough_Valid() const{
    return m_passthrough_isValid;
}

bool OAICreateAssetRequest::isPerTitleEncode() const {
    return m_per_title_encode;
}
void OAICreateAssetRequest::setPerTitleEncode(const bool &per_title_encode) {
    m_per_title_encode = per_title_encode;
    m_per_title_encode_isSet = true;
}

bool OAICreateAssetRequest::is_per_title_encode_Set() const{
    return m_per_title_encode_isSet;
}

bool OAICreateAssetRequest::is_per_title_encode_Valid() const{
    return m_per_title_encode_isValid;
}

QList<OAIPlaybackPolicy> OAICreateAssetRequest::getPlaybackPolicy() const {
    return m_playback_policy;
}
void OAICreateAssetRequest::setPlaybackPolicy(const QList<OAIPlaybackPolicy> &playback_policy) {
    m_playback_policy = playback_policy;
    m_playback_policy_isSet = true;
}

bool OAICreateAssetRequest::is_playback_policy_Set() const{
    return m_playback_policy_isSet;
}

bool OAICreateAssetRequest::is_playback_policy_Valid() const{
    return m_playback_policy_isValid;
}

bool OAICreateAssetRequest::isTest() const {
    return m_test;
}
void OAICreateAssetRequest::setTest(const bool &test) {
    m_test = test;
    m_test_isSet = true;
}

bool OAICreateAssetRequest::is_test_Set() const{
    return m_test_isSet;
}

bool OAICreateAssetRequest::is_test_Valid() const{
    return m_test_isValid;
}

bool OAICreateAssetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encoding_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_resolution_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mp4_support_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_normalize_audio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passthrough_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_title_encode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_playback_policy.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAssetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
