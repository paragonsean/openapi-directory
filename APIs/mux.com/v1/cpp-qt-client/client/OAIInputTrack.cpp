/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputTrack.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputTrack::OAIInputTrack(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputTrack::OAIInputTrack() {
    this->initializeModel();
}

OAIInputTrack::~OAIInputTrack() {}

void OAIInputTrack::initializeModel() {

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_encoding_isSet = false;
    m_encoding_isValid = false;

    m_frame_rate_isSet = false;
    m_frame_rate_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_sample_rate_isSet = false;
    m_sample_rate_isValid = false;

    m_sample_size_isSet = false;
    m_sample_size_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIInputTrack::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputTrack::fromJsonObject(QJsonObject json) {

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_encoding_isValid = ::OpenAPI::fromJsonValue(m_encoding, json[QString("encoding")]);
    m_encoding_isSet = !json[QString("encoding")].isNull() && m_encoding_isValid;

    m_frame_rate_isValid = ::OpenAPI::fromJsonValue(m_frame_rate, json[QString("frame_rate")]);
    m_frame_rate_isSet = !json[QString("frame_rate")].isNull() && m_frame_rate_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_sample_rate_isValid = ::OpenAPI::fromJsonValue(m_sample_rate, json[QString("sample_rate")]);
    m_sample_rate_isSet = !json[QString("sample_rate")].isNull() && m_sample_rate_isValid;

    m_sample_size_isValid = ::OpenAPI::fromJsonValue(m_sample_size, json[QString("sample_size")]);
    m_sample_size_isSet = !json[QString("sample_size")].isNull() && m_sample_size_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIInputTrack::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputTrack::asJsonObject() const {
    QJsonObject obj;
    if (m_channels_isSet) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_encoding_isSet) {
        obj.insert(QString("encoding"), ::OpenAPI::toJsonValue(m_encoding));
    }
    if (m_frame_rate_isSet) {
        obj.insert(QString("frame_rate"), ::OpenAPI::toJsonValue(m_frame_rate));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_sample_rate_isSet) {
        obj.insert(QString("sample_rate"), ::OpenAPI::toJsonValue(m_sample_rate));
    }
    if (m_sample_size_isSet) {
        obj.insert(QString("sample_size"), ::OpenAPI::toJsonValue(m_sample_size));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

qint64 OAIInputTrack::getChannels() const {
    return m_channels;
}
void OAIInputTrack::setChannels(const qint64 &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIInputTrack::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIInputTrack::is_channels_Valid() const{
    return m_channels_isValid;
}

double OAIInputTrack::getDuration() const {
    return m_duration;
}
void OAIInputTrack::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIInputTrack::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIInputTrack::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIInputTrack::getEncoding() const {
    return m_encoding;
}
void OAIInputTrack::setEncoding(const QString &encoding) {
    m_encoding = encoding;
    m_encoding_isSet = true;
}

bool OAIInputTrack::is_encoding_Set() const{
    return m_encoding_isSet;
}

bool OAIInputTrack::is_encoding_Valid() const{
    return m_encoding_isValid;
}

double OAIInputTrack::getFrameRate() const {
    return m_frame_rate;
}
void OAIInputTrack::setFrameRate(const double &frame_rate) {
    m_frame_rate = frame_rate;
    m_frame_rate_isSet = true;
}

bool OAIInputTrack::is_frame_rate_Set() const{
    return m_frame_rate_isSet;
}

bool OAIInputTrack::is_frame_rate_Valid() const{
    return m_frame_rate_isValid;
}

qint64 OAIInputTrack::getHeight() const {
    return m_height;
}
void OAIInputTrack::setHeight(const qint64 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIInputTrack::is_height_Set() const{
    return m_height_isSet;
}

bool OAIInputTrack::is_height_Valid() const{
    return m_height_isValid;
}

qint64 OAIInputTrack::getSampleRate() const {
    return m_sample_rate;
}
void OAIInputTrack::setSampleRate(const qint64 &sample_rate) {
    m_sample_rate = sample_rate;
    m_sample_rate_isSet = true;
}

bool OAIInputTrack::is_sample_rate_Set() const{
    return m_sample_rate_isSet;
}

bool OAIInputTrack::is_sample_rate_Valid() const{
    return m_sample_rate_isValid;
}

qint64 OAIInputTrack::getSampleSize() const {
    return m_sample_size;
}
void OAIInputTrack::setSampleSize(const qint64 &sample_size) {
    m_sample_size = sample_size;
    m_sample_size_isSet = true;
}

bool OAIInputTrack::is_sample_size_Set() const{
    return m_sample_size_isSet;
}

bool OAIInputTrack::is_sample_size_Valid() const{
    return m_sample_size_isValid;
}

QString OAIInputTrack::getType() const {
    return m_type;
}
void OAIInputTrack::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInputTrack::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInputTrack::is_type_Valid() const{
    return m_type_isValid;
}

qint64 OAIInputTrack::getWidth() const {
    return m_width;
}
void OAIInputTrack::setWidth(const qint64 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIInputTrack::is_width_Set() const{
    return m_width_isSet;
}

bool OAIInputTrack::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIInputTrack::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encoding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sample_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputTrack::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
