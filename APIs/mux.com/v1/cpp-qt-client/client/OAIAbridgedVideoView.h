/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAbridgedVideoView.h
 *
 * 
 */

#ifndef OAIAbridgedVideoView_H
#define OAIAbridgedVideoView_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAbridgedVideoView : public OAIObject {
public:
    OAIAbridgedVideoView();
    OAIAbridgedVideoView(QString json);
    ~OAIAbridgedVideoView() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCountryCode() const;
    void setCountryCode(const QString &country_code);
    bool is_country_code_Set() const;
    bool is_country_code_Valid() const;

    qint32 getErrorTypeId() const;
    void setErrorTypeId(const qint32 &error_type_id);
    bool is_error_type_id_Set() const;
    bool is_error_type_id_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getPlayerErrorCode() const;
    void setPlayerErrorCode(const QString &player_error_code);
    bool is_player_error_code_Set() const;
    bool is_player_error_code_Valid() const;

    QString getPlayerErrorMessage() const;
    void setPlayerErrorMessage(const QString &player_error_message);
    bool is_player_error_message_Set() const;
    bool is_player_error_message_Valid() const;

    qint64 getTotalRowCount() const;
    void setTotalRowCount(const qint64 &total_row_count);
    bool is_total_row_count_Set() const;
    bool is_total_row_count_Valid() const;

    QString getVideoTitle() const;
    void setVideoTitle(const QString &video_title);
    bool is_video_title_Set() const;
    bool is_video_title_Valid() const;

    QString getViewEnd() const;
    void setViewEnd(const QString &view_end);
    bool is_view_end_Set() const;
    bool is_view_end_Valid() const;

    QString getViewStart() const;
    void setViewStart(const QString &view_start);
    bool is_view_start_Set() const;
    bool is_view_start_Valid() const;

    QString getViewerApplicationName() const;
    void setViewerApplicationName(const QString &viewer_application_name);
    bool is_viewer_application_name_Set() const;
    bool is_viewer_application_name_Valid() const;

    QString getViewerOsFamily() const;
    void setViewerOsFamily(const QString &viewer_os_family);
    bool is_viewer_os_family_Set() const;
    bool is_viewer_os_family_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_country_code;
    bool m_country_code_isSet;
    bool m_country_code_isValid;

    qint32 m_error_type_id;
    bool m_error_type_id_isSet;
    bool m_error_type_id_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_player_error_code;
    bool m_player_error_code_isSet;
    bool m_player_error_code_isValid;

    QString m_player_error_message;
    bool m_player_error_message_isSet;
    bool m_player_error_message_isValid;

    qint64 m_total_row_count;
    bool m_total_row_count_isSet;
    bool m_total_row_count_isValid;

    QString m_video_title;
    bool m_video_title_isSet;
    bool m_video_title_isValid;

    QString m_view_end;
    bool m_view_end_isSet;
    bool m_view_end_isValid;

    QString m_view_start;
    bool m_view_start_isSet;
    bool m_view_start_isValid;

    QString m_viewer_application_name;
    bool m_viewer_application_name_isSet;
    bool m_viewer_application_name_isValid;

    QString m_viewer_os_family;
    bool m_viewer_os_family_isSet;
    bool m_viewer_os_family_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAbridgedVideoView)

#endif // OAIAbridgedVideoView_H
