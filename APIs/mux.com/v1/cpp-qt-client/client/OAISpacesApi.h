/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISpacesApi_H
#define OAI_OAISpacesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBroadcastResponse.h"
#include "OAICreateBroadcastRequest.h"
#include "OAICreateSpaceRequest.h"
#include "OAIListSpacesResponse.h"
#include "OAISpaceResponse.h"
#include "OAIStartSpaceBroadcastResponse.h"
#include "OAIStopSpaceBroadcastResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISpacesApi : public QObject {
    Q_OBJECT

public:
    OAISpacesApi(const int timeOut = 0);
    ~OAISpacesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_space_request OAICreateSpaceRequest [required]
    */
    Q_DECL_DEPRECATED virtual void createSpace(const OAICreateSpaceRequest &oai_create_space_request);

    /**
    * @param[in]  space_id QString [required]
    * @param[in]  oai_create_broadcast_request OAICreateBroadcastRequest [required]
    */
    Q_DECL_DEPRECATED virtual void createSpaceBroadcast(const QString &space_id, const OAICreateBroadcastRequest &oai_create_broadcast_request);

    /**
    * @param[in]  space_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void deleteSpace(const QString &space_id);

    /**
    * @param[in]  space_id QString [required]
    * @param[in]  broadcast_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void deleteSpaceBroadcast(const QString &space_id, const QString &broadcast_id);

    /**
    * @param[in]  space_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void getSpace(const QString &space_id);

    /**
    * @param[in]  space_id QString [required]
    * @param[in]  broadcast_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void getSpaceBroadcast(const QString &space_id, const QString &broadcast_id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    Q_DECL_DEPRECATED virtual void listSpaces(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  space_id QString [required]
    * @param[in]  broadcast_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void startSpaceBroadcast(const QString &space_id, const QString &broadcast_id);

    /**
    * @param[in]  space_id QString [required]
    * @param[in]  broadcast_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void stopSpaceBroadcast(const QString &space_id, const QString &broadcast_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createSpaceCallback(OAIHttpRequestWorker *worker);
    void createSpaceBroadcastCallback(OAIHttpRequestWorker *worker);
    void deleteSpaceCallback(OAIHttpRequestWorker *worker);
    void deleteSpaceBroadcastCallback(OAIHttpRequestWorker *worker);
    void getSpaceCallback(OAIHttpRequestWorker *worker);
    void getSpaceBroadcastCallback(OAIHttpRequestWorker *worker);
    void listSpacesCallback(OAIHttpRequestWorker *worker);
    void startSpaceBroadcastCallback(OAIHttpRequestWorker *worker);
    void stopSpaceBroadcastCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createSpaceSignal(OAISpaceResponse summary);
    void createSpaceBroadcastSignal(OAIBroadcastResponse summary);
    void deleteSpaceSignal();
    void deleteSpaceBroadcastSignal();
    void getSpaceSignal(OAISpaceResponse summary);
    void getSpaceBroadcastSignal(OAIBroadcastResponse summary);
    void listSpacesSignal(OAIListSpacesResponse summary);
    void startSpaceBroadcastSignal(OAIStartSpaceBroadcastResponse summary);
    void stopSpaceBroadcastSignal(OAIStopSpaceBroadcastResponse summary);


    void createSpaceSignalFull(OAIHttpRequestWorker *worker, OAISpaceResponse summary);
    void createSpaceBroadcastSignalFull(OAIHttpRequestWorker *worker, OAIBroadcastResponse summary);
    void deleteSpaceSignalFull(OAIHttpRequestWorker *worker);
    void deleteSpaceBroadcastSignalFull(OAIHttpRequestWorker *worker);
    void getSpaceSignalFull(OAIHttpRequestWorker *worker, OAISpaceResponse summary);
    void getSpaceBroadcastSignalFull(OAIHttpRequestWorker *worker, OAIBroadcastResponse summary);
    void listSpacesSignalFull(OAIHttpRequestWorker *worker, OAIListSpacesResponse summary);
    void startSpaceBroadcastSignalFull(OAIHttpRequestWorker *worker, OAIStartSpaceBroadcastResponse summary);
    void stopSpaceBroadcastSignalFull(OAIHttpRequestWorker *worker, OAIStopSpaceBroadcastResponse summary);

    Q_DECL_DEPRECATED_X("Use createSpaceSignalError() instead")
    void createSpaceSignalE(OAISpaceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSpaceSignalError(OAISpaceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSpaceBroadcastSignalError() instead")
    void createSpaceBroadcastSignalE(OAIBroadcastResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSpaceBroadcastSignalError(OAIBroadcastResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSpaceSignalError() instead")
    void deleteSpaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSpaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSpaceBroadcastSignalError() instead")
    void deleteSpaceBroadcastSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSpaceBroadcastSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpaceSignalError() instead")
    void getSpaceSignalE(OAISpaceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpaceSignalError(OAISpaceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpaceBroadcastSignalError() instead")
    void getSpaceBroadcastSignalE(OAIBroadcastResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpaceBroadcastSignalError(OAIBroadcastResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSpacesSignalError() instead")
    void listSpacesSignalE(OAIListSpacesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSpacesSignalError(OAIListSpacesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startSpaceBroadcastSignalError() instead")
    void startSpaceBroadcastSignalE(OAIStartSpaceBroadcastResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startSpaceBroadcastSignalError(OAIStartSpaceBroadcastResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopSpaceBroadcastSignalError() instead")
    void stopSpaceBroadcastSignalE(OAIStopSpaceBroadcastResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopSpaceBroadcastSignalError(OAIStopSpaceBroadcastResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createSpaceSignalErrorFull() instead")
    void createSpaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSpaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSpaceBroadcastSignalErrorFull() instead")
    void createSpaceBroadcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSpaceBroadcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSpaceSignalErrorFull() instead")
    void deleteSpaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSpaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSpaceBroadcastSignalErrorFull() instead")
    void deleteSpaceBroadcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSpaceBroadcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpaceSignalErrorFull() instead")
    void getSpaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpaceBroadcastSignalErrorFull() instead")
    void getSpaceBroadcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpaceBroadcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSpacesSignalErrorFull() instead")
    void listSpacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSpacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startSpaceBroadcastSignalErrorFull() instead")
    void startSpaceBroadcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startSpaceBroadcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopSpaceBroadcastSignalErrorFull() instead")
    void stopSpaceBroadcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopSpaceBroadcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
