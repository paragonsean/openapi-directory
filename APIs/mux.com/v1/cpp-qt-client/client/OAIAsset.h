/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAsset.h
 *
 * 
 */

#ifndef OAIAsset_H
#define OAIAsset_H

#include <QJsonObject>

#include "OAIAsset_errors.h"
#include "OAIAsset_master.h"
#include "OAIAsset_non_standard_input_reasons.h"
#include "OAIAsset_recording_times_inner.h"
#include "OAIAsset_static_renditions.h"
#include "OAIPlaybackID.h"
#include "OAITrack.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAsset_errors;
class OAIAsset_master;
class OAIAsset_non_standard_input_reasons;
class OAIPlaybackID;
class OAIAsset_recording_times_inner;
class OAIAsset_static_renditions;
class OAITrack;

class OAIAsset : public OAIObject {
public:
    OAIAsset();
    OAIAsset(QString json);
    ~OAIAsset() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAspectRatio() const;
    void setAspectRatio(const QString &aspect_ratio);
    bool is_aspect_ratio_Set() const;
    bool is_aspect_ratio_Valid() const;

    QString getCreatedAt() const;
    void setCreatedAt(const QString &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    double getDuration() const;
    void setDuration(const double &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    QString getEncodingTier() const;
    void setEncodingTier(const QString &encoding_tier);
    bool is_encoding_tier_Set() const;
    bool is_encoding_tier_Valid() const;

    OAIAsset_errors getErrors() const;
    void setErrors(const OAIAsset_errors &errors);
    bool is_errors_Set() const;
    bool is_errors_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isIsLive() const;
    void setIsLive(const bool &is_live);
    bool is_is_live_Set() const;
    bool is_is_live_Valid() const;

    QString getLiveStreamId() const;
    void setLiveStreamId(const QString &live_stream_id);
    bool is_live_stream_id_Set() const;
    bool is_live_stream_id_Valid() const;

    OAIAsset_master getMaster() const;
    void setMaster(const OAIAsset_master &master);
    bool is_master_Set() const;
    bool is_master_Valid() const;

    QString getMasterAccess() const;
    void setMasterAccess(const QString &master_access);
    bool is_master_access_Set() const;
    bool is_master_access_Valid() const;

    QString getMaxResolutionTier() const;
    void setMaxResolutionTier(const QString &max_resolution_tier);
    bool is_max_resolution_tier_Set() const;
    bool is_max_resolution_tier_Valid() const;

    double getMaxStoredFrameRate() const;
    void setMaxStoredFrameRate(const double &max_stored_frame_rate);
    bool is_max_stored_frame_rate_Set() const;
    bool is_max_stored_frame_rate_Valid() const;

    Q_DECL_DEPRECATED QString getMaxStoredResolution() const;
    Q_DECL_DEPRECATED void setMaxStoredResolution(const QString &max_stored_resolution);
    Q_DECL_DEPRECATED bool is_max_stored_resolution_Set() const;
    Q_DECL_DEPRECATED bool is_max_stored_resolution_Valid() const;

    QString getMp4Support() const;
    void setMp4Support(const QString &mp4_support);
    bool is_mp4_support_Set() const;
    bool is_mp4_support_Valid() const;

    OAIAsset_non_standard_input_reasons getNonStandardInputReasons() const;
    void setNonStandardInputReasons(const OAIAsset_non_standard_input_reasons &non_standard_input_reasons);
    bool is_non_standard_input_reasons_Set() const;
    bool is_non_standard_input_reasons_Valid() const;

    bool isNormalizeAudio() const;
    void setNormalizeAudio(const bool &normalize_audio);
    bool is_normalize_audio_Set() const;
    bool is_normalize_audio_Valid() const;

    QString getPassthrough() const;
    void setPassthrough(const QString &passthrough);
    bool is_passthrough_Set() const;
    bool is_passthrough_Valid() const;

    Q_DECL_DEPRECATED bool isPerTitleEncode() const;
    Q_DECL_DEPRECATED void setPerTitleEncode(const bool &per_title_encode);
    Q_DECL_DEPRECATED bool is_per_title_encode_Set() const;
    Q_DECL_DEPRECATED bool is_per_title_encode_Valid() const;

    QList<OAIPlaybackID> getPlaybackIds() const;
    void setPlaybackIds(const QList<OAIPlaybackID> &playback_ids);
    bool is_playback_ids_Set() const;
    bool is_playback_ids_Valid() const;

    QList<OAIAsset_recording_times_inner> getRecordingTimes() const;
    void setRecordingTimes(const QList<OAIAsset_recording_times_inner> &recording_times);
    bool is_recording_times_Set() const;
    bool is_recording_times_Valid() const;

    QString getResolutionTier() const;
    void setResolutionTier(const QString &resolution_tier);
    bool is_resolution_tier_Set() const;
    bool is_resolution_tier_Valid() const;

    QString getSourceAssetId() const;
    void setSourceAssetId(const QString &source_asset_id);
    bool is_source_asset_id_Set() const;
    bool is_source_asset_id_Valid() const;

    OAIAsset_static_renditions getStaticRenditions() const;
    void setStaticRenditions(const OAIAsset_static_renditions &static_renditions);
    bool is_static_renditions_Set() const;
    bool is_static_renditions_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    bool isTest() const;
    void setTest(const bool &test);
    bool is_test_Set() const;
    bool is_test_Valid() const;

    QList<OAITrack> getTracks() const;
    void setTracks(const QList<OAITrack> &tracks);
    bool is_tracks_Set() const;
    bool is_tracks_Valid() const;

    QString getUploadId() const;
    void setUploadId(const QString &upload_id);
    bool is_upload_id_Set() const;
    bool is_upload_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_aspect_ratio;
    bool m_aspect_ratio_isSet;
    bool m_aspect_ratio_isValid;

    QString m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    double m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    QString m_encoding_tier;
    bool m_encoding_tier_isSet;
    bool m_encoding_tier_isValid;

    OAIAsset_errors m_errors;
    bool m_errors_isSet;
    bool m_errors_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_is_live;
    bool m_is_live_isSet;
    bool m_is_live_isValid;

    QString m_live_stream_id;
    bool m_live_stream_id_isSet;
    bool m_live_stream_id_isValid;

    OAIAsset_master m_master;
    bool m_master_isSet;
    bool m_master_isValid;

    QString m_master_access;
    bool m_master_access_isSet;
    bool m_master_access_isValid;

    QString m_max_resolution_tier;
    bool m_max_resolution_tier_isSet;
    bool m_max_resolution_tier_isValid;

    double m_max_stored_frame_rate;
    bool m_max_stored_frame_rate_isSet;
    bool m_max_stored_frame_rate_isValid;

    QString m_max_stored_resolution;
    bool m_max_stored_resolution_isSet;
    bool m_max_stored_resolution_isValid;

    QString m_mp4_support;
    bool m_mp4_support_isSet;
    bool m_mp4_support_isValid;

    OAIAsset_non_standard_input_reasons m_non_standard_input_reasons;
    bool m_non_standard_input_reasons_isSet;
    bool m_non_standard_input_reasons_isValid;

    bool m_normalize_audio;
    bool m_normalize_audio_isSet;
    bool m_normalize_audio_isValid;

    QString m_passthrough;
    bool m_passthrough_isSet;
    bool m_passthrough_isValid;

    bool m_per_title_encode;
    bool m_per_title_encode_isSet;
    bool m_per_title_encode_isValid;

    QList<OAIPlaybackID> m_playback_ids;
    bool m_playback_ids_isSet;
    bool m_playback_ids_isValid;

    QList<OAIAsset_recording_times_inner> m_recording_times;
    bool m_recording_times_isSet;
    bool m_recording_times_isValid;

    QString m_resolution_tier;
    bool m_resolution_tier_isSet;
    bool m_resolution_tier_isValid;

    QString m_source_asset_id;
    bool m_source_asset_id_isSet;
    bool m_source_asset_id_isValid;

    OAIAsset_static_renditions m_static_renditions;
    bool m_static_renditions_isSet;
    bool m_static_renditions_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    bool m_test;
    bool m_test_isSet;
    bool m_test_isValid;

    QList<OAITrack> m_tracks;
    bool m_tracks_isSet;
    bool m_tracks_isValid;

    QString m_upload_id;
    bool m_upload_id_isSet;
    bool m_upload_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAsset)

#endif // OAIAsset_H
