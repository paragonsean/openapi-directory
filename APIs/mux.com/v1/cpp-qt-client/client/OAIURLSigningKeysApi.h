/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIURLSigningKeysApi_H
#define OAI_OAIURLSigningKeysApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListSigningKeysResponse.h"
#include "OAISigningKeyResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIURLSigningKeysApi : public QObject {
    Q_OBJECT

public:
    OAIURLSigningKeysApi(const int timeOut = 0);
    ~OAIURLSigningKeysApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    Q_DECL_DEPRECATED virtual void createUrlSigningKey();

    /**
    * @param[in]  signing_key_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void deleteUrlSigningKey(const QString &signing_key_id);

    /**
    * @param[in]  signing_key_id QString [required]
    */
    Q_DECL_DEPRECATED virtual void getUrlSigningKey(const QString &signing_key_id);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    */
    Q_DECL_DEPRECATED virtual void listUrlSigningKeys(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createUrlSigningKeyCallback(OAIHttpRequestWorker *worker);
    void deleteUrlSigningKeyCallback(OAIHttpRequestWorker *worker);
    void getUrlSigningKeyCallback(OAIHttpRequestWorker *worker);
    void listUrlSigningKeysCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createUrlSigningKeySignal(OAISigningKeyResponse summary);
    void deleteUrlSigningKeySignal();
    void getUrlSigningKeySignal(OAISigningKeyResponse summary);
    void listUrlSigningKeysSignal(OAIListSigningKeysResponse summary);


    void createUrlSigningKeySignalFull(OAIHttpRequestWorker *worker, OAISigningKeyResponse summary);
    void deleteUrlSigningKeySignalFull(OAIHttpRequestWorker *worker);
    void getUrlSigningKeySignalFull(OAIHttpRequestWorker *worker, OAISigningKeyResponse summary);
    void listUrlSigningKeysSignalFull(OAIHttpRequestWorker *worker, OAIListSigningKeysResponse summary);

    Q_DECL_DEPRECATED_X("Use createUrlSigningKeySignalError() instead")
    void createUrlSigningKeySignalE(OAISigningKeyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createUrlSigningKeySignalError(OAISigningKeyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUrlSigningKeySignalError() instead")
    void deleteUrlSigningKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUrlSigningKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUrlSigningKeySignalError() instead")
    void getUrlSigningKeySignalE(OAISigningKeyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUrlSigningKeySignalError(OAISigningKeyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUrlSigningKeysSignalError() instead")
    void listUrlSigningKeysSignalE(OAIListSigningKeysResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUrlSigningKeysSignalError(OAIListSigningKeysResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createUrlSigningKeySignalErrorFull() instead")
    void createUrlSigningKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUrlSigningKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUrlSigningKeySignalErrorFull() instead")
    void deleteUrlSigningKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUrlSigningKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUrlSigningKeySignalErrorFull() instead")
    void getUrlSigningKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUrlSigningKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUrlSigningKeysSignalErrorFull() instead")
    void listUrlSigningKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUrlSigningKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
