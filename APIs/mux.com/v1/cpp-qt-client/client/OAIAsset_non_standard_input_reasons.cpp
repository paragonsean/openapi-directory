/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsset_non_standard_input_reasons.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsset_non_standard_input_reasons::OAIAsset_non_standard_input_reasons(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsset_non_standard_input_reasons::OAIAsset_non_standard_input_reasons() {
    this->initializeModel();
}

OAIAsset_non_standard_input_reasons::~OAIAsset_non_standard_input_reasons() {}

void OAIAsset_non_standard_input_reasons::initializeModel() {

    m_audio_codec_isSet = false;
    m_audio_codec_isValid = false;

    m_audio_edit_list_isSet = false;
    m_audio_edit_list_isValid = false;

    m_pixel_aspect_ratio_isSet = false;
    m_pixel_aspect_ratio_isValid = false;

    m_unexpected_media_file_parameters_isSet = false;
    m_unexpected_media_file_parameters_isValid = false;

    m_unsupported_pixel_format_isSet = false;
    m_unsupported_pixel_format_isValid = false;

    m_video_bitrate_isSet = false;
    m_video_bitrate_isValid = false;

    m_video_codec_isSet = false;
    m_video_codec_isValid = false;

    m_video_edit_list_isSet = false;
    m_video_edit_list_isValid = false;

    m_video_frame_rate_isSet = false;
    m_video_frame_rate_isValid = false;

    m_video_gop_size_isSet = false;
    m_video_gop_size_isValid = false;

    m_video_resolution_isSet = false;
    m_video_resolution_isValid = false;
}

void OAIAsset_non_standard_input_reasons::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsset_non_standard_input_reasons::fromJsonObject(QJsonObject json) {

    m_audio_codec_isValid = ::OpenAPI::fromJsonValue(m_audio_codec, json[QString("audio_codec")]);
    m_audio_codec_isSet = !json[QString("audio_codec")].isNull() && m_audio_codec_isValid;

    m_audio_edit_list_isValid = ::OpenAPI::fromJsonValue(m_audio_edit_list, json[QString("audio_edit_list")]);
    m_audio_edit_list_isSet = !json[QString("audio_edit_list")].isNull() && m_audio_edit_list_isValid;

    m_pixel_aspect_ratio_isValid = ::OpenAPI::fromJsonValue(m_pixel_aspect_ratio, json[QString("pixel_aspect_ratio")]);
    m_pixel_aspect_ratio_isSet = !json[QString("pixel_aspect_ratio")].isNull() && m_pixel_aspect_ratio_isValid;

    m_unexpected_media_file_parameters_isValid = ::OpenAPI::fromJsonValue(m_unexpected_media_file_parameters, json[QString("unexpected_media_file_parameters")]);
    m_unexpected_media_file_parameters_isSet = !json[QString("unexpected_media_file_parameters")].isNull() && m_unexpected_media_file_parameters_isValid;

    m_unsupported_pixel_format_isValid = ::OpenAPI::fromJsonValue(m_unsupported_pixel_format, json[QString("unsupported_pixel_format")]);
    m_unsupported_pixel_format_isSet = !json[QString("unsupported_pixel_format")].isNull() && m_unsupported_pixel_format_isValid;

    m_video_bitrate_isValid = ::OpenAPI::fromJsonValue(m_video_bitrate, json[QString("video_bitrate")]);
    m_video_bitrate_isSet = !json[QString("video_bitrate")].isNull() && m_video_bitrate_isValid;

    m_video_codec_isValid = ::OpenAPI::fromJsonValue(m_video_codec, json[QString("video_codec")]);
    m_video_codec_isSet = !json[QString("video_codec")].isNull() && m_video_codec_isValid;

    m_video_edit_list_isValid = ::OpenAPI::fromJsonValue(m_video_edit_list, json[QString("video_edit_list")]);
    m_video_edit_list_isSet = !json[QString("video_edit_list")].isNull() && m_video_edit_list_isValid;

    m_video_frame_rate_isValid = ::OpenAPI::fromJsonValue(m_video_frame_rate, json[QString("video_frame_rate")]);
    m_video_frame_rate_isSet = !json[QString("video_frame_rate")].isNull() && m_video_frame_rate_isValid;

    m_video_gop_size_isValid = ::OpenAPI::fromJsonValue(m_video_gop_size, json[QString("video_gop_size")]);
    m_video_gop_size_isSet = !json[QString("video_gop_size")].isNull() && m_video_gop_size_isValid;

    m_video_resolution_isValid = ::OpenAPI::fromJsonValue(m_video_resolution, json[QString("video_resolution")]);
    m_video_resolution_isSet = !json[QString("video_resolution")].isNull() && m_video_resolution_isValid;
}

QString OAIAsset_non_standard_input_reasons::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsset_non_standard_input_reasons::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_codec_isSet) {
        obj.insert(QString("audio_codec"), ::OpenAPI::toJsonValue(m_audio_codec));
    }
    if (m_audio_edit_list_isSet) {
        obj.insert(QString("audio_edit_list"), ::OpenAPI::toJsonValue(m_audio_edit_list));
    }
    if (m_pixel_aspect_ratio_isSet) {
        obj.insert(QString("pixel_aspect_ratio"), ::OpenAPI::toJsonValue(m_pixel_aspect_ratio));
    }
    if (m_unexpected_media_file_parameters_isSet) {
        obj.insert(QString("unexpected_media_file_parameters"), ::OpenAPI::toJsonValue(m_unexpected_media_file_parameters));
    }
    if (m_unsupported_pixel_format_isSet) {
        obj.insert(QString("unsupported_pixel_format"), ::OpenAPI::toJsonValue(m_unsupported_pixel_format));
    }
    if (m_video_bitrate_isSet) {
        obj.insert(QString("video_bitrate"), ::OpenAPI::toJsonValue(m_video_bitrate));
    }
    if (m_video_codec_isSet) {
        obj.insert(QString("video_codec"), ::OpenAPI::toJsonValue(m_video_codec));
    }
    if (m_video_edit_list_isSet) {
        obj.insert(QString("video_edit_list"), ::OpenAPI::toJsonValue(m_video_edit_list));
    }
    if (m_video_frame_rate_isSet) {
        obj.insert(QString("video_frame_rate"), ::OpenAPI::toJsonValue(m_video_frame_rate));
    }
    if (m_video_gop_size_isSet) {
        obj.insert(QString("video_gop_size"), ::OpenAPI::toJsonValue(m_video_gop_size));
    }
    if (m_video_resolution_isSet) {
        obj.insert(QString("video_resolution"), ::OpenAPI::toJsonValue(m_video_resolution));
    }
    return obj;
}

QString OAIAsset_non_standard_input_reasons::getAudioCodec() const {
    return m_audio_codec;
}
void OAIAsset_non_standard_input_reasons::setAudioCodec(const QString &audio_codec) {
    m_audio_codec = audio_codec;
    m_audio_codec_isSet = true;
}

bool OAIAsset_non_standard_input_reasons::is_audio_codec_Set() const{
    return m_audio_codec_isSet;
}

bool OAIAsset_non_standard_input_reasons::is_audio_codec_Valid() const{
    return m_audio_codec_isValid;
}

QString OAIAsset_non_standard_input_reasons::getAudioEditList() const {
    return m_audio_edit_list;
}
void OAIAsset_non_standard_input_reasons::setAudioEditList(const QString &audio_edit_list) {
    m_audio_edit_list = audio_edit_list;
    m_audio_edit_list_isSet = true;
}

bool OAIAsset_non_standard_input_reasons::is_audio_edit_list_Set() const{
    return m_audio_edit_list_isSet;
}

bool OAIAsset_non_standard_input_reasons::is_audio_edit_list_Valid() const{
    return m_audio_edit_list_isValid;
}

QString OAIAsset_non_standard_input_reasons::getPixelAspectRatio() const {
    return m_pixel_aspect_ratio;
}
void OAIAsset_non_standard_input_reasons::setPixelAspectRatio(const QString &pixel_aspect_ratio) {
    m_pixel_aspect_ratio = pixel_aspect_ratio;
    m_pixel_aspect_ratio_isSet = true;
}

bool OAIAsset_non_standard_input_reasons::is_pixel_aspect_ratio_Set() const{
    return m_pixel_aspect_ratio_isSet;
}

bool OAIAsset_non_standard_input_reasons::is_pixel_aspect_ratio_Valid() const{
    return m_pixel_aspect_ratio_isValid;
}

QString OAIAsset_non_standard_input_reasons::getUnexpectedMediaFileParameters() const {
    return m_unexpected_media_file_parameters;
}
void OAIAsset_non_standard_input_reasons::setUnexpectedMediaFileParameters(const QString &unexpected_media_file_parameters) {
    m_unexpected_media_file_parameters = unexpected_media_file_parameters;
    m_unexpected_media_file_parameters_isSet = true;
}

bool OAIAsset_non_standard_input_reasons::is_unexpected_media_file_parameters_Set() const{
    return m_unexpected_media_file_parameters_isSet;
}

bool OAIAsset_non_standard_input_reasons::is_unexpected_media_file_parameters_Valid() const{
    return m_unexpected_media_file_parameters_isValid;
}

QString OAIAsset_non_standard_input_reasons::getUnsupportedPixelFormat() const {
    return m_unsupported_pixel_format;
}
void OAIAsset_non_standard_input_reasons::setUnsupportedPixelFormat(const QString &unsupported_pixel_format) {
    m_unsupported_pixel_format = unsupported_pixel_format;
    m_unsupported_pixel_format_isSet = true;
}

bool OAIAsset_non_standard_input_reasons::is_unsupported_pixel_format_Set() const{
    return m_unsupported_pixel_format_isSet;
}

bool OAIAsset_non_standard_input_reasons::is_unsupported_pixel_format_Valid() const{
    return m_unsupported_pixel_format_isValid;
}

QString OAIAsset_non_standard_input_reasons::getVideoBitrate() const {
    return m_video_bitrate;
}
void OAIAsset_non_standard_input_reasons::setVideoBitrate(const QString &video_bitrate) {
    m_video_bitrate = video_bitrate;
    m_video_bitrate_isSet = true;
}

bool OAIAsset_non_standard_input_reasons::is_video_bitrate_Set() const{
    return m_video_bitrate_isSet;
}

bool OAIAsset_non_standard_input_reasons::is_video_bitrate_Valid() const{
    return m_video_bitrate_isValid;
}

QString OAIAsset_non_standard_input_reasons::getVideoCodec() const {
    return m_video_codec;
}
void OAIAsset_non_standard_input_reasons::setVideoCodec(const QString &video_codec) {
    m_video_codec = video_codec;
    m_video_codec_isSet = true;
}

bool OAIAsset_non_standard_input_reasons::is_video_codec_Set() const{
    return m_video_codec_isSet;
}

bool OAIAsset_non_standard_input_reasons::is_video_codec_Valid() const{
    return m_video_codec_isValid;
}

QString OAIAsset_non_standard_input_reasons::getVideoEditList() const {
    return m_video_edit_list;
}
void OAIAsset_non_standard_input_reasons::setVideoEditList(const QString &video_edit_list) {
    m_video_edit_list = video_edit_list;
    m_video_edit_list_isSet = true;
}

bool OAIAsset_non_standard_input_reasons::is_video_edit_list_Set() const{
    return m_video_edit_list_isSet;
}

bool OAIAsset_non_standard_input_reasons::is_video_edit_list_Valid() const{
    return m_video_edit_list_isValid;
}

QString OAIAsset_non_standard_input_reasons::getVideoFrameRate() const {
    return m_video_frame_rate;
}
void OAIAsset_non_standard_input_reasons::setVideoFrameRate(const QString &video_frame_rate) {
    m_video_frame_rate = video_frame_rate;
    m_video_frame_rate_isSet = true;
}

bool OAIAsset_non_standard_input_reasons::is_video_frame_rate_Set() const{
    return m_video_frame_rate_isSet;
}

bool OAIAsset_non_standard_input_reasons::is_video_frame_rate_Valid() const{
    return m_video_frame_rate_isValid;
}

QString OAIAsset_non_standard_input_reasons::getVideoGopSize() const {
    return m_video_gop_size;
}
void OAIAsset_non_standard_input_reasons::setVideoGopSize(const QString &video_gop_size) {
    m_video_gop_size = video_gop_size;
    m_video_gop_size_isSet = true;
}

bool OAIAsset_non_standard_input_reasons::is_video_gop_size_Set() const{
    return m_video_gop_size_isSet;
}

bool OAIAsset_non_standard_input_reasons::is_video_gop_size_Valid() const{
    return m_video_gop_size_isValid;
}

QString OAIAsset_non_standard_input_reasons::getVideoResolution() const {
    return m_video_resolution;
}
void OAIAsset_non_standard_input_reasons::setVideoResolution(const QString &video_resolution) {
    m_video_resolution = video_resolution;
    m_video_resolution_isSet = true;
}

bool OAIAsset_non_standard_input_reasons::is_video_resolution_Set() const{
    return m_video_resolution_isSet;
}

bool OAIAsset_non_standard_input_reasons::is_video_resolution_Valid() const{
    return m_video_resolution_isValid;
}

bool OAIAsset_non_standard_input_reasons::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_codec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audio_edit_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pixel_aspect_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unexpected_media_file_parameters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unsupported_pixel_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_codec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_edit_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_frame_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_gop_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsset_non_standard_input_reasons::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
