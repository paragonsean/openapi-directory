/**
 * Mux API
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTrackRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTrackRequest::OAICreateTrackRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTrackRequest::OAICreateTrackRequest() {
    this->initializeModel();
}

OAICreateTrackRequest::~OAICreateTrackRequest() {}

void OAICreateTrackRequest::initializeModel() {

    m_closed_captions_isSet = false;
    m_closed_captions_isValid = false;

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_passthrough_isSet = false;
    m_passthrough_isValid = false;

    m_text_type_isSet = false;
    m_text_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICreateTrackRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTrackRequest::fromJsonObject(QJsonObject json) {

    m_closed_captions_isValid = ::OpenAPI::fromJsonValue(m_closed_captions, json[QString("closed_captions")]);
    m_closed_captions_isSet = !json[QString("closed_captions")].isNull() && m_closed_captions_isValid;

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("language_code")]);
    m_language_code_isSet = !json[QString("language_code")].isNull() && m_language_code_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_passthrough_isValid = ::OpenAPI::fromJsonValue(m_passthrough, json[QString("passthrough")]);
    m_passthrough_isSet = !json[QString("passthrough")].isNull() && m_passthrough_isValid;

    m_text_type_isValid = ::OpenAPI::fromJsonValue(m_text_type, json[QString("text_type")]);
    m_text_type_isSet = !json[QString("text_type")].isNull() && m_text_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICreateTrackRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTrackRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_closed_captions_isSet) {
        obj.insert(QString("closed_captions"), ::OpenAPI::toJsonValue(m_closed_captions));
    }
    if (m_language_code_isSet) {
        obj.insert(QString("language_code"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_passthrough_isSet) {
        obj.insert(QString("passthrough"), ::OpenAPI::toJsonValue(m_passthrough));
    }
    if (m_text_type_isSet) {
        obj.insert(QString("text_type"), ::OpenAPI::toJsonValue(m_text_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

bool OAICreateTrackRequest::isClosedCaptions() const {
    return m_closed_captions;
}
void OAICreateTrackRequest::setClosedCaptions(const bool &closed_captions) {
    m_closed_captions = closed_captions;
    m_closed_captions_isSet = true;
}

bool OAICreateTrackRequest::is_closed_captions_Set() const{
    return m_closed_captions_isSet;
}

bool OAICreateTrackRequest::is_closed_captions_Valid() const{
    return m_closed_captions_isValid;
}

QString OAICreateTrackRequest::getLanguageCode() const {
    return m_language_code;
}
void OAICreateTrackRequest::setLanguageCode(const QString &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAICreateTrackRequest::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAICreateTrackRequest::is_language_code_Valid() const{
    return m_language_code_isValid;
}

QString OAICreateTrackRequest::getName() const {
    return m_name;
}
void OAICreateTrackRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateTrackRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateTrackRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateTrackRequest::getPassthrough() const {
    return m_passthrough;
}
void OAICreateTrackRequest::setPassthrough(const QString &passthrough) {
    m_passthrough = passthrough;
    m_passthrough_isSet = true;
}

bool OAICreateTrackRequest::is_passthrough_Set() const{
    return m_passthrough_isSet;
}

bool OAICreateTrackRequest::is_passthrough_Valid() const{
    return m_passthrough_isValid;
}

QString OAICreateTrackRequest::getTextType() const {
    return m_text_type;
}
void OAICreateTrackRequest::setTextType(const QString &text_type) {
    m_text_type = text_type;
    m_text_type_isSet = true;
}

bool OAICreateTrackRequest::is_text_type_Set() const{
    return m_text_type_isSet;
}

bool OAICreateTrackRequest::is_text_type_Valid() const{
    return m_text_type_isValid;
}

QString OAICreateTrackRequest::getType() const {
    return m_type;
}
void OAICreateTrackRequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateTrackRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateTrackRequest::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICreateTrackRequest::getUrl() const {
    return m_url;
}
void OAICreateTrackRequest::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICreateTrackRequest::is_url_Set() const{
    return m_url_isSet;
}

bool OAICreateTrackRequest::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICreateTrackRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_closed_captions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passthrough_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTrackRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_language_code_isValid && m_text_type_isValid && m_type_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
