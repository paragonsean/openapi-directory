# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BankAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, bank_code: str=None, bic: str=None, code: str=None, iban: str=None, name: str=None, sort_code: str=None, status: str=None, vatin: str=None):
        """BankAttributes - a model defined in OpenAPI

        :param account_number: The account_number of this BankAttributes.
        :param bank_code: The bank_code of this BankAttributes.
        :param bic: The bic of this BankAttributes.
        :param code: The code of this BankAttributes.
        :param iban: The iban of this BankAttributes.
        :param name: The name of this BankAttributes.
        :param sort_code: The sort_code of this BankAttributes.
        :param status: The status of this BankAttributes.
        :param vatin: The vatin of this BankAttributes.
        """
        self.openapi_types = {
            'account_number': str,
            'bank_code': str,
            'bic': str,
            'code': str,
            'iban': str,
            'name': str,
            'sort_code': str,
            'status': str,
            'vatin': str
        }

        self.attribute_map = {
            'account_number': 'account_number',
            'bank_code': 'bank_code',
            'bic': 'bic',
            'code': 'code',
            'iban': 'iban',
            'name': 'name',
            'sort_code': 'sort_code',
            'status': 'status',
            'vatin': 'vatin'
        }

        self._account_number = account_number
        self._bank_code = bank_code
        self._bic = bic
        self._code = code
        self._iban = iban
        self._name = name
        self._sort_code = sort_code
        self._status = status
        self._vatin = vatin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankAttributes of this BankAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this BankAttributes.


        :return: The account_number of this BankAttributes.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this BankAttributes.


        :param account_number: The account_number of this BankAttributes.
        :type account_number: str
        """

        self._account_number = account_number

    @property
    def bank_code(self):
        """Gets the bank_code of this BankAttributes.


        :return: The bank_code of this BankAttributes.
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """Sets the bank_code of this BankAttributes.


        :param bank_code: The bank_code of this BankAttributes.
        :type bank_code: str
        """

        self._bank_code = bank_code

    @property
    def bic(self):
        """Gets the bic of this BankAttributes.


        :return: The bic of this BankAttributes.
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this BankAttributes.


        :param bic: The bic of this BankAttributes.
        :type bic: str
        """

        self._bic = bic

    @property
    def code(self):
        """Gets the code of this BankAttributes.

        Bank`s code

        :return: The code of this BankAttributes.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this BankAttributes.

        Bank`s code

        :param code: The code of this BankAttributes.
        :type code: str
        """

        self._code = code

    @property
    def iban(self):
        """Gets the iban of this BankAttributes.


        :return: The iban of this BankAttributes.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this BankAttributes.


        :param iban: The iban of this BankAttributes.
        :type iban: str
        """

        self._iban = iban

    @property
    def name(self):
        """Gets the name of this BankAttributes.

        Bank`s name

        :return: The name of this BankAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BankAttributes.

        Bank`s name

        :param name: The name of this BankAttributes.
        :type name: str
        """

        self._name = name

    @property
    def sort_code(self):
        """Gets the sort_code of this BankAttributes.


        :return: The sort_code of this BankAttributes.
        :rtype: str
        """
        return self._sort_code

    @sort_code.setter
    def sort_code(self, sort_code):
        """Sets the sort_code of this BankAttributes.


        :param sort_code: The sort_code of this BankAttributes.
        :type sort_code: str
        """

        self._sort_code = sort_code

    @property
    def status(self):
        """Gets the status of this BankAttributes.

        Status [active, liquidated, problem, deleted]

        :return: The status of this BankAttributes.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BankAttributes.

        Status [active, liquidated, problem, deleted]

        :param status: The status of this BankAttributes.
        :type status: str
        """

        self._status = status

    @property
    def vatin(self):
        """Gets the vatin of this BankAttributes.


        :return: The vatin of this BankAttributes.
        :rtype: str
        """
        return self._vatin

    @vatin.setter
    def vatin(self, vatin):
        """Sets the vatin of this BankAttributes.


        :param vatin: The vatin of this BankAttributes.
        :type vatin: str
        """

        self._vatin = vatin
