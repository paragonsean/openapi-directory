# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency_attributes_icon import CurrencyAttributesIcon
from openapi_server import util


class CurrencyAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, code: str=None, code_estandards_alpha: str=None, code_iso_alpha3: str=None, code_iso_numeric3: int=None, code_json_alpha: str=None, created: str=None, currency_type: str=None, decimal_e: str=None, icon: CurrencyAttributesIcon=None, issuer: str=None, name: str=None, native_symbol: str=None, symbol: str=None):
        """CurrencyAttributes - a model defined in OpenAPI

        :param category: The category of this CurrencyAttributes.
        :param code: The code of this CurrencyAttributes.
        :param code_estandards_alpha: The code_estandards_alpha of this CurrencyAttributes.
        :param code_iso_alpha3: The code_iso_alpha3 of this CurrencyAttributes.
        :param code_iso_numeric3: The code_iso_numeric3 of this CurrencyAttributes.
        :param code_json_alpha: The code_json_alpha of this CurrencyAttributes.
        :param created: The created of this CurrencyAttributes.
        :param currency_type: The currency_type of this CurrencyAttributes.
        :param decimal_e: The decimal_e of this CurrencyAttributes.
        :param icon: The icon of this CurrencyAttributes.
        :param issuer: The issuer of this CurrencyAttributes.
        :param name: The name of this CurrencyAttributes.
        :param native_symbol: The native_symbol of this CurrencyAttributes.
        :param symbol: The symbol of this CurrencyAttributes.
        """
        self.openapi_types = {
            'category': str,
            'code': str,
            'code_estandards_alpha': str,
            'code_iso_alpha3': str,
            'code_iso_numeric3': int,
            'code_json_alpha': str,
            'created': str,
            'currency_type': str,
            'decimal_e': str,
            'icon': CurrencyAttributesIcon,
            'issuer': str,
            'name': str,
            'native_symbol': str,
            'symbol': str
        }

        self.attribute_map = {
            'category': 'category',
            'code': 'code',
            'code_estandards_alpha': 'code_estandards_alpha',
            'code_iso_alpha3': 'code_iso_alpha3',
            'code_iso_numeric3': 'code_iso_numeric3',
            'code_json_alpha': 'code_json_alpha',
            'created': 'created',
            'currency_type': 'currency_type',
            'decimal_e': 'decimal_e',
            'icon': 'icon',
            'issuer': 'issuer',
            'name': 'name',
            'native_symbol': 'native_symbol',
            'symbol': 'symbol'
        }

        self._category = category
        self._code = code
        self._code_estandards_alpha = code_estandards_alpha
        self._code_iso_alpha3 = code_iso_alpha3
        self._code_iso_numeric3 = code_iso_numeric3
        self._code_json_alpha = code_json_alpha
        self._created = created
        self._currency_type = currency_type
        self._decimal_e = decimal_e
        self._icon = icon
        self._issuer = issuer
        self._name = name
        self._native_symbol = native_symbol
        self._symbol = symbol

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CurrencyAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CurrencyAttributes of this CurrencyAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this CurrencyAttributes.

        Currency category

        :return: The category of this CurrencyAttributes.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this CurrencyAttributes.

        Currency category

        :param category: The category of this CurrencyAttributes.
        :type category: str
        """

        self._category = category

    @property
    def code(self):
        """Gets the code of this CurrencyAttributes.

        Currency system code

        :return: The code of this CurrencyAttributes.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CurrencyAttributes.

        Currency system code

        :param code: The code of this CurrencyAttributes.
        :type code: str
        """

        self._code = code

    @property
    def code_estandards_alpha(self):
        """Gets the code_estandards_alpha of this CurrencyAttributes.


        :return: The code_estandards_alpha of this CurrencyAttributes.
        :rtype: str
        """
        return self._code_estandards_alpha

    @code_estandards_alpha.setter
    def code_estandards_alpha(self, code_estandards_alpha):
        """Sets the code_estandards_alpha of this CurrencyAttributes.


        :param code_estandards_alpha: The code_estandards_alpha of this CurrencyAttributes.
        :type code_estandards_alpha: str
        """

        self._code_estandards_alpha = code_estandards_alpha

    @property
    def code_iso_alpha3(self):
        """Gets the code_iso_alpha3 of this CurrencyAttributes.

        Currency ISO code

        :return: The code_iso_alpha3 of this CurrencyAttributes.
        :rtype: str
        """
        return self._code_iso_alpha3

    @code_iso_alpha3.setter
    def code_iso_alpha3(self, code_iso_alpha3):
        """Sets the code_iso_alpha3 of this CurrencyAttributes.

        Currency ISO code

        :param code_iso_alpha3: The code_iso_alpha3 of this CurrencyAttributes.
        :type code_iso_alpha3: str
        """

        self._code_iso_alpha3 = code_iso_alpha3

    @property
    def code_iso_numeric3(self):
        """Gets the code_iso_numeric3 of this CurrencyAttributes.

        Currency ISO numeric code

        :return: The code_iso_numeric3 of this CurrencyAttributes.
        :rtype: int
        """
        return self._code_iso_numeric3

    @code_iso_numeric3.setter
    def code_iso_numeric3(self, code_iso_numeric3):
        """Sets the code_iso_numeric3 of this CurrencyAttributes.

        Currency ISO numeric code

        :param code_iso_numeric3: The code_iso_numeric3 of this CurrencyAttributes.
        :type code_iso_numeric3: int
        """

        self._code_iso_numeric3 = code_iso_numeric3

    @property
    def code_json_alpha(self):
        """Gets the code_json_alpha of this CurrencyAttributes.


        :return: The code_json_alpha of this CurrencyAttributes.
        :rtype: str
        """
        return self._code_json_alpha

    @code_json_alpha.setter
    def code_json_alpha(self, code_json_alpha):
        """Sets the code_json_alpha of this CurrencyAttributes.


        :param code_json_alpha: The code_json_alpha of this CurrencyAttributes.
        :type code_json_alpha: str
        """

        self._code_json_alpha = code_json_alpha

    @property
    def created(self):
        """Gets the created of this CurrencyAttributes.

        Created date in system (in Unixtime)

        :return: The created of this CurrencyAttributes.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CurrencyAttributes.

        Created date in system (in Unixtime)

        :param created: The created of this CurrencyAttributes.
        :type created: str
        """

        self._created = created

    @property
    def currency_type(self):
        """Gets the currency_type of this CurrencyAttributes.

        Type of currencies [national, digital, virtual, metal, energy]

        :return: The currency_type of this CurrencyAttributes.
        :rtype: str
        """
        return self._currency_type

    @currency_type.setter
    def currency_type(self, currency_type):
        """Sets the currency_type of this CurrencyAttributes.

        Type of currencies [national, digital, virtual, metal, energy]

        :param currency_type: The currency_type of this CurrencyAttributes.
        :type currency_type: str
        """

        self._currency_type = currency_type

    @property
    def decimal_e(self):
        """Gets the decimal_e of this CurrencyAttributes.

        Number of digits after the decimal separator

        :return: The decimal_e of this CurrencyAttributes.
        :rtype: str
        """
        return self._decimal_e

    @decimal_e.setter
    def decimal_e(self, decimal_e):
        """Sets the decimal_e of this CurrencyAttributes.

        Number of digits after the decimal separator

        :param decimal_e: The decimal_e of this CurrencyAttributes.
        :type decimal_e: str
        """

        self._decimal_e = decimal_e

    @property
    def icon(self):
        """Gets the icon of this CurrencyAttributes.


        :return: The icon of this CurrencyAttributes.
        :rtype: CurrencyAttributesIcon
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this CurrencyAttributes.


        :param icon: The icon of this CurrencyAttributes.
        :type icon: CurrencyAttributesIcon
        """

        self._icon = icon

    @property
    def issuer(self):
        """Gets the issuer of this CurrencyAttributes.

        Currency`s issuer

        :return: The issuer of this CurrencyAttributes.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this CurrencyAttributes.

        Currency`s issuer

        :param issuer: The issuer of this CurrencyAttributes.
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def name(self):
        """Gets the name of this CurrencyAttributes.

        Currency description

        :return: The name of this CurrencyAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CurrencyAttributes.

        Currency description

        :param name: The name of this CurrencyAttributes.
        :type name: str
        """

        self._name = name

    @property
    def native_symbol(self):
        """Gets the native_symbol of this CurrencyAttributes.

        Currencyâ€™s symbol. In general, only for nationals currencies

        :return: The native_symbol of this CurrencyAttributes.
        :rtype: str
        """
        return self._native_symbol

    @native_symbol.setter
    def native_symbol(self, native_symbol):
        """Sets the native_symbol of this CurrencyAttributes.

        Currencyâ€™s symbol. In general, only for nationals currencies

        :param native_symbol: The native_symbol of this CurrencyAttributes.
        :type native_symbol: str
        """

        self._native_symbol = native_symbol

    @property
    def symbol(self):
        """Gets the symbol of this CurrencyAttributes.

        Currencyâ€™s symbol. In general, only for nationals currencies

        :return: The symbol of this CurrencyAttributes.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this CurrencyAttributes.

        Currencyâ€™s symbol. In general, only for nationals currencies

        :param symbol: The symbol of this CurrencyAttributes.
        :type symbol: str
        """

        self._symbol = symbol
