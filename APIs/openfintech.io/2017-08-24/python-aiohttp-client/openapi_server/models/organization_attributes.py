# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.organization_address import OrganizationAddress
from openapi_server.models.organization_attributes_icon import OrganizationAttributesIcon
from openapi_server.models.organization_attributes_logo import OrganizationAttributesLogo
from openapi_server.models.organization_contacts import OrganizationContacts
from openapi_server.models.organization_social import OrganizationSocial
from openapi_server import util


class OrganizationAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: OrganizationAddress=None, blog: str=None, code: str=None, contacts: OrganizationContacts=None, description: str=None, icon: OrganizationAttributesIcon=None, industries: List[str]=None, logo: OrganizationAttributesLogo=None, name: str=None, site: str=None, social_profiles: OrganizationSocial=None, status: str=None, wiki: str=None):
        """OrganizationAttributes - a model defined in OpenAPI

        :param address: The address of this OrganizationAttributes.
        :param blog: The blog of this OrganizationAttributes.
        :param code: The code of this OrganizationAttributes.
        :param contacts: The contacts of this OrganizationAttributes.
        :param description: The description of this OrganizationAttributes.
        :param icon: The icon of this OrganizationAttributes.
        :param industries: The industries of this OrganizationAttributes.
        :param logo: The logo of this OrganizationAttributes.
        :param name: The name of this OrganizationAttributes.
        :param site: The site of this OrganizationAttributes.
        :param social_profiles: The social_profiles of this OrganizationAttributes.
        :param status: The status of this OrganizationAttributes.
        :param wiki: The wiki of this OrganizationAttributes.
        """
        self.openapi_types = {
            'address': OrganizationAddress,
            'blog': str,
            'code': str,
            'contacts': OrganizationContacts,
            'description': str,
            'icon': OrganizationAttributesIcon,
            'industries': List[str],
            'logo': OrganizationAttributesLogo,
            'name': str,
            'site': str,
            'social_profiles': OrganizationSocial,
            'status': str,
            'wiki': str
        }

        self.attribute_map = {
            'address': 'address',
            'blog': 'blog',
            'code': 'code',
            'contacts': 'contacts',
            'description': 'description',
            'icon': 'icon',
            'industries': 'industries',
            'logo': 'logo',
            'name': 'name',
            'site': 'site',
            'social_profiles': 'social_profiles',
            'status': 'status',
            'wiki': 'wiki'
        }

        self._address = address
        self._blog = blog
        self._code = code
        self._contacts = contacts
        self._description = description
        self._icon = icon
        self._industries = industries
        self._logo = logo
        self._name = name
        self._site = site
        self._social_profiles = social_profiles
        self._status = status
        self._wiki = wiki

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizationAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrganizationAttributes of this OrganizationAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this OrganizationAttributes.


        :return: The address of this OrganizationAttributes.
        :rtype: OrganizationAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this OrganizationAttributes.


        :param address: The address of this OrganizationAttributes.
        :type address: OrganizationAddress
        """

        self._address = address

    @property
    def blog(self):
        """Gets the blog of this OrganizationAttributes.

        Organization`s blog

        :return: The blog of this OrganizationAttributes.
        :rtype: str
        """
        return self._blog

    @blog.setter
    def blog(self, blog):
        """Sets the blog of this OrganizationAttributes.

        Organization`s blog

        :param blog: The blog of this OrganizationAttributes.
        :type blog: str
        """

        self._blog = blog

    @property
    def code(self):
        """Gets the code of this OrganizationAttributes.

        Organization`s code

        :return: The code of this OrganizationAttributes.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this OrganizationAttributes.

        Organization`s code

        :param code: The code of this OrganizationAttributes.
        :type code: str
        """

        self._code = code

    @property
    def contacts(self):
        """Gets the contacts of this OrganizationAttributes.


        :return: The contacts of this OrganizationAttributes.
        :rtype: OrganizationContacts
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this OrganizationAttributes.


        :param contacts: The contacts of this OrganizationAttributes.
        :type contacts: OrganizationContacts
        """

        self._contacts = contacts

    @property
    def description(self):
        """Gets the description of this OrganizationAttributes.

        Description

        :return: The description of this OrganizationAttributes.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OrganizationAttributes.

        Description

        :param description: The description of this OrganizationAttributes.
        :type description: str
        """

        self._description = description

    @property
    def icon(self):
        """Gets the icon of this OrganizationAttributes.


        :return: The icon of this OrganizationAttributes.
        :rtype: OrganizationAttributesIcon
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this OrganizationAttributes.


        :param icon: The icon of this OrganizationAttributes.
        :type icon: OrganizationAttributesIcon
        """

        self._icon = icon

    @property
    def industries(self):
        """Gets the industries of this OrganizationAttributes.

        Industries

        :return: The industries of this OrganizationAttributes.
        :rtype: List[str]
        """
        return self._industries

    @industries.setter
    def industries(self, industries):
        """Sets the industries of this OrganizationAttributes.

        Industries

        :param industries: The industries of this OrganizationAttributes.
        :type industries: List[str]
        """

        self._industries = industries

    @property
    def logo(self):
        """Gets the logo of this OrganizationAttributes.


        :return: The logo of this OrganizationAttributes.
        :rtype: OrganizationAttributesLogo
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this OrganizationAttributes.


        :param logo: The logo of this OrganizationAttributes.
        :type logo: OrganizationAttributesLogo
        """

        self._logo = logo

    @property
    def name(self):
        """Gets the name of this OrganizationAttributes.

        Organization`s name

        :return: The name of this OrganizationAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrganizationAttributes.

        Organization`s name

        :param name: The name of this OrganizationAttributes.
        :type name: str
        """

        self._name = name

    @property
    def site(self):
        """Gets the site of this OrganizationAttributes.

        Organization`s site

        :return: The site of this OrganizationAttributes.
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this OrganizationAttributes.

        Organization`s site

        :param site: The site of this OrganizationAttributes.
        :type site: str
        """

        self._site = site

    @property
    def social_profiles(self):
        """Gets the social_profiles of this OrganizationAttributes.


        :return: The social_profiles of this OrganizationAttributes.
        :rtype: OrganizationSocial
        """
        return self._social_profiles

    @social_profiles.setter
    def social_profiles(self, social_profiles):
        """Sets the social_profiles of this OrganizationAttributes.


        :param social_profiles: The social_profiles of this OrganizationAttributes.
        :type social_profiles: OrganizationSocial
        """

        self._social_profiles = social_profiles

    @property
    def status(self):
        """Gets the status of this OrganizationAttributes.

        Organization`s status [active, liquidated, deleted]

        :return: The status of this OrganizationAttributes.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OrganizationAttributes.

        Organization`s status [active, liquidated, deleted]

        :param status: The status of this OrganizationAttributes.
        :type status: str
        """

        self._status = status

    @property
    def wiki(self):
        """Gets the wiki of this OrganizationAttributes.

        Organization`s wiki

        :return: The wiki of this OrganizationAttributes.
        :rtype: str
        """
        return self._wiki

    @wiki.setter
    def wiki(self, wiki):
        """Sets the wiki of this OrganizationAttributes.

        Organization`s wiki

        :param wiki: The wiki of this OrganizationAttributes.
        :type wiki: str
        """

        self._wiki = wiki
