# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrganizationAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, post_code: int=None, region: str=None, street: str=None):
        """OrganizationAddress - a model defined in OpenAPI

        :param city: The city of this OrganizationAddress.
        :param country: The country of this OrganizationAddress.
        :param post_code: The post_code of this OrganizationAddress.
        :param region: The region of this OrganizationAddress.
        :param street: The street of this OrganizationAddress.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'post_code': int,
            'region': str,
            'street': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'post_code': 'post_code',
            'region': 'region',
            'street': 'street'
        }

        self._city = city
        self._country = country
        self._post_code = post_code
        self._region = region
        self._street = street

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizationAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrganizationAddress of this OrganizationAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this OrganizationAddress.


        :return: The city of this OrganizationAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this OrganizationAddress.


        :param city: The city of this OrganizationAddress.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this OrganizationAddress.


        :return: The country of this OrganizationAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this OrganizationAddress.


        :param country: The country of this OrganizationAddress.
        :type country: str
        """

        self._country = country

    @property
    def post_code(self):
        """Gets the post_code of this OrganizationAddress.


        :return: The post_code of this OrganizationAddress.
        :rtype: int
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this OrganizationAddress.


        :param post_code: The post_code of this OrganizationAddress.
        :type post_code: int
        """

        self._post_code = post_code

    @property
    def region(self):
        """Gets the region of this OrganizationAddress.

        Countryâ€™s region:<br>    * Africa   * Americas   * Asia   * Europe   * Oceania   * Polar 

        :return: The region of this OrganizationAddress.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this OrganizationAddress.

        Countryâ€™s region:<br>    * Africa   * Americas   * Asia   * Europe   * Oceania   * Polar 

        :param region: The region of this OrganizationAddress.
        :type region: str
        """

        self._region = region

    @property
    def street(self):
        """Gets the street of this OrganizationAddress.


        :return: The street of this OrganizationAddress.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this OrganizationAddress.


        :param street: The street of this OrganizationAddress.
        :type street: str
        """

        self._street = street
