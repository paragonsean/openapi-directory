# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CountryAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, area: str=None, calling_codes: List[int]=None, capital: str=None, code_alpha3: str=None, languages: List[str]=None, name: str=None, native_name: str=None, population: str=None, region: str=None, sub_region: str=None, timezones: List[str]=None, top_level_domains: List[str]=None):
        """CountryAttributes - a model defined in OpenAPI

        :param area: The area of this CountryAttributes.
        :param calling_codes: The calling_codes of this CountryAttributes.
        :param capital: The capital of this CountryAttributes.
        :param code_alpha3: The code_alpha3 of this CountryAttributes.
        :param languages: The languages of this CountryAttributes.
        :param name: The name of this CountryAttributes.
        :param native_name: The native_name of this CountryAttributes.
        :param population: The population of this CountryAttributes.
        :param region: The region of this CountryAttributes.
        :param sub_region: The sub_region of this CountryAttributes.
        :param timezones: The timezones of this CountryAttributes.
        :param top_level_domains: The top_level_domains of this CountryAttributes.
        """
        self.openapi_types = {
            'area': str,
            'calling_codes': List[int],
            'capital': str,
            'code_alpha3': str,
            'languages': List[str],
            'name': str,
            'native_name': str,
            'population': str,
            'region': str,
            'sub_region': str,
            'timezones': List[str],
            'top_level_domains': List[str]
        }

        self.attribute_map = {
            'area': 'area',
            'calling_codes': 'calling_codes',
            'capital': 'capital',
            'code_alpha3': 'code_alpha3',
            'languages': 'languages',
            'name': 'name',
            'native_name': 'native_name',
            'population': 'population',
            'region': 'region',
            'sub_region': 'sub_region',
            'timezones': 'timezones',
            'top_level_domains': 'top_level_domains'
        }

        self._area = area
        self._calling_codes = calling_codes
        self._capital = capital
        self._code_alpha3 = code_alpha3
        self._languages = languages
        self._name = name
        self._native_name = native_name
        self._population = population
        self._region = region
        self._sub_region = sub_region
        self._timezones = timezones
        self._top_level_domains = top_level_domains

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CountryAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CountryAttributes of this CountryAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def area(self):
        """Gets the area of this CountryAttributes.

        Countryâ€™s area (sq km)

        :return: The area of this CountryAttributes.
        :rtype: str
        """
        return self._area

    @area.setter
    def area(self, area):
        """Sets the area of this CountryAttributes.

        Countryâ€™s area (sq km)

        :param area: The area of this CountryAttributes.
        :type area: str
        """

        self._area = area

    @property
    def calling_codes(self):
        """Gets the calling_codes of this CountryAttributes.

        Array of country`s phone codes

        :return: The calling_codes of this CountryAttributes.
        :rtype: List[int]
        """
        return self._calling_codes

    @calling_codes.setter
    def calling_codes(self, calling_codes):
        """Sets the calling_codes of this CountryAttributes.

        Array of country`s phone codes

        :param calling_codes: The calling_codes of this CountryAttributes.
        :type calling_codes: List[int]
        """

        self._calling_codes = calling_codes

    @property
    def capital(self):
        """Gets the capital of this CountryAttributes.

        Countryâ€™s capital

        :return: The capital of this CountryAttributes.
        :rtype: str
        """
        return self._capital

    @capital.setter
    def capital(self, capital):
        """Sets the capital of this CountryAttributes.

        Countryâ€™s capital

        :param capital: The capital of this CountryAttributes.
        :type capital: str
        """

        self._capital = capital

    @property
    def code_alpha3(self):
        """Gets the code_alpha3 of this CountryAttributes.

        Country`s ISO alpha3 code

        :return: The code_alpha3 of this CountryAttributes.
        :rtype: str
        """
        return self._code_alpha3

    @code_alpha3.setter
    def code_alpha3(self, code_alpha3):
        """Sets the code_alpha3 of this CountryAttributes.

        Country`s ISO alpha3 code

        :param code_alpha3: The code_alpha3 of this CountryAttributes.
        :type code_alpha3: str
        """

        self._code_alpha3 = code_alpha3

    @property
    def languages(self):
        """Gets the languages of this CountryAttributes.

        Array of country`s languages

        :return: The languages of this CountryAttributes.
        :rtype: List[str]
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this CountryAttributes.

        Array of country`s languages

        :param languages: The languages of this CountryAttributes.
        :type languages: List[str]
        """

        self._languages = languages

    @property
    def name(self):
        """Gets the name of this CountryAttributes.

        Country`s name

        :return: The name of this CountryAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CountryAttributes.

        Country`s name

        :param name: The name of this CountryAttributes.
        :type name: str
        """

        self._name = name

    @property
    def native_name(self):
        """Gets the native_name of this CountryAttributes.

        Country`s nativ name

        :return: The native_name of this CountryAttributes.
        :rtype: str
        """
        return self._native_name

    @native_name.setter
    def native_name(self, native_name):
        """Sets the native_name of this CountryAttributes.

        Country`s nativ name

        :param native_name: The native_name of this CountryAttributes.
        :type native_name: str
        """

        self._native_name = native_name

    @property
    def population(self):
        """Gets the population of this CountryAttributes.

        Countryâ€™s population

        :return: The population of this CountryAttributes.
        :rtype: str
        """
        return self._population

    @population.setter
    def population(self, population):
        """Sets the population of this CountryAttributes.

        Countryâ€™s population

        :param population: The population of this CountryAttributes.
        :type population: str
        """

        self._population = population

    @property
    def region(self):
        """Gets the region of this CountryAttributes.

        Countryâ€™s region:<br>    * Africa   * Americas   * Asia   * Europe   * Oceania   * Polar 

        :return: The region of this CountryAttributes.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CountryAttributes.

        Countryâ€™s region:<br>    * Africa   * Americas   * Asia   * Europe   * Oceania   * Polar 

        :param region: The region of this CountryAttributes.
        :type region: str
        """

        self._region = region

    @property
    def sub_region(self):
        """Gets the sub_region of this CountryAttributes.

        Countryâ€™s sub region:<br>    * Northern Africa   * Southern Africa   * Western Africa   * Eastern Africa   * Middle Africa   * Northern America   * South America   * Central America   * Caribbean   * Southern Asia   * Western Asia   * Eastern Asia   * South-Eastern Asia   * Central Asia   * Northern Europe   * Southern Europe   * Western Europe   * Eastern Europe   * Polynesia   * Australia and New Zealand   * Micronesia   * Melanesia 

        :return: The sub_region of this CountryAttributes.
        :rtype: str
        """
        return self._sub_region

    @sub_region.setter
    def sub_region(self, sub_region):
        """Sets the sub_region of this CountryAttributes.

        Countryâ€™s sub region:<br>    * Northern Africa   * Southern Africa   * Western Africa   * Eastern Africa   * Middle Africa   * Northern America   * South America   * Central America   * Caribbean   * Southern Asia   * Western Asia   * Eastern Asia   * South-Eastern Asia   * Central Asia   * Northern Europe   * Southern Europe   * Western Europe   * Eastern Europe   * Polynesia   * Australia and New Zealand   * Micronesia   * Melanesia 

        :param sub_region: The sub_region of this CountryAttributes.
        :type sub_region: str
        """

        self._sub_region = sub_region

    @property
    def timezones(self):
        """Gets the timezones of this CountryAttributes.

        Array of country`s timezones (UTC)

        :return: The timezones of this CountryAttributes.
        :rtype: List[str]
        """
        return self._timezones

    @timezones.setter
    def timezones(self, timezones):
        """Sets the timezones of this CountryAttributes.

        Array of country`s timezones (UTC)

        :param timezones: The timezones of this CountryAttributes.
        :type timezones: List[str]
        """

        self._timezones = timezones

    @property
    def top_level_domains(self):
        """Gets the top_level_domains of this CountryAttributes.

        Array of country`s domains

        :return: The top_level_domains of this CountryAttributes.
        :rtype: List[str]
        """
        return self._top_level_domains

    @top_level_domains.setter
    def top_level_domains(self, top_level_domains):
        """Sets the top_level_domains of this CountryAttributes.

        Array of country`s domains

        :param top_level_domains: The top_level_domains of this CountryAttributes.
        :type top_level_domains: List[str]
        """

        self._top_level_domains = top_level_domains
