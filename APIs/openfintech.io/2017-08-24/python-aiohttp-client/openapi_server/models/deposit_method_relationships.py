# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.active_in_countries_relationship import ActiveInCountriesRelationship
from openapi_server.models.currency_parent import CurrencyParent
from openapi_server.models.deposit_method_processor_data import DepositMethodProcessorData
from openapi_server.models.supported_psps_relationship import SupportedPspsRelationship
from openapi_server import util


class DepositMethodRelationships(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actiove_in_countries: ActiveInCountriesRelationship=None, currencies: CurrencyParent=None, payment_processor: DepositMethodProcessorData=None, supported_psps: SupportedPspsRelationship=None):
        """DepositMethodRelationships - a model defined in OpenAPI

        :param actiove_in_countries: The actiove_in_countries of this DepositMethodRelationships.
        :param currencies: The currencies of this DepositMethodRelationships.
        :param payment_processor: The payment_processor of this DepositMethodRelationships.
        :param supported_psps: The supported_psps of this DepositMethodRelationships.
        """
        self.openapi_types = {
            'actiove_in_countries': ActiveInCountriesRelationship,
            'currencies': CurrencyParent,
            'payment_processor': DepositMethodProcessorData,
            'supported_psps': SupportedPspsRelationship
        }

        self.attribute_map = {
            'actiove_in_countries': 'actiove_in_countries',
            'currencies': 'currencies',
            'payment_processor': 'payment_processor',
            'supported_psps': 'supported_psps'
        }

        self._actiove_in_countries = actiove_in_countries
        self._currencies = currencies
        self._payment_processor = payment_processor
        self._supported_psps = supported_psps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DepositMethodRelationships':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DepositMethodRelationships of this DepositMethodRelationships.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actiove_in_countries(self):
        """Gets the actiove_in_countries of this DepositMethodRelationships.


        :return: The actiove_in_countries of this DepositMethodRelationships.
        :rtype: ActiveInCountriesRelationship
        """
        return self._actiove_in_countries

    @actiove_in_countries.setter
    def actiove_in_countries(self, actiove_in_countries):
        """Sets the actiove_in_countries of this DepositMethodRelationships.


        :param actiove_in_countries: The actiove_in_countries of this DepositMethodRelationships.
        :type actiove_in_countries: ActiveInCountriesRelationship
        """

        self._actiove_in_countries = actiove_in_countries

    @property
    def currencies(self):
        """Gets the currencies of this DepositMethodRelationships.


        :return: The currencies of this DepositMethodRelationships.
        :rtype: CurrencyParent
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies):
        """Sets the currencies of this DepositMethodRelationships.


        :param currencies: The currencies of this DepositMethodRelationships.
        :type currencies: CurrencyParent
        """

        self._currencies = currencies

    @property
    def payment_processor(self):
        """Gets the payment_processor of this DepositMethodRelationships.


        :return: The payment_processor of this DepositMethodRelationships.
        :rtype: DepositMethodProcessorData
        """
        return self._payment_processor

    @payment_processor.setter
    def payment_processor(self, payment_processor):
        """Sets the payment_processor of this DepositMethodRelationships.


        :param payment_processor: The payment_processor of this DepositMethodRelationships.
        :type payment_processor: DepositMethodProcessorData
        """

        self._payment_processor = payment_processor

    @property
    def supported_psps(self):
        """Gets the supported_psps of this DepositMethodRelationships.


        :return: The supported_psps of this DepositMethodRelationships.
        :rtype: SupportedPspsRelationship
        """
        return self._supported_psps

    @supported_psps.setter
    def supported_psps(self, supported_psps):
        """Sets the supported_psps of this DepositMethodRelationships.


        :param supported_psps: The supported_psps of this DepositMethodRelationships.
        :type supported_psps: SupportedPspsRelationship
        """

        self._supported_psps = supported_psps
