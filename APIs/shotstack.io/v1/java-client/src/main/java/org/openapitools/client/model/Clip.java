/*
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.ClipAsset;
import org.openapitools.client.model.Offset;
import org.openapitools.client.model.Transition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A clip is a container for a specific type of asset, i.e. a title, image, video, audio or html. You use a Clip to define when an asset will display on the timeline, how long it will play for and transitions, filters and effects to apply to it.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:51.122157-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Clip {
  public static final String SERIALIZED_NAME_ASSET = "asset";
  @SerializedName(SERIALIZED_NAME_ASSET)
  private ClipAsset asset;

  /**
   * A motion effect to apply to the Clip. &lt;ul&gt;   &lt;li&gt;&#x60;zoomIn&#x60; - slow zoom in&lt;/li&gt;   &lt;li&gt;&#x60;zoomOut&#x60; - slow zoom out&lt;/li&gt;   &lt;li&gt;&#x60;slideLeft&#x60; - slow slide (pan) left&lt;/li&gt;   &lt;li&gt;&#x60;slideRight&#x60; - slow slide (pan) right&lt;/li&gt;   &lt;li&gt;&#x60;slideUp&#x60; - slow slide (pan) up&lt;/li&gt;   &lt;li&gt;&#x60;slideDown&#x60; - slow slide (pan) down&lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(EffectEnum.Adapter.class)
  public enum EffectEnum {
    ZOOM_IN("zoomIn"),
    
    ZOOM_OUT("zoomOut"),
    
    SLIDE_LEFT("slideLeft"),
    
    SLIDE_RIGHT("slideRight"),
    
    SLIDE_UP("slideUp"),
    
    SLIDE_DOWN("slideDown");

    private String value;

    EffectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EffectEnum fromValue(String value) {
      for (EffectEnum b : EffectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EffectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EffectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EffectEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EffectEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EffectEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EFFECT = "effect";
  @SerializedName(SERIALIZED_NAME_EFFECT)
  private EffectEnum effect;

  /**
   * A filter effect to apply to the Clip. &lt;ul&gt;   &lt;li&gt;&#x60;boost&#x60; - boost contrast and saturation&lt;/li&gt;   &lt;li&gt;&#x60;contrast&#x60; - increase contrast&lt;/li&gt;   &lt;li&gt;&#x60;darken&#x60; - darken the scene&lt;/li&gt;   &lt;li&gt;&#x60;greyscale&#x60; - remove colour&lt;/li&gt;   &lt;li&gt;&#x60;lighten&#x60; - lighten the scene&lt;/li&gt;   &lt;li&gt;&#x60;muted&#x60; - reduce saturation and contrast&lt;/li&gt;   &lt;li&gt;&#x60;invert&#x60; - invert colors&lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(FilterEnum.Adapter.class)
  public enum FilterEnum {
    BOOST("boost"),
    
    CONTRAST("contrast"),
    
    DARKEN("darken"),
    
    GREYSCALE("greyscale"),
    
    LIGHTEN("lighten"),
    
    MUTED("muted"),
    
    NEGATIVE("negative");

    private String value;

    FilterEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FilterEnum fromValue(String value) {
      for (FilterEnum b : FilterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FilterEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FilterEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FilterEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FilterEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FilterEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private FilterEnum filter;

  /**
   * Set how the asset should be scaled to fit the viewport using one of the following options:    &lt;ul&gt;     &lt;li&gt;&#x60;cover&#x60; - stretch the asset to fill the viewport without maintaining the aspect ratio.&lt;/li&gt;     &lt;li&gt;&#x60;contain&#x60; - fit the entire asset within the viewport while maintaining the original aspect ratio.&lt;/li&gt;     &lt;li&gt;&#x60;crop&#x60; - scale the asset to fill the viewport while maintaining the aspect ratio. The asset will be cropped if it exceeds the bounds of the viewport.&lt;/li&gt;     &lt;li&gt;&#x60;none&#x60; - preserves the original asset dimensions and does not apply any scaling.&lt;/li&gt;   &lt;/ul&gt;
   */
  @JsonAdapter(FitEnum.Adapter.class)
  public enum FitEnum {
    COVER("cover"),
    
    CONTAIN("contain"),
    
    CROP("crop"),
    
    NONE("none");

    private String value;

    FitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FitEnum fromValue(String value) {
      for (FitEnum b : FitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FIT = "fit";
  @SerializedName(SERIALIZED_NAME_FIT)
  private FitEnum fit = FitEnum.CROP;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private BigDecimal length;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Offset offset;

  public static final String SERIALIZED_NAME_OPACITY = "opacity";
  @SerializedName(SERIALIZED_NAME_OPACITY)
  private BigDecimal opacity = new BigDecimal("1");

  /**
   * Place the asset in one of nine predefined positions of the viewport. This is most effective for when the asset is scaled and you want to position the element to a specific position. &lt;ul&gt;   &lt;li&gt;&#x60;top&#x60; - top (center)&lt;/li&gt;   &lt;li&gt;&#x60;topRight&#x60; - top right&lt;/li&gt;   &lt;li&gt;&#x60;right&#x60; - right (center)&lt;/li&gt;   &lt;li&gt;&#x60;bottomRight&#x60; - bottom right&lt;/li&gt;   &lt;li&gt;&#x60;bottom&#x60; - bottom (center)&lt;/li&gt;   &lt;li&gt;&#x60;bottomLeft&#x60; - bottom left&lt;/li&gt;   &lt;li&gt;&#x60;left&#x60; - left (center)&lt;/li&gt;   &lt;li&gt;&#x60;topLeft&#x60; - top left&lt;/li&gt;   &lt;li&gt;&#x60;center&#x60; - center&lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(PositionEnum.Adapter.class)
  public enum PositionEnum {
    TOP("top"),
    
    TOP_RIGHT("topRight"),
    
    RIGHT("right"),
    
    BOTTOM_RIGHT("bottomRight"),
    
    BOTTOM("bottom"),
    
    BOTTOM_LEFT("bottomLeft"),
    
    LEFT("left"),
    
    TOP_LEFT("topLeft"),
    
    CENTER("center");

    private String value;

    PositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PositionEnum fromValue(String value) {
      for (PositionEnum b : PositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PositionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PositionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private PositionEnum position = PositionEnum.CENTER;

  public static final String SERIALIZED_NAME_SCALE = "scale";
  @SerializedName(SERIALIZED_NAME_SCALE)
  private BigDecimal scale;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private BigDecimal start;

  public static final String SERIALIZED_NAME_TRANSITION = "transition";
  @SerializedName(SERIALIZED_NAME_TRANSITION)
  private Transition transition;

  public Clip() {
  }

  public Clip asset(ClipAsset asset) {
    this.asset = asset;
    return this;
  }

  /**
   * Get asset
   * @return asset
   */
  @javax.annotation.Nonnull
  public ClipAsset getAsset() {
    return asset;
  }

  public void setAsset(ClipAsset asset) {
    this.asset = asset;
  }


  public Clip effect(EffectEnum effect) {
    this.effect = effect;
    return this;
  }

  /**
   * A motion effect to apply to the Clip. &lt;ul&gt;   &lt;li&gt;&#x60;zoomIn&#x60; - slow zoom in&lt;/li&gt;   &lt;li&gt;&#x60;zoomOut&#x60; - slow zoom out&lt;/li&gt;   &lt;li&gt;&#x60;slideLeft&#x60; - slow slide (pan) left&lt;/li&gt;   &lt;li&gt;&#x60;slideRight&#x60; - slow slide (pan) right&lt;/li&gt;   &lt;li&gt;&#x60;slideUp&#x60; - slow slide (pan) up&lt;/li&gt;   &lt;li&gt;&#x60;slideDown&#x60; - slow slide (pan) down&lt;/li&gt; &lt;/ul&gt;
   * @return effect
   */
  @javax.annotation.Nullable
  public EffectEnum getEffect() {
    return effect;
  }

  public void setEffect(EffectEnum effect) {
    this.effect = effect;
  }


  public Clip filter(FilterEnum filter) {
    this.filter = filter;
    return this;
  }

  /**
   * A filter effect to apply to the Clip. &lt;ul&gt;   &lt;li&gt;&#x60;boost&#x60; - boost contrast and saturation&lt;/li&gt;   &lt;li&gt;&#x60;contrast&#x60; - increase contrast&lt;/li&gt;   &lt;li&gt;&#x60;darken&#x60; - darken the scene&lt;/li&gt;   &lt;li&gt;&#x60;greyscale&#x60; - remove colour&lt;/li&gt;   &lt;li&gt;&#x60;lighten&#x60; - lighten the scene&lt;/li&gt;   &lt;li&gt;&#x60;muted&#x60; - reduce saturation and contrast&lt;/li&gt;   &lt;li&gt;&#x60;invert&#x60; - invert colors&lt;/li&gt; &lt;/ul&gt;
   * @return filter
   */
  @javax.annotation.Nullable
  public FilterEnum getFilter() {
    return filter;
  }

  public void setFilter(FilterEnum filter) {
    this.filter = filter;
  }


  public Clip fit(FitEnum fit) {
    this.fit = fit;
    return this;
  }

  /**
   * Set how the asset should be scaled to fit the viewport using one of the following options:    &lt;ul&gt;     &lt;li&gt;&#x60;cover&#x60; - stretch the asset to fill the viewport without maintaining the aspect ratio.&lt;/li&gt;     &lt;li&gt;&#x60;contain&#x60; - fit the entire asset within the viewport while maintaining the original aspect ratio.&lt;/li&gt;     &lt;li&gt;&#x60;crop&#x60; - scale the asset to fill the viewport while maintaining the aspect ratio. The asset will be cropped if it exceeds the bounds of the viewport.&lt;/li&gt;     &lt;li&gt;&#x60;none&#x60; - preserves the original asset dimensions and does not apply any scaling.&lt;/li&gt;   &lt;/ul&gt;
   * @return fit
   */
  @javax.annotation.Nullable
  public FitEnum getFit() {
    return fit;
  }

  public void setFit(FitEnum fit) {
    this.fit = fit;
  }


  public Clip length(BigDecimal length) {
    this.length = length;
    return this;
  }

  /**
   * The length, in seconds, the Clip should play for.
   * @return length
   */
  @javax.annotation.Nonnull
  public BigDecimal getLength() {
    return length;
  }

  public void setLength(BigDecimal length) {
    this.length = length;
  }


  public Clip offset(Offset offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Get offset
   * @return offset
   */
  @javax.annotation.Nullable
  public Offset getOffset() {
    return offset;
  }

  public void setOffset(Offset offset) {
    this.offset = offset;
  }


  public Clip opacity(BigDecimal opacity) {
    this.opacity = opacity;
    return this;
  }

  /**
   * Sets the opacity of the Clip where 1 is opaque and 0 is transparent.
   * @return opacity
   */
  @javax.annotation.Nullable
  public BigDecimal getOpacity() {
    return opacity;
  }

  public void setOpacity(BigDecimal opacity) {
    this.opacity = opacity;
  }


  public Clip position(PositionEnum position) {
    this.position = position;
    return this;
  }

  /**
   * Place the asset in one of nine predefined positions of the viewport. This is most effective for when the asset is scaled and you want to position the element to a specific position. &lt;ul&gt;   &lt;li&gt;&#x60;top&#x60; - top (center)&lt;/li&gt;   &lt;li&gt;&#x60;topRight&#x60; - top right&lt;/li&gt;   &lt;li&gt;&#x60;right&#x60; - right (center)&lt;/li&gt;   &lt;li&gt;&#x60;bottomRight&#x60; - bottom right&lt;/li&gt;   &lt;li&gt;&#x60;bottom&#x60; - bottom (center)&lt;/li&gt;   &lt;li&gt;&#x60;bottomLeft&#x60; - bottom left&lt;/li&gt;   &lt;li&gt;&#x60;left&#x60; - left (center)&lt;/li&gt;   &lt;li&gt;&#x60;topLeft&#x60; - top left&lt;/li&gt;   &lt;li&gt;&#x60;center&#x60; - center&lt;/li&gt; &lt;/ul&gt;
   * @return position
   */
  @javax.annotation.Nullable
  public PositionEnum getPosition() {
    return position;
  }

  public void setPosition(PositionEnum position) {
    this.position = position;
  }


  public Clip scale(BigDecimal scale) {
    this.scale = scale;
    return this;
  }

  /**
   * Scale the asset to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale asset to half the size of the viewport. This is useful for picture-in-picture video and  scaling images such as logos and watermarks.
   * @return scale
   */
  @javax.annotation.Nullable
  public BigDecimal getScale() {
    return scale;
  }

  public void setScale(BigDecimal scale) {
    this.scale = scale;
  }


  public Clip start(BigDecimal start) {
    this.start = start;
    return this;
  }

  /**
   * The start position of the Clip on the timeline, in seconds.
   * @return start
   */
  @javax.annotation.Nonnull
  public BigDecimal getStart() {
    return start;
  }

  public void setStart(BigDecimal start) {
    this.start = start;
  }


  public Clip transition(Transition transition) {
    this.transition = transition;
    return this;
  }

  /**
   * Get transition
   * @return transition
   */
  @javax.annotation.Nullable
  public Transition getTransition() {
    return transition;
  }

  public void setTransition(Transition transition) {
    this.transition = transition;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Clip clip = (Clip) o;
    return Objects.equals(this.asset, clip.asset) &&
        Objects.equals(this.effect, clip.effect) &&
        Objects.equals(this.filter, clip.filter) &&
        Objects.equals(this.fit, clip.fit) &&
        Objects.equals(this.length, clip.length) &&
        Objects.equals(this.offset, clip.offset) &&
        Objects.equals(this.opacity, clip.opacity) &&
        Objects.equals(this.position, clip.position) &&
        Objects.equals(this.scale, clip.scale) &&
        Objects.equals(this.start, clip.start) &&
        Objects.equals(this.transition, clip.transition);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asset, effect, filter, fit, length, offset, opacity, position, scale, start, transition);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Clip {\n");
    sb.append("    asset: ").append(toIndentedString(asset)).append("\n");
    sb.append("    effect: ").append(toIndentedString(effect)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    fit: ").append(toIndentedString(fit)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    opacity: ").append(toIndentedString(opacity)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    transition: ").append(toIndentedString(transition)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asset");
    openapiFields.add("effect");
    openapiFields.add("filter");
    openapiFields.add("fit");
    openapiFields.add("length");
    openapiFields.add("offset");
    openapiFields.add("opacity");
    openapiFields.add("position");
    openapiFields.add("scale");
    openapiFields.add("start");
    openapiFields.add("transition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("asset");
    openapiRequiredFields.add("length");
    openapiRequiredFields.add("start");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Clip
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Clip.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Clip is not found in the empty JSON string", Clip.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Clip.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Clip` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Clip.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `asset`
      ClipAsset.validateJsonElement(jsonObj.get("asset"));
      if ((jsonObj.get("effect") != null && !jsonObj.get("effect").isJsonNull()) && !jsonObj.get("effect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effect").toString()));
      }
      // validate the optional field `effect`
      if (jsonObj.get("effect") != null && !jsonObj.get("effect").isJsonNull()) {
        EffectEnum.validateJsonElement(jsonObj.get("effect"));
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        FilterEnum.validateJsonElement(jsonObj.get("filter"));
      }
      if ((jsonObj.get("fit") != null && !jsonObj.get("fit").isJsonNull()) && !jsonObj.get("fit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fit").toString()));
      }
      // validate the optional field `fit`
      if (jsonObj.get("fit") != null && !jsonObj.get("fit").isJsonNull()) {
        FitEnum.validateJsonElement(jsonObj.get("fit"));
      }
      // validate the optional field `offset`
      if (jsonObj.get("offset") != null && !jsonObj.get("offset").isJsonNull()) {
        Offset.validateJsonElement(jsonObj.get("offset"));
      }
      if ((jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) && !jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      // validate the optional field `position`
      if (jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) {
        PositionEnum.validateJsonElement(jsonObj.get("position"));
      }
      // validate the optional field `transition`
      if (jsonObj.get("transition") != null && !jsonObj.get("transition").isJsonNull()) {
        Transition.validateJsonElement(jsonObj.get("transition"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Clip.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Clip' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Clip> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Clip.class));

       return (TypeAdapter<T>) new TypeAdapter<Clip>() {
           @Override
           public void write(JsonWriter out, Clip value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Clip read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Clip given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Clip
   * @throws IOException if the JSON string is invalid with respect to Clip
   */
  public static Clip fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Clip.class);
  }

  /**
   * Convert an instance of Clip to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

