/*
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OutputDestinationsInner;
import org.openapitools.client.model.Poster;
import org.openapitools.client.model.Range;
import org.openapitools.client.model.Size;
import org.openapitools.client.model.Thumbnail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The output format, render range and type of media to generate.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:51.122157-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Output {
  /**
   * The aspect ratio (shape) of the video or image. Useful for social media output formats. Options are: &lt;ul&gt;   &lt;li&gt;&#x60;16:9&#x60; - regular landscape/horizontal aspect ratio (default)&lt;/li&gt;   &lt;li&gt;&#x60;9:16&#x60; - vertical/portrait aspect ratio&lt;/li&gt;   &lt;li&gt;&#x60;1:1&#x60; - square aspect ratio&lt;/li&gt;   &lt;li&gt;&#x60;4:5&#x60; - short vertical/portrait aspect ratio&lt;/li&gt;   &lt;li&gt;&#x60;4:3&#x60; - legacy TV aspect ratio&lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(AspectRatioEnum.Adapter.class)
  public enum AspectRatioEnum {
    _969("969"),
    
    _556("556"),
    
    _61("61"),
    
    _245("245"),
    
    _243("243");

    private String value;

    AspectRatioEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AspectRatioEnum fromValue(String value) {
      for (AspectRatioEnum b : AspectRatioEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AspectRatioEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AspectRatioEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AspectRatioEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AspectRatioEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AspectRatioEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASPECT_RATIO = "aspectRatio";
  @SerializedName(SERIALIZED_NAME_ASPECT_RATIO)
  private AspectRatioEnum aspectRatio;

  public static final String SERIALIZED_NAME_DESTINATIONS = "destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List<OutputDestinationsInner> destinations = new ArrayList<>();

  /**
   * The output format and type of media file to generate. &lt;ul&gt;   &lt;li&gt;&#x60;mp4&#x60; - mp4 video file&lt;/li&gt;   &lt;li&gt;&#x60;gif&#x60; - animated gif&lt;/li&gt;   &lt;li&gt;&#x60;jpg&#x60; - jpg image file&lt;/li&gt;   &lt;li&gt;&#x60;png&#x60; - png image file&lt;/li&gt;   &lt;li&gt;&#x60;bmp&#x60; - bmp image file&lt;/li&gt;   &lt;li&gt;&#x60;mp3&#x60; - mp3 audio file (audio only)&lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    MP4("mp4"),
    
    GIF("gif"),
    
    MP3("mp3"),
    
    JPG("jpg"),
    
    PNG("png"),
    
    BMP("bmp");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format;

  /**
   * Override the default frames per second. Useful for when the source footage is recorded at 30fps, i.e. on  mobile devices. Lower frame rates can be used to add cinematic quality (24fps) or to create smaller file size/faster render times or animated gifs (12 or 15fps). Default is 25fps. &lt;ul&gt;   &lt;li&gt;&#x60;12&#x60; - 12fps&lt;/li&gt;   &lt;li&gt;&#x60;15&#x60; - 15fps&lt;/li&gt;   &lt;li&gt;&#x60;24&#x60; - 24fps&lt;/li&gt;   &lt;li&gt;&#x60;25&#x60; - 25fps&lt;/li&gt;   &lt;li&gt;&#x60;30&#x60; - 30fps&lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(FpsEnum.Adapter.class)
  public enum FpsEnum {
    NUMBER_12(12),
    
    NUMBER_15(15),
    
    NUMBER_24(24),
    
    NUMBER_25(25),
    
    NUMBER_30(30);

    private Integer value;

    FpsEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FpsEnum fromValue(Integer value) {
      for (FpsEnum b : FpsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FpsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FpsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FpsEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return FpsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      FpsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FPS = "fps";
  @SerializedName(SERIALIZED_NAME_FPS)
  private FpsEnum fps = FpsEnum.NUMBER_25;

  public static final String SERIALIZED_NAME_POSTER = "poster";
  @SerializedName(SERIALIZED_NAME_POSTER)
  private Poster poster;

  /**
   * Adjust the output quality of the video, image or audio. Adjusting quality affects  render speed, download speeds and storage requirements due to file size. The default &#x60;medium&#x60; provides the most optimized choice for all three  factors. &lt;ul&gt;   &lt;li&gt;&#x60;low&#x60; - slightly reduced quality, smaller file size&lt;/li&gt;   &lt;li&gt;&#x60;medium&#x60; - optimized quality, render speeds and file size&lt;/li&gt;   &lt;li&gt;&#x60;high&#x60; - slightly increased quality, larger file size&lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(QualityEnum.Adapter.class)
  public enum QualityEnum {
    LOW("low"),
    
    MEDIUM("medium"),
    
    HIGH("high");

    private String value;

    QualityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QualityEnum fromValue(String value) {
      for (QualityEnum b : QualityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QualityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QualityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QualityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QualityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QualityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUALITY = "quality";
  @SerializedName(SERIALIZED_NAME_QUALITY)
  private QualityEnum quality = QualityEnum.MEDIUM;

  public static final String SERIALIZED_NAME_RANGE = "range";
  @SerializedName(SERIALIZED_NAME_RANGE)
  private Range range;

  /**
   * The output resolution of the video or image. &lt;ul&gt;   &lt;li&gt;&#x60;preview&#x60; - 512px x 288px @ 15fps&lt;/li&gt;   &lt;li&gt;&#x60;mobile&#x60; - 640px x 360px @ 25fps&lt;/li&gt;   &lt;li&gt;&#x60;sd&#x60; - 1024px x 576px @ 25fps&lt;/li&gt;   &lt;li&gt;&#x60;hd&#x60; - 1280px x 720px @ 25fps&lt;/li&gt;   &lt;li&gt;&#x60;1080&#x60; - 1920px x 1080px @ 25fps&lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(ResolutionEnum.Adapter.class)
  public enum ResolutionEnum {
    PREVIEW("preview"),
    
    MOBILE("mobile"),
    
    SD("sd"),
    
    HD("hd"),
    
    _1080("1080");

    private String value;

    ResolutionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResolutionEnum fromValue(String value) {
      for (ResolutionEnum b : ResolutionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResolutionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResolutionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResolutionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResolutionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResolutionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOLUTION = "resolution";
  @SerializedName(SERIALIZED_NAME_RESOLUTION)
  private ResolutionEnum resolution;

  /**
   * Override the resolution and scale the video or image to render at a different size. When using scaleTo the asset should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use scaleTo to output the file at SD and the text will be scaled to the correct size. This is useful if you want to create multiple asset sizes. &lt;ul&gt;   &lt;li&gt;&#x60;preview&#x60; - 512px x 288px @ 15fps&lt;/li&gt;   &lt;li&gt;&#x60;mobile&#x60; - 640px x 360px @ 25fps&lt;/li&gt;   &lt;li&gt;&#x60;sd&#x60; - 1024px x 576px @25fps&lt;/li&gt;   &lt;li&gt;&#x60;hd&#x60; - 1280px x 720px @25fps&lt;/li&gt;   &lt;li&gt;&#x60;1080&#x60; - 1920px x 1080px @25fps&lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(ScaleToEnum.Adapter.class)
  public enum ScaleToEnum {
    PREVIEW("preview"),
    
    MOBILE("mobile"),
    
    SD("sd"),
    
    HD("hd"),
    
    _1080("1080");

    private String value;

    ScaleToEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScaleToEnum fromValue(String value) {
      for (ScaleToEnum b : ScaleToEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ScaleToEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScaleToEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScaleToEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ScaleToEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ScaleToEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SCALE_TO = "scaleTo";
  @SerializedName(SERIALIZED_NAME_SCALE_TO)
  private ScaleToEnum scaleTo;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Size size;

  public static final String SERIALIZED_NAME_THUMBNAIL = "thumbnail";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL)
  private Thumbnail thumbnail;

  public Output() {
  }

  public Output aspectRatio(AspectRatioEnum aspectRatio) {
    this.aspectRatio = aspectRatio;
    return this;
  }

  /**
   * The aspect ratio (shape) of the video or image. Useful for social media output formats. Options are: &lt;ul&gt;   &lt;li&gt;&#x60;16:9&#x60; - regular landscape/horizontal aspect ratio (default)&lt;/li&gt;   &lt;li&gt;&#x60;9:16&#x60; - vertical/portrait aspect ratio&lt;/li&gt;   &lt;li&gt;&#x60;1:1&#x60; - square aspect ratio&lt;/li&gt;   &lt;li&gt;&#x60;4:5&#x60; - short vertical/portrait aspect ratio&lt;/li&gt;   &lt;li&gt;&#x60;4:3&#x60; - legacy TV aspect ratio&lt;/li&gt; &lt;/ul&gt;
   * @return aspectRatio
   */
  @javax.annotation.Nullable
  public AspectRatioEnum getAspectRatio() {
    return aspectRatio;
  }

  public void setAspectRatio(AspectRatioEnum aspectRatio) {
    this.aspectRatio = aspectRatio;
  }


  public Output destinations(List<OutputDestinationsInner> destinations) {
    this.destinations = destinations;
    return this;
  }

  public Output addDestinationsItem(OutputDestinationsInner destinationsItem) {
    if (this.destinations == null) {
      this.destinations = new ArrayList<>();
    }
    this.destinations.add(destinationsItem);
    return this;
  }

  /**
   * A destination is a location where output files can be sent to for serving or hosting. By default all rendered assets are automatically sent to the Shotstack hosting destination. [DestinationShotstack](/#tocs_shotstackdestination) is currently the only option with plans to add more in the future such as S3, YouTube, Vimeo and Mux. If you do not require hosting you can opt-out using the  &#x60;exclude&#x60; property.
   * @return destinations
   */
  @javax.annotation.Nullable
  public List<OutputDestinationsInner> getDestinations() {
    return destinations;
  }

  public void setDestinations(List<OutputDestinationsInner> destinations) {
    this.destinations = destinations;
  }


  public Output format(FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * The output format and type of media file to generate. &lt;ul&gt;   &lt;li&gt;&#x60;mp4&#x60; - mp4 video file&lt;/li&gt;   &lt;li&gt;&#x60;gif&#x60; - animated gif&lt;/li&gt;   &lt;li&gt;&#x60;jpg&#x60; - jpg image file&lt;/li&gt;   &lt;li&gt;&#x60;png&#x60; - png image file&lt;/li&gt;   &lt;li&gt;&#x60;bmp&#x60; - bmp image file&lt;/li&gt;   &lt;li&gt;&#x60;mp3&#x60; - mp3 audio file (audio only)&lt;/li&gt; &lt;/ul&gt;
   * @return format
   */
  @javax.annotation.Nonnull
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public Output fps(FpsEnum fps) {
    this.fps = fps;
    return this;
  }

  /**
   * Override the default frames per second. Useful for when the source footage is recorded at 30fps, i.e. on  mobile devices. Lower frame rates can be used to add cinematic quality (24fps) or to create smaller file size/faster render times or animated gifs (12 or 15fps). Default is 25fps. &lt;ul&gt;   &lt;li&gt;&#x60;12&#x60; - 12fps&lt;/li&gt;   &lt;li&gt;&#x60;15&#x60; - 15fps&lt;/li&gt;   &lt;li&gt;&#x60;24&#x60; - 24fps&lt;/li&gt;   &lt;li&gt;&#x60;25&#x60; - 25fps&lt;/li&gt;   &lt;li&gt;&#x60;30&#x60; - 30fps&lt;/li&gt; &lt;/ul&gt;
   * @return fps
   */
  @javax.annotation.Nullable
  public FpsEnum getFps() {
    return fps;
  }

  public void setFps(FpsEnum fps) {
    this.fps = fps;
  }


  public Output poster(Poster poster) {
    this.poster = poster;
    return this;
  }

  /**
   * Get poster
   * @return poster
   */
  @javax.annotation.Nullable
  public Poster getPoster() {
    return poster;
  }

  public void setPoster(Poster poster) {
    this.poster = poster;
  }


  public Output quality(QualityEnum quality) {
    this.quality = quality;
    return this;
  }

  /**
   * Adjust the output quality of the video, image or audio. Adjusting quality affects  render speed, download speeds and storage requirements due to file size. The default &#x60;medium&#x60; provides the most optimized choice for all three  factors. &lt;ul&gt;   &lt;li&gt;&#x60;low&#x60; - slightly reduced quality, smaller file size&lt;/li&gt;   &lt;li&gt;&#x60;medium&#x60; - optimized quality, render speeds and file size&lt;/li&gt;   &lt;li&gt;&#x60;high&#x60; - slightly increased quality, larger file size&lt;/li&gt; &lt;/ul&gt;
   * @return quality
   */
  @javax.annotation.Nullable
  public QualityEnum getQuality() {
    return quality;
  }

  public void setQuality(QualityEnum quality) {
    this.quality = quality;
  }


  public Output range(Range range) {
    this.range = range;
    return this;
  }

  /**
   * Get range
   * @return range
   */
  @javax.annotation.Nullable
  public Range getRange() {
    return range;
  }

  public void setRange(Range range) {
    this.range = range;
  }


  public Output resolution(ResolutionEnum resolution) {
    this.resolution = resolution;
    return this;
  }

  /**
   * The output resolution of the video or image. &lt;ul&gt;   &lt;li&gt;&#x60;preview&#x60; - 512px x 288px @ 15fps&lt;/li&gt;   &lt;li&gt;&#x60;mobile&#x60; - 640px x 360px @ 25fps&lt;/li&gt;   &lt;li&gt;&#x60;sd&#x60; - 1024px x 576px @ 25fps&lt;/li&gt;   &lt;li&gt;&#x60;hd&#x60; - 1280px x 720px @ 25fps&lt;/li&gt;   &lt;li&gt;&#x60;1080&#x60; - 1920px x 1080px @ 25fps&lt;/li&gt; &lt;/ul&gt;
   * @return resolution
   */
  @javax.annotation.Nullable
  public ResolutionEnum getResolution() {
    return resolution;
  }

  public void setResolution(ResolutionEnum resolution) {
    this.resolution = resolution;
  }


  public Output scaleTo(ScaleToEnum scaleTo) {
    this.scaleTo = scaleTo;
    return this;
  }

  /**
   * Override the resolution and scale the video or image to render at a different size. When using scaleTo the asset should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use scaleTo to output the file at SD and the text will be scaled to the correct size. This is useful if you want to create multiple asset sizes. &lt;ul&gt;   &lt;li&gt;&#x60;preview&#x60; - 512px x 288px @ 15fps&lt;/li&gt;   &lt;li&gt;&#x60;mobile&#x60; - 640px x 360px @ 25fps&lt;/li&gt;   &lt;li&gt;&#x60;sd&#x60; - 1024px x 576px @25fps&lt;/li&gt;   &lt;li&gt;&#x60;hd&#x60; - 1280px x 720px @25fps&lt;/li&gt;   &lt;li&gt;&#x60;1080&#x60; - 1920px x 1080px @25fps&lt;/li&gt; &lt;/ul&gt;
   * @return scaleTo
   */
  @javax.annotation.Nullable
  public ScaleToEnum getScaleTo() {
    return scaleTo;
  }

  public void setScaleTo(ScaleToEnum scaleTo) {
    this.scaleTo = scaleTo;
  }


  public Output size(Size size) {
    this.size = size;
    return this;
  }

  /**
   * Get size
   * @return size
   */
  @javax.annotation.Nullable
  public Size getSize() {
    return size;
  }

  public void setSize(Size size) {
    this.size = size;
  }


  public Output thumbnail(Thumbnail thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

  /**
   * Get thumbnail
   * @return thumbnail
   */
  @javax.annotation.Nullable
  public Thumbnail getThumbnail() {
    return thumbnail;
  }

  public void setThumbnail(Thumbnail thumbnail) {
    this.thumbnail = thumbnail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Output output = (Output) o;
    return Objects.equals(this.aspectRatio, output.aspectRatio) &&
        Objects.equals(this.destinations, output.destinations) &&
        Objects.equals(this.format, output.format) &&
        Objects.equals(this.fps, output.fps) &&
        Objects.equals(this.poster, output.poster) &&
        Objects.equals(this.quality, output.quality) &&
        Objects.equals(this.range, output.range) &&
        Objects.equals(this.resolution, output.resolution) &&
        Objects.equals(this.scaleTo, output.scaleTo) &&
        Objects.equals(this.size, output.size) &&
        Objects.equals(this.thumbnail, output.thumbnail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aspectRatio, destinations, format, fps, poster, quality, range, resolution, scaleTo, size, thumbnail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Output {\n");
    sb.append("    aspectRatio: ").append(toIndentedString(aspectRatio)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    fps: ").append(toIndentedString(fps)).append("\n");
    sb.append("    poster: ").append(toIndentedString(poster)).append("\n");
    sb.append("    quality: ").append(toIndentedString(quality)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    scaleTo: ").append(toIndentedString(scaleTo)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aspectRatio");
    openapiFields.add("destinations");
    openapiFields.add("format");
    openapiFields.add("fps");
    openapiFields.add("poster");
    openapiFields.add("quality");
    openapiFields.add("range");
    openapiFields.add("resolution");
    openapiFields.add("scaleTo");
    openapiFields.add("size");
    openapiFields.add("thumbnail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("format");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Output
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Output.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Output is not found in the empty JSON string", Output.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Output.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Output` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Output.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aspectRatio") != null && !jsonObj.get("aspectRatio").isJsonNull()) && !jsonObj.get("aspectRatio").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aspectRatio` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aspectRatio").toString()));
      }
      // validate the optional field `aspectRatio`
      if (jsonObj.get("aspectRatio") != null && !jsonObj.get("aspectRatio").isJsonNull()) {
        AspectRatioEnum.validateJsonElement(jsonObj.get("aspectRatio"));
      }
      if (jsonObj.get("destinations") != null && !jsonObj.get("destinations").isJsonNull()) {
        JsonArray jsonArraydestinations = jsonObj.getAsJsonArray("destinations");
        if (jsonArraydestinations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("destinations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `destinations` to be an array in the JSON string but got `%s`", jsonObj.get("destinations").toString()));
          }

          // validate the optional field `destinations` (array)
          for (int i = 0; i < jsonArraydestinations.size(); i++) {
            OutputDestinationsInner.validateJsonElement(jsonArraydestinations.get(i));
          };
        }
      }
      if (!jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the required field `format`
      FormatEnum.validateJsonElement(jsonObj.get("format"));
      // validate the optional field `fps`
      if (jsonObj.get("fps") != null && !jsonObj.get("fps").isJsonNull()) {
        FpsEnum.validateJsonElement(jsonObj.get("fps"));
      }
      // validate the optional field `poster`
      if (jsonObj.get("poster") != null && !jsonObj.get("poster").isJsonNull()) {
        Poster.validateJsonElement(jsonObj.get("poster"));
      }
      if ((jsonObj.get("quality") != null && !jsonObj.get("quality").isJsonNull()) && !jsonObj.get("quality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quality").toString()));
      }
      // validate the optional field `quality`
      if (jsonObj.get("quality") != null && !jsonObj.get("quality").isJsonNull()) {
        QualityEnum.validateJsonElement(jsonObj.get("quality"));
      }
      // validate the optional field `range`
      if (jsonObj.get("range") != null && !jsonObj.get("range").isJsonNull()) {
        Range.validateJsonElement(jsonObj.get("range"));
      }
      if ((jsonObj.get("resolution") != null && !jsonObj.get("resolution").isJsonNull()) && !jsonObj.get("resolution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolution").toString()));
      }
      // validate the optional field `resolution`
      if (jsonObj.get("resolution") != null && !jsonObj.get("resolution").isJsonNull()) {
        ResolutionEnum.validateJsonElement(jsonObj.get("resolution"));
      }
      if ((jsonObj.get("scaleTo") != null && !jsonObj.get("scaleTo").isJsonNull()) && !jsonObj.get("scaleTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scaleTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scaleTo").toString()));
      }
      // validate the optional field `scaleTo`
      if (jsonObj.get("scaleTo") != null && !jsonObj.get("scaleTo").isJsonNull()) {
        ScaleToEnum.validateJsonElement(jsonObj.get("scaleTo"));
      }
      // validate the optional field `size`
      if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
        Size.validateJsonElement(jsonObj.get("size"));
      }
      // validate the optional field `thumbnail`
      if (jsonObj.get("thumbnail") != null && !jsonObj.get("thumbnail").isJsonNull()) {
        Thumbnail.validateJsonElement(jsonObj.get("thumbnail"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Output.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Output' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Output> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Output.class));

       return (TypeAdapter<T>) new TypeAdapter<Output>() {
           @Override
           public void write(JsonWriter out, Output value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Output read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Output given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Output
   * @throws IOException if the JSON string is invalid with respect to Output
   */
  public static Output fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Output.class);
  }

  /**
   * Convert an instance of Output to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

