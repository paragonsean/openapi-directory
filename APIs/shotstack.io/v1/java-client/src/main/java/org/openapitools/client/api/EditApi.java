/*
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Edit;
import org.openapitools.client.model.QueuedResponse;
import org.openapitools.client.model.RenderResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EditApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EditApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EditApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getRender
     * @param id The id of the timeline render task in UUID format (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The render status details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRenderCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/render/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DeveloperKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRenderValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRender(Async)");
        }

        return getRenderCall(id, _callback);

    }

    /**
     * Get Render Status
     * Get the rendering status, temporary asset url and details of a render by ID.  **base URL:** https://api.shotstack.io/{version}
     * @param id The id of the timeline render task in UUID format (required)
     * @return RenderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The render status details </td><td>  -  </td></tr>
     </table>
     */
    public RenderResponse getRender(String id) throws ApiException {
        ApiResponse<RenderResponse> localVarResp = getRenderWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Render Status
     * Get the rendering status, temporary asset url and details of a render by ID.  **base URL:** https://api.shotstack.io/{version}
     * @param id The id of the timeline render task in UUID format (required)
     * @return ApiResponse&lt;RenderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The render status details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RenderResponse> getRenderWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getRenderValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RenderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Render Status (asynchronously)
     * Get the rendering status, temporary asset url and details of a render by ID.  **base URL:** https://api.shotstack.io/{version}
     * @param id The id of the timeline render task in UUID format (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The render status details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRenderAsync(String id, final ApiCallback<RenderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRenderValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RenderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postRender
     * @param edit The video, image or audio edit specified using JSON.  **base URL:** https://api.shotstack.io/{version} (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The queued render details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postRenderCall(Edit edit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = edit;

        // create path and map variables
        String localVarPath = "/render";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "DeveloperKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postRenderValidateBeforeCall(Edit edit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'edit' is set
        if (edit == null) {
            throw new ApiException("Missing the required parameter 'edit' when calling postRender(Async)");
        }

        return postRenderCall(edit, _callback);

    }

    /**
     * Render Asset
     * Queue and render the contents of a timeline as a video, image or audio file.
     * @param edit The video, image or audio edit specified using JSON.  **base URL:** https://api.shotstack.io/{version} (required)
     * @return QueuedResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The queued render details </td><td>  -  </td></tr>
     </table>
     */
    public QueuedResponse postRender(Edit edit) throws ApiException {
        ApiResponse<QueuedResponse> localVarResp = postRenderWithHttpInfo(edit);
        return localVarResp.getData();
    }

    /**
     * Render Asset
     * Queue and render the contents of a timeline as a video, image or audio file.
     * @param edit The video, image or audio edit specified using JSON.  **base URL:** https://api.shotstack.io/{version} (required)
     * @return ApiResponse&lt;QueuedResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The queued render details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueuedResponse> postRenderWithHttpInfo(Edit edit) throws ApiException {
        okhttp3.Call localVarCall = postRenderValidateBeforeCall(edit, null);
        Type localVarReturnType = new TypeToken<QueuedResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Render Asset (asynchronously)
     * Queue and render the contents of a timeline as a video, image or audio file.
     * @param edit The video, image or audio edit specified using JSON.  **base URL:** https://api.shotstack.io/{version} (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The queued render details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postRenderAsync(Edit edit, final ApiCallback<QueuedResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postRenderValidateBeforeCall(edit, _callback);
        Type localVarReturnType = new TypeToken<QueuedResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
