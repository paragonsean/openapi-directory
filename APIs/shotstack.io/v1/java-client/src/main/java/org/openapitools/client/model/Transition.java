/*
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * In and out transitions for a clip - i.e. fade in and fade out
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:51.122157-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Transition {
  /**
   * The transition in. Available transitions are:   &lt;ul&gt;     &lt;li&gt;&#x60;fade&#x60; - fade in&lt;/li&gt;     &lt;li&gt;&#x60;reveal&#x60; - reveal from left to right&lt;/li&gt;     &lt;li&gt;&#x60;wipeLeft&#x60; - fade across screen to the left&lt;/li&gt;     &lt;li&gt;&#x60;wipeRight&#x60; - fade across screen to the right&lt;/li&gt;     &lt;li&gt;&#x60;slideLeft&#x60; - move slightly left and fade in&lt;/li&gt;     &lt;li&gt;&#x60;slideRight&#x60; - move slightly right and fade in&lt;/li&gt;     &lt;li&gt;&#x60;slideUp&#x60; - move slightly up and fade in&lt;/li&gt;     &lt;li&gt;&#x60;slideDown&#x60; - move slightly down and fade in&lt;/li&gt;     &lt;li&gt;&#x60;carouselLeft&#x60; - slide in from right to left&lt;/li&gt;     &lt;li&gt;&#x60;carouselRight&#x60; - slide in from left to right&lt;/li&gt;     &lt;li&gt;&#x60;carouselUp&#x60; - slide in from bottom to top&lt;/li&gt;     &lt;li&gt;&#x60;carouselDown&#x60; - slide in from top to bottom&lt;/li&gt;     &lt;li&gt;&#x60;shuffleTopRight&#x60; - rotate in from top right&lt;/li&gt;     &lt;li&gt;&#x60;shuffleRightTop&#x60; - rotate in from right top&lt;/li&gt;     &lt;li&gt;&#x60;shuffleRightBottom&#x60; - rotate in from right bottom&lt;/li&gt;     &lt;li&gt;&#x60;shuffleBottomRight&#x60; - rotate in from bottom right&lt;/li&gt;     &lt;li&gt;&#x60;shuffleBottomLeft&#x60; - rotate in from bottom left&lt;/li&gt;     &lt;li&gt;&#x60;shuffleLeftBottom&#x60; - rotate in from left bottom&lt;/li&gt;     &lt;li&gt;&#x60;shuffleLeftTop&#x60; - rotate in from left top&lt;/li&gt;     &lt;li&gt;&#x60;shuffleTopLeft&#x60; - rotate in from top left&lt;/li&gt;     &lt;li&gt;&#x60;zoom&#x60; - fast zoom in&lt;/li&gt;   &lt;/ul&gt; The transition speed can also be controlled by appending &#x60;Fast&#x60; or &#x60;Slow&#x60; to the transition, e.g. &#x60;fadeFast&#x60; or &#x60;CarouselLeftSlow&#x60;.
   */
  @JsonAdapter(InEnum.Adapter.class)
  public enum InEnum {
    FADE("fade"),
    
    FADE_SLOW("fadeSlow"),
    
    FADE_FAST("fadeFast"),
    
    REVEAL("reveal"),
    
    REVEAL_SLOW("revealSlow"),
    
    REVEAL_FAST("revealFast"),
    
    WIPE_LEFT("wipeLeft"),
    
    WIPE_LEFT_SLOW("wipeLeftSlow"),
    
    WIPE_LEFT_FAST("wipeLeftFast"),
    
    WIPE_RIGHT("wipeRight"),
    
    WIPE_RIGHT_SLOW("wipeRightSlow"),
    
    WIPE_RIGHT_FAST("wipeRightFast"),
    
    SLIDE_LEFT("slideLeft"),
    
    SLIDE_LEFT_SLOW("slideLeftSlow"),
    
    SLIDE_LEFT_FAST("slideLeftFast"),
    
    SLIDE_RIGHT("slideRight"),
    
    SLIDE_RIGHT_SLOW("slideRightSlow"),
    
    SLIDE_RIGHT_FAST("slideRightFast"),
    
    SLIDE_UP("slideUp"),
    
    SLIDE_UP_SLOW("slideUpSlow"),
    
    SLIDE_UP_FAST("slideUpFast"),
    
    SLIDE_DOWN("slideDown"),
    
    SLIDE_DOWN_SLOW("slideDownSlow"),
    
    SLIDE_DOWN_FAST("slideDownFast"),
    
    CAROUSEL_LEFT("carouselLeft"),
    
    CAROUSEL_LEFT_SLOW("carouselLeftSlow"),
    
    CAROUSEL_LEFT_FAST("carouselLeftFast"),
    
    CAROUSEL_RIGHT("carouselRight"),
    
    CAROUSEL_RIGHT_SLOW("carouselRightSlow"),
    
    CAROUSEL_RIGHT_FAST("carouselRightFast"),
    
    CAROUSEL_UP("carouselUp"),
    
    CAROUSEL_UP_SLOW("carouselUpSlow"),
    
    CAROUSEL_UP_FAST("carouselUpFast"),
    
    CAROUSEL_DOWN("carouselDown"),
    
    CAROUSEL_DOWN_SLOW("carouselDownSlow"),
    
    CAROUSEL_DOWN_FAST("carouselDownFast"),
    
    SHUFFLE_TOP_RIGHT("shuffleTopRight"),
    
    SHUFFLE_TOP_RIGHT_SLOW("shuffleTopRightSlow"),
    
    SHUFFLE_TOP_RIGHT_FAST("shuffleTopRightFast"),
    
    SHUFFLE_RIGHT_TOP("shuffleRightTop"),
    
    SHUFFLE_RIGHT_TOP_SLOW("shuffleRightTopSlow"),
    
    SHUFFLE_RIGHT_TOP_FAST("shuffleRightTopFast"),
    
    SHUFFLE_RIGHT_BOTTOM("shuffleRightBottom"),
    
    SHUFFLE_RIGHT_BOTTOM_SLOW("shuffleRightBottomSlow"),
    
    SHUFFLE_RIGHT_BOTTOM_FAST("shuffleRightBottomFast"),
    
    SHUFFLE_BOTTOM_RIGHT("shuffleBottomRight"),
    
    SHUFFLE_BOTTOM_RIGHT_SLOW("shuffleBottomRightSlow"),
    
    SHUFFLE_BOTTOM_RIGHT_FAST("shuffleBottomRightFast"),
    
    SHUFFLE_BOTTOM_LEFT("shuffleBottomLeft"),
    
    SHUFFLE_BOTTOM_LEFT_SLOW("shuffleBottomLeftSlow"),
    
    SHUFFLE_BOTTOM_LEFT_FAST("shuffleBottomLeftFast"),
    
    SHUFFLE_LEFT_BOTTOM("shuffleLeftBottom"),
    
    SHUFFLE_LEFT_BOTTOM_SLOW("shuffleLeftBottomSlow"),
    
    SHUFFLE_LEFT_BOTTOM_FAST("shuffleLeftBottomFast"),
    
    SHUFFLE_LEFT_TOP("shuffleLeftTop"),
    
    SHUFFLE_LEFT_TOP_SLOW("shuffleLeftTopSlow"),
    
    SHUFFLE_LEFT_TOP_FAST("shuffleLeftTopFast"),
    
    SHUFFLE_TOP_LEFT("shuffleTopLeft"),
    
    SHUFFLE_TOP_LEFT_SLOW("shuffleTopLeftSlow"),
    
    SHUFFLE_TOP_LEFT_FAST("shuffleTopLeftFast"),
    
    ZOOM("zoom");

    private String value;

    InEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InEnum fromValue(String value) {
      for (InEnum b : InEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IN = "in";
  @SerializedName(SERIALIZED_NAME_IN)
  private InEnum in;

  /**
   * The transition out. Available transitions are:   &lt;ul&gt;     &lt;li&gt;&#x60;fade&#x60; - fade out&lt;/li&gt;     &lt;li&gt;&#x60;reveal&#x60; - reveal from right to left&lt;/li&gt;     &lt;li&gt;&#x60;wipeLeft&#x60; - fade across screen to the left&lt;/li&gt;     &lt;li&gt;&#x60;wipeRight&#x60; - fade across screen to the right&lt;/li&gt;     &lt;li&gt;&#x60;slideLeft&#x60; - move slightly left and fade out&lt;/li&gt;     &lt;li&gt;&#x60;slideRight&#x60; - move slightly right and fade out&lt;/li&gt;     &lt;li&gt;&#x60;slideUp&#x60; - move slightly up and fade out&lt;/li&gt;     &lt;li&gt;&#x60;slideDown&#x60; - move slightly down and fade out&lt;/li&gt;     &lt;li&gt;&#x60;carouselLeft&#x60; - slide out from right to left&lt;/li&gt;     &lt;li&gt;&#x60;carouselRight&#x60; - slide out from left to right&lt;/li&gt;     &lt;li&gt;&#x60;carouselUp&#x60; - slide out from bottom to top&lt;/li&gt;     &lt;li&gt;&#x60;carouselDown&#x60; - slide out from top  to bottom&lt;/li&gt;     &lt;li&gt;&#x60;shuffleTopRight&#x60; - rotate out from top right&lt;/li&gt;     &lt;li&gt;&#x60;shuffleRightTop&#x60; - rotate out from right top&lt;/li&gt;     &lt;li&gt;&#x60;shuffleRightBottom&#x60; - rotate out from right bottom&lt;/li&gt;     &lt;li&gt;&#x60;shuffleBottomRight&#x60; - rotate out from bottom right&lt;/li&gt;     &lt;li&gt;&#x60;shuffleBottomLeft&#x60; - rotate out from bottom left&lt;/li&gt;     &lt;li&gt;&#x60;shuffleLeftBottom&#x60; - rotate out from left bottom&lt;/li&gt;     &lt;li&gt;&#x60;shuffleLeftTop&#x60; - rotate out from left top&lt;/li&gt;     &lt;li&gt;&#x60;shuffleTopLeft&#x60; - rotate out from top left&lt;/li&gt;     &lt;li&gt;&#x60;zoom&#x60; - fast zoom out&lt;/li&gt;   &lt;/ul&gt; The transition speed can also be controlled by appending &#x60;Fast&#x60; or &#x60;Slow&#x60; to the transition, e.g. &#x60;fadeFast&#x60; or &#x60;CarouselLeftSlow&#x60;.
   */
  @JsonAdapter(OutEnum.Adapter.class)
  public enum OutEnum {
    FADE("fade"),
    
    FADE_SLOW("fadeSlow"),
    
    FADE_FAST("fadeFast"),
    
    REVEAL("reveal"),
    
    REVEAL_SLOW("revealSlow"),
    
    REVEAL_FAST("revealFast"),
    
    WIPE_LEFT("wipeLeft"),
    
    WIPE_LEFT_SLOW("wipeLeftSlow"),
    
    WIPE_LEFT_FAST("wipeLeftFast"),
    
    WIPE_RIGHT("wipeRight"),
    
    WIPE_RIGHT_SLOW("wipeRightSlow"),
    
    WIPE_RIGHT_FAST("wipeRightFast"),
    
    SLIDE_LEFT("slideLeft"),
    
    SLIDE_LEFT_SLOW("slideLeftSlow"),
    
    SLIDE_LEFT_FAST("slideLeftFast"),
    
    SLIDE_RIGHT("slideRight"),
    
    SLIDE_RIGHT_SLOW("slideRightSlow"),
    
    SLIDE_RIGHT_FAST("slideRightFast"),
    
    SLIDE_UP("slideUp"),
    
    SLIDE_UP_SLOW("slideUpSlow"),
    
    SLIDE_UP_FAST("slideUpFast"),
    
    SLIDE_DOWN("slideDown"),
    
    SLIDE_DOWN_SLOW("slideDownSlow"),
    
    SLIDE_DOWN_FAST("slideDownFast"),
    
    CAROUSEL_LEFT("carouselLeft"),
    
    CAROUSEL_LEFT_SLOW("carouselLeftSlow"),
    
    CAROUSEL_LEFT_FAST("carouselLeftFast"),
    
    CAROUSEL_RIGHT("carouselRight"),
    
    CAROUSEL_RIGHT_SLOW("carouselRightSlow"),
    
    CAROUSEL_RIGHT_FAST("carouselRightFast"),
    
    CAROUSEL_UP("carouselUp"),
    
    CAROUSEL_UP_SLOW("carouselUpSlow"),
    
    CAROUSEL_UP_FAST("carouselUpFast"),
    
    CAROUSEL_DOWN("carouselDown"),
    
    CAROUSEL_DOWN_SLOW("carouselDownSlow"),
    
    CAROUSEL_DOWN_FAST("carouselDownFast"),
    
    SHUFFLE_TOP_RIGHT("shuffleTopRight"),
    
    SHUFFLE_TOP_RIGHT_SLOW("shuffleTopRightSlow"),
    
    SHUFFLE_TOP_RIGHT_FAST("shuffleTopRightFast"),
    
    SHUFFLE_RIGHT_TOP("shuffleRightTop"),
    
    SHUFFLE_RIGHT_TOP_SLOW("shuffleRightTopSlow"),
    
    SHUFFLE_RIGHT_TOP_FAST("shuffleRightTopFast"),
    
    SHUFFLE_RIGHT_BOTTOM("shuffleRightBottom"),
    
    SHUFFLE_RIGHT_BOTTOM_SLOW("shuffleRightBottomSlow"),
    
    SHUFFLE_RIGHT_BOTTOM_FAST("shuffleRightBottomFast"),
    
    SHUFFLE_BOTTOM_RIGHT("shuffleBottomRight"),
    
    SHUFFLE_BOTTOM_RIGHT_SLOW("shuffleBottomRightSlow"),
    
    SHUFFLE_BOTTOM_RIGHT_FAST("shuffleBottomRightFast"),
    
    SHUFFLE_BOTTOM_LEFT("shuffleBottomLeft"),
    
    SHUFFLE_BOTTOM_LEFT_SLOW("shuffleBottomLeftSlow"),
    
    SHUFFLE_BOTTOM_LEFT_FAST("shuffleBottomLeftFast"),
    
    SHUFFLE_LEFT_BOTTOM("shuffleLeftBottom"),
    
    SHUFFLE_LEFT_BOTTOM_SLOW("shuffleLeftBottomSlow"),
    
    SHUFFLE_LEFT_BOTTOM_FAST("shuffleLeftBottomFast"),
    
    SHUFFLE_LEFT_TOP("shuffleLeftTop"),
    
    SHUFFLE_LEFT_TOP_SLOW("shuffleLeftTopSlow"),
    
    SHUFFLE_LEFT_TOP_FAST("shuffleLeftTopFast"),
    
    SHUFFLE_TOP_LEFT("shuffleTopLeft"),
    
    SHUFFLE_TOP_LEFT_SLOW("shuffleTopLeftSlow"),
    
    SHUFFLE_TOP_LEFT_FAST("shuffleTopLeftFast"),
    
    ZOOM("zoom");

    private String value;

    OutEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OutEnum fromValue(String value) {
      for (OutEnum b : OutEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OutEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OutEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OutEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OutEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OutEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OUT = "out";
  @SerializedName(SERIALIZED_NAME_OUT)
  private OutEnum out;

  public Transition() {
  }

  public Transition in(InEnum in) {
    this.in = in;
    return this;
  }

  /**
   * The transition in. Available transitions are:   &lt;ul&gt;     &lt;li&gt;&#x60;fade&#x60; - fade in&lt;/li&gt;     &lt;li&gt;&#x60;reveal&#x60; - reveal from left to right&lt;/li&gt;     &lt;li&gt;&#x60;wipeLeft&#x60; - fade across screen to the left&lt;/li&gt;     &lt;li&gt;&#x60;wipeRight&#x60; - fade across screen to the right&lt;/li&gt;     &lt;li&gt;&#x60;slideLeft&#x60; - move slightly left and fade in&lt;/li&gt;     &lt;li&gt;&#x60;slideRight&#x60; - move slightly right and fade in&lt;/li&gt;     &lt;li&gt;&#x60;slideUp&#x60; - move slightly up and fade in&lt;/li&gt;     &lt;li&gt;&#x60;slideDown&#x60; - move slightly down and fade in&lt;/li&gt;     &lt;li&gt;&#x60;carouselLeft&#x60; - slide in from right to left&lt;/li&gt;     &lt;li&gt;&#x60;carouselRight&#x60; - slide in from left to right&lt;/li&gt;     &lt;li&gt;&#x60;carouselUp&#x60; - slide in from bottom to top&lt;/li&gt;     &lt;li&gt;&#x60;carouselDown&#x60; - slide in from top to bottom&lt;/li&gt;     &lt;li&gt;&#x60;shuffleTopRight&#x60; - rotate in from top right&lt;/li&gt;     &lt;li&gt;&#x60;shuffleRightTop&#x60; - rotate in from right top&lt;/li&gt;     &lt;li&gt;&#x60;shuffleRightBottom&#x60; - rotate in from right bottom&lt;/li&gt;     &lt;li&gt;&#x60;shuffleBottomRight&#x60; - rotate in from bottom right&lt;/li&gt;     &lt;li&gt;&#x60;shuffleBottomLeft&#x60; - rotate in from bottom left&lt;/li&gt;     &lt;li&gt;&#x60;shuffleLeftBottom&#x60; - rotate in from left bottom&lt;/li&gt;     &lt;li&gt;&#x60;shuffleLeftTop&#x60; - rotate in from left top&lt;/li&gt;     &lt;li&gt;&#x60;shuffleTopLeft&#x60; - rotate in from top left&lt;/li&gt;     &lt;li&gt;&#x60;zoom&#x60; - fast zoom in&lt;/li&gt;   &lt;/ul&gt; The transition speed can also be controlled by appending &#x60;Fast&#x60; or &#x60;Slow&#x60; to the transition, e.g. &#x60;fadeFast&#x60; or &#x60;CarouselLeftSlow&#x60;.
   * @return in
   */
  @javax.annotation.Nullable
  public InEnum getIn() {
    return in;
  }

  public void setIn(InEnum in) {
    this.in = in;
  }


  public Transition out(OutEnum out) {
    this.out = out;
    return this;
  }

  /**
   * The transition out. Available transitions are:   &lt;ul&gt;     &lt;li&gt;&#x60;fade&#x60; - fade out&lt;/li&gt;     &lt;li&gt;&#x60;reveal&#x60; - reveal from right to left&lt;/li&gt;     &lt;li&gt;&#x60;wipeLeft&#x60; - fade across screen to the left&lt;/li&gt;     &lt;li&gt;&#x60;wipeRight&#x60; - fade across screen to the right&lt;/li&gt;     &lt;li&gt;&#x60;slideLeft&#x60; - move slightly left and fade out&lt;/li&gt;     &lt;li&gt;&#x60;slideRight&#x60; - move slightly right and fade out&lt;/li&gt;     &lt;li&gt;&#x60;slideUp&#x60; - move slightly up and fade out&lt;/li&gt;     &lt;li&gt;&#x60;slideDown&#x60; - move slightly down and fade out&lt;/li&gt;     &lt;li&gt;&#x60;carouselLeft&#x60; - slide out from right to left&lt;/li&gt;     &lt;li&gt;&#x60;carouselRight&#x60; - slide out from left to right&lt;/li&gt;     &lt;li&gt;&#x60;carouselUp&#x60; - slide out from bottom to top&lt;/li&gt;     &lt;li&gt;&#x60;carouselDown&#x60; - slide out from top  to bottom&lt;/li&gt;     &lt;li&gt;&#x60;shuffleTopRight&#x60; - rotate out from top right&lt;/li&gt;     &lt;li&gt;&#x60;shuffleRightTop&#x60; - rotate out from right top&lt;/li&gt;     &lt;li&gt;&#x60;shuffleRightBottom&#x60; - rotate out from right bottom&lt;/li&gt;     &lt;li&gt;&#x60;shuffleBottomRight&#x60; - rotate out from bottom right&lt;/li&gt;     &lt;li&gt;&#x60;shuffleBottomLeft&#x60; - rotate out from bottom left&lt;/li&gt;     &lt;li&gt;&#x60;shuffleLeftBottom&#x60; - rotate out from left bottom&lt;/li&gt;     &lt;li&gt;&#x60;shuffleLeftTop&#x60; - rotate out from left top&lt;/li&gt;     &lt;li&gt;&#x60;shuffleTopLeft&#x60; - rotate out from top left&lt;/li&gt;     &lt;li&gt;&#x60;zoom&#x60; - fast zoom out&lt;/li&gt;   &lt;/ul&gt; The transition speed can also be controlled by appending &#x60;Fast&#x60; or &#x60;Slow&#x60; to the transition, e.g. &#x60;fadeFast&#x60; or &#x60;CarouselLeftSlow&#x60;.
   * @return out
   */
  @javax.annotation.Nullable
  public OutEnum getOut() {
    return out;
  }

  public void setOut(OutEnum out) {
    this.out = out;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transition transition = (Transition) o;
    return Objects.equals(this.in, transition.in) &&
        Objects.equals(this.out, transition.out);
  }

  @Override
  public int hashCode() {
    return Objects.hash(in, out);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transition {\n");
    sb.append("    in: ").append(toIndentedString(in)).append("\n");
    sb.append("    out: ").append(toIndentedString(out)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("in");
    openapiFields.add("out");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Transition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transition is not found in the empty JSON string", Transition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Transition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Transition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("in") != null && !jsonObj.get("in").isJsonNull()) && !jsonObj.get("in").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `in` to be a primitive type in the JSON string but got `%s`", jsonObj.get("in").toString()));
      }
      // validate the optional field `in`
      if (jsonObj.get("in") != null && !jsonObj.get("in").isJsonNull()) {
        InEnum.validateJsonElement(jsonObj.get("in"));
      }
      if ((jsonObj.get("out") != null && !jsonObj.get("out").isJsonNull()) && !jsonObj.get("out").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `out` to be a primitive type in the JSON string but got `%s`", jsonObj.get("out").toString()));
      }
      // validate the optional field `out`
      if (jsonObj.get("out") != null && !jsonObj.get("out").isJsonNull()) {
        OutEnum.validateJsonElement(jsonObj.get("out"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transition.class));

       return (TypeAdapter<T>) new TypeAdapter<Transition>() {
           @Override
           public void write(JsonWriter out, Transition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Transition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Transition
   * @throws IOException if the JSON string is invalid with respect to Transition
   */
  public static Transition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transition.class);
  }

  /**
   * Convert an instance of Transition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

