/*
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.AudioAsset;
import org.openapitools.client.model.Crop;
import org.openapitools.client.model.HtmlAsset;
import org.openapitools.client.model.ImageAsset;
import org.openapitools.client.model.LumaAsset;
import org.openapitools.client.model.Offset;
import org.openapitools.client.model.TitleAsset;
import org.openapitools.client.model.VideoAsset;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:51.122157-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClipAsset extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ClipAsset.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ClipAsset.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ClipAsset' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<VideoAsset> adapterVideoAsset = gson.getDelegateAdapter(this, TypeToken.get(VideoAsset.class));
            final TypeAdapter<ImageAsset> adapterImageAsset = gson.getDelegateAdapter(this, TypeToken.get(ImageAsset.class));
            final TypeAdapter<TitleAsset> adapterTitleAsset = gson.getDelegateAdapter(this, TypeToken.get(TitleAsset.class));
            final TypeAdapter<HtmlAsset> adapterHtmlAsset = gson.getDelegateAdapter(this, TypeToken.get(HtmlAsset.class));
            final TypeAdapter<AudioAsset> adapterAudioAsset = gson.getDelegateAdapter(this, TypeToken.get(AudioAsset.class));
            final TypeAdapter<LumaAsset> adapterLumaAsset = gson.getDelegateAdapter(this, TypeToken.get(LumaAsset.class));

            return (TypeAdapter<T>) new TypeAdapter<ClipAsset>() {
                @Override
                public void write(JsonWriter out, ClipAsset value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `VideoAsset`
                    if (value.getActualInstance() instanceof VideoAsset) {
                        JsonElement element = adapterVideoAsset.toJsonTree((VideoAsset)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ImageAsset`
                    if (value.getActualInstance() instanceof ImageAsset) {
                        JsonElement element = adapterImageAsset.toJsonTree((ImageAsset)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TitleAsset`
                    if (value.getActualInstance() instanceof TitleAsset) {
                        JsonElement element = adapterTitleAsset.toJsonTree((TitleAsset)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `HtmlAsset`
                    if (value.getActualInstance() instanceof HtmlAsset) {
                        JsonElement element = adapterHtmlAsset.toJsonTree((HtmlAsset)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AudioAsset`
                    if (value.getActualInstance() instanceof AudioAsset) {
                        JsonElement element = adapterAudioAsset.toJsonTree((AudioAsset)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `LumaAsset`
                    if (value.getActualInstance() instanceof LumaAsset) {
                        JsonElement element = adapterLumaAsset.toJsonTree((LumaAsset)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AudioAsset, HtmlAsset, ImageAsset, LumaAsset, TitleAsset, VideoAsset");
                }

                @Override
                public ClipAsset read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize VideoAsset
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VideoAsset.validateJsonElement(jsonElement);
                        actualAdapter = adapterVideoAsset;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VideoAsset'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VideoAsset failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VideoAsset'", e);
                    }
                    // deserialize ImageAsset
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ImageAsset.validateJsonElement(jsonElement);
                        actualAdapter = adapterImageAsset;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ImageAsset'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ImageAsset failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ImageAsset'", e);
                    }
                    // deserialize TitleAsset
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TitleAsset.validateJsonElement(jsonElement);
                        actualAdapter = adapterTitleAsset;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TitleAsset'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TitleAsset failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TitleAsset'", e);
                    }
                    // deserialize HtmlAsset
                    try {
                        // validate the JSON object to see if any exception is thrown
                        HtmlAsset.validateJsonElement(jsonElement);
                        actualAdapter = adapterHtmlAsset;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'HtmlAsset'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for HtmlAsset failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'HtmlAsset'", e);
                    }
                    // deserialize AudioAsset
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AudioAsset.validateJsonElement(jsonElement);
                        actualAdapter = adapterAudioAsset;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AudioAsset'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AudioAsset failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AudioAsset'", e);
                    }
                    // deserialize LumaAsset
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LumaAsset.validateJsonElement(jsonElement);
                        actualAdapter = adapterLumaAsset;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'LumaAsset'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LumaAsset failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LumaAsset'", e);
                    }

                    if (match == 1) {
                        ClipAsset ret = new ClipAsset();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ClipAsset: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public ClipAsset() {
        super("oneOf", Boolean.FALSE);
    }

    public ClipAsset(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("VideoAsset", VideoAsset.class);
        schemas.put("ImageAsset", ImageAsset.class);
        schemas.put("TitleAsset", TitleAsset.class);
        schemas.put("HtmlAsset", HtmlAsset.class);
        schemas.put("AudioAsset", AudioAsset.class);
        schemas.put("LumaAsset", LumaAsset.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return ClipAsset.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AudioAsset, HtmlAsset, ImageAsset, LumaAsset, TitleAsset, VideoAsset
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof VideoAsset) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ImageAsset) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TitleAsset) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof HtmlAsset) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AudioAsset) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LumaAsset) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AudioAsset, HtmlAsset, ImageAsset, LumaAsset, TitleAsset, VideoAsset");
    }

    /**
     * Get the actual instance, which can be the following:
     * AudioAsset, HtmlAsset, ImageAsset, LumaAsset, TitleAsset, VideoAsset
     *
     * @return The actual instance (AudioAsset, HtmlAsset, ImageAsset, LumaAsset, TitleAsset, VideoAsset)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `VideoAsset`. If the actual instance is not `VideoAsset`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VideoAsset`
     * @throws ClassCastException if the instance is not `VideoAsset`
     */
    public VideoAsset getVideoAsset() throws ClassCastException {
        return (VideoAsset)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ImageAsset`. If the actual instance is not `ImageAsset`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ImageAsset`
     * @throws ClassCastException if the instance is not `ImageAsset`
     */
    public ImageAsset getImageAsset() throws ClassCastException {
        return (ImageAsset)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TitleAsset`. If the actual instance is not `TitleAsset`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TitleAsset`
     * @throws ClassCastException if the instance is not `TitleAsset`
     */
    public TitleAsset getTitleAsset() throws ClassCastException {
        return (TitleAsset)super.getActualInstance();
    }
    /**
     * Get the actual instance of `HtmlAsset`. If the actual instance is not `HtmlAsset`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `HtmlAsset`
     * @throws ClassCastException if the instance is not `HtmlAsset`
     */
    public HtmlAsset getHtmlAsset() throws ClassCastException {
        return (HtmlAsset)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AudioAsset`. If the actual instance is not `AudioAsset`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AudioAsset`
     * @throws ClassCastException if the instance is not `AudioAsset`
     */
    public AudioAsset getAudioAsset() throws ClassCastException {
        return (AudioAsset)super.getActualInstance();
    }
    /**
     * Get the actual instance of `LumaAsset`. If the actual instance is not `LumaAsset`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LumaAsset`
     * @throws ClassCastException if the instance is not `LumaAsset`
     */
    public LumaAsset getLumaAsset() throws ClassCastException {
        return (LumaAsset)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ClipAsset
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with VideoAsset
        try {
            VideoAsset.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for VideoAsset failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ImageAsset
        try {
            ImageAsset.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ImageAsset failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TitleAsset
        try {
            TitleAsset.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TitleAsset failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with HtmlAsset
        try {
            HtmlAsset.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for HtmlAsset failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AudioAsset
        try {
            AudioAsset.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AudioAsset failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with LumaAsset
        try {
            LumaAsset.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for LumaAsset failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for ClipAsset with oneOf schemas: AudioAsset, HtmlAsset, ImageAsset, LumaAsset, TitleAsset, VideoAsset. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of ClipAsset given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ClipAsset
     * @throws IOException if the JSON string is invalid with respect to ClipAsset
     */
    public static ClipAsset fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ClipAsset.class);
    }

    /**
     * Convert an instance of ClipAsset to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

