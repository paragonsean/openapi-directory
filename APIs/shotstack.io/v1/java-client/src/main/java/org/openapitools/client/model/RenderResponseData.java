/*
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.Edit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response data returned with the [RenderResponse](#tocs_renderresponse) including status and URL.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:32:51.122157-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RenderResponseData {
  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Edit data;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private BigDecimal duration;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private String owner;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private String plan;

  public static final String SERIALIZED_NAME_POSTER = "poster";
  @SerializedName(SERIALIZED_NAME_POSTER)
  private String poster;

  public static final String SERIALIZED_NAME_RENDER_TIME = "renderTime";
  @SerializedName(SERIALIZED_NAME_RENDER_TIME)
  private BigDecimal renderTime;

  /**
   * The status of the render task. &lt;ul&gt;   &lt;li&gt;&#x60;queued&#x60; - render is queued waiting to be rendered&lt;/li&gt;   &lt;li&gt;&#x60;fetching&#x60; - assets are being fetched&lt;/li&gt;   &lt;li&gt;&#x60;rendering&#x60; - the asset is being rendered&lt;/li&gt;   &lt;li&gt;&#x60;saving&#x60; - the final asset is being saved to storage&lt;/li&gt;   &lt;li&gt;&#x60;done&#x60; - the asset is ready to be downloaded&lt;/li&gt;   &lt;li&gt;&#x60;failed&#x60; - there was an error rendering the asset&lt;/li&gt; &lt;/ul&gt;
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    QUEUED("queued"),
    
    FETCHING("fetching"),
    
    RENDERING("rendering"),
    
    SAVING("saving"),
    
    DONE("done"),
    
    FAILED("failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_THUMBNAIL = "thumbnail";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL)
  private String thumbnail;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public RenderResponseData() {
  }

  public RenderResponseData created(String created) {
    this.created = created;
    return this;
  }

  /**
   * The time the render task was initially queued.
   * @return created
   */
  @javax.annotation.Nonnull
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public RenderResponseData data(Edit data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nonnull
  public Edit getData() {
    return data;
  }

  public void setData(Edit data) {
    this.data = data;
  }


  public RenderResponseData duration(BigDecimal duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The output video or audio length in seconds.
   * @return duration
   */
  @javax.annotation.Nullable
  public BigDecimal getDuration() {
    return duration;
  }

  public void setDuration(BigDecimal duration) {
    this.duration = duration;
  }


  public RenderResponseData error(String error) {
    this.error = error;
    return this;
  }

  /**
   * An error message, only displayed if an error occurred.
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public RenderResponseData id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The id of the render task in UUID format.
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public RenderResponseData owner(String owner) {
    this.owner = owner;
    return this;
  }

  /**
   * The owner id of the render task.
   * @return owner
   */
  @javax.annotation.Nonnull
  public String getOwner() {
    return owner;
  }

  public void setOwner(String owner) {
    this.owner = owner;
  }


  public RenderResponseData plan(String plan) {
    this.plan = plan;
    return this;
  }

  /**
   * The customer subscription plan.
   * @return plan
   */
  @javax.annotation.Nullable
  public String getPlan() {
    return plan;
  }

  public void setPlan(String plan) {
    this.plan = plan;
  }


  public RenderResponseData poster(String poster) {
    this.poster = poster;
    return this;
  }

  /**
   * The URL of the poster image if requested. This will only be available if status is done.
   * @return poster
   */
  @javax.annotation.Nullable
  public String getPoster() {
    return poster;
  }

  public void setPoster(String poster) {
    this.poster = poster;
  }


  public RenderResponseData renderTime(BigDecimal renderTime) {
    this.renderTime = renderTime;
    return this;
  }

  /**
   * The time taken to render the asset in milliseconds.
   * @return renderTime
   */
  @javax.annotation.Nullable
  public BigDecimal getRenderTime() {
    return renderTime;
  }

  public void setRenderTime(BigDecimal renderTime) {
    this.renderTime = renderTime;
  }


  public RenderResponseData status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the render task. &lt;ul&gt;   &lt;li&gt;&#x60;queued&#x60; - render is queued waiting to be rendered&lt;/li&gt;   &lt;li&gt;&#x60;fetching&#x60; - assets are being fetched&lt;/li&gt;   &lt;li&gt;&#x60;rendering&#x60; - the asset is being rendered&lt;/li&gt;   &lt;li&gt;&#x60;saving&#x60; - the final asset is being saved to storage&lt;/li&gt;   &lt;li&gt;&#x60;done&#x60; - the asset is ready to be downloaded&lt;/li&gt;   &lt;li&gt;&#x60;failed&#x60; - there was an error rendering the asset&lt;/li&gt; &lt;/ul&gt;
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public RenderResponseData thumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
    return this;
  }

  /**
   * The URL of the thumbnail image if requested. This will only be available if status is done.
   * @return thumbnail
   */
  @javax.annotation.Nullable
  public String getThumbnail() {
    return thumbnail;
  }

  public void setThumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
  }


  public RenderResponseData updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * The time the render status was last updated.
   * @return updated
   */
  @javax.annotation.Nonnull
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public RenderResponseData url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL of the final asset. This will only be available if status is done. This is a temporary URL and will be deleted after 24 hours. By default all assets are copied to the Shotstack hosting and CDN destination.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RenderResponseData renderResponseData = (RenderResponseData) o;
    return Objects.equals(this.created, renderResponseData.created) &&
        Objects.equals(this.data, renderResponseData.data) &&
        Objects.equals(this.duration, renderResponseData.duration) &&
        Objects.equals(this.error, renderResponseData.error) &&
        Objects.equals(this.id, renderResponseData.id) &&
        Objects.equals(this.owner, renderResponseData.owner) &&
        Objects.equals(this.plan, renderResponseData.plan) &&
        Objects.equals(this.poster, renderResponseData.poster) &&
        Objects.equals(this.renderTime, renderResponseData.renderTime) &&
        Objects.equals(this.status, renderResponseData.status) &&
        Objects.equals(this.thumbnail, renderResponseData.thumbnail) &&
        Objects.equals(this.updated, renderResponseData.updated) &&
        Objects.equals(this.url, renderResponseData.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(created, data, duration, error, id, owner, plan, poster, renderTime, status, thumbnail, updated, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RenderResponseData {\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    poster: ").append(toIndentedString(poster)).append("\n");
    sb.append("    renderTime: ").append(toIndentedString(renderTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created");
    openapiFields.add("data");
    openapiFields.add("duration");
    openapiFields.add("error");
    openapiFields.add("id");
    openapiFields.add("owner");
    openapiFields.add("plan");
    openapiFields.add("poster");
    openapiFields.add("renderTime");
    openapiFields.add("status");
    openapiFields.add("thumbnail");
    openapiFields.add("updated");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("data");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("owner");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("updated");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RenderResponseData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RenderResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RenderResponseData is not found in the empty JSON string", RenderResponseData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RenderResponseData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RenderResponseData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RenderResponseData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      // validate the required field `data`
      Edit.validateJsonElement(jsonObj.get("data"));
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("owner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      if ((jsonObj.get("plan") != null && !jsonObj.get("plan").isJsonNull()) && !jsonObj.get("plan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan").toString()));
      }
      if ((jsonObj.get("poster") != null && !jsonObj.get("poster").isJsonNull()) && !jsonObj.get("poster").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `poster` to be a primitive type in the JSON string but got `%s`", jsonObj.get("poster").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if ((jsonObj.get("thumbnail") != null && !jsonObj.get("thumbnail").isJsonNull()) && !jsonObj.get("thumbnail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnail").toString()));
      }
      if (!jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RenderResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RenderResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RenderResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RenderResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<RenderResponseData>() {
           @Override
           public void write(JsonWriter out, RenderResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RenderResponseData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RenderResponseData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RenderResponseData
   * @throws IOException if the JSON string is invalid with respect to RenderResponseData
   */
  public static RenderResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RenderResponseData.class);
  }

  /**
   * Convert an instance of RenderResponseData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

