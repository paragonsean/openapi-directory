/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssetResponseAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssetResponseAttributes::OAIAssetResponseAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssetResponseAttributes::OAIAssetResponseAttributes() {
    this->initializeModel();
}

OAIAssetResponseAttributes::~OAIAssetResponseAttributes() {}

void OAIAssetResponseAttributes::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_render_id_isSet = false;
    m_render_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIAssetResponseAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssetResponseAttributes::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_render_id_isValid = ::OpenAPI::fromJsonValue(m_render_id, json[QString("renderId")]);
    m_render_id_isSet = !json[QString("renderId")].isNull() && m_render_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIAssetResponseAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssetResponseAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_render_id_isSet) {
        obj.insert(QString("renderId"), ::OpenAPI::toJsonValue(m_render_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIAssetResponseAttributes::getCreated() const {
    return m_created;
}
void OAIAssetResponseAttributes::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIAssetResponseAttributes::is_created_Set() const{
    return m_created_isSet;
}

bool OAIAssetResponseAttributes::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIAssetResponseAttributes::getFilename() const {
    return m_filename;
}
void OAIAssetResponseAttributes::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIAssetResponseAttributes::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIAssetResponseAttributes::is_filename_Valid() const{
    return m_filename_isValid;
}

QString OAIAssetResponseAttributes::getId() const {
    return m_id;
}
void OAIAssetResponseAttributes::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAssetResponseAttributes::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAssetResponseAttributes::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAssetResponseAttributes::getOwner() const {
    return m_owner;
}
void OAIAssetResponseAttributes::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIAssetResponseAttributes::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIAssetResponseAttributes::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIAssetResponseAttributes::getRegion() const {
    return m_region;
}
void OAIAssetResponseAttributes::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIAssetResponseAttributes::is_region_Set() const{
    return m_region_isSet;
}

bool OAIAssetResponseAttributes::is_region_Valid() const{
    return m_region_isValid;
}

QString OAIAssetResponseAttributes::getRenderId() const {
    return m_render_id;
}
void OAIAssetResponseAttributes::setRenderId(const QString &render_id) {
    m_render_id = render_id;
    m_render_id_isSet = true;
}

bool OAIAssetResponseAttributes::is_render_id_Set() const{
    return m_render_id_isSet;
}

bool OAIAssetResponseAttributes::is_render_id_Valid() const{
    return m_render_id_isValid;
}

QString OAIAssetResponseAttributes::getStatus() const {
    return m_status;
}
void OAIAssetResponseAttributes::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAssetResponseAttributes::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAssetResponseAttributes::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIAssetResponseAttributes::getUpdated() const {
    return m_updated;
}
void OAIAssetResponseAttributes::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIAssetResponseAttributes::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIAssetResponseAttributes::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIAssetResponseAttributes::getUrl() const {
    return m_url;
}
void OAIAssetResponseAttributes::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAssetResponseAttributes::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAssetResponseAttributes::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIAssetResponseAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_render_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssetResponseAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
