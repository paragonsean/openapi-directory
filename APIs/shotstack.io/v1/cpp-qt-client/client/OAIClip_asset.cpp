/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClip_asset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClip_asset::OAIClip_asset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClip_asset::OAIClip_asset() {
    this->initializeModel();
}

OAIClip_asset::~OAIClip_asset() {}

void OAIClip_asset::initializeModel() {

    m_crop_isSet = false;
    m_crop_isValid = false;

    m_src_isSet = false;
    m_src_isValid = false;

    m_trim_isSet = false;
    m_trim_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;

    m_background_isSet = false;
    m_background_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_css_isSet = false;
    m_css_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_effect_isSet = false;
    m_effect_isValid = false;
}

void OAIClip_asset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClip_asset::fromJsonObject(QJsonObject json) {

    m_crop_isValid = ::OpenAPI::fromJsonValue(m_crop, json[QString("crop")]);
    m_crop_isSet = !json[QString("crop")].isNull() && m_crop_isValid;

    m_src_isValid = ::OpenAPI::fromJsonValue(m_src, json[QString("src")]);
    m_src_isSet = !json[QString("src")].isNull() && m_src_isValid;

    m_trim_isValid = ::OpenAPI::fromJsonValue(m_trim, json[QString("trim")]);
    m_trim_isSet = !json[QString("trim")].isNull() && m_trim_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(m_volume, json[QString("volume")]);
    m_volume_isSet = !json[QString("volume")].isNull() && m_volume_isValid;

    m_background_isValid = ::OpenAPI::fromJsonValue(m_background, json[QString("background")]);
    m_background_isSet = !json[QString("background")].isNull() && m_background_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("style")]);
    m_style_isSet = !json[QString("style")].isNull() && m_style_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_css_isValid = ::OpenAPI::fromJsonValue(m_css, json[QString("css")]);
    m_css_isSet = !json[QString("css")].isNull() && m_css_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;

    m_effect_isValid = ::OpenAPI::fromJsonValue(m_effect, json[QString("effect")]);
    m_effect_isSet = !json[QString("effect")].isNull() && m_effect_isValid;
}

QString OAIClip_asset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClip_asset::asJsonObject() const {
    QJsonObject obj;
    if (m_crop.isSet()) {
        obj.insert(QString("crop"), ::OpenAPI::toJsonValue(m_crop));
    }
    if (m_src_isSet) {
        obj.insert(QString("src"), ::OpenAPI::toJsonValue(m_src));
    }
    if (m_trim_isSet) {
        obj.insert(QString("trim"), ::OpenAPI::toJsonValue(m_trim));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_volume_isSet) {
        obj.insert(QString("volume"), ::OpenAPI::toJsonValue(m_volume));
    }
    if (m_background_isSet) {
        obj.insert(QString("background"), ::OpenAPI::toJsonValue(m_background));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_offset.isSet()) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_style_isSet) {
        obj.insert(QString("style"), ::OpenAPI::toJsonValue(m_style));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_css_isSet) {
        obj.insert(QString("css"), ::OpenAPI::toJsonValue(m_css));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_effect_isSet) {
        obj.insert(QString("effect"), ::OpenAPI::toJsonValue(m_effect));
    }
    return obj;
}

OAICrop OAIClip_asset::getCrop() const {
    return m_crop;
}
void OAIClip_asset::setCrop(const OAICrop &crop) {
    m_crop = crop;
    m_crop_isSet = true;
}

bool OAIClip_asset::is_crop_Set() const{
    return m_crop_isSet;
}

bool OAIClip_asset::is_crop_Valid() const{
    return m_crop_isValid;
}

QString OAIClip_asset::getSrc() const {
    return m_src;
}
void OAIClip_asset::setSrc(const QString &src) {
    m_src = src;
    m_src_isSet = true;
}

bool OAIClip_asset::is_src_Set() const{
    return m_src_isSet;
}

bool OAIClip_asset::is_src_Valid() const{
    return m_src_isValid;
}

double OAIClip_asset::getTrim() const {
    return m_trim;
}
void OAIClip_asset::setTrim(const double &trim) {
    m_trim = trim;
    m_trim_isSet = true;
}

bool OAIClip_asset::is_trim_Set() const{
    return m_trim_isSet;
}

bool OAIClip_asset::is_trim_Valid() const{
    return m_trim_isValid;
}

QString OAIClip_asset::getType() const {
    return m_type;
}
void OAIClip_asset::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIClip_asset::is_type_Set() const{
    return m_type_isSet;
}

bool OAIClip_asset::is_type_Valid() const{
    return m_type_isValid;
}

double OAIClip_asset::getVolume() const {
    return m_volume;
}
void OAIClip_asset::setVolume(const double &volume) {
    m_volume = volume;
    m_volume_isSet = true;
}

bool OAIClip_asset::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAIClip_asset::is_volume_Valid() const{
    return m_volume_isValid;
}

QString OAIClip_asset::getBackground() const {
    return m_background;
}
void OAIClip_asset::setBackground(const QString &background) {
    m_background = background;
    m_background_isSet = true;
}

bool OAIClip_asset::is_background_Set() const{
    return m_background_isSet;
}

bool OAIClip_asset::is_background_Valid() const{
    return m_background_isValid;
}

QString OAIClip_asset::getColor() const {
    return m_color;
}
void OAIClip_asset::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIClip_asset::is_color_Set() const{
    return m_color_isSet;
}

bool OAIClip_asset::is_color_Valid() const{
    return m_color_isValid;
}

OAIOffset OAIClip_asset::getOffset() const {
    return m_offset;
}
void OAIClip_asset::setOffset(const OAIOffset &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIClip_asset::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIClip_asset::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAIClip_asset::getPosition() const {
    return m_position;
}
void OAIClip_asset::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIClip_asset::is_position_Set() const{
    return m_position_isSet;
}

bool OAIClip_asset::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIClip_asset::getSize() const {
    return m_size;
}
void OAIClip_asset::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIClip_asset::is_size_Set() const{
    return m_size_isSet;
}

bool OAIClip_asset::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIClip_asset::getStyle() const {
    return m_style;
}
void OAIClip_asset::setStyle(const QString &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAIClip_asset::is_style_Set() const{
    return m_style_isSet;
}

bool OAIClip_asset::is_style_Valid() const{
    return m_style_isValid;
}

QString OAIClip_asset::getText() const {
    return m_text;
}
void OAIClip_asset::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIClip_asset::is_text_Set() const{
    return m_text_isSet;
}

bool OAIClip_asset::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIClip_asset::getCss() const {
    return m_css;
}
void OAIClip_asset::setCss(const QString &css) {
    m_css = css;
    m_css_isSet = true;
}

bool OAIClip_asset::is_css_Set() const{
    return m_css_isSet;
}

bool OAIClip_asset::is_css_Valid() const{
    return m_css_isValid;
}

qint32 OAIClip_asset::getHeight() const {
    return m_height;
}
void OAIClip_asset::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIClip_asset::is_height_Set() const{
    return m_height_isSet;
}

bool OAIClip_asset::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIClip_asset::getHtml() const {
    return m_html;
}
void OAIClip_asset::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIClip_asset::is_html_Set() const{
    return m_html_isSet;
}

bool OAIClip_asset::is_html_Valid() const{
    return m_html_isValid;
}

qint32 OAIClip_asset::getWidth() const {
    return m_width;
}
void OAIClip_asset::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIClip_asset::is_width_Set() const{
    return m_width_isSet;
}

bool OAIClip_asset::is_width_Valid() const{
    return m_width_isValid;
}

QString OAIClip_asset::getEffect() const {
    return m_effect;
}
void OAIClip_asset::setEffect(const QString &effect) {
    m_effect = effect;
    m_effect_isSet = true;
}

bool OAIClip_asset::is_effect_Set() const{
    return m_effect_isSet;
}

bool OAIClip_asset::is_effect_Valid() const{
    return m_effect_isValid;
}

bool OAIClip_asset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crop.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_src_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_css_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effect_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClip_asset::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_src_isValid && m_type_isValid && m_text_isValid && m_html_isValid && true;
}

} // namespace OpenAPI
