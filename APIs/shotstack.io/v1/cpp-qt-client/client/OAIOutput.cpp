/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutput::OAIOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutput::OAIOutput() {
    this->initializeModel();
}

OAIOutput::~OAIOutput() {}

void OAIOutput::initializeModel() {

    m_aspect_ratio_isSet = false;
    m_aspect_ratio_isValid = false;

    m_destinations_isSet = false;
    m_destinations_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_fps_isSet = false;
    m_fps_isValid = false;

    m_poster_isSet = false;
    m_poster_isValid = false;

    m_quality_isSet = false;
    m_quality_isValid = false;

    m_range_isSet = false;
    m_range_isValid = false;

    m_resolution_isSet = false;
    m_resolution_isValid = false;

    m_scale_to_isSet = false;
    m_scale_to_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;
}

void OAIOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutput::fromJsonObject(QJsonObject json) {

    m_aspect_ratio_isValid = ::OpenAPI::fromJsonValue(m_aspect_ratio, json[QString("aspectRatio")]);
    m_aspect_ratio_isSet = !json[QString("aspectRatio")].isNull() && m_aspect_ratio_isValid;

    m_destinations_isValid = ::OpenAPI::fromJsonValue(m_destinations, json[QString("destinations")]);
    m_destinations_isSet = !json[QString("destinations")].isNull() && m_destinations_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_fps_isValid = ::OpenAPI::fromJsonValue(m_fps, json[QString("fps")]);
    m_fps_isSet = !json[QString("fps")].isNull() && m_fps_isValid;

    m_poster_isValid = ::OpenAPI::fromJsonValue(m_poster, json[QString("poster")]);
    m_poster_isSet = !json[QString("poster")].isNull() && m_poster_isValid;

    m_quality_isValid = ::OpenAPI::fromJsonValue(m_quality, json[QString("quality")]);
    m_quality_isSet = !json[QString("quality")].isNull() && m_quality_isValid;

    m_range_isValid = ::OpenAPI::fromJsonValue(m_range, json[QString("range")]);
    m_range_isSet = !json[QString("range")].isNull() && m_range_isValid;

    m_resolution_isValid = ::OpenAPI::fromJsonValue(m_resolution, json[QString("resolution")]);
    m_resolution_isSet = !json[QString("resolution")].isNull() && m_resolution_isValid;

    m_scale_to_isValid = ::OpenAPI::fromJsonValue(m_scale_to, json[QString("scaleTo")]);
    m_scale_to_isSet = !json[QString("scaleTo")].isNull() && m_scale_to_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;
}

QString OAIOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_aspect_ratio_isSet) {
        obj.insert(QString("aspectRatio"), ::OpenAPI::toJsonValue(m_aspect_ratio));
    }
    if (m_destinations.size() > 0) {
        obj.insert(QString("destinations"), ::OpenAPI::toJsonValue(m_destinations));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_fps_isSet) {
        obj.insert(QString("fps"), ::OpenAPI::toJsonValue(m_fps));
    }
    if (m_poster.isSet()) {
        obj.insert(QString("poster"), ::OpenAPI::toJsonValue(m_poster));
    }
    if (m_quality_isSet) {
        obj.insert(QString("quality"), ::OpenAPI::toJsonValue(m_quality));
    }
    if (m_range.isSet()) {
        obj.insert(QString("range"), ::OpenAPI::toJsonValue(m_range));
    }
    if (m_resolution_isSet) {
        obj.insert(QString("resolution"), ::OpenAPI::toJsonValue(m_resolution));
    }
    if (m_scale_to_isSet) {
        obj.insert(QString("scaleTo"), ::OpenAPI::toJsonValue(m_scale_to));
    }
    if (m_size.isSet()) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_thumbnail.isSet()) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    return obj;
}

QString OAIOutput::getAspectRatio() const {
    return m_aspect_ratio;
}
void OAIOutput::setAspectRatio(const QString &aspect_ratio) {
    m_aspect_ratio = aspect_ratio;
    m_aspect_ratio_isSet = true;
}

bool OAIOutput::is_aspect_ratio_Set() const{
    return m_aspect_ratio_isSet;
}

bool OAIOutput::is_aspect_ratio_Valid() const{
    return m_aspect_ratio_isValid;
}

QList<OAIOutput_destinations_inner> OAIOutput::getDestinations() const {
    return m_destinations;
}
void OAIOutput::setDestinations(const QList<OAIOutput_destinations_inner> &destinations) {
    m_destinations = destinations;
    m_destinations_isSet = true;
}

bool OAIOutput::is_destinations_Set() const{
    return m_destinations_isSet;
}

bool OAIOutput::is_destinations_Valid() const{
    return m_destinations_isValid;
}

QString OAIOutput::getFormat() const {
    return m_format;
}
void OAIOutput::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIOutput::is_format_Set() const{
    return m_format_isSet;
}

bool OAIOutput::is_format_Valid() const{
    return m_format_isValid;
}

qint32 OAIOutput::getFps() const {
    return m_fps;
}
void OAIOutput::setFps(const qint32 &fps) {
    m_fps = fps;
    m_fps_isSet = true;
}

bool OAIOutput::is_fps_Set() const{
    return m_fps_isSet;
}

bool OAIOutput::is_fps_Valid() const{
    return m_fps_isValid;
}

OAIPoster OAIOutput::getPoster() const {
    return m_poster;
}
void OAIOutput::setPoster(const OAIPoster &poster) {
    m_poster = poster;
    m_poster_isSet = true;
}

bool OAIOutput::is_poster_Set() const{
    return m_poster_isSet;
}

bool OAIOutput::is_poster_Valid() const{
    return m_poster_isValid;
}

QString OAIOutput::getQuality() const {
    return m_quality;
}
void OAIOutput::setQuality(const QString &quality) {
    m_quality = quality;
    m_quality_isSet = true;
}

bool OAIOutput::is_quality_Set() const{
    return m_quality_isSet;
}

bool OAIOutput::is_quality_Valid() const{
    return m_quality_isValid;
}

OAIRange OAIOutput::getRange() const {
    return m_range;
}
void OAIOutput::setRange(const OAIRange &range) {
    m_range = range;
    m_range_isSet = true;
}

bool OAIOutput::is_range_Set() const{
    return m_range_isSet;
}

bool OAIOutput::is_range_Valid() const{
    return m_range_isValid;
}

QString OAIOutput::getResolution() const {
    return m_resolution;
}
void OAIOutput::setResolution(const QString &resolution) {
    m_resolution = resolution;
    m_resolution_isSet = true;
}

bool OAIOutput::is_resolution_Set() const{
    return m_resolution_isSet;
}

bool OAIOutput::is_resolution_Valid() const{
    return m_resolution_isValid;
}

QString OAIOutput::getScaleTo() const {
    return m_scale_to;
}
void OAIOutput::setScaleTo(const QString &scale_to) {
    m_scale_to = scale_to;
    m_scale_to_isSet = true;
}

bool OAIOutput::is_scale_to_Set() const{
    return m_scale_to_isSet;
}

bool OAIOutput::is_scale_to_Valid() const{
    return m_scale_to_isValid;
}

OAISize OAIOutput::getSize() const {
    return m_size;
}
void OAIOutput::setSize(const OAISize &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIOutput::is_size_Set() const{
    return m_size_isSet;
}

bool OAIOutput::is_size_Valid() const{
    return m_size_isValid;
}

OAIThumbnail OAIOutput::getThumbnail() const {
    return m_thumbnail;
}
void OAIOutput::setThumbnail(const OAIThumbnail &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAIOutput::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAIOutput::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

bool OAIOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspect_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destinations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_format_isValid && true;
}

} // namespace OpenAPI
