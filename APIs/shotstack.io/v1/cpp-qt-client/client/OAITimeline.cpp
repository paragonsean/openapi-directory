/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeline::OAITimeline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeline::OAITimeline() {
    this->initializeModel();
}

OAITimeline::~OAITimeline() {}

void OAITimeline::initializeModel() {

    m_background_isSet = false;
    m_background_isValid = false;

    m_cache_isSet = false;
    m_cache_isValid = false;

    m_fonts_isSet = false;
    m_fonts_isValid = false;

    m_soundtrack_isSet = false;
    m_soundtrack_isValid = false;

    m_tracks_isSet = false;
    m_tracks_isValid = false;
}

void OAITimeline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeline::fromJsonObject(QJsonObject json) {

    m_background_isValid = ::OpenAPI::fromJsonValue(m_background, json[QString("background")]);
    m_background_isSet = !json[QString("background")].isNull() && m_background_isValid;

    m_cache_isValid = ::OpenAPI::fromJsonValue(m_cache, json[QString("cache")]);
    m_cache_isSet = !json[QString("cache")].isNull() && m_cache_isValid;

    m_fonts_isValid = ::OpenAPI::fromJsonValue(m_fonts, json[QString("fonts")]);
    m_fonts_isSet = !json[QString("fonts")].isNull() && m_fonts_isValid;

    m_soundtrack_isValid = ::OpenAPI::fromJsonValue(m_soundtrack, json[QString("soundtrack")]);
    m_soundtrack_isSet = !json[QString("soundtrack")].isNull() && m_soundtrack_isValid;

    m_tracks_isValid = ::OpenAPI::fromJsonValue(m_tracks, json[QString("tracks")]);
    m_tracks_isSet = !json[QString("tracks")].isNull() && m_tracks_isValid;
}

QString OAITimeline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeline::asJsonObject() const {
    QJsonObject obj;
    if (m_background_isSet) {
        obj.insert(QString("background"), ::OpenAPI::toJsonValue(m_background));
    }
    if (m_cache_isSet) {
        obj.insert(QString("cache"), ::OpenAPI::toJsonValue(m_cache));
    }
    if (m_fonts.size() > 0) {
        obj.insert(QString("fonts"), ::OpenAPI::toJsonValue(m_fonts));
    }
    if (m_soundtrack.isSet()) {
        obj.insert(QString("soundtrack"), ::OpenAPI::toJsonValue(m_soundtrack));
    }
    if (m_tracks.size() > 0) {
        obj.insert(QString("tracks"), ::OpenAPI::toJsonValue(m_tracks));
    }
    return obj;
}

QString OAITimeline::getBackground() const {
    return m_background;
}
void OAITimeline::setBackground(const QString &background) {
    m_background = background;
    m_background_isSet = true;
}

bool OAITimeline::is_background_Set() const{
    return m_background_isSet;
}

bool OAITimeline::is_background_Valid() const{
    return m_background_isValid;
}

bool OAITimeline::isCache() const {
    return m_cache;
}
void OAITimeline::setCache(const bool &cache) {
    m_cache = cache;
    m_cache_isSet = true;
}

bool OAITimeline::is_cache_Set() const{
    return m_cache_isSet;
}

bool OAITimeline::is_cache_Valid() const{
    return m_cache_isValid;
}

QList<OAIFont> OAITimeline::getFonts() const {
    return m_fonts;
}
void OAITimeline::setFonts(const QList<OAIFont> &fonts) {
    m_fonts = fonts;
    m_fonts_isSet = true;
}

bool OAITimeline::is_fonts_Set() const{
    return m_fonts_isSet;
}

bool OAITimeline::is_fonts_Valid() const{
    return m_fonts_isValid;
}

OAISoundtrack OAITimeline::getSoundtrack() const {
    return m_soundtrack;
}
void OAITimeline::setSoundtrack(const OAISoundtrack &soundtrack) {
    m_soundtrack = soundtrack;
    m_soundtrack_isSet = true;
}

bool OAITimeline::is_soundtrack_Set() const{
    return m_soundtrack_isSet;
}

bool OAITimeline::is_soundtrack_Valid() const{
    return m_soundtrack_isValid;
}

QList<OAITrack> OAITimeline::getTracks() const {
    return m_tracks;
}
void OAITimeline::setTracks(const QList<OAITrack> &tracks) {
    m_tracks = tracks;
    m_tracks_isSet = true;
}

bool OAITimeline::is_tracks_Set() const{
    return m_tracks_isSet;
}

bool OAITimeline::is_tracks_Valid() const{
    return m_tracks_isValid;
}

bool OAITimeline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fonts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_soundtrack.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeline::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tracks_isValid && true;
}

} // namespace OpenAPI
