/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITitleAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITitleAsset::OAITitleAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITitleAsset::OAITitleAsset() {
    this->initializeModel();
}

OAITitleAsset::~OAITitleAsset() {}

void OAITitleAsset::initializeModel() {

    m_background_isSet = false;
    m_background_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_style_isSet = false;
    m_style_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAITitleAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITitleAsset::fromJsonObject(QJsonObject json) {

    m_background_isValid = ::OpenAPI::fromJsonValue(m_background, json[QString("background")]);
    m_background_isSet = !json[QString("background")].isNull() && m_background_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_style_isValid = ::OpenAPI::fromJsonValue(m_style, json[QString("style")]);
    m_style_isSet = !json[QString("style")].isNull() && m_style_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAITitleAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITitleAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_background_isSet) {
        obj.insert(QString("background"), ::OpenAPI::toJsonValue(m_background));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_offset.isSet()) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_style_isSet) {
        obj.insert(QString("style"), ::OpenAPI::toJsonValue(m_style));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAITitleAsset::getBackground() const {
    return m_background;
}
void OAITitleAsset::setBackground(const QString &background) {
    m_background = background;
    m_background_isSet = true;
}

bool OAITitleAsset::is_background_Set() const{
    return m_background_isSet;
}

bool OAITitleAsset::is_background_Valid() const{
    return m_background_isValid;
}

QString OAITitleAsset::getColor() const {
    return m_color;
}
void OAITitleAsset::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAITitleAsset::is_color_Set() const{
    return m_color_isSet;
}

bool OAITitleAsset::is_color_Valid() const{
    return m_color_isValid;
}

OAIOffset OAITitleAsset::getOffset() const {
    return m_offset;
}
void OAITitleAsset::setOffset(const OAIOffset &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAITitleAsset::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAITitleAsset::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAITitleAsset::getPosition() const {
    return m_position;
}
void OAITitleAsset::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAITitleAsset::is_position_Set() const{
    return m_position_isSet;
}

bool OAITitleAsset::is_position_Valid() const{
    return m_position_isValid;
}

QString OAITitleAsset::getSize() const {
    return m_size;
}
void OAITitleAsset::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAITitleAsset::is_size_Set() const{
    return m_size_isSet;
}

bool OAITitleAsset::is_size_Valid() const{
    return m_size_isValid;
}

QString OAITitleAsset::getStyle() const {
    return m_style;
}
void OAITitleAsset::setStyle(const QString &style) {
    m_style = style;
    m_style_isSet = true;
}

bool OAITitleAsset::is_style_Set() const{
    return m_style_isSet;
}

bool OAITitleAsset::is_style_Valid() const{
    return m_style_isValid;
}

QString OAITitleAsset::getText() const {
    return m_text;
}
void OAITitleAsset::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAITitleAsset::is_text_Set() const{
    return m_text_isSet;
}

bool OAITitleAsset::is_text_Valid() const{
    return m_text_isValid;
}

QString OAITitleAsset::getType() const {
    return m_type;
}
void OAITitleAsset::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITitleAsset::is_type_Set() const{
    return m_type_isSet;
}

bool OAITitleAsset::is_type_Valid() const{
    return m_type_isValid;
}

bool OAITitleAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_style_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITitleAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_text_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
