/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIClip.h
 *
 * A clip is a container for a specific type of asset, i.e. a title, image, video, audio or html. You use a Clip to define when an asset will display on the timeline, how long it will play for and transitions, filters and effects to apply to it.
 */

#ifndef OAIClip_H
#define OAIClip_H

#include <QJsonObject>

#include "OAIClip_asset.h"
#include "OAIOffset.h"
#include "OAITransition.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIClip_asset;
class OAIOffset;
class OAITransition;

class OAIClip : public OAIObject {
public:
    OAIClip();
    OAIClip(QString json);
    ~OAIClip() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIClip_asset getAsset() const;
    void setAsset(const OAIClip_asset &asset);
    bool is_asset_Set() const;
    bool is_asset_Valid() const;

    QString getEffect() const;
    void setEffect(const QString &effect);
    bool is_effect_Set() const;
    bool is_effect_Valid() const;

    QString getFilter() const;
    void setFilter(const QString &filter);
    bool is_filter_Set() const;
    bool is_filter_Valid() const;

    QString getFit() const;
    void setFit(const QString &fit);
    bool is_fit_Set() const;
    bool is_fit_Valid() const;

    double getLength() const;
    void setLength(const double &length);
    bool is_length_Set() const;
    bool is_length_Valid() const;

    OAIOffset getOffset() const;
    void setOffset(const OAIOffset &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    double getOpacity() const;
    void setOpacity(const double &opacity);
    bool is_opacity_Set() const;
    bool is_opacity_Valid() const;

    QString getPosition() const;
    void setPosition(const QString &position);
    bool is_position_Set() const;
    bool is_position_Valid() const;

    double getScale() const;
    void setScale(const double &scale);
    bool is_scale_Set() const;
    bool is_scale_Valid() const;

    double getStart() const;
    void setStart(const double &start);
    bool is_start_Set() const;
    bool is_start_Valid() const;

    OAITransition getTransition() const;
    void setTransition(const OAITransition &transition);
    bool is_transition_Set() const;
    bool is_transition_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIClip_asset m_asset;
    bool m_asset_isSet;
    bool m_asset_isValid;

    QString m_effect;
    bool m_effect_isSet;
    bool m_effect_isValid;

    QString m_filter;
    bool m_filter_isSet;
    bool m_filter_isValid;

    QString m_fit;
    bool m_fit_isSet;
    bool m_fit_isValid;

    double m_length;
    bool m_length_isSet;
    bool m_length_isValid;

    OAIOffset m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    double m_opacity;
    bool m_opacity_isSet;
    bool m_opacity_isValid;

    QString m_position;
    bool m_position_isSet;
    bool m_position_isValid;

    double m_scale;
    bool m_scale_isSet;
    bool m_scale_isValid;

    double m_start;
    bool m_start_isSet;
    bool m_start_isValid;

    OAITransition m_transition;
    bool m_transition_isSet;
    bool m_transition_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIClip)

#endif // OAIClip_H
