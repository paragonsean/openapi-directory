/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClip.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClip::OAIClip(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClip::OAIClip() {
    this->initializeModel();
}

OAIClip::~OAIClip() {}

void OAIClip::initializeModel() {

    m_asset_isSet = false;
    m_asset_isValid = false;

    m_effect_isSet = false;
    m_effect_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_fit_isSet = false;
    m_fit_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_opacity_isSet = false;
    m_opacity_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_scale_isSet = false;
    m_scale_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_transition_isSet = false;
    m_transition_isValid = false;
}

void OAIClip::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClip::fromJsonObject(QJsonObject json) {

    m_asset_isValid = ::OpenAPI::fromJsonValue(m_asset, json[QString("asset")]);
    m_asset_isSet = !json[QString("asset")].isNull() && m_asset_isValid;

    m_effect_isValid = ::OpenAPI::fromJsonValue(m_effect, json[QString("effect")]);
    m_effect_isSet = !json[QString("effect")].isNull() && m_effect_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_fit_isValid = ::OpenAPI::fromJsonValue(m_fit, json[QString("fit")]);
    m_fit_isSet = !json[QString("fit")].isNull() && m_fit_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_opacity_isValid = ::OpenAPI::fromJsonValue(m_opacity, json[QString("opacity")]);
    m_opacity_isSet = !json[QString("opacity")].isNull() && m_opacity_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_scale_isValid = ::OpenAPI::fromJsonValue(m_scale, json[QString("scale")]);
    m_scale_isSet = !json[QString("scale")].isNull() && m_scale_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_transition_isValid = ::OpenAPI::fromJsonValue(m_transition, json[QString("transition")]);
    m_transition_isSet = !json[QString("transition")].isNull() && m_transition_isValid;
}

QString OAIClip::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClip::asJsonObject() const {
    QJsonObject obj;
    if (m_asset.isSet()) {
        obj.insert(QString("asset"), ::OpenAPI::toJsonValue(m_asset));
    }
    if (m_effect_isSet) {
        obj.insert(QString("effect"), ::OpenAPI::toJsonValue(m_effect));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_fit_isSet) {
        obj.insert(QString("fit"), ::OpenAPI::toJsonValue(m_fit));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_offset.isSet()) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_opacity_isSet) {
        obj.insert(QString("opacity"), ::OpenAPI::toJsonValue(m_opacity));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_scale_isSet) {
        obj.insert(QString("scale"), ::OpenAPI::toJsonValue(m_scale));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_transition.isSet()) {
        obj.insert(QString("transition"), ::OpenAPI::toJsonValue(m_transition));
    }
    return obj;
}

OAIClip_asset OAIClip::getAsset() const {
    return m_asset;
}
void OAIClip::setAsset(const OAIClip_asset &asset) {
    m_asset = asset;
    m_asset_isSet = true;
}

bool OAIClip::is_asset_Set() const{
    return m_asset_isSet;
}

bool OAIClip::is_asset_Valid() const{
    return m_asset_isValid;
}

QString OAIClip::getEffect() const {
    return m_effect;
}
void OAIClip::setEffect(const QString &effect) {
    m_effect = effect;
    m_effect_isSet = true;
}

bool OAIClip::is_effect_Set() const{
    return m_effect_isSet;
}

bool OAIClip::is_effect_Valid() const{
    return m_effect_isValid;
}

QString OAIClip::getFilter() const {
    return m_filter;
}
void OAIClip::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIClip::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIClip::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIClip::getFit() const {
    return m_fit;
}
void OAIClip::setFit(const QString &fit) {
    m_fit = fit;
    m_fit_isSet = true;
}

bool OAIClip::is_fit_Set() const{
    return m_fit_isSet;
}

bool OAIClip::is_fit_Valid() const{
    return m_fit_isValid;
}

double OAIClip::getLength() const {
    return m_length;
}
void OAIClip::setLength(const double &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIClip::is_length_Set() const{
    return m_length_isSet;
}

bool OAIClip::is_length_Valid() const{
    return m_length_isValid;
}

OAIOffset OAIClip::getOffset() const {
    return m_offset;
}
void OAIClip::setOffset(const OAIOffset &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIClip::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIClip::is_offset_Valid() const{
    return m_offset_isValid;
}

double OAIClip::getOpacity() const {
    return m_opacity;
}
void OAIClip::setOpacity(const double &opacity) {
    m_opacity = opacity;
    m_opacity_isSet = true;
}

bool OAIClip::is_opacity_Set() const{
    return m_opacity_isSet;
}

bool OAIClip::is_opacity_Valid() const{
    return m_opacity_isValid;
}

QString OAIClip::getPosition() const {
    return m_position;
}
void OAIClip::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIClip::is_position_Set() const{
    return m_position_isSet;
}

bool OAIClip::is_position_Valid() const{
    return m_position_isValid;
}

double OAIClip::getScale() const {
    return m_scale;
}
void OAIClip::setScale(const double &scale) {
    m_scale = scale;
    m_scale_isSet = true;
}

bool OAIClip::is_scale_Set() const{
    return m_scale_isSet;
}

bool OAIClip::is_scale_Valid() const{
    return m_scale_isValid;
}

double OAIClip::getStart() const {
    return m_start;
}
void OAIClip::setStart(const double &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIClip::is_start_Set() const{
    return m_start_isSet;
}

bool OAIClip::is_start_Valid() const{
    return m_start_isValid;
}

OAITransition OAIClip::getTransition() const {
    return m_transition;
}
void OAIClip::setTransition(const OAITransition &transition) {
    m_transition = transition;
    m_transition_isSet = true;
}

bool OAIClip::is_transition_Set() const{
    return m_transition_isSet;
}

bool OAIClip::is_transition_Valid() const{
    return m_transition_isValid;
}

bool OAIClip::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_effect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_opacity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transition.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClip::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_asset_isValid && m_length_isValid && m_start_isValid && true;
}

} // namespace OpenAPI
