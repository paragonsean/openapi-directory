/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEdit.h
 *
 * An edit defines the arrangement of a video on a timeline, an audio edit or an image design and the output format.
 */

#ifndef OAIEdit_H
#define OAIEdit_H

#include <QJsonObject>

#include "OAIOutput.h"
#include "OAITimeline.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOutput;
class OAITimeline;

class OAIEdit : public OAIObject {
public:
    OAIEdit();
    OAIEdit(QString json);
    ~OAIEdit() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCallback() const;
    void setCallback(const QString &callback);
    bool is_callback_Set() const;
    bool is_callback_Valid() const;

    QString getDisk() const;
    void setDisk(const QString &disk);
    bool is_disk_Set() const;
    bool is_disk_Valid() const;

    OAIOutput getOutput() const;
    void setOutput(const OAIOutput &output);
    bool is_output_Set() const;
    bool is_output_Valid() const;

    OAITimeline getTimeline() const;
    void setTimeline(const OAITimeline &timeline);
    bool is_timeline_Set() const;
    bool is_timeline_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_callback;
    bool m_callback_isSet;
    bool m_callback_isValid;

    QString m_disk;
    bool m_disk_isSet;
    bool m_disk_isValid;

    OAIOutput m_output;
    bool m_output_isSet;
    bool m_output_isValid;

    OAITimeline m_timeline;
    bool m_timeline_isSet;
    bool m_timeline_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEdit)

#endif // OAIEdit_H
