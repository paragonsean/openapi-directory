/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHtmlAsset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHtmlAsset::OAIHtmlAsset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHtmlAsset::OAIHtmlAsset() {
    this->initializeModel();
}

OAIHtmlAsset::~OAIHtmlAsset() {}

void OAIHtmlAsset::initializeModel() {

    m_background_isSet = false;
    m_background_isValid = false;

    m_css_isSet = false;
    m_css_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIHtmlAsset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHtmlAsset::fromJsonObject(QJsonObject json) {

    m_background_isValid = ::OpenAPI::fromJsonValue(m_background, json[QString("background")]);
    m_background_isSet = !json[QString("background")].isNull() && m_background_isValid;

    m_css_isValid = ::OpenAPI::fromJsonValue(m_css, json[QString("css")]);
    m_css_isSet = !json[QString("css")].isNull() && m_css_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIHtmlAsset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHtmlAsset::asJsonObject() const {
    QJsonObject obj;
    if (m_background_isSet) {
        obj.insert(QString("background"), ::OpenAPI::toJsonValue(m_background));
    }
    if (m_css_isSet) {
        obj.insert(QString("css"), ::OpenAPI::toJsonValue(m_css));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIHtmlAsset::getBackground() const {
    return m_background;
}
void OAIHtmlAsset::setBackground(const QString &background) {
    m_background = background;
    m_background_isSet = true;
}

bool OAIHtmlAsset::is_background_Set() const{
    return m_background_isSet;
}

bool OAIHtmlAsset::is_background_Valid() const{
    return m_background_isValid;
}

QString OAIHtmlAsset::getCss() const {
    return m_css;
}
void OAIHtmlAsset::setCss(const QString &css) {
    m_css = css;
    m_css_isSet = true;
}

bool OAIHtmlAsset::is_css_Set() const{
    return m_css_isSet;
}

bool OAIHtmlAsset::is_css_Valid() const{
    return m_css_isValid;
}

qint32 OAIHtmlAsset::getHeight() const {
    return m_height;
}
void OAIHtmlAsset::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIHtmlAsset::is_height_Set() const{
    return m_height_isSet;
}

bool OAIHtmlAsset::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIHtmlAsset::getHtml() const {
    return m_html;
}
void OAIHtmlAsset::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIHtmlAsset::is_html_Set() const{
    return m_html_isSet;
}

bool OAIHtmlAsset::is_html_Valid() const{
    return m_html_isValid;
}

QString OAIHtmlAsset::getPosition() const {
    return m_position;
}
void OAIHtmlAsset::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAIHtmlAsset::is_position_Set() const{
    return m_position_isSet;
}

bool OAIHtmlAsset::is_position_Valid() const{
    return m_position_isValid;
}

QString OAIHtmlAsset::getType() const {
    return m_type;
}
void OAIHtmlAsset::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIHtmlAsset::is_type_Set() const{
    return m_type_isSet;
}

bool OAIHtmlAsset::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIHtmlAsset::getWidth() const {
    return m_width;
}
void OAIHtmlAsset::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIHtmlAsset::is_width_Set() const{
    return m_width_isSet;
}

bool OAIHtmlAsset::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIHtmlAsset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_background_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_css_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHtmlAsset::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_html_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
