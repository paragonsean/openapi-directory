/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdit::OAIEdit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdit::OAIEdit() {
    this->initializeModel();
}

OAIEdit::~OAIEdit() {}

void OAIEdit::initializeModel() {

    m_callback_isSet = false;
    m_callback_isValid = false;

    m_disk_isSet = false;
    m_disk_isValid = false;

    m_output_isSet = false;
    m_output_isValid = false;

    m_timeline_isSet = false;
    m_timeline_isValid = false;
}

void OAIEdit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdit::fromJsonObject(QJsonObject json) {

    m_callback_isValid = ::OpenAPI::fromJsonValue(m_callback, json[QString("callback")]);
    m_callback_isSet = !json[QString("callback")].isNull() && m_callback_isValid;

    m_disk_isValid = ::OpenAPI::fromJsonValue(m_disk, json[QString("disk")]);
    m_disk_isSet = !json[QString("disk")].isNull() && m_disk_isValid;

    m_output_isValid = ::OpenAPI::fromJsonValue(m_output, json[QString("output")]);
    m_output_isSet = !json[QString("output")].isNull() && m_output_isValid;

    m_timeline_isValid = ::OpenAPI::fromJsonValue(m_timeline, json[QString("timeline")]);
    m_timeline_isSet = !json[QString("timeline")].isNull() && m_timeline_isValid;
}

QString OAIEdit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdit::asJsonObject() const {
    QJsonObject obj;
    if (m_callback_isSet) {
        obj.insert(QString("callback"), ::OpenAPI::toJsonValue(m_callback));
    }
    if (m_disk_isSet) {
        obj.insert(QString("disk"), ::OpenAPI::toJsonValue(m_disk));
    }
    if (m_output.isSet()) {
        obj.insert(QString("output"), ::OpenAPI::toJsonValue(m_output));
    }
    if (m_timeline.isSet()) {
        obj.insert(QString("timeline"), ::OpenAPI::toJsonValue(m_timeline));
    }
    return obj;
}

QString OAIEdit::getCallback() const {
    return m_callback;
}
void OAIEdit::setCallback(const QString &callback) {
    m_callback = callback;
    m_callback_isSet = true;
}

bool OAIEdit::is_callback_Set() const{
    return m_callback_isSet;
}

bool OAIEdit::is_callback_Valid() const{
    return m_callback_isValid;
}

QString OAIEdit::getDisk() const {
    return m_disk;
}
void OAIEdit::setDisk(const QString &disk) {
    m_disk = disk;
    m_disk_isSet = true;
}

bool OAIEdit::is_disk_Set() const{
    return m_disk_isSet;
}

bool OAIEdit::is_disk_Valid() const{
    return m_disk_isValid;
}

OAIOutput OAIEdit::getOutput() const {
    return m_output;
}
void OAIEdit::setOutput(const OAIOutput &output) {
    m_output = output;
    m_output_isSet = true;
}

bool OAIEdit::is_output_Set() const{
    return m_output_isSet;
}

bool OAIEdit::is_output_Valid() const{
    return m_output_isValid;
}

OAITimeline OAIEdit::getTimeline() const {
    return m_timeline;
}
void OAIEdit::setTimeline(const OAITimeline &timeline) {
    m_timeline = timeline;
    m_timeline_isSet = true;
}

bool OAIEdit::is_timeline_Set() const{
    return m_timeline_isSet;
}

bool OAIEdit::is_timeline_Valid() const{
    return m_timeline_isValid;
}

bool OAIEdit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_callback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdit::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_output_isValid && m_timeline_isValid && true;
}

} // namespace OpenAPI
