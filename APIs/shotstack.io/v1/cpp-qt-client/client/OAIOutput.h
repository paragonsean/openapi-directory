/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOutput.h
 *
 * The output format, render range and type of media to generate.
 */

#ifndef OAIOutput_H
#define OAIOutput_H

#include <QJsonObject>

#include "OAIOutput_destinations_inner.h"
#include "OAIPoster.h"
#include "OAIRange.h"
#include "OAISize.h"
#include "OAIThumbnail.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOutput_destinations_inner;
class OAIPoster;
class OAIRange;
class OAISize;
class OAIThumbnail;

class OAIOutput : public OAIObject {
public:
    OAIOutput();
    OAIOutput(QString json);
    ~OAIOutput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAspectRatio() const;
    void setAspectRatio(const QString &aspect_ratio);
    bool is_aspect_ratio_Set() const;
    bool is_aspect_ratio_Valid() const;

    QList<OAIOutput_destinations_inner> getDestinations() const;
    void setDestinations(const QList<OAIOutput_destinations_inner> &destinations);
    bool is_destinations_Set() const;
    bool is_destinations_Valid() const;

    QString getFormat() const;
    void setFormat(const QString &format);
    bool is_format_Set() const;
    bool is_format_Valid() const;

    qint32 getFps() const;
    void setFps(const qint32 &fps);
    bool is_fps_Set() const;
    bool is_fps_Valid() const;

    OAIPoster getPoster() const;
    void setPoster(const OAIPoster &poster);
    bool is_poster_Set() const;
    bool is_poster_Valid() const;

    QString getQuality() const;
    void setQuality(const QString &quality);
    bool is_quality_Set() const;
    bool is_quality_Valid() const;

    OAIRange getRange() const;
    void setRange(const OAIRange &range);
    bool is_range_Set() const;
    bool is_range_Valid() const;

    QString getResolution() const;
    void setResolution(const QString &resolution);
    bool is_resolution_Set() const;
    bool is_resolution_Valid() const;

    QString getScaleTo() const;
    void setScaleTo(const QString &scale_to);
    bool is_scale_to_Set() const;
    bool is_scale_to_Valid() const;

    OAISize getSize() const;
    void setSize(const OAISize &size);
    bool is_size_Set() const;
    bool is_size_Valid() const;

    OAIThumbnail getThumbnail() const;
    void setThumbnail(const OAIThumbnail &thumbnail);
    bool is_thumbnail_Set() const;
    bool is_thumbnail_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_aspect_ratio;
    bool m_aspect_ratio_isSet;
    bool m_aspect_ratio_isValid;

    QList<OAIOutput_destinations_inner> m_destinations;
    bool m_destinations_isSet;
    bool m_destinations_isValid;

    QString m_format;
    bool m_format_isSet;
    bool m_format_isValid;

    qint32 m_fps;
    bool m_fps_isSet;
    bool m_fps_isValid;

    OAIPoster m_poster;
    bool m_poster_isSet;
    bool m_poster_isValid;

    QString m_quality;
    bool m_quality_isSet;
    bool m_quality_isValid;

    OAIRange m_range;
    bool m_range_isSet;
    bool m_range_isValid;

    QString m_resolution;
    bool m_resolution_isSet;
    bool m_resolution_isValid;

    QString m_scale_to;
    bool m_scale_to_isSet;
    bool m_scale_to_isValid;

    OAISize m_size;
    bool m_size_isSet;
    bool m_size_isValid;

    OAIThumbnail m_thumbnail;
    bool m_thumbnail_isSet;
    bool m_thumbnail_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOutput)

#endif // OAIOutput_H
