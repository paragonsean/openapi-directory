/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISoundtrack.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISoundtrack::OAISoundtrack(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISoundtrack::OAISoundtrack() {
    this->initializeModel();
}

OAISoundtrack::~OAISoundtrack() {}

void OAISoundtrack::initializeModel() {

    m_effect_isSet = false;
    m_effect_isValid = false;

    m_src_isSet = false;
    m_src_isValid = false;

    m_volume_isSet = false;
    m_volume_isValid = false;
}

void OAISoundtrack::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISoundtrack::fromJsonObject(QJsonObject json) {

    m_effect_isValid = ::OpenAPI::fromJsonValue(m_effect, json[QString("effect")]);
    m_effect_isSet = !json[QString("effect")].isNull() && m_effect_isValid;

    m_src_isValid = ::OpenAPI::fromJsonValue(m_src, json[QString("src")]);
    m_src_isSet = !json[QString("src")].isNull() && m_src_isValid;

    m_volume_isValid = ::OpenAPI::fromJsonValue(m_volume, json[QString("volume")]);
    m_volume_isSet = !json[QString("volume")].isNull() && m_volume_isValid;
}

QString OAISoundtrack::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISoundtrack::asJsonObject() const {
    QJsonObject obj;
    if (m_effect_isSet) {
        obj.insert(QString("effect"), ::OpenAPI::toJsonValue(m_effect));
    }
    if (m_src_isSet) {
        obj.insert(QString("src"), ::OpenAPI::toJsonValue(m_src));
    }
    if (m_volume_isSet) {
        obj.insert(QString("volume"), ::OpenAPI::toJsonValue(m_volume));
    }
    return obj;
}

QString OAISoundtrack::getEffect() const {
    return m_effect;
}
void OAISoundtrack::setEffect(const QString &effect) {
    m_effect = effect;
    m_effect_isSet = true;
}

bool OAISoundtrack::is_effect_Set() const{
    return m_effect_isSet;
}

bool OAISoundtrack::is_effect_Valid() const{
    return m_effect_isValid;
}

QString OAISoundtrack::getSrc() const {
    return m_src;
}
void OAISoundtrack::setSrc(const QString &src) {
    m_src = src;
    m_src_isSet = true;
}

bool OAISoundtrack::is_src_Set() const{
    return m_src_isSet;
}

bool OAISoundtrack::is_src_Valid() const{
    return m_src_isValid;
}

double OAISoundtrack::getVolume() const {
    return m_volume;
}
void OAISoundtrack::setVolume(const double &volume) {
    m_volume = volume;
    m_volume_isSet = true;
}

bool OAISoundtrack::is_volume_Set() const{
    return m_volume_isSet;
}

bool OAISoundtrack::is_volume_Valid() const{
    return m_volume_isValid;
}

bool OAISoundtrack::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_effect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_src_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISoundtrack::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_src_isValid && true;
}

} // namespace OpenAPI
