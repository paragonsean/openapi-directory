/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRenderResponseData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRenderResponseData::OAIRenderResponseData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRenderResponseData::OAIRenderResponseData() {
    this->initializeModel();
}

OAIRenderResponseData::~OAIRenderResponseData() {}

void OAIRenderResponseData::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_poster_isSet = false;
    m_poster_isValid = false;

    m_render_time_isSet = false;
    m_render_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIRenderResponseData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRenderResponseData::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_poster_isValid = ::OpenAPI::fromJsonValue(m_poster, json[QString("poster")]);
    m_poster_isSet = !json[QString("poster")].isNull() && m_poster_isValid;

    m_render_time_isValid = ::OpenAPI::fromJsonValue(m_render_time, json[QString("renderTime")]);
    m_render_time_isSet = !json[QString("renderTime")].isNull() && m_render_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIRenderResponseData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRenderResponseData::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_plan_isSet) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_poster_isSet) {
        obj.insert(QString("poster"), ::OpenAPI::toJsonValue(m_poster));
    }
    if (m_render_time_isSet) {
        obj.insert(QString("renderTime"), ::OpenAPI::toJsonValue(m_render_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_thumbnail_isSet) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIRenderResponseData::getCreated() const {
    return m_created;
}
void OAIRenderResponseData::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIRenderResponseData::is_created_Set() const{
    return m_created_isSet;
}

bool OAIRenderResponseData::is_created_Valid() const{
    return m_created_isValid;
}

OAIEdit OAIRenderResponseData::getData() const {
    return m_data;
}
void OAIRenderResponseData::setData(const OAIEdit &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIRenderResponseData::is_data_Set() const{
    return m_data_isSet;
}

bool OAIRenderResponseData::is_data_Valid() const{
    return m_data_isValid;
}

double OAIRenderResponseData::getDuration() const {
    return m_duration;
}
void OAIRenderResponseData::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIRenderResponseData::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIRenderResponseData::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIRenderResponseData::getError() const {
    return m_error;
}
void OAIRenderResponseData::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIRenderResponseData::is_error_Set() const{
    return m_error_isSet;
}

bool OAIRenderResponseData::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIRenderResponseData::getId() const {
    return m_id;
}
void OAIRenderResponseData::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRenderResponseData::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRenderResponseData::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRenderResponseData::getOwner() const {
    return m_owner;
}
void OAIRenderResponseData::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIRenderResponseData::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIRenderResponseData::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIRenderResponseData::getPlan() const {
    return m_plan;
}
void OAIRenderResponseData::setPlan(const QString &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIRenderResponseData::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIRenderResponseData::is_plan_Valid() const{
    return m_plan_isValid;
}

QString OAIRenderResponseData::getPoster() const {
    return m_poster;
}
void OAIRenderResponseData::setPoster(const QString &poster) {
    m_poster = poster;
    m_poster_isSet = true;
}

bool OAIRenderResponseData::is_poster_Set() const{
    return m_poster_isSet;
}

bool OAIRenderResponseData::is_poster_Valid() const{
    return m_poster_isValid;
}

double OAIRenderResponseData::getRenderTime() const {
    return m_render_time;
}
void OAIRenderResponseData::setRenderTime(const double &render_time) {
    m_render_time = render_time;
    m_render_time_isSet = true;
}

bool OAIRenderResponseData::is_render_time_Set() const{
    return m_render_time_isSet;
}

bool OAIRenderResponseData::is_render_time_Valid() const{
    return m_render_time_isValid;
}

QString OAIRenderResponseData::getStatus() const {
    return m_status;
}
void OAIRenderResponseData::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRenderResponseData::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRenderResponseData::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRenderResponseData::getThumbnail() const {
    return m_thumbnail;
}
void OAIRenderResponseData::setThumbnail(const QString &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAIRenderResponseData::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAIRenderResponseData::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

QString OAIRenderResponseData::getUpdated() const {
    return m_updated;
}
void OAIRenderResponseData::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIRenderResponseData::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIRenderResponseData::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIRenderResponseData::getUrl() const {
    return m_url;
}
void OAIRenderResponseData::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIRenderResponseData::is_url_Set() const{
    return m_url_isSet;
}

bool OAIRenderResponseData::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIRenderResponseData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_render_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRenderResponseData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_isValid && m_data_isValid && m_id_isValid && m_owner_isValid && m_status_isValid && m_updated_isValid && true;
}

} // namespace OpenAPI
