/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AssetRenderResponse from './model/AssetRenderResponse';
import AssetResponse from './model/AssetResponse';
import AssetResponseAttributes from './model/AssetResponseAttributes';
import AssetResponseData from './model/AssetResponseData';
import AudioAsset from './model/AudioAsset';
import Clip from './model/Clip';
import ClipAsset from './model/ClipAsset';
import Crop from './model/Crop';
import Edit from './model/Edit';
import Font from './model/Font';
import HtmlAsset from './model/HtmlAsset';
import ImageAsset from './model/ImageAsset';
import LumaAsset from './model/LumaAsset';
import Offset from './model/Offset';
import Output from './model/Output';
import OutputDestinationsInner from './model/OutputDestinationsInner';
import Poster from './model/Poster';
import QueuedResponse from './model/QueuedResponse';
import QueuedResponseData from './model/QueuedResponseData';
import Range from './model/Range';
import RenderResponse from './model/RenderResponse';
import RenderResponseData from './model/RenderResponseData';
import ShotstackDestination from './model/ShotstackDestination';
import Size from './model/Size';
import Soundtrack from './model/Soundtrack';
import Thumbnail from './model/Thumbnail';
import Timeline from './model/Timeline';
import TitleAsset from './model/TitleAsset';
import Track from './model/Track';
import Transition from './model/Transition';
import VideoAsset from './model/VideoAsset';
import EditApi from './api/EditApi';
import ServeApi from './api/ServeApi';


/**
* Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API&#39;s, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: &lt;b&gt;https://api.shotstack.io/{version}&lt;/b&gt;  The Serve API base URL is: &lt;b&gt;https://api.shotstack.io/serve/{version}&lt;/b&gt;.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var Shotstack = require('index'); // See note below*.
* var xxxSvc = new Shotstack.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new Shotstack.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new Shotstack.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new Shotstack.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version v1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AssetRenderResponse model constructor.
     * @property {module:model/AssetRenderResponse}
     */
    AssetRenderResponse,

    /**
     * The AssetResponse model constructor.
     * @property {module:model/AssetResponse}
     */
    AssetResponse,

    /**
     * The AssetResponseAttributes model constructor.
     * @property {module:model/AssetResponseAttributes}
     */
    AssetResponseAttributes,

    /**
     * The AssetResponseData model constructor.
     * @property {module:model/AssetResponseData}
     */
    AssetResponseData,

    /**
     * The AudioAsset model constructor.
     * @property {module:model/AudioAsset}
     */
    AudioAsset,

    /**
     * The Clip model constructor.
     * @property {module:model/Clip}
     */
    Clip,

    /**
     * The ClipAsset model constructor.
     * @property {module:model/ClipAsset}
     */
    ClipAsset,

    /**
     * The Crop model constructor.
     * @property {module:model/Crop}
     */
    Crop,

    /**
     * The Edit model constructor.
     * @property {module:model/Edit}
     */
    Edit,

    /**
     * The Font model constructor.
     * @property {module:model/Font}
     */
    Font,

    /**
     * The HtmlAsset model constructor.
     * @property {module:model/HtmlAsset}
     */
    HtmlAsset,

    /**
     * The ImageAsset model constructor.
     * @property {module:model/ImageAsset}
     */
    ImageAsset,

    /**
     * The LumaAsset model constructor.
     * @property {module:model/LumaAsset}
     */
    LumaAsset,

    /**
     * The Offset model constructor.
     * @property {module:model/Offset}
     */
    Offset,

    /**
     * The Output model constructor.
     * @property {module:model/Output}
     */
    Output,

    /**
     * The OutputDestinationsInner model constructor.
     * @property {module:model/OutputDestinationsInner}
     */
    OutputDestinationsInner,

    /**
     * The Poster model constructor.
     * @property {module:model/Poster}
     */
    Poster,

    /**
     * The QueuedResponse model constructor.
     * @property {module:model/QueuedResponse}
     */
    QueuedResponse,

    /**
     * The QueuedResponseData model constructor.
     * @property {module:model/QueuedResponseData}
     */
    QueuedResponseData,

    /**
     * The Range model constructor.
     * @property {module:model/Range}
     */
    Range,

    /**
     * The RenderResponse model constructor.
     * @property {module:model/RenderResponse}
     */
    RenderResponse,

    /**
     * The RenderResponseData model constructor.
     * @property {module:model/RenderResponseData}
     */
    RenderResponseData,

    /**
     * The ShotstackDestination model constructor.
     * @property {module:model/ShotstackDestination}
     */
    ShotstackDestination,

    /**
     * The Size model constructor.
     * @property {module:model/Size}
     */
    Size,

    /**
     * The Soundtrack model constructor.
     * @property {module:model/Soundtrack}
     */
    Soundtrack,

    /**
     * The Thumbnail model constructor.
     * @property {module:model/Thumbnail}
     */
    Thumbnail,

    /**
     * The Timeline model constructor.
     * @property {module:model/Timeline}
     */
    Timeline,

    /**
     * The TitleAsset model constructor.
     * @property {module:model/TitleAsset}
     */
    TitleAsset,

    /**
     * The Track model constructor.
     * @property {module:model/Track}
     */
    Track,

    /**
     * The Transition model constructor.
     * @property {module:model/Transition}
     */
    Transition,

    /**
     * The VideoAsset model constructor.
     * @property {module:model/VideoAsset}
     */
    VideoAsset,

    /**
    * The EditApi service constructor.
    * @property {module:api/EditApi}
    */
    EditApi,

    /**
    * The ServeApi service constructor.
    * @property {module:api/ServeApi}
    */
    ServeApi
};
