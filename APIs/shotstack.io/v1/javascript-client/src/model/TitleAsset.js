/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Offset from './Offset';

/**
 * The TitleAsset model module.
 * @module model/TitleAsset
 * @version v1
 */
class TitleAsset {
    /**
     * Constructs a new <code>TitleAsset</code>.
     * The TitleAsset clip type lets you create video titles from a text string and apply styling and positioning.
     * @alias module:model/TitleAsset
     * @param text {String} The title text string - i.e. \"My Title\".
     * @param type {String} The type of asset - set to `title` for titles.
     */
    constructor(text, type) { 
        
        TitleAsset.initialize(this, text, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, text, type) { 
        obj['color'] = '#ffffff';
        obj['position'] = 'center';
        obj['size'] = 'medium';
        obj['text'] = text;
        obj['type'] = type || 'title';
    }

    /**
     * Constructs a <code>TitleAsset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TitleAsset} obj Optional instance to populate.
     * @return {module:model/TitleAsset} The populated <code>TitleAsset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TitleAsset();

            if (data.hasOwnProperty('background')) {
                obj['background'] = ApiClient.convertToType(data['background'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = Offset.constructFromObject(data['offset']);
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
            if (data.hasOwnProperty('style')) {
                obj['style'] = ApiClient.convertToType(data['style'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TitleAsset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TitleAsset</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TitleAsset.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['background'] && !(typeof data['background'] === 'string' || data['background'] instanceof String)) {
            throw new Error("Expected the field `background` to be a primitive type in the JSON string but got " + data['background']);
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // validate the optional field `offset`
        if (data['offset']) { // data not null
          Offset.validateJSON(data['offset']);
        }
        // ensure the json data is a string
        if (data['position'] && !(typeof data['position'] === 'string' || data['position'] instanceof String)) {
            throw new Error("Expected the field `position` to be a primitive type in the JSON string but got " + data['position']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }
        // ensure the json data is a string
        if (data['style'] && !(typeof data['style'] === 'string' || data['style'] instanceof String)) {
            throw new Error("Expected the field `style` to be a primitive type in the JSON string but got " + data['style']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

TitleAsset.RequiredProperties = ["text", "type"];

/**
 * Apply a background color behind the text. Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with 50% transparency. Omit to use transparent background.
 * @member {String} background
 */
TitleAsset.prototype['background'] = undefined;

/**
 * Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with  50% transparency.
 * @member {String} color
 * @default '#ffffff'
 */
TitleAsset.prototype['color'] = '#ffffff';

/**
 * @member {module:model/Offset} offset
 */
TitleAsset.prototype['offset'] = undefined;

/**
 * Place the title in one of nine predefined positions of the viewport. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>
 * @member {module:model/TitleAsset.PositionEnum} position
 * @default 'center'
 */
TitleAsset.prototype['position'] = 'center';

/**
 * Set the relative size of the text using predefined sizes from xx-small to xx-large. <ul>   <li>`xx-small`</li>   <li>`x-small`</li>   <li>`small`</li>   <li>`medium`</li>   <li>`large`</li>   <li>`x-large`</li>   <li>`xx-large`</li> </ul>
 * @member {module:model/TitleAsset.SizeEnum} size
 * @default 'medium'
 */
TitleAsset.prototype['size'] = 'medium';

/**
 * Uses a preset to apply font properties and styling to the title. <ul>   <li>`minimal`</li>   <li>`blockbuster`</li>   <li>`vogue`</li>   <li>`sketchy`</li>   <li>`skinny`</li>   <li>`chunk`</li>   <li>`chunkLight`</li>   <li>`marker`</li>   <li>`future`</li>   <li>`subtitle`</li> </ul>
 * @member {module:model/TitleAsset.StyleEnum} style
 */
TitleAsset.prototype['style'] = undefined;

/**
 * The title text string - i.e. \"My Title\".
 * @member {String} text
 */
TitleAsset.prototype['text'] = undefined;

/**
 * The type of asset - set to `title` for titles.
 * @member {String} type
 * @default 'title'
 */
TitleAsset.prototype['type'] = 'title';





/**
 * Allowed values for the <code>position</code> property.
 * @enum {String}
 * @readonly
 */
TitleAsset['PositionEnum'] = {

    /**
     * value: "top"
     * @const
     */
    "top": "top",

    /**
     * value: "topRight"
     * @const
     */
    "topRight": "topRight",

    /**
     * value: "right"
     * @const
     */
    "right": "right",

    /**
     * value: "bottomRight"
     * @const
     */
    "bottomRight": "bottomRight",

    /**
     * value: "bottom"
     * @const
     */
    "bottom": "bottom",

    /**
     * value: "bottomLeft"
     * @const
     */
    "bottomLeft": "bottomLeft",

    /**
     * value: "left"
     * @const
     */
    "left": "left",

    /**
     * value: "topLeft"
     * @const
     */
    "topLeft": "topLeft",

    /**
     * value: "center"
     * @const
     */
    "center": "center"
};


/**
 * Allowed values for the <code>size</code> property.
 * @enum {String}
 * @readonly
 */
TitleAsset['SizeEnum'] = {

    /**
     * value: "xx-small"
     * @const
     */
    "xx-small": "xx-small",

    /**
     * value: "x-small"
     * @const
     */
    "x-small": "x-small",

    /**
     * value: "small"
     * @const
     */
    "small": "small",

    /**
     * value: "medium"
     * @const
     */
    "medium": "medium",

    /**
     * value: "large"
     * @const
     */
    "large": "large",

    /**
     * value: "x-large"
     * @const
     */
    "x-large": "x-large",

    /**
     * value: "xx-large"
     * @const
     */
    "xx-large": "xx-large"
};


/**
 * Allowed values for the <code>style</code> property.
 * @enum {String}
 * @readonly
 */
TitleAsset['StyleEnum'] = {

    /**
     * value: "minimal"
     * @const
     */
    "minimal": "minimal",

    /**
     * value: "blockbuster"
     * @const
     */
    "blockbuster": "blockbuster",

    /**
     * value: "vogue"
     * @const
     */
    "vogue": "vogue",

    /**
     * value: "sketchy"
     * @const
     */
    "sketchy": "sketchy",

    /**
     * value: "skinny"
     * @const
     */
    "skinny": "skinny",

    /**
     * value: "chunk"
     * @const
     */
    "chunk": "chunk",

    /**
     * value: "chunkLight"
     * @const
     */
    "chunkLight": "chunkLight",

    /**
     * value: "marker"
     * @const
     */
    "marker": "marker",

    /**
     * value: "future"
     * @const
     */
    "future": "future",

    /**
     * value: "subtitle"
     * @const
     */
    "subtitle": "subtitle"
};



export default TitleAsset;

