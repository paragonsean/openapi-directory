/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssetResponseAttributes model module.
 * @module model/AssetResponseAttributes
 * @version v1
 */
class AssetResponseAttributes {
    /**
     * Constructs a new <code>AssetResponseAttributes</code>.
     * The list of asset attributes and their values.
     * @alias module:model/AssetResponseAttributes
     */
    constructor() { 
        
        AssetResponseAttributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AssetResponseAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssetResponseAttributes} obj Optional instance to populate.
     * @return {module:model/AssetResponseAttributes} The populated <code>AssetResponseAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssetResponseAttributes();

            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'String');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('renderId')) {
                obj['renderId'] = ApiClient.convertToType(data['renderId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssetResponseAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssetResponseAttributes</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['created'] && !(typeof data['created'] === 'string' || data['created'] instanceof String)) {
            throw new Error("Expected the field `created` to be a primitive type in the JSON string but got " + data['created']);
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['owner'] && !(typeof data['owner'] === 'string' || data['owner'] instanceof String)) {
            throw new Error("Expected the field `owner` to be a primitive type in the JSON string but got " + data['owner']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['renderId'] && !(typeof data['renderId'] === 'string' || data['renderId'] instanceof String)) {
            throw new Error("Expected the field `renderId` to be a primitive type in the JSON string but got " + data['renderId']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['updated'] && !(typeof data['updated'] === 'string' || data['updated'] instanceof String)) {
            throw new Error("Expected the field `updated` to be a primitive type in the JSON string but got " + data['updated']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The time the asset was created.
 * @member {String} created
 */
AssetResponseAttributes.prototype['created'] = undefined;

/**
 * The asset file name.
 * @member {String} filename
 */
AssetResponseAttributes.prototype['filename'] = undefined;

/**
 * The unique id of the hosted asset in UUID format.
 * @member {String} id
 */
AssetResponseAttributes.prototype['id'] = undefined;

/**
 * The owner id of the render task.
 * @member {String} owner
 */
AssetResponseAttributes.prototype['owner'] = undefined;

/**
 * The region the asset is hosted, currently only `au` (Australia).
 * @member {String} region
 */
AssetResponseAttributes.prototype['region'] = undefined;

/**
 * The original render id that created the asset in UUID format. Multiple assets can share the same render id.
 * @member {String} renderId
 */
AssetResponseAttributes.prototype['renderId'] = undefined;

/**
 * The status of the asset. <ul>   <li>`importing` - the asset is being copied to the hosting service</li>   <li>`ready` - the asset is ready to be served to users</li>   <li>`failed` - the asset failed to copy or delete</li>   <li>`deleted` - the asset has been deleted</li> </ul>
 * @member {module:model/AssetResponseAttributes.StatusEnum} status
 */
AssetResponseAttributes.prototype['status'] = undefined;

/**
 * The time the asset status was last updated.
 * @member {String} updated
 */
AssetResponseAttributes.prototype['updated'] = undefined;

/**
 * The asset file name.
 * @member {String} url
 */
AssetResponseAttributes.prototype['url'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
AssetResponseAttributes['StatusEnum'] = {

    /**
     * value: "importing"
     * @const
     */
    "importing": "importing",

    /**
     * value: "ready"
     * @const
     */
    "ready": "ready",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted"
};



export default AssetResponseAttributes;

