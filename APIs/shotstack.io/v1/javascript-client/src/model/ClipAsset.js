/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioAsset from './AudioAsset';
import Crop from './Crop';
import HtmlAsset from './HtmlAsset';
import ImageAsset from './ImageAsset';
import LumaAsset from './LumaAsset';
import Offset from './Offset';
import TitleAsset from './TitleAsset';
import VideoAsset from './VideoAsset';

/**
 * The ClipAsset model module.
 * @module model/ClipAsset
 * @version v1
 */
class ClipAsset {
    /**
     * Constructs a new <code>ClipAsset</code>.
     * The type of asset to display for the duration of this Clip. Value must be one of &lt;b&gt;TitleAsset&lt;/b&gt;, &lt;b&gt;ImageAsset&lt;/b&gt;, &lt;b&gt;VideoAsset&lt;/b&gt;, &lt;b&gt;HtmlAsset&lt;/b&gt;, &lt;b&gt;AudioAsset&lt;/b&gt; or &lt;b&gt;LumaAsset&lt;/b&gt;
     * @alias module:model/ClipAsset
     * @param {(module:model/AudioAsset|module:model/HtmlAsset|module:model/ImageAsset|module:model/LumaAsset|module:model/TitleAsset|module:model/VideoAsset)} instance The actual instance to initialize ClipAsset.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "VideoAsset") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                VideoAsset.validateJSON(instance); // throw an exception if no match
                // create VideoAsset from JS object
                this.actualInstance = VideoAsset.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into VideoAsset
            errorMessages.push("Failed to construct VideoAsset: " + err)
        }

        try {
            if (typeof instance === "ImageAsset") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ImageAsset.validateJSON(instance); // throw an exception if no match
                // create ImageAsset from JS object
                this.actualInstance = ImageAsset.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ImageAsset
            errorMessages.push("Failed to construct ImageAsset: " + err)
        }

        try {
            if (typeof instance === "TitleAsset") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                TitleAsset.validateJSON(instance); // throw an exception if no match
                // create TitleAsset from JS object
                this.actualInstance = TitleAsset.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TitleAsset
            errorMessages.push("Failed to construct TitleAsset: " + err)
        }

        try {
            if (typeof instance === "HtmlAsset") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                HtmlAsset.validateJSON(instance); // throw an exception if no match
                // create HtmlAsset from JS object
                this.actualInstance = HtmlAsset.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into HtmlAsset
            errorMessages.push("Failed to construct HtmlAsset: " + err)
        }

        try {
            if (typeof instance === "AudioAsset") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AudioAsset.validateJSON(instance); // throw an exception if no match
                // create AudioAsset from JS object
                this.actualInstance = AudioAsset.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AudioAsset
            errorMessages.push("Failed to construct AudioAsset: " + err)
        }

        try {
            if (typeof instance === "LumaAsset") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                LumaAsset.validateJSON(instance); // throw an exception if no match
                // create LumaAsset from JS object
                this.actualInstance = LumaAsset.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into LumaAsset
            errorMessages.push("Failed to construct LumaAsset: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `ClipAsset` with oneOf schemas AudioAsset, HtmlAsset, ImageAsset, LumaAsset, TitleAsset, VideoAsset. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `ClipAsset` with oneOf schemas AudioAsset, HtmlAsset, ImageAsset, LumaAsset, TitleAsset, VideoAsset. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>ClipAsset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClipAsset} obj Optional instance to populate.
     * @return {module:model/ClipAsset} The populated <code>ClipAsset</code> instance.
     */
    static constructFromObject(data, obj) {
        return new ClipAsset(data);
    }

    /**
     * Gets the actual instance, which can be <code>AudioAsset</code>, <code>HtmlAsset</code>, <code>ImageAsset</code>, <code>LumaAsset</code>, <code>TitleAsset</code>, <code>VideoAsset</code>.
     * @return {(module:model/AudioAsset|module:model/HtmlAsset|module:model/ImageAsset|module:model/LumaAsset|module:model/TitleAsset|module:model/VideoAsset)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>AudioAsset</code>, <code>HtmlAsset</code>, <code>ImageAsset</code>, <code>LumaAsset</code>, <code>TitleAsset</code>, <code>VideoAsset</code>.
     * @param {(module:model/AudioAsset|module:model/HtmlAsset|module:model/ImageAsset|module:model/LumaAsset|module:model/TitleAsset|module:model/VideoAsset)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = ClipAsset.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of ClipAsset from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/ClipAsset} An instance of ClipAsset.
     */
    static fromJSON = function(json_string){
        return ClipAsset.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/Crop} crop
 */
ClipAsset.prototype['crop'] = undefined;

/**
 * The luma matte source URL. The URL must be publicly accessible or include credentials.
 * @member {String} src
 */
ClipAsset.prototype['src'] = undefined;

/**
 * The start trim point of the luma matte clip, in seconds (defaults to 0). Videos will start from the in trim point. A luma matte video will play until the file ends or the Clip length is reached.
 * @member {Number} trim
 */
ClipAsset.prototype['trim'] = undefined;

/**
 * The type of asset - set to `luma` for luma mattes.
 * @member {String} type
 * @default 'luma'
 */
ClipAsset.prototype['type'] = 'luma';

/**
 * Set the volume for the audio clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).
 * @member {Number} volume
 * @default 1
 */
ClipAsset.prototype['volume'] = 1;

/**
 * Apply a background color behind the HTML bounding box using. Set the text color using hexadecimal  color notation. Transparency is supported by setting the first two characters of the hex string  (opposite to HTML), i.e. #80ffffff will be white with 50% transparency.
 * @member {String} background
 * @default 'transparent'
 */
ClipAsset.prototype['background'] = 'transparent';

/**
 * Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with  50% transparency.
 * @member {String} color
 * @default '#ffffff'
 */
ClipAsset.prototype['color'] = '#ffffff';

/**
 * @member {module:model/Offset} offset
 */
ClipAsset.prototype['offset'] = undefined;

/**
 * Place the HTML in one of nine predefined positions within the HTML area. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>
 * @member {module:model/ClipAsset.PositionEnum} position
 * @default 'center'
 */
ClipAsset.prototype['position'] = 'center';

/**
 * Set the relative size of the text using predefined sizes from xx-small to xx-large. <ul>   <li>`xx-small`</li>   <li>`x-small`</li>   <li>`small`</li>   <li>`medium`</li>   <li>`large`</li>   <li>`x-large`</li>   <li>`xx-large`</li> </ul>
 * @member {module:model/ClipAsset.SizeEnum} size
 * @default 'medium'
 */
ClipAsset.prototype['size'] = 'medium';

/**
 * Uses a preset to apply font properties and styling to the title. <ul>   <li>`minimal`</li>   <li>`blockbuster`</li>   <li>`vogue`</li>   <li>`sketchy`</li>   <li>`skinny`</li>   <li>`chunk`</li>   <li>`chunkLight`</li>   <li>`marker`</li>   <li>`future`</li>   <li>`subtitle`</li> </ul>
 * @member {module:model/ClipAsset.StyleEnum} style
 */
ClipAsset.prototype['style'] = undefined;

/**
 * The title text string - i.e. \"My Title\".
 * @member {String} text
 */
ClipAsset.prototype['text'] = undefined;

/**
 * The CSS text string to apply styling to the HTML. See list of  [support CSS properties](https://shotstack.gitbook.io/docs/guides/architecting-an-application/html-support#supported-html-tags).
 * @member {String} css
 */
ClipAsset.prototype['css'] = undefined;

/**
 * Set the width of the HTML asset bounding box in pixels. Text and elements will be masked if they exceed the  height of the bounding box.
 * @member {Number} height
 */
ClipAsset.prototype['height'] = undefined;

/**
 * The HTML text string. See list of [supported HTML tags](https://shotstack.gitbook.io/docs/guides/architecting-an-application/html-support#supported-html-tags).
 * @member {String} html
 */
ClipAsset.prototype['html'] = undefined;

/**
 * Set the width of the HTML asset bounding box in pixels. Text will wrap to fill the bounding box.
 * @member {Number} width
 */
ClipAsset.prototype['width'] = undefined;

/**
 * The effect to apply to the audio asset <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>
 * @member {module:model/ClipAsset.EffectEnum} effect
 */
ClipAsset.prototype['effect'] = undefined;


ClipAsset.OneOf = ["AudioAsset", "HtmlAsset", "ImageAsset", "LumaAsset", "TitleAsset", "VideoAsset"];

export default ClipAsset;

