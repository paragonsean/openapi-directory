/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Output from './Output';
import Timeline from './Timeline';

/**
 * The Edit model module.
 * @module model/Edit
 * @version v1
 */
class Edit {
    /**
     * Constructs a new <code>Edit</code>.
     * An edit defines the arrangement of a video on a timeline, an audio edit or an image design and the output format.
     * @alias module:model/Edit
     * @param output {module:model/Output} 
     * @param timeline {module:model/Timeline} 
     */
    constructor(output, timeline) { 
        
        Edit.initialize(this, output, timeline);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, output, timeline) { 
        obj['disk'] = 'local';
        obj['output'] = output;
        obj['timeline'] = timeline;
    }

    /**
     * Constructs a <code>Edit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Edit} obj Optional instance to populate.
     * @return {module:model/Edit} The populated <code>Edit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Edit();

            if (data.hasOwnProperty('callback')) {
                obj['callback'] = ApiClient.convertToType(data['callback'], 'String');
            }
            if (data.hasOwnProperty('disk')) {
                obj['disk'] = ApiClient.convertToType(data['disk'], 'String');
            }
            if (data.hasOwnProperty('output')) {
                obj['output'] = Output.constructFromObject(data['output']);
            }
            if (data.hasOwnProperty('timeline')) {
                obj['timeline'] = Timeline.constructFromObject(data['timeline']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Edit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Edit</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Edit.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['callback'] && !(typeof data['callback'] === 'string' || data['callback'] instanceof String)) {
            throw new Error("Expected the field `callback` to be a primitive type in the JSON string but got " + data['callback']);
        }
        // ensure the json data is a string
        if (data['disk'] && !(typeof data['disk'] === 'string' || data['disk'] instanceof String)) {
            throw new Error("Expected the field `disk` to be a primitive type in the JSON string but got " + data['disk']);
        }
        // validate the optional field `output`
        if (data['output']) { // data not null
          Output.validateJSON(data['output']);
        }
        // validate the optional field `timeline`
        if (data['timeline']) { // data not null
          Timeline.validateJSON(data['timeline']);
        }

        return true;
    }


}

Edit.RequiredProperties = ["output", "timeline"];

/**
 * An optional webhook callback URL used to receive status notifications when a render completes or fails. See [webhooks](https://shotstack.gitbook.io/docs/guides/architecting-an-application/webhooks) for  more details.
 * @member {String} callback
 */
Edit.prototype['callback'] = undefined;

/**
 * The disk type to use for storing footage and assets for each render. See [disk types](https://shotstack.gitbook.io/docs/guides/architecting-an-application/disk-types) for more details. <ul>   <li>`local` - optimized for high speed rendering with up to 512MB storage</li>   <li>`mount` - optimized for larger file sizes and longer videos with 5GB for source footage and 512MB for output render</li> </ul>
 * @member {module:model/Edit.DiskEnum} disk
 * @default 'local'
 */
Edit.prototype['disk'] = 'local';

/**
 * @member {module:model/Output} output
 */
Edit.prototype['output'] = undefined;

/**
 * @member {module:model/Timeline} timeline
 */
Edit.prototype['timeline'] = undefined;





/**
 * Allowed values for the <code>disk</code> property.
 * @enum {String}
 * @readonly
 */
Edit['DiskEnum'] = {

    /**
     * value: "local"
     * @const
     */
    "local": "local",

    /**
     * value: "mount"
     * @const
     */
    "mount": "mount"
};



export default Edit;

