/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OutputDestinationsInner from './OutputDestinationsInner';
import Poster from './Poster';
import Range from './Range';
import Size from './Size';
import Thumbnail from './Thumbnail';

/**
 * The Output model module.
 * @module model/Output
 * @version v1
 */
class Output {
    /**
     * Constructs a new <code>Output</code>.
     * The output format, render range and type of media to generate.
     * @alias module:model/Output
     * @param format {module:model/Output.FormatEnum} The output format and type of media file to generate. <ul>   <li>`mp4` - mp4 video file</li>   <li>`gif` - animated gif</li>   <li>`jpg` - jpg image file</li>   <li>`png` - png image file</li>   <li>`bmp` - bmp image file</li>   <li>`mp3` - mp3 audio file (audio only)</li> </ul>
     */
    constructor(format) { 
        
        Output.initialize(this, format);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, format) { 
        obj['format'] = format;
        obj['fps'] = FpsEnum.25;
        obj['quality'] = 'medium';
    }

    /**
     * Constructs a <code>Output</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Output} obj Optional instance to populate.
     * @return {module:model/Output} The populated <code>Output</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Output();

            if (data.hasOwnProperty('aspectRatio')) {
                obj['aspectRatio'] = ApiClient.convertToType(data['aspectRatio'], 'String');
            }
            if (data.hasOwnProperty('destinations')) {
                obj['destinations'] = ApiClient.convertToType(data['destinations'], [OutputDestinationsInner]);
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('fps')) {
                obj['fps'] = ApiClient.convertToType(data['fps'], 'Number');
            }
            if (data.hasOwnProperty('poster')) {
                obj['poster'] = Poster.constructFromObject(data['poster']);
            }
            if (data.hasOwnProperty('quality')) {
                obj['quality'] = ApiClient.convertToType(data['quality'], 'String');
            }
            if (data.hasOwnProperty('range')) {
                obj['range'] = Range.constructFromObject(data['range']);
            }
            if (data.hasOwnProperty('resolution')) {
                obj['resolution'] = ApiClient.convertToType(data['resolution'], 'String');
            }
            if (data.hasOwnProperty('scaleTo')) {
                obj['scaleTo'] = ApiClient.convertToType(data['scaleTo'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = Size.constructFromObject(data['size']);
            }
            if (data.hasOwnProperty('thumbnail')) {
                obj['thumbnail'] = Thumbnail.constructFromObject(data['thumbnail']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Output</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Output</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Output.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['aspectRatio'] && !(typeof data['aspectRatio'] === 'string' || data['aspectRatio'] instanceof String)) {
            throw new Error("Expected the field `aspectRatio` to be a primitive type in the JSON string but got " + data['aspectRatio']);
        }
        if (data['destinations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['destinations'])) {
                throw new Error("Expected the field `destinations` to be an array in the JSON data but got " + data['destinations']);
            }
            // validate the optional field `destinations` (array)
            for (const item of data['destinations']) {
                OutputDestinationsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // validate the optional field `poster`
        if (data['poster']) { // data not null
          Poster.validateJSON(data['poster']);
        }
        // ensure the json data is a string
        if (data['quality'] && !(typeof data['quality'] === 'string' || data['quality'] instanceof String)) {
            throw new Error("Expected the field `quality` to be a primitive type in the JSON string but got " + data['quality']);
        }
        // validate the optional field `range`
        if (data['range']) { // data not null
          Range.validateJSON(data['range']);
        }
        // ensure the json data is a string
        if (data['resolution'] && !(typeof data['resolution'] === 'string' || data['resolution'] instanceof String)) {
            throw new Error("Expected the field `resolution` to be a primitive type in the JSON string but got " + data['resolution']);
        }
        // ensure the json data is a string
        if (data['scaleTo'] && !(typeof data['scaleTo'] === 'string' || data['scaleTo'] instanceof String)) {
            throw new Error("Expected the field `scaleTo` to be a primitive type in the JSON string but got " + data['scaleTo']);
        }
        // validate the optional field `size`
        if (data['size']) { // data not null
          Size.validateJSON(data['size']);
        }
        // validate the optional field `thumbnail`
        if (data['thumbnail']) { // data not null
          Thumbnail.validateJSON(data['thumbnail']);
        }

        return true;
    }


}

Output.RequiredProperties = ["format"];

/**
 * The aspect ratio (shape) of the video or image. Useful for social media output formats. Options are: <ul>   <li>`16:9` - regular landscape/horizontal aspect ratio (default)</li>   <li>`9:16` - vertical/portrait aspect ratio</li>   <li>`1:1` - square aspect ratio</li>   <li>`4:5` - short vertical/portrait aspect ratio</li>   <li>`4:3` - legacy TV aspect ratio</li> </ul>
 * @member {module:model/Output.AspectRatioEnum} aspectRatio
 */
Output.prototype['aspectRatio'] = undefined;

/**
 * A destination is a location where output files can be sent to for serving or hosting. By default all rendered assets are automatically sent to the Shotstack hosting destination. [DestinationShotstack](/#tocs_shotstackdestination) is currently the only option with plans to add more in the future such as S3, YouTube, Vimeo and Mux. If you do not require hosting you can opt-out using the  `exclude` property.
 * @member {Array.<module:model/OutputDestinationsInner>} destinations
 */
Output.prototype['destinations'] = undefined;

/**
 * The output format and type of media file to generate. <ul>   <li>`mp4` - mp4 video file</li>   <li>`gif` - animated gif</li>   <li>`jpg` - jpg image file</li>   <li>`png` - png image file</li>   <li>`bmp` - bmp image file</li>   <li>`mp3` - mp3 audio file (audio only)</li> </ul>
 * @member {module:model/Output.FormatEnum} format
 */
Output.prototype['format'] = undefined;

/**
 * Override the default frames per second. Useful for when the source footage is recorded at 30fps, i.e. on  mobile devices. Lower frame rates can be used to add cinematic quality (24fps) or to create smaller file size/faster render times or animated gifs (12 or 15fps). Default is 25fps. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`25` - 25fps</li>   <li>`30` - 30fps</li> </ul>
 * @member {module:model/Output.FpsEnum} fps
 * @default FpsEnum.25
 */
Output.prototype['fps'] = FpsEnum.25;

/**
 * @member {module:model/Poster} poster
 */
Output.prototype['poster'] = undefined;

/**
 * Adjust the output quality of the video, image or audio. Adjusting quality affects  render speed, download speeds and storage requirements due to file size. The default `medium` provides the most optimized choice for all three  factors. <ul>   <li>`low` - slightly reduced quality, smaller file size</li>   <li>`medium` - optimized quality, render speeds and file size</li>   <li>`high` - slightly increased quality, larger file size</li> </ul>
 * @member {module:model/Output.QualityEnum} quality
 * @default 'medium'
 */
Output.prototype['quality'] = 'medium';

/**
 * @member {module:model/Range} range
 */
Output.prototype['range'] = undefined;

/**
 * The output resolution of the video or image. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @ 25fps</li>   <li>`hd` - 1280px x 720px @ 25fps</li>   <li>`1080` - 1920px x 1080px @ 25fps</li> </ul>
 * @member {module:model/Output.ResolutionEnum} resolution
 */
Output.prototype['resolution'] = undefined;

/**
 * Override the resolution and scale the video or image to render at a different size. When using scaleTo the asset should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use scaleTo to output the file at SD and the text will be scaled to the correct size. This is useful if you want to create multiple asset sizes. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @25fps</li>   <li>`hd` - 1280px x 720px @25fps</li>   <li>`1080` - 1920px x 1080px @25fps</li> </ul>
 * @member {module:model/Output.ScaleToEnum} scaleTo
 */
Output.prototype['scaleTo'] = undefined;

/**
 * @member {module:model/Size} size
 */
Output.prototype['size'] = undefined;

/**
 * @member {module:model/Thumbnail} thumbnail
 */
Output.prototype['thumbnail'] = undefined;





/**
 * Allowed values for the <code>aspectRatio</code> property.
 * @enum {String}
 * @readonly
 */
Output['AspectRatioEnum'] = {

    /**
     * value: "969"
     * @const
     */
    "969": "969",

    /**
     * value: "556"
     * @const
     */
    "556": "556",

    /**
     * value: "61"
     * @const
     */
    "61": "61",

    /**
     * value: "245"
     * @const
     */
    "245": "245",

    /**
     * value: "243"
     * @const
     */
    "243": "243"
};


/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
Output['FormatEnum'] = {

    /**
     * value: "mp4"
     * @const
     */
    "mp4": "mp4",

    /**
     * value: "gif"
     * @const
     */
    "gif": "gif",

    /**
     * value: "mp3"
     * @const
     */
    "mp3": "mp3",

    /**
     * value: "jpg"
     * @const
     */
    "jpg": "jpg",

    /**
     * value: "png"
     * @const
     */
    "png": "png",

    /**
     * value: "bmp"
     * @const
     */
    "bmp": "bmp"
};


/**
 * Allowed values for the <code>fps</code> property.
 * @enum {Number}
 * @readonly
 */
Output['FpsEnum'] = {

    /**
     * value: 12
     * @const
     */
    "12": 12,

    /**
     * value: 15
     * @const
     */
    "15": 15,

    /**
     * value: 24
     * @const
     */
    "24": 24,

    /**
     * value: 25
     * @const
     */
    "25": 25,

    /**
     * value: 30
     * @const
     */
    "30": 30
};


/**
 * Allowed values for the <code>quality</code> property.
 * @enum {String}
 * @readonly
 */
Output['QualityEnum'] = {

    /**
     * value: "low"
     * @const
     */
    "low": "low",

    /**
     * value: "medium"
     * @const
     */
    "medium": "medium",

    /**
     * value: "high"
     * @const
     */
    "high": "high"
};


/**
 * Allowed values for the <code>resolution</code> property.
 * @enum {String}
 * @readonly
 */
Output['ResolutionEnum'] = {

    /**
     * value: "preview"
     * @const
     */
    "preview": "preview",

    /**
     * value: "mobile"
     * @const
     */
    "mobile": "mobile",

    /**
     * value: "sd"
     * @const
     */
    "sd": "sd",

    /**
     * value: "hd"
     * @const
     */
    "hd": "hd",

    /**
     * value: "1080"
     * @const
     */
    "1080": "1080"
};


/**
 * Allowed values for the <code>scaleTo</code> property.
 * @enum {String}
 * @readonly
 */
Output['ScaleToEnum'] = {

    /**
     * value: "preview"
     * @const
     */
    "preview": "preview",

    /**
     * value: "mobile"
     * @const
     */
    "mobile": "mobile",

    /**
     * value: "sd"
     * @const
     */
    "sd": "sd",

    /**
     * value: "hd"
     * @const
     */
    "hd": "hd",

    /**
     * value: "1080"
     * @const
     */
    "1080": "1080"
};



export default Output;

