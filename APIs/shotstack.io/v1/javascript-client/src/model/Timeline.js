/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Font from './Font';
import Soundtrack from './Soundtrack';
import Track from './Track';

/**
 * The Timeline model module.
 * @module model/Timeline
 * @version v1
 */
class Timeline {
    /**
     * Constructs a new <code>Timeline</code>.
     * A timeline represents the contents of a video edit over time, an audio edit over time, in seconds, or an image layout. A timeline consists of layers called tracks. Tracks are composed of titles, images, audio, html or video segments referred to as clips which are placed along the track at specific starting point and lasting for a specific amount of time.
     * @alias module:model/Timeline
     * @param tracks {Array.<module:model/Track>} A timeline consists of an array of tracks, each track containing clips. Tracks are layered on top of each other in the same order they are added to the array with the top most track layered over the top of those below it. Ensure that a track containing titles is the top most track so that it is displayed above videos and images.
     */
    constructor(tracks) { 
        
        Timeline.initialize(this, tracks);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tracks) { 
        obj['background'] = '#000000';
        obj['cache'] = true;
        obj['tracks'] = tracks;
    }

    /**
     * Constructs a <code>Timeline</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Timeline} obj Optional instance to populate.
     * @return {module:model/Timeline} The populated <code>Timeline</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Timeline();

            if (data.hasOwnProperty('background')) {
                obj['background'] = ApiClient.convertToType(data['background'], 'String');
            }
            if (data.hasOwnProperty('cache')) {
                obj['cache'] = ApiClient.convertToType(data['cache'], 'Boolean');
            }
            if (data.hasOwnProperty('fonts')) {
                obj['fonts'] = ApiClient.convertToType(data['fonts'], [Font]);
            }
            if (data.hasOwnProperty('soundtrack')) {
                obj['soundtrack'] = Soundtrack.constructFromObject(data['soundtrack']);
            }
            if (data.hasOwnProperty('tracks')) {
                obj['tracks'] = ApiClient.convertToType(data['tracks'], [Track]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Timeline</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Timeline</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Timeline.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['background'] && !(typeof data['background'] === 'string' || data['background'] instanceof String)) {
            throw new Error("Expected the field `background` to be a primitive type in the JSON string but got " + data['background']);
        }
        if (data['fonts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fonts'])) {
                throw new Error("Expected the field `fonts` to be an array in the JSON data but got " + data['fonts']);
            }
            // validate the optional field `fonts` (array)
            for (const item of data['fonts']) {
                Font.validateJSON(item);
            };
        }
        // validate the optional field `soundtrack`
        if (data['soundtrack']) { // data not null
          Soundtrack.validateJSON(data['soundtrack']);
        }
        if (data['tracks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tracks'])) {
                throw new Error("Expected the field `tracks` to be an array in the JSON data but got " + data['tracks']);
            }
            // validate the optional field `tracks` (array)
            for (const item of data['tracks']) {
                Track.validateJSON(item);
            };
        }

        return true;
    }


}

Timeline.RequiredProperties = ["tracks"];

/**
 * A hexadecimal value for the timeline background colour. Defaults to #000000 (black).
 * @member {String} background
 * @default '#000000'
 */
Timeline.prototype['background'] = '#000000';

/**
 * Disable the caching of ingested source footage and assets. See  [caching](https://shotstack.gitbook.io/docs/guides/architecting-an-application/caching) for more details.
 * @member {Boolean} cache
 * @default true
 */
Timeline.prototype['cache'] = true;

/**
 * An array of custom fonts to be downloaded for use by the HTML assets.
 * @member {Array.<module:model/Font>} fonts
 */
Timeline.prototype['fonts'] = undefined;

/**
 * @member {module:model/Soundtrack} soundtrack
 */
Timeline.prototype['soundtrack'] = undefined;

/**
 * A timeline consists of an array of tracks, each track containing clips. Tracks are layered on top of each other in the same order they are added to the array with the top most track layered over the top of those below it. Ensure that a track containing titles is the top most track so that it is displayed above videos and images.
 * @member {Array.<module:model/Track>} tracks
 */
Timeline.prototype['tracks'] = undefined;






export default Timeline;

