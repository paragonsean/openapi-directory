/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QueuedResponseData from './QueuedResponseData';

/**
 * The QueuedResponse model module.
 * @module model/QueuedResponse
 * @version v1
 */
class QueuedResponse {
    /**
     * Constructs a new <code>QueuedResponse</code>.
     * The response received after a [render request](#render-asset) is submitted. The render task is queued for rendering and a unique render id is returned.
     * @alias module:model/QueuedResponse
     * @param message {String} `Created`, `Bad Request` or an error message.
     * @param response {module:model/QueuedResponseData} 
     * @param success {Boolean} `true` if successfully queued, else `false`.
     */
    constructor(message, response, success) { 
        
        QueuedResponse.initialize(this, message, response, success);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, message, response, success) { 
        obj['message'] = message;
        obj['response'] = response;
        obj['success'] = success;
    }

    /**
     * Constructs a <code>QueuedResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueuedResponse} obj Optional instance to populate.
     * @return {module:model/QueuedResponse} The populated <code>QueuedResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueuedResponse();

            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('response')) {
                obj['response'] = QueuedResponseData.constructFromObject(data['response']);
            }
            if (data.hasOwnProperty('success')) {
                obj['success'] = ApiClient.convertToType(data['success'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueuedResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueuedResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QueuedResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // validate the optional field `response`
        if (data['response']) { // data not null
          QueuedResponseData.validateJSON(data['response']);
        }

        return true;
    }


}

QueuedResponse.RequiredProperties = ["message", "response", "success"];

/**
 * `Created`, `Bad Request` or an error message.
 * @member {String} message
 */
QueuedResponse.prototype['message'] = undefined;

/**
 * @member {module:model/QueuedResponseData} response
 */
QueuedResponse.prototype['response'] = undefined;

/**
 * `true` if successfully queued, else `false`.
 * @member {Boolean} success
 */
QueuedResponse.prototype['success'] = undefined;






export default QueuedResponse;

