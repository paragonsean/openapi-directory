/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Crop model module.
 * @module model/Crop
 * @version v1
 */
class Crop {
    /**
     * Constructs a new <code>Crop</code>.
     * Crop the sides of an asset by a relative amount. The size of the crop is specified using a scale between 0 and 1, relative to the screen width - i.e a left crop of 0.5 will crop half of the asset from the left, a top crop  of 0.25 will crop the top by quarter of the asset.
     * @alias module:model/Crop
     */
    constructor() { 
        
        Crop.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Crop</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Crop} obj Optional instance to populate.
     * @return {module:model/Crop} The populated <code>Crop</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Crop();

            if (data.hasOwnProperty('bottom')) {
                obj['bottom'] = ApiClient.convertToType(data['bottom'], 'Number');
            }
            if (data.hasOwnProperty('left')) {
                obj['left'] = ApiClient.convertToType(data['left'], 'Number');
            }
            if (data.hasOwnProperty('right')) {
                obj['right'] = ApiClient.convertToType(data['right'], 'Number');
            }
            if (data.hasOwnProperty('top')) {
                obj['top'] = ApiClient.convertToType(data['top'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Crop</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Crop</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Crop from the bottom of the asset
 * @member {Number} bottom
 */
Crop.prototype['bottom'] = undefined;

/**
 * Crop from the left of the asset
 * @member {Number} left
 */
Crop.prototype['left'] = undefined;

/**
 * Crop from the left of the asset
 * @member {Number} right
 */
Crop.prototype['right'] = undefined;

/**
 * Crop from the top of the asset
 * @member {Number} top
 */
Crop.prototype['top'] = undefined;






export default Crop;

