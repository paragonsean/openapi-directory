/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Clip from './Clip';

/**
 * The Track model module.
 * @module model/Track
 * @version v1
 */
class Track {
    /**
     * Constructs a new <code>Track</code>.
     * A track contains an array of clips. Tracks are layered on top of each other in the order in the array. The top most track will render on top of those below it.
     * @alias module:model/Track
     * @param clips {Array.<module:model/Clip>} An array of Clips comprising of TitleClip, ImageClip or VideoClip.
     */
    constructor(clips) { 
        
        Track.initialize(this, clips);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clips) { 
        obj['clips'] = clips;
    }

    /**
     * Constructs a <code>Track</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Track} obj Optional instance to populate.
     * @return {module:model/Track} The populated <code>Track</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Track();

            if (data.hasOwnProperty('clips')) {
                obj['clips'] = ApiClient.convertToType(data['clips'], [Clip]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Track</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Track</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Track.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['clips']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['clips'])) {
                throw new Error("Expected the field `clips` to be an array in the JSON data but got " + data['clips']);
            }
            // validate the optional field `clips` (array)
            for (const item of data['clips']) {
                Clip.validateJSON(item);
            };
        }

        return true;
    }


}

Track.RequiredProperties = ["clips"];

/**
 * An array of Clips comprising of TitleClip, ImageClip or VideoClip.
 * @member {Array.<module:model/Clip>} clips
 */
Track.prototype['clips'] = undefined;






export default Track;

