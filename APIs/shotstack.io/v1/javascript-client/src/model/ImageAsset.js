/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Crop from './Crop';

/**
 * The ImageAsset model module.
 * @module model/ImageAsset
 * @version v1
 */
class ImageAsset {
    /**
     * Constructs a new <code>ImageAsset</code>.
     * The ImageAsset is used to create video from images to compose an image. The src must be a publicly accessible URL to an image resource such as a jpg or png file.
     * @alias module:model/ImageAsset
     * @param src {String} The image source URL. The URL must be publicly accessible or include credentials.
     * @param type {String} The type of asset - set to `image` for images.
     */
    constructor(src, type) { 
        
        ImageAsset.initialize(this, src, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, src, type) { 
        obj['src'] = src;
        obj['type'] = type || 'image';
    }

    /**
     * Constructs a <code>ImageAsset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageAsset} obj Optional instance to populate.
     * @return {module:model/ImageAsset} The populated <code>ImageAsset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageAsset();

            if (data.hasOwnProperty('crop')) {
                obj['crop'] = Crop.constructFromObject(data['crop']);
            }
            if (data.hasOwnProperty('src')) {
                obj['src'] = ApiClient.convertToType(data['src'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageAsset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageAsset</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImageAsset.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `crop`
        if (data['crop']) { // data not null
          Crop.validateJSON(data['crop']);
        }
        // ensure the json data is a string
        if (data['src'] && !(typeof data['src'] === 'string' || data['src'] instanceof String)) {
            throw new Error("Expected the field `src` to be a primitive type in the JSON string but got " + data['src']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ImageAsset.RequiredProperties = ["src", "type"];

/**
 * @member {module:model/Crop} crop
 */
ImageAsset.prototype['crop'] = undefined;

/**
 * The image source URL. The URL must be publicly accessible or include credentials.
 * @member {String} src
 */
ImageAsset.prototype['src'] = undefined;

/**
 * The type of asset - set to `image` for images.
 * @member {String} type
 * @default 'image'
 */
ImageAsset.prototype['type'] = 'image';






export default ImageAsset;

