/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClipAsset from './ClipAsset';
import Offset from './Offset';
import Transition from './Transition';

/**
 * The Clip model module.
 * @module model/Clip
 * @version v1
 */
class Clip {
    /**
     * Constructs a new <code>Clip</code>.
     * A clip is a container for a specific type of asset, i.e. a title, image, video, audio or html. You use a Clip to define when an asset will display on the timeline, how long it will play for and transitions, filters and effects to apply to it.
     * @alias module:model/Clip
     * @param asset {module:model/ClipAsset} 
     * @param length {Number} The length, in seconds, the Clip should play for.
     * @param start {Number} The start position of the Clip on the timeline, in seconds.
     */
    constructor(asset, length, start) { 
        
        Clip.initialize(this, asset, length, start);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, asset, length, start) { 
        obj['asset'] = asset;
        obj['fit'] = 'crop';
        obj['length'] = length;
        obj['opacity'] = 1;
        obj['position'] = 'center';
        obj['start'] = start;
    }

    /**
     * Constructs a <code>Clip</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Clip} obj Optional instance to populate.
     * @return {module:model/Clip} The populated <code>Clip</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Clip();

            if (data.hasOwnProperty('asset')) {
                obj['asset'] = ClipAsset.constructFromObject(data['asset']);
            }
            if (data.hasOwnProperty('effect')) {
                obj['effect'] = ApiClient.convertToType(data['effect'], 'String');
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('fit')) {
                obj['fit'] = ApiClient.convertToType(data['fit'], 'String');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = Offset.constructFromObject(data['offset']);
            }
            if (data.hasOwnProperty('opacity')) {
                obj['opacity'] = ApiClient.convertToType(data['opacity'], 'Number');
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = ApiClient.convertToType(data['position'], 'String');
            }
            if (data.hasOwnProperty('scale')) {
                obj['scale'] = ApiClient.convertToType(data['scale'], 'Number');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Number');
            }
            if (data.hasOwnProperty('transition')) {
                obj['transition'] = Transition.constructFromObject(data['transition']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Clip</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Clip</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Clip.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `asset`
        if (data['asset']) { // data not null
          ClipAsset.validateJSON(data['asset']);
        }
        // ensure the json data is a string
        if (data['effect'] && !(typeof data['effect'] === 'string' || data['effect'] instanceof String)) {
            throw new Error("Expected the field `effect` to be a primitive type in the JSON string but got " + data['effect']);
        }
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        // ensure the json data is a string
        if (data['fit'] && !(typeof data['fit'] === 'string' || data['fit'] instanceof String)) {
            throw new Error("Expected the field `fit` to be a primitive type in the JSON string but got " + data['fit']);
        }
        // validate the optional field `offset`
        if (data['offset']) { // data not null
          Offset.validateJSON(data['offset']);
        }
        // ensure the json data is a string
        if (data['position'] && !(typeof data['position'] === 'string' || data['position'] instanceof String)) {
            throw new Error("Expected the field `position` to be a primitive type in the JSON string but got " + data['position']);
        }
        // validate the optional field `transition`
        if (data['transition']) { // data not null
          Transition.validateJSON(data['transition']);
        }

        return true;
    }


}

Clip.RequiredProperties = ["asset", "length", "start"];

/**
 * @member {module:model/ClipAsset} asset
 */
Clip.prototype['asset'] = undefined;

/**
 * A motion effect to apply to the Clip. <ul>   <li>`zoomIn` - slow zoom in</li>   <li>`zoomOut` - slow zoom out</li>   <li>`slideLeft` - slow slide (pan) left</li>   <li>`slideRight` - slow slide (pan) right</li>   <li>`slideUp` - slow slide (pan) up</li>   <li>`slideDown` - slow slide (pan) down</li> </ul>
 * @member {module:model/Clip.EffectEnum} effect
 */
Clip.prototype['effect'] = undefined;

/**
 * A filter effect to apply to the Clip. <ul>   <li>`boost` - boost contrast and saturation</li>   <li>`contrast` - increase contrast</li>   <li>`darken` - darken the scene</li>   <li>`greyscale` - remove colour</li>   <li>`lighten` - lighten the scene</li>   <li>`muted` - reduce saturation and contrast</li>   <li>`invert` - invert colors</li> </ul>
 * @member {module:model/Clip.FilterEnum} filter
 */
Clip.prototype['filter'] = undefined;

/**
 * Set how the asset should be scaled to fit the viewport using one of the following options:    <ul>     <li>`cover` - stretch the asset to fill the viewport without maintaining the aspect ratio.</li>     <li>`contain` - fit the entire asset within the viewport while maintaining the original aspect ratio.</li>     <li>`crop` - scale the asset to fill the viewport while maintaining the aspect ratio. The asset will be cropped if it exceeds the bounds of the viewport.</li>     <li>`none` - preserves the original asset dimensions and does not apply any scaling.</li>   </ul>
 * @member {module:model/Clip.FitEnum} fit
 * @default 'crop'
 */
Clip.prototype['fit'] = 'crop';

/**
 * The length, in seconds, the Clip should play for.
 * @member {Number} length
 */
Clip.prototype['length'] = undefined;

/**
 * @member {module:model/Offset} offset
 */
Clip.prototype['offset'] = undefined;

/**
 * Sets the opacity of the Clip where 1 is opaque and 0 is transparent.
 * @member {Number} opacity
 * @default 1
 */
Clip.prototype['opacity'] = 1;

/**
 * Place the asset in one of nine predefined positions of the viewport. This is most effective for when the asset is scaled and you want to position the element to a specific position. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>
 * @member {module:model/Clip.PositionEnum} position
 * @default 'center'
 */
Clip.prototype['position'] = 'center';

/**
 * Scale the asset to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale asset to half the size of the viewport. This is useful for picture-in-picture video and  scaling images such as logos and watermarks.
 * @member {Number} scale
 */
Clip.prototype['scale'] = undefined;

/**
 * The start position of the Clip on the timeline, in seconds.
 * @member {Number} start
 */
Clip.prototype['start'] = undefined;

/**
 * @member {module:model/Transition} transition
 */
Clip.prototype['transition'] = undefined;





/**
 * Allowed values for the <code>effect</code> property.
 * @enum {String}
 * @readonly
 */
Clip['EffectEnum'] = {

    /**
     * value: "zoomIn"
     * @const
     */
    "zoomIn": "zoomIn",

    /**
     * value: "zoomOut"
     * @const
     */
    "zoomOut": "zoomOut",

    /**
     * value: "slideLeft"
     * @const
     */
    "slideLeft": "slideLeft",

    /**
     * value: "slideRight"
     * @const
     */
    "slideRight": "slideRight",

    /**
     * value: "slideUp"
     * @const
     */
    "slideUp": "slideUp",

    /**
     * value: "slideDown"
     * @const
     */
    "slideDown": "slideDown"
};


/**
 * Allowed values for the <code>filter</code> property.
 * @enum {String}
 * @readonly
 */
Clip['FilterEnum'] = {

    /**
     * value: "boost"
     * @const
     */
    "boost": "boost",

    /**
     * value: "contrast"
     * @const
     */
    "contrast": "contrast",

    /**
     * value: "darken"
     * @const
     */
    "darken": "darken",

    /**
     * value: "greyscale"
     * @const
     */
    "greyscale": "greyscale",

    /**
     * value: "lighten"
     * @const
     */
    "lighten": "lighten",

    /**
     * value: "muted"
     * @const
     */
    "muted": "muted",

    /**
     * value: "negative"
     * @const
     */
    "negative": "negative"
};


/**
 * Allowed values for the <code>fit</code> property.
 * @enum {String}
 * @readonly
 */
Clip['FitEnum'] = {

    /**
     * value: "cover"
     * @const
     */
    "cover": "cover",

    /**
     * value: "contain"
     * @const
     */
    "contain": "contain",

    /**
     * value: "crop"
     * @const
     */
    "crop": "crop",

    /**
     * value: "none"
     * @const
     */
    "none": "none"
};


/**
 * Allowed values for the <code>position</code> property.
 * @enum {String}
 * @readonly
 */
Clip['PositionEnum'] = {

    /**
     * value: "top"
     * @const
     */
    "top": "top",

    /**
     * value: "topRight"
     * @const
     */
    "topRight": "topRight",

    /**
     * value: "right"
     * @const
     */
    "right": "right",

    /**
     * value: "bottomRight"
     * @const
     */
    "bottomRight": "bottomRight",

    /**
     * value: "bottom"
     * @const
     */
    "bottom": "bottom",

    /**
     * value: "bottomLeft"
     * @const
     */
    "bottomLeft": "bottomLeft",

    /**
     * value: "left"
     * @const
     */
    "left": "left",

    /**
     * value: "topLeft"
     * @const
     */
    "topLeft": "topLeft",

    /**
     * value: "center"
     * @const
     */
    "center": "center"
};



export default Clip;

