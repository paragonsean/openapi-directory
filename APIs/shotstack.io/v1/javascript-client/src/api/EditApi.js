/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Edit from '../model/Edit';
import QueuedResponse from '../model/QueuedResponse';
import RenderResponse from '../model/RenderResponse';

/**
* Edit service.
* @module api/EditApi
* @version v1
*/
export default class EditApi {

    /**
    * Constructs a new EditApi. 
    * @alias module:api/EditApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getRender operation.
     * @callback module:api/EditApi~getRenderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RenderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Render Status
     * Get the rendering status, temporary asset url and details of a render by ID.  **base URL:** https://api.shotstack.io/{version}
     * @param {String} id The id of the timeline render task in UUID format
     * @param {module:api/EditApi~getRenderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RenderResponse}
     */
    getRender(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRender");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DeveloperKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RenderResponse;
      return this.apiClient.callApi(
        '/render/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRender operation.
     * @callback module:api/EditApi~postRenderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueuedResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Render Asset
     * Queue and render the contents of a timeline as a video, image or audio file.
     * @param {module:model/Edit} edit The video, image or audio edit specified using JSON.  **base URL:** https://api.shotstack.io/{version}
     * @param {module:api/EditApi~postRenderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueuedResponse}
     */
    postRender(edit, callback) {
      let postBody = edit;
      // verify the required parameter 'edit' is set
      if (edit === undefined || edit === null) {
        throw new Error("Missing the required parameter 'edit' when calling postRender");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DeveloperKey'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = QueuedResponse;
      return this.apiClient.callApi(
        '/render', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
