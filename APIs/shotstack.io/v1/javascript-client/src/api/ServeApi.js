/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssetRenderResponse from '../model/AssetRenderResponse';
import AssetResponse from '../model/AssetResponse';

/**
* Serve service.
* @module api/ServeApi
* @version v1
*/
export default class ServeApi {

    /**
    * Constructs a new ServeApi. 
    * @alias module:api/ServeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteAsset operation.
     * @callback module:api/ServeApi~deleteAssetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Asset
     * Delete an asset by its asset id. If a render creates multiple assets, such as thumbnail and poster images, each asset must be deleted individually by the asset id.  **base URL:** https://api.shotstack.io/serve/{version}
     * @param {String} id The id of the asset in UUID format
     * @param {module:api/ServeApi~deleteAssetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAsset(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteAsset");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DeveloperKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/assets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAsset operation.
     * @callback module:api/ServeApi~getAssetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Asset
     * The Serve API is used to interact with, and delete hosted assets including videos, images, audio files,  thumbnails and poster images. Use this endpoint to fetch an asset by asset id. Note that an asset id is unique for each asset and different from the render id.  **base URL:** https://api.shotstack.io/serve/{version}
     * @param {String} id The id of the asset in UUID format
     * @param {module:api/ServeApi~getAssetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetResponse}
     */
    getAsset(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAsset");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DeveloperKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetResponse;
      return this.apiClient.callApi(
        '/assets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssetByRenderId operation.
     * @callback module:api/ServeApi~getAssetByRenderIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssetRenderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Asset by Render ID
     * A render may generate more than one file, such as a video, thumbnail and poster image. When the assets are created the only known id is the render id returned by the original [render request](#render-video), status  request or webhook. This endpoint lets you look up one or more assets by the render id.  **base URL:** https://api.shotstack.io/serve/{version}
     * @param {String} id The render id associated with the asset in UUID format
     * @param {module:api/ServeApi~getAssetByRenderIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssetRenderResponse}
     */
    getAssetByRenderId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAssetByRenderId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['DeveloperKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssetRenderResponse;
      return this.apiClient.callApi(
        '/assets/render/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
