/**
 * Shotstack
 * Shotstack is a video, image and audio editing service that allows for the automated generation of videos, images and audio using JSON and a RESTful API.  You arrange and configure an edit and POST it to the API which will render your media and provide a file  location when complete.  For more details visit [shotstack.io](https://shotstack.io) or checkout our [getting started](https://shotstack.gitbook.io/docs/guides/getting-started) documentation. There are two main API's, one for editing and generating assets (Edit API) and one for managing hosted assets (Serve API).  The Edit API base URL is: <b>https://api.shotstack.io/{version}</b>  The Serve API base URL is: <b>https://api.shotstack.io/serve/{version}</b>
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Shotstack);
  }
}(this, function(expect, Shotstack) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Shotstack.Timeline();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Timeline', function() {
    it('should create an instance of Timeline', function() {
      // uncomment below and update the code to test Timeline
      //var instance = new Shotstack.Timeline();
      //expect(instance).to.be.a(Shotstack.Timeline);
    });

    it('should have the property background (base name: "background")', function() {
      // uncomment below and update the code to test the property background
      //var instance = new Shotstack.Timeline();
      //expect(instance).to.be();
    });

    it('should have the property cache (base name: "cache")', function() {
      // uncomment below and update the code to test the property cache
      //var instance = new Shotstack.Timeline();
      //expect(instance).to.be();
    });

    it('should have the property fonts (base name: "fonts")', function() {
      // uncomment below and update the code to test the property fonts
      //var instance = new Shotstack.Timeline();
      //expect(instance).to.be();
    });

    it('should have the property soundtrack (base name: "soundtrack")', function() {
      // uncomment below and update the code to test the property soundtrack
      //var instance = new Shotstack.Timeline();
      //expect(instance).to.be();
    });

    it('should have the property tracks (base name: "tracks")', function() {
      // uncomment below and update the code to test the property tracks
      //var instance = new Shotstack.Timeline();
      //expect(instance).to.be();
    });

  });

}));
