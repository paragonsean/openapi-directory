# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.font import Font
from openapi_server.models.soundtrack import Soundtrack
from openapi_server.models.track import Track
from openapi_server import util


class Timeline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background: str='#000000', cache: bool=True, fonts: List[Font]=None, soundtrack: Soundtrack=None, tracks: List[Track]=None):
        """Timeline - a model defined in OpenAPI

        :param background: The background of this Timeline.
        :param cache: The cache of this Timeline.
        :param fonts: The fonts of this Timeline.
        :param soundtrack: The soundtrack of this Timeline.
        :param tracks: The tracks of this Timeline.
        """
        self.openapi_types = {
            'background': str,
            'cache': bool,
            'fonts': List[Font],
            'soundtrack': Soundtrack,
            'tracks': List[Track]
        }

        self.attribute_map = {
            'background': 'background',
            'cache': 'cache',
            'fonts': 'fonts',
            'soundtrack': 'soundtrack',
            'tracks': 'tracks'
        }

        self._background = background
        self._cache = cache
        self._fonts = fonts
        self._soundtrack = soundtrack
        self._tracks = tracks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Timeline':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Timeline of this Timeline.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background(self):
        """Gets the background of this Timeline.

        A hexadecimal value for the timeline background colour. Defaults to #000000 (black).

        :return: The background of this Timeline.
        :rtype: str
        """
        return self._background

    @background.setter
    def background(self, background):
        """Sets the background of this Timeline.

        A hexadecimal value for the timeline background colour. Defaults to #000000 (black).

        :param background: The background of this Timeline.
        :type background: str
        """

        self._background = background

    @property
    def cache(self):
        """Gets the cache of this Timeline.

        Disable the caching of ingested source footage and assets. See  [caching](https://shotstack.gitbook.io/docs/guides/architecting-an-application/caching) for more details.

        :return: The cache of this Timeline.
        :rtype: bool
        """
        return self._cache

    @cache.setter
    def cache(self, cache):
        """Sets the cache of this Timeline.

        Disable the caching of ingested source footage and assets. See  [caching](https://shotstack.gitbook.io/docs/guides/architecting-an-application/caching) for more details.

        :param cache: The cache of this Timeline.
        :type cache: bool
        """

        self._cache = cache

    @property
    def fonts(self):
        """Gets the fonts of this Timeline.

        An array of custom fonts to be downloaded for use by the HTML assets.

        :return: The fonts of this Timeline.
        :rtype: List[Font]
        """
        return self._fonts

    @fonts.setter
    def fonts(self, fonts):
        """Sets the fonts of this Timeline.

        An array of custom fonts to be downloaded for use by the HTML assets.

        :param fonts: The fonts of this Timeline.
        :type fonts: List[Font]
        """

        self._fonts = fonts

    @property
    def soundtrack(self):
        """Gets the soundtrack of this Timeline.


        :return: The soundtrack of this Timeline.
        :rtype: Soundtrack
        """
        return self._soundtrack

    @soundtrack.setter
    def soundtrack(self, soundtrack):
        """Sets the soundtrack of this Timeline.


        :param soundtrack: The soundtrack of this Timeline.
        :type soundtrack: Soundtrack
        """

        self._soundtrack = soundtrack

    @property
    def tracks(self):
        """Gets the tracks of this Timeline.

        A timeline consists of an array of tracks, each track containing clips. Tracks are layered on top of each other in the same order they are added to the array with the top most track layered over the top of those below it. Ensure that a track containing titles is the top most track so that it is displayed above videos and images.

        :return: The tracks of this Timeline.
        :rtype: List[Track]
        """
        return self._tracks

    @tracks.setter
    def tracks(self, tracks):
        """Sets the tracks of this Timeline.

        A timeline consists of an array of tracks, each track containing clips. Tracks are layered on top of each other in the same order they are added to the array with the top most track layered over the top of those below it. Ensure that a track containing titles is the top most track so that it is displayed above videos and images.

        :param tracks: The tracks of this Timeline.
        :type tracks: List[Track]
        """
        if tracks is None:
            raise ValueError("Invalid value for `tracks`, must not be `None`")

        self._tracks = tracks
