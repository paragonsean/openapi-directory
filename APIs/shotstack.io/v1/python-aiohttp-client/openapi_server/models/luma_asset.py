# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LumaAsset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, src: str=None, trim: float=None, type: str='luma'):
        """LumaAsset - a model defined in OpenAPI

        :param src: The src of this LumaAsset.
        :param trim: The trim of this LumaAsset.
        :param type: The type of this LumaAsset.
        """
        self.openapi_types = {
            'src': str,
            'trim': float,
            'type': str
        }

        self.attribute_map = {
            'src': 'src',
            'trim': 'trim',
            'type': 'type'
        }

        self._src = src
        self._trim = trim
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LumaAsset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LumaAsset of this LumaAsset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def src(self):
        """Gets the src of this LumaAsset.

        The luma matte source URL. The URL must be publicly accessible or include credentials.

        :return: The src of this LumaAsset.
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this LumaAsset.

        The luma matte source URL. The URL must be publicly accessible or include credentials.

        :param src: The src of this LumaAsset.
        :type src: str
        """
        if src is None:
            raise ValueError("Invalid value for `src`, must not be `None`")

        self._src = src

    @property
    def trim(self):
        """Gets the trim of this LumaAsset.

        The start trim point of the luma matte clip, in seconds (defaults to 0). Videos will start from the in trim point. A luma matte video will play until the file ends or the Clip length is reached.

        :return: The trim of this LumaAsset.
        :rtype: float
        """
        return self._trim

    @trim.setter
    def trim(self, trim):
        """Sets the trim of this LumaAsset.

        The start trim point of the luma matte clip, in seconds (defaults to 0). Videos will start from the in trim point. A luma matte video will play until the file ends or the Clip length is reached.

        :param trim: The trim of this LumaAsset.
        :type trim: float
        """

        self._trim = trim

    @property
    def type(self):
        """Gets the type of this LumaAsset.

        The type of asset - set to `luma` for luma mattes.

        :return: The type of this LumaAsset.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LumaAsset.

        The type of asset - set to `luma` for luma mattes.

        :param type: The type of this LumaAsset.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
