# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Soundtrack(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, effect: str=None, src: str=None, volume: float=1):
        """Soundtrack - a model defined in OpenAPI

        :param effect: The effect of this Soundtrack.
        :param src: The src of this Soundtrack.
        :param volume: The volume of this Soundtrack.
        """
        self.openapi_types = {
            'effect': str,
            'src': str,
            'volume': float
        }

        self.attribute_map = {
            'effect': 'effect',
            'src': 'src',
            'volume': 'volume'
        }

        self._effect = effect
        self._src = src
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Soundtrack':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Soundtrack of this Soundtrack.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def effect(self):
        """Gets the effect of this Soundtrack.

        The effect to apply to the audio file <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>

        :return: The effect of this Soundtrack.
        :rtype: str
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """Sets the effect of this Soundtrack.

        The effect to apply to the audio file <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>

        :param effect: The effect of this Soundtrack.
        :type effect: str
        """
        allowed_values = ["fadeIn", "fadeOut", "fadeInFadeOut"]  # noqa: E501
        if effect not in allowed_values:
            raise ValueError(
                "Invalid value for `effect` ({0}), must be one of {1}"
                .format(effect, allowed_values)
            )

        self._effect = effect

    @property
    def src(self):
        """Gets the src of this Soundtrack.

        The URL of the mp3 audio file. The URL must be publicly accessible or include credentials.

        :return: The src of this Soundtrack.
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this Soundtrack.

        The URL of the mp3 audio file. The URL must be publicly accessible or include credentials.

        :param src: The src of this Soundtrack.
        :type src: str
        """
        if src is None:
            raise ValueError("Invalid value for `src`, must not be `None`")

        self._src = src

    @property
    def volume(self):
        """Gets the volume of this Soundtrack.

        Set the volume for the soundtrack between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).

        :return: The volume of this Soundtrack.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Soundtrack.

        Set the volume for the soundtrack between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).

        :param volume: The volume of this Soundtrack.
        :type volume: float
        """

        self._volume = volume
