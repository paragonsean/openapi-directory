# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HtmlAsset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background: str='transparent', css: str=None, height: int=None, html: str=None, position: str='center', type: str='html', width: int=None):
        """HtmlAsset - a model defined in OpenAPI

        :param background: The background of this HtmlAsset.
        :param css: The css of this HtmlAsset.
        :param height: The height of this HtmlAsset.
        :param html: The html of this HtmlAsset.
        :param position: The position of this HtmlAsset.
        :param type: The type of this HtmlAsset.
        :param width: The width of this HtmlAsset.
        """
        self.openapi_types = {
            'background': str,
            'css': str,
            'height': int,
            'html': str,
            'position': str,
            'type': str,
            'width': int
        }

        self.attribute_map = {
            'background': 'background',
            'css': 'css',
            'height': 'height',
            'html': 'html',
            'position': 'position',
            'type': 'type',
            'width': 'width'
        }

        self._background = background
        self._css = css
        self._height = height
        self._html = html
        self._position = position
        self._type = type
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HtmlAsset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HtmlAsset of this HtmlAsset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background(self):
        """Gets the background of this HtmlAsset.

        Apply a background color behind the HTML bounding box using. Set the text color using hexadecimal  color notation. Transparency is supported by setting the first two characters of the hex string  (opposite to HTML), i.e. #80ffffff will be white with 50% transparency.

        :return: The background of this HtmlAsset.
        :rtype: str
        """
        return self._background

    @background.setter
    def background(self, background):
        """Sets the background of this HtmlAsset.

        Apply a background color behind the HTML bounding box using. Set the text color using hexadecimal  color notation. Transparency is supported by setting the first two characters of the hex string  (opposite to HTML), i.e. #80ffffff will be white with 50% transparency.

        :param background: The background of this HtmlAsset.
        :type background: str
        """

        self._background = background

    @property
    def css(self):
        """Gets the css of this HtmlAsset.

        The CSS text string to apply styling to the HTML. See list of  [support CSS properties](https://shotstack.gitbook.io/docs/guides/architecting-an-application/html-support#supported-html-tags).

        :return: The css of this HtmlAsset.
        :rtype: str
        """
        return self._css

    @css.setter
    def css(self, css):
        """Sets the css of this HtmlAsset.

        The CSS text string to apply styling to the HTML. See list of  [support CSS properties](https://shotstack.gitbook.io/docs/guides/architecting-an-application/html-support#supported-html-tags).

        :param css: The css of this HtmlAsset.
        :type css: str
        """

        self._css = css

    @property
    def height(self):
        """Gets the height of this HtmlAsset.

        Set the width of the HTML asset bounding box in pixels. Text and elements will be masked if they exceed the  height of the bounding box.

        :return: The height of this HtmlAsset.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this HtmlAsset.

        Set the width of the HTML asset bounding box in pixels. Text and elements will be masked if they exceed the  height of the bounding box.

        :param height: The height of this HtmlAsset.
        :type height: int
        """

        self._height = height

    @property
    def html(self):
        """Gets the html of this HtmlAsset.

        The HTML text string. See list of [supported HTML tags](https://shotstack.gitbook.io/docs/guides/architecting-an-application/html-support#supported-html-tags).

        :return: The html of this HtmlAsset.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this HtmlAsset.

        The HTML text string. See list of [supported HTML tags](https://shotstack.gitbook.io/docs/guides/architecting-an-application/html-support#supported-html-tags).

        :param html: The html of this HtmlAsset.
        :type html: str
        """
        if html is None:
            raise ValueError("Invalid value for `html`, must not be `None`")

        self._html = html

    @property
    def position(self):
        """Gets the position of this HtmlAsset.

        Place the HTML in one of nine predefined positions within the HTML area. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>

        :return: The position of this HtmlAsset.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this HtmlAsset.

        Place the HTML in one of nine predefined positions within the HTML area. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>

        :param position: The position of this HtmlAsset.
        :type position: str
        """
        allowed_values = ["top", "topRight", "right", "bottomRight", "bottom", "bottomLeft", "left", "topLeft", "center"]  # noqa: E501
        if position not in allowed_values:
            raise ValueError(
                "Invalid value for `position` ({0}), must be one of {1}"
                .format(position, allowed_values)
            )

        self._position = position

    @property
    def type(self):
        """Gets the type of this HtmlAsset.

        The type of asset - set to `html` for HTML.

        :return: The type of this HtmlAsset.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HtmlAsset.

        The type of asset - set to `html` for HTML.

        :param type: The type of this HtmlAsset.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def width(self):
        """Gets the width of this HtmlAsset.

        Set the width of the HTML asset bounding box in pixels. Text will wrap to fill the bounding box.

        :return: The width of this HtmlAsset.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this HtmlAsset.

        Set the width of the HTML asset bounding box in pixels. Text will wrap to fill the bounding box.

        :param width: The width of this HtmlAsset.
        :type width: int
        """

        self._width = width
