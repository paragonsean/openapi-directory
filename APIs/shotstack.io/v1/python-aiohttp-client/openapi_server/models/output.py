# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.output_destinations_inner import OutputDestinationsInner
from openapi_server.models.poster import Poster
from openapi_server.models.range import Range
from openapi_server.models.size import Size
from openapi_server.models.thumbnail import Thumbnail
from openapi_server import util


class Output(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspect_ratio: str=None, destinations: List[OutputDestinationsInner]=None, format: str=None, fps: int=25, poster: Poster=None, quality: str='medium', range: Range=None, resolution: str=None, scale_to: str=None, size: Size=None, thumbnail: Thumbnail=None):
        """Output - a model defined in OpenAPI

        :param aspect_ratio: The aspect_ratio of this Output.
        :param destinations: The destinations of this Output.
        :param format: The format of this Output.
        :param fps: The fps of this Output.
        :param poster: The poster of this Output.
        :param quality: The quality of this Output.
        :param range: The range of this Output.
        :param resolution: The resolution of this Output.
        :param scale_to: The scale_to of this Output.
        :param size: The size of this Output.
        :param thumbnail: The thumbnail of this Output.
        """
        self.openapi_types = {
            'aspect_ratio': str,
            'destinations': List[OutputDestinationsInner],
            'format': str,
            'fps': int,
            'poster': Poster,
            'quality': str,
            'range': Range,
            'resolution': str,
            'scale_to': str,
            'size': Size,
            'thumbnail': Thumbnail
        }

        self.attribute_map = {
            'aspect_ratio': 'aspectRatio',
            'destinations': 'destinations',
            'format': 'format',
            'fps': 'fps',
            'poster': 'poster',
            'quality': 'quality',
            'range': 'range',
            'resolution': 'resolution',
            'scale_to': 'scaleTo',
            'size': 'size',
            'thumbnail': 'thumbnail'
        }

        self._aspect_ratio = aspect_ratio
        self._destinations = destinations
        self._format = format
        self._fps = fps
        self._poster = poster
        self._quality = quality
        self._range = range
        self._resolution = resolution
        self._scale_to = scale_to
        self._size = size
        self._thumbnail = thumbnail

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Output':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Output of this Output.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspect_ratio(self):
        """Gets the aspect_ratio of this Output.

        The aspect ratio (shape) of the video or image. Useful for social media output formats. Options are: <ul>   <li>`16:9` - regular landscape/horizontal aspect ratio (default)</li>   <li>`9:16` - vertical/portrait aspect ratio</li>   <li>`1:1` - square aspect ratio</li>   <li>`4:5` - short vertical/portrait aspect ratio</li>   <li>`4:3` - legacy TV aspect ratio</li> </ul>

        :return: The aspect_ratio of this Output.
        :rtype: str
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio):
        """Sets the aspect_ratio of this Output.

        The aspect ratio (shape) of the video or image. Useful for social media output formats. Options are: <ul>   <li>`16:9` - regular landscape/horizontal aspect ratio (default)</li>   <li>`9:16` - vertical/portrait aspect ratio</li>   <li>`1:1` - square aspect ratio</li>   <li>`4:5` - short vertical/portrait aspect ratio</li>   <li>`4:3` - legacy TV aspect ratio</li> </ul>

        :param aspect_ratio: The aspect_ratio of this Output.
        :type aspect_ratio: str
        """
        allowed_values = ["969", "556", "61", "245", "243"]  # noqa: E501
        if aspect_ratio not in allowed_values:
            raise ValueError(
                "Invalid value for `aspect_ratio` ({0}), must be one of {1}"
                .format(aspect_ratio, allowed_values)
            )

        self._aspect_ratio = aspect_ratio

    @property
    def destinations(self):
        """Gets the destinations of this Output.

        A destination is a location where output files can be sent to for serving or hosting. By default all rendered assets are automatically sent to the Shotstack hosting destination. [DestinationShotstack](/#tocs_shotstackdestination) is currently the only option with plans to add more in the future such as S3, YouTube, Vimeo and Mux. If you do not require hosting you can opt-out using the  `exclude` property.

        :return: The destinations of this Output.
        :rtype: List[OutputDestinationsInner]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this Output.

        A destination is a location where output files can be sent to for serving or hosting. By default all rendered assets are automatically sent to the Shotstack hosting destination. [DestinationShotstack](/#tocs_shotstackdestination) is currently the only option with plans to add more in the future such as S3, YouTube, Vimeo and Mux. If you do not require hosting you can opt-out using the  `exclude` property.

        :param destinations: The destinations of this Output.
        :type destinations: List[OutputDestinationsInner]
        """

        self._destinations = destinations

    @property
    def format(self):
        """Gets the format of this Output.

        The output format and type of media file to generate. <ul>   <li>`mp4` - mp4 video file</li>   <li>`gif` - animated gif</li>   <li>`jpg` - jpg image file</li>   <li>`png` - png image file</li>   <li>`bmp` - bmp image file</li>   <li>`mp3` - mp3 audio file (audio only)</li> </ul>

        :return: The format of this Output.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Output.

        The output format and type of media file to generate. <ul>   <li>`mp4` - mp4 video file</li>   <li>`gif` - animated gif</li>   <li>`jpg` - jpg image file</li>   <li>`png` - png image file</li>   <li>`bmp` - bmp image file</li>   <li>`mp3` - mp3 audio file (audio only)</li> </ul>

        :param format: The format of this Output.
        :type format: str
        """
        allowed_values = ["mp4", "gif", "mp3", "jpg", "png", "bmp"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def fps(self):
        """Gets the fps of this Output.

        Override the default frames per second. Useful for when the source footage is recorded at 30fps, i.e. on  mobile devices. Lower frame rates can be used to add cinematic quality (24fps) or to create smaller file size/faster render times or animated gifs (12 or 15fps). Default is 25fps. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`25` - 25fps</li>   <li>`30` - 30fps</li> </ul>

        :return: The fps of this Output.
        :rtype: int
        """
        return self._fps

    @fps.setter
    def fps(self, fps):
        """Sets the fps of this Output.

        Override the default frames per second. Useful for when the source footage is recorded at 30fps, i.e. on  mobile devices. Lower frame rates can be used to add cinematic quality (24fps) or to create smaller file size/faster render times or animated gifs (12 or 15fps). Default is 25fps. <ul>   <li>`12` - 12fps</li>   <li>`15` - 15fps</li>   <li>`24` - 24fps</li>   <li>`25` - 25fps</li>   <li>`30` - 30fps</li> </ul>

        :param fps: The fps of this Output.
        :type fps: int
        """
        allowed_values = [12, 15, 24, 25, 30]  # noqa: E501
        if fps not in allowed_values:
            raise ValueError(
                "Invalid value for `fps` ({0}), must be one of {1}"
                .format(fps, allowed_values)
            )

        self._fps = fps

    @property
    def poster(self):
        """Gets the poster of this Output.


        :return: The poster of this Output.
        :rtype: Poster
        """
        return self._poster

    @poster.setter
    def poster(self, poster):
        """Sets the poster of this Output.


        :param poster: The poster of this Output.
        :type poster: Poster
        """

        self._poster = poster

    @property
    def quality(self):
        """Gets the quality of this Output.

        Adjust the output quality of the video, image or audio. Adjusting quality affects  render speed, download speeds and storage requirements due to file size. The default `medium` provides the most optimized choice for all three  factors. <ul>   <li>`low` - slightly reduced quality, smaller file size</li>   <li>`medium` - optimized quality, render speeds and file size</li>   <li>`high` - slightly increased quality, larger file size</li> </ul>

        :return: The quality of this Output.
        :rtype: str
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this Output.

        Adjust the output quality of the video, image or audio. Adjusting quality affects  render speed, download speeds and storage requirements due to file size. The default `medium` provides the most optimized choice for all three  factors. <ul>   <li>`low` - slightly reduced quality, smaller file size</li>   <li>`medium` - optimized quality, render speeds and file size</li>   <li>`high` - slightly increased quality, larger file size</li> </ul>

        :param quality: The quality of this Output.
        :type quality: str
        """
        allowed_values = ["low", "medium", "high"]  # noqa: E501
        if quality not in allowed_values:
            raise ValueError(
                "Invalid value for `quality` ({0}), must be one of {1}"
                .format(quality, allowed_values)
            )

        self._quality = quality

    @property
    def range(self):
        """Gets the range of this Output.


        :return: The range of this Output.
        :rtype: Range
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this Output.


        :param range: The range of this Output.
        :type range: Range
        """

        self._range = range

    @property
    def resolution(self):
        """Gets the resolution of this Output.

        The output resolution of the video or image. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @ 25fps</li>   <li>`hd` - 1280px x 720px @ 25fps</li>   <li>`1080` - 1920px x 1080px @ 25fps</li> </ul>

        :return: The resolution of this Output.
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this Output.

        The output resolution of the video or image. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @ 25fps</li>   <li>`hd` - 1280px x 720px @ 25fps</li>   <li>`1080` - 1920px x 1080px @ 25fps</li> </ul>

        :param resolution: The resolution of this Output.
        :type resolution: str
        """
        allowed_values = ["preview", "mobile", "sd", "hd", "1080"]  # noqa: E501
        if resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution` ({0}), must be one of {1}"
                .format(resolution, allowed_values)
            )

        self._resolution = resolution

    @property
    def scale_to(self):
        """Gets the scale_to of this Output.

        Override the resolution and scale the video or image to render at a different size. When using scaleTo the asset should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use scaleTo to output the file at SD and the text will be scaled to the correct size. This is useful if you want to create multiple asset sizes. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @25fps</li>   <li>`hd` - 1280px x 720px @25fps</li>   <li>`1080` - 1920px x 1080px @25fps</li> </ul>

        :return: The scale_to of this Output.
        :rtype: str
        """
        return self._scale_to

    @scale_to.setter
    def scale_to(self, scale_to):
        """Sets the scale_to of this Output.

        Override the resolution and scale the video or image to render at a different size. When using scaleTo the asset should be edited at the resolution dimensions, i.e. use font sizes that look best at HD, then use scaleTo to output the file at SD and the text will be scaled to the correct size. This is useful if you want to create multiple asset sizes. <ul>   <li>`preview` - 512px x 288px @ 15fps</li>   <li>`mobile` - 640px x 360px @ 25fps</li>   <li>`sd` - 1024px x 576px @25fps</li>   <li>`hd` - 1280px x 720px @25fps</li>   <li>`1080` - 1920px x 1080px @25fps</li> </ul>

        :param scale_to: The scale_to of this Output.
        :type scale_to: str
        """
        allowed_values = ["preview", "mobile", "sd", "hd", "1080"]  # noqa: E501
        if scale_to not in allowed_values:
            raise ValueError(
                "Invalid value for `scale_to` ({0}), must be one of {1}"
                .format(scale_to, allowed_values)
            )

        self._scale_to = scale_to

    @property
    def size(self):
        """Gets the size of this Output.


        :return: The size of this Output.
        :rtype: Size
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Output.


        :param size: The size of this Output.
        :type size: Size
        """

        self._size = size

    @property
    def thumbnail(self):
        """Gets the thumbnail of this Output.


        :return: The thumbnail of this Output.
        :rtype: Thumbnail
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this Output.


        :param thumbnail: The thumbnail of this Output.
        :type thumbnail: Thumbnail
        """

        self._thumbnail = thumbnail
