# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Font(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, src: str=None):
        """Font - a model defined in OpenAPI

        :param src: The src of this Font.
        """
        self.openapi_types = {
            'src': str
        }

        self.attribute_map = {
            'src': 'src'
        }

        self._src = src

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Font':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Font of this Font.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def src(self):
        """Gets the src of this Font.

        The URL of the font file. The URL must be publicly accessible or include credentials.

        :return: The src of this Font.
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this Font.

        The URL of the font file. The URL must be publicly accessible or include credentials.

        :param src: The src of this Font.
        :type src: str
        """
        if src is None:
            raise ValueError("Invalid value for `src`, must not be `None`")

        self._src = src
