# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.queued_response_data import QueuedResponseData
from openapi_server import util


class QueuedResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: str=None, response: QueuedResponseData=None, success: bool=None):
        """QueuedResponse - a model defined in OpenAPI

        :param message: The message of this QueuedResponse.
        :param response: The response of this QueuedResponse.
        :param success: The success of this QueuedResponse.
        """
        self.openapi_types = {
            'message': str,
            'response': QueuedResponseData,
            'success': bool
        }

        self.attribute_map = {
            'message': 'message',
            'response': 'response',
            'success': 'success'
        }

        self._message = message
        self._response = response
        self._success = success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueuedResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueuedResponse of this QueuedResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this QueuedResponse.

        `Created`, `Bad Request` or an error message.

        :return: The message of this QueuedResponse.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this QueuedResponse.

        `Created`, `Bad Request` or an error message.

        :param message: The message of this QueuedResponse.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def response(self):
        """Gets the response of this QueuedResponse.


        :return: The response of this QueuedResponse.
        :rtype: QueuedResponseData
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this QueuedResponse.


        :param response: The response of this QueuedResponse.
        :type response: QueuedResponseData
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")

        self._response = response

    @property
    def success(self):
        """Gets the success of this QueuedResponse.

        `true` if successfully queued, else `false`.

        :return: The success of this QueuedResponse.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this QueuedResponse.

        `true` if successfully queued, else `false`.

        :param success: The success of this QueuedResponse.
        :type success: bool
        """
        if success is None:
            raise ValueError("Invalid value for `success`, must not be `None`")

        self._success = success
