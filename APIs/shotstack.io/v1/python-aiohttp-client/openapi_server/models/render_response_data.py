# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.edit import Edit
from openapi_server import util


class RenderResponseData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: str=None, data: Edit=None, duration: float=None, error: str=None, id: str=None, owner: str=None, plan: str=None, poster: str=None, render_time: float=None, status: str=None, thumbnail: str=None, updated: str=None, url: str=None):
        """RenderResponseData - a model defined in OpenAPI

        :param created: The created of this RenderResponseData.
        :param data: The data of this RenderResponseData.
        :param duration: The duration of this RenderResponseData.
        :param error: The error of this RenderResponseData.
        :param id: The id of this RenderResponseData.
        :param owner: The owner of this RenderResponseData.
        :param plan: The plan of this RenderResponseData.
        :param poster: The poster of this RenderResponseData.
        :param render_time: The render_time of this RenderResponseData.
        :param status: The status of this RenderResponseData.
        :param thumbnail: The thumbnail of this RenderResponseData.
        :param updated: The updated of this RenderResponseData.
        :param url: The url of this RenderResponseData.
        """
        self.openapi_types = {
            'created': str,
            'data': Edit,
            'duration': float,
            'error': str,
            'id': str,
            'owner': str,
            'plan': str,
            'poster': str,
            'render_time': float,
            'status': str,
            'thumbnail': str,
            'updated': str,
            'url': str
        }

        self.attribute_map = {
            'created': 'created',
            'data': 'data',
            'duration': 'duration',
            'error': 'error',
            'id': 'id',
            'owner': 'owner',
            'plan': 'plan',
            'poster': 'poster',
            'render_time': 'renderTime',
            'status': 'status',
            'thumbnail': 'thumbnail',
            'updated': 'updated',
            'url': 'url'
        }

        self._created = created
        self._data = data
        self._duration = duration
        self._error = error
        self._id = id
        self._owner = owner
        self._plan = plan
        self._poster = poster
        self._render_time = render_time
        self._status = status
        self._thumbnail = thumbnail
        self._updated = updated
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RenderResponseData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RenderResponseData of this RenderResponseData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this RenderResponseData.

        The time the render task was initially queued.

        :return: The created of this RenderResponseData.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this RenderResponseData.

        The time the render task was initially queued.

        :param created: The created of this RenderResponseData.
        :type created: str
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")

        self._created = created

    @property
    def data(self):
        """Gets the data of this RenderResponseData.


        :return: The data of this RenderResponseData.
        :rtype: Edit
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this RenderResponseData.


        :param data: The data of this RenderResponseData.
        :type data: Edit
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def duration(self):
        """Gets the duration of this RenderResponseData.

        The output video or audio length in seconds.

        :return: The duration of this RenderResponseData.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this RenderResponseData.

        The output video or audio length in seconds.

        :param duration: The duration of this RenderResponseData.
        :type duration: float
        """

        self._duration = duration

    @property
    def error(self):
        """Gets the error of this RenderResponseData.

        An error message, only displayed if an error occurred.

        :return: The error of this RenderResponseData.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this RenderResponseData.

        An error message, only displayed if an error occurred.

        :param error: The error of this RenderResponseData.
        :type error: str
        """

        self._error = error

    @property
    def id(self):
        """Gets the id of this RenderResponseData.

        The id of the render task in UUID format.

        :return: The id of this RenderResponseData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RenderResponseData.

        The id of the render task in UUID format.

        :param id: The id of this RenderResponseData.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def owner(self):
        """Gets the owner of this RenderResponseData.

        The owner id of the render task.

        :return: The owner of this RenderResponseData.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this RenderResponseData.

        The owner id of the render task.

        :param owner: The owner of this RenderResponseData.
        :type owner: str
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")

        self._owner = owner

    @property
    def plan(self):
        """Gets the plan of this RenderResponseData.

        The customer subscription plan.

        :return: The plan of this RenderResponseData.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this RenderResponseData.

        The customer subscription plan.

        :param plan: The plan of this RenderResponseData.
        :type plan: str
        """

        self._plan = plan

    @property
    def poster(self):
        """Gets the poster of this RenderResponseData.

        The URL of the poster image if requested. This will only be available if status is done.

        :return: The poster of this RenderResponseData.
        :rtype: str
        """
        return self._poster

    @poster.setter
    def poster(self, poster):
        """Sets the poster of this RenderResponseData.

        The URL of the poster image if requested. This will only be available if status is done.

        :param poster: The poster of this RenderResponseData.
        :type poster: str
        """

        self._poster = poster

    @property
    def render_time(self):
        """Gets the render_time of this RenderResponseData.

        The time taken to render the asset in milliseconds.

        :return: The render_time of this RenderResponseData.
        :rtype: float
        """
        return self._render_time

    @render_time.setter
    def render_time(self, render_time):
        """Sets the render_time of this RenderResponseData.

        The time taken to render the asset in milliseconds.

        :param render_time: The render_time of this RenderResponseData.
        :type render_time: float
        """

        self._render_time = render_time

    @property
    def status(self):
        """Gets the status of this RenderResponseData.

        The status of the render task. <ul>   <li>`queued` - render is queued waiting to be rendered</li>   <li>`fetching` - assets are being fetched</li>   <li>`rendering` - the asset is being rendered</li>   <li>`saving` - the final asset is being saved to storage</li>   <li>`done` - the asset is ready to be downloaded</li>   <li>`failed` - there was an error rendering the asset</li> </ul>

        :return: The status of this RenderResponseData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RenderResponseData.

        The status of the render task. <ul>   <li>`queued` - render is queued waiting to be rendered</li>   <li>`fetching` - assets are being fetched</li>   <li>`rendering` - the asset is being rendered</li>   <li>`saving` - the final asset is being saved to storage</li>   <li>`done` - the asset is ready to be downloaded</li>   <li>`failed` - there was an error rendering the asset</li> </ul>

        :param status: The status of this RenderResponseData.
        :type status: str
        """
        allowed_values = ["queued", "fetching", "rendering", "saving", "done", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def thumbnail(self):
        """Gets the thumbnail of this RenderResponseData.

        The URL of the thumbnail image if requested. This will only be available if status is done.

        :return: The thumbnail of this RenderResponseData.
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this RenderResponseData.

        The URL of the thumbnail image if requested. This will only be available if status is done.

        :param thumbnail: The thumbnail of this RenderResponseData.
        :type thumbnail: str
        """

        self._thumbnail = thumbnail

    @property
    def updated(self):
        """Gets the updated of this RenderResponseData.

        The time the render status was last updated.

        :return: The updated of this RenderResponseData.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this RenderResponseData.

        The time the render status was last updated.

        :param updated: The updated of this RenderResponseData.
        :type updated: str
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")

        self._updated = updated

    @property
    def url(self):
        """Gets the url of this RenderResponseData.

        The URL of the final asset. This will only be available if status is done. This is a temporary URL and will be deleted after 24 hours. By default all assets are copied to the Shotstack hosting and CDN destination.

        :return: The url of this RenderResponseData.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RenderResponseData.

        The URL of the final asset. This will only be available if status is done. This is a temporary URL and will be deleted after 24 hours. By default all assets are copied to the Shotstack hosting and CDN destination.

        :param url: The url of this RenderResponseData.
        :type url: str
        """

        self._url = url
