# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_asset import AudioAsset
from openapi_server.models.crop import Crop
from openapi_server.models.html_asset import HtmlAsset
from openapi_server.models.image_asset import ImageAsset
from openapi_server.models.luma_asset import LumaAsset
from openapi_server.models.offset import Offset
from openapi_server.models.title_asset import TitleAsset
from openapi_server.models.video_asset import VideoAsset
from openapi_server import util


class ClipAsset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crop: Crop=None, src: str=None, trim: float=None, type: str='luma', volume: float=1, background: str='transparent', color: str='#ffffff', offset: Offset=None, position: str='center', size: str='medium', style: str=None, text: str=None, css: str=None, height: int=None, html: str=None, width: int=None, effect: str=None):
        """ClipAsset - a model defined in OpenAPI

        :param crop: The crop of this ClipAsset.
        :param src: The src of this ClipAsset.
        :param trim: The trim of this ClipAsset.
        :param type: The type of this ClipAsset.
        :param volume: The volume of this ClipAsset.
        :param background: The background of this ClipAsset.
        :param color: The color of this ClipAsset.
        :param offset: The offset of this ClipAsset.
        :param position: The position of this ClipAsset.
        :param size: The size of this ClipAsset.
        :param style: The style of this ClipAsset.
        :param text: The text of this ClipAsset.
        :param css: The css of this ClipAsset.
        :param height: The height of this ClipAsset.
        :param html: The html of this ClipAsset.
        :param width: The width of this ClipAsset.
        :param effect: The effect of this ClipAsset.
        """
        self.openapi_types = {
            'crop': Crop,
            'src': str,
            'trim': float,
            'type': str,
            'volume': float,
            'background': str,
            'color': str,
            'offset': Offset,
            'position': str,
            'size': str,
            'style': str,
            'text': str,
            'css': str,
            'height': int,
            'html': str,
            'width': int,
            'effect': str
        }

        self.attribute_map = {
            'crop': 'crop',
            'src': 'src',
            'trim': 'trim',
            'type': 'type',
            'volume': 'volume',
            'background': 'background',
            'color': 'color',
            'offset': 'offset',
            'position': 'position',
            'size': 'size',
            'style': 'style',
            'text': 'text',
            'css': 'css',
            'height': 'height',
            'html': 'html',
            'width': 'width',
            'effect': 'effect'
        }

        self._crop = crop
        self._src = src
        self._trim = trim
        self._type = type
        self._volume = volume
        self._background = background
        self._color = color
        self._offset = offset
        self._position = position
        self._size = size
        self._style = style
        self._text = text
        self._css = css
        self._height = height
        self._html = html
        self._width = width
        self._effect = effect

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClipAsset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Clip_asset of this ClipAsset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crop(self):
        """Gets the crop of this ClipAsset.


        :return: The crop of this ClipAsset.
        :rtype: Crop
        """
        return self._crop

    @crop.setter
    def crop(self, crop):
        """Sets the crop of this ClipAsset.


        :param crop: The crop of this ClipAsset.
        :type crop: Crop
        """

        self._crop = crop

    @property
    def src(self):
        """Gets the src of this ClipAsset.

        The luma matte source URL. The URL must be publicly accessible or include credentials.

        :return: The src of this ClipAsset.
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this ClipAsset.

        The luma matte source URL. The URL must be publicly accessible or include credentials.

        :param src: The src of this ClipAsset.
        :type src: str
        """
        if src is None:
            raise ValueError("Invalid value for `src`, must not be `None`")

        self._src = src

    @property
    def trim(self):
        """Gets the trim of this ClipAsset.

        The start trim point of the luma matte clip, in seconds (defaults to 0). Videos will start from the in trim point. A luma matte video will play until the file ends or the Clip length is reached.

        :return: The trim of this ClipAsset.
        :rtype: float
        """
        return self._trim

    @trim.setter
    def trim(self, trim):
        """Sets the trim of this ClipAsset.

        The start trim point of the luma matte clip, in seconds (defaults to 0). Videos will start from the in trim point. A luma matte video will play until the file ends or the Clip length is reached.

        :param trim: The trim of this ClipAsset.
        :type trim: float
        """

        self._trim = trim

    @property
    def type(self):
        """Gets the type of this ClipAsset.

        The type of asset - set to `luma` for luma mattes.

        :return: The type of this ClipAsset.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ClipAsset.

        The type of asset - set to `luma` for luma mattes.

        :param type: The type of this ClipAsset.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def volume(self):
        """Gets the volume of this ClipAsset.

        Set the volume for the audio clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).

        :return: The volume of this ClipAsset.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this ClipAsset.

        Set the volume for the audio clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).

        :param volume: The volume of this ClipAsset.
        :type volume: float
        """

        self._volume = volume

    @property
    def background(self):
        """Gets the background of this ClipAsset.

        Apply a background color behind the HTML bounding box using. Set the text color using hexadecimal  color notation. Transparency is supported by setting the first two characters of the hex string  (opposite to HTML), i.e. #80ffffff will be white with 50% transparency.

        :return: The background of this ClipAsset.
        :rtype: str
        """
        return self._background

    @background.setter
    def background(self, background):
        """Sets the background of this ClipAsset.

        Apply a background color behind the HTML bounding box using. Set the text color using hexadecimal  color notation. Transparency is supported by setting the first two characters of the hex string  (opposite to HTML), i.e. #80ffffff will be white with 50% transparency.

        :param background: The background of this ClipAsset.
        :type background: str
        """

        self._background = background

    @property
    def color(self):
        """Gets the color of this ClipAsset.

        Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with  50% transparency.

        :return: The color of this ClipAsset.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ClipAsset.

        Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with  50% transparency.

        :param color: The color of this ClipAsset.
        :type color: str
        """

        self._color = color

    @property
    def offset(self):
        """Gets the offset of this ClipAsset.


        :return: The offset of this ClipAsset.
        :rtype: Offset
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ClipAsset.


        :param offset: The offset of this ClipAsset.
        :type offset: Offset
        """

        self._offset = offset

    @property
    def position(self):
        """Gets the position of this ClipAsset.

        Place the HTML in one of nine predefined positions within the HTML area. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>

        :return: The position of this ClipAsset.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this ClipAsset.

        Place the HTML in one of nine predefined positions within the HTML area. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>

        :param position: The position of this ClipAsset.
        :type position: str
        """
        allowed_values = ["top", "topRight", "right", "bottomRight", "bottom", "bottomLeft", "left", "topLeft", "center"]  # noqa: E501
        if position not in allowed_values:
            raise ValueError(
                "Invalid value for `position` ({0}), must be one of {1}"
                .format(position, allowed_values)
            )

        self._position = position

    @property
    def size(self):
        """Gets the size of this ClipAsset.

        Set the relative size of the text using predefined sizes from xx-small to xx-large. <ul>   <li>`xx-small`</li>   <li>`x-small`</li>   <li>`small`</li>   <li>`medium`</li>   <li>`large`</li>   <li>`x-large`</li>   <li>`xx-large`</li> </ul>

        :return: The size of this ClipAsset.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ClipAsset.

        Set the relative size of the text using predefined sizes from xx-small to xx-large. <ul>   <li>`xx-small`</li>   <li>`x-small`</li>   <li>`small`</li>   <li>`medium`</li>   <li>`large`</li>   <li>`x-large`</li>   <li>`xx-large`</li> </ul>

        :param size: The size of this ClipAsset.
        :type size: str
        """
        allowed_values = ["xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large"]  # noqa: E501
        if size not in allowed_values:
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"
                .format(size, allowed_values)
            )

        self._size = size

    @property
    def style(self):
        """Gets the style of this ClipAsset.

        Uses a preset to apply font properties and styling to the title. <ul>   <li>`minimal`</li>   <li>`blockbuster`</li>   <li>`vogue`</li>   <li>`sketchy`</li>   <li>`skinny`</li>   <li>`chunk`</li>   <li>`chunkLight`</li>   <li>`marker`</li>   <li>`future`</li>   <li>`subtitle`</li> </ul>

        :return: The style of this ClipAsset.
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this ClipAsset.

        Uses a preset to apply font properties and styling to the title. <ul>   <li>`minimal`</li>   <li>`blockbuster`</li>   <li>`vogue`</li>   <li>`sketchy`</li>   <li>`skinny`</li>   <li>`chunk`</li>   <li>`chunkLight`</li>   <li>`marker`</li>   <li>`future`</li>   <li>`subtitle`</li> </ul>

        :param style: The style of this ClipAsset.
        :type style: str
        """
        allowed_values = ["minimal", "blockbuster", "vogue", "sketchy", "skinny", "chunk", "chunkLight", "marker", "future", "subtitle"]  # noqa: E501
        if style not in allowed_values:
            raise ValueError(
                "Invalid value for `style` ({0}), must be one of {1}"
                .format(style, allowed_values)
            )

        self._style = style

    @property
    def text(self):
        """Gets the text of this ClipAsset.

        The title text string - i.e. \"My Title\".

        :return: The text of this ClipAsset.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ClipAsset.

        The title text string - i.e. \"My Title\".

        :param text: The text of this ClipAsset.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def css(self):
        """Gets the css of this ClipAsset.

        The CSS text string to apply styling to the HTML. See list of  [support CSS properties](https://shotstack.gitbook.io/docs/guides/architecting-an-application/html-support#supported-html-tags).

        :return: The css of this ClipAsset.
        :rtype: str
        """
        return self._css

    @css.setter
    def css(self, css):
        """Sets the css of this ClipAsset.

        The CSS text string to apply styling to the HTML. See list of  [support CSS properties](https://shotstack.gitbook.io/docs/guides/architecting-an-application/html-support#supported-html-tags).

        :param css: The css of this ClipAsset.
        :type css: str
        """

        self._css = css

    @property
    def height(self):
        """Gets the height of this ClipAsset.

        Set the width of the HTML asset bounding box in pixels. Text and elements will be masked if they exceed the  height of the bounding box.

        :return: The height of this ClipAsset.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ClipAsset.

        Set the width of the HTML asset bounding box in pixels. Text and elements will be masked if they exceed the  height of the bounding box.

        :param height: The height of this ClipAsset.
        :type height: int
        """

        self._height = height

    @property
    def html(self):
        """Gets the html of this ClipAsset.

        The HTML text string. See list of [supported HTML tags](https://shotstack.gitbook.io/docs/guides/architecting-an-application/html-support#supported-html-tags).

        :return: The html of this ClipAsset.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this ClipAsset.

        The HTML text string. See list of [supported HTML tags](https://shotstack.gitbook.io/docs/guides/architecting-an-application/html-support#supported-html-tags).

        :param html: The html of this ClipAsset.
        :type html: str
        """
        if html is None:
            raise ValueError("Invalid value for `html`, must not be `None`")

        self._html = html

    @property
    def width(self):
        """Gets the width of this ClipAsset.

        Set the width of the HTML asset bounding box in pixels. Text will wrap to fill the bounding box.

        :return: The width of this ClipAsset.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ClipAsset.

        Set the width of the HTML asset bounding box in pixels. Text will wrap to fill the bounding box.

        :param width: The width of this ClipAsset.
        :type width: int
        """

        self._width = width

    @property
    def effect(self):
        """Gets the effect of this ClipAsset.

        The effect to apply to the audio asset <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>

        :return: The effect of this ClipAsset.
        :rtype: str
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """Sets the effect of this ClipAsset.

        The effect to apply to the audio asset <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>

        :param effect: The effect of this ClipAsset.
        :type effect: str
        """
        allowed_values = ["fadeIn", "fadeOut", "fadeInFadeOut"]  # noqa: E501
        if effect not in allowed_values:
            raise ValueError(
                "Invalid value for `effect` ({0}), must be one of {1}"
                .format(effect, allowed_values)
            )

        self._effect = effect
