# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShotstackDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exclude: bool=False, provider: str='shotstack'):
        """ShotstackDestination - a model defined in OpenAPI

        :param exclude: The exclude of this ShotstackDestination.
        :param provider: The provider of this ShotstackDestination.
        """
        self.openapi_types = {
            'exclude': bool,
            'provider': str
        }

        self.attribute_map = {
            'exclude': 'exclude',
            'provider': 'provider'
        }

        self._exclude = exclude
        self._provider = provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShotstackDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShotstackDestination of this ShotstackDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exclude(self):
        """Gets the exclude of this ShotstackDestination.

        Set to `true` to opt-out from the Shotstack hosting and CDN service. All files must be downloaded within 24 hours of rendering.

        :return: The exclude of this ShotstackDestination.
        :rtype: bool
        """
        return self._exclude

    @exclude.setter
    def exclude(self, exclude):
        """Sets the exclude of this ShotstackDestination.

        Set to `true` to opt-out from the Shotstack hosting and CDN service. All files must be downloaded within 24 hours of rendering.

        :param exclude: The exclude of this ShotstackDestination.
        :type exclude: bool
        """

        self._exclude = exclude

    @property
    def provider(self):
        """Gets the provider of this ShotstackDestination.

        The destination to send rendered assets to - set to `shotstack` for Shotstack hosting and CDN.

        :return: The provider of this ShotstackDestination.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ShotstackDestination.

        The destination to send rendered assets to - set to `shotstack` for Shotstack hosting and CDN.

        :param provider: The provider of this ShotstackDestination.
        :type provider: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider
