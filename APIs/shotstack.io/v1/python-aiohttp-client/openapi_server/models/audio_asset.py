# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AudioAsset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, effect: str=None, src: str=None, trim: float=None, type: str='audio', volume: float=1):
        """AudioAsset - a model defined in OpenAPI

        :param effect: The effect of this AudioAsset.
        :param src: The src of this AudioAsset.
        :param trim: The trim of this AudioAsset.
        :param type: The type of this AudioAsset.
        :param volume: The volume of this AudioAsset.
        """
        self.openapi_types = {
            'effect': str,
            'src': str,
            'trim': float,
            'type': str,
            'volume': float
        }

        self.attribute_map = {
            'effect': 'effect',
            'src': 'src',
            'trim': 'trim',
            'type': 'type',
            'volume': 'volume'
        }

        self._effect = effect
        self._src = src
        self._trim = trim
        self._type = type
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioAsset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioAsset of this AudioAsset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def effect(self):
        """Gets the effect of this AudioAsset.

        The effect to apply to the audio asset <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>

        :return: The effect of this AudioAsset.
        :rtype: str
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """Sets the effect of this AudioAsset.

        The effect to apply to the audio asset <ul>   <li>`fadeIn` - fade volume in only</li>   <li>`fadeOut` - fade volume out only</li>   <li>`fadeInFadeOut` - fade volume in and out</li> </ul>

        :param effect: The effect of this AudioAsset.
        :type effect: str
        """
        allowed_values = ["fadeIn", "fadeOut", "fadeInFadeOut"]  # noqa: E501
        if effect not in allowed_values:
            raise ValueError(
                "Invalid value for `effect` ({0}), must be one of {1}"
                .format(effect, allowed_values)
            )

        self._effect = effect

    @property
    def src(self):
        """Gets the src of this AudioAsset.

        The audio source URL. The URL must be publicly accessible or include credentials.

        :return: The src of this AudioAsset.
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this AudioAsset.

        The audio source URL. The URL must be publicly accessible or include credentials.

        :param src: The src of this AudioAsset.
        :type src: str
        """
        if src is None:
            raise ValueError("Invalid value for `src`, must not be `None`")

        self._src = src

    @property
    def trim(self):
        """Gets the trim of this AudioAsset.

        The start trim point of the audio clip, in seconds (defaults to 0). Audio will start from the in trim point. The audio will play until the file ends or the Clip length is reached.

        :return: The trim of this AudioAsset.
        :rtype: float
        """
        return self._trim

    @trim.setter
    def trim(self, trim):
        """Sets the trim of this AudioAsset.

        The start trim point of the audio clip, in seconds (defaults to 0). Audio will start from the in trim point. The audio will play until the file ends or the Clip length is reached.

        :param trim: The trim of this AudioAsset.
        :type trim: float
        """

        self._trim = trim

    @property
    def type(self):
        """Gets the type of this AudioAsset.

        The type of asset - set to `audio` for audio assets.

        :return: The type of this AudioAsset.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AudioAsset.

        The type of asset - set to `audio` for audio assets.

        :param type: The type of this AudioAsset.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def volume(self):
        """Gets the volume of this AudioAsset.

        Set the volume for the audio clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).

        :return: The volume of this AudioAsset.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this AudioAsset.

        Set the volume for the audio clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 1).

        :param volume: The volume of this AudioAsset.
        :type volume: float
        """

        self._volume = volume
