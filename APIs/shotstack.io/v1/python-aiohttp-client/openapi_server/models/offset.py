# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Offset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, x: float=0, y: float=0):
        """Offset - a model defined in OpenAPI

        :param x: The x of this Offset.
        :param y: The y of this Offset.
        """
        self.openapi_types = {
            'x': float,
            'y': float
        }

        self.attribute_map = {
            'x': 'x',
            'y': 'y'
        }

        self._x = x
        self._y = y

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Offset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Offset of this Offset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def x(self):
        """Gets the x of this Offset.

        Offset an asset on the horizontal axis (left or right), range varies from -1 to 1. Positive numbers move the asset right, negative left. For all assets except titles the distance moved is relative to the width  of the viewport - i.e. an X offset of 0.5 will move the asset half the  screen width to the right.

        :return: The x of this Offset.
        :rtype: float
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this Offset.

        Offset an asset on the horizontal axis (left or right), range varies from -1 to 1. Positive numbers move the asset right, negative left. For all assets except titles the distance moved is relative to the width  of the viewport - i.e. an X offset of 0.5 will move the asset half the  screen width to the right.

        :param x: The x of this Offset.
        :type x: float
        """
        if x is not None and x > 1:
            raise ValueError("Invalid value for `x`, must be a value less than or equal to `1`")
        if x is not None and x < -1:
            raise ValueError("Invalid value for `x`, must be a value greater than or equal to `-1`")

        self._x = x

    @property
    def y(self):
        """Gets the y of this Offset.

        Offset an asset on the vertical axis (up or down), range varies from -1 to 1. Positive numbers move the asset up, negative down. For all assets except titles the distance moved is relative to the height  of the viewport - i.e. an Y offset of 0.5 will move the asset up half the  screen height.

        :return: The y of this Offset.
        :rtype: float
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this Offset.

        Offset an asset on the vertical axis (up or down), range varies from -1 to 1. Positive numbers move the asset up, negative down. For all assets except titles the distance moved is relative to the height  of the viewport - i.e. an Y offset of 0.5 will move the asset up half the  screen height.

        :param y: The y of this Offset.
        :type y: float
        """
        if y is not None and y > 1:
            raise ValueError("Invalid value for `y`, must be a value less than or equal to `1`")
        if y is not None and y < -1:
            raise ValueError("Invalid value for `y`, must be a value greater than or equal to `-1`")

        self._y = y
