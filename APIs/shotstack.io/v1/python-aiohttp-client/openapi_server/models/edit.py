# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.output import Output
from openapi_server.models.timeline import Timeline
from openapi_server import util


class Edit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, callback: str=None, disk: str='local', output: Output=None, timeline: Timeline=None):
        """Edit - a model defined in OpenAPI

        :param callback: The callback of this Edit.
        :param disk: The disk of this Edit.
        :param output: The output of this Edit.
        :param timeline: The timeline of this Edit.
        """
        self.openapi_types = {
            'callback': str,
            'disk': str,
            'output': Output,
            'timeline': Timeline
        }

        self.attribute_map = {
            'callback': 'callback',
            'disk': 'disk',
            'output': 'output',
            'timeline': 'timeline'
        }

        self._callback = callback
        self._disk = disk
        self._output = output
        self._timeline = timeline

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Edit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Edit of this Edit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def callback(self):
        """Gets the callback of this Edit.

        An optional webhook callback URL used to receive status notifications when a render completes or fails. See [webhooks](https://shotstack.gitbook.io/docs/guides/architecting-an-application/webhooks) for  more details.

        :return: The callback of this Edit.
        :rtype: str
        """
        return self._callback

    @callback.setter
    def callback(self, callback):
        """Sets the callback of this Edit.

        An optional webhook callback URL used to receive status notifications when a render completes or fails. See [webhooks](https://shotstack.gitbook.io/docs/guides/architecting-an-application/webhooks) for  more details.

        :param callback: The callback of this Edit.
        :type callback: str
        """

        self._callback = callback

    @property
    def disk(self):
        """Gets the disk of this Edit.

        The disk type to use for storing footage and assets for each render. See [disk types](https://shotstack.gitbook.io/docs/guides/architecting-an-application/disk-types) for more details. <ul>   <li>`local` - optimized for high speed rendering with up to 512MB storage</li>   <li>`mount` - optimized for larger file sizes and longer videos with 5GB for source footage and 512MB for output render</li> </ul>

        :return: The disk of this Edit.
        :rtype: str
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this Edit.

        The disk type to use for storing footage and assets for each render. See [disk types](https://shotstack.gitbook.io/docs/guides/architecting-an-application/disk-types) for more details. <ul>   <li>`local` - optimized for high speed rendering with up to 512MB storage</li>   <li>`mount` - optimized for larger file sizes and longer videos with 5GB for source footage and 512MB for output render</li> </ul>

        :param disk: The disk of this Edit.
        :type disk: str
        """
        allowed_values = ["local", "mount"]  # noqa: E501
        if disk not in allowed_values:
            raise ValueError(
                "Invalid value for `disk` ({0}), must be one of {1}"
                .format(disk, allowed_values)
            )

        self._disk = disk

    @property
    def output(self):
        """Gets the output of this Edit.


        :return: The output of this Edit.
        :rtype: Output
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this Edit.


        :param output: The output of this Edit.
        :type output: Output
        """
        if output is None:
            raise ValueError("Invalid value for `output`, must not be `None`")

        self._output = output

    @property
    def timeline(self):
        """Gets the timeline of this Edit.


        :return: The timeline of this Edit.
        :rtype: Timeline
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """Sets the timeline of this Edit.


        :param timeline: The timeline of this Edit.
        :type timeline: Timeline
        """
        if timeline is None:
            raise ValueError("Invalid value for `timeline`, must not be `None`")

        self._timeline = timeline
