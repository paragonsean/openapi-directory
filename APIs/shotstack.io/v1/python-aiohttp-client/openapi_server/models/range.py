# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Range(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, length: float=None, start: float=None):
        """Range - a model defined in OpenAPI

        :param length: The length of this Range.
        :param start: The start of this Range.
        """
        self.openapi_types = {
            'length': float,
            'start': float
        }

        self.attribute_map = {
            'length': 'length',
            'start': 'start'
        }

        self._length = length
        self._start = start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Range':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Range of this Range.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def length(self):
        """Gets the length of this Range.

        The length of the portion of the video or audio to render - i.e. render 6 seconds of the video.

        :return: The length of this Range.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Range.

        The length of the portion of the video or audio to render - i.e. render 6 seconds of the video.

        :param length: The length of this Range.
        :type length: float
        """
        if length is not None and length < 0:
            raise ValueError("Invalid value for `length`, must be a value greater than or equal to `0`")

        self._length = length

    @property
    def start(self):
        """Gets the start of this Range.

        The point on the timeline, in seconds, to start the render from - i.e. start at second 3.

        :return: The start of this Range.
        :rtype: float
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Range.

        The point on the timeline, in seconds, to start the render from - i.e. start at second 3.

        :param start: The start of this Range.
        :type start: float
        """
        if start is not None and start < 0:
            raise ValueError("Invalid value for `start`, must be a value greater than or equal to `0`")

        self._start = start
