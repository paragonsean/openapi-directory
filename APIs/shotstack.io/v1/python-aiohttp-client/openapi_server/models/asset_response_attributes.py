# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetResponseAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created: str=None, filename: str=None, id: str=None, owner: str=None, region: str=None, render_id: str=None, status: str=None, updated: str=None, url: str=None):
        """AssetResponseAttributes - a model defined in OpenAPI

        :param created: The created of this AssetResponseAttributes.
        :param filename: The filename of this AssetResponseAttributes.
        :param id: The id of this AssetResponseAttributes.
        :param owner: The owner of this AssetResponseAttributes.
        :param region: The region of this AssetResponseAttributes.
        :param render_id: The render_id of this AssetResponseAttributes.
        :param status: The status of this AssetResponseAttributes.
        :param updated: The updated of this AssetResponseAttributes.
        :param url: The url of this AssetResponseAttributes.
        """
        self.openapi_types = {
            'created': str,
            'filename': str,
            'id': str,
            'owner': str,
            'region': str,
            'render_id': str,
            'status': str,
            'updated': str,
            'url': str
        }

        self.attribute_map = {
            'created': 'created',
            'filename': 'filename',
            'id': 'id',
            'owner': 'owner',
            'region': 'region',
            'render_id': 'renderId',
            'status': 'status',
            'updated': 'updated',
            'url': 'url'
        }

        self._created = created
        self._filename = filename
        self._id = id
        self._owner = owner
        self._region = region
        self._render_id = render_id
        self._status = status
        self._updated = updated
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetResponseAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssetResponseAttributes of this AssetResponseAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created(self):
        """Gets the created of this AssetResponseAttributes.

        The time the asset was created.

        :return: The created of this AssetResponseAttributes.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this AssetResponseAttributes.

        The time the asset was created.

        :param created: The created of this AssetResponseAttributes.
        :type created: str
        """

        self._created = created

    @property
    def filename(self):
        """Gets the filename of this AssetResponseAttributes.

        The asset file name.

        :return: The filename of this AssetResponseAttributes.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this AssetResponseAttributes.

        The asset file name.

        :param filename: The filename of this AssetResponseAttributes.
        :type filename: str
        """

        self._filename = filename

    @property
    def id(self):
        """Gets the id of this AssetResponseAttributes.

        The unique id of the hosted asset in UUID format.

        :return: The id of this AssetResponseAttributes.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssetResponseAttributes.

        The unique id of the hosted asset in UUID format.

        :param id: The id of this AssetResponseAttributes.
        :type id: str
        """

        self._id = id

    @property
    def owner(self):
        """Gets the owner of this AssetResponseAttributes.

        The owner id of the render task.

        :return: The owner of this AssetResponseAttributes.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this AssetResponseAttributes.

        The owner id of the render task.

        :param owner: The owner of this AssetResponseAttributes.
        :type owner: str
        """

        self._owner = owner

    @property
    def region(self):
        """Gets the region of this AssetResponseAttributes.

        The region the asset is hosted, currently only `au` (Australia).

        :return: The region of this AssetResponseAttributes.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AssetResponseAttributes.

        The region the asset is hosted, currently only `au` (Australia).

        :param region: The region of this AssetResponseAttributes.
        :type region: str
        """

        self._region = region

    @property
    def render_id(self):
        """Gets the render_id of this AssetResponseAttributes.

        The original render id that created the asset in UUID format. Multiple assets can share the same render id.

        :return: The render_id of this AssetResponseAttributes.
        :rtype: str
        """
        return self._render_id

    @render_id.setter
    def render_id(self, render_id):
        """Sets the render_id of this AssetResponseAttributes.

        The original render id that created the asset in UUID format. Multiple assets can share the same render id.

        :param render_id: The render_id of this AssetResponseAttributes.
        :type render_id: str
        """

        self._render_id = render_id

    @property
    def status(self):
        """Gets the status of this AssetResponseAttributes.

        The status of the asset. <ul>   <li>`importing` - the asset is being copied to the hosting service</li>   <li>`ready` - the asset is ready to be served to users</li>   <li>`failed` - the asset failed to copy or delete</li>   <li>`deleted` - the asset has been deleted</li> </ul>

        :return: The status of this AssetResponseAttributes.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssetResponseAttributes.

        The status of the asset. <ul>   <li>`importing` - the asset is being copied to the hosting service</li>   <li>`ready` - the asset is ready to be served to users</li>   <li>`failed` - the asset failed to copy or delete</li>   <li>`deleted` - the asset has been deleted</li> </ul>

        :param status: The status of this AssetResponseAttributes.
        :type status: str
        """
        allowed_values = ["importing", "ready", "failed", "deleted"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated(self):
        """Gets the updated of this AssetResponseAttributes.

        The time the asset status was last updated.

        :return: The updated of this AssetResponseAttributes.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this AssetResponseAttributes.

        The time the asset status was last updated.

        :param updated: The updated of this AssetResponseAttributes.
        :type updated: str
        """

        self._updated = updated

    @property
    def url(self):
        """Gets the url of this AssetResponseAttributes.

        The asset file name.

        :return: The url of this AssetResponseAttributes.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this AssetResponseAttributes.

        The asset file name.

        :param url: The url of this AssetResponseAttributes.
        :type url: str
        """

        self._url = url
