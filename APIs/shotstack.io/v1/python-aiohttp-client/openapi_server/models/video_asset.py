# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.crop import Crop
from openapi_server import util


class VideoAsset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crop: Crop=None, src: str=None, trim: float=None, type: str='video', volume: float=None):
        """VideoAsset - a model defined in OpenAPI

        :param crop: The crop of this VideoAsset.
        :param src: The src of this VideoAsset.
        :param trim: The trim of this VideoAsset.
        :param type: The type of this VideoAsset.
        :param volume: The volume of this VideoAsset.
        """
        self.openapi_types = {
            'crop': Crop,
            'src': str,
            'trim': float,
            'type': str,
            'volume': float
        }

        self.attribute_map = {
            'crop': 'crop',
            'src': 'src',
            'trim': 'trim',
            'type': 'type',
            'volume': 'volume'
        }

        self._crop = crop
        self._src = src
        self._trim = trim
        self._type = type
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoAsset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoAsset of this VideoAsset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crop(self):
        """Gets the crop of this VideoAsset.


        :return: The crop of this VideoAsset.
        :rtype: Crop
        """
        return self._crop

    @crop.setter
    def crop(self, crop):
        """Sets the crop of this VideoAsset.


        :param crop: The crop of this VideoAsset.
        :type crop: Crop
        """

        self._crop = crop

    @property
    def src(self):
        """Gets the src of this VideoAsset.

        The video source URL. The URL must be publicly accessible or include credentials.

        :return: The src of this VideoAsset.
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src):
        """Sets the src of this VideoAsset.

        The video source URL. The URL must be publicly accessible or include credentials.

        :param src: The src of this VideoAsset.
        :type src: str
        """
        if src is None:
            raise ValueError("Invalid value for `src`, must not be `None`")

        self._src = src

    @property
    def trim(self):
        """Gets the trim of this VideoAsset.

        The start trim point of the video clip, in seconds (defaults to 0). Videos will start from the in trim point. The video will play until the file ends or the Clip length is reached.

        :return: The trim of this VideoAsset.
        :rtype: float
        """
        return self._trim

    @trim.setter
    def trim(self, trim):
        """Sets the trim of this VideoAsset.

        The start trim point of the video clip, in seconds (defaults to 0). Videos will start from the in trim point. The video will play until the file ends or the Clip length is reached.

        :param trim: The trim of this VideoAsset.
        :type trim: float
        """

        self._trim = trim

    @property
    def type(self):
        """Gets the type of this VideoAsset.

        The type of asset - set to `video` for videos.

        :return: The type of this VideoAsset.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VideoAsset.

        The type of asset - set to `video` for videos.

        :param type: The type of this VideoAsset.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def volume(self):
        """Gets the volume of this VideoAsset.

        Set the volume for the video clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 0).

        :return: The volume of this VideoAsset.
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this VideoAsset.

        Set the volume for the video clip between 0 and 1 where 0 is muted and 1 is full volume (defaults to 0).

        :param volume: The volume of this VideoAsset.
        :type volume: float
        """

        self._volume = volume
