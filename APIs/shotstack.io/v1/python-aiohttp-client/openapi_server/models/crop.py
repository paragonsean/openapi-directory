# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Crop(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bottom: float=None, left: float=None, right: float=None, top: float=None):
        """Crop - a model defined in OpenAPI

        :param bottom: The bottom of this Crop.
        :param left: The left of this Crop.
        :param right: The right of this Crop.
        :param top: The top of this Crop.
        """
        self.openapi_types = {
            'bottom': float,
            'left': float,
            'right': float,
            'top': float
        }

        self.attribute_map = {
            'bottom': 'bottom',
            'left': 'left',
            'right': 'right',
            'top': 'top'
        }

        self._bottom = bottom
        self._left = left
        self._right = right
        self._top = top

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Crop':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Crop of this Crop.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bottom(self):
        """Gets the bottom of this Crop.

        Crop from the bottom of the asset

        :return: The bottom of this Crop.
        :rtype: float
        """
        return self._bottom

    @bottom.setter
    def bottom(self, bottom):
        """Sets the bottom of this Crop.

        Crop from the bottom of the asset

        :param bottom: The bottom of this Crop.
        :type bottom: float
        """
        if bottom is not None and bottom > 1:
            raise ValueError("Invalid value for `bottom`, must be a value less than or equal to `1`")
        if bottom is not None and bottom < 0:
            raise ValueError("Invalid value for `bottom`, must be a value greater than or equal to `0`")

        self._bottom = bottom

    @property
    def left(self):
        """Gets the left of this Crop.

        Crop from the left of the asset

        :return: The left of this Crop.
        :rtype: float
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this Crop.

        Crop from the left of the asset

        :param left: The left of this Crop.
        :type left: float
        """
        if left is not None and left > 1:
            raise ValueError("Invalid value for `left`, must be a value less than or equal to `1`")
        if left is not None and left < 0:
            raise ValueError("Invalid value for `left`, must be a value greater than or equal to `0`")

        self._left = left

    @property
    def right(self):
        """Gets the right of this Crop.

        Crop from the left of the asset

        :return: The right of this Crop.
        :rtype: float
        """
        return self._right

    @right.setter
    def right(self, right):
        """Sets the right of this Crop.

        Crop from the left of the asset

        :param right: The right of this Crop.
        :type right: float
        """
        if right is not None and right > 1:
            raise ValueError("Invalid value for `right`, must be a value less than or equal to `1`")
        if right is not None and right < 0:
            raise ValueError("Invalid value for `right`, must be a value greater than or equal to `0`")

        self._right = right

    @property
    def top(self):
        """Gets the top of this Crop.

        Crop from the top of the asset

        :return: The top of this Crop.
        :rtype: float
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this Crop.

        Crop from the top of the asset

        :param top: The top of this Crop.
        :type top: float
        """
        if top is not None and top > 1:
            raise ValueError("Invalid value for `top`, must be a value less than or equal to `1`")
        if top is not None and top < 0:
            raise ValueError("Invalid value for `top`, must be a value greater than or equal to `0`")

        self._top = top
