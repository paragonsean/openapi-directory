# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.offset import Offset
from openapi_server import util


class TitleAsset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, background: str=None, color: str='#ffffff', offset: Offset=None, position: str='center', size: str='medium', style: str=None, text: str=None, type: str='title'):
        """TitleAsset - a model defined in OpenAPI

        :param background: The background of this TitleAsset.
        :param color: The color of this TitleAsset.
        :param offset: The offset of this TitleAsset.
        :param position: The position of this TitleAsset.
        :param size: The size of this TitleAsset.
        :param style: The style of this TitleAsset.
        :param text: The text of this TitleAsset.
        :param type: The type of this TitleAsset.
        """
        self.openapi_types = {
            'background': str,
            'color': str,
            'offset': Offset,
            'position': str,
            'size': str,
            'style': str,
            'text': str,
            'type': str
        }

        self.attribute_map = {
            'background': 'background',
            'color': 'color',
            'offset': 'offset',
            'position': 'position',
            'size': 'size',
            'style': 'style',
            'text': 'text',
            'type': 'type'
        }

        self._background = background
        self._color = color
        self._offset = offset
        self._position = position
        self._size = size
        self._style = style
        self._text = text
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TitleAsset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TitleAsset of this TitleAsset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def background(self):
        """Gets the background of this TitleAsset.

        Apply a background color behind the text. Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with 50% transparency. Omit to use transparent background.

        :return: The background of this TitleAsset.
        :rtype: str
        """
        return self._background

    @background.setter
    def background(self, background):
        """Sets the background of this TitleAsset.

        Apply a background color behind the text. Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with 50% transparency. Omit to use transparent background.

        :param background: The background of this TitleAsset.
        :type background: str
        """

        self._background = background

    @property
    def color(self):
        """Gets the color of this TitleAsset.

        Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with  50% transparency.

        :return: The color of this TitleAsset.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this TitleAsset.

        Set the text color using hexadecimal color notation. Transparency is supported by setting the first two characters of the hex string (opposite to HTML),  i.e. #80ffffff will be white with  50% transparency.

        :param color: The color of this TitleAsset.
        :type color: str
        """

        self._color = color

    @property
    def offset(self):
        """Gets the offset of this TitleAsset.


        :return: The offset of this TitleAsset.
        :rtype: Offset
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this TitleAsset.


        :param offset: The offset of this TitleAsset.
        :type offset: Offset
        """

        self._offset = offset

    @property
    def position(self):
        """Gets the position of this TitleAsset.

        Place the title in one of nine predefined positions of the viewport. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>

        :return: The position of this TitleAsset.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this TitleAsset.

        Place the title in one of nine predefined positions of the viewport. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>

        :param position: The position of this TitleAsset.
        :type position: str
        """
        allowed_values = ["top", "topRight", "right", "bottomRight", "bottom", "bottomLeft", "left", "topLeft", "center"]  # noqa: E501
        if position not in allowed_values:
            raise ValueError(
                "Invalid value for `position` ({0}), must be one of {1}"
                .format(position, allowed_values)
            )

        self._position = position

    @property
    def size(self):
        """Gets the size of this TitleAsset.

        Set the relative size of the text using predefined sizes from xx-small to xx-large. <ul>   <li>`xx-small`</li>   <li>`x-small`</li>   <li>`small`</li>   <li>`medium`</li>   <li>`large`</li>   <li>`x-large`</li>   <li>`xx-large`</li> </ul>

        :return: The size of this TitleAsset.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this TitleAsset.

        Set the relative size of the text using predefined sizes from xx-small to xx-large. <ul>   <li>`xx-small`</li>   <li>`x-small`</li>   <li>`small`</li>   <li>`medium`</li>   <li>`large`</li>   <li>`x-large`</li>   <li>`xx-large`</li> </ul>

        :param size: The size of this TitleAsset.
        :type size: str
        """
        allowed_values = ["xx-small", "x-small", "small", "medium", "large", "x-large", "xx-large"]  # noqa: E501
        if size not in allowed_values:
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"
                .format(size, allowed_values)
            )

        self._size = size

    @property
    def style(self):
        """Gets the style of this TitleAsset.

        Uses a preset to apply font properties and styling to the title. <ul>   <li>`minimal`</li>   <li>`blockbuster`</li>   <li>`vogue`</li>   <li>`sketchy`</li>   <li>`skinny`</li>   <li>`chunk`</li>   <li>`chunkLight`</li>   <li>`marker`</li>   <li>`future`</li>   <li>`subtitle`</li> </ul>

        :return: The style of this TitleAsset.
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style):
        """Sets the style of this TitleAsset.

        Uses a preset to apply font properties and styling to the title. <ul>   <li>`minimal`</li>   <li>`blockbuster`</li>   <li>`vogue`</li>   <li>`sketchy`</li>   <li>`skinny`</li>   <li>`chunk`</li>   <li>`chunkLight`</li>   <li>`marker`</li>   <li>`future`</li>   <li>`subtitle`</li> </ul>

        :param style: The style of this TitleAsset.
        :type style: str
        """
        allowed_values = ["minimal", "blockbuster", "vogue", "sketchy", "skinny", "chunk", "chunkLight", "marker", "future", "subtitle"]  # noqa: E501
        if style not in allowed_values:
            raise ValueError(
                "Invalid value for `style` ({0}), must be one of {1}"
                .format(style, allowed_values)
            )

        self._style = style

    @property
    def text(self):
        """Gets the text of this TitleAsset.

        The title text string - i.e. \"My Title\".

        :return: The text of this TitleAsset.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TitleAsset.

        The title text string - i.e. \"My Title\".

        :param text: The text of this TitleAsset.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def type(self):
        """Gets the type of this TitleAsset.

        The type of asset - set to `title` for titles.

        :return: The type of this TitleAsset.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TitleAsset.

        The type of asset - set to `title` for titles.

        :param type: The type of this TitleAsset.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
