# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.clip_asset import ClipAsset
from openapi_server.models.offset import Offset
from openapi_server.models.transition import Transition
from openapi_server import util


class Clip(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset: ClipAsset=None, effect: str=None, filter: str=None, fit: str='crop', length: float=None, offset: Offset=None, opacity: float=1, position: str='center', scale: float=None, start: float=None, transition: Transition=None):
        """Clip - a model defined in OpenAPI

        :param asset: The asset of this Clip.
        :param effect: The effect of this Clip.
        :param filter: The filter of this Clip.
        :param fit: The fit of this Clip.
        :param length: The length of this Clip.
        :param offset: The offset of this Clip.
        :param opacity: The opacity of this Clip.
        :param position: The position of this Clip.
        :param scale: The scale of this Clip.
        :param start: The start of this Clip.
        :param transition: The transition of this Clip.
        """
        self.openapi_types = {
            'asset': ClipAsset,
            'effect': str,
            'filter': str,
            'fit': str,
            'length': float,
            'offset': Offset,
            'opacity': float,
            'position': str,
            'scale': float,
            'start': float,
            'transition': Transition
        }

        self.attribute_map = {
            'asset': 'asset',
            'effect': 'effect',
            'filter': 'filter',
            'fit': 'fit',
            'length': 'length',
            'offset': 'offset',
            'opacity': 'opacity',
            'position': 'position',
            'scale': 'scale',
            'start': 'start',
            'transition': 'transition'
        }

        self._asset = asset
        self._effect = effect
        self._filter = filter
        self._fit = fit
        self._length = length
        self._offset = offset
        self._opacity = opacity
        self._position = position
        self._scale = scale
        self._start = start
        self._transition = transition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Clip':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Clip of this Clip.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset(self):
        """Gets the asset of this Clip.


        :return: The asset of this Clip.
        :rtype: ClipAsset
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this Clip.


        :param asset: The asset of this Clip.
        :type asset: ClipAsset
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")

        self._asset = asset

    @property
    def effect(self):
        """Gets the effect of this Clip.

        A motion effect to apply to the Clip. <ul>   <li>`zoomIn` - slow zoom in</li>   <li>`zoomOut` - slow zoom out</li>   <li>`slideLeft` - slow slide (pan) left</li>   <li>`slideRight` - slow slide (pan) right</li>   <li>`slideUp` - slow slide (pan) up</li>   <li>`slideDown` - slow slide (pan) down</li> </ul>

        :return: The effect of this Clip.
        :rtype: str
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """Sets the effect of this Clip.

        A motion effect to apply to the Clip. <ul>   <li>`zoomIn` - slow zoom in</li>   <li>`zoomOut` - slow zoom out</li>   <li>`slideLeft` - slow slide (pan) left</li>   <li>`slideRight` - slow slide (pan) right</li>   <li>`slideUp` - slow slide (pan) up</li>   <li>`slideDown` - slow slide (pan) down</li> </ul>

        :param effect: The effect of this Clip.
        :type effect: str
        """
        allowed_values = ["zoomIn", "zoomOut", "slideLeft", "slideRight", "slideUp", "slideDown"]  # noqa: E501
        if effect not in allowed_values:
            raise ValueError(
                "Invalid value for `effect` ({0}), must be one of {1}"
                .format(effect, allowed_values)
            )

        self._effect = effect

    @property
    def filter(self):
        """Gets the filter of this Clip.

        A filter effect to apply to the Clip. <ul>   <li>`boost` - boost contrast and saturation</li>   <li>`contrast` - increase contrast</li>   <li>`darken` - darken the scene</li>   <li>`greyscale` - remove colour</li>   <li>`lighten` - lighten the scene</li>   <li>`muted` - reduce saturation and contrast</li>   <li>`invert` - invert colors</li> </ul>

        :return: The filter of this Clip.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this Clip.

        A filter effect to apply to the Clip. <ul>   <li>`boost` - boost contrast and saturation</li>   <li>`contrast` - increase contrast</li>   <li>`darken` - darken the scene</li>   <li>`greyscale` - remove colour</li>   <li>`lighten` - lighten the scene</li>   <li>`muted` - reduce saturation and contrast</li>   <li>`invert` - invert colors</li> </ul>

        :param filter: The filter of this Clip.
        :type filter: str
        """
        allowed_values = ["boost", "contrast", "darken", "greyscale", "lighten", "muted", "negative"]  # noqa: E501
        if filter not in allowed_values:
            raise ValueError(
                "Invalid value for `filter` ({0}), must be one of {1}"
                .format(filter, allowed_values)
            )

        self._filter = filter

    @property
    def fit(self):
        """Gets the fit of this Clip.

        Set how the asset should be scaled to fit the viewport using one of the following options:    <ul>     <li>`cover` - stretch the asset to fill the viewport without maintaining the aspect ratio.</li>     <li>`contain` - fit the entire asset within the viewport while maintaining the original aspect ratio.</li>     <li>`crop` - scale the asset to fill the viewport while maintaining the aspect ratio. The asset will be cropped if it exceeds the bounds of the viewport.</li>     <li>`none` - preserves the original asset dimensions and does not apply any scaling.</li>   </ul>

        :return: The fit of this Clip.
        :rtype: str
        """
        return self._fit

    @fit.setter
    def fit(self, fit):
        """Sets the fit of this Clip.

        Set how the asset should be scaled to fit the viewport using one of the following options:    <ul>     <li>`cover` - stretch the asset to fill the viewport without maintaining the aspect ratio.</li>     <li>`contain` - fit the entire asset within the viewport while maintaining the original aspect ratio.</li>     <li>`crop` - scale the asset to fill the viewport while maintaining the aspect ratio. The asset will be cropped if it exceeds the bounds of the viewport.</li>     <li>`none` - preserves the original asset dimensions and does not apply any scaling.</li>   </ul>

        :param fit: The fit of this Clip.
        :type fit: str
        """
        allowed_values = ["cover", "contain", "crop", "none"]  # noqa: E501
        if fit not in allowed_values:
            raise ValueError(
                "Invalid value for `fit` ({0}), must be one of {1}"
                .format(fit, allowed_values)
            )

        self._fit = fit

    @property
    def length(self):
        """Gets the length of this Clip.

        The length, in seconds, the Clip should play for.

        :return: The length of this Clip.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Clip.

        The length, in seconds, the Clip should play for.

        :param length: The length of this Clip.
        :type length: float
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def offset(self):
        """Gets the offset of this Clip.


        :return: The offset of this Clip.
        :rtype: Offset
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Clip.


        :param offset: The offset of this Clip.
        :type offset: Offset
        """

        self._offset = offset

    @property
    def opacity(self):
        """Gets the opacity of this Clip.

        Sets the opacity of the Clip where 1 is opaque and 0 is transparent.

        :return: The opacity of this Clip.
        :rtype: float
        """
        return self._opacity

    @opacity.setter
    def opacity(self, opacity):
        """Sets the opacity of this Clip.

        Sets the opacity of the Clip where 1 is opaque and 0 is transparent.

        :param opacity: The opacity of this Clip.
        :type opacity: float
        """

        self._opacity = opacity

    @property
    def position(self):
        """Gets the position of this Clip.

        Place the asset in one of nine predefined positions of the viewport. This is most effective for when the asset is scaled and you want to position the element to a specific position. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>

        :return: The position of this Clip.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Clip.

        Place the asset in one of nine predefined positions of the viewport. This is most effective for when the asset is scaled and you want to position the element to a specific position. <ul>   <li>`top` - top (center)</li>   <li>`topRight` - top right</li>   <li>`right` - right (center)</li>   <li>`bottomRight` - bottom right</li>   <li>`bottom` - bottom (center)</li>   <li>`bottomLeft` - bottom left</li>   <li>`left` - left (center)</li>   <li>`topLeft` - top left</li>   <li>`center` - center</li> </ul>

        :param position: The position of this Clip.
        :type position: str
        """
        allowed_values = ["top", "topRight", "right", "bottomRight", "bottom", "bottomLeft", "left", "topLeft", "center"]  # noqa: E501
        if position not in allowed_values:
            raise ValueError(
                "Invalid value for `position` ({0}), must be one of {1}"
                .format(position, allowed_values)
            )

        self._position = position

    @property
    def scale(self):
        """Gets the scale of this Clip.

        Scale the asset to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale asset to half the size of the viewport. This is useful for picture-in-picture video and  scaling images such as logos and watermarks.

        :return: The scale of this Clip.
        :rtype: float
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this Clip.

        Scale the asset to a fraction of the viewport size - i.e. setting the scale to 0.5 will scale asset to half the size of the viewport. This is useful for picture-in-picture video and  scaling images such as logos and watermarks.

        :param scale: The scale of this Clip.
        :type scale: float
        """

        self._scale = scale

    @property
    def start(self):
        """Gets the start of this Clip.

        The start position of the Clip on the timeline, in seconds.

        :return: The start of this Clip.
        :rtype: float
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this Clip.

        The start position of the Clip on the timeline, in seconds.

        :param start: The start of this Clip.
        :type start: float
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")

        self._start = start

    @property
    def transition(self):
        """Gets the transition of this Clip.


        :return: The transition of this Clip.
        :rtype: Transition
        """
        return self._transition

    @transition.setter
    def transition(self, transition):
        """Sets the transition of this Clip.


        :param transition: The transition of this Clip.
        :type transition: Transition
        """

        self._transition = transition
