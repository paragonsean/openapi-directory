/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EmailModel from '../model/EmailModel';
import ForgotMailToken from '../model/ForgotMailToken';
import JwtResponse from '../model/JwtResponse';
import LoginUser from '../model/LoginUser';
import MailToken from '../model/MailToken';
import Problem from '../model/Problem';
import RegistrationModel from '../model/RegistrationModel';
import ResponseStatus from '../model/ResponseStatus';

/**
* AuthenticationApiController service.
* @module api/AuthenticationApiControllerApi
* @version 1.0
*/
export default class AuthenticationApiControllerApi {

    /**
    * Constructs a new AuthenticationApiControllerApi. 
    * @alias module:api/AuthenticationApiControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authenticateUser operation.
     * @callback module:api/AuthenticationApiControllerApi~authenticateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JwtResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * authenticate the user and returns the token
     * @param {String} contentType 
     * @param {module:model/LoginUser} loginUser The LoginUser definition used to returns the token for authentication
     * @param {module:api/AuthenticationApiControllerApi~authenticateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JwtResponse}
     */
    authenticateUser(contentType, loginUser, callback) {
      let postBody = loginUser;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling authenticateUser");
      }
      // verify the required parameter 'loginUser' is set
      if (loginUser === undefined || loginUser === null) {
        throw new Error("Missing the required parameter 'loginUser' when calling authenticateUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JwtResponse;
      return this.apiClient.callApi(
        '/authentication/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forgotPassword operation.
     * @callback module:api/AuthenticationApiControllerApi~forgotPasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * forgotPassword
     * @param {String} contentType 
     * @param {module:model/EmailModel} forgotPassword The User email used to send email
     * @param {module:api/AuthenticationApiControllerApi~forgotPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseStatus}
     */
    forgotPassword(contentType, forgotPassword, callback) {
      let postBody = forgotPassword;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling forgotPassword");
      }
      // verify the required parameter 'forgotPassword' is set
      if (forgotPassword === undefined || forgotPassword === null) {
        throw new Error("Missing the required parameter 'forgotPassword' when calling forgotPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseStatus;
      return this.apiClient.callApi(
        '/authentication/forgotPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the register operation.
     * @callback module:api/AuthenticationApiControllerApi~registerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * register
     * @param {String} contentType 
     * @param {module:model/RegistrationModel} register The RegistrationForm definition is used to register the customer
     * @param {module:api/AuthenticationApiControllerApi~registerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseStatus}
     */
    register(contentType, register, callback) {
      let postBody = register;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling register");
      }
      // verify the required parameter 'register' is set
      if (register === undefined || register === null) {
        throw new Error("Missing the required parameter 'register' when calling register");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseStatus;
      return this.apiClient.callApi(
        '/authentication/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setForgotPassword operation.
     * @callback module:api/AuthenticationApiControllerApi~setForgotPasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validates the mail token and set new password
     * @param {String} contentType 
     * @param {module:model/ForgotMailToken} token The ForgotMailToken definition used to returns status of password reset
     * @param {module:api/AuthenticationApiControllerApi~setForgotPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseStatus}
     */
    setForgotPassword(contentType, token, callback) {
      let postBody = token;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling setForgotPassword");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling setForgotPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseStatus;
      return this.apiClient.callApi(
        '/authentication/setForgotPassword', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateMailToken operation.
     * @callback module:api/AuthenticationApiControllerApi~validateMailTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * validates the mail token
     * @param {String} contentType 
     * @param {module:model/MailToken} token The MailToken definition used to returns status of validation
     * @param {module:api/AuthenticationApiControllerApi~validateMailTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseStatus}
     */
    validateMailToken(contentType, token, callback) {
      let postBody = token;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling validateMailToken");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling validateMailToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResponseStatus;
      return this.apiClient.callApi(
        '/authentication/validateMailToken', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
