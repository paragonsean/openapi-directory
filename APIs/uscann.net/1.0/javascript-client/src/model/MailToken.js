/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MailToken model module.
 * @module model/MailToken
 * @version 1.0
 */
class MailToken {
    /**
     * Constructs a new <code>MailToken</code>.
     * @alias module:model/MailToken
     * @param activity {String} The user activity
     * @param token {String} The token
     */
    constructor(activity, token) { 
        
        MailToken.initialize(this, activity, token);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, activity, token) { 
        obj['activity'] = activity;
        obj['token'] = token;
    }

    /**
     * Constructs a <code>MailToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MailToken} obj Optional instance to populate.
     * @return {module:model/MailToken} The populated <code>MailToken</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MailToken();

            if (data.hasOwnProperty('activity')) {
                obj['activity'] = ApiClient.convertToType(data['activity'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MailToken</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MailToken</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MailToken.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['activity'] && !(typeof data['activity'] === 'string' || data['activity'] instanceof String)) {
            throw new Error("Expected the field `activity` to be a primitive type in the JSON string but got " + data['activity']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }

        return true;
    }


}

MailToken.RequiredProperties = ["activity", "token"];

/**
 * The user activity
 * @member {String} activity
 */
MailToken.prototype['activity'] = undefined;

/**
 * The token
 * @member {String} token
 */
MailToken.prototype['token'] = undefined;






export default MailToken;

