/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RegistrationModel model module.
 * @module model/RegistrationModel
 * @version 1.0
 */
class RegistrationModel {
    /**
     * Constructs a new <code>RegistrationModel</code>.
     * @alias module:model/RegistrationModel
     * @param companyName {String} The company name of customer
     * @param email {String} The email of customer
     * @param password {String} The password of customer
     * @param username {String} The username of customer
     */
    constructor(companyName, email, password, username) { 
        
        RegistrationModel.initialize(this, companyName, email, password, username);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, companyName, email, password, username) { 
        obj['companyName'] = companyName;
        obj['email'] = email;
        obj['password'] = password;
        obj['username'] = username;
    }

    /**
     * Constructs a <code>RegistrationModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RegistrationModel} obj Optional instance to populate.
     * @return {module:model/RegistrationModel} The populated <code>RegistrationModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RegistrationModel();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('companyDescription')) {
                obj['companyDescription'] = ApiClient.convertToType(data['companyDescription'], 'String');
            }
            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('date1')) {
                obj['date1'] = ApiClient.convertToType(data['date1'], 'String');
            }
            if (data.hasOwnProperty('date2')) {
                obj['date2'] = ApiClient.convertToType(data['date2'], 'String');
            }
            if (data.hasOwnProperty('date3')) {
                obj['date3'] = ApiClient.convertToType(data['date3'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('number1')) {
                obj['number1'] = ApiClient.convertToType(data['number1'], 'Number');
            }
            if (data.hasOwnProperty('number2')) {
                obj['number2'] = ApiClient.convertToType(data['number2'], 'Number');
            }
            if (data.hasOwnProperty('number3')) {
                obj['number3'] = ApiClient.convertToType(data['number3'], 'Number');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('storage')) {
                obj['storage'] = ApiClient.convertToType(data['storage'], 'String');
            }
            if (data.hasOwnProperty('streetAddress')) {
                obj['streetAddress'] = ApiClient.convertToType(data['streetAddress'], 'String');
            }
            if (data.hasOwnProperty('string1')) {
                obj['string1'] = ApiClient.convertToType(data['string1'], 'String');
            }
            if (data.hasOwnProperty('string2')) {
                obj['string2'] = ApiClient.convertToType(data['string2'], 'String');
            }
            if (data.hasOwnProperty('string3')) {
                obj['string3'] = ApiClient.convertToType(data['string3'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('zip')) {
                obj['zip'] = ApiClient.convertToType(data['zip'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RegistrationModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RegistrationModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RegistrationModel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['companyDescription'] && !(typeof data['companyDescription'] === 'string' || data['companyDescription'] instanceof String)) {
            throw new Error("Expected the field `companyDescription` to be a primitive type in the JSON string but got " + data['companyDescription']);
        }
        // ensure the json data is a string
        if (data['companyName'] && !(typeof data['companyName'] === 'string' || data['companyName'] instanceof String)) {
            throw new Error("Expected the field `companyName` to be a primitive type in the JSON string but got " + data['companyName']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['date1'] && !(typeof data['date1'] === 'string' || data['date1'] instanceof String)) {
            throw new Error("Expected the field `date1` to be a primitive type in the JSON string but got " + data['date1']);
        }
        // ensure the json data is a string
        if (data['date2'] && !(typeof data['date2'] === 'string' || data['date2'] instanceof String)) {
            throw new Error("Expected the field `date2` to be a primitive type in the JSON string but got " + data['date2']);
        }
        // ensure the json data is a string
        if (data['date3'] && !(typeof data['date3'] === 'string' || data['date3'] instanceof String)) {
            throw new Error("Expected the field `date3` to be a primitive type in the JSON string but got " + data['date3']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['storage'] && !(typeof data['storage'] === 'string' || data['storage'] instanceof String)) {
            throw new Error("Expected the field `storage` to be a primitive type in the JSON string but got " + data['storage']);
        }
        // ensure the json data is a string
        if (data['streetAddress'] && !(typeof data['streetAddress'] === 'string' || data['streetAddress'] instanceof String)) {
            throw new Error("Expected the field `streetAddress` to be a primitive type in the JSON string but got " + data['streetAddress']);
        }
        // ensure the json data is a string
        if (data['string1'] && !(typeof data['string1'] === 'string' || data['string1'] instanceof String)) {
            throw new Error("Expected the field `string1` to be a primitive type in the JSON string but got " + data['string1']);
        }
        // ensure the json data is a string
        if (data['string2'] && !(typeof data['string2'] === 'string' || data['string2'] instanceof String)) {
            throw new Error("Expected the field `string2` to be a primitive type in the JSON string but got " + data['string2']);
        }
        // ensure the json data is a string
        if (data['string3'] && !(typeof data['string3'] === 'string' || data['string3'] instanceof String)) {
            throw new Error("Expected the field `string3` to be a primitive type in the JSON string but got " + data['string3']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['zip'] && !(typeof data['zip'] === 'string' || data['zip'] instanceof String)) {
            throw new Error("Expected the field `zip` to be a primitive type in the JSON string but got " + data['zip']);
        }

        return true;
    }


}

RegistrationModel.RequiredProperties = ["companyName", "email", "password", "username"];

/**
 * The city of address
 * @member {String} city
 */
RegistrationModel.prototype['city'] = undefined;

/**
 * The company Description
 * @member {String} companyDescription
 */
RegistrationModel.prototype['companyDescription'] = undefined;

/**
 * The company name of customer
 * @member {String} companyName
 */
RegistrationModel.prototype['companyName'] = undefined;

/**
 * The country of address
 * @member {String} country
 */
RegistrationModel.prototype['country'] = undefined;

/**
 * The buffer date 1
 * @member {String} date1
 */
RegistrationModel.prototype['date1'] = undefined;

/**
 * The buffer date 2
 * @member {String} date2
 */
RegistrationModel.prototype['date2'] = undefined;

/**
 * The buffer date 3
 * @member {String} date3
 */
RegistrationModel.prototype['date3'] = undefined;

/**
 * The email of customer
 * @member {String} email
 */
RegistrationModel.prototype['email'] = undefined;

/**
 * The first name of customer
 * @member {String} firstName
 */
RegistrationModel.prototype['firstName'] = undefined;

/**
 * The last name of customer
 * @member {String} lastName
 */
RegistrationModel.prototype['lastName'] = undefined;

/**
 * The buffer number 1
 * @member {Number} number1
 */
RegistrationModel.prototype['number1'] = undefined;

/**
 * The buffer number 2
 * @member {Number} number2
 */
RegistrationModel.prototype['number2'] = undefined;

/**
 * The buffer number 3
 * @member {Number} number3
 */
RegistrationModel.prototype['number3'] = undefined;

/**
 * The password of customer
 * @member {String} password
 */
RegistrationModel.prototype['password'] = undefined;

/**
 * The mobile number
 * @member {String} phone
 */
RegistrationModel.prototype['phone'] = undefined;

/**
 * The state of customer
 * @member {String} state
 */
RegistrationModel.prototype['state'] = undefined;

/**
 * The facial recognition type of customer
 * @member {String} storage
 */
RegistrationModel.prototype['storage'] = undefined;

/**
 * The street of address
 * @member {String} streetAddress
 */
RegistrationModel.prototype['streetAddress'] = undefined;

/**
 * The buffer string 1
 * @member {String} string1
 */
RegistrationModel.prototype['string1'] = undefined;

/**
 * The buffer string 2
 * @member {String} string2
 */
RegistrationModel.prototype['string2'] = undefined;

/**
 * The buffer string 3
 * @member {String} string3
 */
RegistrationModel.prototype['string3'] = undefined;

/**
 * The username of customer
 * @member {String} username
 */
RegistrationModel.prototype['username'] = undefined;

/**
 * The zip code of address
 * @member {String} zip
 */
RegistrationModel.prototype['zip'] = undefined;






export default RegistrationModel;

