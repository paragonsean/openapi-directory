/*
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EmailModel;
import org.openapitools.client.model.ForgotMailToken;
import org.openapitools.client.model.JwtResponse;
import org.openapitools.client.model.LoginUser;
import org.openapitools.client.model.MailToken;
import org.openapitools.client.model.Problem;
import org.openapitools.client.model.RegistrationModel;
import org.openapitools.client.model.ResponseStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticationApiControllerApi
 */
@Disabled
public class AuthenticationApiControllerApiTest {

    private final AuthenticationApiControllerApi api = new AuthenticationApiControllerApi();

    /**
     * authenticate the user and returns the token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authenticateUserTest() throws ApiException {
        String contentType = null;
        LoginUser loginUser = null;
        JwtResponse response = api.authenticateUser(contentType, loginUser);
        // TODO: test validations
    }

    /**
     * forgotPassword
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forgotPasswordTest() throws ApiException {
        String contentType = null;
        EmailModel forgotPassword = null;
        ResponseStatus response = api.forgotPassword(contentType, forgotPassword);
        // TODO: test validations
    }

    /**
     * register
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerTest() throws ApiException {
        String contentType = null;
        RegistrationModel register = null;
        ResponseStatus response = api.register(contentType, register);
        // TODO: test validations
    }

    /**
     * validates the mail token and set new password
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setForgotPasswordTest() throws ApiException {
        String contentType = null;
        ForgotMailToken token = null;
        ResponseStatus response = api.setForgotPassword(contentType, token);
        // TODO: test validations
    }

    /**
     * validates the mail token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateMailTokenTest() throws ApiException {
        String contentType = null;
        MailToken token = null;
        ResponseStatus response = api.validateMailToken(contentType, token);
        // TODO: test validations
    }

}
