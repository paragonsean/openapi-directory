/*
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegistrationModel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:25:15.869616-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegistrationModel {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMPANY_DESCRIPTION = "companyDescription";
  @SerializedName(SERIALIZED_NAME_COMPANY_DESCRIPTION)
  private String companyDescription;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "companyName";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DATE1 = "date1";
  @SerializedName(SERIALIZED_NAME_DATE1)
  private String date1;

  public static final String SERIALIZED_NAME_DATE2 = "date2";
  @SerializedName(SERIALIZED_NAME_DATE2)
  private String date2;

  public static final String SERIALIZED_NAME_DATE3 = "date3";
  @SerializedName(SERIALIZED_NAME_DATE3)
  private String date3;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_NUMBER1 = "number1";
  @SerializedName(SERIALIZED_NAME_NUMBER1)
  private Integer number1;

  public static final String SERIALIZED_NAME_NUMBER2 = "number2";
  @SerializedName(SERIALIZED_NAME_NUMBER2)
  private Integer number2;

  public static final String SERIALIZED_NAME_NUMBER3 = "number3";
  @SerializedName(SERIALIZED_NAME_NUMBER3)
  private Integer number3;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STORAGE = "storage";
  @SerializedName(SERIALIZED_NAME_STORAGE)
  private String storage;

  public static final String SERIALIZED_NAME_STREET_ADDRESS = "streetAddress";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS)
  private String streetAddress;

  public static final String SERIALIZED_NAME_STRING1 = "string1";
  @SerializedName(SERIALIZED_NAME_STRING1)
  private String string1;

  public static final String SERIALIZED_NAME_STRING2 = "string2";
  @SerializedName(SERIALIZED_NAME_STRING2)
  private String string2;

  public static final String SERIALIZED_NAME_STRING3 = "string3";
  @SerializedName(SERIALIZED_NAME_STRING3)
  private String string3;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public RegistrationModel() {
  }

  public RegistrationModel city(String city) {
    this.city = city;
    return this;
  }

  /**
   * The city of address
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public RegistrationModel companyDescription(String companyDescription) {
    this.companyDescription = companyDescription;
    return this;
  }

  /**
   * The company Description
   * @return companyDescription
   */
  @javax.annotation.Nullable
  public String getCompanyDescription() {
    return companyDescription;
  }

  public void setCompanyDescription(String companyDescription) {
    this.companyDescription = companyDescription;
  }


  public RegistrationModel companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * The company name of customer
   * @return companyName
   */
  @javax.annotation.Nonnull
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public RegistrationModel country(String country) {
    this.country = country;
    return this;
  }

  /**
   * The country of address
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public RegistrationModel date1(String date1) {
    this.date1 = date1;
    return this;
  }

  /**
   * The buffer date 1
   * @return date1
   */
  @javax.annotation.Nullable
  public String getDate1() {
    return date1;
  }

  public void setDate1(String date1) {
    this.date1 = date1;
  }


  public RegistrationModel date2(String date2) {
    this.date2 = date2;
    return this;
  }

  /**
   * The buffer date 2
   * @return date2
   */
  @javax.annotation.Nullable
  public String getDate2() {
    return date2;
  }

  public void setDate2(String date2) {
    this.date2 = date2;
  }


  public RegistrationModel date3(String date3) {
    this.date3 = date3;
    return this;
  }

  /**
   * The buffer date 3
   * @return date3
   */
  @javax.annotation.Nullable
  public String getDate3() {
    return date3;
  }

  public void setDate3(String date3) {
    this.date3 = date3;
  }


  public RegistrationModel email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The email of customer
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public RegistrationModel firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The first name of customer
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public RegistrationModel lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The last name of customer
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public RegistrationModel number1(Integer number1) {
    this.number1 = number1;
    return this;
  }

  /**
   * The buffer number 1
   * @return number1
   */
  @javax.annotation.Nullable
  public Integer getNumber1() {
    return number1;
  }

  public void setNumber1(Integer number1) {
    this.number1 = number1;
  }


  public RegistrationModel number2(Integer number2) {
    this.number2 = number2;
    return this;
  }

  /**
   * The buffer number 2
   * @return number2
   */
  @javax.annotation.Nullable
  public Integer getNumber2() {
    return number2;
  }

  public void setNumber2(Integer number2) {
    this.number2 = number2;
  }


  public RegistrationModel number3(Integer number3) {
    this.number3 = number3;
    return this;
  }

  /**
   * The buffer number 3
   * @return number3
   */
  @javax.annotation.Nullable
  public Integer getNumber3() {
    return number3;
  }

  public void setNumber3(Integer number3) {
    this.number3 = number3;
  }


  public RegistrationModel password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The password of customer
   * @return password
   */
  @javax.annotation.Nonnull
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public RegistrationModel phone(String phone) {
    this.phone = phone;
    return this;
  }

  /**
   * The mobile number
   * @return phone
   */
  @javax.annotation.Nullable
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }


  public RegistrationModel state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The state of customer
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public RegistrationModel storage(String storage) {
    this.storage = storage;
    return this;
  }

  /**
   * The facial recognition type of customer
   * @return storage
   */
  @javax.annotation.Nullable
  public String getStorage() {
    return storage;
  }

  public void setStorage(String storage) {
    this.storage = storage;
  }


  public RegistrationModel streetAddress(String streetAddress) {
    this.streetAddress = streetAddress;
    return this;
  }

  /**
   * The street of address
   * @return streetAddress
   */
  @javax.annotation.Nullable
  public String getStreetAddress() {
    return streetAddress;
  }

  public void setStreetAddress(String streetAddress) {
    this.streetAddress = streetAddress;
  }


  public RegistrationModel string1(String string1) {
    this.string1 = string1;
    return this;
  }

  /**
   * The buffer string 1
   * @return string1
   */
  @javax.annotation.Nullable
  public String getString1() {
    return string1;
  }

  public void setString1(String string1) {
    this.string1 = string1;
  }


  public RegistrationModel string2(String string2) {
    this.string2 = string2;
    return this;
  }

  /**
   * The buffer string 2
   * @return string2
   */
  @javax.annotation.Nullable
  public String getString2() {
    return string2;
  }

  public void setString2(String string2) {
    this.string2 = string2;
  }


  public RegistrationModel string3(String string3) {
    this.string3 = string3;
    return this;
  }

  /**
   * The buffer string 3
   * @return string3
   */
  @javax.annotation.Nullable
  public String getString3() {
    return string3;
  }

  public void setString3(String string3) {
    this.string3 = string3;
  }


  public RegistrationModel username(String username) {
    this.username = username;
    return this;
  }

  /**
   * The username of customer
   * @return username
   */
  @javax.annotation.Nonnull
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public RegistrationModel zip(String zip) {
    this.zip = zip;
    return this;
  }

  /**
   * The zip code of address
   * @return zip
   */
  @javax.annotation.Nullable
  public String getZip() {
    return zip;
  }

  public void setZip(String zip) {
    this.zip = zip;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegistrationModel registrationModel = (RegistrationModel) o;
    return Objects.equals(this.city, registrationModel.city) &&
        Objects.equals(this.companyDescription, registrationModel.companyDescription) &&
        Objects.equals(this.companyName, registrationModel.companyName) &&
        Objects.equals(this.country, registrationModel.country) &&
        Objects.equals(this.date1, registrationModel.date1) &&
        Objects.equals(this.date2, registrationModel.date2) &&
        Objects.equals(this.date3, registrationModel.date3) &&
        Objects.equals(this.email, registrationModel.email) &&
        Objects.equals(this.firstName, registrationModel.firstName) &&
        Objects.equals(this.lastName, registrationModel.lastName) &&
        Objects.equals(this.number1, registrationModel.number1) &&
        Objects.equals(this.number2, registrationModel.number2) &&
        Objects.equals(this.number3, registrationModel.number3) &&
        Objects.equals(this.password, registrationModel.password) &&
        Objects.equals(this.phone, registrationModel.phone) &&
        Objects.equals(this.state, registrationModel.state) &&
        Objects.equals(this.storage, registrationModel.storage) &&
        Objects.equals(this.streetAddress, registrationModel.streetAddress) &&
        Objects.equals(this.string1, registrationModel.string1) &&
        Objects.equals(this.string2, registrationModel.string2) &&
        Objects.equals(this.string3, registrationModel.string3) &&
        Objects.equals(this.username, registrationModel.username) &&
        Objects.equals(this.zip, registrationModel.zip);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, companyDescription, companyName, country, date1, date2, date3, email, firstName, lastName, number1, number2, number3, password, phone, state, storage, streetAddress, string1, string2, string3, username, zip);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegistrationModel {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    companyDescription: ").append(toIndentedString(companyDescription)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    date1: ").append(toIndentedString(date1)).append("\n");
    sb.append("    date2: ").append(toIndentedString(date2)).append("\n");
    sb.append("    date3: ").append(toIndentedString(date3)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    number1: ").append(toIndentedString(number1)).append("\n");
    sb.append("    number2: ").append(toIndentedString(number2)).append("\n");
    sb.append("    number3: ").append(toIndentedString(number3)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    storage: ").append(toIndentedString(storage)).append("\n");
    sb.append("    streetAddress: ").append(toIndentedString(streetAddress)).append("\n");
    sb.append("    string1: ").append(toIndentedString(string1)).append("\n");
    sb.append("    string2: ").append(toIndentedString(string2)).append("\n");
    sb.append("    string3: ").append(toIndentedString(string3)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("companyDescription");
    openapiFields.add("companyName");
    openapiFields.add("country");
    openapiFields.add("date1");
    openapiFields.add("date2");
    openapiFields.add("date3");
    openapiFields.add("email");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("number1");
    openapiFields.add("number2");
    openapiFields.add("number3");
    openapiFields.add("password");
    openapiFields.add("phone");
    openapiFields.add("state");
    openapiFields.add("storage");
    openapiFields.add("streetAddress");
    openapiFields.add("string1");
    openapiFields.add("string2");
    openapiFields.add("string3");
    openapiFields.add("username");
    openapiFields.add("zip");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("companyName");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("password");
    openapiRequiredFields.add("username");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegistrationModel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegistrationModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegistrationModel is not found in the empty JSON string", RegistrationModel.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegistrationModel.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegistrationModel` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RegistrationModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("companyDescription") != null && !jsonObj.get("companyDescription").isJsonNull()) && !jsonObj.get("companyDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyDescription").toString()));
      }
      if (!jsonObj.get("companyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyName").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("date1") != null && !jsonObj.get("date1").isJsonNull()) && !jsonObj.get("date1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date1").toString()));
      }
      if ((jsonObj.get("date2") != null && !jsonObj.get("date2").isJsonNull()) && !jsonObj.get("date2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date2").toString()));
      }
      if ((jsonObj.get("date3") != null && !jsonObj.get("date3").isJsonNull()) && !jsonObj.get("date3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date3").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("phone") != null && !jsonObj.get("phone").isJsonNull()) && !jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("storage") != null && !jsonObj.get("storage").isJsonNull()) && !jsonObj.get("storage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storage").toString()));
      }
      if ((jsonObj.get("streetAddress") != null && !jsonObj.get("streetAddress").isJsonNull()) && !jsonObj.get("streetAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetAddress").toString()));
      }
      if ((jsonObj.get("string1") != null && !jsonObj.get("string1").isJsonNull()) && !jsonObj.get("string1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `string1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("string1").toString()));
      }
      if ((jsonObj.get("string2") != null && !jsonObj.get("string2").isJsonNull()) && !jsonObj.get("string2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `string2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("string2").toString()));
      }
      if ((jsonObj.get("string3") != null && !jsonObj.get("string3").isJsonNull()) && !jsonObj.get("string3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `string3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("string3").toString()));
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("zip") != null && !jsonObj.get("zip").isJsonNull()) && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegistrationModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegistrationModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegistrationModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegistrationModel.class));

       return (TypeAdapter<T>) new TypeAdapter<RegistrationModel>() {
           @Override
           public void write(JsonWriter out, RegistrationModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegistrationModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegistrationModel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegistrationModel
   * @throws IOException if the JSON string is invalid with respect to RegistrationModel
   */
  public static RegistrationModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegistrationModel.class);
  }

  /**
   * Convert an instance of RegistrationModel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

