# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RegistrationModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, company_description: str=None, company_name: str=None, country: str=None, date1: str=None, date2: str=None, date3: str=None, email: str=None, first_name: str=None, last_name: str=None, number1: int=None, number2: int=None, number3: int=None, password: str=None, phone: str=None, state: str=None, storage: str=None, street_address: str=None, string1: str=None, string2: str=None, string3: str=None, username: str=None, zip: str=None):
        """RegistrationModel - a model defined in OpenAPI

        :param city: The city of this RegistrationModel.
        :param company_description: The company_description of this RegistrationModel.
        :param company_name: The company_name of this RegistrationModel.
        :param country: The country of this RegistrationModel.
        :param date1: The date1 of this RegistrationModel.
        :param date2: The date2 of this RegistrationModel.
        :param date3: The date3 of this RegistrationModel.
        :param email: The email of this RegistrationModel.
        :param first_name: The first_name of this RegistrationModel.
        :param last_name: The last_name of this RegistrationModel.
        :param number1: The number1 of this RegistrationModel.
        :param number2: The number2 of this RegistrationModel.
        :param number3: The number3 of this RegistrationModel.
        :param password: The password of this RegistrationModel.
        :param phone: The phone of this RegistrationModel.
        :param state: The state of this RegistrationModel.
        :param storage: The storage of this RegistrationModel.
        :param street_address: The street_address of this RegistrationModel.
        :param string1: The string1 of this RegistrationModel.
        :param string2: The string2 of this RegistrationModel.
        :param string3: The string3 of this RegistrationModel.
        :param username: The username of this RegistrationModel.
        :param zip: The zip of this RegistrationModel.
        """
        self.openapi_types = {
            'city': str,
            'company_description': str,
            'company_name': str,
            'country': str,
            'date1': str,
            'date2': str,
            'date3': str,
            'email': str,
            'first_name': str,
            'last_name': str,
            'number1': int,
            'number2': int,
            'number3': int,
            'password': str,
            'phone': str,
            'state': str,
            'storage': str,
            'street_address': str,
            'string1': str,
            'string2': str,
            'string3': str,
            'username': str,
            'zip': str
        }

        self.attribute_map = {
            'city': 'city',
            'company_description': 'companyDescription',
            'company_name': 'companyName',
            'country': 'country',
            'date1': 'date1',
            'date2': 'date2',
            'date3': 'date3',
            'email': 'email',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'number1': 'number1',
            'number2': 'number2',
            'number3': 'number3',
            'password': 'password',
            'phone': 'phone',
            'state': 'state',
            'storage': 'storage',
            'street_address': 'streetAddress',
            'string1': 'string1',
            'string2': 'string2',
            'string3': 'string3',
            'username': 'username',
            'zip': 'zip'
        }

        self._city = city
        self._company_description = company_description
        self._company_name = company_name
        self._country = country
        self._date1 = date1
        self._date2 = date2
        self._date3 = date3
        self._email = email
        self._first_name = first_name
        self._last_name = last_name
        self._number1 = number1
        self._number2 = number2
        self._number3 = number3
        self._password = password
        self._phone = phone
        self._state = state
        self._storage = storage
        self._street_address = street_address
        self._string1 = string1
        self._string2 = string2
        self._string3 = string3
        self._username = username
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistrationModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistrationModel of this RegistrationModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this RegistrationModel.

        The city of address

        :return: The city of this RegistrationModel.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this RegistrationModel.

        The city of address

        :param city: The city of this RegistrationModel.
        :type city: str
        """

        self._city = city

    @property
    def company_description(self):
        """Gets the company_description of this RegistrationModel.

        The company Description

        :return: The company_description of this RegistrationModel.
        :rtype: str
        """
        return self._company_description

    @company_description.setter
    def company_description(self, company_description):
        """Sets the company_description of this RegistrationModel.

        The company Description

        :param company_description: The company_description of this RegistrationModel.
        :type company_description: str
        """

        self._company_description = company_description

    @property
    def company_name(self):
        """Gets the company_name of this RegistrationModel.

        The company name of customer

        :return: The company_name of this RegistrationModel.
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this RegistrationModel.

        The company name of customer

        :param company_name: The company_name of this RegistrationModel.
        :type company_name: str
        """
        if company_name is None:
            raise ValueError("Invalid value for `company_name`, must not be `None`")

        self._company_name = company_name

    @property
    def country(self):
        """Gets the country of this RegistrationModel.

        The country of address

        :return: The country of this RegistrationModel.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this RegistrationModel.

        The country of address

        :param country: The country of this RegistrationModel.
        :type country: str
        """

        self._country = country

    @property
    def date1(self):
        """Gets the date1 of this RegistrationModel.

        The buffer date 1

        :return: The date1 of this RegistrationModel.
        :rtype: str
        """
        return self._date1

    @date1.setter
    def date1(self, date1):
        """Sets the date1 of this RegistrationModel.

        The buffer date 1

        :param date1: The date1 of this RegistrationModel.
        :type date1: str
        """

        self._date1 = date1

    @property
    def date2(self):
        """Gets the date2 of this RegistrationModel.

        The buffer date 2

        :return: The date2 of this RegistrationModel.
        :rtype: str
        """
        return self._date2

    @date2.setter
    def date2(self, date2):
        """Sets the date2 of this RegistrationModel.

        The buffer date 2

        :param date2: The date2 of this RegistrationModel.
        :type date2: str
        """

        self._date2 = date2

    @property
    def date3(self):
        """Gets the date3 of this RegistrationModel.

        The buffer date 3

        :return: The date3 of this RegistrationModel.
        :rtype: str
        """
        return self._date3

    @date3.setter
    def date3(self, date3):
        """Sets the date3 of this RegistrationModel.

        The buffer date 3

        :param date3: The date3 of this RegistrationModel.
        :type date3: str
        """

        self._date3 = date3

    @property
    def email(self):
        """Gets the email of this RegistrationModel.

        The email of customer

        :return: The email of this RegistrationModel.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this RegistrationModel.

        The email of customer

        :param email: The email of this RegistrationModel.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this RegistrationModel.

        The first name of customer

        :return: The first_name of this RegistrationModel.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this RegistrationModel.

        The first name of customer

        :param first_name: The first_name of this RegistrationModel.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this RegistrationModel.

        The last name of customer

        :return: The last_name of this RegistrationModel.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this RegistrationModel.

        The last name of customer

        :param last_name: The last_name of this RegistrationModel.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def number1(self):
        """Gets the number1 of this RegistrationModel.

        The buffer number 1

        :return: The number1 of this RegistrationModel.
        :rtype: int
        """
        return self._number1

    @number1.setter
    def number1(self, number1):
        """Sets the number1 of this RegistrationModel.

        The buffer number 1

        :param number1: The number1 of this RegistrationModel.
        :type number1: int
        """

        self._number1 = number1

    @property
    def number2(self):
        """Gets the number2 of this RegistrationModel.

        The buffer number 2

        :return: The number2 of this RegistrationModel.
        :rtype: int
        """
        return self._number2

    @number2.setter
    def number2(self, number2):
        """Sets the number2 of this RegistrationModel.

        The buffer number 2

        :param number2: The number2 of this RegistrationModel.
        :type number2: int
        """

        self._number2 = number2

    @property
    def number3(self):
        """Gets the number3 of this RegistrationModel.

        The buffer number 3

        :return: The number3 of this RegistrationModel.
        :rtype: int
        """
        return self._number3

    @number3.setter
    def number3(self, number3):
        """Sets the number3 of this RegistrationModel.

        The buffer number 3

        :param number3: The number3 of this RegistrationModel.
        :type number3: int
        """

        self._number3 = number3

    @property
    def password(self):
        """Gets the password of this RegistrationModel.

        The password of customer

        :return: The password of this RegistrationModel.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this RegistrationModel.

        The password of customer

        :param password: The password of this RegistrationModel.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def phone(self):
        """Gets the phone of this RegistrationModel.

        The mobile number

        :return: The phone of this RegistrationModel.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this RegistrationModel.

        The mobile number

        :param phone: The phone of this RegistrationModel.
        :type phone: str
        """

        self._phone = phone

    @property
    def state(self):
        """Gets the state of this RegistrationModel.

        The state of customer

        :return: The state of this RegistrationModel.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RegistrationModel.

        The state of customer

        :param state: The state of this RegistrationModel.
        :type state: str
        """

        self._state = state

    @property
    def storage(self):
        """Gets the storage of this RegistrationModel.

        The facial recognition type of customer

        :return: The storage of this RegistrationModel.
        :rtype: str
        """
        return self._storage

    @storage.setter
    def storage(self, storage):
        """Sets the storage of this RegistrationModel.

        The facial recognition type of customer

        :param storage: The storage of this RegistrationModel.
        :type storage: str
        """

        self._storage = storage

    @property
    def street_address(self):
        """Gets the street_address of this RegistrationModel.

        The street of address

        :return: The street_address of this RegistrationModel.
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this RegistrationModel.

        The street of address

        :param street_address: The street_address of this RegistrationModel.
        :type street_address: str
        """

        self._street_address = street_address

    @property
    def string1(self):
        """Gets the string1 of this RegistrationModel.

        The buffer string 1

        :return: The string1 of this RegistrationModel.
        :rtype: str
        """
        return self._string1

    @string1.setter
    def string1(self, string1):
        """Sets the string1 of this RegistrationModel.

        The buffer string 1

        :param string1: The string1 of this RegistrationModel.
        :type string1: str
        """

        self._string1 = string1

    @property
    def string2(self):
        """Gets the string2 of this RegistrationModel.

        The buffer string 2

        :return: The string2 of this RegistrationModel.
        :rtype: str
        """
        return self._string2

    @string2.setter
    def string2(self, string2):
        """Sets the string2 of this RegistrationModel.

        The buffer string 2

        :param string2: The string2 of this RegistrationModel.
        :type string2: str
        """

        self._string2 = string2

    @property
    def string3(self):
        """Gets the string3 of this RegistrationModel.

        The buffer string 3

        :return: The string3 of this RegistrationModel.
        :rtype: str
        """
        return self._string3

    @string3.setter
    def string3(self, string3):
        """Sets the string3 of this RegistrationModel.

        The buffer string 3

        :param string3: The string3 of this RegistrationModel.
        :type string3: str
        """

        self._string3 = string3

    @property
    def username(self):
        """Gets the username of this RegistrationModel.

        The username of customer

        :return: The username of this RegistrationModel.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this RegistrationModel.

        The username of customer

        :param username: The username of this RegistrationModel.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def zip(self):
        """Gets the zip of this RegistrationModel.

        The zip code of address

        :return: The zip of this RegistrationModel.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this RegistrationModel.

        The zip code of address

        :param zip: The zip of this RegistrationModel.
        :type zip: str
        """

        self._zip = zip
