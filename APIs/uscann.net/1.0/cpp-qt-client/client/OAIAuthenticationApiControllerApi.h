/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAuthenticationApiControllerApi_H
#define OAI_OAIAuthenticationApiControllerApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEmailModel.h"
#include "OAIForgotMailToken.h"
#include "OAIJwtResponse.h"
#include "OAILoginUser.h"
#include "OAIMailToken.h"
#include "OAIProblem.h"
#include "OAIRegistrationModel.h"
#include "OAIResponseStatus.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAuthenticationApiControllerApi : public QObject {
    Q_OBJECT

public:
    OAIAuthenticationApiControllerApi(const int timeOut = 0);
    ~OAIAuthenticationApiControllerApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  login_user OAILoginUser [required]
    */
    virtual void authenticateUser(const QString &content_type, const OAILoginUser &login_user);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  forgot_password OAIEmailModel [required]
    */
    virtual void forgotPassword(const QString &content_type, const OAIEmailModel &forgot_password);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  r_register OAIRegistrationModel [required]
    */
    virtual void r_register(const QString &content_type, const OAIRegistrationModel &r_register);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  token OAIForgotMailToken [required]
    */
    virtual void setForgotPassword(const QString &content_type, const OAIForgotMailToken &token);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  token OAIMailToken [required]
    */
    virtual void validateMailToken(const QString &content_type, const OAIMailToken &token);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void authenticateUserCallback(OAIHttpRequestWorker *worker);
    void forgotPasswordCallback(OAIHttpRequestWorker *worker);
    void r_registerCallback(OAIHttpRequestWorker *worker);
    void setForgotPasswordCallback(OAIHttpRequestWorker *worker);
    void validateMailTokenCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void authenticateUserSignal(OAIJwtResponse summary);
    void forgotPasswordSignal(OAIResponseStatus summary);
    void r_registerSignal(OAIResponseStatus summary);
    void setForgotPasswordSignal(OAIResponseStatus summary);
    void validateMailTokenSignal(OAIResponseStatus summary);


    void authenticateUserSignalFull(OAIHttpRequestWorker *worker, OAIJwtResponse summary);
    void forgotPasswordSignalFull(OAIHttpRequestWorker *worker, OAIResponseStatus summary);
    void r_registerSignalFull(OAIHttpRequestWorker *worker, OAIResponseStatus summary);
    void setForgotPasswordSignalFull(OAIHttpRequestWorker *worker, OAIResponseStatus summary);
    void validateMailTokenSignalFull(OAIHttpRequestWorker *worker, OAIResponseStatus summary);

    Q_DECL_DEPRECATED_X("Use authenticateUserSignalError() instead")
    void authenticateUserSignalE(OAIJwtResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void authenticateUserSignalError(OAIJwtResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forgotPasswordSignalError() instead")
    void forgotPasswordSignalE(OAIResponseStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forgotPasswordSignalError(OAIResponseStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_registerSignalError() instead")
    void r_registerSignalE(OAIResponseStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void r_registerSignalError(OAIResponseStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setForgotPasswordSignalError() instead")
    void setForgotPasswordSignalE(OAIResponseStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setForgotPasswordSignalError(OAIResponseStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateMailTokenSignalError() instead")
    void validateMailTokenSignalE(OAIResponseStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void validateMailTokenSignalError(OAIResponseStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use authenticateUserSignalErrorFull() instead")
    void authenticateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authenticateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forgotPasswordSignalErrorFull() instead")
    void forgotPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forgotPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use r_registerSignalErrorFull() instead")
    void r_registerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void r_registerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setForgotPasswordSignalErrorFull() instead")
    void setForgotPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setForgotPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateMailTokenSignalErrorFull() instead")
    void validateMailTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validateMailTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
