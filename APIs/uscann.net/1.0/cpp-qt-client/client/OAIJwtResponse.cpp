/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJwtResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJwtResponse::OAIJwtResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJwtResponse::OAIJwtResponse() {
    this->initializeModel();
}

OAIJwtResponse::~OAIJwtResponse() {}

void OAIJwtResponse::initializeModel() {

    m_activities_isSet = false;
    m_activities_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_partner_id_isSet = false;
    m_partner_id_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIJwtResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJwtResponse::fromJsonObject(QJsonObject json) {

    m_activities_isValid = ::OpenAPI::fromJsonValue(m_activities, json[QString("activities")]);
    m_activities_isSet = !json[QString("activities")].isNull() && m_activities_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customerId")]);
    m_customer_id_isSet = !json[QString("customerId")].isNull() && m_customer_id_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("fullName")]);
    m_full_name_isSet = !json[QString("fullName")].isNull() && m_full_name_isValid;

    m_partner_id_isValid = ::OpenAPI::fromJsonValue(m_partner_id, json[QString("partnerId")]);
    m_partner_id_isSet = !json[QString("partnerId")].isNull() && m_partner_id_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIJwtResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJwtResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_activities_isSet) {
        obj.insert(QString("activities"), ::OpenAPI::toJsonValue(m_activities));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customerId"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("fullName"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_partner_id_isSet) {
        obj.insert(QString("partnerId"), ::OpenAPI::toJsonValue(m_partner_id));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_settings_isSet) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIJwtResponse::getActivities() const {
    return m_activities;
}
void OAIJwtResponse::setActivities(const QString &activities) {
    m_activities = activities;
    m_activities_isSet = true;
}

bool OAIJwtResponse::is_activities_Set() const{
    return m_activities_isSet;
}

bool OAIJwtResponse::is_activities_Valid() const{
    return m_activities_isValid;
}

qint32 OAIJwtResponse::getCustomerId() const {
    return m_customer_id;
}
void OAIJwtResponse::setCustomerId(const qint32 &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIJwtResponse::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIJwtResponse::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAIJwtResponse::getEmail() const {
    return m_email;
}
void OAIJwtResponse::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIJwtResponse::is_email_Set() const{
    return m_email_isSet;
}

bool OAIJwtResponse::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIJwtResponse::getFullName() const {
    return m_full_name;
}
void OAIJwtResponse::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIJwtResponse::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIJwtResponse::is_full_name_Valid() const{
    return m_full_name_isValid;
}

qint32 OAIJwtResponse::getPartnerId() const {
    return m_partner_id;
}
void OAIJwtResponse::setPartnerId(const qint32 &partner_id) {
    m_partner_id = partner_id;
    m_partner_id_isSet = true;
}

bool OAIJwtResponse::is_partner_id_Set() const{
    return m_partner_id_isSet;
}

bool OAIJwtResponse::is_partner_id_Valid() const{
    return m_partner_id_isValid;
}

QString OAIJwtResponse::getRole() const {
    return m_role;
}
void OAIJwtResponse::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIJwtResponse::is_role_Set() const{
    return m_role_isSet;
}

bool OAIJwtResponse::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIJwtResponse::getSettings() const {
    return m_settings;
}
void OAIJwtResponse::setSettings(const QString &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIJwtResponse::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIJwtResponse::is_settings_Valid() const{
    return m_settings_isValid;
}

QString OAIJwtResponse::getToken() const {
    return m_token;
}
void OAIJwtResponse::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIJwtResponse::is_token_Set() const{
    return m_token_isSet;
}

bool OAIJwtResponse::is_token_Valid() const{
    return m_token_isValid;
}

QString OAIJwtResponse::getType() const {
    return m_type;
}
void OAIJwtResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIJwtResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIJwtResponse::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIJwtResponse::getUserId() const {
    return m_user_id;
}
void OAIJwtResponse::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIJwtResponse::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIJwtResponse::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIJwtResponse::getUsername() const {
    return m_username;
}
void OAIJwtResponse::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIJwtResponse::is_username_Set() const{
    return m_username_isSet;
}

bool OAIJwtResponse::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIJwtResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJwtResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_token_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
