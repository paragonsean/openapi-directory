/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistrationModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistrationModel::OAIRegistrationModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistrationModel::OAIRegistrationModel() {
    this->initializeModel();
}

OAIRegistrationModel::~OAIRegistrationModel() {}

void OAIRegistrationModel::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_company_description_isSet = false;
    m_company_description_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_date1_isSet = false;
    m_date1_isValid = false;

    m_date2_isSet = false;
    m_date2_isValid = false;

    m_date3_isSet = false;
    m_date3_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_number1_isSet = false;
    m_number1_isValid = false;

    m_number2_isSet = false;
    m_number2_isValid = false;

    m_number3_isSet = false;
    m_number3_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_storage_isSet = false;
    m_storage_isValid = false;

    m_street_address_isSet = false;
    m_street_address_isValid = false;

    m_string1_isSet = false;
    m_string1_isValid = false;

    m_string2_isSet = false;
    m_string2_isValid = false;

    m_string3_isSet = false;
    m_string3_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_zip_isSet = false;
    m_zip_isValid = false;
}

void OAIRegistrationModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistrationModel::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_company_description_isValid = ::OpenAPI::fromJsonValue(m_company_description, json[QString("companyDescription")]);
    m_company_description_isSet = !json[QString("companyDescription")].isNull() && m_company_description_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("companyName")]);
    m_company_name_isSet = !json[QString("companyName")].isNull() && m_company_name_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_date1_isValid = ::OpenAPI::fromJsonValue(m_date1, json[QString("date1")]);
    m_date1_isSet = !json[QString("date1")].isNull() && m_date1_isValid;

    m_date2_isValid = ::OpenAPI::fromJsonValue(m_date2, json[QString("date2")]);
    m_date2_isSet = !json[QString("date2")].isNull() && m_date2_isValid;

    m_date3_isValid = ::OpenAPI::fromJsonValue(m_date3, json[QString("date3")]);
    m_date3_isSet = !json[QString("date3")].isNull() && m_date3_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_number1_isValid = ::OpenAPI::fromJsonValue(m_number1, json[QString("number1")]);
    m_number1_isSet = !json[QString("number1")].isNull() && m_number1_isValid;

    m_number2_isValid = ::OpenAPI::fromJsonValue(m_number2, json[QString("number2")]);
    m_number2_isSet = !json[QString("number2")].isNull() && m_number2_isValid;

    m_number3_isValid = ::OpenAPI::fromJsonValue(m_number3, json[QString("number3")]);
    m_number3_isSet = !json[QString("number3")].isNull() && m_number3_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("phone")]);
    m_phone_isSet = !json[QString("phone")].isNull() && m_phone_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_storage_isValid = ::OpenAPI::fromJsonValue(m_storage, json[QString("storage")]);
    m_storage_isSet = !json[QString("storage")].isNull() && m_storage_isValid;

    m_street_address_isValid = ::OpenAPI::fromJsonValue(m_street_address, json[QString("streetAddress")]);
    m_street_address_isSet = !json[QString("streetAddress")].isNull() && m_street_address_isValid;

    m_string1_isValid = ::OpenAPI::fromJsonValue(m_string1, json[QString("string1")]);
    m_string1_isSet = !json[QString("string1")].isNull() && m_string1_isValid;

    m_string2_isValid = ::OpenAPI::fromJsonValue(m_string2, json[QString("string2")]);
    m_string2_isSet = !json[QString("string2")].isNull() && m_string2_isValid;

    m_string3_isValid = ::OpenAPI::fromJsonValue(m_string3, json[QString("string3")]);
    m_string3_isSet = !json[QString("string3")].isNull() && m_string3_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_zip_isValid = ::OpenAPI::fromJsonValue(m_zip, json[QString("zip")]);
    m_zip_isSet = !json[QString("zip")].isNull() && m_zip_isValid;
}

QString OAIRegistrationModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistrationModel::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_company_description_isSet) {
        obj.insert(QString("companyDescription"), ::OpenAPI::toJsonValue(m_company_description));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("companyName"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_date1_isSet) {
        obj.insert(QString("date1"), ::OpenAPI::toJsonValue(m_date1));
    }
    if (m_date2_isSet) {
        obj.insert(QString("date2"), ::OpenAPI::toJsonValue(m_date2));
    }
    if (m_date3_isSet) {
        obj.insert(QString("date3"), ::OpenAPI::toJsonValue(m_date3));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_number1_isSet) {
        obj.insert(QString("number1"), ::OpenAPI::toJsonValue(m_number1));
    }
    if (m_number2_isSet) {
        obj.insert(QString("number2"), ::OpenAPI::toJsonValue(m_number2));
    }
    if (m_number3_isSet) {
        obj.insert(QString("number3"), ::OpenAPI::toJsonValue(m_number3));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_phone_isSet) {
        obj.insert(QString("phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_storage_isSet) {
        obj.insert(QString("storage"), ::OpenAPI::toJsonValue(m_storage));
    }
    if (m_street_address_isSet) {
        obj.insert(QString("streetAddress"), ::OpenAPI::toJsonValue(m_street_address));
    }
    if (m_string1_isSet) {
        obj.insert(QString("string1"), ::OpenAPI::toJsonValue(m_string1));
    }
    if (m_string2_isSet) {
        obj.insert(QString("string2"), ::OpenAPI::toJsonValue(m_string2));
    }
    if (m_string3_isSet) {
        obj.insert(QString("string3"), ::OpenAPI::toJsonValue(m_string3));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_zip_isSet) {
        obj.insert(QString("zip"), ::OpenAPI::toJsonValue(m_zip));
    }
    return obj;
}

QString OAIRegistrationModel::getCity() const {
    return m_city;
}
void OAIRegistrationModel::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIRegistrationModel::is_city_Set() const{
    return m_city_isSet;
}

bool OAIRegistrationModel::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIRegistrationModel::getCompanyDescription() const {
    return m_company_description;
}
void OAIRegistrationModel::setCompanyDescription(const QString &company_description) {
    m_company_description = company_description;
    m_company_description_isSet = true;
}

bool OAIRegistrationModel::is_company_description_Set() const{
    return m_company_description_isSet;
}

bool OAIRegistrationModel::is_company_description_Valid() const{
    return m_company_description_isValid;
}

QString OAIRegistrationModel::getCompanyName() const {
    return m_company_name;
}
void OAIRegistrationModel::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAIRegistrationModel::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAIRegistrationModel::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QString OAIRegistrationModel::getCountry() const {
    return m_country;
}
void OAIRegistrationModel::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIRegistrationModel::is_country_Set() const{
    return m_country_isSet;
}

bool OAIRegistrationModel::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIRegistrationModel::getDate1() const {
    return m_date1;
}
void OAIRegistrationModel::setDate1(const QString &date1) {
    m_date1 = date1;
    m_date1_isSet = true;
}

bool OAIRegistrationModel::is_date1_Set() const{
    return m_date1_isSet;
}

bool OAIRegistrationModel::is_date1_Valid() const{
    return m_date1_isValid;
}

QString OAIRegistrationModel::getDate2() const {
    return m_date2;
}
void OAIRegistrationModel::setDate2(const QString &date2) {
    m_date2 = date2;
    m_date2_isSet = true;
}

bool OAIRegistrationModel::is_date2_Set() const{
    return m_date2_isSet;
}

bool OAIRegistrationModel::is_date2_Valid() const{
    return m_date2_isValid;
}

QString OAIRegistrationModel::getDate3() const {
    return m_date3;
}
void OAIRegistrationModel::setDate3(const QString &date3) {
    m_date3 = date3;
    m_date3_isSet = true;
}

bool OAIRegistrationModel::is_date3_Set() const{
    return m_date3_isSet;
}

bool OAIRegistrationModel::is_date3_Valid() const{
    return m_date3_isValid;
}

QString OAIRegistrationModel::getEmail() const {
    return m_email;
}
void OAIRegistrationModel::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIRegistrationModel::is_email_Set() const{
    return m_email_isSet;
}

bool OAIRegistrationModel::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIRegistrationModel::getFirstName() const {
    return m_first_name;
}
void OAIRegistrationModel::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIRegistrationModel::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIRegistrationModel::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIRegistrationModel::getLastName() const {
    return m_last_name;
}
void OAIRegistrationModel::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIRegistrationModel::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIRegistrationModel::is_last_name_Valid() const{
    return m_last_name_isValid;
}

qint32 OAIRegistrationModel::getNumber1() const {
    return m_number1;
}
void OAIRegistrationModel::setNumber1(const qint32 &number1) {
    m_number1 = number1;
    m_number1_isSet = true;
}

bool OAIRegistrationModel::is_number1_Set() const{
    return m_number1_isSet;
}

bool OAIRegistrationModel::is_number1_Valid() const{
    return m_number1_isValid;
}

qint32 OAIRegistrationModel::getNumber2() const {
    return m_number2;
}
void OAIRegistrationModel::setNumber2(const qint32 &number2) {
    m_number2 = number2;
    m_number2_isSet = true;
}

bool OAIRegistrationModel::is_number2_Set() const{
    return m_number2_isSet;
}

bool OAIRegistrationModel::is_number2_Valid() const{
    return m_number2_isValid;
}

qint32 OAIRegistrationModel::getNumber3() const {
    return m_number3;
}
void OAIRegistrationModel::setNumber3(const qint32 &number3) {
    m_number3 = number3;
    m_number3_isSet = true;
}

bool OAIRegistrationModel::is_number3_Set() const{
    return m_number3_isSet;
}

bool OAIRegistrationModel::is_number3_Valid() const{
    return m_number3_isValid;
}

QString OAIRegistrationModel::getPassword() const {
    return m_password;
}
void OAIRegistrationModel::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIRegistrationModel::is_password_Set() const{
    return m_password_isSet;
}

bool OAIRegistrationModel::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIRegistrationModel::getPhone() const {
    return m_phone;
}
void OAIRegistrationModel::setPhone(const QString &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIRegistrationModel::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIRegistrationModel::is_phone_Valid() const{
    return m_phone_isValid;
}

QString OAIRegistrationModel::getState() const {
    return m_state;
}
void OAIRegistrationModel::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRegistrationModel::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRegistrationModel::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIRegistrationModel::getStorage() const {
    return m_storage;
}
void OAIRegistrationModel::setStorage(const QString &storage) {
    m_storage = storage;
    m_storage_isSet = true;
}

bool OAIRegistrationModel::is_storage_Set() const{
    return m_storage_isSet;
}

bool OAIRegistrationModel::is_storage_Valid() const{
    return m_storage_isValid;
}

QString OAIRegistrationModel::getStreetAddress() const {
    return m_street_address;
}
void OAIRegistrationModel::setStreetAddress(const QString &street_address) {
    m_street_address = street_address;
    m_street_address_isSet = true;
}

bool OAIRegistrationModel::is_street_address_Set() const{
    return m_street_address_isSet;
}

bool OAIRegistrationModel::is_street_address_Valid() const{
    return m_street_address_isValid;
}

QString OAIRegistrationModel::getString1() const {
    return m_string1;
}
void OAIRegistrationModel::setString1(const QString &string1) {
    m_string1 = string1;
    m_string1_isSet = true;
}

bool OAIRegistrationModel::is_string1_Set() const{
    return m_string1_isSet;
}

bool OAIRegistrationModel::is_string1_Valid() const{
    return m_string1_isValid;
}

QString OAIRegistrationModel::getString2() const {
    return m_string2;
}
void OAIRegistrationModel::setString2(const QString &string2) {
    m_string2 = string2;
    m_string2_isSet = true;
}

bool OAIRegistrationModel::is_string2_Set() const{
    return m_string2_isSet;
}

bool OAIRegistrationModel::is_string2_Valid() const{
    return m_string2_isValid;
}

QString OAIRegistrationModel::getString3() const {
    return m_string3;
}
void OAIRegistrationModel::setString3(const QString &string3) {
    m_string3 = string3;
    m_string3_isSet = true;
}

bool OAIRegistrationModel::is_string3_Set() const{
    return m_string3_isSet;
}

bool OAIRegistrationModel::is_string3_Valid() const{
    return m_string3_isValid;
}

QString OAIRegistrationModel::getUsername() const {
    return m_username;
}
void OAIRegistrationModel::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIRegistrationModel::is_username_Set() const{
    return m_username_isSet;
}

bool OAIRegistrationModel::is_username_Valid() const{
    return m_username_isValid;
}

QString OAIRegistrationModel::getZip() const {
    return m_zip;
}
void OAIRegistrationModel::setZip(const QString &zip) {
    m_zip = zip;
    m_zip_isSet = true;
}

bool OAIRegistrationModel::is_zip_Set() const{
    return m_zip_isSet;
}

bool OAIRegistrationModel::is_zip_Valid() const{
    return m_zip_isValid;
}

bool OAIRegistrationModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistrationModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_company_name_isValid && m_email_isValid && m_password_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
