/**
 * hashlookup CIRCL API
 * ![](https://www.circl.lu/assets/images/circl-logo.png) [CIRCL hash lookup](https://hashlookup.circl.lu/) is a public API to lookup hash values against known database of files. For more details about all the datasets included [visit the website of the project](https://www.circl.lu/services/hashlookup/). The API is accessible via HTTP ReST API and the API is also [described as an OpenAPI](https://hashlookup.circl.lu/swagger.json). A [documentation is available with](https://www.circl.lu/services/hashlookup/) with sample queries and software using hashlookup. An offline version as Bloom filter is also [available](https://circl.lu/services/hashlookup/#how-to-quickly-check-a-set-of-files-in-a-local-directory). The API can be tested live in the interface below.
 *
 * The version of the OpenAPI document: 1.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  sha1 QString [required]
    * @param[in]  count qint32 [required]
    * @param[in]  cursor QString [required]
    */
    virtual void getChildren(const QString &sha1, const qint32 &count, const QString &cursor);


    virtual void getInfo();

    /**
    * @param[in]  md5 QString [required]
    */
    virtual void getLookupMd5(const QString &md5);

    /**
    * @param[in]  sha1 QString [required]
    */
    virtual void getLookupSha1(const QString &sha1);

    /**
    * @param[in]  sha256 QString [required]
    */
    virtual void getLookupSha256(const QString &sha256);

    /**
    * @param[in]  sha1 QString [required]
    * @param[in]  count qint32 [required]
    * @param[in]  cursor QString [required]
    */
    virtual void getParents(const QString &sha1, const qint32 &count, const QString &cursor);

    /**
    * @param[in]  name QString [required]
    */
    virtual void getSessionCreate(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void getSessionMatches(const QString &name);


    virtual void getStattop();


    virtual void postBulkmd5();


    virtual void postBulksha1();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getChildrenCallback(OAIHttpRequestWorker *worker);
    void getInfoCallback(OAIHttpRequestWorker *worker);
    void getLookupMd5Callback(OAIHttpRequestWorker *worker);
    void getLookupSha1Callback(OAIHttpRequestWorker *worker);
    void getLookupSha256Callback(OAIHttpRequestWorker *worker);
    void getParentsCallback(OAIHttpRequestWorker *worker);
    void getSessionCreateCallback(OAIHttpRequestWorker *worker);
    void getSessionMatchesCallback(OAIHttpRequestWorker *worker);
    void getStattopCallback(OAIHttpRequestWorker *worker);
    void postBulkmd5Callback(OAIHttpRequestWorker *worker);
    void postBulksha1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getChildrenSignal();
    void getInfoSignal();
    void getLookupMd5Signal();
    void getLookupSha1Signal();
    void getLookupSha256Signal();
    void getParentsSignal();
    void getSessionCreateSignal();
    void getSessionMatchesSignal();
    void getStattopSignal();
    void postBulkmd5Signal();
    void postBulksha1Signal();


    void getChildrenSignalFull(OAIHttpRequestWorker *worker);
    void getInfoSignalFull(OAIHttpRequestWorker *worker);
    void getLookupMd5SignalFull(OAIHttpRequestWorker *worker);
    void getLookupSha1SignalFull(OAIHttpRequestWorker *worker);
    void getLookupSha256SignalFull(OAIHttpRequestWorker *worker);
    void getParentsSignalFull(OAIHttpRequestWorker *worker);
    void getSessionCreateSignalFull(OAIHttpRequestWorker *worker);
    void getSessionMatchesSignalFull(OAIHttpRequestWorker *worker);
    void getStattopSignalFull(OAIHttpRequestWorker *worker);
    void postBulkmd5SignalFull(OAIHttpRequestWorker *worker);
    void postBulksha1SignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getChildrenSignalError() instead")
    void getChildrenSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getChildrenSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInfoSignalError() instead")
    void getInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getInfoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLookupMd5SignalError() instead")
    void getLookupMd5SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getLookupMd5SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLookupSha1SignalError() instead")
    void getLookupSha1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getLookupSha1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLookupSha256SignalError() instead")
    void getLookupSha256SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getLookupSha256SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getParentsSignalError() instead")
    void getParentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getParentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionCreateSignalError() instead")
    void getSessionCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionMatchesSignalError() instead")
    void getSessionMatchesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionMatchesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStattopSignalError() instead")
    void getStattopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getStattopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBulkmd5SignalError() instead")
    void postBulkmd5SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postBulkmd5SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBulksha1SignalError() instead")
    void postBulksha1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postBulksha1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getChildrenSignalErrorFull() instead")
    void getChildrenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChildrenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInfoSignalErrorFull() instead")
    void getInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLookupMd5SignalErrorFull() instead")
    void getLookupMd5SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLookupMd5SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLookupSha1SignalErrorFull() instead")
    void getLookupSha1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLookupSha1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLookupSha256SignalErrorFull() instead")
    void getLookupSha256SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLookupSha256SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getParentsSignalErrorFull() instead")
    void getParentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getParentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionCreateSignalErrorFull() instead")
    void getSessionCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionMatchesSignalErrorFull() instead")
    void getSessionMatchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionMatchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStattopSignalErrorFull() instead")
    void getStattopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStattopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBulkmd5SignalErrorFull() instead")
    void postBulkmd5SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBulkmd5SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBulksha1SignalErrorFull() instead")
    void postBulksha1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBulksha1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
