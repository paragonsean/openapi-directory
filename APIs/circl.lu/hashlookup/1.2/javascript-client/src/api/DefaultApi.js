/**
 * hashlookup CIRCL API
 * ![](https://www.circl.lu/assets/images/circl-logo.png) [CIRCL hash lookup](https://hashlookup.circl.lu/) is a public API to lookup hash values against known database of files. For more details about all the datasets included [visit the website of the project](https://www.circl.lu/services/hashlookup/). The API is accessible via HTTP ReST API and the API is also [described as an OpenAPI](https://hashlookup.circl.lu/swagger.json). A [documentation is available with](https://www.circl.lu/services/hashlookup/) with sample queries and software using hashlookup. An offline version as Bloom filter is also [available](https://circl.lu/services/hashlookup/#how-to-quickly-check-a-set-of-files-in-a-local-directory). The API can be tested live in the interface below.
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Default service.
* @module api/DefaultApi
* @version 1.2
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getChildren operation.
     * @callback module:api/DefaultApi~getChildrenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return children from a given SHA1.  A number of element to return and an offset must be given. If not set it will be the 100 first elements. A cursor must be given to paginate over. The starting cursor is 0.
     * @param {String} sha1 
     * @param {Number} count 
     * @param {String} cursor 
     * @param {module:api/DefaultApi~getChildrenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getChildren(sha1, count, cursor, callback) {
      let postBody = null;
      // verify the required parameter 'sha1' is set
      if (sha1 === undefined || sha1 === null) {
        throw new Error("Missing the required parameter 'sha1' when calling getChildren");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling getChildren");
      }
      // verify the required parameter 'cursor' is set
      if (cursor === undefined || cursor === null) {
        throw new Error("Missing the required parameter 'cursor' when calling getChildren");
      }

      let pathParams = {
        'sha1': sha1,
        'count': count,
        'cursor': cursor
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/children/{sha1}/{count}/{cursor}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInfo operation.
     * @callback module:api/DefaultApi~getInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Info about the hashlookup database
     * @param {module:api/DefaultApi~getInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLookupMd5 operation.
     * @callback module:api/DefaultApi~getLookupMd5Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lookup MD5.
     * @param {String} md5 
     * @param {module:api/DefaultApi~getLookupMd5Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getLookupMd5(md5, callback) {
      let postBody = null;
      // verify the required parameter 'md5' is set
      if (md5 === undefined || md5 === null) {
        throw new Error("Missing the required parameter 'md5' when calling getLookupMd5");
      }

      let pathParams = {
        'md5': md5
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lookup/md5/{md5}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLookupSha1 operation.
     * @callback module:api/DefaultApi~getLookupSha1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lookup SHA-1.
     * @param {String} sha1 
     * @param {module:api/DefaultApi~getLookupSha1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getLookupSha1(sha1, callback) {
      let postBody = null;
      // verify the required parameter 'sha1' is set
      if (sha1 === undefined || sha1 === null) {
        throw new Error("Missing the required parameter 'sha1' when calling getLookupSha1");
      }

      let pathParams = {
        'sha1': sha1
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lookup/sha1/{sha1}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLookupSha256 operation.
     * @callback module:api/DefaultApi~getLookupSha256Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lookup SHA-256.
     * @param {String} sha256 
     * @param {module:api/DefaultApi~getLookupSha256Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getLookupSha256(sha256, callback) {
      let postBody = null;
      // verify the required parameter 'sha256' is set
      if (sha256 === undefined || sha256 === null) {
        throw new Error("Missing the required parameter 'sha256' when calling getLookupSha256");
      }

      let pathParams = {
        'sha256': sha256
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/lookup/sha256/{sha256}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getParents operation.
     * @callback module:api/DefaultApi~getParentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return parents from a given SHA1. A number of element to return and an offset must be given. If not set it will be the 100 first elements. A cursor must be given to paginate over. The starting cursor is 0.
     * @param {String} sha1 
     * @param {Number} count 
     * @param {String} cursor 
     * @param {module:api/DefaultApi~getParentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getParents(sha1, count, cursor, callback) {
      let postBody = null;
      // verify the required parameter 'sha1' is set
      if (sha1 === undefined || sha1 === null) {
        throw new Error("Missing the required parameter 'sha1' when calling getParents");
      }
      // verify the required parameter 'count' is set
      if (count === undefined || count === null) {
        throw new Error("Missing the required parameter 'count' when calling getParents");
      }
      // verify the required parameter 'cursor' is set
      if (cursor === undefined || cursor === null) {
        throw new Error("Missing the required parameter 'cursor' when calling getParents");
      }

      let pathParams = {
        'sha1': sha1,
        'count': count,
        'cursor': cursor
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/parents/{sha1}/{count}/{cursor}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSessionCreate operation.
     * @callback module:api/DefaultApi~getSessionCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a session key to keep search context. The session is attached to a name. After the session is created, the header `hashlookup_session` can be set to the session name.
     * @param {String} name 
     * @param {module:api/DefaultApi~getSessionCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSessionCreate(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getSessionCreate");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/session/create/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSessionMatches operation.
     * @callback module:api/DefaultApi~getSessionMatchesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return set of matching and non-matching hashes from a session.
     * @param {String} name 
     * @param {module:api/DefaultApi~getSessionMatchesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getSessionMatches(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getSessionMatches");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/session/get/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStattop operation.
     * @callback module:api/DefaultApi~getStattopCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Return the top 100 of most queried values.
     * @param {module:api/DefaultApi~getStattopCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getStattop(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stats/top', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBulkmd5 operation.
     * @callback module:api/DefaultApi~postBulkmd5Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk search of MD5 hashes in a JSON array with the key 'hashes'.
     * @param {module:api/DefaultApi~postBulkmd5Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postBulkmd5(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bulk/md5', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBulksha1 operation.
     * @callback module:api/DefaultApi~postBulksha1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Bulk search of SHA1 hashes in a JSON array with the 'hashes'.
     * @param {module:api/DefaultApi~postBulksha1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    postBulksha1(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/bulk/sha1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
