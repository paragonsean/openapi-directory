/**
 * hashlookup CIRCL API
 * ![](https://www.circl.lu/assets/images/circl-logo.png) [CIRCL hash lookup](https://hashlookup.circl.lu/) is a public API to lookup hash values against known database of files. For more details about all the datasets included [visit the website of the project](https://www.circl.lu/services/hashlookup/). The API is accessible via HTTP ReST API and the API is also [described as an OpenAPI](https://hashlookup.circl.lu/swagger.json). A [documentation is available with](https://www.circl.lu/services/hashlookup/) with sample queries and software using hashlookup. An offline version as Bloom filter is also [available](https://circl.lu/services/hashlookup/#how-to-quickly-check-a-set-of-files-in-a-local-directory). The API can be tested live in the interface below.
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HashlookupCirclApi);
  }
}(this, function(expect, HashlookupCirclApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HashlookupCirclApi.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('getChildren', function() {
      it('should call getChildren successfully', function(done) {
        //uncomment below and update the code to test getChildren
        //instance.getChildren(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInfo', function() {
      it('should call getInfo successfully', function(done) {
        //uncomment below and update the code to test getInfo
        //instance.getInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLookupMd5', function() {
      it('should call getLookupMd5 successfully', function(done) {
        //uncomment below and update the code to test getLookupMd5
        //instance.getLookupMd5(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLookupSha1', function() {
      it('should call getLookupSha1 successfully', function(done) {
        //uncomment below and update the code to test getLookupSha1
        //instance.getLookupSha1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLookupSha256', function() {
      it('should call getLookupSha256 successfully', function(done) {
        //uncomment below and update the code to test getLookupSha256
        //instance.getLookupSha256(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getParents', function() {
      it('should call getParents successfully', function(done) {
        //uncomment below and update the code to test getParents
        //instance.getParents(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSessionCreate', function() {
      it('should call getSessionCreate successfully', function(done) {
        //uncomment below and update the code to test getSessionCreate
        //instance.getSessionCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSessionMatches', function() {
      it('should call getSessionMatches successfully', function(done) {
        //uncomment below and update the code to test getSessionMatches
        //instance.getSessionMatches(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStattop', function() {
      it('should call getStattop successfully', function(done) {
        //uncomment below and update the code to test getStattop
        //instance.getStattop(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postBulkmd5', function() {
      it('should call postBulkmd5 successfully', function(done) {
        //uncomment below and update the code to test postBulkmd5
        //instance.postBulkmd5(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postBulksha1', function() {
      it('should call postBulksha1 successfully', function(done) {
        //uncomment below and update the code to test postBulksha1
        //instance.postBulksha1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
