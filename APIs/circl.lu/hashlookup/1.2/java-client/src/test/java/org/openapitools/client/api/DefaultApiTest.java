/*
 * hashlookup CIRCL API
 * ![](https://www.circl.lu/assets/images/circl-logo.png) [CIRCL hash lookup](https://hashlookup.circl.lu/) is a public API to lookup hash values against known database of files. For more details about all the datasets included [visit the website of the project](https://www.circl.lu/services/hashlookup/). The API is accessible via HTTP ReST API and the API is also [described as an OpenAPI](https://hashlookup.circl.lu/swagger.json). A [documentation is available with](https://www.circl.lu/services/hashlookup/) with sample queries and software using hashlookup. An offline version as Bloom filter is also [available](https://circl.lu/services/hashlookup/#how-to-quickly-check-a-set-of-files-in-a-local-directory). The API can be tested live in the interface below.
 *
 * The version of the OpenAPI document: 1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Return children from a given SHA1.  A number of element to return and an offset must be given. If not set it will be the 100 first elements. A cursor must be given to paginate over. The starting cursor is 0.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChildrenTest() throws ApiException {
        String sha1 = null;
        Integer count = null;
        String cursor = null;
        api.getChildren(sha1, count, cursor);
        // TODO: test validations
    }

    /**
     * Info about the hashlookup database
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInfoTest() throws ApiException {
        api.getInfo();
        // TODO: test validations
    }

    /**
     * Lookup MD5.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLookupMd5Test() throws ApiException {
        String md5 = null;
        api.getLookupMd5(md5);
        // TODO: test validations
    }

    /**
     * Lookup SHA-1.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLookupSha1Test() throws ApiException {
        String sha1 = null;
        api.getLookupSha1(sha1);
        // TODO: test validations
    }

    /**
     * Lookup SHA-256.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLookupSha256Test() throws ApiException {
        String sha256 = null;
        api.getLookupSha256(sha256);
        // TODO: test validations
    }

    /**
     * Return parents from a given SHA1. A number of element to return and an offset must be given. If not set it will be the 100 first elements. A cursor must be given to paginate over. The starting cursor is 0.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getParentsTest() throws ApiException {
        String sha1 = null;
        Integer count = null;
        String cursor = null;
        api.getParents(sha1, count, cursor);
        // TODO: test validations
    }

    /**
     * Create a session key to keep search context. The session is attached to a name. After the session is created, the header &#x60;hashlookup_session&#x60; can be set to the session name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSessionCreateTest() throws ApiException {
        String name = null;
        api.getSessionCreate(name);
        // TODO: test validations
    }

    /**
     * Return set of matching and non-matching hashes from a session.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSessionMatchesTest() throws ApiException {
        String name = null;
        api.getSessionMatches(name);
        // TODO: test validations
    }

    /**
     * Return the top 100 of most queried values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStattopTest() throws ApiException {
        api.getStattop();
        // TODO: test validations
    }

    /**
     * Bulk search of MD5 hashes in a JSON array with the key &#39;hashes&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postBulkmd5Test() throws ApiException {
        api.postBulkmd5();
        // TODO: test validations
    }

    /**
     * Bulk search of SHA1 hashes in a JSON array with the &#39;hashes&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postBulksha1Test() throws ApiException {
        api.postBulksha1();
        // TODO: test validations
    }

}
