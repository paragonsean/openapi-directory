/*
 * Events API
 * 1Password Events API Specification.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Client;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single item usage object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:16.093151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ItemUsage {
  /**
   * Gets or Sets action
   */
  @JsonAdapter(ActionEnum.Adapter.class)
  public enum ActionEnum {
    FILL("fill"),
    
    SELECT_SSO_PROVIDER("select-sso-provider"),
    
    ENTER_ITEM_EDIT_MODE("enter-item-edit-mode"),
    
    EXPORT("export"),
    
    SHARE("share"),
    
    SECURE_COPY("secure-copy"),
    
    REVEAL("reveal"),
    
    SERVER_CREATE("server-create"),
    
    SERVER_UPDATE("server-update"),
    
    SERVER_FETCH("server-fetch");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionEnum action;

  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private Client client;

  public static final String SERIALIZED_NAME_ITEM_UUID = "item_uuid";
  @SerializedName(SERIALIZED_NAME_ITEM_UUID)
  private String itemUuid;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_USED_VERSION = "used_version";
  @SerializedName(SERIALIZED_NAME_USED_VERSION)
  private Integer usedVersion;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private User user;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_VAULT_UUID = "vault_uuid";
  @SerializedName(SERIALIZED_NAME_VAULT_UUID)
  private String vaultUuid;

  public ItemUsage() {
  }

  public ItemUsage action(ActionEnum action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public ActionEnum getAction() {
    return action;
  }

  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public ItemUsage client(Client client) {
    this.client = client;
    return this;
  }

  /**
   * Get client
   * @return client
   */
  @javax.annotation.Nullable
  public Client getClient() {
    return client;
  }

  public void setClient(Client client) {
    this.client = client;
  }


  public ItemUsage itemUuid(String itemUuid) {
    this.itemUuid = itemUuid;
    return this;
  }

  /**
   * Get itemUuid
   * @return itemUuid
   */
  @javax.annotation.Nullable
  public String getItemUuid() {
    return itemUuid;
  }

  public void setItemUuid(String itemUuid) {
    this.itemUuid = itemUuid;
  }


  public ItemUsage location(Location location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }


  public ItemUsage timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public ItemUsage usedVersion(Integer usedVersion) {
    this.usedVersion = usedVersion;
    return this;
  }

  /**
   * Get usedVersion
   * @return usedVersion
   */
  @javax.annotation.Nullable
  public Integer getUsedVersion() {
    return usedVersion;
  }

  public void setUsedVersion(Integer usedVersion) {
    this.usedVersion = usedVersion;
  }


  public ItemUsage user(User user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public User getUser() {
    return user;
  }

  public void setUser(User user) {
    this.user = user;
  }


  public ItemUsage uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Get uuid
   * @return uuid
   */
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }


  public ItemUsage vaultUuid(String vaultUuid) {
    this.vaultUuid = vaultUuid;
    return this;
  }

  /**
   * Get vaultUuid
   * @return vaultUuid
   */
  @javax.annotation.Nullable
  public String getVaultUuid() {
    return vaultUuid;
  }

  public void setVaultUuid(String vaultUuid) {
    this.vaultUuid = vaultUuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemUsage itemUsage = (ItemUsage) o;
    return Objects.equals(this.action, itemUsage.action) &&
        Objects.equals(this.client, itemUsage.client) &&
        Objects.equals(this.itemUuid, itemUsage.itemUuid) &&
        Objects.equals(this.location, itemUsage.location) &&
        Objects.equals(this.timestamp, itemUsage.timestamp) &&
        Objects.equals(this.usedVersion, itemUsage.usedVersion) &&
        Objects.equals(this.user, itemUsage.user) &&
        Objects.equals(this.uuid, itemUsage.uuid) &&
        Objects.equals(this.vaultUuid, itemUsage.vaultUuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, client, itemUuid, location, timestamp, usedVersion, user, uuid, vaultUuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemUsage {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    itemUuid: ").append(toIndentedString(itemUuid)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    usedVersion: ").append(toIndentedString(usedVersion)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    vaultUuid: ").append(toIndentedString(vaultUuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("client");
    openapiFields.add("item_uuid");
    openapiFields.add("location");
    openapiFields.add("timestamp");
    openapiFields.add("used_version");
    openapiFields.add("user");
    openapiFields.add("uuid");
    openapiFields.add("vault_uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ItemUsage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItemUsage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemUsage is not found in the empty JSON string", ItemUsage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItemUsage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemUsage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        ActionEnum.validateJsonElement(jsonObj.get("action"));
      }
      // validate the optional field `client`
      if (jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) {
        Client.validateJsonElement(jsonObj.get("client"));
      }
      if ((jsonObj.get("item_uuid") != null && !jsonObj.get("item_uuid").isJsonNull()) && !jsonObj.get("item_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_uuid").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        Location.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("user"));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("vault_uuid") != null && !jsonObj.get("vault_uuid").isJsonNull()) && !jsonObj.get("vault_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vault_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vault_uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemUsage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemUsage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemUsage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemUsage.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemUsage>() {
           @Override
           public void write(JsonWriter out, ItemUsage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemUsage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ItemUsage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ItemUsage
   * @throws IOException if the JSON string is invalid with respect to ItemUsage
   */
  public static ItemUsage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemUsage.class);
  }

  /**
   * Convert an instance of ItemUsage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

