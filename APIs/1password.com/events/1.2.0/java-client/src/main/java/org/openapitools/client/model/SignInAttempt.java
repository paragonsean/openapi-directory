/*
 * Events API
 * 1Password Events API Specification.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Client;
import org.openapitools.client.model.Details;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.User;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single sign-in attempt object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:16.093151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SignInAttempt {
  /**
   * Gets or Sets category
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    SUCCESS("success"),
    
    CREDENTIALS_FAILED("credentials_failed"),
    
    MFA_FAILED("mfa_failed"),
    
    SSO_FAILED("sso_failed"),
    
    MODERN_VERSION_FAILED("modern_version_failed"),
    
    FIREWALL_FAILED("firewall_failed"),
    
    FIREWALL_REPORTED_SUCCESS("firewall_reported_success");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private Client client;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private Details details;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_SESSION_UUID = "session_uuid";
  @SerializedName(SERIALIZED_NAME_SESSION_UUID)
  private String sessionUuid;

  public static final String SERIALIZED_NAME_TARGET_USER = "target_user";
  @SerializedName(SERIALIZED_NAME_TARGET_USER)
  private User targetUser;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CREDENTIALS_OK("credentials_ok"),
    
    MFA_OK("mfa_ok"),
    
    PASSWORD_SECRET_BAD("password_secret_bad"),
    
    MFA_MISSING("mfa_missing"),
    
    TOTP_DISABLED("totp_disabled"),
    
    TOTP_BAD("totp_bad"),
    
    TOTP_TIMEOUT("totp_timeout"),
    
    U2F_DISABLED("u2f_disabled"),
    
    U2F_BAD("u2f_bad"),
    
    U2F_TIMOUT("u2f_timout"),
    
    DUO_DISABLED("duo_disabled"),
    
    DUO_BAD("duo_bad"),
    
    DUO_TIMEOUT("duo_timeout"),
    
    DUO_NATIVE_BAD("duo_native_bad"),
    
    SERVICE_ACCOUNT_SSO_DENIED("service_account_sso_denied"),
    
    NON_SSO_USER("non_sso_user"),
    
    SSO_USER_MISMATCH("sso_user_mismatch"),
    
    PLATFORM_SECRET_DISABLED("platform_secret_disabled"),
    
    PLATFORM_SECRET_BAD("platform_secret_bad"),
    
    PLATFORM_SECRET_PROXY("platform_secret_proxy"),
    
    CODE_DISABLED("code_disabled"),
    
    CODE_BAD("code_bad"),
    
    CODE_TIMEOUT("code_timeout"),
    
    IP_BLOCKED("ip_blocked"),
    
    CONTINENT_BLOCKED("continent_blocked"),
    
    COUNTRY_BLOCKED("country_blocked"),
    
    ANONYMOUS_BLOCKED("anonymous_blocked"),
    
    ALL_BLOCKED("all_blocked"),
    
    MODERN_VERSION_MISSING("modern_version_missing"),
    
    MODERN_VERSION_OLD("modern_version_old");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public SignInAttempt() {
  }

  public SignInAttempt category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public SignInAttempt client(Client client) {
    this.client = client;
    return this;
  }

  /**
   * Get client
   * @return client
   */
  @javax.annotation.Nullable
  public Client getClient() {
    return client;
  }

  public void setClient(Client client) {
    this.client = client;
  }


  public SignInAttempt country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Country ISO Code
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public SignInAttempt details(Details details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public Details getDetails() {
    return details;
  }

  public void setDetails(Details details) {
    this.details = details;
  }


  public SignInAttempt location(Location location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }


  public SignInAttempt sessionUuid(String sessionUuid) {
    this.sessionUuid = sessionUuid;
    return this;
  }

  /**
   * Get sessionUuid
   * @return sessionUuid
   */
  @javax.annotation.Nullable
  public String getSessionUuid() {
    return sessionUuid;
  }

  public void setSessionUuid(String sessionUuid) {
    this.sessionUuid = sessionUuid;
  }


  public SignInAttempt targetUser(User targetUser) {
    this.targetUser = targetUser;
    return this;
  }

  /**
   * Get targetUser
   * @return targetUser
   */
  @javax.annotation.Nullable
  public User getTargetUser() {
    return targetUser;
  }

  public void setTargetUser(User targetUser) {
    this.targetUser = targetUser;
  }


  public SignInAttempt timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public SignInAttempt type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public SignInAttempt uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Get uuid
   * @return uuid
   */
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignInAttempt signInAttempt = (SignInAttempt) o;
    return Objects.equals(this.category, signInAttempt.category) &&
        Objects.equals(this.client, signInAttempt.client) &&
        Objects.equals(this.country, signInAttempt.country) &&
        Objects.equals(this.details, signInAttempt.details) &&
        Objects.equals(this.location, signInAttempt.location) &&
        Objects.equals(this.sessionUuid, signInAttempt.sessionUuid) &&
        Objects.equals(this.targetUser, signInAttempt.targetUser) &&
        Objects.equals(this.timestamp, signInAttempt.timestamp) &&
        Objects.equals(this.type, signInAttempt.type) &&
        Objects.equals(this.uuid, signInAttempt.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, client, country, details, location, sessionUuid, targetUser, timestamp, type, uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignInAttempt {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    sessionUuid: ").append(toIndentedString(sessionUuid)).append("\n");
    sb.append("    targetUser: ").append(toIndentedString(targetUser)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("client");
    openapiFields.add("country");
    openapiFields.add("details");
    openapiFields.add("location");
    openapiFields.add("session_uuid");
    openapiFields.add("target_user");
    openapiFields.add("timestamp");
    openapiFields.add("type");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SignInAttempt
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SignInAttempt.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SignInAttempt is not found in the empty JSON string", SignInAttempt.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SignInAttempt.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SignInAttempt` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      // validate the optional field `client`
      if (jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) {
        Client.validateJsonElement(jsonObj.get("client"));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // validate the optional field `details`
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        Details.validateJsonElement(jsonObj.get("details"));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        Location.validateJsonElement(jsonObj.get("location"));
      }
      if ((jsonObj.get("session_uuid") != null && !jsonObj.get("session_uuid").isJsonNull()) && !jsonObj.get("session_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_uuid").toString()));
      }
      // validate the optional field `target_user`
      if (jsonObj.get("target_user") != null && !jsonObj.get("target_user").isJsonNull()) {
        User.validateJsonElement(jsonObj.get("target_user"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SignInAttempt.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SignInAttempt' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SignInAttempt> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SignInAttempt.class));

       return (TypeAdapter<T>) new TypeAdapter<SignInAttempt>() {
           @Override
           public void write(JsonWriter out, SignInAttempt value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SignInAttempt read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SignInAttempt given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SignInAttempt
   * @throws IOException if the JSON string is invalid with respect to SignInAttempt
   */
  public static SignInAttempt fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SignInAttempt.class);
  }

  /**
   * Convert an instance of SignInAttempt to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

