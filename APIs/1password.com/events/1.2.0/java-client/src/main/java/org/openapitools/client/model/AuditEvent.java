/*
 * Events API
 * 1Password Events API Specification.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AuditEventActions;
import org.openapitools.client.model.AuditEventObjectTypes;
import org.openapitools.client.model.Location;
import org.openapitools.client.model.Session;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single audit event object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:18:16.093151-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuditEvent {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private AuditEventActions action;

  public static final String SERIALIZED_NAME_ACTOR_UUID = "actor_uuid";
  @SerializedName(SERIALIZED_NAME_ACTOR_UUID)
  private String actorUuid;

  public static final String SERIALIZED_NAME_AUX_ID = "aux_id";
  @SerializedName(SERIALIZED_NAME_AUX_ID)
  private Integer auxId;

  public static final String SERIALIZED_NAME_AUX_INFO = "aux_info";
  @SerializedName(SERIALIZED_NAME_AUX_INFO)
  private String auxInfo;

  public static final String SERIALIZED_NAME_AUX_UUID = "aux_uuid";
  @SerializedName(SERIALIZED_NAME_AUX_UUID)
  private String auxUuid;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private Location location;

  public static final String SERIALIZED_NAME_OBJECT_TYPE = "object_type";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE)
  private AuditEventObjectTypes objectType;

  public static final String SERIALIZED_NAME_OBJECT_UUID = "object_uuid";
  @SerializedName(SERIALIZED_NAME_OBJECT_UUID)
  private String objectUuid;

  public static final String SERIALIZED_NAME_SESSION = "session";
  @SerializedName(SERIALIZED_NAME_SESSION)
  private Session session;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public AuditEvent() {
  }

  public AuditEvent action(AuditEventActions action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public AuditEventActions getAction() {
    return action;
  }

  public void setAction(AuditEventActions action) {
    this.action = action;
  }


  public AuditEvent actorUuid(String actorUuid) {
    this.actorUuid = actorUuid;
    return this;
  }

  /**
   * Get actorUuid
   * @return actorUuid
   */
  @javax.annotation.Nullable
  public String getActorUuid() {
    return actorUuid;
  }

  public void setActorUuid(String actorUuid) {
    this.actorUuid = actorUuid;
  }


  public AuditEvent auxId(Integer auxId) {
    this.auxId = auxId;
    return this;
  }

  /**
   * Get auxId
   * @return auxId
   */
  @javax.annotation.Nullable
  public Integer getAuxId() {
    return auxId;
  }

  public void setAuxId(Integer auxId) {
    this.auxId = auxId;
  }


  public AuditEvent auxInfo(String auxInfo) {
    this.auxInfo = auxInfo;
    return this;
  }

  /**
   * Get auxInfo
   * @return auxInfo
   */
  @javax.annotation.Nullable
  public String getAuxInfo() {
    return auxInfo;
  }

  public void setAuxInfo(String auxInfo) {
    this.auxInfo = auxInfo;
  }


  public AuditEvent auxUuid(String auxUuid) {
    this.auxUuid = auxUuid;
    return this;
  }

  /**
   * Get auxUuid
   * @return auxUuid
   */
  @javax.annotation.Nullable
  public String getAuxUuid() {
    return auxUuid;
  }

  public void setAuxUuid(String auxUuid) {
    this.auxUuid = auxUuid;
  }


  public AuditEvent location(Location location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public Location getLocation() {
    return location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }


  public AuditEvent objectType(AuditEventObjectTypes objectType) {
    this.objectType = objectType;
    return this;
  }

  /**
   * Get objectType
   * @return objectType
   */
  @javax.annotation.Nullable
  public AuditEventObjectTypes getObjectType() {
    return objectType;
  }

  public void setObjectType(AuditEventObjectTypes objectType) {
    this.objectType = objectType;
  }


  public AuditEvent objectUuid(String objectUuid) {
    this.objectUuid = objectUuid;
    return this;
  }

  /**
   * Get objectUuid
   * @return objectUuid
   */
  @javax.annotation.Nullable
  public String getObjectUuid() {
    return objectUuid;
  }

  public void setObjectUuid(String objectUuid) {
    this.objectUuid = objectUuid;
  }


  public AuditEvent session(Session session) {
    this.session = session;
    return this;
  }

  /**
   * Get session
   * @return session
   */
  @javax.annotation.Nullable
  public Session getSession() {
    return session;
  }

  public void setSession(Session session) {
    this.session = session;
  }


  public AuditEvent timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public AuditEvent uuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  /**
   * Get uuid
   * @return uuid
   */
  @javax.annotation.Nullable
  public String getUuid() {
    return uuid;
  }

  public void setUuid(String uuid) {
    this.uuid = uuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditEvent auditEvent = (AuditEvent) o;
    return Objects.equals(this.action, auditEvent.action) &&
        Objects.equals(this.actorUuid, auditEvent.actorUuid) &&
        Objects.equals(this.auxId, auditEvent.auxId) &&
        Objects.equals(this.auxInfo, auditEvent.auxInfo) &&
        Objects.equals(this.auxUuid, auditEvent.auxUuid) &&
        Objects.equals(this.location, auditEvent.location) &&
        Objects.equals(this.objectType, auditEvent.objectType) &&
        Objects.equals(this.objectUuid, auditEvent.objectUuid) &&
        Objects.equals(this.session, auditEvent.session) &&
        Objects.equals(this.timestamp, auditEvent.timestamp) &&
        Objects.equals(this.uuid, auditEvent.uuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, actorUuid, auxId, auxInfo, auxUuid, location, objectType, objectUuid, session, timestamp, uuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditEvent {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    actorUuid: ").append(toIndentedString(actorUuid)).append("\n");
    sb.append("    auxId: ").append(toIndentedString(auxId)).append("\n");
    sb.append("    auxInfo: ").append(toIndentedString(auxInfo)).append("\n");
    sb.append("    auxUuid: ").append(toIndentedString(auxUuid)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("    objectUuid: ").append(toIndentedString(objectUuid)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("actor_uuid");
    openapiFields.add("aux_id");
    openapiFields.add("aux_info");
    openapiFields.add("aux_uuid");
    openapiFields.add("location");
    openapiFields.add("object_type");
    openapiFields.add("object_uuid");
    openapiFields.add("session");
    openapiFields.add("timestamp");
    openapiFields.add("uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuditEvent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuditEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuditEvent is not found in the empty JSON string", AuditEvent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuditEvent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuditEvent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `action`
      if (jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) {
        AuditEventActions.validateJsonElement(jsonObj.get("action"));
      }
      if ((jsonObj.get("actor_uuid") != null && !jsonObj.get("actor_uuid").isJsonNull()) && !jsonObj.get("actor_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actor_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actor_uuid").toString()));
      }
      if ((jsonObj.get("aux_info") != null && !jsonObj.get("aux_info").isJsonNull()) && !jsonObj.get("aux_info").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aux_info` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aux_info").toString()));
      }
      if ((jsonObj.get("aux_uuid") != null && !jsonObj.get("aux_uuid").isJsonNull()) && !jsonObj.get("aux_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aux_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aux_uuid").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        Location.validateJsonElement(jsonObj.get("location"));
      }
      // validate the optional field `object_type`
      if (jsonObj.get("object_type") != null && !jsonObj.get("object_type").isJsonNull()) {
        AuditEventObjectTypes.validateJsonElement(jsonObj.get("object_type"));
      }
      if ((jsonObj.get("object_uuid") != null && !jsonObj.get("object_uuid").isJsonNull()) && !jsonObj.get("object_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object_uuid").toString()));
      }
      // validate the optional field `session`
      if (jsonObj.get("session") != null && !jsonObj.get("session").isJsonNull()) {
        Session.validateJsonElement(jsonObj.get("session"));
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuditEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuditEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuditEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuditEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<AuditEvent>() {
           @Override
           public void write(JsonWriter out, AuditEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuditEvent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuditEvent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuditEvent
   * @throws IOException if the JSON string is invalid with respect to AuditEvent
   */
  public static AuditEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuditEvent.class);
  }

  /**
   * Convert an instance of AuditEvent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

