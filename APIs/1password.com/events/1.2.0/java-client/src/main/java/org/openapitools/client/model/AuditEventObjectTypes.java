/*
 * Events API
 * 1Password Events API Specification.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets AuditEventObjectTypes
 */
@JsonAdapter(AuditEventObjectTypes.Adapter.class)
public enum AuditEventObjectTypes {
  
  ACCOUNT("account"),
  
  USER("user"),
  
  DEVICE("device"),
  
  GROUP("group"),
  
  GM("gm"),
  
  VAULT("vault"),
  
  ITEM("item"),
  
  ITEMS("items"),
  
  ITEMHIST("itemhist"),
  
  VAULTKEY("vaultkey"),
  
  TEMPLATE("template"),
  
  UVA("uva"),
  
  GVA("gva"),
  
  INVITE("invite"),
  
  EC("ec"),
  
  MIGUSER("miguser"),
  
  SSO("sso"),
  
  SUB("sub"),
  
  CARD("card"),
  
  PM("pm"),
  
  SLACKAPP("slackapp"),
  
  FILE("file"),
  
  FAMCHILD("famchild"),
  
  SA("sa"),
  
  SATOKEN("satoken"),
  
  DLGDSESS("dlgdsess"),
  
  SSOTKN("ssotkn"),
  
  REPORT("report");

  private String value;

  AuditEventObjectTypes(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static AuditEventObjectTypes fromValue(String value) {
    for (AuditEventObjectTypes b : AuditEventObjectTypes.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<AuditEventObjectTypes> {
    @Override
    public void write(final JsonWriter jsonWriter, final AuditEventObjectTypes enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public AuditEventObjectTypes read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return AuditEventObjectTypes.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    AuditEventObjectTypes.fromValue(value);
  }
}

