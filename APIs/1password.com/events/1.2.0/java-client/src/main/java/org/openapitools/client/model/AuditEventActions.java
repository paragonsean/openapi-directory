/*
 * Events API
 * 1Password Events API Specification.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets AuditEventActions
 */
@JsonAdapter(AuditEventActions.Adapter.class)
public enum AuditEventActions {
  
  ACTIVATE("activate"),
  
  UPDATE("update"),
  
  DELETE("delete"),
  
  CONVERT("convert"),
  
  ENBLDUO("enblduo"),
  
  UPDATDUO("updatduo"),
  
  DISBLDUO("disblduo"),
  
  RDMCHILD("rdmchild"),
  
  DETCHILD("detchild"),
  
  DLGSESS("dlgsess"),
  
  CREATE("create"),
  
  DEOLDDEV("deolddev"),
  
  DEALLDEV("dealldev"),
  
  REAUTH("reauth"),
  
  BEGIN("begin"),
  
  COMPLETE("complete"),
  
  PROPOSE("propose"),
  
  UPDATFW("updatfw"),
  
  JOIN("join"),
  
  LEAVE("leave"),
  
  ROLE("role"),
  
  PURGE("purge"),
  
  VIEW("view"),
  
  EXPORT("export"),
  
  REPLACE("replace"),
  
  GRANT("grant"),
  
  REVOKE("revoke"),
  
  SHARE("share"),
  
  DELSHARE("delshare"),
  
  UISAS("uisas"),
  
  ENBLMFA("enblmfa"),
  
  UPDATMFA("updatmfa"),
  
  DISBLMFA("disblmfa"),
  
  MUSERCOM("musercom"),
  
  MUSERDEC("muserdec"),
  
  SENDPKG("sendpkg"),
  
  RESENDTS("resendts"),
  
  PRSNDALL("prsndall"),
  
  TRENAME("trename"),
  
  TVERIFY("tverify"),
  
  TREVOKE("trevoke"),
  
  SSOTKNV("ssotknv"),
  
  ENBLSSO("enblsso"),
  
  DISBLSSO("disblsso"),
  
  CHNGPSSO("chngpsso"),
  
  CHNGASSO("chngasso"),
  
  CHNGDSSO("chngdsso"),
  
  DELGSSO("delgsso"),
  
  ADDGSSO("addgsso"),
  
  CANCEL("cancel"),
  
  HIDE("hide"),
  
  UNHIDE("unhide"),
  
  UPGUEST("upguest"),
  
  VERIFY("verify"),
  
  REACTIVE("reactive"),
  
  SUSPEND("suspend"),
  
  BEGINR("beginr"),
  
  PROVSN("provsn"),
  
  SENDTS("sendts"),
  
  UNKNOWN("unknown"),
  
  COMPLETR("completr"),
  
  CANCELR("cancelr"),
  
  TRVLAWAY("trvlaway"),
  
  TRVLBACK("trvlback"),
  
  CHANGEKS("changeks"),
  
  CHANGEMP("changemp"),
  
  CHANGESK("changesk"),
  
  CHANGENM("changenm"),
  
  CHANGELA("changela"),
  
  TDVCSSO("tdvcsso"),
  
  SDVCSSO("sdvcsso"),
  
  PATCH("patch"),
  
  UPDATEA("updatea"),
  
  VRFYDMN("vrfydmn"),
  
  UVRFYDMN("uvrfydmn"),
  
  DVRFYDMN("dvrfydmn");

  private String value;

  AuditEventActions(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static AuditEventActions fromValue(String value) {
    for (AuditEventActions b : AuditEventActions.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<AuditEventActions> {
    @Override
    public void write(final JsonWriter jsonWriter, final AuditEventActions enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public AuditEventActions read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return AuditEventActions.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    AuditEventActions.fromValue(value);
  }
}

