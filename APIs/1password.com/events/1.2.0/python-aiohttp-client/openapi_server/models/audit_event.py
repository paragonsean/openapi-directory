# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audit_event_actions import AuditEventActions
from openapi_server.models.audit_event_object_types import AuditEventObjectTypes
from openapi_server.models.location import Location
from openapi_server.models.session import Session
from openapi_server import util


class AuditEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: AuditEventActions=None, actor_uuid: str=None, aux_id: int=None, aux_info: str=None, aux_uuid: str=None, location: Location=None, object_type: AuditEventObjectTypes=None, object_uuid: str=None, session: Session=None, timestamp: datetime=None, uuid: str=None):
        """AuditEvent - a model defined in OpenAPI

        :param action: The action of this AuditEvent.
        :param actor_uuid: The actor_uuid of this AuditEvent.
        :param aux_id: The aux_id of this AuditEvent.
        :param aux_info: The aux_info of this AuditEvent.
        :param aux_uuid: The aux_uuid of this AuditEvent.
        :param location: The location of this AuditEvent.
        :param object_type: The object_type of this AuditEvent.
        :param object_uuid: The object_uuid of this AuditEvent.
        :param session: The session of this AuditEvent.
        :param timestamp: The timestamp of this AuditEvent.
        :param uuid: The uuid of this AuditEvent.
        """
        self.openapi_types = {
            'action': AuditEventActions,
            'actor_uuid': str,
            'aux_id': int,
            'aux_info': str,
            'aux_uuid': str,
            'location': Location,
            'object_type': AuditEventObjectTypes,
            'object_uuid': str,
            'session': Session,
            'timestamp': datetime,
            'uuid': str
        }

        self.attribute_map = {
            'action': 'action',
            'actor_uuid': 'actor_uuid',
            'aux_id': 'aux_id',
            'aux_info': 'aux_info',
            'aux_uuid': 'aux_uuid',
            'location': 'location',
            'object_type': 'object_type',
            'object_uuid': 'object_uuid',
            'session': 'session',
            'timestamp': 'timestamp',
            'uuid': 'uuid'
        }

        self._action = action
        self._actor_uuid = actor_uuid
        self._aux_id = aux_id
        self._aux_info = aux_info
        self._aux_uuid = aux_uuid
        self._location = location
        self._object_type = object_type
        self._object_uuid = object_uuid
        self._session = session
        self._timestamp = timestamp
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuditEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuditEvent of this AuditEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this AuditEvent.


        :return: The action of this AuditEvent.
        :rtype: AuditEventActions
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this AuditEvent.


        :param action: The action of this AuditEvent.
        :type action: AuditEventActions
        """

        self._action = action

    @property
    def actor_uuid(self):
        """Gets the actor_uuid of this AuditEvent.


        :return: The actor_uuid of this AuditEvent.
        :rtype: str
        """
        return self._actor_uuid

    @actor_uuid.setter
    def actor_uuid(self, actor_uuid):
        """Sets the actor_uuid of this AuditEvent.


        :param actor_uuid: The actor_uuid of this AuditEvent.
        :type actor_uuid: str
        """

        self._actor_uuid = actor_uuid

    @property
    def aux_id(self):
        """Gets the aux_id of this AuditEvent.


        :return: The aux_id of this AuditEvent.
        :rtype: int
        """
        return self._aux_id

    @aux_id.setter
    def aux_id(self, aux_id):
        """Sets the aux_id of this AuditEvent.


        :param aux_id: The aux_id of this AuditEvent.
        :type aux_id: int
        """

        self._aux_id = aux_id

    @property
    def aux_info(self):
        """Gets the aux_info of this AuditEvent.


        :return: The aux_info of this AuditEvent.
        :rtype: str
        """
        return self._aux_info

    @aux_info.setter
    def aux_info(self, aux_info):
        """Sets the aux_info of this AuditEvent.


        :param aux_info: The aux_info of this AuditEvent.
        :type aux_info: str
        """

        self._aux_info = aux_info

    @property
    def aux_uuid(self):
        """Gets the aux_uuid of this AuditEvent.


        :return: The aux_uuid of this AuditEvent.
        :rtype: str
        """
        return self._aux_uuid

    @aux_uuid.setter
    def aux_uuid(self, aux_uuid):
        """Sets the aux_uuid of this AuditEvent.


        :param aux_uuid: The aux_uuid of this AuditEvent.
        :type aux_uuid: str
        """

        self._aux_uuid = aux_uuid

    @property
    def location(self):
        """Gets the location of this AuditEvent.


        :return: The location of this AuditEvent.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AuditEvent.


        :param location: The location of this AuditEvent.
        :type location: Location
        """

        self._location = location

    @property
    def object_type(self):
        """Gets the object_type of this AuditEvent.


        :return: The object_type of this AuditEvent.
        :rtype: AuditEventObjectTypes
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this AuditEvent.


        :param object_type: The object_type of this AuditEvent.
        :type object_type: AuditEventObjectTypes
        """

        self._object_type = object_type

    @property
    def object_uuid(self):
        """Gets the object_uuid of this AuditEvent.


        :return: The object_uuid of this AuditEvent.
        :rtype: str
        """
        return self._object_uuid

    @object_uuid.setter
    def object_uuid(self, object_uuid):
        """Sets the object_uuid of this AuditEvent.


        :param object_uuid: The object_uuid of this AuditEvent.
        :type object_uuid: str
        """

        self._object_uuid = object_uuid

    @property
    def session(self):
        """Gets the session of this AuditEvent.


        :return: The session of this AuditEvent.
        :rtype: Session
        """
        return self._session

    @session.setter
    def session(self, session):
        """Sets the session of this AuditEvent.


        :param session: The session of this AuditEvent.
        :type session: Session
        """

        self._session = session

    @property
    def timestamp(self):
        """Gets the timestamp of this AuditEvent.


        :return: The timestamp of this AuditEvent.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AuditEvent.


        :param timestamp: The timestamp of this AuditEvent.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def uuid(self):
        """Gets the uuid of this AuditEvent.


        :return: The uuid of this AuditEvent.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this AuditEvent.


        :param uuid: The uuid of this AuditEvent.
        :type uuid: str
        """

        self._uuid = uuid
