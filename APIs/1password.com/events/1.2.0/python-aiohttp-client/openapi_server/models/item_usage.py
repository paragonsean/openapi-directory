# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.client import Client
from openapi_server.models.location import Location
from openapi_server.models.user import User
from openapi_server import util


class ItemUsage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, client: Client=None, item_uuid: str=None, location: Location=None, timestamp: datetime=None, used_version: int=None, user: User=None, uuid: str=None, vault_uuid: str=None):
        """ItemUsage - a model defined in OpenAPI

        :param action: The action of this ItemUsage.
        :param client: The client of this ItemUsage.
        :param item_uuid: The item_uuid of this ItemUsage.
        :param location: The location of this ItemUsage.
        :param timestamp: The timestamp of this ItemUsage.
        :param used_version: The used_version of this ItemUsage.
        :param user: The user of this ItemUsage.
        :param uuid: The uuid of this ItemUsage.
        :param vault_uuid: The vault_uuid of this ItemUsage.
        """
        self.openapi_types = {
            'action': str,
            'client': Client,
            'item_uuid': str,
            'location': Location,
            'timestamp': datetime,
            'used_version': int,
            'user': User,
            'uuid': str,
            'vault_uuid': str
        }

        self.attribute_map = {
            'action': 'action',
            'client': 'client',
            'item_uuid': 'item_uuid',
            'location': 'location',
            'timestamp': 'timestamp',
            'used_version': 'used_version',
            'user': 'user',
            'uuid': 'uuid',
            'vault_uuid': 'vault_uuid'
        }

        self._action = action
        self._client = client
        self._item_uuid = item_uuid
        self._location = location
        self._timestamp = timestamp
        self._used_version = used_version
        self._user = user
        self._uuid = uuid
        self._vault_uuid = vault_uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ItemUsage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ItemUsage of this ItemUsage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this ItemUsage.


        :return: The action of this ItemUsage.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ItemUsage.


        :param action: The action of this ItemUsage.
        :type action: str
        """
        allowed_values = ["fill", "select-sso-provider", "enter-item-edit-mode", "export", "share", "secure-copy", "reveal", "server-create", "server-update", "server-fetch"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def client(self):
        """Gets the client of this ItemUsage.


        :return: The client of this ItemUsage.
        :rtype: Client
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this ItemUsage.


        :param client: The client of this ItemUsage.
        :type client: Client
        """

        self._client = client

    @property
    def item_uuid(self):
        """Gets the item_uuid of this ItemUsage.


        :return: The item_uuid of this ItemUsage.
        :rtype: str
        """
        return self._item_uuid

    @item_uuid.setter
    def item_uuid(self, item_uuid):
        """Sets the item_uuid of this ItemUsage.


        :param item_uuid: The item_uuid of this ItemUsage.
        :type item_uuid: str
        """

        self._item_uuid = item_uuid

    @property
    def location(self):
        """Gets the location of this ItemUsage.


        :return: The location of this ItemUsage.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ItemUsage.


        :param location: The location of this ItemUsage.
        :type location: Location
        """

        self._location = location

    @property
    def timestamp(self):
        """Gets the timestamp of this ItemUsage.


        :return: The timestamp of this ItemUsage.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ItemUsage.


        :param timestamp: The timestamp of this ItemUsage.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def used_version(self):
        """Gets the used_version of this ItemUsage.


        :return: The used_version of this ItemUsage.
        :rtype: int
        """
        return self._used_version

    @used_version.setter
    def used_version(self, used_version):
        """Sets the used_version of this ItemUsage.


        :param used_version: The used_version of this ItemUsage.
        :type used_version: int
        """

        self._used_version = used_version

    @property
    def user(self):
        """Gets the user of this ItemUsage.


        :return: The user of this ItemUsage.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ItemUsage.


        :param user: The user of this ItemUsage.
        :type user: User
        """

        self._user = user

    @property
    def uuid(self):
        """Gets the uuid of this ItemUsage.


        :return: The uuid of this ItemUsage.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this ItemUsage.


        :param uuid: The uuid of this ItemUsage.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def vault_uuid(self):
        """Gets the vault_uuid of this ItemUsage.


        :return: The vault_uuid of this ItemUsage.
        :rtype: str
        """
        return self._vault_uuid

    @vault_uuid.setter
    def vault_uuid(self, vault_uuid):
        """Sets the vault_uuid of this ItemUsage.


        :param vault_uuid: The vault_uuid of this ItemUsage.
        :type vault_uuid: str
        """

        self._vault_uuid = vault_uuid
