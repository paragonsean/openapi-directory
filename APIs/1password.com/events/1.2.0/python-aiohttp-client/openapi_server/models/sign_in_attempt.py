# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.client import Client
from openapi_server.models.details import Details
from openapi_server.models.location import Location
from openapi_server.models.user import User
from openapi_server import util


class SignInAttempt(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, client: Client=None, country: str=None, details: Details=None, location: Location=None, session_uuid: str=None, target_user: User=None, timestamp: datetime=None, type: str=None, uuid: str=None):
        """SignInAttempt - a model defined in OpenAPI

        :param category: The category of this SignInAttempt.
        :param client: The client of this SignInAttempt.
        :param country: The country of this SignInAttempt.
        :param details: The details of this SignInAttempt.
        :param location: The location of this SignInAttempt.
        :param session_uuid: The session_uuid of this SignInAttempt.
        :param target_user: The target_user of this SignInAttempt.
        :param timestamp: The timestamp of this SignInAttempt.
        :param type: The type of this SignInAttempt.
        :param uuid: The uuid of this SignInAttempt.
        """
        self.openapi_types = {
            'category': str,
            'client': Client,
            'country': str,
            'details': Details,
            'location': Location,
            'session_uuid': str,
            'target_user': User,
            'timestamp': datetime,
            'type': str,
            'uuid': str
        }

        self.attribute_map = {
            'category': 'category',
            'client': 'client',
            'country': 'country',
            'details': 'details',
            'location': 'location',
            'session_uuid': 'session_uuid',
            'target_user': 'target_user',
            'timestamp': 'timestamp',
            'type': 'type',
            'uuid': 'uuid'
        }

        self._category = category
        self._client = client
        self._country = country
        self._details = details
        self._location = location
        self._session_uuid = session_uuid
        self._target_user = target_user
        self._timestamp = timestamp
        self._type = type
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SignInAttempt':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SignInAttempt of this SignInAttempt.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this SignInAttempt.


        :return: The category of this SignInAttempt.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SignInAttempt.


        :param category: The category of this SignInAttempt.
        :type category: str
        """
        allowed_values = ["success", "credentials_failed", "mfa_failed", "sso_failed", "modern_version_failed", "firewall_failed", "firewall_reported_success"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def client(self):
        """Gets the client of this SignInAttempt.


        :return: The client of this SignInAttempt.
        :rtype: Client
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this SignInAttempt.


        :param client: The client of this SignInAttempt.
        :type client: Client
        """

        self._client = client

    @property
    def country(self):
        """Gets the country of this SignInAttempt.

        Country ISO Code

        :return: The country of this SignInAttempt.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SignInAttempt.

        Country ISO Code

        :param country: The country of this SignInAttempt.
        :type country: str
        """

        self._country = country

    @property
    def details(self):
        """Gets the details of this SignInAttempt.


        :return: The details of this SignInAttempt.
        :rtype: Details
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this SignInAttempt.


        :param details: The details of this SignInAttempt.
        :type details: Details
        """

        self._details = details

    @property
    def location(self):
        """Gets the location of this SignInAttempt.


        :return: The location of this SignInAttempt.
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this SignInAttempt.


        :param location: The location of this SignInAttempt.
        :type location: Location
        """

        self._location = location

    @property
    def session_uuid(self):
        """Gets the session_uuid of this SignInAttempt.


        :return: The session_uuid of this SignInAttempt.
        :rtype: str
        """
        return self._session_uuid

    @session_uuid.setter
    def session_uuid(self, session_uuid):
        """Sets the session_uuid of this SignInAttempt.


        :param session_uuid: The session_uuid of this SignInAttempt.
        :type session_uuid: str
        """

        self._session_uuid = session_uuid

    @property
    def target_user(self):
        """Gets the target_user of this SignInAttempt.


        :return: The target_user of this SignInAttempt.
        :rtype: User
        """
        return self._target_user

    @target_user.setter
    def target_user(self, target_user):
        """Sets the target_user of this SignInAttempt.


        :param target_user: The target_user of this SignInAttempt.
        :type target_user: User
        """

        self._target_user = target_user

    @property
    def timestamp(self):
        """Gets the timestamp of this SignInAttempt.


        :return: The timestamp of this SignInAttempt.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SignInAttempt.


        :param timestamp: The timestamp of this SignInAttempt.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def type(self):
        """Gets the type of this SignInAttempt.


        :return: The type of this SignInAttempt.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SignInAttempt.


        :param type: The type of this SignInAttempt.
        :type type: str
        """
        allowed_values = ["credentials_ok", "mfa_ok", "password_secret_bad", "mfa_missing", "totp_disabled", "totp_bad", "totp_timeout", "u2f_disabled", "u2f_bad", "u2f_timout", "duo_disabled", "duo_bad", "duo_timeout", "duo_native_bad", "service_account_sso_denied", "non_sso_user", "sso_user_mismatch", "platform_secret_disabled", "platform_secret_bad", "platform_secret_proxy", "code_disabled", "code_bad", "code_timeout", "ip_blocked", "continent_blocked", "country_blocked", "anonymous_blocked", "all_blocked", "modern_version_missing", "modern_version_old"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def uuid(self):
        """Gets the uuid of this SignInAttempt.


        :return: The uuid of this SignInAttempt.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this SignInAttempt.


        :param uuid: The uuid of this SignInAttempt.
        :type uuid: str
        """

        self._uuid = uuid
