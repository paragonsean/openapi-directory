/**
 * Events API
 * 1Password Events API Specification.
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntrospectionV2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntrospectionV2::OAIIntrospectionV2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntrospectionV2::OAIIntrospectionV2() {
    this->initializeModel();
}

OAIIntrospectionV2::~OAIIntrospectionV2() {}

void OAIIntrospectionV2::initializeModel() {

    m_features_isSet = false;
    m_features_isValid = false;

    m_issued_at_isSet = false;
    m_issued_at_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIIntrospectionV2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntrospectionV2::fromJsonObject(QJsonObject json) {

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_issued_at_isValid = ::OpenAPI::fromJsonValue(m_issued_at, json[QString("issued_at")]);
    m_issued_at_isSet = !json[QString("issued_at")].isNull() && m_issued_at_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIIntrospectionV2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntrospectionV2::asJsonObject() const {
    QJsonObject obj;
    if (m_features.size() > 0) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_issued_at_isSet) {
        obj.insert(QString("issued_at"), ::OpenAPI::toJsonValue(m_issued_at));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QList<QString> OAIIntrospectionV2::getFeatures() const {
    return m_features;
}
void OAIIntrospectionV2::setFeatures(const QList<QString> &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIIntrospectionV2::is_features_Set() const{
    return m_features_isSet;
}

bool OAIIntrospectionV2::is_features_Valid() const{
    return m_features_isValid;
}

QDateTime OAIIntrospectionV2::getIssuedAt() const {
    return m_issued_at;
}
void OAIIntrospectionV2::setIssuedAt(const QDateTime &issued_at) {
    m_issued_at = issued_at;
    m_issued_at_isSet = true;
}

bool OAIIntrospectionV2::is_issued_at_Set() const{
    return m_issued_at_isSet;
}

bool OAIIntrospectionV2::is_issued_at_Valid() const{
    return m_issued_at_isValid;
}

QString OAIIntrospectionV2::getUuid() const {
    return m_uuid;
}
void OAIIntrospectionV2::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIIntrospectionV2::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIIntrospectionV2::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIIntrospectionV2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_issued_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntrospectionV2::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
