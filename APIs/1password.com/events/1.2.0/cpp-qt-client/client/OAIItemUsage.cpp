/**
 * Events API
 * 1Password Events API Specification.
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItemUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItemUsage::OAIItemUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItemUsage::OAIItemUsage() {
    this->initializeModel();
}

OAIItemUsage::~OAIItemUsage() {}

void OAIItemUsage::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_client_isSet = false;
    m_client_isValid = false;

    m_item_uuid_isSet = false;
    m_item_uuid_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_used_version_isSet = false;
    m_used_version_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;

    m_vault_uuid_isSet = false;
    m_vault_uuid_isValid = false;
}

void OAIItemUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItemUsage::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_item_uuid_isValid = ::OpenAPI::fromJsonValue(m_item_uuid, json[QString("item_uuid")]);
    m_item_uuid_isSet = !json[QString("item_uuid")].isNull() && m_item_uuid_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_used_version_isValid = ::OpenAPI::fromJsonValue(m_used_version, json[QString("used_version")]);
    m_used_version_isSet = !json[QString("used_version")].isNull() && m_used_version_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;

    m_vault_uuid_isValid = ::OpenAPI::fromJsonValue(m_vault_uuid, json[QString("vault_uuid")]);
    m_vault_uuid_isSet = !json[QString("vault_uuid")].isNull() && m_vault_uuid_isValid;
}

QString OAIItemUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItemUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_client.isSet()) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_item_uuid_isSet) {
        obj.insert(QString("item_uuid"), ::OpenAPI::toJsonValue(m_item_uuid));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_used_version_isSet) {
        obj.insert(QString("used_version"), ::OpenAPI::toJsonValue(m_used_version));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    if (m_vault_uuid_isSet) {
        obj.insert(QString("vault_uuid"), ::OpenAPI::toJsonValue(m_vault_uuid));
    }
    return obj;
}

QString OAIItemUsage::getAction() const {
    return m_action;
}
void OAIItemUsage::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIItemUsage::is_action_Set() const{
    return m_action_isSet;
}

bool OAIItemUsage::is_action_Valid() const{
    return m_action_isValid;
}

OAIClient OAIItemUsage::getClient() const {
    return m_client;
}
void OAIItemUsage::setClient(const OAIClient &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAIItemUsage::is_client_Set() const{
    return m_client_isSet;
}

bool OAIItemUsage::is_client_Valid() const{
    return m_client_isValid;
}

QString OAIItemUsage::getItemUuid() const {
    return m_item_uuid;
}
void OAIItemUsage::setItemUuid(const QString &item_uuid) {
    m_item_uuid = item_uuid;
    m_item_uuid_isSet = true;
}

bool OAIItemUsage::is_item_uuid_Set() const{
    return m_item_uuid_isSet;
}

bool OAIItemUsage::is_item_uuid_Valid() const{
    return m_item_uuid_isValid;
}

OAILocation OAIItemUsage::getLocation() const {
    return m_location;
}
void OAIItemUsage::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIItemUsage::is_location_Set() const{
    return m_location_isSet;
}

bool OAIItemUsage::is_location_Valid() const{
    return m_location_isValid;
}

QDateTime OAIItemUsage::getTimestamp() const {
    return m_timestamp;
}
void OAIItemUsage::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIItemUsage::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIItemUsage::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

qint32 OAIItemUsage::getUsedVersion() const {
    return m_used_version;
}
void OAIItemUsage::setUsedVersion(const qint32 &used_version) {
    m_used_version = used_version;
    m_used_version_isSet = true;
}

bool OAIItemUsage::is_used_version_Set() const{
    return m_used_version_isSet;
}

bool OAIItemUsage::is_used_version_Valid() const{
    return m_used_version_isValid;
}

OAIUser OAIItemUsage::getUser() const {
    return m_user;
}
void OAIItemUsage::setUser(const OAIUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIItemUsage::is_user_Set() const{
    return m_user_isSet;
}

bool OAIItemUsage::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIItemUsage::getUuid() const {
    return m_uuid;
}
void OAIItemUsage::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIItemUsage::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIItemUsage::is_uuid_Valid() const{
    return m_uuid_isValid;
}

QString OAIItemUsage::getVaultUuid() const {
    return m_vault_uuid;
}
void OAIItemUsage::setVaultUuid(const QString &vault_uuid) {
    m_vault_uuid = vault_uuid;
    m_vault_uuid_isSet = true;
}

bool OAIItemUsage::is_vault_uuid_Set() const{
    return m_vault_uuid_isSet;
}

bool OAIItemUsage::is_vault_uuid_Valid() const{
    return m_vault_uuid_isValid;
}

bool OAIItemUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vault_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItemUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
