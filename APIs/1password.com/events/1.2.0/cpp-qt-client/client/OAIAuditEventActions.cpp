/**
 * Events API
 * 1Password Events API Specification.
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditEventActions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditEventActions::OAIAuditEventActions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditEventActions::OAIAuditEventActions() {
    this->initializeModel();
}

OAIAuditEventActions::~OAIAuditEventActions() {}

void OAIAuditEventActions::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAuditEventActions::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAuditEventActions::fromJson(QString jsonString) {
    
    if ( jsonString.compare("activate", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::ACTIVATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("update", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::UPDATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("delete", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::DELETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("convert", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::CONVERT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("enblduo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::ENBLDUO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("updatduo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::UPDATDUO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("disblduo", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::DISBLDUO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("rdmchild", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::RDMCHILD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("detchild", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::DETCHILD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("dlgsess", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::DLGSESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("create", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::CREATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("deolddev", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::DEOLDDEV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("dealldev", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::DEALLDEV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("reauth", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::REAUTH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("begin", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::BEGIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("complete", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::COMPLETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("propose", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::PROPOSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("updatfw", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::UPDATFW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("join", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::JOIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("leave", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::LEAVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("role", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::ROLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("purge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::PURGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("view", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::VIEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("export", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::EXPORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("replace", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::REPLACE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("grant", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::GRANT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("revoke", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::REVOKE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("share", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::SHARE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("delshare", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::DELSHARE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("uisas", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::UISAS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("enblmfa", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::ENBLMFA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("updatmfa", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::UPDATMFA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("disblmfa", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::DISBLMFA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("musercom", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::MUSERCOM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("muserdec", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::MUSERDEC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sendpkg", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::SENDPKG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("resendts", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::RESENDTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("prsndall", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::PRSNDALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("trename", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::TRENAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tverify", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::TVERIFY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("trevoke", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::TREVOKE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ssotknv", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::SSOTKNV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("enblsso", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::ENBLSSO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("disblsso", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::DISBLSSO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("chngpsso", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::CHNGPSSO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("chngasso", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::CHNGASSO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("chngdsso", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::CHNGDSSO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("delgsso", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::DELGSSO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("addgsso", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::ADDGSSO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cancel", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::CANCEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hide", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::HIDE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("unhide", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::UNHIDE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("upguest", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::UPGUEST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("verify", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::VERIFY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("reactive", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::REACTIVE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("suspend", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::SUSPEND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("beginr", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::BEGINR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("provsn", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::PROVSN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sendts", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::SENDTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("unknown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::UNKNOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("completr", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::COMPLETR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cancelr", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::CANCELR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("trvlaway", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::TRVLAWAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("trvlback", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::TRVLBACK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("changeks", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::CHANGEKS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("changemp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::CHANGEMP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("changesk", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::CHANGESK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("changenm", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::CHANGENM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("changela", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::CHANGELA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tdvcsso", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::TDVCSSO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sdvcsso", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::SDVCSSO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("patch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::PATCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("updatea", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::UPDATEA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("vrfydmn", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::VRFYDMN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("uvrfydmn", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::UVRFYDMN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("dvrfydmn", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventActions::DVRFYDMN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAuditEventActions::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAuditEventActions::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAuditEventActions::ACTIVATE:
            val = "activate";
            break;
        case eOAIAuditEventActions::UPDATE:
            val = "update";
            break;
        case eOAIAuditEventActions::DELETE:
            val = "delete";
            break;
        case eOAIAuditEventActions::CONVERT:
            val = "convert";
            break;
        case eOAIAuditEventActions::ENBLDUO:
            val = "enblduo";
            break;
        case eOAIAuditEventActions::UPDATDUO:
            val = "updatduo";
            break;
        case eOAIAuditEventActions::DISBLDUO:
            val = "disblduo";
            break;
        case eOAIAuditEventActions::RDMCHILD:
            val = "rdmchild";
            break;
        case eOAIAuditEventActions::DETCHILD:
            val = "detchild";
            break;
        case eOAIAuditEventActions::DLGSESS:
            val = "dlgsess";
            break;
        case eOAIAuditEventActions::CREATE:
            val = "create";
            break;
        case eOAIAuditEventActions::DEOLDDEV:
            val = "deolddev";
            break;
        case eOAIAuditEventActions::DEALLDEV:
            val = "dealldev";
            break;
        case eOAIAuditEventActions::REAUTH:
            val = "reauth";
            break;
        case eOAIAuditEventActions::BEGIN:
            val = "begin";
            break;
        case eOAIAuditEventActions::COMPLETE:
            val = "complete";
            break;
        case eOAIAuditEventActions::PROPOSE:
            val = "propose";
            break;
        case eOAIAuditEventActions::UPDATFW:
            val = "updatfw";
            break;
        case eOAIAuditEventActions::JOIN:
            val = "join";
            break;
        case eOAIAuditEventActions::LEAVE:
            val = "leave";
            break;
        case eOAIAuditEventActions::ROLE:
            val = "role";
            break;
        case eOAIAuditEventActions::PURGE:
            val = "purge";
            break;
        case eOAIAuditEventActions::VIEW:
            val = "view";
            break;
        case eOAIAuditEventActions::EXPORT:
            val = "export";
            break;
        case eOAIAuditEventActions::REPLACE:
            val = "replace";
            break;
        case eOAIAuditEventActions::GRANT:
            val = "grant";
            break;
        case eOAIAuditEventActions::REVOKE:
            val = "revoke";
            break;
        case eOAIAuditEventActions::SHARE:
            val = "share";
            break;
        case eOAIAuditEventActions::DELSHARE:
            val = "delshare";
            break;
        case eOAIAuditEventActions::UISAS:
            val = "uisas";
            break;
        case eOAIAuditEventActions::ENBLMFA:
            val = "enblmfa";
            break;
        case eOAIAuditEventActions::UPDATMFA:
            val = "updatmfa";
            break;
        case eOAIAuditEventActions::DISBLMFA:
            val = "disblmfa";
            break;
        case eOAIAuditEventActions::MUSERCOM:
            val = "musercom";
            break;
        case eOAIAuditEventActions::MUSERDEC:
            val = "muserdec";
            break;
        case eOAIAuditEventActions::SENDPKG:
            val = "sendpkg";
            break;
        case eOAIAuditEventActions::RESENDTS:
            val = "resendts";
            break;
        case eOAIAuditEventActions::PRSNDALL:
            val = "prsndall";
            break;
        case eOAIAuditEventActions::TRENAME:
            val = "trename";
            break;
        case eOAIAuditEventActions::TVERIFY:
            val = "tverify";
            break;
        case eOAIAuditEventActions::TREVOKE:
            val = "trevoke";
            break;
        case eOAIAuditEventActions::SSOTKNV:
            val = "ssotknv";
            break;
        case eOAIAuditEventActions::ENBLSSO:
            val = "enblsso";
            break;
        case eOAIAuditEventActions::DISBLSSO:
            val = "disblsso";
            break;
        case eOAIAuditEventActions::CHNGPSSO:
            val = "chngpsso";
            break;
        case eOAIAuditEventActions::CHNGASSO:
            val = "chngasso";
            break;
        case eOAIAuditEventActions::CHNGDSSO:
            val = "chngdsso";
            break;
        case eOAIAuditEventActions::DELGSSO:
            val = "delgsso";
            break;
        case eOAIAuditEventActions::ADDGSSO:
            val = "addgsso";
            break;
        case eOAIAuditEventActions::CANCEL:
            val = "cancel";
            break;
        case eOAIAuditEventActions::HIDE:
            val = "hide";
            break;
        case eOAIAuditEventActions::UNHIDE:
            val = "unhide";
            break;
        case eOAIAuditEventActions::UPGUEST:
            val = "upguest";
            break;
        case eOAIAuditEventActions::VERIFY:
            val = "verify";
            break;
        case eOAIAuditEventActions::REACTIVE:
            val = "reactive";
            break;
        case eOAIAuditEventActions::SUSPEND:
            val = "suspend";
            break;
        case eOAIAuditEventActions::BEGINR:
            val = "beginr";
            break;
        case eOAIAuditEventActions::PROVSN:
            val = "provsn";
            break;
        case eOAIAuditEventActions::SENDTS:
            val = "sendts";
            break;
        case eOAIAuditEventActions::UNKNOWN:
            val = "unknown";
            break;
        case eOAIAuditEventActions::COMPLETR:
            val = "completr";
            break;
        case eOAIAuditEventActions::CANCELR:
            val = "cancelr";
            break;
        case eOAIAuditEventActions::TRVLAWAY:
            val = "trvlaway";
            break;
        case eOAIAuditEventActions::TRVLBACK:
            val = "trvlback";
            break;
        case eOAIAuditEventActions::CHANGEKS:
            val = "changeks";
            break;
        case eOAIAuditEventActions::CHANGEMP:
            val = "changemp";
            break;
        case eOAIAuditEventActions::CHANGESK:
            val = "changesk";
            break;
        case eOAIAuditEventActions::CHANGENM:
            val = "changenm";
            break;
        case eOAIAuditEventActions::CHANGELA:
            val = "changela";
            break;
        case eOAIAuditEventActions::TDVCSSO:
            val = "tdvcsso";
            break;
        case eOAIAuditEventActions::SDVCSSO:
            val = "sdvcsso";
            break;
        case eOAIAuditEventActions::PATCH:
            val = "patch";
            break;
        case eOAIAuditEventActions::UPDATEA:
            val = "updatea";
            break;
        case eOAIAuditEventActions::VRFYDMN:
            val = "vrfydmn";
            break;
        case eOAIAuditEventActions::UVRFYDMN:
            val = "uvrfydmn";
            break;
        case eOAIAuditEventActions::DVRFYDMN:
            val = "dvrfydmn";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAuditEventActions::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAuditEventActions::eOAIAuditEventActions OAIAuditEventActions::getValue() const {
    return m_value;
}

void OAIAuditEventActions::setValue(const OAIAuditEventActions::eOAIAuditEventActions& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAuditEventActions::isSet() const {
    
    return m_value_isSet;
}

bool OAIAuditEventActions::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
