/**
 * Events API
 * 1Password Events API Specification.
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISignInAttempt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISignInAttempt::OAISignInAttempt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISignInAttempt::OAISignInAttempt() {
    this->initializeModel();
}

OAISignInAttempt::~OAISignInAttempt() {}

void OAISignInAttempt::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_client_isSet = false;
    m_client_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_session_uuid_isSet = false;
    m_session_uuid_isValid = false;

    m_target_user_isSet = false;
    m_target_user_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAISignInAttempt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISignInAttempt::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_client_isValid = ::OpenAPI::fromJsonValue(m_client, json[QString("client")]);
    m_client_isSet = !json[QString("client")].isNull() && m_client_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_session_uuid_isValid = ::OpenAPI::fromJsonValue(m_session_uuid, json[QString("session_uuid")]);
    m_session_uuid_isSet = !json[QString("session_uuid")].isNull() && m_session_uuid_isValid;

    m_target_user_isValid = ::OpenAPI::fromJsonValue(m_target_user, json[QString("target_user")]);
    m_target_user_isSet = !json[QString("target_user")].isNull() && m_target_user_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAISignInAttempt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISignInAttempt::asJsonObject() const {
    QJsonObject obj;
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_client.isSet()) {
        obj.insert(QString("client"), ::OpenAPI::toJsonValue(m_client));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_details.isSet()) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_session_uuid_isSet) {
        obj.insert(QString("session_uuid"), ::OpenAPI::toJsonValue(m_session_uuid));
    }
    if (m_target_user.isSet()) {
        obj.insert(QString("target_user"), ::OpenAPI::toJsonValue(m_target_user));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAISignInAttempt::getCategory() const {
    return m_category;
}
void OAISignInAttempt::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAISignInAttempt::is_category_Set() const{
    return m_category_isSet;
}

bool OAISignInAttempt::is_category_Valid() const{
    return m_category_isValid;
}

OAIClient OAISignInAttempt::getClient() const {
    return m_client;
}
void OAISignInAttempt::setClient(const OAIClient &client) {
    m_client = client;
    m_client_isSet = true;
}

bool OAISignInAttempt::is_client_Set() const{
    return m_client_isSet;
}

bool OAISignInAttempt::is_client_Valid() const{
    return m_client_isValid;
}

QString OAISignInAttempt::getCountry() const {
    return m_country;
}
void OAISignInAttempt::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAISignInAttempt::is_country_Set() const{
    return m_country_isSet;
}

bool OAISignInAttempt::is_country_Valid() const{
    return m_country_isValid;
}

OAIDetails OAISignInAttempt::getDetails() const {
    return m_details;
}
void OAISignInAttempt::setDetails(const OAIDetails &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAISignInAttempt::is_details_Set() const{
    return m_details_isSet;
}

bool OAISignInAttempt::is_details_Valid() const{
    return m_details_isValid;
}

OAILocation OAISignInAttempt::getLocation() const {
    return m_location;
}
void OAISignInAttempt::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAISignInAttempt::is_location_Set() const{
    return m_location_isSet;
}

bool OAISignInAttempt::is_location_Valid() const{
    return m_location_isValid;
}

QString OAISignInAttempt::getSessionUuid() const {
    return m_session_uuid;
}
void OAISignInAttempt::setSessionUuid(const QString &session_uuid) {
    m_session_uuid = session_uuid;
    m_session_uuid_isSet = true;
}

bool OAISignInAttempt::is_session_uuid_Set() const{
    return m_session_uuid_isSet;
}

bool OAISignInAttempt::is_session_uuid_Valid() const{
    return m_session_uuid_isValid;
}

OAIUser OAISignInAttempt::getTargetUser() const {
    return m_target_user;
}
void OAISignInAttempt::setTargetUser(const OAIUser &target_user) {
    m_target_user = target_user;
    m_target_user_isSet = true;
}

bool OAISignInAttempt::is_target_user_Set() const{
    return m_target_user_isSet;
}

bool OAISignInAttempt::is_target_user_Valid() const{
    return m_target_user_isValid;
}

QDateTime OAISignInAttempt::getTimestamp() const {
    return m_timestamp;
}
void OAISignInAttempt::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAISignInAttempt::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAISignInAttempt::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAISignInAttempt::getType() const {
    return m_type;
}
void OAISignInAttempt::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISignInAttempt::is_type_Set() const{
    return m_type_isSet;
}

bool OAISignInAttempt::is_type_Valid() const{
    return m_type_isValid;
}

QString OAISignInAttempt::getUuid() const {
    return m_uuid;
}
void OAISignInAttempt::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAISignInAttempt::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAISignInAttempt::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAISignInAttempt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISignInAttempt::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
