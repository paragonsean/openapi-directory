/**
 * Events API
 * 1Password Events API Specification.
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISession::OAISession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISession::OAISession() {
    this->initializeModel();
}

OAISession::~OAISession() {}

void OAISession::initializeModel() {

    m_device_uuid_isSet = false;
    m_device_uuid_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_login_time_isSet = false;
    m_login_time_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAISession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISession::fromJsonObject(QJsonObject json) {

    m_device_uuid_isValid = ::OpenAPI::fromJsonValue(m_device_uuid, json[QString("device_uuid")]);
    m_device_uuid_isSet = !json[QString("device_uuid")].isNull() && m_device_uuid_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_login_time_isValid = ::OpenAPI::fromJsonValue(m_login_time, json[QString("login_time")]);
    m_login_time_isSet = !json[QString("login_time")].isNull() && m_login_time_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAISession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISession::asJsonObject() const {
    QJsonObject obj;
    if (m_device_uuid_isSet) {
        obj.insert(QString("device_uuid"), ::OpenAPI::toJsonValue(m_device_uuid));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_login_time_isSet) {
        obj.insert(QString("login_time"), ::OpenAPI::toJsonValue(m_login_time));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

QString OAISession::getDeviceUuid() const {
    return m_device_uuid;
}
void OAISession::setDeviceUuid(const QString &device_uuid) {
    m_device_uuid = device_uuid;
    m_device_uuid_isSet = true;
}

bool OAISession::is_device_uuid_Set() const{
    return m_device_uuid_isSet;
}

bool OAISession::is_device_uuid_Valid() const{
    return m_device_uuid_isValid;
}

QString OAISession::getIp() const {
    return m_ip;
}
void OAISession::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAISession::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAISession::is_ip_Valid() const{
    return m_ip_isValid;
}

QDateTime OAISession::getLoginTime() const {
    return m_login_time;
}
void OAISession::setLoginTime(const QDateTime &login_time) {
    m_login_time = login_time;
    m_login_time_isSet = true;
}

bool OAISession::is_login_time_Set() const{
    return m_login_time_isSet;
}

bool OAISession::is_login_time_Valid() const{
    return m_login_time_isValid;
}

QString OAISession::getUuid() const {
    return m_uuid;
}
void OAISession::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAISession::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAISession::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAISession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_login_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISession::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
