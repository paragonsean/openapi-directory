/**
 * Events API
 * 1Password Events API Specification.
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditEvent::OAIAuditEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditEvent::OAIAuditEvent() {
    this->initializeModel();
}

OAIAuditEvent::~OAIAuditEvent() {}

void OAIAuditEvent::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_actor_uuid_isSet = false;
    m_actor_uuid_isValid = false;

    m_aux_id_isSet = false;
    m_aux_id_isValid = false;

    m_aux_info_isSet = false;
    m_aux_info_isValid = false;

    m_aux_uuid_isSet = false;
    m_aux_uuid_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_object_uuid_isSet = false;
    m_object_uuid_isValid = false;

    m_session_isSet = false;
    m_session_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_uuid_isSet = false;
    m_uuid_isValid = false;
}

void OAIAuditEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuditEvent::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_actor_uuid_isValid = ::OpenAPI::fromJsonValue(m_actor_uuid, json[QString("actor_uuid")]);
    m_actor_uuid_isSet = !json[QString("actor_uuid")].isNull() && m_actor_uuid_isValid;

    m_aux_id_isValid = ::OpenAPI::fromJsonValue(m_aux_id, json[QString("aux_id")]);
    m_aux_id_isSet = !json[QString("aux_id")].isNull() && m_aux_id_isValid;

    m_aux_info_isValid = ::OpenAPI::fromJsonValue(m_aux_info, json[QString("aux_info")]);
    m_aux_info_isSet = !json[QString("aux_info")].isNull() && m_aux_info_isValid;

    m_aux_uuid_isValid = ::OpenAPI::fromJsonValue(m_aux_uuid, json[QString("aux_uuid")]);
    m_aux_uuid_isSet = !json[QString("aux_uuid")].isNull() && m_aux_uuid_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("object_type")]);
    m_object_type_isSet = !json[QString("object_type")].isNull() && m_object_type_isValid;

    m_object_uuid_isValid = ::OpenAPI::fromJsonValue(m_object_uuid, json[QString("object_uuid")]);
    m_object_uuid_isSet = !json[QString("object_uuid")].isNull() && m_object_uuid_isValid;

    m_session_isValid = ::OpenAPI::fromJsonValue(m_session, json[QString("session")]);
    m_session_isSet = !json[QString("session")].isNull() && m_session_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_uuid_isValid = ::OpenAPI::fromJsonValue(m_uuid, json[QString("uuid")]);
    m_uuid_isSet = !json[QString("uuid")].isNull() && m_uuid_isValid;
}

QString OAIAuditEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuditEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_actor_uuid_isSet) {
        obj.insert(QString("actor_uuid"), ::OpenAPI::toJsonValue(m_actor_uuid));
    }
    if (m_aux_id_isSet) {
        obj.insert(QString("aux_id"), ::OpenAPI::toJsonValue(m_aux_id));
    }
    if (m_aux_info_isSet) {
        obj.insert(QString("aux_info"), ::OpenAPI::toJsonValue(m_aux_info));
    }
    if (m_aux_uuid_isSet) {
        obj.insert(QString("aux_uuid"), ::OpenAPI::toJsonValue(m_aux_uuid));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_object_type.isSet()) {
        obj.insert(QString("object_type"), ::OpenAPI::toJsonValue(m_object_type));
    }
    if (m_object_uuid_isSet) {
        obj.insert(QString("object_uuid"), ::OpenAPI::toJsonValue(m_object_uuid));
    }
    if (m_session.isSet()) {
        obj.insert(QString("session"), ::OpenAPI::toJsonValue(m_session));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_uuid_isSet) {
        obj.insert(QString("uuid"), ::OpenAPI::toJsonValue(m_uuid));
    }
    return obj;
}

OAIAuditEventActions OAIAuditEvent::getAction() const {
    return m_action;
}
void OAIAuditEvent::setAction(const OAIAuditEventActions &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIAuditEvent::is_action_Set() const{
    return m_action_isSet;
}

bool OAIAuditEvent::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIAuditEvent::getActorUuid() const {
    return m_actor_uuid;
}
void OAIAuditEvent::setActorUuid(const QString &actor_uuid) {
    m_actor_uuid = actor_uuid;
    m_actor_uuid_isSet = true;
}

bool OAIAuditEvent::is_actor_uuid_Set() const{
    return m_actor_uuid_isSet;
}

bool OAIAuditEvent::is_actor_uuid_Valid() const{
    return m_actor_uuid_isValid;
}

qint32 OAIAuditEvent::getAuxId() const {
    return m_aux_id;
}
void OAIAuditEvent::setAuxId(const qint32 &aux_id) {
    m_aux_id = aux_id;
    m_aux_id_isSet = true;
}

bool OAIAuditEvent::is_aux_id_Set() const{
    return m_aux_id_isSet;
}

bool OAIAuditEvent::is_aux_id_Valid() const{
    return m_aux_id_isValid;
}

QString OAIAuditEvent::getAuxInfo() const {
    return m_aux_info;
}
void OAIAuditEvent::setAuxInfo(const QString &aux_info) {
    m_aux_info = aux_info;
    m_aux_info_isSet = true;
}

bool OAIAuditEvent::is_aux_info_Set() const{
    return m_aux_info_isSet;
}

bool OAIAuditEvent::is_aux_info_Valid() const{
    return m_aux_info_isValid;
}

QString OAIAuditEvent::getAuxUuid() const {
    return m_aux_uuid;
}
void OAIAuditEvent::setAuxUuid(const QString &aux_uuid) {
    m_aux_uuid = aux_uuid;
    m_aux_uuid_isSet = true;
}

bool OAIAuditEvent::is_aux_uuid_Set() const{
    return m_aux_uuid_isSet;
}

bool OAIAuditEvent::is_aux_uuid_Valid() const{
    return m_aux_uuid_isValid;
}

OAILocation OAIAuditEvent::getLocation() const {
    return m_location;
}
void OAIAuditEvent::setLocation(const OAILocation &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIAuditEvent::is_location_Set() const{
    return m_location_isSet;
}

bool OAIAuditEvent::is_location_Valid() const{
    return m_location_isValid;
}

OAIAuditEventObjectTypes OAIAuditEvent::getObjectType() const {
    return m_object_type;
}
void OAIAuditEvent::setObjectType(const OAIAuditEventObjectTypes &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIAuditEvent::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIAuditEvent::is_object_type_Valid() const{
    return m_object_type_isValid;
}

QString OAIAuditEvent::getObjectUuid() const {
    return m_object_uuid;
}
void OAIAuditEvent::setObjectUuid(const QString &object_uuid) {
    m_object_uuid = object_uuid;
    m_object_uuid_isSet = true;
}

bool OAIAuditEvent::is_object_uuid_Set() const{
    return m_object_uuid_isSet;
}

bool OAIAuditEvent::is_object_uuid_Valid() const{
    return m_object_uuid_isValid;
}

OAISession OAIAuditEvent::getSession() const {
    return m_session;
}
void OAIAuditEvent::setSession(const OAISession &session) {
    m_session = session;
    m_session_isSet = true;
}

bool OAIAuditEvent::is_session_Set() const{
    return m_session_isSet;
}

bool OAIAuditEvent::is_session_Valid() const{
    return m_session_isValid;
}

QDateTime OAIAuditEvent::getTimestamp() const {
    return m_timestamp;
}
void OAIAuditEvent::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIAuditEvent::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIAuditEvent::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIAuditEvent::getUuid() const {
    return m_uuid;
}
void OAIAuditEvent::setUuid(const QString &uuid) {
    m_uuid = uuid;
    m_uuid_isSet = true;
}

bool OAIAuditEvent::is_uuid_Set() const{
    return m_uuid_isSet;
}

bool OAIAuditEvent::is_uuid_Valid() const{
    return m_uuid_isValid;
}

bool OAIAuditEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_actor_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aux_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aux_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aux_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuditEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
