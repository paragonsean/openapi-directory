/**
 * Events API
 * 1Password Events API Specification.
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAuditEvent.h
 *
 * A single audit event object
 */

#ifndef OAIAuditEvent_H
#define OAIAuditEvent_H

#include <QJsonObject>

#include "OAIAuditEventActions.h"
#include "OAIAuditEventObjectTypes.h"
#include "OAILocation.h"
#include "OAISession.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILocation;
class OAISession;

class OAIAuditEvent : public OAIObject {
public:
    OAIAuditEvent();
    OAIAuditEvent(QString json);
    ~OAIAuditEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAuditEventActions getAction() const;
    void setAction(const OAIAuditEventActions &action);
    bool is_action_Set() const;
    bool is_action_Valid() const;

    QString getActorUuid() const;
    void setActorUuid(const QString &actor_uuid);
    bool is_actor_uuid_Set() const;
    bool is_actor_uuid_Valid() const;

    qint32 getAuxId() const;
    void setAuxId(const qint32 &aux_id);
    bool is_aux_id_Set() const;
    bool is_aux_id_Valid() const;

    QString getAuxInfo() const;
    void setAuxInfo(const QString &aux_info);
    bool is_aux_info_Set() const;
    bool is_aux_info_Valid() const;

    QString getAuxUuid() const;
    void setAuxUuid(const QString &aux_uuid);
    bool is_aux_uuid_Set() const;
    bool is_aux_uuid_Valid() const;

    OAILocation getLocation() const;
    void setLocation(const OAILocation &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    OAIAuditEventObjectTypes getObjectType() const;
    void setObjectType(const OAIAuditEventObjectTypes &object_type);
    bool is_object_type_Set() const;
    bool is_object_type_Valid() const;

    QString getObjectUuid() const;
    void setObjectUuid(const QString &object_uuid);
    bool is_object_uuid_Set() const;
    bool is_object_uuid_Valid() const;

    OAISession getSession() const;
    void setSession(const OAISession &session);
    bool is_session_Set() const;
    bool is_session_Valid() const;

    QDateTime getTimestamp() const;
    void setTimestamp(const QDateTime &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    QString getUuid() const;
    void setUuid(const QString &uuid);
    bool is_uuid_Set() const;
    bool is_uuid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAuditEventActions m_action;
    bool m_action_isSet;
    bool m_action_isValid;

    QString m_actor_uuid;
    bool m_actor_uuid_isSet;
    bool m_actor_uuid_isValid;

    qint32 m_aux_id;
    bool m_aux_id_isSet;
    bool m_aux_id_isValid;

    QString m_aux_info;
    bool m_aux_info_isSet;
    bool m_aux_info_isValid;

    QString m_aux_uuid;
    bool m_aux_uuid_isSet;
    bool m_aux_uuid_isValid;

    OAILocation m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    OAIAuditEventObjectTypes m_object_type;
    bool m_object_type_isSet;
    bool m_object_type_isValid;

    QString m_object_uuid;
    bool m_object_uuid_isSet;
    bool m_object_uuid_isValid;

    OAISession m_session;
    bool m_session_isSet;
    bool m_session_isValid;

    QDateTime m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;

    QString m_uuid;
    bool m_uuid_isSet;
    bool m_uuid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAuditEvent)

#endif // OAIAuditEvent_H
