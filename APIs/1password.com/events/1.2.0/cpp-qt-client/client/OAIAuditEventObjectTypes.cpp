/**
 * Events API
 * 1Password Events API Specification.
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditEventObjectTypes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditEventObjectTypes::OAIAuditEventObjectTypes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditEventObjectTypes::OAIAuditEventObjectTypes() {
    this->initializeModel();
}

OAIAuditEventObjectTypes::~OAIAuditEventObjectTypes() {}

void OAIAuditEventObjectTypes::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAuditEventObjectTypes::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAuditEventObjectTypes::fromJson(QString jsonString) {
    
    if ( jsonString.compare("account", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::ACCOUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("user", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::USER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("device", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::DEVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("group", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::GROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("gm", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::GM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("vault", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::VAULT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("item", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::ITEM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("items", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::ITEMS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("itemhist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::ITEMHIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("vaultkey", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::VAULTKEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("template", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::TEMPLATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("uva", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::UVA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("gva", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::GVA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("invite", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::INVITE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ec", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::EC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("miguser", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::MIGUSER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sso", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::SSO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sub", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::SUB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("card", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::CARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pm", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::PM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("slackapp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::SLACKAPP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("file", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::FILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("famchild", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::FAMCHILD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sa", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::SA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("satoken", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::SATOKEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("dlgdsess", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::DLGDSESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ssotkn", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::SSOTKN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("report", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAuditEventObjectTypes::REPORT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAuditEventObjectTypes::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAuditEventObjectTypes::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAuditEventObjectTypes::ACCOUNT:
            val = "account";
            break;
        case eOAIAuditEventObjectTypes::USER:
            val = "user";
            break;
        case eOAIAuditEventObjectTypes::DEVICE:
            val = "device";
            break;
        case eOAIAuditEventObjectTypes::GROUP:
            val = "group";
            break;
        case eOAIAuditEventObjectTypes::GM:
            val = "gm";
            break;
        case eOAIAuditEventObjectTypes::VAULT:
            val = "vault";
            break;
        case eOAIAuditEventObjectTypes::ITEM:
            val = "item";
            break;
        case eOAIAuditEventObjectTypes::ITEMS:
            val = "items";
            break;
        case eOAIAuditEventObjectTypes::ITEMHIST:
            val = "itemhist";
            break;
        case eOAIAuditEventObjectTypes::VAULTKEY:
            val = "vaultkey";
            break;
        case eOAIAuditEventObjectTypes::TEMPLATE:
            val = "template";
            break;
        case eOAIAuditEventObjectTypes::UVA:
            val = "uva";
            break;
        case eOAIAuditEventObjectTypes::GVA:
            val = "gva";
            break;
        case eOAIAuditEventObjectTypes::INVITE:
            val = "invite";
            break;
        case eOAIAuditEventObjectTypes::EC:
            val = "ec";
            break;
        case eOAIAuditEventObjectTypes::MIGUSER:
            val = "miguser";
            break;
        case eOAIAuditEventObjectTypes::SSO:
            val = "sso";
            break;
        case eOAIAuditEventObjectTypes::SUB:
            val = "sub";
            break;
        case eOAIAuditEventObjectTypes::CARD:
            val = "card";
            break;
        case eOAIAuditEventObjectTypes::PM:
            val = "pm";
            break;
        case eOAIAuditEventObjectTypes::SLACKAPP:
            val = "slackapp";
            break;
        case eOAIAuditEventObjectTypes::FILE:
            val = "file";
            break;
        case eOAIAuditEventObjectTypes::FAMCHILD:
            val = "famchild";
            break;
        case eOAIAuditEventObjectTypes::SA:
            val = "sa";
            break;
        case eOAIAuditEventObjectTypes::SATOKEN:
            val = "satoken";
            break;
        case eOAIAuditEventObjectTypes::DLGDSESS:
            val = "dlgdsess";
            break;
        case eOAIAuditEventObjectTypes::SSOTKN:
            val = "ssotkn";
            break;
        case eOAIAuditEventObjectTypes::REPORT:
            val = "report";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAuditEventObjectTypes::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAuditEventObjectTypes::eOAIAuditEventObjectTypes OAIAuditEventObjectTypes::getValue() const {
    return m_value;
}

void OAIAuditEventObjectTypes::setValue(const OAIAuditEventObjectTypes::eOAIAuditEventObjectTypes& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAuditEventObjectTypes::isSet() const {
    
    return m_value_isSet;
}

bool OAIAuditEventObjectTypes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
