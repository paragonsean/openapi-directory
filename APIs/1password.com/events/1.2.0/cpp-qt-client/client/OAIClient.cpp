/**
 * Events API
 * 1Password Events API Specification.
 *
 * The version of the OpenAPI document: 1.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClient::OAIClient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClient::OAIClient() {
    this->initializeModel();
}

OAIClient::~OAIClient() {}

void OAIClient::initializeModel() {

    m_app_name_isSet = false;
    m_app_name_isValid = false;

    m_app_version_isSet = false;
    m_app_version_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_os_name_isSet = false;
    m_os_name_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_platform_name_isSet = false;
    m_platform_name_isValid = false;

    m_platform_version_isSet = false;
    m_platform_version_isValid = false;
}

void OAIClient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClient::fromJsonObject(QJsonObject json) {

    m_app_name_isValid = ::OpenAPI::fromJsonValue(m_app_name, json[QString("app_name")]);
    m_app_name_isSet = !json[QString("app_name")].isNull() && m_app_name_isValid;

    m_app_version_isValid = ::OpenAPI::fromJsonValue(m_app_version, json[QString("app_version")]);
    m_app_version_isSet = !json[QString("app_version")].isNull() && m_app_version_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ip_address")]);
    m_ip_address_isSet = !json[QString("ip_address")].isNull() && m_ip_address_isValid;

    m_os_name_isValid = ::OpenAPI::fromJsonValue(m_os_name, json[QString("os_name")]);
    m_os_name_isSet = !json[QString("os_name")].isNull() && m_os_name_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("os_version")]);
    m_os_version_isSet = !json[QString("os_version")].isNull() && m_os_version_isValid;

    m_platform_name_isValid = ::OpenAPI::fromJsonValue(m_platform_name, json[QString("platform_name")]);
    m_platform_name_isSet = !json[QString("platform_name")].isNull() && m_platform_name_isValid;

    m_platform_version_isValid = ::OpenAPI::fromJsonValue(m_platform_version, json[QString("platform_version")]);
    m_platform_version_isSet = !json[QString("platform_version")].isNull() && m_platform_version_isValid;
}

QString OAIClient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClient::asJsonObject() const {
    QJsonObject obj;
    if (m_app_name_isSet) {
        obj.insert(QString("app_name"), ::OpenAPI::toJsonValue(m_app_name));
    }
    if (m_app_version_isSet) {
        obj.insert(QString("app_version"), ::OpenAPI::toJsonValue(m_app_version));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ip_address"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_os_name_isSet) {
        obj.insert(QString("os_name"), ::OpenAPI::toJsonValue(m_os_name));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("os_version"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_platform_name_isSet) {
        obj.insert(QString("platform_name"), ::OpenAPI::toJsonValue(m_platform_name));
    }
    if (m_platform_version_isSet) {
        obj.insert(QString("platform_version"), ::OpenAPI::toJsonValue(m_platform_version));
    }
    return obj;
}

QString OAIClient::getAppName() const {
    return m_app_name;
}
void OAIClient::setAppName(const QString &app_name) {
    m_app_name = app_name;
    m_app_name_isSet = true;
}

bool OAIClient::is_app_name_Set() const{
    return m_app_name_isSet;
}

bool OAIClient::is_app_name_Valid() const{
    return m_app_name_isValid;
}

QString OAIClient::getAppVersion() const {
    return m_app_version;
}
void OAIClient::setAppVersion(const QString &app_version) {
    m_app_version = app_version;
    m_app_version_isSet = true;
}

bool OAIClient::is_app_version_Set() const{
    return m_app_version_isSet;
}

bool OAIClient::is_app_version_Valid() const{
    return m_app_version_isValid;
}

QString OAIClient::getIpAddress() const {
    return m_ip_address;
}
void OAIClient::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIClient::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIClient::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIClient::getOsName() const {
    return m_os_name;
}
void OAIClient::setOsName(const QString &os_name) {
    m_os_name = os_name;
    m_os_name_isSet = true;
}

bool OAIClient::is_os_name_Set() const{
    return m_os_name_isSet;
}

bool OAIClient::is_os_name_Valid() const{
    return m_os_name_isValid;
}

QString OAIClient::getOsVersion() const {
    return m_os_version;
}
void OAIClient::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIClient::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIClient::is_os_version_Valid() const{
    return m_os_version_isValid;
}

QString OAIClient::getPlatformName() const {
    return m_platform_name;
}
void OAIClient::setPlatformName(const QString &platform_name) {
    m_platform_name = platform_name;
    m_platform_name_isSet = true;
}

bool OAIClient::is_platform_name_Set() const{
    return m_platform_name_isSet;
}

bool OAIClient::is_platform_name_Valid() const{
    return m_platform_name_isValid;
}

QString OAIClient::getPlatformVersion() const {
    return m_platform_version;
}
void OAIClient::setPlatformVersion(const QString &platform_version) {
    m_platform_version = platform_version;
    m_platform_version_isSet = true;
}

bool OAIClient::is_platform_version_Set() const{
    return m_platform_version_isSet;
}

bool OAIClient::is_platform_version_Valid() const{
    return m_platform_version_isValid;
}

bool OAIClient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClient::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
