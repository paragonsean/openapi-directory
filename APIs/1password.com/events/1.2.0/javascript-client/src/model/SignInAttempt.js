/**
 * Events API
 * 1Password Events API Specification.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Client from './Client';
import Details from './Details';
import Location from './Location';
import User from './User';

/**
 * The SignInAttempt model module.
 * @module model/SignInAttempt
 * @version 1.2.0
 */
class SignInAttempt {
    /**
     * Constructs a new <code>SignInAttempt</code>.
     * A single sign-in attempt object
     * @alias module:model/SignInAttempt
     */
    constructor() { 
        
        SignInAttempt.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SignInAttempt</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SignInAttempt} obj Optional instance to populate.
     * @return {module:model/SignInAttempt} The populated <code>SignInAttempt</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SignInAttempt();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('client')) {
                obj['client'] = Client.constructFromObject(data['client']);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = Details.constructFromObject(data['details']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('session_uuid')) {
                obj['session_uuid'] = ApiClient.convertToType(data['session_uuid'], 'String');
            }
            if (data.hasOwnProperty('target_user')) {
                obj['target_user'] = User.constructFromObject(data['target_user']);
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SignInAttempt</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SignInAttempt</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // validate the optional field `client`
        if (data['client']) { // data not null
          Client.validateJSON(data['client']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // validate the optional field `details`
        if (data['details']) { // data not null
          Details.validateJSON(data['details']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['session_uuid'] && !(typeof data['session_uuid'] === 'string' || data['session_uuid'] instanceof String)) {
            throw new Error("Expected the field `session_uuid` to be a primitive type in the JSON string but got " + data['session_uuid']);
        }
        // validate the optional field `target_user`
        if (data['target_user']) { // data not null
          User.validateJSON(data['target_user']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}



/**
 * @member {module:model/SignInAttempt.CategoryEnum} category
 */
SignInAttempt.prototype['category'] = undefined;

/**
 * @member {module:model/Client} client
 */
SignInAttempt.prototype['client'] = undefined;

/**
 * Country ISO Code
 * @member {String} country
 */
SignInAttempt.prototype['country'] = undefined;

/**
 * @member {module:model/Details} details
 */
SignInAttempt.prototype['details'] = undefined;

/**
 * @member {module:model/Location} location
 */
SignInAttempt.prototype['location'] = undefined;

/**
 * @member {String} session_uuid
 */
SignInAttempt.prototype['session_uuid'] = undefined;

/**
 * @member {module:model/User} target_user
 */
SignInAttempt.prototype['target_user'] = undefined;

/**
 * @member {Date} timestamp
 */
SignInAttempt.prototype['timestamp'] = undefined;

/**
 * @member {module:model/SignInAttempt.TypeEnum} type
 */
SignInAttempt.prototype['type'] = undefined;

/**
 * @member {String} uuid
 */
SignInAttempt.prototype['uuid'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
SignInAttempt['CategoryEnum'] = {

    /**
     * value: "success"
     * @const
     */
    "success": "success",

    /**
     * value: "credentials_failed"
     * @const
     */
    "credentials_failed": "credentials_failed",

    /**
     * value: "mfa_failed"
     * @const
     */
    "mfa_failed": "mfa_failed",

    /**
     * value: "sso_failed"
     * @const
     */
    "sso_failed": "sso_failed",

    /**
     * value: "modern_version_failed"
     * @const
     */
    "modern_version_failed": "modern_version_failed",

    /**
     * value: "firewall_failed"
     * @const
     */
    "firewall_failed": "firewall_failed",

    /**
     * value: "firewall_reported_success"
     * @const
     */
    "firewall_reported_success": "firewall_reported_success"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SignInAttempt['TypeEnum'] = {

    /**
     * value: "credentials_ok"
     * @const
     */
    "credentials_ok": "credentials_ok",

    /**
     * value: "mfa_ok"
     * @const
     */
    "mfa_ok": "mfa_ok",

    /**
     * value: "password_secret_bad"
     * @const
     */
    "password_secret_bad": "password_secret_bad",

    /**
     * value: "mfa_missing"
     * @const
     */
    "mfa_missing": "mfa_missing",

    /**
     * value: "totp_disabled"
     * @const
     */
    "totp_disabled": "totp_disabled",

    /**
     * value: "totp_bad"
     * @const
     */
    "totp_bad": "totp_bad",

    /**
     * value: "totp_timeout"
     * @const
     */
    "totp_timeout": "totp_timeout",

    /**
     * value: "u2f_disabled"
     * @const
     */
    "u2f_disabled": "u2f_disabled",

    /**
     * value: "u2f_bad"
     * @const
     */
    "u2f_bad": "u2f_bad",

    /**
     * value: "u2f_timout"
     * @const
     */
    "u2f_timout": "u2f_timout",

    /**
     * value: "duo_disabled"
     * @const
     */
    "duo_disabled": "duo_disabled",

    /**
     * value: "duo_bad"
     * @const
     */
    "duo_bad": "duo_bad",

    /**
     * value: "duo_timeout"
     * @const
     */
    "duo_timeout": "duo_timeout",

    /**
     * value: "duo_native_bad"
     * @const
     */
    "duo_native_bad": "duo_native_bad",

    /**
     * value: "service_account_sso_denied"
     * @const
     */
    "service_account_sso_denied": "service_account_sso_denied",

    /**
     * value: "non_sso_user"
     * @const
     */
    "non_sso_user": "non_sso_user",

    /**
     * value: "sso_user_mismatch"
     * @const
     */
    "sso_user_mismatch": "sso_user_mismatch",

    /**
     * value: "platform_secret_disabled"
     * @const
     */
    "platform_secret_disabled": "platform_secret_disabled",

    /**
     * value: "platform_secret_bad"
     * @const
     */
    "platform_secret_bad": "platform_secret_bad",

    /**
     * value: "platform_secret_proxy"
     * @const
     */
    "platform_secret_proxy": "platform_secret_proxy",

    /**
     * value: "code_disabled"
     * @const
     */
    "code_disabled": "code_disabled",

    /**
     * value: "code_bad"
     * @const
     */
    "code_bad": "code_bad",

    /**
     * value: "code_timeout"
     * @const
     */
    "code_timeout": "code_timeout",

    /**
     * value: "ip_blocked"
     * @const
     */
    "ip_blocked": "ip_blocked",

    /**
     * value: "continent_blocked"
     * @const
     */
    "continent_blocked": "continent_blocked",

    /**
     * value: "country_blocked"
     * @const
     */
    "country_blocked": "country_blocked",

    /**
     * value: "anonymous_blocked"
     * @const
     */
    "anonymous_blocked": "anonymous_blocked",

    /**
     * value: "all_blocked"
     * @const
     */
    "all_blocked": "all_blocked",

    /**
     * value: "modern_version_missing"
     * @const
     */
    "modern_version_missing": "modern_version_missing",

    /**
     * value: "modern_version_old"
     * @const
     */
    "modern_version_old": "modern_version_old"
};



export default SignInAttempt;

