/**
 * Events API
 * 1Password Events API Specification.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CursorCollection from './CursorCollection';
import SignInAttempt from './SignInAttempt';

/**
 * The SignInAttemptItems model module.
 * @module model/SignInAttemptItems
 * @version 1.2.0
 */
class SignInAttemptItems {
    /**
     * Constructs a new <code>SignInAttemptItems</code>.
     * An object wrapping cursor properties and a list of sign-in attempts
     * @alias module:model/SignInAttemptItems
     * @implements module:model/CursorCollection
     */
    constructor() { 
        CursorCollection.initialize(this);
        SignInAttemptItems.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SignInAttemptItems</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SignInAttemptItems} obj Optional instance to populate.
     * @return {module:model/SignInAttemptItems} The populated <code>SignInAttemptItems</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SignInAttemptItems();
            CursorCollection.constructFromObject(data, obj);

            if (data.hasOwnProperty('cursor')) {
                obj['cursor'] = ApiClient.convertToType(data['cursor'], 'String');
            }
            if (data.hasOwnProperty('has_more')) {
                obj['has_more'] = ApiClient.convertToType(data['has_more'], 'Boolean');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [SignInAttempt]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SignInAttemptItems</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SignInAttemptItems</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cursor'] && !(typeof data['cursor'] === 'string' || data['cursor'] instanceof String)) {
            throw new Error("Expected the field `cursor` to be a primitive type in the JSON string but got " + data['cursor']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                SignInAttempt.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Cursor to fetch more data if available or continue the polling process if required
 * @member {String} cursor
 */
SignInAttemptItems.prototype['cursor'] = undefined;

/**
 * Whether there may still be more data to fetch using the returned cursor. If true, the subsequent request could still be empty.
 * @member {Boolean} has_more
 */
SignInAttemptItems.prototype['has_more'] = undefined;

/**
 * @member {Array.<module:model/SignInAttempt>} items
 */
SignInAttemptItems.prototype['items'] = undefined;


// Implement CursorCollection interface:
/**
 * Cursor to fetch more data if available or continue the polling process if required
 * @member {String} cursor
 */
CursorCollection.prototype['cursor'] = undefined;
/**
 * Whether there may still be more data to fetch using the returned cursor. If true, the subsequent request could still be empty.
 * @member {Boolean} has_more
 */
CursorCollection.prototype['has_more'] = undefined;




export default SignInAttemptItems;

