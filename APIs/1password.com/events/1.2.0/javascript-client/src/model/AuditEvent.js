/**
 * Events API
 * 1Password Events API Specification.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuditEventActions from './AuditEventActions';
import AuditEventObjectTypes from './AuditEventObjectTypes';
import Location from './Location';
import Session from './Session';

/**
 * The AuditEvent model module.
 * @module model/AuditEvent
 * @version 1.2.0
 */
class AuditEvent {
    /**
     * Constructs a new <code>AuditEvent</code>.
     * A single audit event object
     * @alias module:model/AuditEvent
     */
    constructor() { 
        
        AuditEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuditEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuditEvent} obj Optional instance to populate.
     * @return {module:model/AuditEvent} The populated <code>AuditEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuditEvent();

            if (data.hasOwnProperty('action')) {
                obj['action'] = AuditEventActions.constructFromObject(data['action']);
            }
            if (data.hasOwnProperty('actor_uuid')) {
                obj['actor_uuid'] = ApiClient.convertToType(data['actor_uuid'], 'String');
            }
            if (data.hasOwnProperty('aux_id')) {
                obj['aux_id'] = ApiClient.convertToType(data['aux_id'], 'Number');
            }
            if (data.hasOwnProperty('aux_info')) {
                obj['aux_info'] = ApiClient.convertToType(data['aux_info'], 'String');
            }
            if (data.hasOwnProperty('aux_uuid')) {
                obj['aux_uuid'] = ApiClient.convertToType(data['aux_uuid'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('object_type')) {
                obj['object_type'] = AuditEventObjectTypes.constructFromObject(data['object_type']);
            }
            if (data.hasOwnProperty('object_uuid')) {
                obj['object_uuid'] = ApiClient.convertToType(data['object_uuid'], 'String');
            }
            if (data.hasOwnProperty('session')) {
                obj['session'] = Session.constructFromObject(data['session']);
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuditEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuditEvent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['actor_uuid'] && !(typeof data['actor_uuid'] === 'string' || data['actor_uuid'] instanceof String)) {
            throw new Error("Expected the field `actor_uuid` to be a primitive type in the JSON string but got " + data['actor_uuid']);
        }
        // ensure the json data is a string
        if (data['aux_info'] && !(typeof data['aux_info'] === 'string' || data['aux_info'] instanceof String)) {
            throw new Error("Expected the field `aux_info` to be a primitive type in the JSON string but got " + data['aux_info']);
        }
        // ensure the json data is a string
        if (data['aux_uuid'] && !(typeof data['aux_uuid'] === 'string' || data['aux_uuid'] instanceof String)) {
            throw new Error("Expected the field `aux_uuid` to be a primitive type in the JSON string but got " + data['aux_uuid']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['object_uuid'] && !(typeof data['object_uuid'] === 'string' || data['object_uuid'] instanceof String)) {
            throw new Error("Expected the field `object_uuid` to be a primitive type in the JSON string but got " + data['object_uuid']);
        }
        // validate the optional field `session`
        if (data['session']) { // data not null
          Session.validateJSON(data['session']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }

        return true;
    }


}



/**
 * @member {module:model/AuditEventActions} action
 */
AuditEvent.prototype['action'] = undefined;

/**
 * @member {String} actor_uuid
 */
AuditEvent.prototype['actor_uuid'] = undefined;

/**
 * @member {Number} aux_id
 */
AuditEvent.prototype['aux_id'] = undefined;

/**
 * @member {String} aux_info
 */
AuditEvent.prototype['aux_info'] = undefined;

/**
 * @member {String} aux_uuid
 */
AuditEvent.prototype['aux_uuid'] = undefined;

/**
 * @member {module:model/Location} location
 */
AuditEvent.prototype['location'] = undefined;

/**
 * @member {module:model/AuditEventObjectTypes} object_type
 */
AuditEvent.prototype['object_type'] = undefined;

/**
 * @member {String} object_uuid
 */
AuditEvent.prototype['object_uuid'] = undefined;

/**
 * @member {module:model/Session} session
 */
AuditEvent.prototype['session'] = undefined;

/**
 * @member {Date} timestamp
 */
AuditEvent.prototype['timestamp'] = undefined;

/**
 * @member {String} uuid
 */
AuditEvent.prototype['uuid'] = undefined;






export default AuditEvent;

