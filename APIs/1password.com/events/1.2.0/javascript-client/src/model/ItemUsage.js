/**
 * Events API
 * 1Password Events API Specification.
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Client from './Client';
import Location from './Location';
import User from './User';

/**
 * The ItemUsage model module.
 * @module model/ItemUsage
 * @version 1.2.0
 */
class ItemUsage {
    /**
     * Constructs a new <code>ItemUsage</code>.
     * A single item usage object
     * @alias module:model/ItemUsage
     */
    constructor() { 
        
        ItemUsage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ItemUsage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ItemUsage} obj Optional instance to populate.
     * @return {module:model/ItemUsage} The populated <code>ItemUsage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ItemUsage();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('client')) {
                obj['client'] = Client.constructFromObject(data['client']);
            }
            if (data.hasOwnProperty('item_uuid')) {
                obj['item_uuid'] = ApiClient.convertToType(data['item_uuid'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = Location.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'Date');
            }
            if (data.hasOwnProperty('used_version')) {
                obj['used_version'] = ApiClient.convertToType(data['used_version'], 'Number');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('vault_uuid')) {
                obj['vault_uuid'] = ApiClient.convertToType(data['vault_uuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ItemUsage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ItemUsage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // validate the optional field `client`
        if (data['client']) { // data not null
          Client.validateJSON(data['client']);
        }
        // ensure the json data is a string
        if (data['item_uuid'] && !(typeof data['item_uuid'] === 'string' || data['item_uuid'] instanceof String)) {
            throw new Error("Expected the field `item_uuid` to be a primitive type in the JSON string but got " + data['item_uuid']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          Location.validateJSON(data['location']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          User.validateJSON(data['user']);
        }
        // ensure the json data is a string
        if (data['uuid'] && !(typeof data['uuid'] === 'string' || data['uuid'] instanceof String)) {
            throw new Error("Expected the field `uuid` to be a primitive type in the JSON string but got " + data['uuid']);
        }
        // ensure the json data is a string
        if (data['vault_uuid'] && !(typeof data['vault_uuid'] === 'string' || data['vault_uuid'] instanceof String)) {
            throw new Error("Expected the field `vault_uuid` to be a primitive type in the JSON string but got " + data['vault_uuid']);
        }

        return true;
    }


}



/**
 * @member {module:model/ItemUsage.ActionEnum} action
 */
ItemUsage.prototype['action'] = undefined;

/**
 * @member {module:model/Client} client
 */
ItemUsage.prototype['client'] = undefined;

/**
 * @member {String} item_uuid
 */
ItemUsage.prototype['item_uuid'] = undefined;

/**
 * @member {module:model/Location} location
 */
ItemUsage.prototype['location'] = undefined;

/**
 * @member {Date} timestamp
 */
ItemUsage.prototype['timestamp'] = undefined;

/**
 * @member {Number} used_version
 */
ItemUsage.prototype['used_version'] = undefined;

/**
 * @member {module:model/User} user
 */
ItemUsage.prototype['user'] = undefined;

/**
 * @member {String} uuid
 */
ItemUsage.prototype['uuid'] = undefined;

/**
 * @member {String} vault_uuid
 */
ItemUsage.prototype['vault_uuid'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
ItemUsage['ActionEnum'] = {

    /**
     * value: "fill"
     * @const
     */
    "fill": "fill",

    /**
     * value: "select-sso-provider"
     * @const
     */
    "select-sso-provider": "select-sso-provider",

    /**
     * value: "enter-item-edit-mode"
     * @const
     */
    "enter-item-edit-mode": "enter-item-edit-mode",

    /**
     * value: "export"
     * @const
     */
    "export": "export",

    /**
     * value: "share"
     * @const
     */
    "share": "share",

    /**
     * value: "secure-copy"
     * @const
     */
    "secure-copy": "secure-copy",

    /**
     * value: "reveal"
     * @const
     */
    "reveal": "reveal",

    /**
     * value: "server-create"
     * @const
     */
    "server-create": "server-create",

    /**
     * value: "server-update"
     * @const
     */
    "server-update": "server-update",

    /**
     * value: "server-fetch"
     * @const
     */
    "server-fetch": "server-fetch"
};



export default ItemUsage;

