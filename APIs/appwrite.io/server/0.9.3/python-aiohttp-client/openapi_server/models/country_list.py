# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.country import Country
from openapi_server import util


class CountryList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, countries: List[Country]=None, sum: int=None):
        """CountryList - a model defined in OpenAPI

        :param countries: The countries of this CountryList.
        :param sum: The sum of this CountryList.
        """
        self.openapi_types = {
            'countries': List[Country],
            'sum': int
        }

        self.attribute_map = {
            'countries': 'countries',
            'sum': 'sum'
        }

        self._countries = countries
        self._sum = sum

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CountryList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The countryList of this CountryList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def countries(self):
        """Gets the countries of this CountryList.

        List of countries.

        :return: The countries of this CountryList.
        :rtype: List[Country]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this CountryList.

        List of countries.

        :param countries: The countries of this CountryList.
        :type countries: List[Country]
        """
        if countries is None:
            raise ValueError("Invalid value for `countries`, must not be `None`")

        self._countries = countries

    @property
    def sum(self):
        """Gets the sum of this CountryList.

        Total sum of items in the list.

        :return: The sum of this CountryList.
        :rtype: int
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this CountryList.

        Total sum of items in the list.

        :param sum: The sum of this CountryList.
        :type sum: int
        """
        if sum is None:
            raise ValueError("Invalid value for `sum`, must not be `None`")

        self._sum = sum
