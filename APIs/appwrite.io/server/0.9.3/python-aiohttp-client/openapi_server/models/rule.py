# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Rule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collection: str=None, id: str=None, array: bool=None, default: str=None, key: str=None, label: str=None, list: List[str]=None, required: bool=None, type: str=None):
        """Rule - a model defined in OpenAPI

        :param collection: The collection of this Rule.
        :param id: The id of this Rule.
        :param array: The array of this Rule.
        :param default: The default of this Rule.
        :param key: The key of this Rule.
        :param label: The label of this Rule.
        :param list: The list of this Rule.
        :param required: The required of this Rule.
        :param type: The type of this Rule.
        """
        self.openapi_types = {
            'collection': str,
            'id': str,
            'array': bool,
            'default': str,
            'key': str,
            'label': str,
            'list': List[str],
            'required': bool,
            'type': str
        }

        self.attribute_map = {
            'collection': '$collection',
            'id': '$id',
            'array': 'array',
            'default': 'default',
            'key': 'key',
            'label': 'label',
            'list': 'list',
            'required': 'required',
            'type': 'type'
        }

        self._collection = collection
        self._id = id
        self._array = array
        self._default = default
        self._key = key
        self._label = label
        self._list = list
        self._required = required
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rule of this Rule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collection(self):
        """Gets the collection of this Rule.

        Rule Collection.

        :return: The collection of this Rule.
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this Rule.

        Rule Collection.

        :param collection: The collection of this Rule.
        :type collection: str
        """
        if collection is None:
            raise ValueError("Invalid value for `collection`, must not be `None`")

        self._collection = collection

    @property
    def id(self):
        """Gets the id of this Rule.

        Rule ID.

        :return: The id of this Rule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Rule.

        Rule ID.

        :param id: The id of this Rule.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def array(self):
        """Gets the array of this Rule.

        Is array?

        :return: The array of this Rule.
        :rtype: bool
        """
        return self._array

    @array.setter
    def array(self, array):
        """Sets the array of this Rule.

        Is array?

        :param array: The array of this Rule.
        :type array: bool
        """
        if array is None:
            raise ValueError("Invalid value for `array`, must not be `None`")

        self._array = array

    @property
    def default(self):
        """Gets the default of this Rule.

        Rule default value.

        :return: The default of this Rule.
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this Rule.

        Rule default value.

        :param default: The default of this Rule.
        :type default: str
        """
        if default is None:
            raise ValueError("Invalid value for `default`, must not be `None`")

        self._default = default

    @property
    def key(self):
        """Gets the key of this Rule.

        Rule key.

        :return: The key of this Rule.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Rule.

        Rule key.

        :param key: The key of this Rule.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def label(self):
        """Gets the label of this Rule.

        Rule label.

        :return: The label of this Rule.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Rule.

        Rule label.

        :param label: The label of this Rule.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label

    @property
    def list(self):
        """Gets the list of this Rule.

        List of allowed values

        :return: The list of this Rule.
        :rtype: List[str]
        """
        return self._list

    @list.setter
    def list(self, list):
        """Sets the list of this Rule.

        List of allowed values

        :param list: The list of this Rule.
        :type list: List[str]
        """
        if list is None:
            raise ValueError("Invalid value for `list`, must not be `None`")

        self._list = list

    @property
    def required(self):
        """Gets the required of this Rule.

        Is required?

        :return: The required of this Rule.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this Rule.

        Is required?

        :param required: The required of this Rule.
        :type required: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")

        self._required = required

    @property
    def type(self):
        """Gets the type of this Rule.

        Rule type. Possible values: 

        :return: The type of this Rule.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Rule.

        Rule type. Possible values: 

        :param type: The type of this Rule.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
