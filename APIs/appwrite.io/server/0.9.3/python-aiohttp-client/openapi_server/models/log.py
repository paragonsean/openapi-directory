# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Log(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_code: str=None, client_engine: str=None, client_engine_version: str=None, client_name: str=None, client_type: str=None, client_version: str=None, country_code: str=None, country_name: str=None, device_brand: str=None, device_model: str=None, device_name: str=None, event: str=None, ip: str=None, os_code: str=None, os_name: str=None, os_version: str=None, time: int=None):
        """Log - a model defined in OpenAPI

        :param client_code: The client_code of this Log.
        :param client_engine: The client_engine of this Log.
        :param client_engine_version: The client_engine_version of this Log.
        :param client_name: The client_name of this Log.
        :param client_type: The client_type of this Log.
        :param client_version: The client_version of this Log.
        :param country_code: The country_code of this Log.
        :param country_name: The country_name of this Log.
        :param device_brand: The device_brand of this Log.
        :param device_model: The device_model of this Log.
        :param device_name: The device_name of this Log.
        :param event: The event of this Log.
        :param ip: The ip of this Log.
        :param os_code: The os_code of this Log.
        :param os_name: The os_name of this Log.
        :param os_version: The os_version of this Log.
        :param time: The time of this Log.
        """
        self.openapi_types = {
            'client_code': str,
            'client_engine': str,
            'client_engine_version': str,
            'client_name': str,
            'client_type': str,
            'client_version': str,
            'country_code': str,
            'country_name': str,
            'device_brand': str,
            'device_model': str,
            'device_name': str,
            'event': str,
            'ip': str,
            'os_code': str,
            'os_name': str,
            'os_version': str,
            'time': int
        }

        self.attribute_map = {
            'client_code': 'clientCode',
            'client_engine': 'clientEngine',
            'client_engine_version': 'clientEngineVersion',
            'client_name': 'clientName',
            'client_type': 'clientType',
            'client_version': 'clientVersion',
            'country_code': 'countryCode',
            'country_name': 'countryName',
            'device_brand': 'deviceBrand',
            'device_model': 'deviceModel',
            'device_name': 'deviceName',
            'event': 'event',
            'ip': 'ip',
            'os_code': 'osCode',
            'os_name': 'osName',
            'os_version': 'osVersion',
            'time': 'time'
        }

        self._client_code = client_code
        self._client_engine = client_engine
        self._client_engine_version = client_engine_version
        self._client_name = client_name
        self._client_type = client_type
        self._client_version = client_version
        self._country_code = country_code
        self._country_name = country_name
        self._device_brand = device_brand
        self._device_model = device_model
        self._device_name = device_name
        self._event = event
        self._ip = ip
        self._os_code = os_code
        self._os_name = os_name
        self._os_version = os_version
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Log':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The log of this Log.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_code(self):
        """Gets the client_code of this Log.

        Client code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/clients.json).

        :return: The client_code of this Log.
        :rtype: str
        """
        return self._client_code

    @client_code.setter
    def client_code(self, client_code):
        """Sets the client_code of this Log.

        Client code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/clients.json).

        :param client_code: The client_code of this Log.
        :type client_code: str
        """
        if client_code is None:
            raise ValueError("Invalid value for `client_code`, must not be `None`")

        self._client_code = client_code

    @property
    def client_engine(self):
        """Gets the client_engine of this Log.

        Client engine name.

        :return: The client_engine of this Log.
        :rtype: str
        """
        return self._client_engine

    @client_engine.setter
    def client_engine(self, client_engine):
        """Sets the client_engine of this Log.

        Client engine name.

        :param client_engine: The client_engine of this Log.
        :type client_engine: str
        """
        if client_engine is None:
            raise ValueError("Invalid value for `client_engine`, must not be `None`")

        self._client_engine = client_engine

    @property
    def client_engine_version(self):
        """Gets the client_engine_version of this Log.

        Client engine name.

        :return: The client_engine_version of this Log.
        :rtype: str
        """
        return self._client_engine_version

    @client_engine_version.setter
    def client_engine_version(self, client_engine_version):
        """Sets the client_engine_version of this Log.

        Client engine name.

        :param client_engine_version: The client_engine_version of this Log.
        :type client_engine_version: str
        """
        if client_engine_version is None:
            raise ValueError("Invalid value for `client_engine_version`, must not be `None`")

        self._client_engine_version = client_engine_version

    @property
    def client_name(self):
        """Gets the client_name of this Log.

        Client name.

        :return: The client_name of this Log.
        :rtype: str
        """
        return self._client_name

    @client_name.setter
    def client_name(self, client_name):
        """Sets the client_name of this Log.

        Client name.

        :param client_name: The client_name of this Log.
        :type client_name: str
        """
        if client_name is None:
            raise ValueError("Invalid value for `client_name`, must not be `None`")

        self._client_name = client_name

    @property
    def client_type(self):
        """Gets the client_type of this Log.

        Client type.

        :return: The client_type of this Log.
        :rtype: str
        """
        return self._client_type

    @client_type.setter
    def client_type(self, client_type):
        """Sets the client_type of this Log.

        Client type.

        :param client_type: The client_type of this Log.
        :type client_type: str
        """
        if client_type is None:
            raise ValueError("Invalid value for `client_type`, must not be `None`")

        self._client_type = client_type

    @property
    def client_version(self):
        """Gets the client_version of this Log.

        Client version.

        :return: The client_version of this Log.
        :rtype: str
        """
        return self._client_version

    @client_version.setter
    def client_version(self, client_version):
        """Sets the client_version of this Log.

        Client version.

        :param client_version: The client_version of this Log.
        :type client_version: str
        """
        if client_version is None:
            raise ValueError("Invalid value for `client_version`, must not be `None`")

        self._client_version = client_version

    @property
    def country_code(self):
        """Gets the country_code of this Log.

        Country two-character ISO 3166-1 alpha code.

        :return: The country_code of this Log.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Log.

        Country two-character ISO 3166-1 alpha code.

        :param country_code: The country_code of this Log.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def country_name(self):
        """Gets the country_name of this Log.

        Country name.

        :return: The country_name of this Log.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this Log.

        Country name.

        :param country_name: The country_name of this Log.
        :type country_name: str
        """
        if country_name is None:
            raise ValueError("Invalid value for `country_name`, must not be `None`")

        self._country_name = country_name

    @property
    def device_brand(self):
        """Gets the device_brand of this Log.

        Device brand name.

        :return: The device_brand of this Log.
        :rtype: str
        """
        return self._device_brand

    @device_brand.setter
    def device_brand(self, device_brand):
        """Sets the device_brand of this Log.

        Device brand name.

        :param device_brand: The device_brand of this Log.
        :type device_brand: str
        """
        if device_brand is None:
            raise ValueError("Invalid value for `device_brand`, must not be `None`")

        self._device_brand = device_brand

    @property
    def device_model(self):
        """Gets the device_model of this Log.

        Device model name.

        :return: The device_model of this Log.
        :rtype: str
        """
        return self._device_model

    @device_model.setter
    def device_model(self, device_model):
        """Sets the device_model of this Log.

        Device model name.

        :param device_model: The device_model of this Log.
        :type device_model: str
        """
        if device_model is None:
            raise ValueError("Invalid value for `device_model`, must not be `None`")

        self._device_model = device_model

    @property
    def device_name(self):
        """Gets the device_name of this Log.

        Device name.

        :return: The device_name of this Log.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this Log.

        Device name.

        :param device_name: The device_name of this Log.
        :type device_name: str
        """
        if device_name is None:
            raise ValueError("Invalid value for `device_name`, must not be `None`")

        self._device_name = device_name

    @property
    def event(self):
        """Gets the event of this Log.

        Event name.

        :return: The event of this Log.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this Log.

        Event name.

        :param event: The event of this Log.
        :type event: str
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")

        self._event = event

    @property
    def ip(self):
        """Gets the ip of this Log.

        IP session in use when the session was created.

        :return: The ip of this Log.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Log.

        IP session in use when the session was created.

        :param ip: The ip of this Log.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")

        self._ip = ip

    @property
    def os_code(self):
        """Gets the os_code of this Log.

        Operating system code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/os.json).

        :return: The os_code of this Log.
        :rtype: str
        """
        return self._os_code

    @os_code.setter
    def os_code(self, os_code):
        """Sets the os_code of this Log.

        Operating system code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/os.json).

        :param os_code: The os_code of this Log.
        :type os_code: str
        """
        if os_code is None:
            raise ValueError("Invalid value for `os_code`, must not be `None`")

        self._os_code = os_code

    @property
    def os_name(self):
        """Gets the os_name of this Log.

        Operating system name.

        :return: The os_name of this Log.
        :rtype: str
        """
        return self._os_name

    @os_name.setter
    def os_name(self, os_name):
        """Sets the os_name of this Log.

        Operating system name.

        :param os_name: The os_name of this Log.
        :type os_name: str
        """
        if os_name is None:
            raise ValueError("Invalid value for `os_name`, must not be `None`")

        self._os_name = os_name

    @property
    def os_version(self):
        """Gets the os_version of this Log.

        Operating system version.

        :return: The os_version of this Log.
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version):
        """Sets the os_version of this Log.

        Operating system version.

        :param os_version: The os_version of this Log.
        :type os_version: str
        """
        if os_version is None:
            raise ValueError("Invalid value for `os_version`, must not be `None`")

        self._os_version = os_version

    @property
    def time(self):
        """Gets the time of this Log.

        Log creation time in Unix timestamp.

        :return: The time of this Log.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Log.

        Log creation time in Unix timestamp.

        :param time: The time of this Log.
        :type time: int
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time
