# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util


class UserList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sum: int=None, users: List[User]=None):
        """UserList - a model defined in OpenAPI

        :param sum: The sum of this UserList.
        :param users: The users of this UserList.
        """
        self.openapi_types = {
            'sum': int,
            'users': List[User]
        }

        self.attribute_map = {
            'sum': 'sum',
            'users': 'users'
        }

        self._sum = sum
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The userList of this UserList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sum(self):
        """Gets the sum of this UserList.

        Total sum of items in the list.

        :return: The sum of this UserList.
        :rtype: int
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this UserList.

        Total sum of items in the list.

        :param sum: The sum of this UserList.
        :type sum: int
        """
        if sum is None:
            raise ValueError("Invalid value for `sum`, must not be `None`")

        self._sum = sum

    @property
    def users(self):
        """Gets the users of this UserList.

        List of users.

        :return: The users of this UserList.
        :rtype: List[User]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this UserList.

        List of users.

        :param users: The users of this UserList.
        :type users: List[User]
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")

        self._users = users
