# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FunctionsCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, events: List[str]=None, execute: List[str]=None, name: str=None, runtime: str=None, schedule: str=None, timeout: int=None, vars: object=None):
        """FunctionsCreateRequest - a model defined in OpenAPI

        :param events: The events of this FunctionsCreateRequest.
        :param execute: The execute of this FunctionsCreateRequest.
        :param name: The name of this FunctionsCreateRequest.
        :param runtime: The runtime of this FunctionsCreateRequest.
        :param schedule: The schedule of this FunctionsCreateRequest.
        :param timeout: The timeout of this FunctionsCreateRequest.
        :param vars: The vars of this FunctionsCreateRequest.
        """
        self.openapi_types = {
            'events': List[str],
            'execute': List[str],
            'name': str,
            'runtime': str,
            'schedule': str,
            'timeout': int,
            'vars': object
        }

        self.attribute_map = {
            'events': 'events',
            'execute': 'execute',
            'name': 'name',
            'runtime': 'runtime',
            'schedule': 'schedule',
            'timeout': 'timeout',
            'vars': 'vars'
        }

        self._events = events
        self._execute = execute
        self._name = name
        self._runtime = runtime
        self._schedule = schedule
        self._timeout = timeout
        self._vars = vars

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FunctionsCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The functionsCreate_request of this FunctionsCreateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def events(self):
        """Gets the events of this FunctionsCreateRequest.

        Events list.

        :return: The events of this FunctionsCreateRequest.
        :rtype: List[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this FunctionsCreateRequest.

        Events list.

        :param events: The events of this FunctionsCreateRequest.
        :type events: List[str]
        """

        self._events = events

    @property
    def execute(self):
        """Gets the execute of this FunctionsCreateRequest.

        An array of strings with execution permissions. By default no user is granted with any execute permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.

        :return: The execute of this FunctionsCreateRequest.
        :rtype: List[str]
        """
        return self._execute

    @execute.setter
    def execute(self, execute):
        """Sets the execute of this FunctionsCreateRequest.

        An array of strings with execution permissions. By default no user is granted with any execute permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.

        :param execute: The execute of this FunctionsCreateRequest.
        :type execute: List[str]
        """
        if execute is None:
            raise ValueError("Invalid value for `execute`, must not be `None`")

        self._execute = execute

    @property
    def name(self):
        """Gets the name of this FunctionsCreateRequest.

        Function name. Max length: 128 chars.

        :return: The name of this FunctionsCreateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FunctionsCreateRequest.

        Function name. Max length: 128 chars.

        :param name: The name of this FunctionsCreateRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def runtime(self):
        """Gets the runtime of this FunctionsCreateRequest.

        Execution runtime.

        :return: The runtime of this FunctionsCreateRequest.
        :rtype: str
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this FunctionsCreateRequest.

        Execution runtime.

        :param runtime: The runtime of this FunctionsCreateRequest.
        :type runtime: str
        """
        if runtime is None:
            raise ValueError("Invalid value for `runtime`, must not be `None`")

        self._runtime = runtime

    @property
    def schedule(self):
        """Gets the schedule of this FunctionsCreateRequest.

        Schedule CRON syntax.

        :return: The schedule of this FunctionsCreateRequest.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this FunctionsCreateRequest.

        Schedule CRON syntax.

        :param schedule: The schedule of this FunctionsCreateRequest.
        :type schedule: str
        """

        self._schedule = schedule

    @property
    def timeout(self):
        """Gets the timeout of this FunctionsCreateRequest.

        Function maximum execution time in seconds.

        :return: The timeout of this FunctionsCreateRequest.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this FunctionsCreateRequest.

        Function maximum execution time in seconds.

        :param timeout: The timeout of this FunctionsCreateRequest.
        :type timeout: int
        """

        self._timeout = timeout

    @property
    def vars(self):
        """Gets the vars of this FunctionsCreateRequest.

        Key-value JSON object.

        :return: The vars of this FunctionsCreateRequest.
        :rtype: object
        """
        return self._vars

    @vars.setter
    def vars(self, vars):
        """Sets the vars of this FunctionsCreateRequest.

        Key-value JSON object.

        :param vars: The vars of this FunctionsCreateRequest.
        :type vars: object
        """

        self._vars = vars
