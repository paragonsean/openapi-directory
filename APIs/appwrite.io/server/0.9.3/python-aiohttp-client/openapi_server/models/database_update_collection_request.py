# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseUpdateCollectionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, read: List[str]=None, rules: List[str]=None, write: List[str]=None):
        """DatabaseUpdateCollectionRequest - a model defined in OpenAPI

        :param name: The name of this DatabaseUpdateCollectionRequest.
        :param read: The read of this DatabaseUpdateCollectionRequest.
        :param rules: The rules of this DatabaseUpdateCollectionRequest.
        :param write: The write of this DatabaseUpdateCollectionRequest.
        """
        self.openapi_types = {
            'name': str,
            'read': List[str],
            'rules': List[str],
            'write': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'read': 'read',
            'rules': 'rules',
            'write': 'write'
        }

        self._name = name
        self._read = read
        self._rules = rules
        self._write = write

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseUpdateCollectionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The databaseUpdateCollection_request of this DatabaseUpdateCollectionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this DatabaseUpdateCollectionRequest.

        Collection name. Max length: 128 chars.

        :return: The name of this DatabaseUpdateCollectionRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatabaseUpdateCollectionRequest.

        Collection name. Max length: 128 chars.

        :param name: The name of this DatabaseUpdateCollectionRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def read(self):
        """Gets the read of this DatabaseUpdateCollectionRequest.

        An array of strings with read permissions. By default inherits the existing read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.

        :return: The read of this DatabaseUpdateCollectionRequest.
        :rtype: List[str]
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this DatabaseUpdateCollectionRequest.

        An array of strings with read permissions. By default inherits the existing read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.

        :param read: The read of this DatabaseUpdateCollectionRequest.
        :type read: List[str]
        """

        self._read = read

    @property
    def rules(self):
        """Gets the rules of this DatabaseUpdateCollectionRequest.

        Array of [rule objects](/docs/rules). Each rule define a collection field name, data type and validation.

        :return: The rules of this DatabaseUpdateCollectionRequest.
        :rtype: List[str]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this DatabaseUpdateCollectionRequest.

        Array of [rule objects](/docs/rules). Each rule define a collection field name, data type and validation.

        :param rules: The rules of this DatabaseUpdateCollectionRequest.
        :type rules: List[str]
        """

        self._rules = rules

    @property
    def write(self):
        """Gets the write of this DatabaseUpdateCollectionRequest.

        An array of strings with write permissions. By default inherits the existing write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.

        :return: The write of this DatabaseUpdateCollectionRequest.
        :rtype: List[str]
        """
        return self._write

    @write.setter
    def write(self, write):
        """Sets the write of this DatabaseUpdateCollectionRequest.

        An array of strings with write permissions. By default inherits the existing write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.

        :param write: The write of this DatabaseUpdateCollectionRequest.
        :type write: List[str]
        """

        self._write = write
