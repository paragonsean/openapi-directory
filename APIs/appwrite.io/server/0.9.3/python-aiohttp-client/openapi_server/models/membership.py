# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Membership(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, confirm: bool=None, email: str=None, invited: int=None, joined: int=None, name: str=None, roles: List[str]=None, team_id: str=None, user_id: str=None):
        """Membership - a model defined in OpenAPI

        :param id: The id of this Membership.
        :param confirm: The confirm of this Membership.
        :param email: The email of this Membership.
        :param invited: The invited of this Membership.
        :param joined: The joined of this Membership.
        :param name: The name of this Membership.
        :param roles: The roles of this Membership.
        :param team_id: The team_id of this Membership.
        :param user_id: The user_id of this Membership.
        """
        self.openapi_types = {
            'id': str,
            'confirm': bool,
            'email': str,
            'invited': int,
            'joined': int,
            'name': str,
            'roles': List[str],
            'team_id': str,
            'user_id': str
        }

        self.attribute_map = {
            'id': '$id',
            'confirm': 'confirm',
            'email': 'email',
            'invited': 'invited',
            'joined': 'joined',
            'name': 'name',
            'roles': 'roles',
            'team_id': 'teamId',
            'user_id': 'userId'
        }

        self._id = id
        self._confirm = confirm
        self._email = email
        self._invited = invited
        self._joined = joined
        self._name = name
        self._roles = roles
        self._team_id = team_id
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Membership':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The membership of this Membership.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Membership.

        Membership ID.

        :return: The id of this Membership.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Membership.

        Membership ID.

        :param id: The id of this Membership.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def confirm(self):
        """Gets the confirm of this Membership.

        User confirmation status, true if the user has joined the team or false otherwise.

        :return: The confirm of this Membership.
        :rtype: bool
        """
        return self._confirm

    @confirm.setter
    def confirm(self, confirm):
        """Sets the confirm of this Membership.

        User confirmation status, true if the user has joined the team or false otherwise.

        :param confirm: The confirm of this Membership.
        :type confirm: bool
        """
        if confirm is None:
            raise ValueError("Invalid value for `confirm`, must not be `None`")

        self._confirm = confirm

    @property
    def email(self):
        """Gets the email of this Membership.

        User email address.

        :return: The email of this Membership.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Membership.

        User email address.

        :param email: The email of this Membership.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def invited(self):
        """Gets the invited of this Membership.

        Date, the user has been invited to join the team in Unix timestamp.

        :return: The invited of this Membership.
        :rtype: int
        """
        return self._invited

    @invited.setter
    def invited(self, invited):
        """Sets the invited of this Membership.

        Date, the user has been invited to join the team in Unix timestamp.

        :param invited: The invited of this Membership.
        :type invited: int
        """
        if invited is None:
            raise ValueError("Invalid value for `invited`, must not be `None`")

        self._invited = invited

    @property
    def joined(self):
        """Gets the joined of this Membership.

        Date, the user has accepted the invitation to join the team in Unix timestamp.

        :return: The joined of this Membership.
        :rtype: int
        """
        return self._joined

    @joined.setter
    def joined(self, joined):
        """Sets the joined of this Membership.

        Date, the user has accepted the invitation to join the team in Unix timestamp.

        :param joined: The joined of this Membership.
        :type joined: int
        """
        if joined is None:
            raise ValueError("Invalid value for `joined`, must not be `None`")

        self._joined = joined

    @property
    def name(self):
        """Gets the name of this Membership.

        User name.

        :return: The name of this Membership.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Membership.

        User name.

        :param name: The name of this Membership.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def roles(self):
        """Gets the roles of this Membership.

        User list of roles

        :return: The roles of this Membership.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this Membership.

        User list of roles

        :param roles: The roles of this Membership.
        :type roles: List[str]
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")

        self._roles = roles

    @property
    def team_id(self):
        """Gets the team_id of this Membership.

        Team ID.

        :return: The team_id of this Membership.
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this Membership.

        Team ID.

        :param team_id: The team_id of this Membership.
        :type team_id: str
        """
        if team_id is None:
            raise ValueError("Invalid value for `team_id`, must not be `None`")

        self._team_id = team_id

    @property
    def user_id(self):
        """Gets the user_id of this Membership.

        User ID.

        :return: The user_id of this Membership.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Membership.

        User ID.

        :param user_id: The user_id of this Membership.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
