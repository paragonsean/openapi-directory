# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Tag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, command: str=None, date_created: int=None, function_id: str=None, size: str=None):
        """Tag - a model defined in OpenAPI

        :param id: The id of this Tag.
        :param command: The command of this Tag.
        :param date_created: The date_created of this Tag.
        :param function_id: The function_id of this Tag.
        :param size: The size of this Tag.
        """
        self.openapi_types = {
            'id': str,
            'command': str,
            'date_created': int,
            'function_id': str,
            'size': str
        }

        self.attribute_map = {
            'id': '$id',
            'command': 'command',
            'date_created': 'dateCreated',
            'function_id': 'functionId',
            'size': 'size'
        }

        self._id = id
        self._command = command
        self._date_created = date_created
        self._function_id = function_id
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The tag of this Tag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Tag.

        Tag ID.

        :return: The id of this Tag.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tag.

        Tag ID.

        :param id: The id of this Tag.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def command(self):
        """Gets the command of this Tag.

        The entrypoint command in use to execute the tag code.

        :return: The command of this Tag.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this Tag.

        The entrypoint command in use to execute the tag code.

        :param command: The command of this Tag.
        :type command: str
        """
        if command is None:
            raise ValueError("Invalid value for `command`, must not be `None`")

        self._command = command

    @property
    def date_created(self):
        """Gets the date_created of this Tag.

        The tag creation date in Unix timestamp.

        :return: The date_created of this Tag.
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Tag.

        The tag creation date in Unix timestamp.

        :param date_created: The date_created of this Tag.
        :type date_created: int
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")

        self._date_created = date_created

    @property
    def function_id(self):
        """Gets the function_id of this Tag.

        Function ID.

        :return: The function_id of this Tag.
        :rtype: str
        """
        return self._function_id

    @function_id.setter
    def function_id(self, function_id):
        """Sets the function_id of this Tag.

        Function ID.

        :param function_id: The function_id of this Tag.
        :type function_id: str
        """
        if function_id is None:
            raise ValueError("Invalid value for `function_id`, must not be `None`")

        self._function_id = function_id

    @property
    def size(self):
        """Gets the size of this Tag.

        The code size in bytes.

        :return: The size of this Tag.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Tag.

        The code size in bytes.

        :param size: The size of this Tag.
        :type size: str
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size
