# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.permissions import Permissions
from openapi_server import util


class Document(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collection: str=None, id: str=None, permissions: List[Permissions]=None):
        """Document - a model defined in OpenAPI

        :param collection: The collection of this Document.
        :param id: The id of this Document.
        :param permissions: The permissions of this Document.
        """
        self.openapi_types = {
            'collection': str,
            'id': str,
            'permissions': List[Permissions]
        }

        self.attribute_map = {
            'collection': '$collection',
            'id': '$id',
            'permissions': '$permissions'
        }

        self._collection = collection
        self._id = id
        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Document':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The document of this Document.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collection(self):
        """Gets the collection of this Document.

        Collection ID.

        :return: The collection of this Document.
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this Document.

        Collection ID.

        :param collection: The collection of this Document.
        :type collection: str
        """
        if collection is None:
            raise ValueError("Invalid value for `collection`, must not be `None`")

        self._collection = collection

    @property
    def id(self):
        """Gets the id of this Document.

        Document ID.

        :return: The id of this Document.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Document.

        Document ID.

        :param id: The id of this Document.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def permissions(self):
        """Gets the permissions of this Document.

        Document permissions.

        :return: The permissions of this Document.
        :rtype: List[Permissions]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Document.

        Document permissions.

        :param permissions: The permissions of this Document.
        :type permissions: List[Permissions]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions
