# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountUpdateRecoveryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, password: str=None, password_again: str=None, secret: str=None, user_id: str=None):
        """AccountUpdateRecoveryRequest - a model defined in OpenAPI

        :param password: The password of this AccountUpdateRecoveryRequest.
        :param password_again: The password_again of this AccountUpdateRecoveryRequest.
        :param secret: The secret of this AccountUpdateRecoveryRequest.
        :param user_id: The user_id of this AccountUpdateRecoveryRequest.
        """
        self.openapi_types = {
            'password': str,
            'password_again': str,
            'secret': str,
            'user_id': str
        }

        self.attribute_map = {
            'password': 'password',
            'password_again': 'passwordAgain',
            'secret': 'secret',
            'user_id': 'userId'
        }

        self._password = password
        self._password_again = password_again
        self._secret = secret
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountUpdateRecoveryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The accountUpdateRecovery_request of this AccountUpdateRecoveryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def password(self):
        """Gets the password of this AccountUpdateRecoveryRequest.

        New password. Must be between 6 to 32 chars.

        :return: The password of this AccountUpdateRecoveryRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AccountUpdateRecoveryRequest.

        New password. Must be between 6 to 32 chars.

        :param password: The password of this AccountUpdateRecoveryRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def password_again(self):
        """Gets the password_again of this AccountUpdateRecoveryRequest.

        New password again. Must be between 6 to 32 chars.

        :return: The password_again of this AccountUpdateRecoveryRequest.
        :rtype: str
        """
        return self._password_again

    @password_again.setter
    def password_again(self, password_again):
        """Sets the password_again of this AccountUpdateRecoveryRequest.

        New password again. Must be between 6 to 32 chars.

        :param password_again: The password_again of this AccountUpdateRecoveryRequest.
        :type password_again: str
        """
        if password_again is None:
            raise ValueError("Invalid value for `password_again`, must not be `None`")

        self._password_again = password_again

    @property
    def secret(self):
        """Gets the secret of this AccountUpdateRecoveryRequest.

        Valid reset token.

        :return: The secret of this AccountUpdateRecoveryRequest.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this AccountUpdateRecoveryRequest.

        Valid reset token.

        :param secret: The secret of this AccountUpdateRecoveryRequest.
        :type secret: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")

        self._secret = secret

    @property
    def user_id(self):
        """Gets the user_id of this AccountUpdateRecoveryRequest.

        User account UID address.

        :return: The user_id of this AccountUpdateRecoveryRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AccountUpdateRecoveryRequest.

        User account UID address.

        :param user_id: The user_id of this AccountUpdateRecoveryRequest.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
