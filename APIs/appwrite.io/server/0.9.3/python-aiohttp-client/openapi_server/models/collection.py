# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.permissions import Permissions
from openapi_server.models.rule import Rule
from openapi_server import util


class Collection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, permissions: List[Permissions]=None, date_created: int=None, date_updated: int=None, name: str=None, rules: List[Rule]=None):
        """Collection - a model defined in OpenAPI

        :param id: The id of this Collection.
        :param permissions: The permissions of this Collection.
        :param date_created: The date_created of this Collection.
        :param date_updated: The date_updated of this Collection.
        :param name: The name of this Collection.
        :param rules: The rules of this Collection.
        """
        self.openapi_types = {
            'id': str,
            'permissions': List[Permissions],
            'date_created': int,
            'date_updated': int,
            'name': str,
            'rules': List[Rule]
        }

        self.attribute_map = {
            'id': '$id',
            'permissions': '$permissions',
            'date_created': 'dateCreated',
            'date_updated': 'dateUpdated',
            'name': 'name',
            'rules': 'rules'
        }

        self._id = id
        self._permissions = permissions
        self._date_created = date_created
        self._date_updated = date_updated
        self._name = name
        self._rules = rules

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Collection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The collection of this Collection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Collection.

        Collection ID.

        :return: The id of this Collection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Collection.

        Collection ID.

        :param id: The id of this Collection.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def permissions(self):
        """Gets the permissions of this Collection.

        Collection permissions.

        :return: The permissions of this Collection.
        :rtype: List[Permissions]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Collection.

        Collection permissions.

        :param permissions: The permissions of this Collection.
        :type permissions: List[Permissions]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def date_created(self):
        """Gets the date_created of this Collection.

        Collection creation date in Unix timestamp.

        :return: The date_created of this Collection.
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Collection.

        Collection creation date in Unix timestamp.

        :param date_created: The date_created of this Collection.
        :type date_created: int
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this Collection.

        Collection creation date in Unix timestamp.

        :return: The date_updated of this Collection.
        :rtype: int
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this Collection.

        Collection creation date in Unix timestamp.

        :param date_updated: The date_updated of this Collection.
        :type date_updated: int
        """
        if date_updated is None:
            raise ValueError("Invalid value for `date_updated`, must not be `None`")

        self._date_updated = date_updated

    @property
    def name(self):
        """Gets the name of this Collection.

        Collection name.

        :return: The name of this Collection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Collection.

        Collection name.

        :param name: The name of this Collection.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def rules(self):
        """Gets the rules of this Collection.

        Collection rules.

        :return: The rules of this Collection.
        :rtype: List[Rule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this Collection.

        Collection rules.

        :param rules: The rules of this Collection.
        :type rules: List[Rule]
        """
        if rules is None:
            raise ValueError("Invalid value for `rules`, must not be `None`")

        self._rules = rules
