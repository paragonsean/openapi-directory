# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Locale(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, continent: str=None, continent_code: str=None, country: str=None, country_code: str=None, currency: str=None, eu: bool=None, ip: str=None):
        """Locale - a model defined in OpenAPI

        :param continent: The continent of this Locale.
        :param continent_code: The continent_code of this Locale.
        :param country: The country of this Locale.
        :param country_code: The country_code of this Locale.
        :param currency: The currency of this Locale.
        :param eu: The eu of this Locale.
        :param ip: The ip of this Locale.
        """
        self.openapi_types = {
            'continent': str,
            'continent_code': str,
            'country': str,
            'country_code': str,
            'currency': str,
            'eu': bool,
            'ip': str
        }

        self.attribute_map = {
            'continent': 'continent',
            'continent_code': 'continentCode',
            'country': 'country',
            'country_code': 'countryCode',
            'currency': 'currency',
            'eu': 'eu',
            'ip': 'ip'
        }

        self._continent = continent
        self._continent_code = continent_code
        self._country = country
        self._country_code = country_code
        self._currency = currency
        self._eu = eu
        self._ip = ip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Locale':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The locale of this Locale.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def continent(self):
        """Gets the continent of this Locale.

        Continent name. This field support localization.

        :return: The continent of this Locale.
        :rtype: str
        """
        return self._continent

    @continent.setter
    def continent(self, continent):
        """Sets the continent of this Locale.

        Continent name. This field support localization.

        :param continent: The continent of this Locale.
        :type continent: str
        """
        if continent is None:
            raise ValueError("Invalid value for `continent`, must not be `None`")

        self._continent = continent

    @property
    def continent_code(self):
        """Gets the continent_code of this Locale.

        Continent code. A two character continent code \"AF\" for Africa, \"AN\" for Antarctica, \"AS\" for Asia, \"EU\" for Europe, \"NA\" for North America, \"OC\" for Oceania, and \"SA\" for South America.

        :return: The continent_code of this Locale.
        :rtype: str
        """
        return self._continent_code

    @continent_code.setter
    def continent_code(self, continent_code):
        """Sets the continent_code of this Locale.

        Continent code. A two character continent code \"AF\" for Africa, \"AN\" for Antarctica, \"AS\" for Asia, \"EU\" for Europe, \"NA\" for North America, \"OC\" for Oceania, and \"SA\" for South America.

        :param continent_code: The continent_code of this Locale.
        :type continent_code: str
        """
        if continent_code is None:
            raise ValueError("Invalid value for `continent_code`, must not be `None`")

        self._continent_code = continent_code

    @property
    def country(self):
        """Gets the country of this Locale.

        Country name. This field support localization.

        :return: The country of this Locale.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Locale.

        Country name. This field support localization.

        :param country: The country of this Locale.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this Locale.

        Country code in [ISO 3166-1](http://en.wikipedia.org/wiki/ISO_3166-1) two-character format

        :return: The country_code of this Locale.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Locale.

        Country code in [ISO 3166-1](http://en.wikipedia.org/wiki/ISO_3166-1) two-character format

        :param country_code: The country_code of this Locale.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def currency(self):
        """Gets the currency of this Locale.

        Currency code in [ISO 4217-1](http://en.wikipedia.org/wiki/ISO_4217) three-character format

        :return: The currency of this Locale.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Locale.

        Currency code in [ISO 4217-1](http://en.wikipedia.org/wiki/ISO_4217) three-character format

        :param currency: The currency of this Locale.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def eu(self):
        """Gets the eu of this Locale.

        True if country is part of the Europian Union.

        :return: The eu of this Locale.
        :rtype: bool
        """
        return self._eu

    @eu.setter
    def eu(self, eu):
        """Sets the eu of this Locale.

        True if country is part of the Europian Union.

        :param eu: The eu of this Locale.
        :type eu: bool
        """
        if eu is None:
            raise ValueError("Invalid value for `eu`, must not be `None`")

        self._eu = eu

    @property
    def ip(self):
        """Gets the ip of this Locale.

        User IP address.

        :return: The ip of this Locale.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Locale.

        User IP address.

        :param ip: The ip of this Locale.
        :type ip: str
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")

        self._ip = ip
