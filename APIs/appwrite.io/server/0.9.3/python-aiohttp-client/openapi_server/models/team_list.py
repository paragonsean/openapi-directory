# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.team import Team
from openapi_server import util


class TeamList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sum: int=None, teams: List[Team]=None):
        """TeamList - a model defined in OpenAPI

        :param sum: The sum of this TeamList.
        :param teams: The teams of this TeamList.
        """
        self.openapi_types = {
            'sum': int,
            'teams': List[Team]
        }

        self.attribute_map = {
            'sum': 'sum',
            'teams': 'teams'
        }

        self._sum = sum
        self._teams = teams

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TeamList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The teamList of this TeamList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sum(self):
        """Gets the sum of this TeamList.

        Total sum of items in the list.

        :return: The sum of this TeamList.
        :rtype: int
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this TeamList.

        Total sum of items in the list.

        :param sum: The sum of this TeamList.
        :type sum: int
        """
        if sum is None:
            raise ValueError("Invalid value for `sum`, must not be `None`")

        self._sum = sum

    @property
    def teams(self):
        """Gets the teams of this TeamList.

        List of teams.

        :return: The teams of this TeamList.
        :rtype: List[Team]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this TeamList.

        List of teams.

        :param teams: The teams of this TeamList.
        :type teams: List[Team]
        """
        if teams is None:
            raise ValueError("Invalid value for `teams`, must not be `None`")

        self._teams = teams
