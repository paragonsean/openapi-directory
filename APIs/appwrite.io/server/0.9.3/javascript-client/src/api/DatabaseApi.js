/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Collection from '../model/Collection';
import CollectionList from '../model/CollectionList';
import DatabaseCreateCollectionRequest from '../model/DatabaseCreateCollectionRequest';
import DatabaseCreateDocumentRequest from '../model/DatabaseCreateDocumentRequest';
import DatabaseUpdateCollectionRequest from '../model/DatabaseUpdateCollectionRequest';
import DatabaseUpdateDocumentRequest from '../model/DatabaseUpdateDocumentRequest';
import Document from '../model/Document';
import DocumentList from '../model/DocumentList';

/**
* Database service.
* @module api/DatabaseApi
* @version 0.9.3
*/
export default class DatabaseApi {

    /**
    * Constructs a new DatabaseApi. 
    * @alias module:api/DatabaseApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the databaseCreateCollection operation.
     * @callback module:api/DatabaseApi~databaseCreateCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Collection
     * Create a new Collection.
     * @param {Object} opts Optional parameters
     * @param {module:model/DatabaseCreateCollectionRequest} [databaseCreateCollectionRequest] 
     * @param {module:api/DatabaseApi~databaseCreateCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    databaseCreateCollection(opts, callback) {
      opts = opts || {};
      let postBody = opts['databaseCreateCollectionRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/database/collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseCreateDocument operation.
     * @callback module:api/DatabaseApi~databaseCreateDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Document
     * Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](/docs/server/database#databaseCreateCollection) API or directly from your database console.
     * @param {String} collectionId Collection unique ID. You can create a new collection with validation rules using the Database service [server integration](/docs/server/database#createCollection).
     * @param {Object} opts Optional parameters
     * @param {module:model/DatabaseCreateDocumentRequest} [databaseCreateDocumentRequest] 
     * @param {module:api/DatabaseApi~databaseCreateDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    databaseCreateDocument(collectionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['databaseCreateDocumentRequest'];
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling databaseCreateDocument");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/database/collections/{collectionId}/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseDeleteCollection operation.
     * @callback module:api/DatabaseApi~databaseDeleteCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Collection
     * Delete a collection by its unique ID. Only users with write permissions have access to delete this resource.
     * @param {String} collectionId Collection unique ID.
     * @param {module:api/DatabaseApi~databaseDeleteCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseDeleteCollection(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling databaseDeleteCollection");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/database/collections/{collectionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseDeleteDocument operation.
     * @callback module:api/DatabaseApi~databaseDeleteDocumentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Document
     * Delete a document by its unique ID. This endpoint deletes only the parent documents, its attributes and relations to other documents. Child documents **will not** be deleted.
     * @param {String} collectionId Collection unique ID. You can create a new collection with validation rules using the Database service [server integration](/docs/server/database#createCollection).
     * @param {String} documentId Document unique ID.
     * @param {module:api/DatabaseApi~databaseDeleteDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    databaseDeleteDocument(collectionId, documentId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling databaseDeleteDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling databaseDeleteDocument");
      }

      let pathParams = {
        'collectionId': collectionId,
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/database/collections/{collectionId}/documents/{documentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseGetCollection operation.
     * @callback module:api/DatabaseApi~databaseGetCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Collection
     * Get a collection by its unique ID. This endpoint response returns a JSON object with the collection metadata.
     * @param {String} collectionId Collection unique ID.
     * @param {module:api/DatabaseApi~databaseGetCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    databaseGetCollection(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling databaseGetCollection");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/database/collections/{collectionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseGetDocument operation.
     * @callback module:api/DatabaseApi~databaseGetDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Document
     * Get a document by its unique ID. This endpoint response returns a JSON object with the document data.
     * @param {String} collectionId Collection unique ID. You can create a new collection with validation rules using the Database service [server integration](/docs/server/database#createCollection).
     * @param {String} documentId Document unique ID.
     * @param {module:api/DatabaseApi~databaseGetDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    databaseGetDocument(collectionId, documentId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling databaseGetDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling databaseGetDocument");
      }

      let pathParams = {
        'collectionId': collectionId,
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/database/collections/{collectionId}/documents/{documentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseListCollections operation.
     * @callback module:api/DatabaseApi~databaseListCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Collections
     * Get a list of all the user collections. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's collections. [Learn more about different API modes](/docs/admin).
     * @param {Object} opts Optional parameters
     * @param {String} [search = '')] Search term to filter your list results. Max length: 256 chars.
     * @param {Number} [limit = 25)] Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request.
     * @param {Number} [offset = 0)] Results offset. The default value is 0. Use this param to manage pagination.
     * @param {String} [orderType = 'ASC')] Order result by ASC or DESC order.
     * @param {module:api/DatabaseApi~databaseListCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionList}
     */
    databaseListCollections(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'orderType': opts['orderType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CollectionList;
      return this.apiClient.callApi(
        '/database/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseListDocuments operation.
     * @callback module:api/DatabaseApi~databaseListDocumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DocumentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Documents
     * Get a list of all the user documents. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's documents. [Learn more about different API modes](/docs/admin).
     * @param {String} collectionId Collection unique ID. You can create a new collection with validation rules using the Database service [server integration](/docs/server/database#createCollection).
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [filters] Array of filter strings. Each filter is constructed from a key name, comparison operator (=, !=, >, <, <=, >=) and a value. You can also use a dot (.) separator in attribute names to filter by child document attributes. Examples: 'name=John Doe' or 'category.$id>=5bed2d152c362'.
     * @param {Number} [limit = 25)] Maximum number of documents to return in response.  Use this value to manage pagination. By default will return maximum 25 results. Maximum of 100 results allowed per request.
     * @param {Number} [offset = 0)] Offset value. The default value is 0. Use this param to manage pagination.
     * @param {String} [orderField = '')] Document field that results will be sorted by.
     * @param {String} [orderType = 'ASC')] Order direction. Possible values are DESC for descending order, or ASC for ascending order.
     * @param {String} [orderCast = 'string')] Order field type casting. Possible values are int, string, date, time or datetime. The database will attempt to cast the order field to the value you pass here. The default value is a string.
     * @param {String} [search = '')] Search query. Enter any free text search. The database will try to find a match against all document attributes and children. Max length: 256 chars.
     * @param {module:api/DatabaseApi~databaseListDocumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DocumentList}
     */
    databaseListDocuments(collectionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling databaseListDocuments");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
        'filters': this.apiClient.buildCollectionParam(opts['filters'], 'multi'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'orderField': opts['orderField'],
        'orderType': opts['orderType'],
        'orderCast': opts['orderCast'],
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DocumentList;
      return this.apiClient.callApi(
        '/database/collections/{collectionId}/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseUpdateCollection operation.
     * @callback module:api/DatabaseApi~databaseUpdateCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Collection
     * Update a collection by its unique ID.
     * @param {String} collectionId Collection unique ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/DatabaseUpdateCollectionRequest} [databaseUpdateCollectionRequest] 
     * @param {module:api/DatabaseApi~databaseUpdateCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    databaseUpdateCollection(collectionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['databaseUpdateCollectionRequest'];
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling databaseUpdateCollection");
      }

      let pathParams = {
        'collectionId': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/database/collections/{collectionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the databaseUpdateDocument operation.
     * @callback module:api/DatabaseApi~databaseUpdateDocumentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Document} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Document
     * Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.
     * @param {String} collectionId Collection unique ID. You can create a new collection with validation rules using the Database service [server integration](/docs/server/database#createCollection).
     * @param {String} documentId Document unique ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/DatabaseUpdateDocumentRequest} [databaseUpdateDocumentRequest] 
     * @param {module:api/DatabaseApi~databaseUpdateDocumentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Document}
     */
    databaseUpdateDocument(collectionId, documentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['databaseUpdateDocumentRequest'];
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling databaseUpdateDocument");
      }
      // verify the required parameter 'documentId' is set
      if (documentId === undefined || documentId === null) {
        throw new Error("Missing the required parameter 'documentId' when calling databaseUpdateDocument");
      }

      let pathParams = {
        'collectionId': collectionId,
        'documentId': documentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Document;
      return this.apiClient.callApi(
        '/database/collections/{collectionId}/documents/{documentId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
