/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountUpdatePrefsRequest from '../model/AccountUpdatePrefsRequest';
import LogList from '../model/LogList';
import SessionList from '../model/SessionList';
import User from '../model/User';
import UserList from '../model/UserList';
import UsersCreateRequest from '../model/UsersCreateRequest';
import UsersUpdateStatusRequest from '../model/UsersUpdateStatusRequest';
import UsersUpdateVerificationRequest from '../model/UsersUpdateVerificationRequest';

/**
* Users service.
* @module api/UsersApi
* @version 0.9.3
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usersCreate operation.
     * @callback module:api/UsersApi~usersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create User
     * Create a new user.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersCreateRequest} [usersCreateRequest] 
     * @param {module:api/UsersApi~usersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['usersCreateRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersDelete operation.
     * @callback module:api/UsersApi~usersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete User
     * Delete a user by its unique ID.
     * @param {String} userId User unique ID.
     * @param {module:api/UsersApi~usersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersDelete(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersDelete");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersDeleteSession operation.
     * @callback module:api/UsersApi~usersDeleteSessionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete User Session
     * Delete a user sessions by its unique ID.
     * @param {String} userId User unique ID.
     * @param {String} sessionId User unique session ID.
     * @param {module:api/UsersApi~usersDeleteSessionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersDeleteSession(userId, sessionId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersDeleteSession");
      }
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling usersDeleteSession");
      }

      let pathParams = {
        'userId': userId,
        'sessionId': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userId}/sessions/{sessionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersDeleteSessions operation.
     * @callback module:api/UsersApi~usersDeleteSessionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete User Sessions
     * Delete all user's sessions by using the user's unique ID.
     * @param {String} userId User unique ID.
     * @param {module:api/UsersApi~usersDeleteSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usersDeleteSessions(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersDeleteSessions");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{userId}/sessions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGet operation.
     * @callback module:api/UsersApi~usersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User
     * Get a user by its unique ID.
     * @param {String} userId User unique ID.
     * @param {module:api/UsersApi~usersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersGet");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetLogs operation.
     * @callback module:api/UsersApi~usersGetLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Logs
     * Get a user activity logs list by its unique ID.
     * @param {String} userId User unique ID.
     * @param {module:api/UsersApi~usersGetLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogList}
     */
    usersGetLogs(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersGetLogs");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogList;
      return this.apiClient.callApi(
        '/users/{userId}/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetPrefs operation.
     * @callback module:api/UsersApi~usersGetPrefsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Preferences
     * Get the user preferences by its unique ID.
     * @param {String} userId User unique ID.
     * @param {module:api/UsersApi~usersGetPrefsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    usersGetPrefs(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersGetPrefs");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/users/{userId}/prefs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetSessions operation.
     * @callback module:api/UsersApi~usersGetSessionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SessionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Sessions
     * Get the user sessions list by its unique ID.
     * @param {String} userId User unique ID.
     * @param {module:api/UsersApi~usersGetSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SessionList}
     */
    usersGetSessions(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersGetSessions");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SessionList;
      return this.apiClient.callApi(
        '/users/{userId}/sessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersList operation.
     * @callback module:api/UsersApi~usersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Users
     * Get a list of all the project's users. You can use the query params to filter your results.
     * @param {Object} opts Optional parameters
     * @param {String} [search = '')] Search term to filter your list results. Max length: 256 chars.
     * @param {Number} [limit = 25)] Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request.
     * @param {Number} [offset = 0)] Results offset. The default value is 0. Use this param to manage pagination.
     * @param {String} [orderType = 'ASC')] Order result by ASC or DESC order.
     * @param {module:api/UsersApi~usersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserList}
     */
    usersList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'orderType': opts['orderType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserList;
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUpdatePrefs operation.
     * @callback module:api/UsersApi~usersUpdatePrefsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update User Preferences
     * Update the user preferences by its unique ID. You can pass only the specific settings you wish to update.
     * @param {String} userId User unique ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountUpdatePrefsRequest} [accountUpdatePrefsRequest] 
     * @param {module:api/UsersApi~usersUpdatePrefsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    usersUpdatePrefs(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['accountUpdatePrefsRequest'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUpdatePrefs");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/users/{userId}/prefs', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUpdateStatus operation.
     * @callback module:api/UsersApi~usersUpdateStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update User Status
     * Update the user status by its unique ID.
     * @param {String} userId User unique ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersUpdateStatusRequest} [usersUpdateStatusRequest] 
     * @param {module:api/UsersApi~usersUpdateStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersUpdateStatus(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['usersUpdateStatusRequest'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUpdateStatus");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{userId}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUpdateVerification operation.
     * @callback module:api/UsersApi~usersUpdateVerificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Email Verification
     * Update the user email verification status by its unique ID.
     * @param {String} userId User unique ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/UsersUpdateVerificationRequest} [usersUpdateVerificationRequest] 
     * @param {module:api/UsersApi~usersUpdateVerificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usersUpdateVerification(userId, opts, callback) {
      opts = opts || {};
      let postBody = opts['usersUpdateVerificationRequest'];
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUpdateVerification");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{userId}/verification', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
