/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Membership from '../model/Membership';
import MembershipList from '../model/MembershipList';
import Team from '../model/Team';
import TeamList from '../model/TeamList';
import TeamsCreateMembershipRequest from '../model/TeamsCreateMembershipRequest';
import TeamsCreateRequest from '../model/TeamsCreateRequest';
import TeamsUpdateMembershipRolesRequest from '../model/TeamsUpdateMembershipRolesRequest';
import TeamsUpdateMembershipStatusRequest from '../model/TeamsUpdateMembershipStatusRequest';
import TeamsUpdateRequest from '../model/TeamsUpdateRequest';

/**
* Teams service.
* @module api/TeamsApi
* @version 0.9.3
*/
export default class TeamsApi {

    /**
    * Constructs a new TeamsApi. 
    * @alias module:api/TeamsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the teamsCreate operation.
     * @callback module:api/TeamsApi~teamsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Team} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Team
     * Create a new team. The user who creates the team will automatically be assigned as the owner of the team. The team owner can invite new members, who will be able add new owners and update or delete the team from your project.
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamsCreateRequest} [teamsCreateRequest] 
     * @param {module:api/TeamsApi~teamsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Team}
     */
    teamsCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['teamsCreateRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Team;
      return this.apiClient.callApi(
        '/teams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsCreateMembership operation.
     * @callback module:api/TeamsApi~teamsCreateMembershipCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Membership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Team Membership
     * Use this endpoint to invite a new member to join your team. If initiated from Client SDK, an email with a link to join the team will be sent to the new member's email address if the member doesn't exist in the project it will be created automatically. If initiated from server side SDKs, new member will automatically be added to the team.  Use the 'URL' parameter to redirect the user from the invitation email back to your app. When the user is redirected, use the [Update Team Membership Status](/docs/client/teams#teamsUpdateMembershipStatus) endpoint to allow the user to accept the invitation to the team.  While calling from side SDKs the redirect url can be empty string.  Please note that in order to avoid a [Redirect Attacks](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URL's are the once from domains you have set when added your platforms in the console interface.
     * @param {String} teamId Team unique ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamsCreateMembershipRequest} [teamsCreateMembershipRequest] 
     * @param {module:api/TeamsApi~teamsCreateMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Membership}
     */
    teamsCreateMembership(teamId, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamsCreateMembershipRequest'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsCreateMembership");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Membership;
      return this.apiClient.callApi(
        '/teams/{teamId}/memberships', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsDelete operation.
     * @callback module:api/TeamsApi~teamsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Team
     * Delete a team by its unique ID. Only team owners have write access for this resource.
     * @param {String} teamId Team unique ID.
     * @param {module:api/TeamsApi~teamsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsDelete(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsDelete");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{teamId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsDeleteMembership operation.
     * @callback module:api/TeamsApi~teamsDeleteMembershipCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Team Membership
     * This endpoint allows a user to leave a team or for a team owner to delete the membership of any other team member. You can also use this endpoint to delete a user membership even if it is not accepted.
     * @param {String} teamId Team unique ID.
     * @param {String} membershipId Membership ID.
     * @param {module:api/TeamsApi~teamsDeleteMembershipCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamsDeleteMembership(teamId, membershipId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsDeleteMembership");
      }
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling teamsDeleteMembership");
      }

      let pathParams = {
        'teamId': teamId,
        'membershipId': membershipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{teamId}/memberships/{membershipId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGet operation.
     * @callback module:api/TeamsApi~teamsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Team} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Team
     * Get a team by its unique ID. All team members have read access for this resource.
     * @param {String} teamId Team unique ID.
     * @param {module:api/TeamsApi~teamsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Team}
     */
    teamsGet(teamId, callback) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsGet");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Team;
      return this.apiClient.callApi(
        '/teams/{teamId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetMemberships operation.
     * @callback module:api/TeamsApi~teamsGetMembershipsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MembershipList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Team Memberships
     * Get a team members by the team unique ID. All team members have read access for this list of resources.
     * @param {String} teamId Team unique ID.
     * @param {Object} opts Optional parameters
     * @param {String} [search = '')] Search term to filter your list results. Max length: 256 chars.
     * @param {Number} [limit = 25)] Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request.
     * @param {Number} [offset = 0)] Results offset. The default value is 0. Use this param to manage pagination.
     * @param {String} [orderType = 'ASC')] Order result by ASC or DESC order.
     * @param {module:api/TeamsApi~teamsGetMembershipsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MembershipList}
     */
    teamsGetMemberships(teamId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsGetMemberships");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
        'search': opts['search'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'orderType': opts['orderType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MembershipList;
      return this.apiClient.callApi(
        '/teams/{teamId}/memberships', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsList operation.
     * @callback module:api/TeamsApi~teamsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Teams
     * Get a list of all the current user teams. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's teams. [Learn more about different API modes](/docs/admin).
     * @param {Object} opts Optional parameters
     * @param {String} [search = '')] Search term to filter your list results. Max length: 256 chars.
     * @param {Number} [limit = 25)] Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request.
     * @param {Number} [offset = 0)] Results offset. The default value is 0. Use this param to manage pagination.
     * @param {String} [orderType = 'ASC')] Order result by ASC or DESC order.
     * @param {module:api/TeamsApi~teamsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamList}
     */
    teamsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'orderType': opts['orderType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamList;
      return this.apiClient.callApi(
        '/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsUpdate operation.
     * @callback module:api/TeamsApi~teamsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Team} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Team
     * Update a team by its unique ID. Only team owners have write access for this resource.
     * @param {String} teamId Team unique ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamsUpdateRequest} [teamsUpdateRequest] 
     * @param {module:api/TeamsApi~teamsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Team}
     */
    teamsUpdate(teamId, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamsUpdateRequest'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsUpdate");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Team;
      return this.apiClient.callApi(
        '/teams/{teamId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsUpdateMembershipRoles operation.
     * @callback module:api/TeamsApi~teamsUpdateMembershipRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Membership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Membership Roles
     * 
     * @param {String} teamId Team unique ID.
     * @param {String} membershipId Membership ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamsUpdateMembershipRolesRequest} [teamsUpdateMembershipRolesRequest] 
     * @param {module:api/TeamsApi~teamsUpdateMembershipRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Membership}
     */
    teamsUpdateMembershipRoles(teamId, membershipId, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamsUpdateMembershipRolesRequest'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsUpdateMembershipRoles");
      }
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling teamsUpdateMembershipRoles");
      }

      let pathParams = {
        'teamId': teamId,
        'membershipId': membershipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Membership;
      return this.apiClient.callApi(
        '/teams/{teamId}/memberships/{membershipId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsUpdateMembershipStatus operation.
     * @callback module:api/TeamsApi~teamsUpdateMembershipStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Membership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Team Membership Status
     * Use this endpoint to allow a user to accept an invitation to join a team after being redirected back to your app from the invitation email recieved by the user.
     * @param {String} teamId Team unique ID.
     * @param {String} membershipId Membership ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamsUpdateMembershipStatusRequest} [teamsUpdateMembershipStatusRequest] 
     * @param {module:api/TeamsApi~teamsUpdateMembershipStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Membership}
     */
    teamsUpdateMembershipStatus(teamId, membershipId, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamsUpdateMembershipStatusRequest'];
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsUpdateMembershipStatus");
      }
      // verify the required parameter 'membershipId' is set
      if (membershipId === undefined || membershipId === null) {
        throw new Error("Missing the required parameter 'membershipId' when calling teamsUpdateMembershipStatus");
      }

      let pathParams = {
        'teamId': teamId,
        'membershipId': membershipId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Membership;
      return this.apiClient.callApi(
        '/teams/{teamId}/memberships/{membershipId}/status', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
