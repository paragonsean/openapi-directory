/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Avatars service.
* @module api/AvatarsApi
* @version 0.9.3
*/
export default class AvatarsApi {

    /**
    * Constructs a new AvatarsApi. 
    * @alias module:api/AvatarsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the avatarsGetBrowser operation.
     * @callback module:api/AvatarsApi~avatarsGetBrowserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Browser Icon
     * You can use this endpoint to show different browser icons to your users. The code argument receives the browser code as it appears in your user /account/sessions endpoint. Use width, height and quality arguments to change the output settings.
     * @param {String} code Browser Code.
     * @param {Object} opts Optional parameters
     * @param {Number} [width = 100)] Image width. Pass an integer between 0 to 2000. Defaults to 100.
     * @param {Number} [height = 100)] Image height. Pass an integer between 0 to 2000. Defaults to 100.
     * @param {Number} [quality = 100)] Image quality. Pass an integer between 0 to 100. Defaults to 100.
     * @param {module:api/AvatarsApi~avatarsGetBrowserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    avatarsGetBrowser(code, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling avatarsGetBrowser");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/avatars/browsers/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the avatarsGetCreditCard operation.
     * @callback module:api/AvatarsApi~avatarsGetCreditCardCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Credit Card Icon
     * The credit card endpoint will return you the icon of the credit card provider you need. Use width, height and quality arguments to change the output settings.
     * @param {String} code Credit Card Code. Possible values: amex, argencard, cabal, censosud, diners, discover, elo, hipercard, jcb, mastercard, naranja, targeta-shopping, union-china-pay, visa, mir, maestro.
     * @param {Object} opts Optional parameters
     * @param {Number} [width = 100)] Image width. Pass an integer between 0 to 2000. Defaults to 100.
     * @param {Number} [height = 100)] Image height. Pass an integer between 0 to 2000. Defaults to 100.
     * @param {Number} [quality = 100)] Image quality. Pass an integer between 0 to 100. Defaults to 100.
     * @param {module:api/AvatarsApi~avatarsGetCreditCardCallback} callback The callback function, accepting three arguments: error, data, response
     */
    avatarsGetCreditCard(code, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling avatarsGetCreditCard");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/avatars/credit-cards/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the avatarsGetFavicon operation.
     * @callback module:api/AvatarsApi~avatarsGetFaviconCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Favicon
     * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote website URL. 
     * @param {String} url Website URL which you want to fetch the favicon from.
     * @param {module:api/AvatarsApi~avatarsGetFaviconCallback} callback The callback function, accepting three arguments: error, data, response
     */
    avatarsGetFavicon(url, callback) {
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling avatarsGetFavicon");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/avatars/favicon', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the avatarsGetFlag operation.
     * @callback module:api/AvatarsApi~avatarsGetFlagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Country Flag
     * You can use this endpoint to show different country flags icons to your users. The code argument receives the 2 letter country code. Use width, height and quality arguments to change the output settings.
     * @param {String} code Country Code. ISO Alpha-2 country code format.
     * @param {Object} opts Optional parameters
     * @param {Number} [width = 100)] Image width. Pass an integer between 0 to 2000. Defaults to 100.
     * @param {Number} [height = 100)] Image height. Pass an integer between 0 to 2000. Defaults to 100.
     * @param {Number} [quality = 100)] Image quality. Pass an integer between 0 to 100. Defaults to 100.
     * @param {module:api/AvatarsApi~avatarsGetFlagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    avatarsGetFlag(code, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling avatarsGetFlag");
      }

      let pathParams = {
        'code': code
      };
      let queryParams = {
        'width': opts['width'],
        'height': opts['height'],
        'quality': opts['quality']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/avatars/flags/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the avatarsGetImage operation.
     * @callback module:api/AvatarsApi~avatarsGetImageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Image from URL
     * Use this endpoint to fetch a remote image URL and crop it to any image size you want. This endpoint is very useful if you need to crop and display remote images in your app or in case you want to make sure a 3rd party image is properly served using a TLS protocol.
     * @param {String} url Image URL which you want to crop.
     * @param {Object} opts Optional parameters
     * @param {Number} [width = 400)] Resize preview image width, Pass an integer between 0 to 2000.
     * @param {Number} [height = 400)] Resize preview image height, Pass an integer between 0 to 2000.
     * @param {module:api/AvatarsApi~avatarsGetImageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    avatarsGetImage(url, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling avatarsGetImage");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'width': opts['width'],
        'height': opts['height']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/avatars/image', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the avatarsGetInitials operation.
     * @callback module:api/AvatarsApi~avatarsGetInitialsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Initials
     * Use this endpoint to show your user initials avatar icon on your website or app. By default, this route will try to print your logged-in user name or email initials. You can also overwrite the user name if you pass the 'name' parameter. If no name is given and no user is logged, an empty avatar will be returned.  You can use the color and background params to change the avatar colors. By default, a random theme will be selected. The random theme will persist for the user's initials when reloading the same theme will always return for the same initials.
     * @param {Object} opts Optional parameters
     * @param {String} [name = '')] Full Name. When empty, current user name or email will be used. Max length: 128 chars.
     * @param {Number} [width = 500)] Image width. Pass an integer between 0 to 2000. Defaults to 100.
     * @param {Number} [height = 500)] Image height. Pass an integer between 0 to 2000. Defaults to 100.
     * @param {String} [color = '')] Changes text color. By default a random color will be picked and stay will persistent to the given name.
     * @param {String} [background = '')] Changes background color. By default a random color will be picked and stay will persistent to the given name.
     * @param {module:api/AvatarsApi~avatarsGetInitialsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    avatarsGetInitials(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'width': opts['width'],
        'height': opts['height'],
        'color': opts['color'],
        'background': opts['background']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/avatars/initials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the avatarsGetQR operation.
     * @callback module:api/AvatarsApi~avatarsGetQRCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get QR Code
     * Converts a given plain text to a QR code image. You can use the query parameters to change the size and style of the resulting image.
     * @param {String} text Plain text to be converted to QR code image.
     * @param {Object} opts Optional parameters
     * @param {Number} [size = 400)] QR code size. Pass an integer between 0 to 1000. Defaults to 400.
     * @param {Number} [margin = 1)] Margin from edge. Pass an integer between 0 to 10. Defaults to 1.
     * @param {Boolean} [download = false)] Return resulting image with 'Content-Disposition: attachment ' headers for the browser to start downloading it. Pass 0 for no header, or 1 for otherwise. Default value is set to 0.
     * @param {module:api/AvatarsApi~avatarsGetQRCallback} callback The callback function, accepting three arguments: error, data, response
     */
    avatarsGetQR(text, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling avatarsGetQR");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text,
        'size': opts['size'],
        'margin': opts['margin'],
        'download': opts['download']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/avatars/qr', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
