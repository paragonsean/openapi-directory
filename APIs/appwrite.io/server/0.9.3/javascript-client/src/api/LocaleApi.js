/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContinentList from '../model/ContinentList';
import CountryList from '../model/CountryList';
import CurrencyList from '../model/CurrencyList';
import LanguageList from '../model/LanguageList';
import Locale from '../model/Locale';
import PhoneList from '../model/PhoneList';

/**
* Locale service.
* @module api/LocaleApi
* @version 0.9.3
*/
export default class LocaleApi {

    /**
    * Constructs a new LocaleApi. 
    * @alias module:api/LocaleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the localeGet operation.
     * @callback module:api/LocaleApi~localeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Locale} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Locale
     * Get the current user location based on IP. Returns an object with user country code, country name, continent name, continent code, ip address and suggested currency. You can use the locale header to get the data in a supported language.  ([IP Geolocation by DB-IP](https://db-ip.com))
     * @param {module:api/LocaleApi~localeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Locale}
     */
    localeGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Locale;
      return this.apiClient.callApi(
        '/locale', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the localeGetContinents operation.
     * @callback module:api/LocaleApi~localeGetContinentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContinentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Continents
     * List of all continents. You can use the locale header to get the data in a supported language.
     * @param {module:api/LocaleApi~localeGetContinentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContinentList}
     */
    localeGetContinents(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContinentList;
      return this.apiClient.callApi(
        '/locale/continents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the localeGetCountries operation.
     * @callback module:api/LocaleApi~localeGetCountriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountryList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Countries
     * List of all countries. You can use the locale header to get the data in a supported language.
     * @param {module:api/LocaleApi~localeGetCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountryList}
     */
    localeGetCountries(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountryList;
      return this.apiClient.callApi(
        '/locale/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the localeGetCountriesEU operation.
     * @callback module:api/LocaleApi~localeGetCountriesEUCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CountryList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List EU Countries
     * List of all countries that are currently members of the EU. You can use the locale header to get the data in a supported language.
     * @param {module:api/LocaleApi~localeGetCountriesEUCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CountryList}
     */
    localeGetCountriesEU(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CountryList;
      return this.apiClient.callApi(
        '/locale/countries/eu', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the localeGetCountriesPhones operation.
     * @callback module:api/LocaleApi~localeGetCountriesPhonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PhoneList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Countries Phone Codes
     * List of all countries phone codes. You can use the locale header to get the data in a supported language.
     * @param {module:api/LocaleApi~localeGetCountriesPhonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PhoneList}
     */
    localeGetCountriesPhones(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PhoneList;
      return this.apiClient.callApi(
        '/locale/countries/phones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the localeGetCurrencies operation.
     * @callback module:api/LocaleApi~localeGetCurrenciesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CurrencyList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Currencies
     * List of all currencies, including currency symbol, name, plural, and decimal digits for all major and minor currencies. You can use the locale header to get the data in a supported language.
     * @param {module:api/LocaleApi~localeGetCurrenciesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CurrencyList}
     */
    localeGetCurrencies(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CurrencyList;
      return this.apiClient.callApi(
        '/locale/currencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the localeGetLanguages operation.
     * @callback module:api/LocaleApi~localeGetLanguagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LanguageList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Languages
     * List of all languages classified by ISO 639-1 including 2-letter code, name in English, and name in the respective language.
     * @param {module:api/LocaleApi~localeGetLanguagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LanguageList}
     */
    localeGetLanguages(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LanguageList;
      return this.apiClient.callApi(
        '/locale/languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
