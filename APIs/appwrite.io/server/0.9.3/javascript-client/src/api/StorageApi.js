/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FileList from '../model/FileList';
import StorageUpdateFileRequest from '../model/StorageUpdateFileRequest';

/**
* Storage service.
* @module api/StorageApi
* @version 0.9.3
*/
export default class StorageApi {

    /**
    * Constructs a new StorageApi. 
    * @alias module:api/StorageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the storageCreateFile operation.
     * @callback module:api/StorageApi~storageCreateFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create File
     * Create a new file. The user who creates the file will automatically be assigned to read and write access unless he has passed custom values for read and write arguments.
     * @param {String} file Binary file.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [read] An array of strings with read permissions. By default only the current user is granted with read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.
     * @param {Array.<String>} [write] An array of strings with write permissions. By default only the current user is granted with write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.
     * @param {module:api/StorageApi~storageCreateFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    storageCreateFile(file, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling storageCreateFile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file,
        'read': this.apiClient.buildCollectionParam(opts['read'], 'csv'),
        'write': this.apiClient.buildCollectionParam(opts['write'], 'csv')
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/storage/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageDeleteFile operation.
     * @callback module:api/StorageApi~storageDeleteFileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete File
     * Delete a file by its unique ID. Only users with write permissions have access to delete this resource.
     * @param {String} fileId File unique ID.
     * @param {module:api/StorageApi~storageDeleteFileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storageDeleteFile(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling storageDeleteFile");
      }

      let pathParams = {
        'fileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/storage/files/{fileId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageGetFile operation.
     * @callback module:api/StorageApi~storageGetFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get File
     * Get a file by its unique ID. This endpoint response returns a JSON object with the file metadata.
     * @param {String} fileId File unique ID.
     * @param {module:api/StorageApi~storageGetFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    storageGetFile(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling storageGetFile");
      }

      let pathParams = {
        'fileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/storage/files/{fileId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageGetFileDownload operation.
     * @callback module:api/StorageApi~storageGetFileDownloadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get File for Download
     * Get a file content by its unique ID. The endpoint response return with a 'Content-Disposition: attachment' header that tells the browser to start downloading the file to user downloads directory.
     * @param {String} fileId File unique ID.
     * @param {module:api/StorageApi~storageGetFileDownloadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storageGetFileDownload(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling storageGetFileDownload");
      }

      let pathParams = {
        'fileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/storage/files/{fileId}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageGetFilePreview operation.
     * @callback module:api/StorageApi~storageGetFilePreviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get File Preview
     * Get a file preview image. Currently, this method supports preview for image files (jpg, png, and gif), other supported formats, like pdf, docs, slides, and spreadsheets, will return the file icon image. You can also pass query string arguments for cutting and resizing your preview image.
     * @param {String} fileId File unique ID
     * @param {Object} opts Optional parameters
     * @param {Number} [width = 0)] Resize preview image width, Pass an integer between 0 to 4000.
     * @param {Number} [height = 0)] Resize preview image height, Pass an integer between 0 to 4000.
     * @param {String} [gravity = 'center')] Image crop gravity. Can be one of center,top-left,top,top-right,left,right,bottom-left,bottom,bottom-right
     * @param {Number} [quality = 100)] Preview image quality. Pass an integer between 0 to 100. Defaults to 100.
     * @param {Number} [borderWidth = 0)] Preview image border in pixels. Pass an integer between 0 to 100. Defaults to 0.
     * @param {String} [borderColor = '')] Preview image border color. Use a valid HEX color, no # is needed for prefix.
     * @param {Number} [borderRadius = 0)] Preview image border radius in pixels. Pass an integer between 0 to 4000.
     * @param {Number} [opacity = 1)] Preview image opacity. Only works with images having an alpha channel (like png). Pass a number between 0 to 1.
     * @param {Number} [rotation = 0)] Preview image rotation in degrees. Pass an integer between 0 and 360.
     * @param {String} [background = '')] Preview image background color. Only works with transparent images (png). Use a valid HEX color, no # is needed for prefix.
     * @param {String} [output = '')] Output format type (jpeg, jpg, png, gif and webp).
     * @param {module:api/StorageApi~storageGetFilePreviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storageGetFilePreview(fileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling storageGetFilePreview");
      }

      let pathParams = {
        'fileId': fileId
      };
      let queryParams = {
        'width': opts['width'],
        'height': opts['height'],
        'gravity': opts['gravity'],
        'quality': opts['quality'],
        'borderWidth': opts['borderWidth'],
        'borderColor': opts['borderColor'],
        'borderRadius': opts['borderRadius'],
        'opacity': opts['opacity'],
        'rotation': opts['rotation'],
        'background': opts['background'],
        'output': opts['output']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/storage/files/{fileId}/preview', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageGetFileView operation.
     * @callback module:api/StorageApi~storageGetFileViewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get File for View
     * Get a file content by its unique ID. This endpoint is similar to the download method but returns with no  'Content-Disposition: attachment' header.
     * @param {String} fileId File unique ID.
     * @param {module:api/StorageApi~storageGetFileViewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storageGetFileView(fileId, callback) {
      let postBody = null;
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling storageGetFileView");
      }

      let pathParams = {
        'fileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/storage/files/{fileId}/view', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageListFiles operation.
     * @callback module:api/StorageApi~storageListFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Files
     * Get a list of all the user files. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's files. [Learn more about different API modes](/docs/admin).
     * @param {Object} opts Optional parameters
     * @param {String} [search = '')] Search term to filter your list results. Max length: 256 chars.
     * @param {Number} [limit = 25)] Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request.
     * @param {Number} [offset = 0)] Results offset. The default value is 0. Use this param to manage pagination.
     * @param {String} [orderType = 'ASC')] Order result by ASC or DESC order.
     * @param {module:api/StorageApi~storageListFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileList}
     */
    storageListFiles(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'orderType': opts['orderType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileList;
      return this.apiClient.callApi(
        '/storage/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storageUpdateFile operation.
     * @callback module:api/StorageApi~storageUpdateFileCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update File
     * Update a file by its unique ID. Only users with write permissions have access to update this resource.
     * @param {String} fileId File unique ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/StorageUpdateFileRequest} [storageUpdateFileRequest] 
     * @param {module:api/StorageApi~storageUpdateFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    storageUpdateFile(fileId, opts, callback) {
      opts = opts || {};
      let postBody = opts['storageUpdateFileRequest'];
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling storageUpdateFile");
      }

      let pathParams = {
        'fileId': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/storage/files/{fileId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
