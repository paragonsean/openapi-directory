/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccountCreateRecoveryRequest from '../model/AccountCreateRecoveryRequest';
import AccountCreateVerificationRequest from '../model/AccountCreateVerificationRequest';
import AccountUpdateEmailRequest from '../model/AccountUpdateEmailRequest';
import AccountUpdateNameRequest from '../model/AccountUpdateNameRequest';
import AccountUpdatePasswordRequest from '../model/AccountUpdatePasswordRequest';
import AccountUpdatePrefsRequest from '../model/AccountUpdatePrefsRequest';
import AccountUpdateRecoveryRequest from '../model/AccountUpdateRecoveryRequest';
import AccountUpdateVerificationRequest from '../model/AccountUpdateVerificationRequest';
import LogList from '../model/LogList';
import Session from '../model/Session';
import SessionList from '../model/SessionList';
import Token from '../model/Token';
import User from '../model/User';

/**
* Account service.
* @module api/AccountApi
* @version 0.9.3
*/
export default class AccountApi {

    /**
    * Constructs a new AccountApi. 
    * @alias module:api/AccountApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accountCreateRecovery operation.
     * @callback module:api/AccountApi~accountCreateRecoveryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Token} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Password Recovery
     * Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the [PUT /account/recovery](/docs/client/account#accountUpdateRecovery) endpoint to complete the process. The verification link sent to the user's email address is valid for 1 hour.
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountCreateRecoveryRequest} [accountCreateRecoveryRequest] 
     * @param {module:api/AccountApi~accountCreateRecoveryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Token}
     */
    accountCreateRecovery(opts, callback) {
      opts = opts || {};
      let postBody = opts['accountCreateRecoveryRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/account/recovery', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountCreateVerification operation.
     * @callback module:api/AccountApi~accountCreateVerificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Token} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Email Verification
     * Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the **userId** and **secret** arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the **userId** and **secret** parameters. Learn more about how to [complete the verification process](/docs/client/account#accountUpdateVerification). The verification link sent to the user's email address is valid for 7 days.  Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md), the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface. 
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountCreateVerificationRequest} [accountCreateVerificationRequest] 
     * @param {module:api/AccountApi~accountCreateVerificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Token}
     */
    accountCreateVerification(opts, callback) {
      opts = opts || {};
      let postBody = opts['accountCreateVerificationRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/account/verification', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountDelete operation.
     * @callback module:api/AccountApi~accountDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Account
     * Delete a currently logged in user account. Behind the scene, the user record is not deleted but permanently blocked from any access. This is done to avoid deleted accounts being overtaken by new users with the same email address. Any user-related resources like documents or storage files should be deleted separately.
     * @param {module:api/AccountApi~accountDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    accountDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/account', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountDeleteSession operation.
     * @callback module:api/AccountApi~accountDeleteSessionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Account Session
     * Use this endpoint to log out the currently logged in user from all their account sessions across all of their different devices. When using the option id argument, only the session unique ID provider will be deleted.
     * @param {String} sessionId Session unique ID. Use the string 'current' to delete the current device session.
     * @param {module:api/AccountApi~accountDeleteSessionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    accountDeleteSession(sessionId, callback) {
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling accountDeleteSession");
      }

      let pathParams = {
        'sessionId': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/sessions/{sessionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountDeleteSessions operation.
     * @callback module:api/AccountApi~accountDeleteSessionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete All Account Sessions
     * Delete all sessions from the user account and remove any sessions cookies from the end client.
     * @param {module:api/AccountApi~accountDeleteSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    accountDeleteSessions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/account/sessions', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountGet operation.
     * @callback module:api/AccountApi~accountGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Account
     * Get currently logged in user data as JSON object.
     * @param {module:api/AccountApi~accountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    accountGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/account', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountGetLogs operation.
     * @callback module:api/AccountApi~accountGetLogsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Account Logs
     * Get currently logged in user list of latest security activity logs. Each log returns user IP address, location and date and time of log.
     * @param {module:api/AccountApi~accountGetLogsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogList}
     */
    accountGetLogs(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LogList;
      return this.apiClient.callApi(
        '/account/logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountGetPrefs operation.
     * @callback module:api/AccountApi~accountGetPrefsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: Object}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Account Preferences
     * Get currently logged in user preferences as a key-value object.
     * @param {module:api/AccountApi~accountGetPrefsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: Object}>}
     */
    accountGetPrefs(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': Object};
      return this.apiClient.callApi(
        '/account/prefs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountGetSession operation.
     * @callback module:api/AccountApi~accountGetSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Session} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Session By ID
     * Use this endpoint to get a logged in user's session using a Session ID. Inputting 'current' will return the current session being used.
     * @param {String} sessionId Session unique ID. Use the string 'current' to get the current device session.
     * @param {module:api/AccountApi~accountGetSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Session}
     */
    accountGetSession(sessionId, callback) {
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling accountGetSession");
      }

      let pathParams = {
        'sessionId': sessionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Session;
      return this.apiClient.callApi(
        '/account/sessions/{sessionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountGetSessions operation.
     * @callback module:api/AccountApi~accountGetSessionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SessionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Account Sessions
     * Get currently logged in user list of active sessions across different devices.
     * @param {module:api/AccountApi~accountGetSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SessionList}
     */
    accountGetSessions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SessionList;
      return this.apiClient.callApi(
        '/account/sessions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountUpdateEmail operation.
     * @callback module:api/AccountApi~accountUpdateEmailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Account Email
     * Update currently logged in user account email address. After changing user address, user confirmation status is being reset and a new confirmation mail is sent. For security measures, user password is required to complete this request. This endpoint can also be used to convert an anonymous account to a normal one, by passing an email address and a new password.
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountUpdateEmailRequest} [accountUpdateEmailRequest] 
     * @param {module:api/AccountApi~accountUpdateEmailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    accountUpdateEmail(opts, callback) {
      opts = opts || {};
      let postBody = opts['accountUpdateEmailRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/account/email', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountUpdateName operation.
     * @callback module:api/AccountApi~accountUpdateNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Account Name
     * Update currently logged in user account name.
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountUpdateNameRequest} [accountUpdateNameRequest] 
     * @param {module:api/AccountApi~accountUpdateNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    accountUpdateName(opts, callback) {
      opts = opts || {};
      let postBody = opts['accountUpdateNameRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/account/name', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountUpdatePassword operation.
     * @callback module:api/AccountApi~accountUpdatePasswordCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Account Password
     * Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth and Team Invites, oldPassword is optional.
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountUpdatePasswordRequest} [accountUpdatePasswordRequest] 
     * @param {module:api/AccountApi~accountUpdatePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    accountUpdatePassword(opts, callback) {
      opts = opts || {};
      let postBody = opts['accountUpdatePasswordRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/account/password', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountUpdatePrefs operation.
     * @callback module:api/AccountApi~accountUpdatePrefsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Account Preferences
     * Update currently logged in user account preferences. You can pass only the specific settings you wish to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountUpdatePrefsRequest} [accountUpdatePrefsRequest] 
     * @param {module:api/AccountApi~accountUpdatePrefsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    accountUpdatePrefs(opts, callback) {
      opts = opts || {};
      let postBody = opts['accountUpdatePrefsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/account/prefs', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountUpdateRecovery operation.
     * @callback module:api/AccountApi~accountUpdateRecoveryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Token} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete Password Recovery
     * Use this endpoint to complete the user account password reset. Both the **userId** and **secret** arguments will be passed as query parameters to the redirect URL you have provided when sending your request to the [POST /account/recovery](/docs/client/account#accountCreateRecovery) endpoint.  Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountUpdateRecoveryRequest} [accountUpdateRecoveryRequest] 
     * @param {module:api/AccountApi~accountUpdateRecoveryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Token}
     */
    accountUpdateRecovery(opts, callback) {
      opts = opts || {};
      let postBody = opts['accountUpdateRecoveryRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/account/recovery', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accountUpdateVerification operation.
     * @callback module:api/AccountApi~accountUpdateVerificationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Token} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete Email Verification
     * Use this endpoint to complete the user email verification process. Use both the **userId** and **secret** parameters that were attached to your app URL to verify the user email ownership. If confirmed this route will return a 200 status code.
     * @param {Object} opts Optional parameters
     * @param {module:model/AccountUpdateVerificationRequest} [accountUpdateVerificationRequest] 
     * @param {module:api/AccountApi~accountUpdateVerificationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Token}
     */
    accountUpdateVerification(opts, callback) {
      opts = opts || {};
      let postBody = opts['accountUpdateVerificationRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Token;
      return this.apiClient.callApi(
        '/account/verification', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
