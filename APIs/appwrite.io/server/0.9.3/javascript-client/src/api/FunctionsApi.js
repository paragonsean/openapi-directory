/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Execution from '../model/Execution';
import ExecutionList from '../model/ExecutionList';
import Function from '../model/Function';
import FunctionList from '../model/FunctionList';
import FunctionsCreateExecutionRequest from '../model/FunctionsCreateExecutionRequest';
import FunctionsCreateRequest from '../model/FunctionsCreateRequest';
import FunctionsUpdateRequest from '../model/FunctionsUpdateRequest';
import FunctionsUpdateTagRequest from '../model/FunctionsUpdateTagRequest';
import Tag from '../model/Tag';
import TagList from '../model/TagList';

/**
* Functions service.
* @module api/FunctionsApi
* @version 0.9.3
*/
export default class FunctionsApi {

    /**
    * Constructs a new FunctionsApi. 
    * @alias module:api/FunctionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the functionsCreate operation.
     * @callback module:api/FunctionsApi~functionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Function} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Function
     * Create a new function. You can pass a list of [permissions](/docs/permissions) to allow different project users or team with access to execute the function using the client API.
     * @param {Object} opts Optional parameters
     * @param {module:model/FunctionsCreateRequest} [functionsCreateRequest] 
     * @param {module:api/FunctionsApi~functionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Function}
     */
    functionsCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['functionsCreateRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Function;
      return this.apiClient.callApi(
        '/functions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionsCreateExecution operation.
     * @callback module:api/FunctionsApi~functionsCreateExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Execution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Execution
     * Trigger a function execution. The returned object will return you the current execution status. You can ping the `Get Execution` endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.
     * @param {String} functionId Function unique ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/FunctionsCreateExecutionRequest} [functionsCreateExecutionRequest] 
     * @param {module:api/FunctionsApi~functionsCreateExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Execution}
     */
    functionsCreateExecution(functionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['functionsCreateExecutionRequest'];
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling functionsCreateExecution");
      }

      let pathParams = {
        'functionId': functionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Execution;
      return this.apiClient.callApi(
        '/functions/{functionId}/executions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionsCreateTag operation.
     * @callback module:api/FunctionsApi~functionsCreateTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Tag
     * Create a new function code tag. Use this endpoint to upload a new version of your code function. To execute your newly uploaded code, you'll need to update the function's tag to use your new tag UID.  This endpoint accepts a tar.gz file compressed with your code. Make sure to include any dependencies your code has within the compressed file. You can learn more about code packaging in the [Appwrite Cloud Functions tutorial](/docs/functions).  Use the \"command\" param to set the entry point used to execute your code.
     * @param {String} functionId Function unique ID.
     * @param {String} code Gzip file with your code package. When used with the Appwrite CLI, pass the path to your code directory, and the CLI will automatically package your code. Use a path that is within the current directory.
     * @param {String} command Code execution command.
     * @param {module:api/FunctionsApi~functionsCreateTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    functionsCreateTag(functionId, code, command, callback) {
      let postBody = null;
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling functionsCreateTag");
      }
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling functionsCreateTag");
      }
      // verify the required parameter 'command' is set
      if (command === undefined || command === null) {
        throw new Error("Missing the required parameter 'command' when calling functionsCreateTag");
      }

      let pathParams = {
        'functionId': functionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'code': code,
        'command': command
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/functions/{functionId}/tags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionsDelete operation.
     * @callback module:api/FunctionsApi~functionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Function
     * Delete a function by its unique ID.
     * @param {String} functionId Function unique ID.
     * @param {module:api/FunctionsApi~functionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    functionsDelete(functionId, callback) {
      let postBody = null;
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling functionsDelete");
      }

      let pathParams = {
        'functionId': functionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/functions/{functionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionsDeleteTag operation.
     * @callback module:api/FunctionsApi~functionsDeleteTagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Tag
     * Delete a code tag by its unique ID.
     * @param {String} functionId Function unique ID.
     * @param {String} tagId Tag unique ID.
     * @param {module:api/FunctionsApi~functionsDeleteTagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    functionsDeleteTag(functionId, tagId, callback) {
      let postBody = null;
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling functionsDeleteTag");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling functionsDeleteTag");
      }

      let pathParams = {
        'functionId': functionId,
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/functions/{functionId}/tags/{tagId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionsGet operation.
     * @callback module:api/FunctionsApi~functionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Function} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Function
     * Get a function by its unique ID.
     * @param {String} functionId Function unique ID.
     * @param {module:api/FunctionsApi~functionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Function}
     */
    functionsGet(functionId, callback) {
      let postBody = null;
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling functionsGet");
      }

      let pathParams = {
        'functionId': functionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Function;
      return this.apiClient.callApi(
        '/functions/{functionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionsGetExecution operation.
     * @callback module:api/FunctionsApi~functionsGetExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Execution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Execution
     * Get a function execution log by its unique ID.
     * @param {String} functionId Function unique ID.
     * @param {String} executionId Execution unique ID.
     * @param {module:api/FunctionsApi~functionsGetExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Execution}
     */
    functionsGetExecution(functionId, executionId, callback) {
      let postBody = null;
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling functionsGetExecution");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling functionsGetExecution");
      }

      let pathParams = {
        'functionId': functionId,
        'executionId': executionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Execution;
      return this.apiClient.callApi(
        '/functions/{functionId}/executions/{executionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionsGetTag operation.
     * @callback module:api/FunctionsApi~functionsGetTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Tag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Tag
     * Get a code tag by its unique ID.
     * @param {String} functionId Function unique ID.
     * @param {String} tagId Tag unique ID.
     * @param {module:api/FunctionsApi~functionsGetTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Tag}
     */
    functionsGetTag(functionId, tagId, callback) {
      let postBody = null;
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling functionsGetTag");
      }
      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling functionsGetTag");
      }

      let pathParams = {
        'functionId': functionId,
        'tagId': tagId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Tag;
      return this.apiClient.callApi(
        '/functions/{functionId}/tags/{tagId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionsList operation.
     * @callback module:api/FunctionsApi~functionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FunctionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Functions
     * Get a list of all the project's functions. You can use the query params to filter your results.
     * @param {Object} opts Optional parameters
     * @param {String} [search = '')] Search term to filter your list results. Max length: 256 chars.
     * @param {Number} [limit = 25)] Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request.
     * @param {Number} [offset = 0)] Results offset. The default value is 0. Use this param to manage pagination.
     * @param {String} [orderType = 'ASC')] Order result by ASC or DESC order.
     * @param {module:api/FunctionsApi~functionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FunctionList}
     */
    functionsList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'search': opts['search'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'orderType': opts['orderType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FunctionList;
      return this.apiClient.callApi(
        '/functions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionsListExecutions operation.
     * @callback module:api/FunctionsApi~functionsListExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExecutionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Executions
     * Get a list of all the current user function execution logs. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's executions. [Learn more about different API modes](/docs/admin).
     * @param {String} functionId Function unique ID.
     * @param {Object} opts Optional parameters
     * @param {String} [search = '')] Search term to filter your list results. Max length: 256 chars.
     * @param {Number} [limit = 25)] Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request.
     * @param {Number} [offset = 0)] Results offset. The default value is 0. Use this param to manage pagination.
     * @param {String} [orderType = 'ASC')] Order result by ASC or DESC order.
     * @param {module:api/FunctionsApi~functionsListExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExecutionList}
     */
    functionsListExecutions(functionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling functionsListExecutions");
      }

      let pathParams = {
        'functionId': functionId
      };
      let queryParams = {
        'search': opts['search'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'orderType': opts['orderType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExecutionList;
      return this.apiClient.callApi(
        '/functions/{functionId}/executions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionsListTags operation.
     * @callback module:api/FunctionsApi~functionsListTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Tags
     * Get a list of all the project's code tags. You can use the query params to filter your results.
     * @param {String} functionId Function unique ID.
     * @param {Object} opts Optional parameters
     * @param {String} [search = '')] Search term to filter your list results. Max length: 256 chars.
     * @param {Number} [limit = 25)] Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request.
     * @param {Number} [offset = 0)] Results offset. The default value is 0. Use this param to manage pagination.
     * @param {String} [orderType = 'ASC')] Order result by ASC or DESC order.
     * @param {module:api/FunctionsApi~functionsListTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagList}
     */
    functionsListTags(functionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling functionsListTags");
      }

      let pathParams = {
        'functionId': functionId
      };
      let queryParams = {
        'search': opts['search'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'orderType': opts['orderType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TagList;
      return this.apiClient.callApi(
        '/functions/{functionId}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionsUpdate operation.
     * @callback module:api/FunctionsApi~functionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Function} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Function
     * Update function by its unique ID.
     * @param {String} functionId Function unique ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/FunctionsUpdateRequest} [functionsUpdateRequest] 
     * @param {module:api/FunctionsApi~functionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Function}
     */
    functionsUpdate(functionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['functionsUpdateRequest'];
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling functionsUpdate");
      }

      let pathParams = {
        'functionId': functionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Function;
      return this.apiClient.callApi(
        '/functions/{functionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionsUpdateTag operation.
     * @callback module:api/FunctionsApi~functionsUpdateTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Function} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Function Tag
     * Update the function code tag ID using the unique function ID. Use this endpoint to switch the code tag that should be executed by the execution endpoint.
     * @param {String} functionId Function unique ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/FunctionsUpdateTagRequest} [functionsUpdateTagRequest] 
     * @param {module:api/FunctionsApi~functionsUpdateTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Function}
     */
    functionsUpdateTag(functionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['functionsUpdateTagRequest'];
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling functionsUpdateTag");
      }

      let pathParams = {
        'functionId': functionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Function;
      return this.apiClient.callApi(
        '/functions/{functionId}/tag', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
