/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Language model module.
 * @module model/Language
 * @version 0.9.3
 */
class Language {
    /**
     * Constructs a new <code>Language</code>.
     * Language
     * @alias module:model/Language
     * @param code {String} Language two-character ISO 639-1 codes.
     * @param name {String} Language name.
     * @param nativeName {String} Language native name.
     */
    constructor(code, name, nativeName) { 
        
        Language.initialize(this, code, name, nativeName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, name, nativeName) { 
        obj['code'] = code;
        obj['name'] = name;
        obj['nativeName'] = nativeName;
    }

    /**
     * Constructs a <code>Language</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Language} obj Optional instance to populate.
     * @return {module:model/Language} The populated <code>Language</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Language();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nativeName')) {
                obj['nativeName'] = ApiClient.convertToType(data['nativeName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Language</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Language</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Language.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['nativeName'] && !(typeof data['nativeName'] === 'string' || data['nativeName'] instanceof String)) {
            throw new Error("Expected the field `nativeName` to be a primitive type in the JSON string but got " + data['nativeName']);
        }

        return true;
    }


}

Language.RequiredProperties = ["code", "name", "nativeName"];

/**
 * Language two-character ISO 639-1 codes.
 * @member {String} code
 */
Language.prototype['code'] = undefined;

/**
 * Language name.
 * @member {String} name
 */
Language.prototype['name'] = undefined;

/**
 * Language native name.
 * @member {String} nativeName
 */
Language.prototype['nativeName'] = undefined;






export default Language;

