/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Language from './Language';

/**
 * The LanguageList model module.
 * @module model/LanguageList
 * @version 0.9.3
 */
class LanguageList {
    /**
     * Constructs a new <code>LanguageList</code>.
     * Languages List
     * @alias module:model/LanguageList
     * @param languages {Array.<module:model/Language>} List of languages.
     * @param sum {Number} Total sum of items in the list.
     */
    constructor(languages, sum) { 
        
        LanguageList.initialize(this, languages, sum);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, languages, sum) { 
        obj['languages'] = languages;
        obj['sum'] = sum;
    }

    /**
     * Constructs a <code>LanguageList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LanguageList} obj Optional instance to populate.
     * @return {module:model/LanguageList} The populated <code>LanguageList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LanguageList();

            if (data.hasOwnProperty('languages')) {
                obj['languages'] = ApiClient.convertToType(data['languages'], [Language]);
            }
            if (data.hasOwnProperty('sum')) {
                obj['sum'] = ApiClient.convertToType(data['sum'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LanguageList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LanguageList</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LanguageList.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['languages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['languages'])) {
                throw new Error("Expected the field `languages` to be an array in the JSON data but got " + data['languages']);
            }
            // validate the optional field `languages` (array)
            for (const item of data['languages']) {
                Language.validateJSON(item);
            };
        }

        return true;
    }


}

LanguageList.RequiredProperties = ["languages", "sum"];

/**
 * List of languages.
 * @member {Array.<module:model/Language>} languages
 */
LanguageList.prototype['languages'] = undefined;

/**
 * Total sum of items in the list.
 * @member {Number} sum
 */
LanguageList.prototype['sum'] = undefined;






export default LanguageList;

