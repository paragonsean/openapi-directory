/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Membership model module.
 * @module model/Membership
 * @version 0.9.3
 */
class Membership {
    /**
     * Constructs a new <code>Membership</code>.
     * Membership
     * @alias module:model/Membership
     * @param id {String} Membership ID.
     * @param confirm {Boolean} User confirmation status, true if the user has joined the team or false otherwise.
     * @param email {String} User email address.
     * @param invited {Number} Date, the user has been invited to join the team in Unix timestamp.
     * @param joined {Number} Date, the user has accepted the invitation to join the team in Unix timestamp.
     * @param name {String} User name.
     * @param roles {Array.<String>} User list of roles
     * @param teamId {String} Team ID.
     * @param userId {String} User ID.
     */
    constructor(id, confirm, email, invited, joined, name, roles, teamId, userId) { 
        
        Membership.initialize(this, id, confirm, email, invited, joined, name, roles, teamId, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, confirm, email, invited, joined, name, roles, teamId, userId) { 
        obj['$id'] = id;
        obj['confirm'] = confirm;
        obj['email'] = email;
        obj['invited'] = invited;
        obj['joined'] = joined;
        obj['name'] = name;
        obj['roles'] = roles;
        obj['teamId'] = teamId;
        obj['userId'] = userId;
    }

    /**
     * Constructs a <code>Membership</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Membership} obj Optional instance to populate.
     * @return {module:model/Membership} The populated <code>Membership</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Membership();

            if (data.hasOwnProperty('$id')) {
                obj['$id'] = ApiClient.convertToType(data['$id'], 'String');
            }
            if (data.hasOwnProperty('confirm')) {
                obj['confirm'] = ApiClient.convertToType(data['confirm'], 'Boolean');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('invited')) {
                obj['invited'] = ApiClient.convertToType(data['invited'], 'Number');
            }
            if (data.hasOwnProperty('joined')) {
                obj['joined'] = ApiClient.convertToType(data['joined'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], ['String']);
            }
            if (data.hasOwnProperty('teamId')) {
                obj['teamId'] = ApiClient.convertToType(data['teamId'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Membership</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Membership</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Membership.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['$id'] && !(typeof data['$id'] === 'string' || data['$id'] instanceof String)) {
            throw new Error("Expected the field `$id` to be a primitive type in the JSON string but got " + data['$id']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['roles'])) {
            throw new Error("Expected the field `roles` to be an array in the JSON data but got " + data['roles']);
        }
        // ensure the json data is a string
        if (data['teamId'] && !(typeof data['teamId'] === 'string' || data['teamId'] instanceof String)) {
            throw new Error("Expected the field `teamId` to be a primitive type in the JSON string but got " + data['teamId']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}

Membership.RequiredProperties = ["$id", "confirm", "email", "invited", "joined", "name", "roles", "teamId", "userId"];

/**
 * Membership ID.
 * @member {String} $id
 */
Membership.prototype['$id'] = undefined;

/**
 * User confirmation status, true if the user has joined the team or false otherwise.
 * @member {Boolean} confirm
 */
Membership.prototype['confirm'] = undefined;

/**
 * User email address.
 * @member {String} email
 */
Membership.prototype['email'] = undefined;

/**
 * Date, the user has been invited to join the team in Unix timestamp.
 * @member {Number} invited
 */
Membership.prototype['invited'] = undefined;

/**
 * Date, the user has accepted the invitation to join the team in Unix timestamp.
 * @member {Number} joined
 */
Membership.prototype['joined'] = undefined;

/**
 * User name.
 * @member {String} name
 */
Membership.prototype['name'] = undefined;

/**
 * User list of roles
 * @member {Array.<String>} roles
 */
Membership.prototype['roles'] = undefined;

/**
 * Team ID.
 * @member {String} teamId
 */
Membership.prototype['teamId'] = undefined;

/**
 * User ID.
 * @member {String} userId
 */
Membership.prototype['userId'] = undefined;






export default Membership;

