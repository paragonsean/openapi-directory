/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Collection from './Collection';

/**
 * The CollectionList model module.
 * @module model/CollectionList
 * @version 0.9.3
 */
class CollectionList {
    /**
     * Constructs a new <code>CollectionList</code>.
     * Collections List
     * @alias module:model/CollectionList
     * @param collections {Array.<module:model/Collection>} List of collections.
     * @param sum {Number} Total sum of items in the list.
     */
    constructor(collections, sum) { 
        
        CollectionList.initialize(this, collections, sum);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, collections, sum) { 
        obj['collections'] = collections;
        obj['sum'] = sum;
    }

    /**
     * Constructs a <code>CollectionList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CollectionList} obj Optional instance to populate.
     * @return {module:model/CollectionList} The populated <code>CollectionList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CollectionList();

            if (data.hasOwnProperty('collections')) {
                obj['collections'] = ApiClient.convertToType(data['collections'], [Collection]);
            }
            if (data.hasOwnProperty('sum')) {
                obj['sum'] = ApiClient.convertToType(data['sum'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CollectionList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CollectionList</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CollectionList.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['collections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['collections'])) {
                throw new Error("Expected the field `collections` to be an array in the JSON data but got " + data['collections']);
            }
            // validate the optional field `collections` (array)
            for (const item of data['collections']) {
                Collection.validateJSON(item);
            };
        }

        return true;
    }


}

CollectionList.RequiredProperties = ["collections", "sum"];

/**
 * List of collections.
 * @member {Array.<module:model/Collection>} collections
 */
CollectionList.prototype['collections'] = undefined;

/**
 * Total sum of items in the list.
 * @member {Number} sum
 */
CollectionList.prototype['sum'] = undefined;






export default CollectionList;

