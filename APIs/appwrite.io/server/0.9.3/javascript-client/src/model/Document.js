/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Permissions from './Permissions';

/**
 * The Document model module.
 * @module model/Document
 * @version 0.9.3
 */
class Document {
    /**
     * Constructs a new <code>Document</code>.
     * Document
     * @alias module:model/Document
     * @extends Object
     * @param collection {String} Collection ID.
     * @param id {String} Document ID.
     * @param permissions {Array.<module:model/Permissions>} Document permissions.
     */
    constructor(collection, id, permissions) { 
        
        Document.initialize(this, collection, id, permissions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, collection, id, permissions) { 
        obj['$collection'] = collection;
        obj['$id'] = id;
        obj['$permissions'] = permissions;
    }

    /**
     * Constructs a <code>Document</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Document} obj Optional instance to populate.
     * @return {module:model/Document} The populated <code>Document</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Document();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('$collection')) {
                obj['$collection'] = ApiClient.convertToType(data['$collection'], 'String');
            }
            if (data.hasOwnProperty('$id')) {
                obj['$id'] = ApiClient.convertToType(data['$id'], 'String');
            }
            if (data.hasOwnProperty('$permissions')) {
                obj['$permissions'] = ApiClient.convertToType(data['$permissions'], [Permissions]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Document</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Document</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Document.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['$collection'] && !(typeof data['$collection'] === 'string' || data['$collection'] instanceof String)) {
            throw new Error("Expected the field `$collection` to be a primitive type in the JSON string but got " + data['$collection']);
        }
        // ensure the json data is a string
        if (data['$id'] && !(typeof data['$id'] === 'string' || data['$id'] instanceof String)) {
            throw new Error("Expected the field `$id` to be a primitive type in the JSON string but got " + data['$id']);
        }
        if (data['$permissions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['$permissions'])) {
                throw new Error("Expected the field `$permissions` to be an array in the JSON data but got " + data['$permissions']);
            }
            // validate the optional field `$permissions` (array)
            for (const item of data['$permissions']) {
                Permissions.validateJSON(item);
            };
        }

        return true;
    }


}

Document.RequiredProperties = ["$collection", "$id", "$permissions"];

/**
 * Collection ID.
 * @member {String} $collection
 */
Document.prototype['$collection'] = undefined;

/**
 * Document ID.
 * @member {String} $id
 */
Document.prototype['$id'] = undefined;

/**
 * Document permissions.
 * @member {Array.<module:model/Permissions>} $permissions
 */
Document.prototype['$permissions'] = undefined;






export default Document;

