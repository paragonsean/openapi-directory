/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Log model module.
 * @module model/Log
 * @version 0.9.3
 */
class Log {
    /**
     * Constructs a new <code>Log</code>.
     * Log
     * @alias module:model/Log
     * @param clientCode {String} Client code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/clients.json).
     * @param clientEngine {String} Client engine name.
     * @param clientEngineVersion {String} Client engine name.
     * @param clientName {String} Client name.
     * @param clientType {String} Client type.
     * @param clientVersion {String} Client version.
     * @param countryCode {String} Country two-character ISO 3166-1 alpha code.
     * @param countryName {String} Country name.
     * @param deviceBrand {String} Device brand name.
     * @param deviceModel {String} Device model name.
     * @param deviceName {String} Device name.
     * @param event {String} Event name.
     * @param ip {String} IP session in use when the session was created.
     * @param osCode {String} Operating system code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/os.json).
     * @param osName {String} Operating system name.
     * @param osVersion {String} Operating system version.
     * @param time {Number} Log creation time in Unix timestamp.
     */
    constructor(clientCode, clientEngine, clientEngineVersion, clientName, clientType, clientVersion, countryCode, countryName, deviceBrand, deviceModel, deviceName, event, ip, osCode, osName, osVersion, time) { 
        
        Log.initialize(this, clientCode, clientEngine, clientEngineVersion, clientName, clientType, clientVersion, countryCode, countryName, deviceBrand, deviceModel, deviceName, event, ip, osCode, osName, osVersion, time);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clientCode, clientEngine, clientEngineVersion, clientName, clientType, clientVersion, countryCode, countryName, deviceBrand, deviceModel, deviceName, event, ip, osCode, osName, osVersion, time) { 
        obj['clientCode'] = clientCode;
        obj['clientEngine'] = clientEngine;
        obj['clientEngineVersion'] = clientEngineVersion;
        obj['clientName'] = clientName;
        obj['clientType'] = clientType;
        obj['clientVersion'] = clientVersion;
        obj['countryCode'] = countryCode;
        obj['countryName'] = countryName;
        obj['deviceBrand'] = deviceBrand;
        obj['deviceModel'] = deviceModel;
        obj['deviceName'] = deviceName;
        obj['event'] = event;
        obj['ip'] = ip;
        obj['osCode'] = osCode;
        obj['osName'] = osName;
        obj['osVersion'] = osVersion;
        obj['time'] = time;
    }

    /**
     * Constructs a <code>Log</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Log} obj Optional instance to populate.
     * @return {module:model/Log} The populated <code>Log</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Log();

            if (data.hasOwnProperty('clientCode')) {
                obj['clientCode'] = ApiClient.convertToType(data['clientCode'], 'String');
            }
            if (data.hasOwnProperty('clientEngine')) {
                obj['clientEngine'] = ApiClient.convertToType(data['clientEngine'], 'String');
            }
            if (data.hasOwnProperty('clientEngineVersion')) {
                obj['clientEngineVersion'] = ApiClient.convertToType(data['clientEngineVersion'], 'String');
            }
            if (data.hasOwnProperty('clientName')) {
                obj['clientName'] = ApiClient.convertToType(data['clientName'], 'String');
            }
            if (data.hasOwnProperty('clientType')) {
                obj['clientType'] = ApiClient.convertToType(data['clientType'], 'String');
            }
            if (data.hasOwnProperty('clientVersion')) {
                obj['clientVersion'] = ApiClient.convertToType(data['clientVersion'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('countryName')) {
                obj['countryName'] = ApiClient.convertToType(data['countryName'], 'String');
            }
            if (data.hasOwnProperty('deviceBrand')) {
                obj['deviceBrand'] = ApiClient.convertToType(data['deviceBrand'], 'String');
            }
            if (data.hasOwnProperty('deviceModel')) {
                obj['deviceModel'] = ApiClient.convertToType(data['deviceModel'], 'String');
            }
            if (data.hasOwnProperty('deviceName')) {
                obj['deviceName'] = ApiClient.convertToType(data['deviceName'], 'String');
            }
            if (data.hasOwnProperty('event')) {
                obj['event'] = ApiClient.convertToType(data['event'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('osCode')) {
                obj['osCode'] = ApiClient.convertToType(data['osCode'], 'String');
            }
            if (data.hasOwnProperty('osName')) {
                obj['osName'] = ApiClient.convertToType(data['osName'], 'String');
            }
            if (data.hasOwnProperty('osVersion')) {
                obj['osVersion'] = ApiClient.convertToType(data['osVersion'], 'String');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Log</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Log</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Log.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['clientCode'] && !(typeof data['clientCode'] === 'string' || data['clientCode'] instanceof String)) {
            throw new Error("Expected the field `clientCode` to be a primitive type in the JSON string but got " + data['clientCode']);
        }
        // ensure the json data is a string
        if (data['clientEngine'] && !(typeof data['clientEngine'] === 'string' || data['clientEngine'] instanceof String)) {
            throw new Error("Expected the field `clientEngine` to be a primitive type in the JSON string but got " + data['clientEngine']);
        }
        // ensure the json data is a string
        if (data['clientEngineVersion'] && !(typeof data['clientEngineVersion'] === 'string' || data['clientEngineVersion'] instanceof String)) {
            throw new Error("Expected the field `clientEngineVersion` to be a primitive type in the JSON string but got " + data['clientEngineVersion']);
        }
        // ensure the json data is a string
        if (data['clientName'] && !(typeof data['clientName'] === 'string' || data['clientName'] instanceof String)) {
            throw new Error("Expected the field `clientName` to be a primitive type in the JSON string but got " + data['clientName']);
        }
        // ensure the json data is a string
        if (data['clientType'] && !(typeof data['clientType'] === 'string' || data['clientType'] instanceof String)) {
            throw new Error("Expected the field `clientType` to be a primitive type in the JSON string but got " + data['clientType']);
        }
        // ensure the json data is a string
        if (data['clientVersion'] && !(typeof data['clientVersion'] === 'string' || data['clientVersion'] instanceof String)) {
            throw new Error("Expected the field `clientVersion` to be a primitive type in the JSON string but got " + data['clientVersion']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['countryName'] && !(typeof data['countryName'] === 'string' || data['countryName'] instanceof String)) {
            throw new Error("Expected the field `countryName` to be a primitive type in the JSON string but got " + data['countryName']);
        }
        // ensure the json data is a string
        if (data['deviceBrand'] && !(typeof data['deviceBrand'] === 'string' || data['deviceBrand'] instanceof String)) {
            throw new Error("Expected the field `deviceBrand` to be a primitive type in the JSON string but got " + data['deviceBrand']);
        }
        // ensure the json data is a string
        if (data['deviceModel'] && !(typeof data['deviceModel'] === 'string' || data['deviceModel'] instanceof String)) {
            throw new Error("Expected the field `deviceModel` to be a primitive type in the JSON string but got " + data['deviceModel']);
        }
        // ensure the json data is a string
        if (data['deviceName'] && !(typeof data['deviceName'] === 'string' || data['deviceName'] instanceof String)) {
            throw new Error("Expected the field `deviceName` to be a primitive type in the JSON string but got " + data['deviceName']);
        }
        // ensure the json data is a string
        if (data['event'] && !(typeof data['event'] === 'string' || data['event'] instanceof String)) {
            throw new Error("Expected the field `event` to be a primitive type in the JSON string but got " + data['event']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['osCode'] && !(typeof data['osCode'] === 'string' || data['osCode'] instanceof String)) {
            throw new Error("Expected the field `osCode` to be a primitive type in the JSON string but got " + data['osCode']);
        }
        // ensure the json data is a string
        if (data['osName'] && !(typeof data['osName'] === 'string' || data['osName'] instanceof String)) {
            throw new Error("Expected the field `osName` to be a primitive type in the JSON string but got " + data['osName']);
        }
        // ensure the json data is a string
        if (data['osVersion'] && !(typeof data['osVersion'] === 'string' || data['osVersion'] instanceof String)) {
            throw new Error("Expected the field `osVersion` to be a primitive type in the JSON string but got " + data['osVersion']);
        }

        return true;
    }


}

Log.RequiredProperties = ["clientCode", "clientEngine", "clientEngineVersion", "clientName", "clientType", "clientVersion", "countryCode", "countryName", "deviceBrand", "deviceModel", "deviceName", "event", "ip", "osCode", "osName", "osVersion", "time"];

/**
 * Client code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/clients.json).
 * @member {String} clientCode
 */
Log.prototype['clientCode'] = undefined;

/**
 * Client engine name.
 * @member {String} clientEngine
 */
Log.prototype['clientEngine'] = undefined;

/**
 * Client engine name.
 * @member {String} clientEngineVersion
 */
Log.prototype['clientEngineVersion'] = undefined;

/**
 * Client name.
 * @member {String} clientName
 */
Log.prototype['clientName'] = undefined;

/**
 * Client type.
 * @member {String} clientType
 */
Log.prototype['clientType'] = undefined;

/**
 * Client version.
 * @member {String} clientVersion
 */
Log.prototype['clientVersion'] = undefined;

/**
 * Country two-character ISO 3166-1 alpha code.
 * @member {String} countryCode
 */
Log.prototype['countryCode'] = undefined;

/**
 * Country name.
 * @member {String} countryName
 */
Log.prototype['countryName'] = undefined;

/**
 * Device brand name.
 * @member {String} deviceBrand
 */
Log.prototype['deviceBrand'] = undefined;

/**
 * Device model name.
 * @member {String} deviceModel
 */
Log.prototype['deviceModel'] = undefined;

/**
 * Device name.
 * @member {String} deviceName
 */
Log.prototype['deviceName'] = undefined;

/**
 * Event name.
 * @member {String} event
 */
Log.prototype['event'] = undefined;

/**
 * IP session in use when the session was created.
 * @member {String} ip
 */
Log.prototype['ip'] = undefined;

/**
 * Operating system code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/os.json).
 * @member {String} osCode
 */
Log.prototype['osCode'] = undefined;

/**
 * Operating system name.
 * @member {String} osName
 */
Log.prototype['osName'] = undefined;

/**
 * Operating system version.
 * @member {String} osVersion
 */
Log.prototype['osVersion'] = undefined;

/**
 * Log creation time in Unix timestamp.
 * @member {Number} time
 */
Log.prototype['time'] = undefined;






export default Log;

