/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Permissions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Function
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:20.162465-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Function {
  public static final String SERIALIZED_NAME_$_ID = "$id";
  @SerializedName(SERIALIZED_NAME_$_ID)
  private String $id;

  public static final String SERIALIZED_NAME_$_PERMISSIONS = "$permissions";
  @SerializedName(SERIALIZED_NAME_$_PERMISSIONS)
  private List<Permissions> $permissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_CREATED = "dateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private Integer dateCreated;

  public static final String SERIALIZED_NAME_DATE_UPDATED = "dateUpdated";
  @SerializedName(SERIALIZED_NAME_DATE_UPDATED)
  private Integer dateUpdated;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<String> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RUNTIME = "runtime";
  @SerializedName(SERIALIZED_NAME_RUNTIME)
  private String runtime;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private String schedule;

  public static final String SERIALIZED_NAME_SCHEDULE_NEXT = "scheduleNext";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_NEXT)
  private Integer scheduleNext;

  public static final String SERIALIZED_NAME_SCHEDULE_PREVIOUS = "schedulePrevious";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_PREVIOUS)
  private Integer schedulePrevious;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Integer timeout;

  public static final String SERIALIZED_NAME_VARS = "vars";
  @SerializedName(SERIALIZED_NAME_VARS)
  private String vars;

  public Function() {
  }

  public Function $id(String $id) {
    this.$id = $id;
    return this;
  }

  /**
   * Function ID.
   * @return $id
   */
  @javax.annotation.Nonnull
  public String get$Id() {
    return $id;
  }

  public void set$Id(String $id) {
    this.$id = $id;
  }


  public Function $permissions(List<Permissions> $permissions) {
    this.$permissions = $permissions;
    return this;
  }

  public Function add$PermissionsItem(Permissions $permissionsItem) {
    if (this.$permissions == null) {
      this.$permissions = new ArrayList<>();
    }
    this.$permissions.add($permissionsItem);
    return this;
  }

  /**
   * Function permissions.
   * @return $permissions
   */
  @javax.annotation.Nonnull
  public List<Permissions> get$Permissions() {
    return $permissions;
  }

  public void set$Permissions(List<Permissions> $permissions) {
    this.$permissions = $permissions;
  }


  public Function dateCreated(Integer dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

  /**
   * Function creation date in Unix timestamp.
   * @return dateCreated
   */
  @javax.annotation.Nonnull
  public Integer getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(Integer dateCreated) {
    this.dateCreated = dateCreated;
  }


  public Function dateUpdated(Integer dateUpdated) {
    this.dateUpdated = dateUpdated;
    return this;
  }

  /**
   * Function update date in Unix timestamp.
   * @return dateUpdated
   */
  @javax.annotation.Nonnull
  public Integer getDateUpdated() {
    return dateUpdated;
  }

  public void setDateUpdated(Integer dateUpdated) {
    this.dateUpdated = dateUpdated;
  }


  public Function events(List<String> events) {
    this.events = events;
    return this;
  }

  public Function addEventsItem(String eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

  /**
   * Function trigger events.
   * @return events
   */
  @javax.annotation.Nonnull
  public List<String> getEvents() {
    return events;
  }

  public void setEvents(List<String> events) {
    this.events = events;
  }


  public Function name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Function name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Function runtime(String runtime) {
    this.runtime = runtime;
    return this;
  }

  /**
   * Function execution runtime.
   * @return runtime
   */
  @javax.annotation.Nonnull
  public String getRuntime() {
    return runtime;
  }

  public void setRuntime(String runtime) {
    this.runtime = runtime;
  }


  public Function schedule(String schedule) {
    this.schedule = schedule;
    return this;
  }

  /**
   * Function execution schedult in CRON format.
   * @return schedule
   */
  @javax.annotation.Nonnull
  public String getSchedule() {
    return schedule;
  }

  public void setSchedule(String schedule) {
    this.schedule = schedule;
  }


  public Function scheduleNext(Integer scheduleNext) {
    this.scheduleNext = scheduleNext;
    return this;
  }

  /**
   * Function next scheduled execution date in Unix timestamp.
   * @return scheduleNext
   */
  @javax.annotation.Nonnull
  public Integer getScheduleNext() {
    return scheduleNext;
  }

  public void setScheduleNext(Integer scheduleNext) {
    this.scheduleNext = scheduleNext;
  }


  public Function schedulePrevious(Integer schedulePrevious) {
    this.schedulePrevious = schedulePrevious;
    return this;
  }

  /**
   * Function next scheduled execution date in Unix timestamp.
   * @return schedulePrevious
   */
  @javax.annotation.Nonnull
  public Integer getSchedulePrevious() {
    return schedulePrevious;
  }

  public void setSchedulePrevious(Integer schedulePrevious) {
    this.schedulePrevious = schedulePrevious;
  }


  public Function status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Function status. Possible values: disabled, enabled
   * @return status
   */
  @javax.annotation.Nonnull
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Function tag(String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * Function active tag ID.
   * @return tag
   */
  @javax.annotation.Nonnull
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  public Function timeout(Integer timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Function execution timeout in seconds.
   * @return timeout
   */
  @javax.annotation.Nonnull
  public Integer getTimeout() {
    return timeout;
  }

  public void setTimeout(Integer timeout) {
    this.timeout = timeout;
  }


  public Function vars(String vars) {
    this.vars = vars;
    return this;
  }

  /**
   * Function environment variables.
   * @return vars
   */
  @javax.annotation.Nonnull
  public String getVars() {
    return vars;
  }

  public void setVars(String vars) {
    this.vars = vars;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Function function = (Function) o;
    return Objects.equals(this.$id, function.$id) &&
        Objects.equals(this.$permissions, function.$permissions) &&
        Objects.equals(this.dateCreated, function.dateCreated) &&
        Objects.equals(this.dateUpdated, function.dateUpdated) &&
        Objects.equals(this.events, function.events) &&
        Objects.equals(this.name, function.name) &&
        Objects.equals(this.runtime, function.runtime) &&
        Objects.equals(this.schedule, function.schedule) &&
        Objects.equals(this.scheduleNext, function.scheduleNext) &&
        Objects.equals(this.schedulePrevious, function.schedulePrevious) &&
        Objects.equals(this.status, function.status) &&
        Objects.equals(this.tag, function.tag) &&
        Objects.equals(this.timeout, function.timeout) &&
        Objects.equals(this.vars, function.vars);
  }

  @Override
  public int hashCode() {
    return Objects.hash($id, $permissions, dateCreated, dateUpdated, events, name, runtime, schedule, scheduleNext, schedulePrevious, status, tag, timeout, vars);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Function {\n");
    sb.append("    $id: ").append(toIndentedString($id)).append("\n");
    sb.append("    $permissions: ").append(toIndentedString($permissions)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateUpdated: ").append(toIndentedString(dateUpdated)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    runtime: ").append(toIndentedString(runtime)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    scheduleNext: ").append(toIndentedString(scheduleNext)).append("\n");
    sb.append("    schedulePrevious: ").append(toIndentedString(schedulePrevious)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    vars: ").append(toIndentedString(vars)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("$id");
    openapiFields.add("$permissions");
    openapiFields.add("dateCreated");
    openapiFields.add("dateUpdated");
    openapiFields.add("events");
    openapiFields.add("name");
    openapiFields.add("runtime");
    openapiFields.add("schedule");
    openapiFields.add("scheduleNext");
    openapiFields.add("schedulePrevious");
    openapiFields.add("status");
    openapiFields.add("tag");
    openapiFields.add("timeout");
    openapiFields.add("vars");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("$id");
    openapiRequiredFields.add("$permissions");
    openapiRequiredFields.add("dateCreated");
    openapiRequiredFields.add("dateUpdated");
    openapiRequiredFields.add("events");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("runtime");
    openapiRequiredFields.add("schedule");
    openapiRequiredFields.add("scheduleNext");
    openapiRequiredFields.add("schedulePrevious");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("tag");
    openapiRequiredFields.add("timeout");
    openapiRequiredFields.add("vars");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Function
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Function.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Function is not found in the empty JSON string", Function.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Function.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Function` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Function.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("$id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("$permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `$permissions` to be an array in the JSON string but got `%s`", jsonObj.get("$permissions").toString()));
      }

      JsonArray jsonArray$permissions = jsonObj.getAsJsonArray("$permissions");
      // validate the required field `$permissions` (array)
      for (int i = 0; i < jsonArray$permissions.size(); i++) {
        Permissions.validateJsonElement(jsonArray$permissions.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("events") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("events").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("runtime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runtime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runtime").toString()));
      }
      if (!jsonObj.get("schedule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if (!jsonObj.get("vars").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vars` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vars").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Function.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Function' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Function> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Function.class));

       return (TypeAdapter<T>) new TypeAdapter<Function>() {
           @Override
           public void write(JsonWriter out, Function value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Function read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Function given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Function
   * @throws IOException if the JSON string is invalid with respect to Function
   */
  public static Function fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Function.class);
  }

  /**
   * Convert an instance of Function to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

