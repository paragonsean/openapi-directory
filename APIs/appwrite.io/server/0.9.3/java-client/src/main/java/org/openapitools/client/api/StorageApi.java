/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.FileList;
import org.openapitools.client.model.StorageUpdateFileRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StorageApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StorageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StorageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for storageCreateFile
     * @param _file Binary file. (required)
     * @param read An array of strings with read permissions. By default only the current user is granted with read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions. (optional)
     * @param write An array of strings with write permissions. By default only the current user is granted with write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageCreateFileCall(String _file, List<String> read, List<String> write, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        if (read != null) {
            localVarFormParams.put("read", read);
        }

        if (write != null) {
            localVarFormParams.put("write", write);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT", "Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageCreateFileValidateBeforeCall(String _file, List<String> read, List<String> write, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling storageCreateFile(Async)");
        }

        return storageCreateFileCall(_file, read, write, _callback);

    }

    /**
     * Create File
     * Create a new file. The user who creates the file will automatically be assigned to read and write access unless he has passed custom values for read and write arguments.
     * @param _file Binary file. (required)
     * @param read An array of strings with read permissions. By default only the current user is granted with read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions. (optional)
     * @param write An array of strings with write permissions. By default only the current user is granted with write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public File storageCreateFile(String _file, List<String> read, List<String> write) throws ApiException {
        ApiResponse<File> localVarResp = storageCreateFileWithHttpInfo(_file, read, write);
        return localVarResp.getData();
    }

    /**
     * Create File
     * Create a new file. The user who creates the file will automatically be assigned to read and write access unless he has passed custom values for read and write arguments.
     * @param _file Binary file. (required)
     * @param read An array of strings with read permissions. By default only the current user is granted with read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions. (optional)
     * @param write An array of strings with write permissions. By default only the current user is granted with write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> storageCreateFileWithHttpInfo(String _file, List<String> read, List<String> write) throws ApiException {
        okhttp3.Call localVarCall = storageCreateFileValidateBeforeCall(_file, read, write, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create File (asynchronously)
     * Create a new file. The user who creates the file will automatically be assigned to read and write access unless he has passed custom values for read and write arguments.
     * @param _file Binary file. (required)
     * @param read An array of strings with read permissions. By default only the current user is granted with read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions. (optional)
     * @param write An array of strings with write permissions. By default only the current user is granted with write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageCreateFileAsync(String _file, List<String> read, List<String> write, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageCreateFileValidateBeforeCall(_file, read, write, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageDeleteFile
     * @param fileId File unique ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageDeleteFileCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/files/{fileId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT", "Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageDeleteFileValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling storageDeleteFile(Async)");
        }

        return storageDeleteFileCall(fileId, _callback);

    }

    /**
     * Delete File
     * Delete a file by its unique ID. Only users with write permissions have access to delete this resource.
     * @param fileId File unique ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public void storageDeleteFile(String fileId) throws ApiException {
        storageDeleteFileWithHttpInfo(fileId);
    }

    /**
     * Delete File
     * Delete a file by its unique ID. Only users with write permissions have access to delete this resource.
     * @param fileId File unique ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> storageDeleteFileWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = storageDeleteFileValidateBeforeCall(fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete File (asynchronously)
     * Delete a file by its unique ID. Only users with write permissions have access to delete this resource.
     * @param fileId File unique ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageDeleteFileAsync(String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageDeleteFileValidateBeforeCall(fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageGetFile
     * @param fileId File unique ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageGetFileCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/files/{fileId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT", "Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageGetFileValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling storageGetFile(Async)");
        }

        return storageGetFileCall(fileId, _callback);

    }

    /**
     * Get File
     * Get a file by its unique ID. This endpoint response returns a JSON object with the file metadata.
     * @param fileId File unique ID. (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public File storageGetFile(String fileId) throws ApiException {
        ApiResponse<File> localVarResp = storageGetFileWithHttpInfo(fileId);
        return localVarResp.getData();
    }

    /**
     * Get File
     * Get a file by its unique ID. This endpoint response returns a JSON object with the file metadata.
     * @param fileId File unique ID. (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> storageGetFileWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = storageGetFileValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get File (asynchronously)
     * Get a file by its unique ID. This endpoint response returns a JSON object with the file metadata.
     * @param fileId File unique ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageGetFileAsync(String fileId, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageGetFileValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageGetFileDownload
     * @param fileId File unique ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageGetFileDownloadCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/files/{fileId}/download"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT", "Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageGetFileDownloadValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling storageGetFileDownload(Async)");
        }

        return storageGetFileDownloadCall(fileId, _callback);

    }

    /**
     * Get File for Download
     * Get a file content by its unique ID. The endpoint response return with a &#39;Content-Disposition: attachment&#39; header that tells the browser to start downloading the file to user downloads directory.
     * @param fileId File unique ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public void storageGetFileDownload(String fileId) throws ApiException {
        storageGetFileDownloadWithHttpInfo(fileId);
    }

    /**
     * Get File for Download
     * Get a file content by its unique ID. The endpoint response return with a &#39;Content-Disposition: attachment&#39; header that tells the browser to start downloading the file to user downloads directory.
     * @param fileId File unique ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> storageGetFileDownloadWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = storageGetFileDownloadValidateBeforeCall(fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get File for Download (asynchronously)
     * Get a file content by its unique ID. The endpoint response return with a &#39;Content-Disposition: attachment&#39; header that tells the browser to start downloading the file to user downloads directory.
     * @param fileId File unique ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageGetFileDownloadAsync(String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageGetFileDownloadValidateBeforeCall(fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageGetFilePreview
     * @param fileId File unique ID (required)
     * @param width Resize preview image width, Pass an integer between 0 to 4000. (optional, default to 0)
     * @param height Resize preview image height, Pass an integer between 0 to 4000. (optional, default to 0)
     * @param gravity Image crop gravity. Can be one of center,top-left,top,top-right,left,right,bottom-left,bottom,bottom-right (optional, default to center)
     * @param quality Preview image quality. Pass an integer between 0 to 100. Defaults to 100. (optional, default to 100)
     * @param borderWidth Preview image border in pixels. Pass an integer between 0 to 100. Defaults to 0. (optional, default to 0)
     * @param borderColor Preview image border color. Use a valid HEX color, no # is needed for prefix. (optional, default to )
     * @param borderRadius Preview image border radius in pixels. Pass an integer between 0 to 4000. (optional, default to 0)
     * @param opacity Preview image opacity. Only works with images having an alpha channel (like png). Pass a number between 0 to 1. (optional, default to 1)
     * @param rotation Preview image rotation in degrees. Pass an integer between 0 and 360. (optional, default to 0)
     * @param background Preview image background color. Only works with transparent images (png). Use a valid HEX color, no # is needed for prefix. (optional, default to )
     * @param output Output format type (jpeg, jpg, png, gif and webp). (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageGetFilePreviewCall(String fileId, Integer width, Integer height, String gravity, Integer quality, Integer borderWidth, String borderColor, Integer borderRadius, Float opacity, Integer rotation, String background, String output, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/files/{fileId}/preview"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (gravity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("gravity", gravity));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        if (borderWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("borderWidth", borderWidth));
        }

        if (borderColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("borderColor", borderColor));
        }

        if (borderRadius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("borderRadius", borderRadius));
        }

        if (opacity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("opacity", opacity));
        }

        if (rotation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rotation", rotation));
        }

        if (background != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("background", background));
        }

        if (output != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("output", output));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT", "Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageGetFilePreviewValidateBeforeCall(String fileId, Integer width, Integer height, String gravity, Integer quality, Integer borderWidth, String borderColor, Integer borderRadius, Float opacity, Integer rotation, String background, String output, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling storageGetFilePreview(Async)");
        }

        return storageGetFilePreviewCall(fileId, width, height, gravity, quality, borderWidth, borderColor, borderRadius, opacity, rotation, background, output, _callback);

    }

    /**
     * Get File Preview
     * Get a file preview image. Currently, this method supports preview for image files (jpg, png, and gif), other supported formats, like pdf, docs, slides, and spreadsheets, will return the file icon image. You can also pass query string arguments for cutting and resizing your preview image.
     * @param fileId File unique ID (required)
     * @param width Resize preview image width, Pass an integer between 0 to 4000. (optional, default to 0)
     * @param height Resize preview image height, Pass an integer between 0 to 4000. (optional, default to 0)
     * @param gravity Image crop gravity. Can be one of center,top-left,top,top-right,left,right,bottom-left,bottom,bottom-right (optional, default to center)
     * @param quality Preview image quality. Pass an integer between 0 to 100. Defaults to 100. (optional, default to 100)
     * @param borderWidth Preview image border in pixels. Pass an integer between 0 to 100. Defaults to 0. (optional, default to 0)
     * @param borderColor Preview image border color. Use a valid HEX color, no # is needed for prefix. (optional, default to )
     * @param borderRadius Preview image border radius in pixels. Pass an integer between 0 to 4000. (optional, default to 0)
     * @param opacity Preview image opacity. Only works with images having an alpha channel (like png). Pass a number between 0 to 1. (optional, default to 1)
     * @param rotation Preview image rotation in degrees. Pass an integer between 0 and 360. (optional, default to 0)
     * @param background Preview image background color. Only works with transparent images (png). Use a valid HEX color, no # is needed for prefix. (optional, default to )
     * @param output Output format type (jpeg, jpg, png, gif and webp). (optional, default to )
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public void storageGetFilePreview(String fileId, Integer width, Integer height, String gravity, Integer quality, Integer borderWidth, String borderColor, Integer borderRadius, Float opacity, Integer rotation, String background, String output) throws ApiException {
        storageGetFilePreviewWithHttpInfo(fileId, width, height, gravity, quality, borderWidth, borderColor, borderRadius, opacity, rotation, background, output);
    }

    /**
     * Get File Preview
     * Get a file preview image. Currently, this method supports preview for image files (jpg, png, and gif), other supported formats, like pdf, docs, slides, and spreadsheets, will return the file icon image. You can also pass query string arguments for cutting and resizing your preview image.
     * @param fileId File unique ID (required)
     * @param width Resize preview image width, Pass an integer between 0 to 4000. (optional, default to 0)
     * @param height Resize preview image height, Pass an integer between 0 to 4000. (optional, default to 0)
     * @param gravity Image crop gravity. Can be one of center,top-left,top,top-right,left,right,bottom-left,bottom,bottom-right (optional, default to center)
     * @param quality Preview image quality. Pass an integer between 0 to 100. Defaults to 100. (optional, default to 100)
     * @param borderWidth Preview image border in pixels. Pass an integer between 0 to 100. Defaults to 0. (optional, default to 0)
     * @param borderColor Preview image border color. Use a valid HEX color, no # is needed for prefix. (optional, default to )
     * @param borderRadius Preview image border radius in pixels. Pass an integer between 0 to 4000. (optional, default to 0)
     * @param opacity Preview image opacity. Only works with images having an alpha channel (like png). Pass a number between 0 to 1. (optional, default to 1)
     * @param rotation Preview image rotation in degrees. Pass an integer between 0 and 360. (optional, default to 0)
     * @param background Preview image background color. Only works with transparent images (png). Use a valid HEX color, no # is needed for prefix. (optional, default to )
     * @param output Output format type (jpeg, jpg, png, gif and webp). (optional, default to )
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> storageGetFilePreviewWithHttpInfo(String fileId, Integer width, Integer height, String gravity, Integer quality, Integer borderWidth, String borderColor, Integer borderRadius, Float opacity, Integer rotation, String background, String output) throws ApiException {
        okhttp3.Call localVarCall = storageGetFilePreviewValidateBeforeCall(fileId, width, height, gravity, quality, borderWidth, borderColor, borderRadius, opacity, rotation, background, output, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get File Preview (asynchronously)
     * Get a file preview image. Currently, this method supports preview for image files (jpg, png, and gif), other supported formats, like pdf, docs, slides, and spreadsheets, will return the file icon image. You can also pass query string arguments for cutting and resizing your preview image.
     * @param fileId File unique ID (required)
     * @param width Resize preview image width, Pass an integer between 0 to 4000. (optional, default to 0)
     * @param height Resize preview image height, Pass an integer between 0 to 4000. (optional, default to 0)
     * @param gravity Image crop gravity. Can be one of center,top-left,top,top-right,left,right,bottom-left,bottom,bottom-right (optional, default to center)
     * @param quality Preview image quality. Pass an integer between 0 to 100. Defaults to 100. (optional, default to 100)
     * @param borderWidth Preview image border in pixels. Pass an integer between 0 to 100. Defaults to 0. (optional, default to 0)
     * @param borderColor Preview image border color. Use a valid HEX color, no # is needed for prefix. (optional, default to )
     * @param borderRadius Preview image border radius in pixels. Pass an integer between 0 to 4000. (optional, default to 0)
     * @param opacity Preview image opacity. Only works with images having an alpha channel (like png). Pass a number between 0 to 1. (optional, default to 1)
     * @param rotation Preview image rotation in degrees. Pass an integer between 0 and 360. (optional, default to 0)
     * @param background Preview image background color. Only works with transparent images (png). Use a valid HEX color, no # is needed for prefix. (optional, default to )
     * @param output Output format type (jpeg, jpg, png, gif and webp). (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageGetFilePreviewAsync(String fileId, Integer width, Integer height, String gravity, Integer quality, Integer borderWidth, String borderColor, Integer borderRadius, Float opacity, Integer rotation, String background, String output, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageGetFilePreviewValidateBeforeCall(fileId, width, height, gravity, quality, borderWidth, borderColor, borderRadius, opacity, rotation, background, output, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageGetFileView
     * @param fileId File unique ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageGetFileViewCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/files/{fileId}/view"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT", "Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageGetFileViewValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling storageGetFileView(Async)");
        }

        return storageGetFileViewCall(fileId, _callback);

    }

    /**
     * Get File for View
     * Get a file content by its unique ID. This endpoint is similar to the download method but returns with no  &#39;Content-Disposition: attachment&#39; header.
     * @param fileId File unique ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public void storageGetFileView(String fileId) throws ApiException {
        storageGetFileViewWithHttpInfo(fileId);
    }

    /**
     * Get File for View
     * Get a file content by its unique ID. This endpoint is similar to the download method but returns with no  &#39;Content-Disposition: attachment&#39; header.
     * @param fileId File unique ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> storageGetFileViewWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = storageGetFileViewValidateBeforeCall(fileId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get File for View (asynchronously)
     * Get a file content by its unique ID. This endpoint is similar to the download method but returns with no  &#39;Content-Disposition: attachment&#39; header.
     * @param fileId File unique ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageGetFileViewAsync(String fileId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageGetFileViewValidateBeforeCall(fileId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageListFiles
     * @param search Search term to filter your list results. Max length: 256 chars. (optional, default to )
     * @param limit Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request. (optional, default to 25)
     * @param offset Results offset. The default value is 0. Use this param to manage pagination. (optional, default to 0)
     * @param orderType Order result by ASC or DESC order. (optional, default to ASC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Files List </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageListFilesCall(String search, Integer limit, Integer offset, String orderType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storage/files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (orderType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderType", orderType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT", "Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageListFilesValidateBeforeCall(String search, Integer limit, Integer offset, String orderType, final ApiCallback _callback) throws ApiException {
        return storageListFilesCall(search, limit, offset, orderType, _callback);

    }

    /**
     * List Files
     * Get a list of all the user files. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project&#39;s files. [Learn more about different API modes](/docs/admin).
     * @param search Search term to filter your list results. Max length: 256 chars. (optional, default to )
     * @param limit Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request. (optional, default to 25)
     * @param offset Results offset. The default value is 0. Use this param to manage pagination. (optional, default to 0)
     * @param orderType Order result by ASC or DESC order. (optional, default to ASC)
     * @return FileList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Files List </td><td>  -  </td></tr>
     </table>
     */
    public FileList storageListFiles(String search, Integer limit, Integer offset, String orderType) throws ApiException {
        ApiResponse<FileList> localVarResp = storageListFilesWithHttpInfo(search, limit, offset, orderType);
        return localVarResp.getData();
    }

    /**
     * List Files
     * Get a list of all the user files. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project&#39;s files. [Learn more about different API modes](/docs/admin).
     * @param search Search term to filter your list results. Max length: 256 chars. (optional, default to )
     * @param limit Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request. (optional, default to 25)
     * @param offset Results offset. The default value is 0. Use this param to manage pagination. (optional, default to 0)
     * @param orderType Order result by ASC or DESC order. (optional, default to ASC)
     * @return ApiResponse&lt;FileList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Files List </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileList> storageListFilesWithHttpInfo(String search, Integer limit, Integer offset, String orderType) throws ApiException {
        okhttp3.Call localVarCall = storageListFilesValidateBeforeCall(search, limit, offset, orderType, null);
        Type localVarReturnType = new TypeToken<FileList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Files (asynchronously)
     * Get a list of all the user files. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project&#39;s files. [Learn more about different API modes](/docs/admin).
     * @param search Search term to filter your list results. Max length: 256 chars. (optional, default to )
     * @param limit Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request. (optional, default to 25)
     * @param offset Results offset. The default value is 0. Use this param to manage pagination. (optional, default to 0)
     * @param orderType Order result by ASC or DESC order. (optional, default to ASC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Files List </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageListFilesAsync(String search, Integer limit, Integer offset, String orderType, final ApiCallback<FileList> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageListFilesValidateBeforeCall(search, limit, offset, orderType, _callback);
        Type localVarReturnType = new TypeToken<FileList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storageUpdateFile
     * @param fileId File unique ID. (required)
     * @param storageUpdateFileRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageUpdateFileCall(String fileId, StorageUpdateFileRequest storageUpdateFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storageUpdateFileRequest;

        // create path and map variables
        String localVarPath = "/storage/files/{fileId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT", "Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storageUpdateFileValidateBeforeCall(String fileId, StorageUpdateFileRequest storageUpdateFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling storageUpdateFile(Async)");
        }

        return storageUpdateFileCall(fileId, storageUpdateFileRequest, _callback);

    }

    /**
     * Update File
     * Update a file by its unique ID. Only users with write permissions have access to update this resource.
     * @param fileId File unique ID. (required)
     * @param storageUpdateFileRequest  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public File storageUpdateFile(String fileId, StorageUpdateFileRequest storageUpdateFileRequest) throws ApiException {
        ApiResponse<File> localVarResp = storageUpdateFileWithHttpInfo(fileId, storageUpdateFileRequest);
        return localVarResp.getData();
    }

    /**
     * Update File
     * Update a file by its unique ID. Only users with write permissions have access to update this resource.
     * @param fileId File unique ID. (required)
     * @param storageUpdateFileRequest  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> storageUpdateFileWithHttpInfo(String fileId, StorageUpdateFileRequest storageUpdateFileRequest) throws ApiException {
        okhttp3.Call localVarCall = storageUpdateFileValidateBeforeCall(fileId, storageUpdateFileRequest, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update File (asynchronously)
     * Update a file by its unique ID. Only users with write permissions have access to update this resource.
     * @param fileId File unique ID. (required)
     * @param storageUpdateFileRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> File </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storageUpdateFileAsync(String fileId, StorageUpdateFileRequest storageUpdateFileRequest, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = storageUpdateFileValidateBeforeCall(fileId, storageUpdateFileRequest, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
