/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AvatarsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AvatarsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AvatarsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for avatarsGetBrowser
     * @param code Browser Code. (required)
     * @param width Image width. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param height Image height. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param quality Image quality. Pass an integer between 0 to 100. Defaults to 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call avatarsGetBrowserCall(String code, Integer width, Integer height, Integer quality, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/browsers/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT", "Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call avatarsGetBrowserValidateBeforeCall(String code, Integer width, Integer height, Integer quality, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling avatarsGetBrowser(Async)");
        }

        return avatarsGetBrowserCall(code, width, height, quality, _callback);

    }

    /**
     * Get Browser Icon
     * You can use this endpoint to show different browser icons to your users. The code argument receives the browser code as it appears in your user /account/sessions endpoint. Use width, height and quality arguments to change the output settings.
     * @param code Browser Code. (required)
     * @param width Image width. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param height Image height. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param quality Image quality. Pass an integer between 0 to 100. Defaults to 100. (optional, default to 100)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public void avatarsGetBrowser(String code, Integer width, Integer height, Integer quality) throws ApiException {
        avatarsGetBrowserWithHttpInfo(code, width, height, quality);
    }

    /**
     * Get Browser Icon
     * You can use this endpoint to show different browser icons to your users. The code argument receives the browser code as it appears in your user /account/sessions endpoint. Use width, height and quality arguments to change the output settings.
     * @param code Browser Code. (required)
     * @param width Image width. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param height Image height. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param quality Image quality. Pass an integer between 0 to 100. Defaults to 100. (optional, default to 100)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> avatarsGetBrowserWithHttpInfo(String code, Integer width, Integer height, Integer quality) throws ApiException {
        okhttp3.Call localVarCall = avatarsGetBrowserValidateBeforeCall(code, width, height, quality, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Browser Icon (asynchronously)
     * You can use this endpoint to show different browser icons to your users. The code argument receives the browser code as it appears in your user /account/sessions endpoint. Use width, height and quality arguments to change the output settings.
     * @param code Browser Code. (required)
     * @param width Image width. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param height Image height. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param quality Image quality. Pass an integer between 0 to 100. Defaults to 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call avatarsGetBrowserAsync(String code, Integer width, Integer height, Integer quality, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = avatarsGetBrowserValidateBeforeCall(code, width, height, quality, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for avatarsGetCreditCard
     * @param code Credit Card Code. Possible values: amex, argencard, cabal, censosud, diners, discover, elo, hipercard, jcb, mastercard, naranja, targeta-shopping, union-china-pay, visa, mir, maestro. (required)
     * @param width Image width. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param height Image height. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param quality Image quality. Pass an integer between 0 to 100. Defaults to 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call avatarsGetCreditCardCall(String code, Integer width, Integer height, Integer quality, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/credit-cards/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT", "Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call avatarsGetCreditCardValidateBeforeCall(String code, Integer width, Integer height, Integer quality, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling avatarsGetCreditCard(Async)");
        }

        return avatarsGetCreditCardCall(code, width, height, quality, _callback);

    }

    /**
     * Get Credit Card Icon
     * The credit card endpoint will return you the icon of the credit card provider you need. Use width, height and quality arguments to change the output settings.
     * @param code Credit Card Code. Possible values: amex, argencard, cabal, censosud, diners, discover, elo, hipercard, jcb, mastercard, naranja, targeta-shopping, union-china-pay, visa, mir, maestro. (required)
     * @param width Image width. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param height Image height. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param quality Image quality. Pass an integer between 0 to 100. Defaults to 100. (optional, default to 100)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public void avatarsGetCreditCard(String code, Integer width, Integer height, Integer quality) throws ApiException {
        avatarsGetCreditCardWithHttpInfo(code, width, height, quality);
    }

    /**
     * Get Credit Card Icon
     * The credit card endpoint will return you the icon of the credit card provider you need. Use width, height and quality arguments to change the output settings.
     * @param code Credit Card Code. Possible values: amex, argencard, cabal, censosud, diners, discover, elo, hipercard, jcb, mastercard, naranja, targeta-shopping, union-china-pay, visa, mir, maestro. (required)
     * @param width Image width. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param height Image height. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param quality Image quality. Pass an integer between 0 to 100. Defaults to 100. (optional, default to 100)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> avatarsGetCreditCardWithHttpInfo(String code, Integer width, Integer height, Integer quality) throws ApiException {
        okhttp3.Call localVarCall = avatarsGetCreditCardValidateBeforeCall(code, width, height, quality, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Credit Card Icon (asynchronously)
     * The credit card endpoint will return you the icon of the credit card provider you need. Use width, height and quality arguments to change the output settings.
     * @param code Credit Card Code. Possible values: amex, argencard, cabal, censosud, diners, discover, elo, hipercard, jcb, mastercard, naranja, targeta-shopping, union-china-pay, visa, mir, maestro. (required)
     * @param width Image width. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param height Image height. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param quality Image quality. Pass an integer between 0 to 100. Defaults to 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call avatarsGetCreditCardAsync(String code, Integer width, Integer height, Integer quality, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = avatarsGetCreditCardValidateBeforeCall(code, width, height, quality, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for avatarsGetFavicon
     * @param url Website URL which you want to fetch the favicon from. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call avatarsGetFaviconCall(String url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/favicon";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT", "Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call avatarsGetFaviconValidateBeforeCall(String url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling avatarsGetFavicon(Async)");
        }

        return avatarsGetFaviconCall(url, _callback);

    }

    /**
     * Get Favicon
     * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote website URL. 
     * @param url Website URL which you want to fetch the favicon from. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public void avatarsGetFavicon(String url) throws ApiException {
        avatarsGetFaviconWithHttpInfo(url);
    }

    /**
     * Get Favicon
     * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote website URL. 
     * @param url Website URL which you want to fetch the favicon from. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> avatarsGetFaviconWithHttpInfo(String url) throws ApiException {
        okhttp3.Call localVarCall = avatarsGetFaviconValidateBeforeCall(url, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Favicon (asynchronously)
     * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote website URL. 
     * @param url Website URL which you want to fetch the favicon from. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call avatarsGetFaviconAsync(String url, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = avatarsGetFaviconValidateBeforeCall(url, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for avatarsGetFlag
     * @param code Country Code. ISO Alpha-2 country code format. (required)
     * @param width Image width. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param height Image height. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param quality Image quality. Pass an integer between 0 to 100. Defaults to 100. (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call avatarsGetFlagCall(String code, Integer width, Integer height, Integer quality, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/flags/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (quality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quality", quality));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT", "Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call avatarsGetFlagValidateBeforeCall(String code, Integer width, Integer height, Integer quality, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling avatarsGetFlag(Async)");
        }

        return avatarsGetFlagCall(code, width, height, quality, _callback);

    }

    /**
     * Get Country Flag
     * You can use this endpoint to show different country flags icons to your users. The code argument receives the 2 letter country code. Use width, height and quality arguments to change the output settings.
     * @param code Country Code. ISO Alpha-2 country code format. (required)
     * @param width Image width. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param height Image height. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param quality Image quality. Pass an integer between 0 to 100. Defaults to 100. (optional, default to 100)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public void avatarsGetFlag(String code, Integer width, Integer height, Integer quality) throws ApiException {
        avatarsGetFlagWithHttpInfo(code, width, height, quality);
    }

    /**
     * Get Country Flag
     * You can use this endpoint to show different country flags icons to your users. The code argument receives the 2 letter country code. Use width, height and quality arguments to change the output settings.
     * @param code Country Code. ISO Alpha-2 country code format. (required)
     * @param width Image width. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param height Image height. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param quality Image quality. Pass an integer between 0 to 100. Defaults to 100. (optional, default to 100)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> avatarsGetFlagWithHttpInfo(String code, Integer width, Integer height, Integer quality) throws ApiException {
        okhttp3.Call localVarCall = avatarsGetFlagValidateBeforeCall(code, width, height, quality, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Country Flag (asynchronously)
     * You can use this endpoint to show different country flags icons to your users. The code argument receives the 2 letter country code. Use width, height and quality arguments to change the output settings.
     * @param code Country Code. ISO Alpha-2 country code format. (required)
     * @param width Image width. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param height Image height. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 100)
     * @param quality Image quality. Pass an integer between 0 to 100. Defaults to 100. (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call avatarsGetFlagAsync(String code, Integer width, Integer height, Integer quality, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = avatarsGetFlagValidateBeforeCall(code, width, height, quality, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for avatarsGetImage
     * @param url Image URL which you want to crop. (required)
     * @param width Resize preview image width, Pass an integer between 0 to 2000. (optional, default to 400)
     * @param height Resize preview image height, Pass an integer between 0 to 2000. (optional, default to 400)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call avatarsGetImageCall(String url, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/image";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT", "Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call avatarsGetImageValidateBeforeCall(String url, Integer width, Integer height, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling avatarsGetImage(Async)");
        }

        return avatarsGetImageCall(url, width, height, _callback);

    }

    /**
     * Get Image from URL
     * Use this endpoint to fetch a remote image URL and crop it to any image size you want. This endpoint is very useful if you need to crop and display remote images in your app or in case you want to make sure a 3rd party image is properly served using a TLS protocol.
     * @param url Image URL which you want to crop. (required)
     * @param width Resize preview image width, Pass an integer between 0 to 2000. (optional, default to 400)
     * @param height Resize preview image height, Pass an integer between 0 to 2000. (optional, default to 400)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public void avatarsGetImage(String url, Integer width, Integer height) throws ApiException {
        avatarsGetImageWithHttpInfo(url, width, height);
    }

    /**
     * Get Image from URL
     * Use this endpoint to fetch a remote image URL and crop it to any image size you want. This endpoint is very useful if you need to crop and display remote images in your app or in case you want to make sure a 3rd party image is properly served using a TLS protocol.
     * @param url Image URL which you want to crop. (required)
     * @param width Resize preview image width, Pass an integer between 0 to 2000. (optional, default to 400)
     * @param height Resize preview image height, Pass an integer between 0 to 2000. (optional, default to 400)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> avatarsGetImageWithHttpInfo(String url, Integer width, Integer height) throws ApiException {
        okhttp3.Call localVarCall = avatarsGetImageValidateBeforeCall(url, width, height, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Image from URL (asynchronously)
     * Use this endpoint to fetch a remote image URL and crop it to any image size you want. This endpoint is very useful if you need to crop and display remote images in your app or in case you want to make sure a 3rd party image is properly served using a TLS protocol.
     * @param url Image URL which you want to crop. (required)
     * @param width Resize preview image width, Pass an integer between 0 to 2000. (optional, default to 400)
     * @param height Resize preview image height, Pass an integer between 0 to 2000. (optional, default to 400)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call avatarsGetImageAsync(String url, Integer width, Integer height, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = avatarsGetImageValidateBeforeCall(url, width, height, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for avatarsGetInitials
     * @param name Full Name. When empty, current user name or email will be used. Max length: 128 chars. (optional, default to )
     * @param width Image width. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 500)
     * @param height Image height. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 500)
     * @param color Changes text color. By default a random color will be picked and stay will persistent to the given name. (optional, default to )
     * @param background Changes background color. By default a random color will be picked and stay will persistent to the given name. (optional, default to )
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call avatarsGetInitialsCall(String name, Integer width, Integer height, String color, String background, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/initials";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (background != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("background", background));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT", "Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call avatarsGetInitialsValidateBeforeCall(String name, Integer width, Integer height, String color, String background, final ApiCallback _callback) throws ApiException {
        return avatarsGetInitialsCall(name, width, height, color, background, _callback);

    }

    /**
     * Get User Initials
     * Use this endpoint to show your user initials avatar icon on your website or app. By default, this route will try to print your logged-in user name or email initials. You can also overwrite the user name if you pass the &#39;name&#39; parameter. If no name is given and no user is logged, an empty avatar will be returned.  You can use the color and background params to change the avatar colors. By default, a random theme will be selected. The random theme will persist for the user&#39;s initials when reloading the same theme will always return for the same initials.
     * @param name Full Name. When empty, current user name or email will be used. Max length: 128 chars. (optional, default to )
     * @param width Image width. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 500)
     * @param height Image height. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 500)
     * @param color Changes text color. By default a random color will be picked and stay will persistent to the given name. (optional, default to )
     * @param background Changes background color. By default a random color will be picked and stay will persistent to the given name. (optional, default to )
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public void avatarsGetInitials(String name, Integer width, Integer height, String color, String background) throws ApiException {
        avatarsGetInitialsWithHttpInfo(name, width, height, color, background);
    }

    /**
     * Get User Initials
     * Use this endpoint to show your user initials avatar icon on your website or app. By default, this route will try to print your logged-in user name or email initials. You can also overwrite the user name if you pass the &#39;name&#39; parameter. If no name is given and no user is logged, an empty avatar will be returned.  You can use the color and background params to change the avatar colors. By default, a random theme will be selected. The random theme will persist for the user&#39;s initials when reloading the same theme will always return for the same initials.
     * @param name Full Name. When empty, current user name or email will be used. Max length: 128 chars. (optional, default to )
     * @param width Image width. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 500)
     * @param height Image height. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 500)
     * @param color Changes text color. By default a random color will be picked and stay will persistent to the given name. (optional, default to )
     * @param background Changes background color. By default a random color will be picked and stay will persistent to the given name. (optional, default to )
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> avatarsGetInitialsWithHttpInfo(String name, Integer width, Integer height, String color, String background) throws ApiException {
        okhttp3.Call localVarCall = avatarsGetInitialsValidateBeforeCall(name, width, height, color, background, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get User Initials (asynchronously)
     * Use this endpoint to show your user initials avatar icon on your website or app. By default, this route will try to print your logged-in user name or email initials. You can also overwrite the user name if you pass the &#39;name&#39; parameter. If no name is given and no user is logged, an empty avatar will be returned.  You can use the color and background params to change the avatar colors. By default, a random theme will be selected. The random theme will persist for the user&#39;s initials when reloading the same theme will always return for the same initials.
     * @param name Full Name. When empty, current user name or email will be used. Max length: 128 chars. (optional, default to )
     * @param width Image width. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 500)
     * @param height Image height. Pass an integer between 0 to 2000. Defaults to 100. (optional, default to 500)
     * @param color Changes text color. By default a random color will be picked and stay will persistent to the given name. (optional, default to )
     * @param background Changes background color. By default a random color will be picked and stay will persistent to the given name. (optional, default to )
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call avatarsGetInitialsAsync(String name, Integer width, Integer height, String color, String background, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = avatarsGetInitialsValidateBeforeCall(name, width, height, color, background, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for avatarsGetQR
     * @param text Plain text to be converted to QR code image. (required)
     * @param size QR code size. Pass an integer between 0 to 1000. Defaults to 400. (optional, default to 400)
     * @param margin Margin from edge. Pass an integer between 0 to 10. Defaults to 1. (optional, default to 1)
     * @param download Return resulting image with &#39;Content-Disposition: attachment &#39; headers for the browser to start downloading it. Pass 0 for no header, or 1 for otherwise. Default value is set to 0. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call avatarsGetQRCall(String text, Integer size, Integer margin, Boolean download, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/qr";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (margin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("margin", margin));
        }

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT", "Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call avatarsGetQRValidateBeforeCall(String text, Integer size, Integer margin, Boolean download, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'text' is set
        if (text == null) {
            throw new ApiException("Missing the required parameter 'text' when calling avatarsGetQR(Async)");
        }

        return avatarsGetQRCall(text, size, margin, download, _callback);

    }

    /**
     * Get QR Code
     * Converts a given plain text to a QR code image. You can use the query parameters to change the size and style of the resulting image.
     * @param text Plain text to be converted to QR code image. (required)
     * @param size QR code size. Pass an integer between 0 to 1000. Defaults to 400. (optional, default to 400)
     * @param margin Margin from edge. Pass an integer between 0 to 10. Defaults to 1. (optional, default to 1)
     * @param download Return resulting image with &#39;Content-Disposition: attachment &#39; headers for the browser to start downloading it. Pass 0 for no header, or 1 for otherwise. Default value is set to 0. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public void avatarsGetQR(String text, Integer size, Integer margin, Boolean download) throws ApiException {
        avatarsGetQRWithHttpInfo(text, size, margin, download);
    }

    /**
     * Get QR Code
     * Converts a given plain text to a QR code image. You can use the query parameters to change the size and style of the resulting image.
     * @param text Plain text to be converted to QR code image. (required)
     * @param size QR code size. Pass an integer between 0 to 1000. Defaults to 400. (optional, default to 400)
     * @param margin Margin from edge. Pass an integer between 0 to 10. Defaults to 1. (optional, default to 1)
     * @param download Return resulting image with &#39;Content-Disposition: attachment &#39; headers for the browser to start downloading it. Pass 0 for no header, or 1 for otherwise. Default value is set to 0. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> avatarsGetQRWithHttpInfo(String text, Integer size, Integer margin, Boolean download) throws ApiException {
        okhttp3.Call localVarCall = avatarsGetQRValidateBeforeCall(text, size, margin, download, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get QR Code (asynchronously)
     * Converts a given plain text to a QR code image. You can use the query parameters to change the size and style of the resulting image.
     * @param text Plain text to be converted to QR code image. (required)
     * @param size QR code size. Pass an integer between 0 to 1000. Defaults to 400. (optional, default to 400)
     * @param margin Margin from edge. Pass an integer between 0 to 10. Defaults to 1. (optional, default to 1)
     * @param download Return resulting image with &#39;Content-Disposition: attachment &#39; headers for the browser to start downloading it. Pass 0 for no header, or 1 for otherwise. Default value is set to 0. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Image </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call avatarsGetQRAsync(String text, Integer size, Integer margin, Boolean download, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = avatarsGetQRValidateBeforeCall(text, size, margin, download, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
