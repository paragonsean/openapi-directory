/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DatabaseCreateDocumentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:20.162465-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DatabaseCreateDocumentRequest {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_PARENT_DOCUMENT = "parentDocument";
  @SerializedName(SERIALIZED_NAME_PARENT_DOCUMENT)
  private String parentDocument;

  public static final String SERIALIZED_NAME_PARENT_PROPERTY = "parentProperty";
  @SerializedName(SERIALIZED_NAME_PARENT_PROPERTY)
  private String parentProperty;

  public static final String SERIALIZED_NAME_PARENT_PROPERTY_TYPE = "parentPropertyType";
  @SerializedName(SERIALIZED_NAME_PARENT_PROPERTY_TYPE)
  private String parentPropertyType;

  public static final String SERIALIZED_NAME_READ = "read";
  @SerializedName(SERIALIZED_NAME_READ)
  private List<String> read = new ArrayList<>();

  public static final String SERIALIZED_NAME_WRITE = "write";
  @SerializedName(SERIALIZED_NAME_WRITE)
  private List<String> write = new ArrayList<>();

  public DatabaseCreateDocumentRequest() {
  }

  public DatabaseCreateDocumentRequest data(Object data) {
    this.data = data;
    return this;
  }

  /**
   * Document data as JSON object.
   * @return data
   */
  @javax.annotation.Nonnull
  public Object getData() {
    return data;
  }

  public void setData(Object data) {
    this.data = data;
  }


  public DatabaseCreateDocumentRequest parentDocument(String parentDocument) {
    this.parentDocument = parentDocument;
    return this;
  }

  /**
   * Parent document unique ID. Use when you want your new document to be a child of a parent document.
   * @return parentDocument
   */
  @javax.annotation.Nullable
  public String getParentDocument() {
    return parentDocument;
  }

  public void setParentDocument(String parentDocument) {
    this.parentDocument = parentDocument;
  }


  public DatabaseCreateDocumentRequest parentProperty(String parentProperty) {
    this.parentProperty = parentProperty;
    return this;
  }

  /**
   * Parent document property name. Use when you want your new document to be a child of a parent document.
   * @return parentProperty
   */
  @javax.annotation.Nullable
  public String getParentProperty() {
    return parentProperty;
  }

  public void setParentProperty(String parentProperty) {
    this.parentProperty = parentProperty;
  }


  public DatabaseCreateDocumentRequest parentPropertyType(String parentPropertyType) {
    this.parentPropertyType = parentPropertyType;
    return this;
  }

  /**
   * Parent document property connection type. You can set this value to **assign**, **append** or **prepend**, default value is assign. Use when you want your new document to be a child of a parent document.
   * @return parentPropertyType
   */
  @javax.annotation.Nullable
  public String getParentPropertyType() {
    return parentPropertyType;
  }

  public void setParentPropertyType(String parentPropertyType) {
    this.parentPropertyType = parentPropertyType;
  }


  public DatabaseCreateDocumentRequest read(List<String> read) {
    this.read = read;
    return this;
  }

  public DatabaseCreateDocumentRequest addReadItem(String readItem) {
    if (this.read == null) {
      this.read = new ArrayList<>();
    }
    this.read.add(readItem);
    return this;
  }

  /**
   * An array of strings with read permissions. By default only the current user is granted with read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.
   * @return read
   */
  @javax.annotation.Nullable
  public List<String> getRead() {
    return read;
  }

  public void setRead(List<String> read) {
    this.read = read;
  }


  public DatabaseCreateDocumentRequest write(List<String> write) {
    this.write = write;
    return this;
  }

  public DatabaseCreateDocumentRequest addWriteItem(String writeItem) {
    if (this.write == null) {
      this.write = new ArrayList<>();
    }
    this.write.add(writeItem);
    return this;
  }

  /**
   * An array of strings with write permissions. By default only the current user is granted with write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.
   * @return write
   */
  @javax.annotation.Nullable
  public List<String> getWrite() {
    return write;
  }

  public void setWrite(List<String> write) {
    this.write = write;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatabaseCreateDocumentRequest databaseCreateDocumentRequest = (DatabaseCreateDocumentRequest) o;
    return Objects.equals(this.data, databaseCreateDocumentRequest.data) &&
        Objects.equals(this.parentDocument, databaseCreateDocumentRequest.parentDocument) &&
        Objects.equals(this.parentProperty, databaseCreateDocumentRequest.parentProperty) &&
        Objects.equals(this.parentPropertyType, databaseCreateDocumentRequest.parentPropertyType) &&
        Objects.equals(this.read, databaseCreateDocumentRequest.read) &&
        Objects.equals(this.write, databaseCreateDocumentRequest.write);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, parentDocument, parentProperty, parentPropertyType, read, write);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatabaseCreateDocumentRequest {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    parentDocument: ").append(toIndentedString(parentDocument)).append("\n");
    sb.append("    parentProperty: ").append(toIndentedString(parentProperty)).append("\n");
    sb.append("    parentPropertyType: ").append(toIndentedString(parentPropertyType)).append("\n");
    sb.append("    read: ").append(toIndentedString(read)).append("\n");
    sb.append("    write: ").append(toIndentedString(write)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("parentDocument");
    openapiFields.add("parentProperty");
    openapiFields.add("parentPropertyType");
    openapiFields.add("read");
    openapiFields.add("write");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("data");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DatabaseCreateDocumentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatabaseCreateDocumentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatabaseCreateDocumentRequest is not found in the empty JSON string", DatabaseCreateDocumentRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatabaseCreateDocumentRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatabaseCreateDocumentRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DatabaseCreateDocumentRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("parentDocument") != null && !jsonObj.get("parentDocument").isJsonNull()) && !jsonObj.get("parentDocument").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentDocument` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentDocument").toString()));
      }
      if ((jsonObj.get("parentProperty") != null && !jsonObj.get("parentProperty").isJsonNull()) && !jsonObj.get("parentProperty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentProperty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentProperty").toString()));
      }
      if ((jsonObj.get("parentPropertyType") != null && !jsonObj.get("parentPropertyType").isJsonNull()) && !jsonObj.get("parentPropertyType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentPropertyType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentPropertyType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("read") != null && !jsonObj.get("read").isJsonNull() && !jsonObj.get("read").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `read` to be an array in the JSON string but got `%s`", jsonObj.get("read").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("write") != null && !jsonObj.get("write").isJsonNull() && !jsonObj.get("write").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `write` to be an array in the JSON string but got `%s`", jsonObj.get("write").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatabaseCreateDocumentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatabaseCreateDocumentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatabaseCreateDocumentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatabaseCreateDocumentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DatabaseCreateDocumentRequest>() {
           @Override
           public void write(JsonWriter out, DatabaseCreateDocumentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatabaseCreateDocumentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DatabaseCreateDocumentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DatabaseCreateDocumentRequest
   * @throws IOException if the JSON string is invalid with respect to DatabaseCreateDocumentRequest
   */
  public static DatabaseCreateDocumentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatabaseCreateDocumentRequest.class);
  }

  /**
   * Convert an instance of DatabaseCreateDocumentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

