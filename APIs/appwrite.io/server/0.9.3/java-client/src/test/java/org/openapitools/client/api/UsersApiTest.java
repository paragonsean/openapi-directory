/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountUpdatePrefsRequest;
import org.openapitools.client.model.LogList;
import org.openapitools.client.model.SessionList;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UserList;
import org.openapitools.client.model.UsersCreateRequest;
import org.openapitools.client.model.UsersUpdateStatusRequest;
import org.openapitools.client.model.UsersUpdateVerificationRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Create User
     *
     * Create a new user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersCreateTest() throws ApiException {
        UsersCreateRequest usersCreateRequest = null;
        User response = api.usersCreate(usersCreateRequest);
        // TODO: test validations
    }

    /**
     * Delete User
     *
     * Delete a user by its unique ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersDeleteTest() throws ApiException {
        String userId = null;
        api.usersDelete(userId);
        // TODO: test validations
    }

    /**
     * Delete User Session
     *
     * Delete a user sessions by its unique ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersDeleteSessionTest() throws ApiException {
        String userId = null;
        String sessionId = null;
        api.usersDeleteSession(userId, sessionId);
        // TODO: test validations
    }

    /**
     * Delete User Sessions
     *
     * Delete all user&#39;s sessions by using the user&#39;s unique ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersDeleteSessionsTest() throws ApiException {
        String userId = null;
        api.usersDeleteSessions(userId);
        // TODO: test validations
    }

    /**
     * Get User
     *
     * Get a user by its unique ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGetTest() throws ApiException {
        String userId = null;
        User response = api.usersGet(userId);
        // TODO: test validations
    }

    /**
     * Get User Logs
     *
     * Get a user activity logs list by its unique ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGetLogsTest() throws ApiException {
        String userId = null;
        LogList response = api.usersGetLogs(userId);
        // TODO: test validations
    }

    /**
     * Get User Preferences
     *
     * Get the user preferences by its unique ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGetPrefsTest() throws ApiException {
        String userId = null;
        Map<String, Object> response = api.usersGetPrefs(userId);
        // TODO: test validations
    }

    /**
     * Get User Sessions
     *
     * Get the user sessions list by its unique ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersGetSessionsTest() throws ApiException {
        String userId = null;
        SessionList response = api.usersGetSessions(userId);
        // TODO: test validations
    }

    /**
     * List Users
     *
     * Get a list of all the project&#39;s users. You can use the query params to filter your results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersListTest() throws ApiException {
        String search = null;
        Integer limit = null;
        Integer offset = null;
        String orderType = null;
        UserList response = api.usersList(search, limit, offset, orderType);
        // TODO: test validations
    }

    /**
     * Update User Preferences
     *
     * Update the user preferences by its unique ID. You can pass only the specific settings you wish to update.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUpdatePrefsTest() throws ApiException {
        String userId = null;
        AccountUpdatePrefsRequest accountUpdatePrefsRequest = null;
        Map<String, Object> response = api.usersUpdatePrefs(userId, accountUpdatePrefsRequest);
        // TODO: test validations
    }

    /**
     * Update User Status
     *
     * Update the user status by its unique ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUpdateStatusTest() throws ApiException {
        String userId = null;
        UsersUpdateStatusRequest usersUpdateStatusRequest = null;
        User response = api.usersUpdateStatus(userId, usersUpdateStatusRequest);
        // TODO: test validations
    }

    /**
     * Update Email Verification
     *
     * Update the user email verification status by its unique ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUpdateVerificationTest() throws ApiException {
        String userId = null;
        UsersUpdateVerificationRequest usersUpdateVerificationRequest = null;
        User response = api.usersUpdateVerification(userId, usersUpdateVerificationRequest);
        // TODO: test validations
    }

}
