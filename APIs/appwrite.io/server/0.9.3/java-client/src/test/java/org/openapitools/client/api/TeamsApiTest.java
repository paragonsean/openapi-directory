/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Membership;
import org.openapitools.client.model.MembershipList;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.TeamList;
import org.openapitools.client.model.TeamsCreateMembershipRequest;
import org.openapitools.client.model.TeamsCreateRequest;
import org.openapitools.client.model.TeamsUpdateMembershipRolesRequest;
import org.openapitools.client.model.TeamsUpdateMembershipStatusRequest;
import org.openapitools.client.model.TeamsUpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TeamsApi
 */
@Disabled
public class TeamsApiTest {

    private final TeamsApi api = new TeamsApi();

    /**
     * Create Team
     *
     * Create a new team. The user who creates the team will automatically be assigned as the owner of the team. The team owner can invite new members, who will be able add new owners and update or delete the team from your project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsCreateTest() throws ApiException {
        TeamsCreateRequest teamsCreateRequest = null;
        Team response = api.teamsCreate(teamsCreateRequest);
        // TODO: test validations
    }

    /**
     * Create Team Membership
     *
     * Use this endpoint to invite a new member to join your team. If initiated from Client SDK, an email with a link to join the team will be sent to the new member&#39;s email address if the member doesn&#39;t exist in the project it will be created automatically. If initiated from server side SDKs, new member will automatically be added to the team.  Use the &#39;URL&#39; parameter to redirect the user from the invitation email back to your app. When the user is redirected, use the [Update Team Membership Status](/docs/client/teams#teamsUpdateMembershipStatus) endpoint to allow the user to accept the invitation to the team.  While calling from side SDKs the redirect url can be empty string.  Please note that in order to avoid a [Redirect Attacks](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URL&#39;s are the once from domains you have set when added your platforms in the console interface.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsCreateMembershipTest() throws ApiException {
        String teamId = null;
        TeamsCreateMembershipRequest teamsCreateMembershipRequest = null;
        Membership response = api.teamsCreateMembership(teamId, teamsCreateMembershipRequest);
        // TODO: test validations
    }

    /**
     * Delete Team
     *
     * Delete a team by its unique ID. Only team owners have write access for this resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsDeleteTest() throws ApiException {
        String teamId = null;
        api.teamsDelete(teamId);
        // TODO: test validations
    }

    /**
     * Delete Team Membership
     *
     * This endpoint allows a user to leave a team or for a team owner to delete the membership of any other team member. You can also use this endpoint to delete a user membership even if it is not accepted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsDeleteMembershipTest() throws ApiException {
        String teamId = null;
        String membershipId = null;
        api.teamsDeleteMembership(teamId, membershipId);
        // TODO: test validations
    }

    /**
     * Get Team
     *
     * Get a team by its unique ID. All team members have read access for this resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsGetTest() throws ApiException {
        String teamId = null;
        Team response = api.teamsGet(teamId);
        // TODO: test validations
    }

    /**
     * Get Team Memberships
     *
     * Get a team members by the team unique ID. All team members have read access for this list of resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsGetMembershipsTest() throws ApiException {
        String teamId = null;
        String search = null;
        Integer limit = null;
        Integer offset = null;
        String orderType = null;
        MembershipList response = api.teamsGetMemberships(teamId, search, limit, offset, orderType);
        // TODO: test validations
    }

    /**
     * List Teams
     *
     * Get a list of all the current user teams. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project&#39;s teams. [Learn more about different API modes](/docs/admin).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsListTest() throws ApiException {
        String search = null;
        Integer limit = null;
        Integer offset = null;
        String orderType = null;
        TeamList response = api.teamsList(search, limit, offset, orderType);
        // TODO: test validations
    }

    /**
     * Update Team
     *
     * Update a team by its unique ID. Only team owners have write access for this resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsUpdateTest() throws ApiException {
        String teamId = null;
        TeamsUpdateRequest teamsUpdateRequest = null;
        Team response = api.teamsUpdate(teamId, teamsUpdateRequest);
        // TODO: test validations
    }

    /**
     * Update Membership Roles
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsUpdateMembershipRolesTest() throws ApiException {
        String teamId = null;
        String membershipId = null;
        TeamsUpdateMembershipRolesRequest teamsUpdateMembershipRolesRequest = null;
        Membership response = api.teamsUpdateMembershipRoles(teamId, membershipId, teamsUpdateMembershipRolesRequest);
        // TODO: test validations
    }

    /**
     * Update Team Membership Status
     *
     * Use this endpoint to allow a user to accept an invitation to join a team after being redirected back to your app from the invitation email recieved by the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teamsUpdateMembershipStatusTest() throws ApiException {
        String teamId = null;
        String membershipId = null;
        TeamsUpdateMembershipStatusRequest teamsUpdateMembershipStatusRequest = null;
        Membership response = api.teamsUpdateMembershipStatus(teamId, membershipId, teamsUpdateMembershipStatusRequest);
        // TODO: test validations
    }

}
