/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Execution;
import org.openapitools.client.model.ExecutionList;
import org.openapitools.client.model.Function;
import org.openapitools.client.model.FunctionList;
import org.openapitools.client.model.FunctionsCreateExecutionRequest;
import org.openapitools.client.model.FunctionsCreateRequest;
import org.openapitools.client.model.FunctionsUpdateRequest;
import org.openapitools.client.model.FunctionsUpdateTagRequest;
import org.openapitools.client.model.Tag;
import org.openapitools.client.model.TagList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FunctionsApi
 */
@Disabled
public class FunctionsApiTest {

    private final FunctionsApi api = new FunctionsApi();

    /**
     * Create Function
     *
     * Create a new function. You can pass a list of [permissions](/docs/permissions) to allow different project users or team with access to execute the function using the client API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionsCreateTest() throws ApiException {
        FunctionsCreateRequest functionsCreateRequest = null;
        Function response = api.functionsCreate(functionsCreateRequest);
        // TODO: test validations
    }

    /**
     * Create Execution
     *
     * Trigger a function execution. The returned object will return you the current execution status. You can ping the &#x60;Get Execution&#x60; endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionsCreateExecutionTest() throws ApiException {
        String functionId = null;
        FunctionsCreateExecutionRequest functionsCreateExecutionRequest = null;
        Execution response = api.functionsCreateExecution(functionId, functionsCreateExecutionRequest);
        // TODO: test validations
    }

    /**
     * Create Tag
     *
     * Create a new function code tag. Use this endpoint to upload a new version of your code function. To execute your newly uploaded code, you&#39;ll need to update the function&#39;s tag to use your new tag UID.  This endpoint accepts a tar.gz file compressed with your code. Make sure to include any dependencies your code has within the compressed file. You can learn more about code packaging in the [Appwrite Cloud Functions tutorial](/docs/functions).  Use the \&quot;command\&quot; param to set the entry point used to execute your code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionsCreateTagTest() throws ApiException {
        String functionId = null;
        String code = null;
        String command = null;
        Tag response = api.functionsCreateTag(functionId, code, command);
        // TODO: test validations
    }

    /**
     * Delete Function
     *
     * Delete a function by its unique ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionsDeleteTest() throws ApiException {
        String functionId = null;
        api.functionsDelete(functionId);
        // TODO: test validations
    }

    /**
     * Delete Tag
     *
     * Delete a code tag by its unique ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionsDeleteTagTest() throws ApiException {
        String functionId = null;
        String tagId = null;
        api.functionsDeleteTag(functionId, tagId);
        // TODO: test validations
    }

    /**
     * Get Function
     *
     * Get a function by its unique ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionsGetTest() throws ApiException {
        String functionId = null;
        Function response = api.functionsGet(functionId);
        // TODO: test validations
    }

    /**
     * Get Execution
     *
     * Get a function execution log by its unique ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionsGetExecutionTest() throws ApiException {
        String functionId = null;
        String executionId = null;
        Execution response = api.functionsGetExecution(functionId, executionId);
        // TODO: test validations
    }

    /**
     * Get Tag
     *
     * Get a code tag by its unique ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionsGetTagTest() throws ApiException {
        String functionId = null;
        String tagId = null;
        Tag response = api.functionsGetTag(functionId, tagId);
        // TODO: test validations
    }

    /**
     * List Functions
     *
     * Get a list of all the project&#39;s functions. You can use the query params to filter your results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionsListTest() throws ApiException {
        String search = null;
        Integer limit = null;
        Integer offset = null;
        String orderType = null;
        FunctionList response = api.functionsList(search, limit, offset, orderType);
        // TODO: test validations
    }

    /**
     * List Executions
     *
     * Get a list of all the current user function execution logs. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project&#39;s executions. [Learn more about different API modes](/docs/admin).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionsListExecutionsTest() throws ApiException {
        String functionId = null;
        String search = null;
        Integer limit = null;
        Integer offset = null;
        String orderType = null;
        ExecutionList response = api.functionsListExecutions(functionId, search, limit, offset, orderType);
        // TODO: test validations
    }

    /**
     * List Tags
     *
     * Get a list of all the project&#39;s code tags. You can use the query params to filter your results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionsListTagsTest() throws ApiException {
        String functionId = null;
        String search = null;
        Integer limit = null;
        Integer offset = null;
        String orderType = null;
        TagList response = api.functionsListTags(functionId, search, limit, offset, orderType);
        // TODO: test validations
    }

    /**
     * Update Function
     *
     * Update function by its unique ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionsUpdateTest() throws ApiException {
        String functionId = null;
        FunctionsUpdateRequest functionsUpdateRequest = null;
        Function response = api.functionsUpdate(functionId, functionsUpdateRequest);
        // TODO: test validations
    }

    /**
     * Update Function Tag
     *
     * Update the function code tag ID using the unique function ID. Use this endpoint to switch the code tag that should be executed by the execution endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void functionsUpdateTagTest() throws ApiException {
        String functionId = null;
        FunctionsUpdateTagRequest functionsUpdateTagRequest = null;
        Function response = api.functionsUpdateTag(functionId, functionsUpdateTagRequest);
        // TODO: test validations
    }

}
