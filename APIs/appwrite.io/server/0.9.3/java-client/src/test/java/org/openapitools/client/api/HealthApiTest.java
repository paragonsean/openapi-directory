/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HealthApi
 */
@Disabled
public class HealthApiTest {

    private final HealthApi api = new HealthApi();

    /**
     * Get HTTP
     *
     * Check the Appwrite HTTP server is up and responsive.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthGetTest() throws ApiException {
        api.healthGet();
        // TODO: test validations
    }

    /**
     * Get Anti virus
     *
     * Check the Appwrite Anti Virus server is up and connection is successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthGetAntiVirusTest() throws ApiException {
        api.healthGetAntiVirus();
        // TODO: test validations
    }

    /**
     * Get Cache
     *
     * Check the Appwrite in-memory cache server is up and connection is successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthGetCacheTest() throws ApiException {
        api.healthGetCache();
        // TODO: test validations
    }

    /**
     * Get DB
     *
     * Check the Appwrite database server is up and connection is successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthGetDBTest() throws ApiException {
        api.healthGetDB();
        // TODO: test validations
    }

    /**
     * Get Certificate Queue
     *
     * Get the number of certificates that are waiting to be issued against [Letsencrypt](https://letsencrypt.org/) in the Appwrite internal queue server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthGetQueueCertificatesTest() throws ApiException {
        api.healthGetQueueCertificates();
        // TODO: test validations
    }

    /**
     * Get Functions Queue
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthGetQueueFunctionsTest() throws ApiException {
        api.healthGetQueueFunctions();
        // TODO: test validations
    }

    /**
     * Get Logs Queue
     *
     * Get the number of logs that are waiting to be processed in the Appwrite internal queue server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthGetQueueLogsTest() throws ApiException {
        api.healthGetQueueLogs();
        // TODO: test validations
    }

    /**
     * Get Tasks Queue
     *
     * Get the number of tasks that are waiting to be processed in the Appwrite internal queue server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthGetQueueTasksTest() throws ApiException {
        api.healthGetQueueTasks();
        // TODO: test validations
    }

    /**
     * Get Usage Queue
     *
     * Get the number of usage stats that are waiting to be processed in the Appwrite internal queue server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthGetQueueUsageTest() throws ApiException {
        api.healthGetQueueUsage();
        // TODO: test validations
    }

    /**
     * Get Webhooks Queue
     *
     * Get the number of webhooks that are waiting to be processed in the Appwrite internal queue server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthGetQueueWebhooksTest() throws ApiException {
        api.healthGetQueueWebhooks();
        // TODO: test validations
    }

    /**
     * Get Local Storage
     *
     * Check the Appwrite local storage device is up and connection is successful.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthGetStorageLocalTest() throws ApiException {
        api.healthGetStorageLocal();
        // TODO: test validations
    }

    /**
     * Get Time
     *
     * Check the Appwrite server time is synced with Google remote NTP server. We use this technology to smoothly handle leap seconds with no disruptive events. The [Network Time Protocol](https://en.wikipedia.org/wiki/Network_Time_Protocol) (NTP) is used by hundreds of millions of computers and devices to synchronize their clocks over the Internet. If your computer sets its own clock, it likely uses NTP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthGetTimeTest() throws ApiException {
        api.healthGetTime();
        // TODO: test validations
    }

}
