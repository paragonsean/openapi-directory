/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFunction.h
 *
 * Function
 */

#ifndef OAIFunction_H
#define OAIFunction_H

#include <QJsonObject>

#include "OAIPermissions.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPermissions;

class OAIFunction : public OAIObject {
public:
    OAIFunction();
    OAIFunction(QString json);
    ~OAIFunction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<OAIPermissions> getPermissions() const;
    void setPermissions(const QList<OAIPermissions> &permissions);
    bool is_permissions_Set() const;
    bool is_permissions_Valid() const;

    qint32 getDateCreated() const;
    void setDateCreated(const qint32 &date_created);
    bool is_date_created_Set() const;
    bool is_date_created_Valid() const;

    qint32 getDateUpdated() const;
    void setDateUpdated(const qint32 &date_updated);
    bool is_date_updated_Set() const;
    bool is_date_updated_Valid() const;

    QList<QString> getEvents() const;
    void setEvents(const QList<QString> &events);
    bool is_events_Set() const;
    bool is_events_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getRuntime() const;
    void setRuntime(const QString &runtime);
    bool is_runtime_Set() const;
    bool is_runtime_Valid() const;

    QString getSchedule() const;
    void setSchedule(const QString &schedule);
    bool is_schedule_Set() const;
    bool is_schedule_Valid() const;

    qint32 getScheduleNext() const;
    void setScheduleNext(const qint32 &schedule_next);
    bool is_schedule_next_Set() const;
    bool is_schedule_next_Valid() const;

    qint32 getSchedulePrevious() const;
    void setSchedulePrevious(const qint32 &schedule_previous);
    bool is_schedule_previous_Set() const;
    bool is_schedule_previous_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTag() const;
    void setTag(const QString &tag);
    bool is_tag_Set() const;
    bool is_tag_Valid() const;

    qint32 getTimeout() const;
    void setTimeout(const qint32 &timeout);
    bool is_timeout_Set() const;
    bool is_timeout_Valid() const;

    QString getVars() const;
    void setVars(const QString &vars);
    bool is_vars_Set() const;
    bool is_vars_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<OAIPermissions> m_permissions;
    bool m_permissions_isSet;
    bool m_permissions_isValid;

    qint32 m_date_created;
    bool m_date_created_isSet;
    bool m_date_created_isValid;

    qint32 m_date_updated;
    bool m_date_updated_isSet;
    bool m_date_updated_isValid;

    QList<QString> m_events;
    bool m_events_isSet;
    bool m_events_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_runtime;
    bool m_runtime_isSet;
    bool m_runtime_isValid;

    QString m_schedule;
    bool m_schedule_isSet;
    bool m_schedule_isValid;

    qint32 m_schedule_next;
    bool m_schedule_next_isSet;
    bool m_schedule_next_isValid;

    qint32 m_schedule_previous;
    bool m_schedule_previous_isSet;
    bool m_schedule_previous_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_tag;
    bool m_tag_isSet;
    bool m_tag_isValid;

    qint32 m_timeout;
    bool m_timeout_isSet;
    bool m_timeout_isValid;

    QString m_vars;
    bool m_vars_isSet;
    bool m_vars_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFunction)

#endif // OAIFunction_H
