/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISession::OAISession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISession::OAISession() {
    this->initializeModel();
}

OAISession::~OAISession() {}

void OAISession::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_client_code_isSet = false;
    m_client_code_isValid = false;

    m_client_engine_isSet = false;
    m_client_engine_isValid = false;

    m_client_engine_version_isSet = false;
    m_client_engine_version_isValid = false;

    m_client_name_isSet = false;
    m_client_name_isValid = false;

    m_client_type_isSet = false;
    m_client_type_isValid = false;

    m_client_version_isSet = false;
    m_client_version_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_name_isSet = false;
    m_country_name_isValid = false;

    m_current_isSet = false;
    m_current_isValid = false;

    m_device_brand_isSet = false;
    m_device_brand_isValid = false;

    m_device_model_isSet = false;
    m_device_model_isValid = false;

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_expire_isSet = false;
    m_expire_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_os_code_isSet = false;
    m_os_code_isValid = false;

    m_os_name_isSet = false;
    m_os_name_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_provider_token_isSet = false;
    m_provider_token_isValid = false;

    m_provider_uid_isSet = false;
    m_provider_uid_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAISession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISession::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("$id")]);
    m_id_isSet = !json[QString("$id")].isNull() && m_id_isValid;

    m_client_code_isValid = ::OpenAPI::fromJsonValue(m_client_code, json[QString("clientCode")]);
    m_client_code_isSet = !json[QString("clientCode")].isNull() && m_client_code_isValid;

    m_client_engine_isValid = ::OpenAPI::fromJsonValue(m_client_engine, json[QString("clientEngine")]);
    m_client_engine_isSet = !json[QString("clientEngine")].isNull() && m_client_engine_isValid;

    m_client_engine_version_isValid = ::OpenAPI::fromJsonValue(m_client_engine_version, json[QString("clientEngineVersion")]);
    m_client_engine_version_isSet = !json[QString("clientEngineVersion")].isNull() && m_client_engine_version_isValid;

    m_client_name_isValid = ::OpenAPI::fromJsonValue(m_client_name, json[QString("clientName")]);
    m_client_name_isSet = !json[QString("clientName")].isNull() && m_client_name_isValid;

    m_client_type_isValid = ::OpenAPI::fromJsonValue(m_client_type, json[QString("clientType")]);
    m_client_type_isSet = !json[QString("clientType")].isNull() && m_client_type_isValid;

    m_client_version_isValid = ::OpenAPI::fromJsonValue(m_client_version, json[QString("clientVersion")]);
    m_client_version_isSet = !json[QString("clientVersion")].isNull() && m_client_version_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_country_name_isValid = ::OpenAPI::fromJsonValue(m_country_name, json[QString("countryName")]);
    m_country_name_isSet = !json[QString("countryName")].isNull() && m_country_name_isValid;

    m_current_isValid = ::OpenAPI::fromJsonValue(m_current, json[QString("current")]);
    m_current_isSet = !json[QString("current")].isNull() && m_current_isValid;

    m_device_brand_isValid = ::OpenAPI::fromJsonValue(m_device_brand, json[QString("deviceBrand")]);
    m_device_brand_isSet = !json[QString("deviceBrand")].isNull() && m_device_brand_isValid;

    m_device_model_isValid = ::OpenAPI::fromJsonValue(m_device_model, json[QString("deviceModel")]);
    m_device_model_isSet = !json[QString("deviceModel")].isNull() && m_device_model_isValid;

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("deviceName")]);
    m_device_name_isSet = !json[QString("deviceName")].isNull() && m_device_name_isValid;

    m_expire_isValid = ::OpenAPI::fromJsonValue(m_expire, json[QString("expire")]);
    m_expire_isSet = !json[QString("expire")].isNull() && m_expire_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_os_code_isValid = ::OpenAPI::fromJsonValue(m_os_code, json[QString("osCode")]);
    m_os_code_isSet = !json[QString("osCode")].isNull() && m_os_code_isValid;

    m_os_name_isValid = ::OpenAPI::fromJsonValue(m_os_name, json[QString("osName")]);
    m_os_name_isSet = !json[QString("osName")].isNull() && m_os_name_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_provider_token_isValid = ::OpenAPI::fromJsonValue(m_provider_token, json[QString("providerToken")]);
    m_provider_token_isSet = !json[QString("providerToken")].isNull() && m_provider_token_isValid;

    m_provider_uid_isValid = ::OpenAPI::fromJsonValue(m_provider_uid, json[QString("providerUid")]);
    m_provider_uid_isSet = !json[QString("providerUid")].isNull() && m_provider_uid_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAISession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISession::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("$id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_client_code_isSet) {
        obj.insert(QString("clientCode"), ::OpenAPI::toJsonValue(m_client_code));
    }
    if (m_client_engine_isSet) {
        obj.insert(QString("clientEngine"), ::OpenAPI::toJsonValue(m_client_engine));
    }
    if (m_client_engine_version_isSet) {
        obj.insert(QString("clientEngineVersion"), ::OpenAPI::toJsonValue(m_client_engine_version));
    }
    if (m_client_name_isSet) {
        obj.insert(QString("clientName"), ::OpenAPI::toJsonValue(m_client_name));
    }
    if (m_client_type_isSet) {
        obj.insert(QString("clientType"), ::OpenAPI::toJsonValue(m_client_type));
    }
    if (m_client_version_isSet) {
        obj.insert(QString("clientVersion"), ::OpenAPI::toJsonValue(m_client_version));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_name_isSet) {
        obj.insert(QString("countryName"), ::OpenAPI::toJsonValue(m_country_name));
    }
    if (m_current_isSet) {
        obj.insert(QString("current"), ::OpenAPI::toJsonValue(m_current));
    }
    if (m_device_brand_isSet) {
        obj.insert(QString("deviceBrand"), ::OpenAPI::toJsonValue(m_device_brand));
    }
    if (m_device_model_isSet) {
        obj.insert(QString("deviceModel"), ::OpenAPI::toJsonValue(m_device_model));
    }
    if (m_device_name_isSet) {
        obj.insert(QString("deviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_expire_isSet) {
        obj.insert(QString("expire"), ::OpenAPI::toJsonValue(m_expire));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_os_code_isSet) {
        obj.insert(QString("osCode"), ::OpenAPI::toJsonValue(m_os_code));
    }
    if (m_os_name_isSet) {
        obj.insert(QString("osName"), ::OpenAPI::toJsonValue(m_os_name));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_provider_token_isSet) {
        obj.insert(QString("providerToken"), ::OpenAPI::toJsonValue(m_provider_token));
    }
    if (m_provider_uid_isSet) {
        obj.insert(QString("providerUid"), ::OpenAPI::toJsonValue(m_provider_uid));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAISession::getId() const {
    return m_id;
}
void OAISession::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISession::is_id_Set() const{
    return m_id_isSet;
}

bool OAISession::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISession::getClientCode() const {
    return m_client_code;
}
void OAISession::setClientCode(const QString &client_code) {
    m_client_code = client_code;
    m_client_code_isSet = true;
}

bool OAISession::is_client_code_Set() const{
    return m_client_code_isSet;
}

bool OAISession::is_client_code_Valid() const{
    return m_client_code_isValid;
}

QString OAISession::getClientEngine() const {
    return m_client_engine;
}
void OAISession::setClientEngine(const QString &client_engine) {
    m_client_engine = client_engine;
    m_client_engine_isSet = true;
}

bool OAISession::is_client_engine_Set() const{
    return m_client_engine_isSet;
}

bool OAISession::is_client_engine_Valid() const{
    return m_client_engine_isValid;
}

QString OAISession::getClientEngineVersion() const {
    return m_client_engine_version;
}
void OAISession::setClientEngineVersion(const QString &client_engine_version) {
    m_client_engine_version = client_engine_version;
    m_client_engine_version_isSet = true;
}

bool OAISession::is_client_engine_version_Set() const{
    return m_client_engine_version_isSet;
}

bool OAISession::is_client_engine_version_Valid() const{
    return m_client_engine_version_isValid;
}

QString OAISession::getClientName() const {
    return m_client_name;
}
void OAISession::setClientName(const QString &client_name) {
    m_client_name = client_name;
    m_client_name_isSet = true;
}

bool OAISession::is_client_name_Set() const{
    return m_client_name_isSet;
}

bool OAISession::is_client_name_Valid() const{
    return m_client_name_isValid;
}

QString OAISession::getClientType() const {
    return m_client_type;
}
void OAISession::setClientType(const QString &client_type) {
    m_client_type = client_type;
    m_client_type_isSet = true;
}

bool OAISession::is_client_type_Set() const{
    return m_client_type_isSet;
}

bool OAISession::is_client_type_Valid() const{
    return m_client_type_isValid;
}

QString OAISession::getClientVersion() const {
    return m_client_version;
}
void OAISession::setClientVersion(const QString &client_version) {
    m_client_version = client_version;
    m_client_version_isSet = true;
}

bool OAISession::is_client_version_Set() const{
    return m_client_version_isSet;
}

bool OAISession::is_client_version_Valid() const{
    return m_client_version_isValid;
}

QString OAISession::getCountryCode() const {
    return m_country_code;
}
void OAISession::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAISession::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAISession::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAISession::getCountryName() const {
    return m_country_name;
}
void OAISession::setCountryName(const QString &country_name) {
    m_country_name = country_name;
    m_country_name_isSet = true;
}

bool OAISession::is_country_name_Set() const{
    return m_country_name_isSet;
}

bool OAISession::is_country_name_Valid() const{
    return m_country_name_isValid;
}

bool OAISession::isCurrent() const {
    return m_current;
}
void OAISession::setCurrent(const bool &current) {
    m_current = current;
    m_current_isSet = true;
}

bool OAISession::is_current_Set() const{
    return m_current_isSet;
}

bool OAISession::is_current_Valid() const{
    return m_current_isValid;
}

QString OAISession::getDeviceBrand() const {
    return m_device_brand;
}
void OAISession::setDeviceBrand(const QString &device_brand) {
    m_device_brand = device_brand;
    m_device_brand_isSet = true;
}

bool OAISession::is_device_brand_Set() const{
    return m_device_brand_isSet;
}

bool OAISession::is_device_brand_Valid() const{
    return m_device_brand_isValid;
}

QString OAISession::getDeviceModel() const {
    return m_device_model;
}
void OAISession::setDeviceModel(const QString &device_model) {
    m_device_model = device_model;
    m_device_model_isSet = true;
}

bool OAISession::is_device_model_Set() const{
    return m_device_model_isSet;
}

bool OAISession::is_device_model_Valid() const{
    return m_device_model_isValid;
}

QString OAISession::getDeviceName() const {
    return m_device_name;
}
void OAISession::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAISession::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAISession::is_device_name_Valid() const{
    return m_device_name_isValid;
}

qint32 OAISession::getExpire() const {
    return m_expire;
}
void OAISession::setExpire(const qint32 &expire) {
    m_expire = expire;
    m_expire_isSet = true;
}

bool OAISession::is_expire_Set() const{
    return m_expire_isSet;
}

bool OAISession::is_expire_Valid() const{
    return m_expire_isValid;
}

QString OAISession::getIp() const {
    return m_ip;
}
void OAISession::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAISession::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAISession::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAISession::getOsCode() const {
    return m_os_code;
}
void OAISession::setOsCode(const QString &os_code) {
    m_os_code = os_code;
    m_os_code_isSet = true;
}

bool OAISession::is_os_code_Set() const{
    return m_os_code_isSet;
}

bool OAISession::is_os_code_Valid() const{
    return m_os_code_isValid;
}

QString OAISession::getOsName() const {
    return m_os_name;
}
void OAISession::setOsName(const QString &os_name) {
    m_os_name = os_name;
    m_os_name_isSet = true;
}

bool OAISession::is_os_name_Set() const{
    return m_os_name_isSet;
}

bool OAISession::is_os_name_Valid() const{
    return m_os_name_isValid;
}

QString OAISession::getOsVersion() const {
    return m_os_version;
}
void OAISession::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAISession::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAISession::is_os_version_Valid() const{
    return m_os_version_isValid;
}

QString OAISession::getProvider() const {
    return m_provider;
}
void OAISession::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAISession::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAISession::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAISession::getProviderToken() const {
    return m_provider_token;
}
void OAISession::setProviderToken(const QString &provider_token) {
    m_provider_token = provider_token;
    m_provider_token_isSet = true;
}

bool OAISession::is_provider_token_Set() const{
    return m_provider_token_isSet;
}

bool OAISession::is_provider_token_Valid() const{
    return m_provider_token_isValid;
}

QString OAISession::getProviderUid() const {
    return m_provider_uid;
}
void OAISession::setProviderUid(const QString &provider_uid) {
    m_provider_uid = provider_uid;
    m_provider_uid_isSet = true;
}

bool OAISession::is_provider_uid_Set() const{
    return m_provider_uid_isSet;
}

bool OAISession::is_provider_uid_Valid() const{
    return m_provider_uid_isValid;
}

QString OAISession::getUserId() const {
    return m_user_id;
}
void OAISession::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAISession::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAISession::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAISession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISession::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_client_code_isValid && m_client_engine_isValid && m_client_engine_version_isValid && m_client_name_isValid && m_client_type_isValid && m_client_version_isValid && m_country_code_isValid && m_country_name_isValid && m_current_isValid && m_device_brand_isValid && m_device_model_isValid && m_device_name_isValid && m_expire_isValid && m_ip_isValid && m_os_code_isValid && m_os_name_isValid && m_os_version_isValid && m_provider_isValid && m_provider_token_isValid && m_provider_uid_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
