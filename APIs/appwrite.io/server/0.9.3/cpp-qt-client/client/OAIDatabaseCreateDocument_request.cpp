/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseCreateDocument_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseCreateDocument_request::OAIDatabaseCreateDocument_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseCreateDocument_request::OAIDatabaseCreateDocument_request() {
    this->initializeModel();
}

OAIDatabaseCreateDocument_request::~OAIDatabaseCreateDocument_request() {}

void OAIDatabaseCreateDocument_request::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_parent_document_isSet = false;
    m_parent_document_isValid = false;

    m_parent_property_isSet = false;
    m_parent_property_isValid = false;

    m_parent_property_type_isSet = false;
    m_parent_property_type_isValid = false;

    m_read_isSet = false;
    m_read_isValid = false;

    m_write_isSet = false;
    m_write_isValid = false;
}

void OAIDatabaseCreateDocument_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseCreateDocument_request::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_parent_document_isValid = ::OpenAPI::fromJsonValue(m_parent_document, json[QString("parentDocument")]);
    m_parent_document_isSet = !json[QString("parentDocument")].isNull() && m_parent_document_isValid;

    m_parent_property_isValid = ::OpenAPI::fromJsonValue(m_parent_property, json[QString("parentProperty")]);
    m_parent_property_isSet = !json[QString("parentProperty")].isNull() && m_parent_property_isValid;

    m_parent_property_type_isValid = ::OpenAPI::fromJsonValue(m_parent_property_type, json[QString("parentPropertyType")]);
    m_parent_property_type_isSet = !json[QString("parentPropertyType")].isNull() && m_parent_property_type_isValid;

    m_read_isValid = ::OpenAPI::fromJsonValue(m_read, json[QString("read")]);
    m_read_isSet = !json[QString("read")].isNull() && m_read_isValid;

    m_write_isValid = ::OpenAPI::fromJsonValue(m_write, json[QString("write")]);
    m_write_isSet = !json[QString("write")].isNull() && m_write_isValid;
}

QString OAIDatabaseCreateDocument_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseCreateDocument_request::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_parent_document_isSet) {
        obj.insert(QString("parentDocument"), ::OpenAPI::toJsonValue(m_parent_document));
    }
    if (m_parent_property_isSet) {
        obj.insert(QString("parentProperty"), ::OpenAPI::toJsonValue(m_parent_property));
    }
    if (m_parent_property_type_isSet) {
        obj.insert(QString("parentPropertyType"), ::OpenAPI::toJsonValue(m_parent_property_type));
    }
    if (m_read.size() > 0) {
        obj.insert(QString("read"), ::OpenAPI::toJsonValue(m_read));
    }
    if (m_write.size() > 0) {
        obj.insert(QString("write"), ::OpenAPI::toJsonValue(m_write));
    }
    return obj;
}

OAIObject OAIDatabaseCreateDocument_request::getData() const {
    return m_data;
}
void OAIDatabaseCreateDocument_request::setData(const OAIObject &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIDatabaseCreateDocument_request::is_data_Set() const{
    return m_data_isSet;
}

bool OAIDatabaseCreateDocument_request::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIDatabaseCreateDocument_request::getParentDocument() const {
    return m_parent_document;
}
void OAIDatabaseCreateDocument_request::setParentDocument(const QString &parent_document) {
    m_parent_document = parent_document;
    m_parent_document_isSet = true;
}

bool OAIDatabaseCreateDocument_request::is_parent_document_Set() const{
    return m_parent_document_isSet;
}

bool OAIDatabaseCreateDocument_request::is_parent_document_Valid() const{
    return m_parent_document_isValid;
}

QString OAIDatabaseCreateDocument_request::getParentProperty() const {
    return m_parent_property;
}
void OAIDatabaseCreateDocument_request::setParentProperty(const QString &parent_property) {
    m_parent_property = parent_property;
    m_parent_property_isSet = true;
}

bool OAIDatabaseCreateDocument_request::is_parent_property_Set() const{
    return m_parent_property_isSet;
}

bool OAIDatabaseCreateDocument_request::is_parent_property_Valid() const{
    return m_parent_property_isValid;
}

QString OAIDatabaseCreateDocument_request::getParentPropertyType() const {
    return m_parent_property_type;
}
void OAIDatabaseCreateDocument_request::setParentPropertyType(const QString &parent_property_type) {
    m_parent_property_type = parent_property_type;
    m_parent_property_type_isSet = true;
}

bool OAIDatabaseCreateDocument_request::is_parent_property_type_Set() const{
    return m_parent_property_type_isSet;
}

bool OAIDatabaseCreateDocument_request::is_parent_property_type_Valid() const{
    return m_parent_property_type_isValid;
}

QList<QString> OAIDatabaseCreateDocument_request::getRead() const {
    return m_read;
}
void OAIDatabaseCreateDocument_request::setRead(const QList<QString> &read) {
    m_read = read;
    m_read_isSet = true;
}

bool OAIDatabaseCreateDocument_request::is_read_Set() const{
    return m_read_isSet;
}

bool OAIDatabaseCreateDocument_request::is_read_Valid() const{
    return m_read_isValid;
}

QList<QString> OAIDatabaseCreateDocument_request::getWrite() const {
    return m_write;
}
void OAIDatabaseCreateDocument_request::setWrite(const QList<QString> &write) {
    m_write = write;
    m_write_isSet = true;
}

bool OAIDatabaseCreateDocument_request::is_write_Set() const{
    return m_write_isSet;
}

bool OAIDatabaseCreateDocument_request::is_write_Valid() const{
    return m_write_isValid;
}

bool OAIDatabaseCreateDocument_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_document_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_property_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_property_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_write.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseCreateDocument_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && true;
}

} // namespace OpenAPI
