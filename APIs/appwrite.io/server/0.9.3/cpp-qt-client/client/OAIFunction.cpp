/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFunction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFunction::OAIFunction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFunction::OAIFunction() {
    this->initializeModel();
}

OAIFunction::~OAIFunction() {}

void OAIFunction::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_updated_isSet = false;
    m_date_updated_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_runtime_isSet = false;
    m_runtime_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_schedule_next_isSet = false;
    m_schedule_next_isValid = false;

    m_schedule_previous_isSet = false;
    m_schedule_previous_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_vars_isSet = false;
    m_vars_isValid = false;
}

void OAIFunction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFunction::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("$id")]);
    m_id_isSet = !json[QString("$id")].isNull() && m_id_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("$permissions")]);
    m_permissions_isSet = !json[QString("$permissions")].isNull() && m_permissions_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_updated_isValid = ::OpenAPI::fromJsonValue(m_date_updated, json[QString("dateUpdated")]);
    m_date_updated_isSet = !json[QString("dateUpdated")].isNull() && m_date_updated_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_runtime_isValid = ::OpenAPI::fromJsonValue(m_runtime, json[QString("runtime")]);
    m_runtime_isSet = !json[QString("runtime")].isNull() && m_runtime_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_schedule_next_isValid = ::OpenAPI::fromJsonValue(m_schedule_next, json[QString("scheduleNext")]);
    m_schedule_next_isSet = !json[QString("scheduleNext")].isNull() && m_schedule_next_isValid;

    m_schedule_previous_isValid = ::OpenAPI::fromJsonValue(m_schedule_previous, json[QString("schedulePrevious")]);
    m_schedule_previous_isSet = !json[QString("schedulePrevious")].isNull() && m_schedule_previous_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_vars_isValid = ::OpenAPI::fromJsonValue(m_vars, json[QString("vars")]);
    m_vars_isSet = !json[QString("vars")].isNull() && m_vars_isValid;
}

QString OAIFunction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFunction::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("$id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("$permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_updated_isSet) {
        obj.insert(QString("dateUpdated"), ::OpenAPI::toJsonValue(m_date_updated));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_runtime_isSet) {
        obj.insert(QString("runtime"), ::OpenAPI::toJsonValue(m_runtime));
    }
    if (m_schedule_isSet) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_schedule_next_isSet) {
        obj.insert(QString("scheduleNext"), ::OpenAPI::toJsonValue(m_schedule_next));
    }
    if (m_schedule_previous_isSet) {
        obj.insert(QString("schedulePrevious"), ::OpenAPI::toJsonValue(m_schedule_previous));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_vars_isSet) {
        obj.insert(QString("vars"), ::OpenAPI::toJsonValue(m_vars));
    }
    return obj;
}

QString OAIFunction::getId() const {
    return m_id;
}
void OAIFunction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFunction::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFunction::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIPermissions> OAIFunction::getPermissions() const {
    return m_permissions;
}
void OAIFunction::setPermissions(const QList<OAIPermissions> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIFunction::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIFunction::is_permissions_Valid() const{
    return m_permissions_isValid;
}

qint32 OAIFunction::getDateCreated() const {
    return m_date_created;
}
void OAIFunction::setDateCreated(const qint32 &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIFunction::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIFunction::is_date_created_Valid() const{
    return m_date_created_isValid;
}

qint32 OAIFunction::getDateUpdated() const {
    return m_date_updated;
}
void OAIFunction::setDateUpdated(const qint32 &date_updated) {
    m_date_updated = date_updated;
    m_date_updated_isSet = true;
}

bool OAIFunction::is_date_updated_Set() const{
    return m_date_updated_isSet;
}

bool OAIFunction::is_date_updated_Valid() const{
    return m_date_updated_isValid;
}

QList<QString> OAIFunction::getEvents() const {
    return m_events;
}
void OAIFunction::setEvents(const QList<QString> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIFunction::is_events_Set() const{
    return m_events_isSet;
}

bool OAIFunction::is_events_Valid() const{
    return m_events_isValid;
}

QString OAIFunction::getName() const {
    return m_name;
}
void OAIFunction::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFunction::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFunction::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFunction::getRuntime() const {
    return m_runtime;
}
void OAIFunction::setRuntime(const QString &runtime) {
    m_runtime = runtime;
    m_runtime_isSet = true;
}

bool OAIFunction::is_runtime_Set() const{
    return m_runtime_isSet;
}

bool OAIFunction::is_runtime_Valid() const{
    return m_runtime_isValid;
}

QString OAIFunction::getSchedule() const {
    return m_schedule;
}
void OAIFunction::setSchedule(const QString &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIFunction::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIFunction::is_schedule_Valid() const{
    return m_schedule_isValid;
}

qint32 OAIFunction::getScheduleNext() const {
    return m_schedule_next;
}
void OAIFunction::setScheduleNext(const qint32 &schedule_next) {
    m_schedule_next = schedule_next;
    m_schedule_next_isSet = true;
}

bool OAIFunction::is_schedule_next_Set() const{
    return m_schedule_next_isSet;
}

bool OAIFunction::is_schedule_next_Valid() const{
    return m_schedule_next_isValid;
}

qint32 OAIFunction::getSchedulePrevious() const {
    return m_schedule_previous;
}
void OAIFunction::setSchedulePrevious(const qint32 &schedule_previous) {
    m_schedule_previous = schedule_previous;
    m_schedule_previous_isSet = true;
}

bool OAIFunction::is_schedule_previous_Set() const{
    return m_schedule_previous_isSet;
}

bool OAIFunction::is_schedule_previous_Valid() const{
    return m_schedule_previous_isValid;
}

QString OAIFunction::getStatus() const {
    return m_status;
}
void OAIFunction::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFunction::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFunction::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIFunction::getTag() const {
    return m_tag;
}
void OAIFunction::setTag(const QString &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAIFunction::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAIFunction::is_tag_Valid() const{
    return m_tag_isValid;
}

qint32 OAIFunction::getTimeout() const {
    return m_timeout;
}
void OAIFunction::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIFunction::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIFunction::is_timeout_Valid() const{
    return m_timeout_isValid;
}

QString OAIFunction::getVars() const {
    return m_vars;
}
void OAIFunction::setVars(const QString &vars) {
    m_vars = vars;
    m_vars_isSet = true;
}

bool OAIFunction::is_vars_Set() const{
    return m_vars_isSet;
}

bool OAIFunction::is_vars_Valid() const{
    return m_vars_isValid;
}

bool OAIFunction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_previous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vars_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFunction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_permissions_isValid && m_date_created_isValid && m_date_updated_isValid && m_events_isValid && m_name_isValid && m_runtime_isValid && m_schedule_isValid && m_schedule_next_isValid && m_schedule_previous_isValid && m_status_isValid && m_tag_isValid && m_timeout_isValid && m_vars_isValid && true;
}

} // namespace OpenAPI
