/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseCreateCollection_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseCreateCollection_request::OAIDatabaseCreateCollection_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseCreateCollection_request::OAIDatabaseCreateCollection_request() {
    this->initializeModel();
}

OAIDatabaseCreateCollection_request::~OAIDatabaseCreateCollection_request() {}

void OAIDatabaseCreateCollection_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_read_isSet = false;
    m_read_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_write_isSet = false;
    m_write_isValid = false;
}

void OAIDatabaseCreateCollection_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseCreateCollection_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_read_isValid = ::OpenAPI::fromJsonValue(m_read, json[QString("read")]);
    m_read_isSet = !json[QString("read")].isNull() && m_read_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;

    m_write_isValid = ::OpenAPI::fromJsonValue(m_write, json[QString("write")]);
    m_write_isSet = !json[QString("write")].isNull() && m_write_isValid;
}

QString OAIDatabaseCreateCollection_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseCreateCollection_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_read.size() > 0) {
        obj.insert(QString("read"), ::OpenAPI::toJsonValue(m_read));
    }
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_write.size() > 0) {
        obj.insert(QString("write"), ::OpenAPI::toJsonValue(m_write));
    }
    return obj;
}

QString OAIDatabaseCreateCollection_request::getName() const {
    return m_name;
}
void OAIDatabaseCreateCollection_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDatabaseCreateCollection_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDatabaseCreateCollection_request::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIDatabaseCreateCollection_request::getRead() const {
    return m_read;
}
void OAIDatabaseCreateCollection_request::setRead(const QList<QString> &read) {
    m_read = read;
    m_read_isSet = true;
}

bool OAIDatabaseCreateCollection_request::is_read_Set() const{
    return m_read_isSet;
}

bool OAIDatabaseCreateCollection_request::is_read_Valid() const{
    return m_read_isValid;
}

QList<QString> OAIDatabaseCreateCollection_request::getRules() const {
    return m_rules;
}
void OAIDatabaseCreateCollection_request::setRules(const QList<QString> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIDatabaseCreateCollection_request::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIDatabaseCreateCollection_request::is_rules_Valid() const{
    return m_rules_isValid;
}

QList<QString> OAIDatabaseCreateCollection_request::getWrite() const {
    return m_write;
}
void OAIDatabaseCreateCollection_request::setWrite(const QList<QString> &write) {
    m_write = write;
    m_write_isSet = true;
}

bool OAIDatabaseCreateCollection_request::is_write_Set() const{
    return m_write_isSet;
}

bool OAIDatabaseCreateCollection_request::is_write_Valid() const{
    return m_write_isValid;
}

bool OAIDatabaseCreateCollection_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_write.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseCreateCollection_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_read_isValid && m_rules_isValid && m_write_isValid && true;
}

} // namespace OpenAPI
