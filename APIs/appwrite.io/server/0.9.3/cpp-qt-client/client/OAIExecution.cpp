/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecution::OAIExecution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecution::OAIExecution() {
    this->initializeModel();
}

OAIExecution::~OAIExecution() {}

void OAIExecution::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_exit_code_isSet = false;
    m_exit_code_isValid = false;

    m_function_id_isSet = false;
    m_function_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_stderr_isSet = false;
    m_stderr_isValid = false;

    m_stdout_isSet = false;
    m_stdout_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;
}

void OAIExecution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecution::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("$id")]);
    m_id_isSet = !json[QString("$id")].isNull() && m_id_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_exit_code_isValid = ::OpenAPI::fromJsonValue(m_exit_code, json[QString("exitCode")]);
    m_exit_code_isSet = !json[QString("exitCode")].isNull() && m_exit_code_isValid;

    m_function_id_isValid = ::OpenAPI::fromJsonValue(m_function_id, json[QString("functionId")]);
    m_function_id_isSet = !json[QString("functionId")].isNull() && m_function_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_stderr_isValid = ::OpenAPI::fromJsonValue(m_stderr, json[QString("stderr")]);
    m_stderr_isSet = !json[QString("stderr")].isNull() && m_stderr_isValid;

    m_stdout_isValid = ::OpenAPI::fromJsonValue(m_stdout, json[QString("stdout")]);
    m_stdout_isSet = !json[QString("stdout")].isNull() && m_stdout_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;
}

QString OAIExecution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecution::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("$id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_exit_code_isSet) {
        obj.insert(QString("exitCode"), ::OpenAPI::toJsonValue(m_exit_code));
    }
    if (m_function_id_isSet) {
        obj.insert(QString("functionId"), ::OpenAPI::toJsonValue(m_function_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_stderr_isSet) {
        obj.insert(QString("stderr"), ::OpenAPI::toJsonValue(m_stderr));
    }
    if (m_stdout_isSet) {
        obj.insert(QString("stdout"), ::OpenAPI::toJsonValue(m_stdout));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    if (m_trigger_isSet) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    return obj;
}

QString OAIExecution::getId() const {
    return m_id;
}
void OAIExecution::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExecution::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExecution::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIExecution::getDateCreated() const {
    return m_date_created;
}
void OAIExecution::setDateCreated(const qint32 &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIExecution::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIExecution::is_date_created_Valid() const{
    return m_date_created_isValid;
}

qint32 OAIExecution::getExitCode() const {
    return m_exit_code;
}
void OAIExecution::setExitCode(const qint32 &exit_code) {
    m_exit_code = exit_code;
    m_exit_code_isSet = true;
}

bool OAIExecution::is_exit_code_Set() const{
    return m_exit_code_isSet;
}

bool OAIExecution::is_exit_code_Valid() const{
    return m_exit_code_isValid;
}

QString OAIExecution::getFunctionId() const {
    return m_function_id;
}
void OAIExecution::setFunctionId(const QString &function_id) {
    m_function_id = function_id;
    m_function_id_isSet = true;
}

bool OAIExecution::is_function_id_Set() const{
    return m_function_id_isSet;
}

bool OAIExecution::is_function_id_Valid() const{
    return m_function_id_isValid;
}

QString OAIExecution::getStatus() const {
    return m_status;
}
void OAIExecution::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIExecution::is_status_Set() const{
    return m_status_isSet;
}

bool OAIExecution::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIExecution::getStderr() const {
    return m_stderr;
}
void OAIExecution::setStderr(const QString &stderr) {
    m_stderr = stderr;
    m_stderr_isSet = true;
}

bool OAIExecution::is_stderr_Set() const{
    return m_stderr_isSet;
}

bool OAIExecution::is_stderr_Valid() const{
    return m_stderr_isValid;
}

QString OAIExecution::getStdout() const {
    return m_stdout;
}
void OAIExecution::setStdout(const QString &stdout) {
    m_stdout = stdout;
    m_stdout_isSet = true;
}

bool OAIExecution::is_stdout_Set() const{
    return m_stdout_isSet;
}

bool OAIExecution::is_stdout_Valid() const{
    return m_stdout_isValid;
}

float OAIExecution::getTime() const {
    return m_time;
}
void OAIExecution::setTime(const float &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIExecution::is_time_Set() const{
    return m_time_isSet;
}

bool OAIExecution::is_time_Valid() const{
    return m_time_isValid;
}

QString OAIExecution::getTrigger() const {
    return m_trigger;
}
void OAIExecution::setTrigger(const QString &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAIExecution::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAIExecution::is_trigger_Valid() const{
    return m_trigger_isValid;
}

bool OAIExecution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exit_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stderr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stdout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecution::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_date_created_isValid && m_exit_code_isValid && m_function_id_isValid && m_status_isValid && m_stderr_isValid && m_stdout_isValid && m_time_isValid && m_trigger_isValid && true;
}

} // namespace OpenAPI
