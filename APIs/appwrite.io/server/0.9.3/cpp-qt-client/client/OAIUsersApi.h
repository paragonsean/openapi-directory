/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountUpdatePrefs_request.h"
#include "OAILogList.h"
#include "OAISessionList.h"
#include "OAIUser.h"
#include "OAIUserList.h"
#include "OAIUsersCreate_request.h"
#include "OAIUsersUpdateStatus_request.h"
#include "OAIUsersUpdateVerification_request.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_users_create_request OAIUsersCreate_request [optional]
    */
    virtual void usersCreate(const ::OpenAPI::OptionalParam<OAIUsersCreate_request> &oai_users_create_request = ::OpenAPI::OptionalParam<OAIUsersCreate_request>());

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersDelete(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  session_id QString [required]
    */
    virtual void usersDeleteSession(const QString &user_id, const QString &session_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersDeleteSessions(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersGet(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersGetLogs(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersGetPrefs(const QString &user_id);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersGetSessions(const QString &user_id);

    /**
    * @param[in]  search QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  order_type QString [optional]
    */
    virtual void usersList(const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_account_update_prefs_request OAIAccountUpdatePrefs_request [optional]
    */
    virtual void usersUpdatePrefs(const QString &user_id, const ::OpenAPI::OptionalParam<OAIAccountUpdatePrefs_request> &oai_account_update_prefs_request = ::OpenAPI::OptionalParam<OAIAccountUpdatePrefs_request>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_users_update_status_request OAIUsersUpdateStatus_request [optional]
    */
    virtual void usersUpdateStatus(const QString &user_id, const ::OpenAPI::OptionalParam<OAIUsersUpdateStatus_request> &oai_users_update_status_request = ::OpenAPI::OptionalParam<OAIUsersUpdateStatus_request>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_users_update_verification_request OAIUsersUpdateVerification_request [optional]
    */
    virtual void usersUpdateVerification(const QString &user_id, const ::OpenAPI::OptionalParam<OAIUsersUpdateVerification_request> &oai_users_update_verification_request = ::OpenAPI::OptionalParam<OAIUsersUpdateVerification_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void usersCreateCallback(OAIHttpRequestWorker *worker);
    void usersDeleteCallback(OAIHttpRequestWorker *worker);
    void usersDeleteSessionCallback(OAIHttpRequestWorker *worker);
    void usersDeleteSessionsCallback(OAIHttpRequestWorker *worker);
    void usersGetCallback(OAIHttpRequestWorker *worker);
    void usersGetLogsCallback(OAIHttpRequestWorker *worker);
    void usersGetPrefsCallback(OAIHttpRequestWorker *worker);
    void usersGetSessionsCallback(OAIHttpRequestWorker *worker);
    void usersListCallback(OAIHttpRequestWorker *worker);
    void usersUpdatePrefsCallback(OAIHttpRequestWorker *worker);
    void usersUpdateStatusCallback(OAIHttpRequestWorker *worker);
    void usersUpdateVerificationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void usersCreateSignal(OAIUser summary);
    void usersDeleteSignal();
    void usersDeleteSessionSignal();
    void usersDeleteSessionsSignal();
    void usersGetSignal(OAIUser summary);
    void usersGetLogsSignal(OAILogList summary);
    void usersGetPrefsSignal(QMap<QString, QJsonValue> summary);
    void usersGetSessionsSignal(OAISessionList summary);
    void usersListSignal(OAIUserList summary);
    void usersUpdatePrefsSignal(QMap<QString, QJsonValue> summary);
    void usersUpdateStatusSignal(OAIUser summary);
    void usersUpdateVerificationSignal(OAIUser summary);


    void usersCreateSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void usersDeleteSessionSignalFull(OAIHttpRequestWorker *worker);
    void usersDeleteSessionsSignalFull(OAIHttpRequestWorker *worker);
    void usersGetSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersGetLogsSignalFull(OAIHttpRequestWorker *worker, OAILogList summary);
    void usersGetPrefsSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void usersGetSessionsSignalFull(OAIHttpRequestWorker *worker, OAISessionList summary);
    void usersListSignalFull(OAIHttpRequestWorker *worker, OAIUserList summary);
    void usersUpdatePrefsSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void usersUpdateStatusSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void usersUpdateVerificationSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);

    Q_DECL_DEPRECATED_X("Use usersCreateSignalError() instead")
    void usersCreateSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersCreateSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersDeleteSignalError() instead")
    void usersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersDeleteSessionSignalError() instead")
    void usersDeleteSessionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersDeleteSessionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersDeleteSessionsSignalError() instead")
    void usersDeleteSessionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void usersDeleteSessionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetSignalError() instead")
    void usersGetSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetLogsSignalError() instead")
    void usersGetLogsSignalE(OAILogList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetLogsSignalError(OAILogList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetPrefsSignalError() instead")
    void usersGetPrefsSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetPrefsSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetSessionsSignalError() instead")
    void usersGetSessionsSignalE(OAISessionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSessionsSignalError(OAISessionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersListSignalError() instead")
    void usersListSignalE(OAIUserList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersListSignalError(OAIUserList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUpdatePrefsSignalError() instead")
    void usersUpdatePrefsSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUpdatePrefsSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUpdateStatusSignalError() instead")
    void usersUpdateStatusSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUpdateStatusSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUpdateVerificationSignalError() instead")
    void usersUpdateVerificationSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUpdateVerificationSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use usersCreateSignalErrorFull() instead")
    void usersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersDeleteSignalErrorFull() instead")
    void usersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersDeleteSessionSignalErrorFull() instead")
    void usersDeleteSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersDeleteSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersDeleteSessionsSignalErrorFull() instead")
    void usersDeleteSessionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersDeleteSessionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetSignalErrorFull() instead")
    void usersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetLogsSignalErrorFull() instead")
    void usersGetLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetPrefsSignalErrorFull() instead")
    void usersGetPrefsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetPrefsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetSessionsSignalErrorFull() instead")
    void usersGetSessionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSessionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersListSignalErrorFull() instead")
    void usersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUpdatePrefsSignalErrorFull() instead")
    void usersUpdatePrefsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUpdatePrefsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUpdateStatusSignalErrorFull() instead")
    void usersUpdateStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUpdateStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUpdateVerificationSignalErrorFull() instead")
    void usersUpdateVerificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUpdateVerificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
