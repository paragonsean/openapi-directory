/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHealthApi_H
#define OAI_OAIHealthApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHealthApi : public QObject {
    Q_OBJECT

public:
    OAIHealthApi(const int timeOut = 0);
    ~OAIHealthApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void healthGet();


    virtual void healthGetAntiVirus();


    virtual void healthGetCache();


    virtual void healthGetDB();


    virtual void healthGetQueueCertificates();


    virtual void healthGetQueueFunctions();


    virtual void healthGetQueueLogs();


    virtual void healthGetQueueTasks();


    virtual void healthGetQueueUsage();


    virtual void healthGetQueueWebhooks();


    virtual void healthGetStorageLocal();


    virtual void healthGetTime();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void healthGetCallback(OAIHttpRequestWorker *worker);
    void healthGetAntiVirusCallback(OAIHttpRequestWorker *worker);
    void healthGetCacheCallback(OAIHttpRequestWorker *worker);
    void healthGetDBCallback(OAIHttpRequestWorker *worker);
    void healthGetQueueCertificatesCallback(OAIHttpRequestWorker *worker);
    void healthGetQueueFunctionsCallback(OAIHttpRequestWorker *worker);
    void healthGetQueueLogsCallback(OAIHttpRequestWorker *worker);
    void healthGetQueueTasksCallback(OAIHttpRequestWorker *worker);
    void healthGetQueueUsageCallback(OAIHttpRequestWorker *worker);
    void healthGetQueueWebhooksCallback(OAIHttpRequestWorker *worker);
    void healthGetStorageLocalCallback(OAIHttpRequestWorker *worker);
    void healthGetTimeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void healthGetSignal();
    void healthGetAntiVirusSignal();
    void healthGetCacheSignal();
    void healthGetDBSignal();
    void healthGetQueueCertificatesSignal();
    void healthGetQueueFunctionsSignal();
    void healthGetQueueLogsSignal();
    void healthGetQueueTasksSignal();
    void healthGetQueueUsageSignal();
    void healthGetQueueWebhooksSignal();
    void healthGetStorageLocalSignal();
    void healthGetTimeSignal();


    void healthGetSignalFull(OAIHttpRequestWorker *worker);
    void healthGetAntiVirusSignalFull(OAIHttpRequestWorker *worker);
    void healthGetCacheSignalFull(OAIHttpRequestWorker *worker);
    void healthGetDBSignalFull(OAIHttpRequestWorker *worker);
    void healthGetQueueCertificatesSignalFull(OAIHttpRequestWorker *worker);
    void healthGetQueueFunctionsSignalFull(OAIHttpRequestWorker *worker);
    void healthGetQueueLogsSignalFull(OAIHttpRequestWorker *worker);
    void healthGetQueueTasksSignalFull(OAIHttpRequestWorker *worker);
    void healthGetQueueUsageSignalFull(OAIHttpRequestWorker *worker);
    void healthGetQueueWebhooksSignalFull(OAIHttpRequestWorker *worker);
    void healthGetStorageLocalSignalFull(OAIHttpRequestWorker *worker);
    void healthGetTimeSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use healthGetSignalError() instead")
    void healthGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetAntiVirusSignalError() instead")
    void healthGetAntiVirusSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetAntiVirusSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetCacheSignalError() instead")
    void healthGetCacheSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetCacheSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetDBSignalError() instead")
    void healthGetDBSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetDBSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetQueueCertificatesSignalError() instead")
    void healthGetQueueCertificatesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetQueueCertificatesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetQueueFunctionsSignalError() instead")
    void healthGetQueueFunctionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetQueueFunctionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetQueueLogsSignalError() instead")
    void healthGetQueueLogsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetQueueLogsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetQueueTasksSignalError() instead")
    void healthGetQueueTasksSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetQueueTasksSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetQueueUsageSignalError() instead")
    void healthGetQueueUsageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetQueueUsageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetQueueWebhooksSignalError() instead")
    void healthGetQueueWebhooksSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetQueueWebhooksSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetStorageLocalSignalError() instead")
    void healthGetStorageLocalSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetStorageLocalSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetTimeSignalError() instead")
    void healthGetTimeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetTimeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use healthGetSignalErrorFull() instead")
    void healthGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetAntiVirusSignalErrorFull() instead")
    void healthGetAntiVirusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetAntiVirusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetCacheSignalErrorFull() instead")
    void healthGetCacheSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetCacheSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetDBSignalErrorFull() instead")
    void healthGetDBSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetDBSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetQueueCertificatesSignalErrorFull() instead")
    void healthGetQueueCertificatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetQueueCertificatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetQueueFunctionsSignalErrorFull() instead")
    void healthGetQueueFunctionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetQueueFunctionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetQueueLogsSignalErrorFull() instead")
    void healthGetQueueLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetQueueLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetQueueTasksSignalErrorFull() instead")
    void healthGetQueueTasksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetQueueTasksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetQueueUsageSignalErrorFull() instead")
    void healthGetQueueUsageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetQueueUsageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetQueueWebhooksSignalErrorFull() instead")
    void healthGetQueueWebhooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetQueueWebhooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetStorageLocalSignalErrorFull() instead")
    void healthGetStorageLocalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetStorageLocalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use healthGetTimeSignalErrorFull() instead")
    void healthGetTimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void healthGetTimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
