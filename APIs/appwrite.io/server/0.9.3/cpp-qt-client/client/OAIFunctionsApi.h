/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFunctionsApi_H
#define OAI_OAIFunctionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExecution.h"
#include "OAIExecutionList.h"
#include "OAIFunction.h"
#include "OAIFunctionList.h"
#include "OAIFunctionsCreateExecution_request.h"
#include "OAIFunctionsCreate_request.h"
#include "OAIFunctionsUpdateTag_request.h"
#include "OAIFunctionsUpdate_request.h"
#include "OAITag.h"
#include "OAITagList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFunctionsApi : public QObject {
    Q_OBJECT

public:
    OAIFunctionsApi(const int timeOut = 0);
    ~OAIFunctionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_functions_create_request OAIFunctionsCreate_request [optional]
    */
    virtual void functionsCreate(const ::OpenAPI::OptionalParam<OAIFunctionsCreate_request> &oai_functions_create_request = ::OpenAPI::OptionalParam<OAIFunctionsCreate_request>());

    /**
    * @param[in]  function_id QString [required]
    * @param[in]  oai_functions_create_execution_request OAIFunctionsCreateExecution_request [optional]
    */
    virtual void functionsCreateExecution(const QString &function_id, const ::OpenAPI::OptionalParam<OAIFunctionsCreateExecution_request> &oai_functions_create_execution_request = ::OpenAPI::OptionalParam<OAIFunctionsCreateExecution_request>());

    /**
    * @param[in]  function_id QString [required]
    * @param[in]  code QString [required]
    * @param[in]  command QString [required]
    */
    virtual void functionsCreateTag(const QString &function_id, const QString &code, const QString &command);

    /**
    * @param[in]  function_id QString [required]
    */
    virtual void functionsDelete(const QString &function_id);

    /**
    * @param[in]  function_id QString [required]
    * @param[in]  tag_id QString [required]
    */
    virtual void functionsDeleteTag(const QString &function_id, const QString &tag_id);

    /**
    * @param[in]  function_id QString [required]
    */
    virtual void functionsGet(const QString &function_id);

    /**
    * @param[in]  function_id QString [required]
    * @param[in]  execution_id QString [required]
    */
    virtual void functionsGetExecution(const QString &function_id, const QString &execution_id);

    /**
    * @param[in]  function_id QString [required]
    * @param[in]  tag_id QString [required]
    */
    virtual void functionsGetTag(const QString &function_id, const QString &tag_id);

    /**
    * @param[in]  search QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  order_type QString [optional]
    */
    virtual void functionsList(const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  function_id QString [required]
    * @param[in]  search QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  order_type QString [optional]
    */
    virtual void functionsListExecutions(const QString &function_id, const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  function_id QString [required]
    * @param[in]  search QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  order_type QString [optional]
    */
    virtual void functionsListTags(const QString &function_id, const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  function_id QString [required]
    * @param[in]  oai_functions_update_request OAIFunctionsUpdate_request [optional]
    */
    virtual void functionsUpdate(const QString &function_id, const ::OpenAPI::OptionalParam<OAIFunctionsUpdate_request> &oai_functions_update_request = ::OpenAPI::OptionalParam<OAIFunctionsUpdate_request>());

    /**
    * @param[in]  function_id QString [required]
    * @param[in]  oai_functions_update_tag_request OAIFunctionsUpdateTag_request [optional]
    */
    virtual void functionsUpdateTag(const QString &function_id, const ::OpenAPI::OptionalParam<OAIFunctionsUpdateTag_request> &oai_functions_update_tag_request = ::OpenAPI::OptionalParam<OAIFunctionsUpdateTag_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void functionsCreateCallback(OAIHttpRequestWorker *worker);
    void functionsCreateExecutionCallback(OAIHttpRequestWorker *worker);
    void functionsCreateTagCallback(OAIHttpRequestWorker *worker);
    void functionsDeleteCallback(OAIHttpRequestWorker *worker);
    void functionsDeleteTagCallback(OAIHttpRequestWorker *worker);
    void functionsGetCallback(OAIHttpRequestWorker *worker);
    void functionsGetExecutionCallback(OAIHttpRequestWorker *worker);
    void functionsGetTagCallback(OAIHttpRequestWorker *worker);
    void functionsListCallback(OAIHttpRequestWorker *worker);
    void functionsListExecutionsCallback(OAIHttpRequestWorker *worker);
    void functionsListTagsCallback(OAIHttpRequestWorker *worker);
    void functionsUpdateCallback(OAIHttpRequestWorker *worker);
    void functionsUpdateTagCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void functionsCreateSignal(OAIFunction summary);
    void functionsCreateExecutionSignal(OAIExecution summary);
    void functionsCreateTagSignal(OAITag summary);
    void functionsDeleteSignal();
    void functionsDeleteTagSignal();
    void functionsGetSignal(OAIFunction summary);
    void functionsGetExecutionSignal(OAIExecution summary);
    void functionsGetTagSignal(OAITag summary);
    void functionsListSignal(OAIFunctionList summary);
    void functionsListExecutionsSignal(OAIExecutionList summary);
    void functionsListTagsSignal(OAITagList summary);
    void functionsUpdateSignal(OAIFunction summary);
    void functionsUpdateTagSignal(OAIFunction summary);


    void functionsCreateSignalFull(OAIHttpRequestWorker *worker, OAIFunction summary);
    void functionsCreateExecutionSignalFull(OAIHttpRequestWorker *worker, OAIExecution summary);
    void functionsCreateTagSignalFull(OAIHttpRequestWorker *worker, OAITag summary);
    void functionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void functionsDeleteTagSignalFull(OAIHttpRequestWorker *worker);
    void functionsGetSignalFull(OAIHttpRequestWorker *worker, OAIFunction summary);
    void functionsGetExecutionSignalFull(OAIHttpRequestWorker *worker, OAIExecution summary);
    void functionsGetTagSignalFull(OAIHttpRequestWorker *worker, OAITag summary);
    void functionsListSignalFull(OAIHttpRequestWorker *worker, OAIFunctionList summary);
    void functionsListExecutionsSignalFull(OAIHttpRequestWorker *worker, OAIExecutionList summary);
    void functionsListTagsSignalFull(OAIHttpRequestWorker *worker, OAITagList summary);
    void functionsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIFunction summary);
    void functionsUpdateTagSignalFull(OAIHttpRequestWorker *worker, OAIFunction summary);

    Q_DECL_DEPRECATED_X("Use functionsCreateSignalError() instead")
    void functionsCreateSignalE(OAIFunction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsCreateSignalError(OAIFunction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsCreateExecutionSignalError() instead")
    void functionsCreateExecutionSignalE(OAIExecution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsCreateExecutionSignalError(OAIExecution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsCreateTagSignalError() instead")
    void functionsCreateTagSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsCreateTagSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsDeleteSignalError() instead")
    void functionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void functionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsDeleteTagSignalError() instead")
    void functionsDeleteTagSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void functionsDeleteTagSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsGetSignalError() instead")
    void functionsGetSignalE(OAIFunction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsGetSignalError(OAIFunction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsGetExecutionSignalError() instead")
    void functionsGetExecutionSignalE(OAIExecution summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsGetExecutionSignalError(OAIExecution summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsGetTagSignalError() instead")
    void functionsGetTagSignalE(OAITag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsGetTagSignalError(OAITag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsListSignalError() instead")
    void functionsListSignalE(OAIFunctionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsListSignalError(OAIFunctionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsListExecutionsSignalError() instead")
    void functionsListExecutionsSignalE(OAIExecutionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsListExecutionsSignalError(OAIExecutionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsListTagsSignalError() instead")
    void functionsListTagsSignalE(OAITagList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsListTagsSignalError(OAITagList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsUpdateSignalError() instead")
    void functionsUpdateSignalE(OAIFunction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsUpdateSignalError(OAIFunction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsUpdateTagSignalError() instead")
    void functionsUpdateTagSignalE(OAIFunction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsUpdateTagSignalError(OAIFunction summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use functionsCreateSignalErrorFull() instead")
    void functionsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsCreateExecutionSignalErrorFull() instead")
    void functionsCreateExecutionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsCreateExecutionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsCreateTagSignalErrorFull() instead")
    void functionsCreateTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsCreateTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsDeleteSignalErrorFull() instead")
    void functionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsDeleteTagSignalErrorFull() instead")
    void functionsDeleteTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsDeleteTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsGetSignalErrorFull() instead")
    void functionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsGetExecutionSignalErrorFull() instead")
    void functionsGetExecutionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsGetExecutionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsGetTagSignalErrorFull() instead")
    void functionsGetTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsGetTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsListSignalErrorFull() instead")
    void functionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsListExecutionsSignalErrorFull() instead")
    void functionsListExecutionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsListExecutionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsListTagsSignalErrorFull() instead")
    void functionsListTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsListTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsUpdateSignalErrorFull() instead")
    void functionsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use functionsUpdateTagSignalErrorFull() instead")
    void functionsUpdateTagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void functionsUpdateTagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
