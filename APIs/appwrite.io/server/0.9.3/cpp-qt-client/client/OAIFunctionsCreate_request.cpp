/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFunctionsCreate_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFunctionsCreate_request::OAIFunctionsCreate_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFunctionsCreate_request::OAIFunctionsCreate_request() {
    this->initializeModel();
}

OAIFunctionsCreate_request::~OAIFunctionsCreate_request() {}

void OAIFunctionsCreate_request::initializeModel() {

    m_events_isSet = false;
    m_events_isValid = false;

    m_execute_isSet = false;
    m_execute_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_runtime_isSet = false;
    m_runtime_isValid = false;

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_vars_isSet = false;
    m_vars_isValid = false;
}

void OAIFunctionsCreate_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFunctionsCreate_request::fromJsonObject(QJsonObject json) {

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_execute_isValid = ::OpenAPI::fromJsonValue(m_execute, json[QString("execute")]);
    m_execute_isSet = !json[QString("execute")].isNull() && m_execute_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_runtime_isValid = ::OpenAPI::fromJsonValue(m_runtime, json[QString("runtime")]);
    m_runtime_isSet = !json[QString("runtime")].isNull() && m_runtime_isValid;

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_vars_isValid = ::OpenAPI::fromJsonValue(m_vars, json[QString("vars")]);
    m_vars_isSet = !json[QString("vars")].isNull() && m_vars_isValid;
}

QString OAIFunctionsCreate_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFunctionsCreate_request::asJsonObject() const {
    QJsonObject obj;
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_execute.size() > 0) {
        obj.insert(QString("execute"), ::OpenAPI::toJsonValue(m_execute));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_runtime_isSet) {
        obj.insert(QString("runtime"), ::OpenAPI::toJsonValue(m_runtime));
    }
    if (m_schedule_isSet) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_vars_isSet) {
        obj.insert(QString("vars"), ::OpenAPI::toJsonValue(m_vars));
    }
    return obj;
}

QList<QString> OAIFunctionsCreate_request::getEvents() const {
    return m_events;
}
void OAIFunctionsCreate_request::setEvents(const QList<QString> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIFunctionsCreate_request::is_events_Set() const{
    return m_events_isSet;
}

bool OAIFunctionsCreate_request::is_events_Valid() const{
    return m_events_isValid;
}

QList<QString> OAIFunctionsCreate_request::getExecute() const {
    return m_execute;
}
void OAIFunctionsCreate_request::setExecute(const QList<QString> &execute) {
    m_execute = execute;
    m_execute_isSet = true;
}

bool OAIFunctionsCreate_request::is_execute_Set() const{
    return m_execute_isSet;
}

bool OAIFunctionsCreate_request::is_execute_Valid() const{
    return m_execute_isValid;
}

QString OAIFunctionsCreate_request::getName() const {
    return m_name;
}
void OAIFunctionsCreate_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFunctionsCreate_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFunctionsCreate_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIFunctionsCreate_request::getRuntime() const {
    return m_runtime;
}
void OAIFunctionsCreate_request::setRuntime(const QString &runtime) {
    m_runtime = runtime;
    m_runtime_isSet = true;
}

bool OAIFunctionsCreate_request::is_runtime_Set() const{
    return m_runtime_isSet;
}

bool OAIFunctionsCreate_request::is_runtime_Valid() const{
    return m_runtime_isValid;
}

QString OAIFunctionsCreate_request::getSchedule() const {
    return m_schedule;
}
void OAIFunctionsCreate_request::setSchedule(const QString &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIFunctionsCreate_request::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIFunctionsCreate_request::is_schedule_Valid() const{
    return m_schedule_isValid;
}

qint32 OAIFunctionsCreate_request::getTimeout() const {
    return m_timeout;
}
void OAIFunctionsCreate_request::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIFunctionsCreate_request::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIFunctionsCreate_request::is_timeout_Valid() const{
    return m_timeout_isValid;
}

OAIObject OAIFunctionsCreate_request::getVars() const {
    return m_vars;
}
void OAIFunctionsCreate_request::setVars(const OAIObject &vars) {
    m_vars = vars;
    m_vars_isSet = true;
}

bool OAIFunctionsCreate_request::is_vars_Set() const{
    return m_vars_isSet;
}

bool OAIFunctionsCreate_request::is_vars_Valid() const{
    return m_vars_isValid;
}

bool OAIFunctionsCreate_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_execute.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_runtime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vars_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFunctionsCreate_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_execute_isValid && m_name_isValid && m_runtime_isValid && true;
}

} // namespace OpenAPI
