# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FileList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, files: List[file]=None, sum: int=None):
        """FileList - a model defined in OpenAPI

        :param files: The files of this FileList.
        :param sum: The sum of this FileList.
        """
        self.openapi_types = {
            'files': List[file],
            'sum': int
        }

        self.attribute_map = {
            'files': 'files',
            'sum': 'sum'
        }

        self._files = files
        self._sum = sum

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The fileList of this FileList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def files(self):
        """Gets the files of this FileList.

        List of files.

        :return: The files of this FileList.
        :rtype: List[file]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this FileList.

        List of files.

        :param files: The files of this FileList.
        :type files: List[file]
        """
        if files is None:
            raise ValueError("Invalid value for `files`, must not be `None`")

        self._files = files

    @property
    def sum(self):
        """Gets the sum of this FileList.

        Total sum of items in the list.

        :return: The sum of this FileList.
        :rtype: int
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this FileList.

        Total sum of items in the list.

        :param sum: The sum of this FileList.
        :type sum: int
        """
        if sum is None:
            raise ValueError("Invalid value for `sum`, must not be `None`")

        self._sum = sum
