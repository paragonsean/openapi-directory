# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.permissions import Permissions
from openapi_server import util


class Function(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, permissions: List[Permissions]=None, date_created: int=None, date_updated: int=None, events: List[str]=None, name: str=None, runtime: str=None, schedule: str=None, schedule_next: int=None, schedule_previous: int=None, status: str=None, tag: str=None, timeout: int=None, vars: str=None):
        """Function - a model defined in OpenAPI

        :param id: The id of this Function.
        :param permissions: The permissions of this Function.
        :param date_created: The date_created of this Function.
        :param date_updated: The date_updated of this Function.
        :param events: The events of this Function.
        :param name: The name of this Function.
        :param runtime: The runtime of this Function.
        :param schedule: The schedule of this Function.
        :param schedule_next: The schedule_next of this Function.
        :param schedule_previous: The schedule_previous of this Function.
        :param status: The status of this Function.
        :param tag: The tag of this Function.
        :param timeout: The timeout of this Function.
        :param vars: The vars of this Function.
        """
        self.openapi_types = {
            'id': str,
            'permissions': List[Permissions],
            'date_created': int,
            'date_updated': int,
            'events': List[str],
            'name': str,
            'runtime': str,
            'schedule': str,
            'schedule_next': int,
            'schedule_previous': int,
            'status': str,
            'tag': str,
            'timeout': int,
            'vars': str
        }

        self.attribute_map = {
            'id': '$id',
            'permissions': '$permissions',
            'date_created': 'dateCreated',
            'date_updated': 'dateUpdated',
            'events': 'events',
            'name': 'name',
            'runtime': 'runtime',
            'schedule': 'schedule',
            'schedule_next': 'scheduleNext',
            'schedule_previous': 'schedulePrevious',
            'status': 'status',
            'tag': 'tag',
            'timeout': 'timeout',
            'vars': 'vars'
        }

        self._id = id
        self._permissions = permissions
        self._date_created = date_created
        self._date_updated = date_updated
        self._events = events
        self._name = name
        self._runtime = runtime
        self._schedule = schedule
        self._schedule_next = schedule_next
        self._schedule_previous = schedule_previous
        self._status = status
        self._tag = tag
        self._timeout = timeout
        self._vars = vars

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Function':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The function of this Function.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Function.

        Function ID.

        :return: The id of this Function.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Function.

        Function ID.

        :param id: The id of this Function.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def permissions(self):
        """Gets the permissions of this Function.

        Function permissions.

        :return: The permissions of this Function.
        :rtype: List[Permissions]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Function.

        Function permissions.

        :param permissions: The permissions of this Function.
        :type permissions: List[Permissions]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def date_created(self):
        """Gets the date_created of this Function.

        Function creation date in Unix timestamp.

        :return: The date_created of this Function.
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Function.

        Function creation date in Unix timestamp.

        :param date_created: The date_created of this Function.
        :type date_created: int
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this Function.

        Function update date in Unix timestamp.

        :return: The date_updated of this Function.
        :rtype: int
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this Function.

        Function update date in Unix timestamp.

        :param date_updated: The date_updated of this Function.
        :type date_updated: int
        """
        if date_updated is None:
            raise ValueError("Invalid value for `date_updated`, must not be `None`")

        self._date_updated = date_updated

    @property
    def events(self):
        """Gets the events of this Function.

        Function trigger events.

        :return: The events of this Function.
        :rtype: List[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this Function.

        Function trigger events.

        :param events: The events of this Function.
        :type events: List[str]
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")

        self._events = events

    @property
    def name(self):
        """Gets the name of this Function.

        Function name.

        :return: The name of this Function.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Function.

        Function name.

        :param name: The name of this Function.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def runtime(self):
        """Gets the runtime of this Function.

        Function execution runtime.

        :return: The runtime of this Function.
        :rtype: str
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this Function.

        Function execution runtime.

        :param runtime: The runtime of this Function.
        :type runtime: str
        """
        if runtime is None:
            raise ValueError("Invalid value for `runtime`, must not be `None`")

        self._runtime = runtime

    @property
    def schedule(self):
        """Gets the schedule of this Function.

        Function execution schedult in CRON format.

        :return: The schedule of this Function.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this Function.

        Function execution schedult in CRON format.

        :param schedule: The schedule of this Function.
        :type schedule: str
        """
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")

        self._schedule = schedule

    @property
    def schedule_next(self):
        """Gets the schedule_next of this Function.

        Function next scheduled execution date in Unix timestamp.

        :return: The schedule_next of this Function.
        :rtype: int
        """
        return self._schedule_next

    @schedule_next.setter
    def schedule_next(self, schedule_next):
        """Sets the schedule_next of this Function.

        Function next scheduled execution date in Unix timestamp.

        :param schedule_next: The schedule_next of this Function.
        :type schedule_next: int
        """
        if schedule_next is None:
            raise ValueError("Invalid value for `schedule_next`, must not be `None`")

        self._schedule_next = schedule_next

    @property
    def schedule_previous(self):
        """Gets the schedule_previous of this Function.

        Function next scheduled execution date in Unix timestamp.

        :return: The schedule_previous of this Function.
        :rtype: int
        """
        return self._schedule_previous

    @schedule_previous.setter
    def schedule_previous(self, schedule_previous):
        """Sets the schedule_previous of this Function.

        Function next scheduled execution date in Unix timestamp.

        :param schedule_previous: The schedule_previous of this Function.
        :type schedule_previous: int
        """
        if schedule_previous is None:
            raise ValueError("Invalid value for `schedule_previous`, must not be `None`")

        self._schedule_previous = schedule_previous

    @property
    def status(self):
        """Gets the status of this Function.

        Function status. Possible values: disabled, enabled

        :return: The status of this Function.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Function.

        Function status. Possible values: disabled, enabled

        :param status: The status of this Function.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def tag(self):
        """Gets the tag of this Function.

        Function active tag ID.

        :return: The tag of this Function.
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this Function.

        Function active tag ID.

        :param tag: The tag of this Function.
        :type tag: str
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")

        self._tag = tag

    @property
    def timeout(self):
        """Gets the timeout of this Function.

        Function execution timeout in seconds.

        :return: The timeout of this Function.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Function.

        Function execution timeout in seconds.

        :param timeout: The timeout of this Function.
        :type timeout: int
        """
        if timeout is None:
            raise ValueError("Invalid value for `timeout`, must not be `None`")

        self._timeout = timeout

    @property
    def vars(self):
        """Gets the vars of this Function.

        Function environment variables.

        :return: The vars of this Function.
        :rtype: str
        """
        return self._vars

    @vars.setter
    def vars(self, vars):
        """Sets the vars of this Function.

        Function environment variables.

        :param vars: The vars of this Function.
        :type vars: str
        """
        if vars is None:
            raise ValueError("Invalid value for `vars`, must not be `None`")

        self._vars = vars
