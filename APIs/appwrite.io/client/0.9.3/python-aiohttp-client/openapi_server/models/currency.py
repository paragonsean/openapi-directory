# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Currency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, decimal_digits: int=None, name: str=None, name_plural: str=None, rounding: float=None, symbol: str=None, symbol_native: str=None):
        """Currency - a model defined in OpenAPI

        :param code: The code of this Currency.
        :param decimal_digits: The decimal_digits of this Currency.
        :param name: The name of this Currency.
        :param name_plural: The name_plural of this Currency.
        :param rounding: The rounding of this Currency.
        :param symbol: The symbol of this Currency.
        :param symbol_native: The symbol_native of this Currency.
        """
        self.openapi_types = {
            'code': str,
            'decimal_digits': int,
            'name': str,
            'name_plural': str,
            'rounding': float,
            'symbol': str,
            'symbol_native': str
        }

        self.attribute_map = {
            'code': 'code',
            'decimal_digits': 'decimalDigits',
            'name': 'name',
            'name_plural': 'namePlural',
            'rounding': 'rounding',
            'symbol': 'symbol',
            'symbol_native': 'symbolNative'
        }

        self._code = code
        self._decimal_digits = decimal_digits
        self._name = name
        self._name_plural = name_plural
        self._rounding = rounding
        self._symbol = symbol
        self._symbol_native = symbol_native

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Currency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The currency of this Currency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Currency.

        Currency code in [ISO 4217-1](http://en.wikipedia.org/wiki/ISO_4217) three-character format.

        :return: The code of this Currency.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Currency.

        Currency code in [ISO 4217-1](http://en.wikipedia.org/wiki/ISO_4217) three-character format.

        :param code: The code of this Currency.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def decimal_digits(self):
        """Gets the decimal_digits of this Currency.

        Number of decimal digits.

        :return: The decimal_digits of this Currency.
        :rtype: int
        """
        return self._decimal_digits

    @decimal_digits.setter
    def decimal_digits(self, decimal_digits):
        """Sets the decimal_digits of this Currency.

        Number of decimal digits.

        :param decimal_digits: The decimal_digits of this Currency.
        :type decimal_digits: int
        """
        if decimal_digits is None:
            raise ValueError("Invalid value for `decimal_digits`, must not be `None`")

        self._decimal_digits = decimal_digits

    @property
    def name(self):
        """Gets the name of this Currency.

        Currency name.

        :return: The name of this Currency.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Currency.

        Currency name.

        :param name: The name of this Currency.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def name_plural(self):
        """Gets the name_plural of this Currency.

        Currency plural name

        :return: The name_plural of this Currency.
        :rtype: str
        """
        return self._name_plural

    @name_plural.setter
    def name_plural(self, name_plural):
        """Sets the name_plural of this Currency.

        Currency plural name

        :param name_plural: The name_plural of this Currency.
        :type name_plural: str
        """
        if name_plural is None:
            raise ValueError("Invalid value for `name_plural`, must not be `None`")

        self._name_plural = name_plural

    @property
    def rounding(self):
        """Gets the rounding of this Currency.

        Currency digit rounding.

        :return: The rounding of this Currency.
        :rtype: float
        """
        return self._rounding

    @rounding.setter
    def rounding(self, rounding):
        """Sets the rounding of this Currency.

        Currency digit rounding.

        :param rounding: The rounding of this Currency.
        :type rounding: float
        """
        if rounding is None:
            raise ValueError("Invalid value for `rounding`, must not be `None`")

        self._rounding = rounding

    @property
    def symbol(self):
        """Gets the symbol of this Currency.

        Currency symbol.

        :return: The symbol of this Currency.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Currency.

        Currency symbol.

        :param symbol: The symbol of this Currency.
        :type symbol: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")

        self._symbol = symbol

    @property
    def symbol_native(self):
        """Gets the symbol_native of this Currency.

        Currency native symbol.

        :return: The symbol_native of this Currency.
        :rtype: str
        """
        return self._symbol_native

    @symbol_native.setter
    def symbol_native(self, symbol_native):
        """Sets the symbol_native of this Currency.

        Currency native symbol.

        :param symbol_native: The symbol_native of this Currency.
        :type symbol_native: str
        """
        if symbol_native is None:
            raise ValueError("Invalid value for `symbol_native`, must not be `None`")

        self._symbol_native = symbol_native
