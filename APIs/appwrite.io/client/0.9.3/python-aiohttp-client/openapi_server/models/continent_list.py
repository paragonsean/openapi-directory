# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.continent import Continent
from openapi_server import util


class ContinentList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, continents: List[Continent]=None, sum: int=None):
        """ContinentList - a model defined in OpenAPI

        :param continents: The continents of this ContinentList.
        :param sum: The sum of this ContinentList.
        """
        self.openapi_types = {
            'continents': List[Continent],
            'sum': int
        }

        self.attribute_map = {
            'continents': 'continents',
            'sum': 'sum'
        }

        self._continents = continents
        self._sum = sum

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContinentList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The continentList of this ContinentList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def continents(self):
        """Gets the continents of this ContinentList.

        List of continents.

        :return: The continents of this ContinentList.
        :rtype: List[Continent]
        """
        return self._continents

    @continents.setter
    def continents(self, continents):
        """Sets the continents of this ContinentList.

        List of continents.

        :param continents: The continents of this ContinentList.
        :type continents: List[Continent]
        """
        if continents is None:
            raise ValueError("Invalid value for `continents`, must not be `None`")

        self._continents = continents

    @property
    def sum(self):
        """Gets the sum of this ContinentList.

        Total sum of items in the list.

        :return: The sum of this ContinentList.
        :rtype: int
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this ContinentList.

        Total sum of items in the list.

        :param sum: The sum of this ContinentList.
        :type sum: int
        """
        if sum is None:
            raise ValueError("Invalid value for `sum`, must not be `None`")

        self._sum = sum
