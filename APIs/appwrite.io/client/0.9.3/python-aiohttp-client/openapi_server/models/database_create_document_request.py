# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseCreateDocumentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: object=None, parent_document: str=None, parent_property: str=None, parent_property_type: str=None, read: List[str]=None, write: List[str]=None):
        """DatabaseCreateDocumentRequest - a model defined in OpenAPI

        :param data: The data of this DatabaseCreateDocumentRequest.
        :param parent_document: The parent_document of this DatabaseCreateDocumentRequest.
        :param parent_property: The parent_property of this DatabaseCreateDocumentRequest.
        :param parent_property_type: The parent_property_type of this DatabaseCreateDocumentRequest.
        :param read: The read of this DatabaseCreateDocumentRequest.
        :param write: The write of this DatabaseCreateDocumentRequest.
        """
        self.openapi_types = {
            'data': object,
            'parent_document': str,
            'parent_property': str,
            'parent_property_type': str,
            'read': List[str],
            'write': List[str]
        }

        self.attribute_map = {
            'data': 'data',
            'parent_document': 'parentDocument',
            'parent_property': 'parentProperty',
            'parent_property_type': 'parentPropertyType',
            'read': 'read',
            'write': 'write'
        }

        self._data = data
        self._parent_document = parent_document
        self._parent_property = parent_property
        self._parent_property_type = parent_property_type
        self._read = read
        self._write = write

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseCreateDocumentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The databaseCreateDocument_request of this DatabaseCreateDocumentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this DatabaseCreateDocumentRequest.

        Document data as JSON object.

        :return: The data of this DatabaseCreateDocumentRequest.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this DatabaseCreateDocumentRequest.

        Document data as JSON object.

        :param data: The data of this DatabaseCreateDocumentRequest.
        :type data: object
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def parent_document(self):
        """Gets the parent_document of this DatabaseCreateDocumentRequest.

        Parent document unique ID. Use when you want your new document to be a child of a parent document.

        :return: The parent_document of this DatabaseCreateDocumentRequest.
        :rtype: str
        """
        return self._parent_document

    @parent_document.setter
    def parent_document(self, parent_document):
        """Sets the parent_document of this DatabaseCreateDocumentRequest.

        Parent document unique ID. Use when you want your new document to be a child of a parent document.

        :param parent_document: The parent_document of this DatabaseCreateDocumentRequest.
        :type parent_document: str
        """

        self._parent_document = parent_document

    @property
    def parent_property(self):
        """Gets the parent_property of this DatabaseCreateDocumentRequest.

        Parent document property name. Use when you want your new document to be a child of a parent document.

        :return: The parent_property of this DatabaseCreateDocumentRequest.
        :rtype: str
        """
        return self._parent_property

    @parent_property.setter
    def parent_property(self, parent_property):
        """Sets the parent_property of this DatabaseCreateDocumentRequest.

        Parent document property name. Use when you want your new document to be a child of a parent document.

        :param parent_property: The parent_property of this DatabaseCreateDocumentRequest.
        :type parent_property: str
        """

        self._parent_property = parent_property

    @property
    def parent_property_type(self):
        """Gets the parent_property_type of this DatabaseCreateDocumentRequest.

        Parent document property connection type. You can set this value to **assign**, **append** or **prepend**, default value is assign. Use when you want your new document to be a child of a parent document.

        :return: The parent_property_type of this DatabaseCreateDocumentRequest.
        :rtype: str
        """
        return self._parent_property_type

    @parent_property_type.setter
    def parent_property_type(self, parent_property_type):
        """Sets the parent_property_type of this DatabaseCreateDocumentRequest.

        Parent document property connection type. You can set this value to **assign**, **append** or **prepend**, default value is assign. Use when you want your new document to be a child of a parent document.

        :param parent_property_type: The parent_property_type of this DatabaseCreateDocumentRequest.
        :type parent_property_type: str
        """

        self._parent_property_type = parent_property_type

    @property
    def read(self):
        """Gets the read of this DatabaseCreateDocumentRequest.

        An array of strings with read permissions. By default only the current user is granted with read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.

        :return: The read of this DatabaseCreateDocumentRequest.
        :rtype: List[str]
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this DatabaseCreateDocumentRequest.

        An array of strings with read permissions. By default only the current user is granted with read permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.

        :param read: The read of this DatabaseCreateDocumentRequest.
        :type read: List[str]
        """

        self._read = read

    @property
    def write(self):
        """Gets the write of this DatabaseCreateDocumentRequest.

        An array of strings with write permissions. By default only the current user is granted with write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.

        :return: The write of this DatabaseCreateDocumentRequest.
        :rtype: List[str]
        """
        return self._write

    @write.setter
    def write(self, write):
        """Sets the write of this DatabaseCreateDocumentRequest.

        An array of strings with write permissions. By default only the current user is granted with write permissions. [learn more about permissions](/docs/permissions) and get a full list of available permissions.

        :param write: The write of this DatabaseCreateDocumentRequest.
        :type write: List[str]
        """

        self._write = write
