# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Phone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, country_code: str=None, country_name: str=None):
        """Phone - a model defined in OpenAPI

        :param code: The code of this Phone.
        :param country_code: The country_code of this Phone.
        :param country_name: The country_name of this Phone.
        """
        self.openapi_types = {
            'code': str,
            'country_code': str,
            'country_name': str
        }

        self.attribute_map = {
            'code': 'code',
            'country_code': 'countryCode',
            'country_name': 'countryName'
        }

        self._code = code
        self._country_code = country_code
        self._country_name = country_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Phone':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The phone of this Phone.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Phone.

        Phone code.

        :return: The code of this Phone.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Phone.

        Phone code.

        :param code: The code of this Phone.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def country_code(self):
        """Gets the country_code of this Phone.

        Country two-character ISO 3166-1 alpha code.

        :return: The country_code of this Phone.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Phone.

        Country two-character ISO 3166-1 alpha code.

        :param country_code: The country_code of this Phone.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def country_name(self):
        """Gets the country_name of this Phone.

        Country name.

        :return: The country_name of this Phone.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this Phone.

        Country name.

        :param country_name: The country_name of this Phone.
        :type country_name: str
        """
        if country_name is None:
            raise ValueError("Invalid value for `country_name`, must not be `None`")

        self._country_name = country_name
