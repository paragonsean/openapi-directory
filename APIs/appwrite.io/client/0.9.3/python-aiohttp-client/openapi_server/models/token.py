# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Token(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, expire: int=None, secret: str=None, user_id: str=None):
        """Token - a model defined in OpenAPI

        :param id: The id of this Token.
        :param expire: The expire of this Token.
        :param secret: The secret of this Token.
        :param user_id: The user_id of this Token.
        """
        self.openapi_types = {
            'id': str,
            'expire': int,
            'secret': str,
            'user_id': str
        }

        self.attribute_map = {
            'id': '$id',
            'expire': 'expire',
            'secret': 'secret',
            'user_id': 'userId'
        }

        self._id = id
        self._expire = expire
        self._secret = secret
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Token':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The token of this Token.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Token.

        Token ID.

        :return: The id of this Token.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Token.

        Token ID.

        :param id: The id of this Token.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def expire(self):
        """Gets the expire of this Token.

        Token expiration date in Unix timestamp.

        :return: The expire of this Token.
        :rtype: int
        """
        return self._expire

    @expire.setter
    def expire(self, expire):
        """Sets the expire of this Token.

        Token expiration date in Unix timestamp.

        :param expire: The expire of this Token.
        :type expire: int
        """
        if expire is None:
            raise ValueError("Invalid value for `expire`, must not be `None`")

        self._expire = expire

    @property
    def secret(self):
        """Gets the secret of this Token.

        Token secret key. This will return an empty string unless the response is returned using an API key or as part of a webhook payload.

        :return: The secret of this Token.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this Token.

        Token secret key. This will return an empty string unless the response is returned using an API key or as part of a webhook payload.

        :param secret: The secret of this Token.
        :type secret: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")

        self._secret = secret

    @property
    def user_id(self):
        """Gets the user_id of this Token.

        User ID.

        :return: The user_id of this Token.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Token.

        User ID.

        :param user_id: The user_id of this Token.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
