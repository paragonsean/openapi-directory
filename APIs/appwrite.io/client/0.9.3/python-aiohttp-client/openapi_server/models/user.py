# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, email: str=None, email_verification: bool=None, name: str=None, password_update: int=None, prefs: List[Dict[str, object]]=None, registration: int=None, status: int=None):
        """User - a model defined in OpenAPI

        :param id: The id of this User.
        :param email: The email of this User.
        :param email_verification: The email_verification of this User.
        :param name: The name of this User.
        :param password_update: The password_update of this User.
        :param prefs: The prefs of this User.
        :param registration: The registration of this User.
        :param status: The status of this User.
        """
        self.openapi_types = {
            'id': str,
            'email': str,
            'email_verification': bool,
            'name': str,
            'password_update': int,
            'prefs': List[Dict[str, object]],
            'registration': int,
            'status': int
        }

        self.attribute_map = {
            'id': '$id',
            'email': 'email',
            'email_verification': 'emailVerification',
            'name': 'name',
            'password_update': 'passwordUpdate',
            'prefs': 'prefs',
            'registration': 'registration',
            'status': 'status'
        }

        self._id = id
        self._email = email
        self._email_verification = email_verification
        self._name = name
        self._password_update = password_update
        self._prefs = prefs
        self._registration = registration
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The user of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this User.

        User ID.

        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        User ID.

        :param id: The id of this User.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def email(self):
        """Gets the email of this User.

        User email address.

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.

        User email address.

        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def email_verification(self):
        """Gets the email_verification of this User.

        Email verification status.

        :return: The email_verification of this User.
        :rtype: bool
        """
        return self._email_verification

    @email_verification.setter
    def email_verification(self, email_verification):
        """Sets the email_verification of this User.

        Email verification status.

        :param email_verification: The email_verification of this User.
        :type email_verification: bool
        """
        if email_verification is None:
            raise ValueError("Invalid value for `email_verification`, must not be `None`")

        self._email_verification = email_verification

    @property
    def name(self):
        """Gets the name of this User.

        User name.

        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.

        User name.

        :param name: The name of this User.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def password_update(self):
        """Gets the password_update of this User.

        Unix timestamp of the most recent password update

        :return: The password_update of this User.
        :rtype: int
        """
        return self._password_update

    @password_update.setter
    def password_update(self, password_update):
        """Sets the password_update of this User.

        Unix timestamp of the most recent password update

        :param password_update: The password_update of this User.
        :type password_update: int
        """
        if password_update is None:
            raise ValueError("Invalid value for `password_update`, must not be `None`")

        self._password_update = password_update

    @property
    def prefs(self):
        """Gets the prefs of this User.

        User preferences as a key-value object

        :return: The prefs of this User.
        :rtype: List[Dict[str, object]]
        """
        return self._prefs

    @prefs.setter
    def prefs(self, prefs):
        """Sets the prefs of this User.

        User preferences as a key-value object

        :param prefs: The prefs of this User.
        :type prefs: List[Dict[str, object]]
        """
        if prefs is None:
            raise ValueError("Invalid value for `prefs`, must not be `None`")

        self._prefs = prefs

    @property
    def registration(self):
        """Gets the registration of this User.

        User registration date in Unix timestamp.

        :return: The registration of this User.
        :rtype: int
        """
        return self._registration

    @registration.setter
    def registration(self, registration):
        """Sets the registration of this User.

        User registration date in Unix timestamp.

        :param registration: The registration of this User.
        :type registration: int
        """
        if registration is None:
            raise ValueError("Invalid value for `registration`, must not be `None`")

        self._registration = registration

    @property
    def status(self):
        """Gets the status of this User.

        User status. 0 for Unactivated, 1 for active and 2 is blocked.

        :return: The status of this User.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this User.

        User status. 0 for Unactivated, 1 for active and 2 is blocked.

        :param status: The status of this User.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
