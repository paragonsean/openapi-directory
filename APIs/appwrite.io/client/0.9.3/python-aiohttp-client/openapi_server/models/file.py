# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.permissions import Permissions
from openapi_server import util


class File(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, permissions: List[Permissions]=None, date_created: int=None, mime_type: str=None, name: str=None, signature: str=None, size_original: int=None):
        """File - a model defined in OpenAPI

        :param id: The id of this File.
        :param permissions: The permissions of this File.
        :param date_created: The date_created of this File.
        :param mime_type: The mime_type of this File.
        :param name: The name of this File.
        :param signature: The signature of this File.
        :param size_original: The size_original of this File.
        """
        self.openapi_types = {
            'id': str,
            'permissions': List[Permissions],
            'date_created': int,
            'mime_type': str,
            'name': str,
            'signature': str,
            'size_original': int
        }

        self.attribute_map = {
            'id': '$id',
            'permissions': '$permissions',
            'date_created': 'dateCreated',
            'mime_type': 'mimeType',
            'name': 'name',
            'signature': 'signature',
            'size_original': 'sizeOriginal'
        }

        self._id = id
        self._permissions = permissions
        self._date_created = date_created
        self._mime_type = mime_type
        self._name = name
        self._signature = signature
        self._size_original = size_original

    @classmethod
    def from_dict(cls, dikt: dict) -> 'File':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The file of this File.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this File.

        File ID.

        :return: The id of this File.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this File.

        File ID.

        :param id: The id of this File.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def permissions(self):
        """Gets the permissions of this File.

        File permissions.

        :return: The permissions of this File.
        :rtype: List[Permissions]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this File.

        File permissions.

        :param permissions: The permissions of this File.
        :type permissions: List[Permissions]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def date_created(self):
        """Gets the date_created of this File.

        File creation date in Unix timestamp.

        :return: The date_created of this File.
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this File.

        File creation date in Unix timestamp.

        :param date_created: The date_created of this File.
        :type date_created: int
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")

        self._date_created = date_created

    @property
    def mime_type(self):
        """Gets the mime_type of this File.

        File mime type.

        :return: The mime_type of this File.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this File.

        File mime type.

        :param mime_type: The mime_type of this File.
        :type mime_type: str
        """
        if mime_type is None:
            raise ValueError("Invalid value for `mime_type`, must not be `None`")

        self._mime_type = mime_type

    @property
    def name(self):
        """Gets the name of this File.

        File name.

        :return: The name of this File.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this File.

        File name.

        :param name: The name of this File.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def signature(self):
        """Gets the signature of this File.

        File MD5 signature.

        :return: The signature of this File.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this File.

        File MD5 signature.

        :param signature: The signature of this File.
        :type signature: str
        """
        if signature is None:
            raise ValueError("Invalid value for `signature`, must not be `None`")

        self._signature = signature

    @property
    def size_original(self):
        """Gets the size_original of this File.

        File original size in bytes.

        :return: The size_original of this File.
        :rtype: int
        """
        return self._size_original

    @size_original.setter
    def size_original(self, size_original):
        """Sets the size_original of this File.

        File original size in bytes.

        :param size_original: The size_original of this File.
        :type size_original: int
        """
        if size_original is None:
            raise ValueError("Invalid value for `size_original`, must not be `None`")

        self._size_original = size_original
