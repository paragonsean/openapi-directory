# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Team(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, date_created: int=None, name: str=None, sum: int=None):
        """Team - a model defined in OpenAPI

        :param id: The id of this Team.
        :param date_created: The date_created of this Team.
        :param name: The name of this Team.
        :param sum: The sum of this Team.
        """
        self.openapi_types = {
            'id': str,
            'date_created': int,
            'name': str,
            'sum': int
        }

        self.attribute_map = {
            'id': '$id',
            'date_created': 'dateCreated',
            'name': 'name',
            'sum': 'sum'
        }

        self._id = id
        self._date_created = date_created
        self._name = name
        self._sum = sum

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Team':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The team of this Team.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Team.

        Team ID.

        :return: The id of this Team.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Team.

        Team ID.

        :param id: The id of this Team.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def date_created(self):
        """Gets the date_created of this Team.

        Team creation date in Unix timestamp.

        :return: The date_created of this Team.
        :rtype: int
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Team.

        Team creation date in Unix timestamp.

        :param date_created: The date_created of this Team.
        :type date_created: int
        """
        if date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")

        self._date_created = date_created

    @property
    def name(self):
        """Gets the name of this Team.

        Team name.

        :return: The name of this Team.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Team.

        Team name.

        :param name: The name of this Team.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def sum(self):
        """Gets the sum of this Team.

        Total sum of team members.

        :return: The sum of this Team.
        :rtype: int
        """
        return self._sum

    @sum.setter
    def sum(self, sum):
        """Sets the sum of this Team.

        Total sum of team members.

        :param sum: The sum of this Team.
        :type sum: int
        """
        if sum is None:
            raise ValueError("Invalid value for `sum`, must not be `None`")

        self._sum = sum
