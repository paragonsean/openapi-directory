/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Execution from '../model/Execution';
import ExecutionList from '../model/ExecutionList';
import FunctionsCreateExecutionRequest from '../model/FunctionsCreateExecutionRequest';

/**
* Functions service.
* @module api/FunctionsApi
* @version 0.9.3
*/
export default class FunctionsApi {

    /**
    * Constructs a new FunctionsApi. 
    * @alias module:api/FunctionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the functionsCreateExecution operation.
     * @callback module:api/FunctionsApi~functionsCreateExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Execution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Execution
     * Trigger a function execution. The returned object will return you the current execution status. You can ping the `Get Execution` endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.
     * @param {String} functionId Function unique ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/FunctionsCreateExecutionRequest} [functionsCreateExecutionRequest] 
     * @param {module:api/FunctionsApi~functionsCreateExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Execution}
     */
    functionsCreateExecution(functionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['functionsCreateExecutionRequest'];
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling functionsCreateExecution");
      }

      let pathParams = {
        'functionId': functionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Execution;
      return this.apiClient.callApi(
        '/functions/{functionId}/executions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionsGetExecution operation.
     * @callback module:api/FunctionsApi~functionsGetExecutionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Execution} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Execution
     * Get a function execution log by its unique ID.
     * @param {String} functionId Function unique ID.
     * @param {String} executionId Execution unique ID.
     * @param {module:api/FunctionsApi~functionsGetExecutionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Execution}
     */
    functionsGetExecution(functionId, executionId, callback) {
      let postBody = null;
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling functionsGetExecution");
      }
      // verify the required parameter 'executionId' is set
      if (executionId === undefined || executionId === null) {
        throw new Error("Missing the required parameter 'executionId' when calling functionsGetExecution");
      }

      let pathParams = {
        'functionId': functionId,
        'executionId': executionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Execution;
      return this.apiClient.callApi(
        '/functions/{functionId}/executions/{executionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the functionsListExecutions operation.
     * @callback module:api/FunctionsApi~functionsListExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExecutionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Executions
     * Get a list of all the current user function execution logs. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project's executions. [Learn more about different API modes](/docs/admin).
     * @param {String} functionId Function unique ID.
     * @param {Object} opts Optional parameters
     * @param {String} [search = '')] Search term to filter your list results. Max length: 256 chars.
     * @param {Number} [limit = 25)] Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request.
     * @param {Number} [offset = 0)] Results offset. The default value is 0. Use this param to manage pagination.
     * @param {String} [orderType = 'ASC')] Order result by ASC or DESC order.
     * @param {module:api/FunctionsApi~functionsListExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExecutionList}
     */
    functionsListExecutions(functionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'functionId' is set
      if (functionId === undefined || functionId === null) {
        throw new Error("Missing the required parameter 'functionId' when calling functionsListExecutions");
      }

      let pathParams = {
        'functionId': functionId
      };
      let queryParams = {
        'search': opts['search'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'orderType': opts['orderType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Project', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExecutionList;
      return this.apiClient.callApi(
        '/functions/{functionId}/executions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
