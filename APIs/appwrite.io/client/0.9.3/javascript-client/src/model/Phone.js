/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Phone model module.
 * @module model/Phone
 * @version 0.9.3
 */
class Phone {
    /**
     * Constructs a new <code>Phone</code>.
     * Phone
     * @alias module:model/Phone
     * @param code {String} Phone code.
     * @param countryCode {String} Country two-character ISO 3166-1 alpha code.
     * @param countryName {String} Country name.
     */
    constructor(code, countryCode, countryName) { 
        
        Phone.initialize(this, code, countryCode, countryName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, countryCode, countryName) { 
        obj['code'] = code;
        obj['countryCode'] = countryCode;
        obj['countryName'] = countryName;
    }

    /**
     * Constructs a <code>Phone</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Phone} obj Optional instance to populate.
     * @return {module:model/Phone} The populated <code>Phone</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Phone();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('countryName')) {
                obj['countryName'] = ApiClient.convertToType(data['countryName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Phone</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Phone</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Phone.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['countryName'] && !(typeof data['countryName'] === 'string' || data['countryName'] instanceof String)) {
            throw new Error("Expected the field `countryName` to be a primitive type in the JSON string but got " + data['countryName']);
        }

        return true;
    }


}

Phone.RequiredProperties = ["code", "countryCode", "countryName"];

/**
 * Phone code.
 * @member {String} code
 */
Phone.prototype['code'] = undefined;

/**
 * Country two-character ISO 3166-1 alpha code.
 * @member {String} countryCode
 */
Phone.prototype['countryCode'] = undefined;

/**
 * Country name.
 * @member {String} countryName
 */
Phone.prototype['countryName'] = undefined;






export default Phone;

