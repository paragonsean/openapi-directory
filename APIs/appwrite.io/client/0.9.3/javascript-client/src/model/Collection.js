/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Permissions from './Permissions';
import Rule from './Rule';

/**
 * The Collection model module.
 * @module model/Collection
 * @version 0.9.3
 */
class Collection {
    /**
     * Constructs a new <code>Collection</code>.
     * Collection
     * @alias module:model/Collection
     * @param id {String} Collection ID.
     * @param permissions {Array.<module:model/Permissions>} Collection permissions.
     * @param dateCreated {Number} Collection creation date in Unix timestamp.
     * @param dateUpdated {Number} Collection creation date in Unix timestamp.
     * @param name {String} Collection name.
     * @param rules {Array.<module:model/Rule>} Collection rules.
     */
    constructor(id, permissions, dateCreated, dateUpdated, name, rules) { 
        
        Collection.initialize(this, id, permissions, dateCreated, dateUpdated, name, rules);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, permissions, dateCreated, dateUpdated, name, rules) { 
        obj['$id'] = id;
        obj['$permissions'] = permissions;
        obj['dateCreated'] = dateCreated;
        obj['dateUpdated'] = dateUpdated;
        obj['name'] = name;
        obj['rules'] = rules;
    }

    /**
     * Constructs a <code>Collection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Collection} obj Optional instance to populate.
     * @return {module:model/Collection} The populated <code>Collection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Collection();

            if (data.hasOwnProperty('$id')) {
                obj['$id'] = ApiClient.convertToType(data['$id'], 'String');
            }
            if (data.hasOwnProperty('$permissions')) {
                obj['$permissions'] = ApiClient.convertToType(data['$permissions'], [Permissions]);
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Number');
            }
            if (data.hasOwnProperty('dateUpdated')) {
                obj['dateUpdated'] = ApiClient.convertToType(data['dateUpdated'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('rules')) {
                obj['rules'] = ApiClient.convertToType(data['rules'], [Rule]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Collection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Collection</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Collection.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['$id'] && !(typeof data['$id'] === 'string' || data['$id'] instanceof String)) {
            throw new Error("Expected the field `$id` to be a primitive type in the JSON string but got " + data['$id']);
        }
        if (data['$permissions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['$permissions'])) {
                throw new Error("Expected the field `$permissions` to be an array in the JSON data but got " + data['$permissions']);
            }
            // validate the optional field `$permissions` (array)
            for (const item of data['$permissions']) {
                Permissions.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['rules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rules'])) {
                throw new Error("Expected the field `rules` to be an array in the JSON data but got " + data['rules']);
            }
            // validate the optional field `rules` (array)
            for (const item of data['rules']) {
                Rule.validateJSON(item);
            };
        }

        return true;
    }


}

Collection.RequiredProperties = ["$id", "$permissions", "dateCreated", "dateUpdated", "name", "rules"];

/**
 * Collection ID.
 * @member {String} $id
 */
Collection.prototype['$id'] = undefined;

/**
 * Collection permissions.
 * @member {Array.<module:model/Permissions>} $permissions
 */
Collection.prototype['$permissions'] = undefined;

/**
 * Collection creation date in Unix timestamp.
 * @member {Number} dateCreated
 */
Collection.prototype['dateCreated'] = undefined;

/**
 * Collection creation date in Unix timestamp.
 * @member {Number} dateUpdated
 */
Collection.prototype['dateUpdated'] = undefined;

/**
 * Collection name.
 * @member {String} name
 */
Collection.prototype['name'] = undefined;

/**
 * Collection rules.
 * @member {Array.<module:model/Rule>} rules
 */
Collection.prototype['rules'] = undefined;






export default Collection;

