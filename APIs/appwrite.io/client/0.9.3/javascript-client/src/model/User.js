/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The User model module.
 * @module model/User
 * @version 0.9.3
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * User
     * @alias module:model/User
     * @param id {String} User ID.
     * @param email {String} User email address.
     * @param emailVerification {Boolean} Email verification status.
     * @param name {String} User name.
     * @param passwordUpdate {Number} Unix timestamp of the most recent password update
     * @param prefs {Array.<Object.<String, Object>>} User preferences as a key-value object
     * @param registration {Number} User registration date in Unix timestamp.
     * @param status {Number} User status. 0 for Unactivated, 1 for active and 2 is blocked.
     */
    constructor(id, email, emailVerification, name, passwordUpdate, prefs, registration, status) { 
        
        User.initialize(this, id, email, emailVerification, name, passwordUpdate, prefs, registration, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, email, emailVerification, name, passwordUpdate, prefs, registration, status) { 
        obj['$id'] = id;
        obj['email'] = email;
        obj['emailVerification'] = emailVerification;
        obj['name'] = name;
        obj['passwordUpdate'] = passwordUpdate;
        obj['prefs'] = prefs;
        obj['registration'] = registration;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('$id')) {
                obj['$id'] = ApiClient.convertToType(data['$id'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('emailVerification')) {
                obj['emailVerification'] = ApiClient.convertToType(data['emailVerification'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('passwordUpdate')) {
                obj['passwordUpdate'] = ApiClient.convertToType(data['passwordUpdate'], 'Number');
            }
            if (data.hasOwnProperty('prefs')) {
                obj['prefs'] = ApiClient.convertToType(data['prefs'], [Object]);
            }
            if (data.hasOwnProperty('registration')) {
                obj['registration'] = ApiClient.convertToType(data['registration'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of User.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['$id'] && !(typeof data['$id'] === 'string' || data['$id'] instanceof String)) {
            throw new Error("Expected the field `$id` to be a primitive type in the JSON string but got " + data['$id']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['prefs'])) {
            throw new Error("Expected the field `prefs` to be an array in the JSON data but got " + data['prefs']);
        }

        return true;
    }


}

User.RequiredProperties = ["$id", "email", "emailVerification", "name", "passwordUpdate", "prefs", "registration", "status"];

/**
 * User ID.
 * @member {String} $id
 */
User.prototype['$id'] = undefined;

/**
 * User email address.
 * @member {String} email
 */
User.prototype['email'] = undefined;

/**
 * Email verification status.
 * @member {Boolean} emailVerification
 */
User.prototype['emailVerification'] = undefined;

/**
 * User name.
 * @member {String} name
 */
User.prototype['name'] = undefined;

/**
 * Unix timestamp of the most recent password update
 * @member {Number} passwordUpdate
 */
User.prototype['passwordUpdate'] = undefined;

/**
 * User preferences as a key-value object
 * @member {Array.<Object.<String, Object>>} prefs
 */
User.prototype['prefs'] = undefined;

/**
 * User registration date in Unix timestamp.
 * @member {Number} registration
 */
User.prototype['registration'] = undefined;

/**
 * User status. 0 for Unactivated, 1 for active and 2 is blocked.
 * @member {Number} status
 */
User.prototype['status'] = undefined;






export default User;

