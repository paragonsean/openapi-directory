/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Rule model module.
 * @module model/Rule
 * @version 0.9.3
 */
class Rule {
    /**
     * Constructs a new <code>Rule</code>.
     * Rule
     * @alias module:model/Rule
     * @param collection {String} Rule Collection.
     * @param id {String} Rule ID.
     * @param array {Boolean} Is array?
     * @param _default {String} Rule default value.
     * @param key {String} Rule key.
     * @param label {String} Rule label.
     * @param list {Array.<String>} List of allowed values
     * @param required {Boolean} Is required?
     * @param type {String} Rule type. Possible values: 
     */
    constructor(collection, id, array, _default, key, label, list, required, type) { 
        
        Rule.initialize(this, collection, id, array, _default, key, label, list, required, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, collection, id, array, _default, key, label, list, required, type) { 
        obj['$collection'] = collection;
        obj['$id'] = id;
        obj['array'] = array;
        obj['default'] = _default;
        obj['key'] = key;
        obj['label'] = label;
        obj['list'] = list;
        obj['required'] = required;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Rule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Rule} obj Optional instance to populate.
     * @return {module:model/Rule} The populated <code>Rule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Rule();

            if (data.hasOwnProperty('$collection')) {
                obj['$collection'] = ApiClient.convertToType(data['$collection'], 'String');
            }
            if (data.hasOwnProperty('$id')) {
                obj['$id'] = ApiClient.convertToType(data['$id'], 'String');
            }
            if (data.hasOwnProperty('array')) {
                obj['array'] = ApiClient.convertToType(data['array'], 'Boolean');
            }
            if (data.hasOwnProperty('default')) {
                obj['default'] = ApiClient.convertToType(data['default'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('list')) {
                obj['list'] = ApiClient.convertToType(data['list'], ['String']);
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Rule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Rule</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Rule.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['$collection'] && !(typeof data['$collection'] === 'string' || data['$collection'] instanceof String)) {
            throw new Error("Expected the field `$collection` to be a primitive type in the JSON string but got " + data['$collection']);
        }
        // ensure the json data is a string
        if (data['$id'] && !(typeof data['$id'] === 'string' || data['$id'] instanceof String)) {
            throw new Error("Expected the field `$id` to be a primitive type in the JSON string but got " + data['$id']);
        }
        // ensure the json data is a string
        if (data['default'] && !(typeof data['default'] === 'string' || data['default'] instanceof String)) {
            throw new Error("Expected the field `default` to be a primitive type in the JSON string but got " + data['default']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['list'])) {
            throw new Error("Expected the field `list` to be an array in the JSON data but got " + data['list']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Rule.RequiredProperties = ["$collection", "$id", "array", "default", "key", "label", "list", "required", "type"];

/**
 * Rule Collection.
 * @member {String} $collection
 */
Rule.prototype['$collection'] = undefined;

/**
 * Rule ID.
 * @member {String} $id
 */
Rule.prototype['$id'] = undefined;

/**
 * Is array?
 * @member {Boolean} array
 */
Rule.prototype['array'] = undefined;

/**
 * Rule default value.
 * @member {String} default
 */
Rule.prototype['default'] = undefined;

/**
 * Rule key.
 * @member {String} key
 */
Rule.prototype['key'] = undefined;

/**
 * Rule label.
 * @member {String} label
 */
Rule.prototype['label'] = undefined;

/**
 * List of allowed values
 * @member {Array.<String>} list
 */
Rule.prototype['list'] = undefined;

/**
 * Is required?
 * @member {Boolean} required
 */
Rule.prototype['required'] = undefined;

/**
 * Rule type. Possible values: 
 * @member {String} type
 */
Rule.prototype['type'] = undefined;






export default Rule;

