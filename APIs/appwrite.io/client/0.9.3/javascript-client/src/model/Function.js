/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Permissions from './Permissions';

/**
 * The Function model module.
 * @module model/Function
 * @version 0.9.3
 */
class Function {
    /**
     * Constructs a new <code>Function</code>.
     * Function
     * @alias module:model/Function
     * @param id {String} Function ID.
     * @param permissions {Array.<module:model/Permissions>} Function permissions.
     * @param dateCreated {Number} Function creation date in Unix timestamp.
     * @param dateUpdated {Number} Function update date in Unix timestamp.
     * @param events {Array.<String>} Function trigger events.
     * @param name {String} Function name.
     * @param runtime {String} Function execution runtime.
     * @param schedule {String} Function execution schedult in CRON format.
     * @param scheduleNext {Number} Function next scheduled execution date in Unix timestamp.
     * @param schedulePrevious {Number} Function next scheduled execution date in Unix timestamp.
     * @param status {String} Function status. Possible values: disabled, enabled
     * @param tag {String} Function active tag ID.
     * @param timeout {Number} Function execution timeout in seconds.
     * @param vars {String} Function environment variables.
     */
    constructor(id, permissions, dateCreated, dateUpdated, events, name, runtime, schedule, scheduleNext, schedulePrevious, status, tag, timeout, vars) { 
        
        Function.initialize(this, id, permissions, dateCreated, dateUpdated, events, name, runtime, schedule, scheduleNext, schedulePrevious, status, tag, timeout, vars);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, permissions, dateCreated, dateUpdated, events, name, runtime, schedule, scheduleNext, schedulePrevious, status, tag, timeout, vars) { 
        obj['$id'] = id;
        obj['$permissions'] = permissions;
        obj['dateCreated'] = dateCreated;
        obj['dateUpdated'] = dateUpdated;
        obj['events'] = events;
        obj['name'] = name;
        obj['runtime'] = runtime;
        obj['schedule'] = schedule;
        obj['scheduleNext'] = scheduleNext;
        obj['schedulePrevious'] = schedulePrevious;
        obj['status'] = status;
        obj['tag'] = tag;
        obj['timeout'] = timeout;
        obj['vars'] = vars;
    }

    /**
     * Constructs a <code>Function</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Function} obj Optional instance to populate.
     * @return {module:model/Function} The populated <code>Function</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Function();

            if (data.hasOwnProperty('$id')) {
                obj['$id'] = ApiClient.convertToType(data['$id'], 'String');
            }
            if (data.hasOwnProperty('$permissions')) {
                obj['$permissions'] = ApiClient.convertToType(data['$permissions'], [Permissions]);
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Number');
            }
            if (data.hasOwnProperty('dateUpdated')) {
                obj['dateUpdated'] = ApiClient.convertToType(data['dateUpdated'], 'Number');
            }
            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('runtime')) {
                obj['runtime'] = ApiClient.convertToType(data['runtime'], 'String');
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = ApiClient.convertToType(data['schedule'], 'String');
            }
            if (data.hasOwnProperty('scheduleNext')) {
                obj['scheduleNext'] = ApiClient.convertToType(data['scheduleNext'], 'Number');
            }
            if (data.hasOwnProperty('schedulePrevious')) {
                obj['schedulePrevious'] = ApiClient.convertToType(data['schedulePrevious'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'Number');
            }
            if (data.hasOwnProperty('vars')) {
                obj['vars'] = ApiClient.convertToType(data['vars'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Function</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Function</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Function.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['$id'] && !(typeof data['$id'] === 'string' || data['$id'] instanceof String)) {
            throw new Error("Expected the field `$id` to be a primitive type in the JSON string but got " + data['$id']);
        }
        if (data['$permissions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['$permissions'])) {
                throw new Error("Expected the field `$permissions` to be an array in the JSON data but got " + data['$permissions']);
            }
            // validate the optional field `$permissions` (array)
            for (const item of data['$permissions']) {
                Permissions.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['events'])) {
            throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['runtime'] && !(typeof data['runtime'] === 'string' || data['runtime'] instanceof String)) {
            throw new Error("Expected the field `runtime` to be a primitive type in the JSON string but got " + data['runtime']);
        }
        // ensure the json data is a string
        if (data['schedule'] && !(typeof data['schedule'] === 'string' || data['schedule'] instanceof String)) {
            throw new Error("Expected the field `schedule` to be a primitive type in the JSON string but got " + data['schedule']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['tag'] && !(typeof data['tag'] === 'string' || data['tag'] instanceof String)) {
            throw new Error("Expected the field `tag` to be a primitive type in the JSON string but got " + data['tag']);
        }
        // ensure the json data is a string
        if (data['vars'] && !(typeof data['vars'] === 'string' || data['vars'] instanceof String)) {
            throw new Error("Expected the field `vars` to be a primitive type in the JSON string but got " + data['vars']);
        }

        return true;
    }


}

Function.RequiredProperties = ["$id", "$permissions", "dateCreated", "dateUpdated", "events", "name", "runtime", "schedule", "scheduleNext", "schedulePrevious", "status", "tag", "timeout", "vars"];

/**
 * Function ID.
 * @member {String} $id
 */
Function.prototype['$id'] = undefined;

/**
 * Function permissions.
 * @member {Array.<module:model/Permissions>} $permissions
 */
Function.prototype['$permissions'] = undefined;

/**
 * Function creation date in Unix timestamp.
 * @member {Number} dateCreated
 */
Function.prototype['dateCreated'] = undefined;

/**
 * Function update date in Unix timestamp.
 * @member {Number} dateUpdated
 */
Function.prototype['dateUpdated'] = undefined;

/**
 * Function trigger events.
 * @member {Array.<String>} events
 */
Function.prototype['events'] = undefined;

/**
 * Function name.
 * @member {String} name
 */
Function.prototype['name'] = undefined;

/**
 * Function execution runtime.
 * @member {String} runtime
 */
Function.prototype['runtime'] = undefined;

/**
 * Function execution schedult in CRON format.
 * @member {String} schedule
 */
Function.prototype['schedule'] = undefined;

/**
 * Function next scheduled execution date in Unix timestamp.
 * @member {Number} scheduleNext
 */
Function.prototype['scheduleNext'] = undefined;

/**
 * Function next scheduled execution date in Unix timestamp.
 * @member {Number} schedulePrevious
 */
Function.prototype['schedulePrevious'] = undefined;

/**
 * Function status. Possible values: disabled, enabled
 * @member {String} status
 */
Function.prototype['status'] = undefined;

/**
 * Function active tag ID.
 * @member {String} tag
 */
Function.prototype['tag'] = undefined;

/**
 * Function execution timeout in seconds.
 * @member {Number} timeout
 */
Function.prototype['timeout'] = undefined;

/**
 * Function environment variables.
 * @member {String} vars
 */
Function.prototype['vars'] = undefined;






export default Function;

