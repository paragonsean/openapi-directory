/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Locale model module.
 * @module model/Locale
 * @version 0.9.3
 */
class Locale {
    /**
     * Constructs a new <code>Locale</code>.
     * Locale
     * @alias module:model/Locale
     * @param continent {String} Continent name. This field support localization.
     * @param continentCode {String} Continent code. A two character continent code \"AF\" for Africa, \"AN\" for Antarctica, \"AS\" for Asia, \"EU\" for Europe, \"NA\" for North America, \"OC\" for Oceania, and \"SA\" for South America.
     * @param country {String} Country name. This field support localization.
     * @param countryCode {String} Country code in [ISO 3166-1](http://en.wikipedia.org/wiki/ISO_3166-1) two-character format
     * @param currency {String} Currency code in [ISO 4217-1](http://en.wikipedia.org/wiki/ISO_4217) three-character format
     * @param eu {Boolean} True if country is part of the Europian Union.
     * @param ip {String} User IP address.
     */
    constructor(continent, continentCode, country, countryCode, currency, eu, ip) { 
        
        Locale.initialize(this, continent, continentCode, country, countryCode, currency, eu, ip);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, continent, continentCode, country, countryCode, currency, eu, ip) { 
        obj['continent'] = continent;
        obj['continentCode'] = continentCode;
        obj['country'] = country;
        obj['countryCode'] = countryCode;
        obj['currency'] = currency;
        obj['eu'] = eu;
        obj['ip'] = ip;
    }

    /**
     * Constructs a <code>Locale</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Locale} obj Optional instance to populate.
     * @return {module:model/Locale} The populated <code>Locale</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Locale();

            if (data.hasOwnProperty('continent')) {
                obj['continent'] = ApiClient.convertToType(data['continent'], 'String');
            }
            if (data.hasOwnProperty('continentCode')) {
                obj['continentCode'] = ApiClient.convertToType(data['continentCode'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('eu')) {
                obj['eu'] = ApiClient.convertToType(data['eu'], 'Boolean');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Locale</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Locale</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Locale.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['continent'] && !(typeof data['continent'] === 'string' || data['continent'] instanceof String)) {
            throw new Error("Expected the field `continent` to be a primitive type in the JSON string but got " + data['continent']);
        }
        // ensure the json data is a string
        if (data['continentCode'] && !(typeof data['continentCode'] === 'string' || data['continentCode'] instanceof String)) {
            throw new Error("Expected the field `continentCode` to be a primitive type in the JSON string but got " + data['continentCode']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }

        return true;
    }


}

Locale.RequiredProperties = ["continent", "continentCode", "country", "countryCode", "currency", "eu", "ip"];

/**
 * Continent name. This field support localization.
 * @member {String} continent
 */
Locale.prototype['continent'] = undefined;

/**
 * Continent code. A two character continent code \"AF\" for Africa, \"AN\" for Antarctica, \"AS\" for Asia, \"EU\" for Europe, \"NA\" for North America, \"OC\" for Oceania, and \"SA\" for South America.
 * @member {String} continentCode
 */
Locale.prototype['continentCode'] = undefined;

/**
 * Country name. This field support localization.
 * @member {String} country
 */
Locale.prototype['country'] = undefined;

/**
 * Country code in [ISO 3166-1](http://en.wikipedia.org/wiki/ISO_3166-1) two-character format
 * @member {String} countryCode
 */
Locale.prototype['countryCode'] = undefined;

/**
 * Currency code in [ISO 4217-1](http://en.wikipedia.org/wiki/ISO_4217) three-character format
 * @member {String} currency
 */
Locale.prototype['currency'] = undefined;

/**
 * True if country is part of the Europian Union.
 * @member {Boolean} eu
 */
Locale.prototype['eu'] = undefined;

/**
 * User IP address.
 * @member {String} ip
 */
Locale.prototype['ip'] = undefined;






export default Locale;

