/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Tag model module.
 * @module model/Tag
 * @version 0.9.3
 */
class Tag {
    /**
     * Constructs a new <code>Tag</code>.
     * Tag
     * @alias module:model/Tag
     * @param id {String} Tag ID.
     * @param command {String} The entrypoint command in use to execute the tag code.
     * @param dateCreated {Number} The tag creation date in Unix timestamp.
     * @param functionId {String} Function ID.
     * @param size {String} The code size in bytes.
     */
    constructor(id, command, dateCreated, functionId, size) { 
        
        Tag.initialize(this, id, command, dateCreated, functionId, size);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, command, dateCreated, functionId, size) { 
        obj['$id'] = id;
        obj['command'] = command;
        obj['dateCreated'] = dateCreated;
        obj['functionId'] = functionId;
        obj['size'] = size;
    }

    /**
     * Constructs a <code>Tag</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Tag} obj Optional instance to populate.
     * @return {module:model/Tag} The populated <code>Tag</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Tag();

            if (data.hasOwnProperty('$id')) {
                obj['$id'] = ApiClient.convertToType(data['$id'], 'String');
            }
            if (data.hasOwnProperty('command')) {
                obj['command'] = ApiClient.convertToType(data['command'], 'String');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Number');
            }
            if (data.hasOwnProperty('functionId')) {
                obj['functionId'] = ApiClient.convertToType(data['functionId'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Tag</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Tag</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Tag.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['$id'] && !(typeof data['$id'] === 'string' || data['$id'] instanceof String)) {
            throw new Error("Expected the field `$id` to be a primitive type in the JSON string but got " + data['$id']);
        }
        // ensure the json data is a string
        if (data['command'] && !(typeof data['command'] === 'string' || data['command'] instanceof String)) {
            throw new Error("Expected the field `command` to be a primitive type in the JSON string but got " + data['command']);
        }
        // ensure the json data is a string
        if (data['functionId'] && !(typeof data['functionId'] === 'string' || data['functionId'] instanceof String)) {
            throw new Error("Expected the field `functionId` to be a primitive type in the JSON string but got " + data['functionId']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }

        return true;
    }


}

Tag.RequiredProperties = ["$id", "command", "dateCreated", "functionId", "size"];

/**
 * Tag ID.
 * @member {String} $id
 */
Tag.prototype['$id'] = undefined;

/**
 * The entrypoint command in use to execute the tag code.
 * @member {String} command
 */
Tag.prototype['command'] = undefined;

/**
 * The tag creation date in Unix timestamp.
 * @member {Number} dateCreated
 */
Tag.prototype['dateCreated'] = undefined;

/**
 * Function ID.
 * @member {String} functionId
 */
Tag.prototype['functionId'] = undefined;

/**
 * The code size in bytes.
 * @member {String} size
 */
Tag.prototype['size'] = undefined;






export default Tag;

