/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Execution model module.
 * @module model/Execution
 * @version 0.9.3
 */
class Execution {
    /**
     * Constructs a new <code>Execution</code>.
     * Execution
     * @alias module:model/Execution
     * @param id {String} Execution ID.
     * @param dateCreated {Number} The execution creation date in Unix timestamp.
     * @param exitCode {Number} The script exit code.
     * @param functionId {String} Function ID.
     * @param status {String} The status of the function execution. Possible values can be: `waiting`, `processing`, `completed`, or `failed`.
     * @param stderr {String} The script stderr output string. Logs the last 4,000 characters of the execution stderr output
     * @param stdout {String} The script stdout output string. Logs the last 4,000 characters of the execution stdout output.
     * @param time {Number} The script execution time in seconds.
     * @param trigger {String} The trigger that caused the function to execute. Possible values can be: `http`, `schedule`, or `event`.
     */
    constructor(id, dateCreated, exitCode, functionId, status, stderr, stdout, time, trigger) { 
        
        Execution.initialize(this, id, dateCreated, exitCode, functionId, status, stderr, stdout, time, trigger);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, dateCreated, exitCode, functionId, status, stderr, stdout, time, trigger) { 
        obj['$id'] = id;
        obj['dateCreated'] = dateCreated;
        obj['exitCode'] = exitCode;
        obj['functionId'] = functionId;
        obj['status'] = status;
        obj['stderr'] = stderr;
        obj['stdout'] = stdout;
        obj['time'] = time;
        obj['trigger'] = trigger;
    }

    /**
     * Constructs a <code>Execution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Execution} obj Optional instance to populate.
     * @return {module:model/Execution} The populated <code>Execution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Execution();

            if (data.hasOwnProperty('$id')) {
                obj['$id'] = ApiClient.convertToType(data['$id'], 'String');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'Number');
            }
            if (data.hasOwnProperty('exitCode')) {
                obj['exitCode'] = ApiClient.convertToType(data['exitCode'], 'Number');
            }
            if (data.hasOwnProperty('functionId')) {
                obj['functionId'] = ApiClient.convertToType(data['functionId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('stderr')) {
                obj['stderr'] = ApiClient.convertToType(data['stderr'], 'String');
            }
            if (data.hasOwnProperty('stdout')) {
                obj['stdout'] = ApiClient.convertToType(data['stdout'], 'String');
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'Number');
            }
            if (data.hasOwnProperty('trigger')) {
                obj['trigger'] = ApiClient.convertToType(data['trigger'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Execution</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Execution</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Execution.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['$id'] && !(typeof data['$id'] === 'string' || data['$id'] instanceof String)) {
            throw new Error("Expected the field `$id` to be a primitive type in the JSON string but got " + data['$id']);
        }
        // ensure the json data is a string
        if (data['functionId'] && !(typeof data['functionId'] === 'string' || data['functionId'] instanceof String)) {
            throw new Error("Expected the field `functionId` to be a primitive type in the JSON string but got " + data['functionId']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['stderr'] && !(typeof data['stderr'] === 'string' || data['stderr'] instanceof String)) {
            throw new Error("Expected the field `stderr` to be a primitive type in the JSON string but got " + data['stderr']);
        }
        // ensure the json data is a string
        if (data['stdout'] && !(typeof data['stdout'] === 'string' || data['stdout'] instanceof String)) {
            throw new Error("Expected the field `stdout` to be a primitive type in the JSON string but got " + data['stdout']);
        }
        // ensure the json data is a string
        if (data['trigger'] && !(typeof data['trigger'] === 'string' || data['trigger'] instanceof String)) {
            throw new Error("Expected the field `trigger` to be a primitive type in the JSON string but got " + data['trigger']);
        }

        return true;
    }


}

Execution.RequiredProperties = ["$id", "dateCreated", "exitCode", "functionId", "status", "stderr", "stdout", "time", "trigger"];

/**
 * Execution ID.
 * @member {String} $id
 */
Execution.prototype['$id'] = undefined;

/**
 * The execution creation date in Unix timestamp.
 * @member {Number} dateCreated
 */
Execution.prototype['dateCreated'] = undefined;

/**
 * The script exit code.
 * @member {Number} exitCode
 */
Execution.prototype['exitCode'] = undefined;

/**
 * Function ID.
 * @member {String} functionId
 */
Execution.prototype['functionId'] = undefined;

/**
 * The status of the function execution. Possible values can be: `waiting`, `processing`, `completed`, or `failed`.
 * @member {String} status
 */
Execution.prototype['status'] = undefined;

/**
 * The script stderr output string. Logs the last 4,000 characters of the execution stderr output
 * @member {String} stderr
 */
Execution.prototype['stderr'] = undefined;

/**
 * The script stdout output string. Logs the last 4,000 characters of the execution stdout output.
 * @member {String} stdout
 */
Execution.prototype['stdout'] = undefined;

/**
 * The script execution time in seconds.
 * @member {Number} time
 */
Execution.prototype['time'] = undefined;

/**
 * The trigger that caused the function to execute. Possible values can be: `http`, `schedule`, or `event`.
 * @member {String} trigger
 */
Execution.prototype['trigger'] = undefined;






export default Execution;

