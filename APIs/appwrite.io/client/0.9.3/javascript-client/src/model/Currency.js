/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Currency model module.
 * @module model/Currency
 * @version 0.9.3
 */
class Currency {
    /**
     * Constructs a new <code>Currency</code>.
     * Currency
     * @alias module:model/Currency
     * @param code {String} Currency code in [ISO 4217-1](http://en.wikipedia.org/wiki/ISO_4217) three-character format.
     * @param decimalDigits {Number} Number of decimal digits.
     * @param name {String} Currency name.
     * @param namePlural {String} Currency plural name
     * @param rounding {Number} Currency digit rounding.
     * @param symbol {String} Currency symbol.
     * @param symbolNative {String} Currency native symbol.
     */
    constructor(code, decimalDigits, name, namePlural, rounding, symbol, symbolNative) { 
        
        Currency.initialize(this, code, decimalDigits, name, namePlural, rounding, symbol, symbolNative);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, code, decimalDigits, name, namePlural, rounding, symbol, symbolNative) { 
        obj['code'] = code;
        obj['decimalDigits'] = decimalDigits;
        obj['name'] = name;
        obj['namePlural'] = namePlural;
        obj['rounding'] = rounding;
        obj['symbol'] = symbol;
        obj['symbolNative'] = symbolNative;
    }

    /**
     * Constructs a <code>Currency</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Currency} obj Optional instance to populate.
     * @return {module:model/Currency} The populated <code>Currency</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Currency();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('decimalDigits')) {
                obj['decimalDigits'] = ApiClient.convertToType(data['decimalDigits'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('namePlural')) {
                obj['namePlural'] = ApiClient.convertToType(data['namePlural'], 'String');
            }
            if (data.hasOwnProperty('rounding')) {
                obj['rounding'] = ApiClient.convertToType(data['rounding'], 'Number');
            }
            if (data.hasOwnProperty('symbol')) {
                obj['symbol'] = ApiClient.convertToType(data['symbol'], 'String');
            }
            if (data.hasOwnProperty('symbolNative')) {
                obj['symbolNative'] = ApiClient.convertToType(data['symbolNative'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Currency</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Currency</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Currency.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['namePlural'] && !(typeof data['namePlural'] === 'string' || data['namePlural'] instanceof String)) {
            throw new Error("Expected the field `namePlural` to be a primitive type in the JSON string but got " + data['namePlural']);
        }
        // ensure the json data is a string
        if (data['symbol'] && !(typeof data['symbol'] === 'string' || data['symbol'] instanceof String)) {
            throw new Error("Expected the field `symbol` to be a primitive type in the JSON string but got " + data['symbol']);
        }
        // ensure the json data is a string
        if (data['symbolNative'] && !(typeof data['symbolNative'] === 'string' || data['symbolNative'] instanceof String)) {
            throw new Error("Expected the field `symbolNative` to be a primitive type in the JSON string but got " + data['symbolNative']);
        }

        return true;
    }


}

Currency.RequiredProperties = ["code", "decimalDigits", "name", "namePlural", "rounding", "symbol", "symbolNative"];

/**
 * Currency code in [ISO 4217-1](http://en.wikipedia.org/wiki/ISO_4217) three-character format.
 * @member {String} code
 */
Currency.prototype['code'] = undefined;

/**
 * Number of decimal digits.
 * @member {Number} decimalDigits
 */
Currency.prototype['decimalDigits'] = undefined;

/**
 * Currency name.
 * @member {String} name
 */
Currency.prototype['name'] = undefined;

/**
 * Currency plural name
 * @member {String} namePlural
 */
Currency.prototype['namePlural'] = undefined;

/**
 * Currency digit rounding.
 * @member {Number} rounding
 */
Currency.prototype['rounding'] = undefined;

/**
 * Currency symbol.
 * @member {String} symbol
 */
Currency.prototype['symbol'] = undefined;

/**
 * Currency native symbol.
 * @member {String} symbolNative
 */
Currency.prototype['symbolNative'] = undefined;






export default Currency;

