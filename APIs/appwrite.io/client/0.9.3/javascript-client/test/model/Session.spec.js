/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Appwrite);
  }
}(this, function(expect, Appwrite) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Appwrite.Session();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Session', function() {
    it('should create an instance of Session', function() {
      // uncomment below and update the code to test Session
      //var instance = new Appwrite.Session();
      //expect(instance).to.be.a(Appwrite.Session);
    });

    it('should have the property id (base name: "$id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property clientCode (base name: "clientCode")', function() {
      // uncomment below and update the code to test the property clientCode
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property clientEngine (base name: "clientEngine")', function() {
      // uncomment below and update the code to test the property clientEngine
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property clientEngineVersion (base name: "clientEngineVersion")', function() {
      // uncomment below and update the code to test the property clientEngineVersion
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property clientName (base name: "clientName")', function() {
      // uncomment below and update the code to test the property clientName
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property clientType (base name: "clientType")', function() {
      // uncomment below and update the code to test the property clientType
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property clientVersion (base name: "clientVersion")', function() {
      // uncomment below and update the code to test the property clientVersion
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property countryCode (base name: "countryCode")', function() {
      // uncomment below and update the code to test the property countryCode
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property countryName (base name: "countryName")', function() {
      // uncomment below and update the code to test the property countryName
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property current (base name: "current")', function() {
      // uncomment below and update the code to test the property current
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property deviceBrand (base name: "deviceBrand")', function() {
      // uncomment below and update the code to test the property deviceBrand
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property deviceModel (base name: "deviceModel")', function() {
      // uncomment below and update the code to test the property deviceModel
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property deviceName (base name: "deviceName")', function() {
      // uncomment below and update the code to test the property deviceName
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property expire (base name: "expire")', function() {
      // uncomment below and update the code to test the property expire
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property ip (base name: "ip")', function() {
      // uncomment below and update the code to test the property ip
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property osCode (base name: "osCode")', function() {
      // uncomment below and update the code to test the property osCode
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property osName (base name: "osName")', function() {
      // uncomment below and update the code to test the property osName
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property osVersion (base name: "osVersion")', function() {
      // uncomment below and update the code to test the property osVersion
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property provider (base name: "provider")', function() {
      // uncomment below and update the code to test the property provider
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property providerToken (base name: "providerToken")', function() {
      // uncomment below and update the code to test the property providerToken
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property providerUid (base name: "providerUid")', function() {
      // uncomment below and update the code to test the property providerUid
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "userId")', function() {
      // uncomment below and update the code to test the property userId
      //var instance = new Appwrite.Session();
      //expect(instance).to.be();
    });

  });

}));
