/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMembership.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMembership::OAIMembership(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMembership::OAIMembership() {
    this->initializeModel();
}

OAIMembership::~OAIMembership() {}

void OAIMembership::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_confirm_isSet = false;
    m_confirm_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_invited_isSet = false;
    m_invited_isValid = false;

    m_joined_isSet = false;
    m_joined_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIMembership::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMembership::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("$id")]);
    m_id_isSet = !json[QString("$id")].isNull() && m_id_isValid;

    m_confirm_isValid = ::OpenAPI::fromJsonValue(m_confirm, json[QString("confirm")]);
    m_confirm_isSet = !json[QString("confirm")].isNull() && m_confirm_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_invited_isValid = ::OpenAPI::fromJsonValue(m_invited, json[QString("invited")]);
    m_invited_isSet = !json[QString("invited")].isNull() && m_invited_isValid;

    m_joined_isValid = ::OpenAPI::fromJsonValue(m_joined, json[QString("joined")]);
    m_joined_isSet = !json[QString("joined")].isNull() && m_joined_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("teamId")]);
    m_team_id_isSet = !json[QString("teamId")].isNull() && m_team_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIMembership::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMembership::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("$id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_confirm_isSet) {
        obj.insert(QString("confirm"), ::OpenAPI::toJsonValue(m_confirm));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_invited_isSet) {
        obj.insert(QString("invited"), ::OpenAPI::toJsonValue(m_invited));
    }
    if (m_joined_isSet) {
        obj.insert(QString("joined"), ::OpenAPI::toJsonValue(m_joined));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("teamId"), ::OpenAPI::toJsonValue(m_team_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIMembership::getId() const {
    return m_id;
}
void OAIMembership::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMembership::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMembership::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIMembership::isConfirm() const {
    return m_confirm;
}
void OAIMembership::setConfirm(const bool &confirm) {
    m_confirm = confirm;
    m_confirm_isSet = true;
}

bool OAIMembership::is_confirm_Set() const{
    return m_confirm_isSet;
}

bool OAIMembership::is_confirm_Valid() const{
    return m_confirm_isValid;
}

QString OAIMembership::getEmail() const {
    return m_email;
}
void OAIMembership::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIMembership::is_email_Set() const{
    return m_email_isSet;
}

bool OAIMembership::is_email_Valid() const{
    return m_email_isValid;
}

qint32 OAIMembership::getInvited() const {
    return m_invited;
}
void OAIMembership::setInvited(const qint32 &invited) {
    m_invited = invited;
    m_invited_isSet = true;
}

bool OAIMembership::is_invited_Set() const{
    return m_invited_isSet;
}

bool OAIMembership::is_invited_Valid() const{
    return m_invited_isValid;
}

qint32 OAIMembership::getJoined() const {
    return m_joined;
}
void OAIMembership::setJoined(const qint32 &joined) {
    m_joined = joined;
    m_joined_isSet = true;
}

bool OAIMembership::is_joined_Set() const{
    return m_joined_isSet;
}

bool OAIMembership::is_joined_Valid() const{
    return m_joined_isValid;
}

QString OAIMembership::getName() const {
    return m_name;
}
void OAIMembership::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMembership::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMembership::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIMembership::getRoles() const {
    return m_roles;
}
void OAIMembership::setRoles(const QList<QString> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIMembership::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIMembership::is_roles_Valid() const{
    return m_roles_isValid;
}

QString OAIMembership::getTeamId() const {
    return m_team_id;
}
void OAIMembership::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIMembership::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIMembership::is_team_id_Valid() const{
    return m_team_id_isValid;
}

QString OAIMembership::getUserId() const {
    return m_user_id;
}
void OAIMembership::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIMembership::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIMembership::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIMembership::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_joined_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMembership::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_confirm_isValid && m_email_isValid && m_invited_isValid && m_joined_isValid && m_name_isValid && m_roles_isValid && m_team_id_isValid && m_user_id_isValid && true;
}

} // namespace OpenAPI
