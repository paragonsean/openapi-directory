/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_email_verification_isSet = false;
    m_email_verification_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_password_update_isSet = false;
    m_password_update_isValid = false;

    m_prefs_isSet = false;
    m_prefs_isValid = false;

    m_registration_isSet = false;
    m_registration_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("$id")]);
    m_id_isSet = !json[QString("$id")].isNull() && m_id_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_email_verification_isValid = ::OpenAPI::fromJsonValue(m_email_verification, json[QString("emailVerification")]);
    m_email_verification_isSet = !json[QString("emailVerification")].isNull() && m_email_verification_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_password_update_isValid = ::OpenAPI::fromJsonValue(m_password_update, json[QString("passwordUpdate")]);
    m_password_update_isSet = !json[QString("passwordUpdate")].isNull() && m_password_update_isValid;

    if(json["prefs"].isArray()){
        auto arr = json["prefs"].toArray();
        m_prefs_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QJsonValue> item;
                m_prefs_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_prefs_isSet = !jval.isNull() && m_prefs_isValid;
                m_prefs.push_back(item);
            }
        }
    }

    m_registration_isValid = ::OpenAPI::fromJsonValue(m_registration, json[QString("registration")]);
    m_registration_isSet = !json[QString("registration")].isNull() && m_registration_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("$id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_email_verification_isSet) {
        obj.insert(QString("emailVerification"), ::OpenAPI::toJsonValue(m_email_verification));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_password_update_isSet) {
        obj.insert(QString("passwordUpdate"), ::OpenAPI::toJsonValue(m_password_update));
    }
    if (m_prefs.size() > 0) {
        
        obj.insert(QString("prefs"), toJsonValue(m_prefs));
    }
    if (m_registration_isSet) {
        obj.insert(QString("registration"), ::OpenAPI::toJsonValue(m_registration));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUser::getEmail() const {
    return m_email;
}
void OAIUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser::is_email_Valid() const{
    return m_email_isValid;
}

bool OAIUser::isEmailVerification() const {
    return m_email_verification;
}
void OAIUser::setEmailVerification(const bool &email_verification) {
    m_email_verification = email_verification;
    m_email_verification_isSet = true;
}

bool OAIUser::is_email_verification_Set() const{
    return m_email_verification_isSet;
}

bool OAIUser::is_email_verification_Valid() const{
    return m_email_verification_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIUser::getPasswordUpdate() const {
    return m_password_update;
}
void OAIUser::setPasswordUpdate(const qint32 &password_update) {
    m_password_update = password_update;
    m_password_update_isSet = true;
}

bool OAIUser::is_password_update_Set() const{
    return m_password_update_isSet;
}

bool OAIUser::is_password_update_Valid() const{
    return m_password_update_isValid;
}

QList<QMap> OAIUser::getPrefs() const {
    return m_prefs;
}
void OAIUser::setPrefs(const QList<QMap> &prefs) {
    m_prefs = prefs;
    m_prefs_isSet = true;
}

bool OAIUser::is_prefs_Set() const{
    return m_prefs_isSet;
}

bool OAIUser::is_prefs_Valid() const{
    return m_prefs_isValid;
}

qint32 OAIUser::getRegistration() const {
    return m_registration;
}
void OAIUser::setRegistration(const qint32 &registration) {
    m_registration = registration;
    m_registration_isSet = true;
}

bool OAIUser::is_registration_Set() const{
    return m_registration_isSet;
}

bool OAIUser::is_registration_Valid() const{
    return m_registration_isValid;
}

qint32 OAIUser::getStatus() const {
    return m_status;
}
void OAIUser::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUser::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUser::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_verification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_email_isValid && m_email_verification_isValid && m_name_isValid && m_password_update_isValid && m_prefs_isValid && m_registration_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
