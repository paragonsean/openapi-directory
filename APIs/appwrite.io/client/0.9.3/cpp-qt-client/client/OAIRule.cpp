/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRule::OAIRule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRule::OAIRule() {
    this->initializeModel();
}

OAIRule::~OAIRule() {}

void OAIRule::initializeModel() {

    m_collection_isSet = false;
    m_collection_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_array_isSet = false;
    m_array_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_list_isSet = false;
    m_list_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRule::fromJsonObject(QJsonObject json) {

    m_collection_isValid = ::OpenAPI::fromJsonValue(m_collection, json[QString("$collection")]);
    m_collection_isSet = !json[QString("$collection")].isNull() && m_collection_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("$id")]);
    m_id_isSet = !json[QString("$id")].isNull() && m_id_isValid;

    m_array_isValid = ::OpenAPI::fromJsonValue(m_array, json[QString("array")]);
    m_array_isSet = !json[QString("array")].isNull() && m_array_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_list_isValid = ::OpenAPI::fromJsonValue(m_list, json[QString("list")]);
    m_list_isSet = !json[QString("list")].isNull() && m_list_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRule::asJsonObject() const {
    QJsonObject obj;
    if (m_collection_isSet) {
        obj.insert(QString("$collection"), ::OpenAPI::toJsonValue(m_collection));
    }
    if (m_id_isSet) {
        obj.insert(QString("$id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_array_isSet) {
        obj.insert(QString("array"), ::OpenAPI::toJsonValue(m_array));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_list.size() > 0) {
        obj.insert(QString("list"), ::OpenAPI::toJsonValue(m_list));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIRule::getCollection() const {
    return m_collection;
}
void OAIRule::setCollection(const QString &collection) {
    m_collection = collection;
    m_collection_isSet = true;
}

bool OAIRule::is_collection_Set() const{
    return m_collection_isSet;
}

bool OAIRule::is_collection_Valid() const{
    return m_collection_isValid;
}

QString OAIRule::getId() const {
    return m_id;
}
void OAIRule::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRule::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRule::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIRule::isArray() const {
    return m_array;
}
void OAIRule::setArray(const bool &array) {
    m_array = array;
    m_array_isSet = true;
}

bool OAIRule::is_array_Set() const{
    return m_array_isSet;
}

bool OAIRule::is_array_Valid() const{
    return m_array_isValid;
}

QString OAIRule::getRDefault() const {
    return m_r_default;
}
void OAIRule::setRDefault(const QString &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIRule::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIRule::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QString OAIRule::getKey() const {
    return m_key;
}
void OAIRule::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIRule::is_key_Set() const{
    return m_key_isSet;
}

bool OAIRule::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIRule::getLabel() const {
    return m_label;
}
void OAIRule::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIRule::is_label_Set() const{
    return m_label_isSet;
}

bool OAIRule::is_label_Valid() const{
    return m_label_isValid;
}

QList<QString> OAIRule::getList() const {
    return m_list;
}
void OAIRule::setList(const QList<QString> &list) {
    m_list = list;
    m_list_isSet = true;
}

bool OAIRule::is_list_Set() const{
    return m_list_isSet;
}

bool OAIRule::is_list_Valid() const{
    return m_list_isValid;
}

bool OAIRule::isRequired() const {
    return m_required;
}
void OAIRule::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIRule::is_required_Set() const{
    return m_required_isSet;
}

bool OAIRule::is_required_Valid() const{
    return m_required_isValid;
}

QString OAIRule::getType() const {
    return m_type;
}
void OAIRule::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRule::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRule::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_array_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRule::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_collection_isValid && m_id_isValid && m_array_isValid && m_r_default_isValid && m_key_isValid && m_label_isValid && m_list_isValid && m_required_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
