/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAILocaleApi_H
#define OAI_OAILocaleApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIContinentList.h"
#include "OAICountryList.h"
#include "OAICurrencyList.h"
#include "OAILanguageList.h"
#include "OAILocale.h"
#include "OAIPhoneList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAILocaleApi : public QObject {
    Q_OBJECT

public:
    OAILocaleApi(const int timeOut = 0);
    ~OAILocaleApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void localeGet();


    virtual void localeGetContinents();


    virtual void localeGetCountries();


    virtual void localeGetCountriesEU();


    virtual void localeGetCountriesPhones();


    virtual void localeGetCurrencies();


    virtual void localeGetLanguages();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void localeGetCallback(OAIHttpRequestWorker *worker);
    void localeGetContinentsCallback(OAIHttpRequestWorker *worker);
    void localeGetCountriesCallback(OAIHttpRequestWorker *worker);
    void localeGetCountriesEUCallback(OAIHttpRequestWorker *worker);
    void localeGetCountriesPhonesCallback(OAIHttpRequestWorker *worker);
    void localeGetCurrenciesCallback(OAIHttpRequestWorker *worker);
    void localeGetLanguagesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void localeGetSignal(OAILocale summary);
    void localeGetContinentsSignal(OAIContinentList summary);
    void localeGetCountriesSignal(OAICountryList summary);
    void localeGetCountriesEUSignal(OAICountryList summary);
    void localeGetCountriesPhonesSignal(OAIPhoneList summary);
    void localeGetCurrenciesSignal(OAICurrencyList summary);
    void localeGetLanguagesSignal(OAILanguageList summary);


    void localeGetSignalFull(OAIHttpRequestWorker *worker, OAILocale summary);
    void localeGetContinentsSignalFull(OAIHttpRequestWorker *worker, OAIContinentList summary);
    void localeGetCountriesSignalFull(OAIHttpRequestWorker *worker, OAICountryList summary);
    void localeGetCountriesEUSignalFull(OAIHttpRequestWorker *worker, OAICountryList summary);
    void localeGetCountriesPhonesSignalFull(OAIHttpRequestWorker *worker, OAIPhoneList summary);
    void localeGetCurrenciesSignalFull(OAIHttpRequestWorker *worker, OAICurrencyList summary);
    void localeGetLanguagesSignalFull(OAIHttpRequestWorker *worker, OAILanguageList summary);

    Q_DECL_DEPRECATED_X("Use localeGetSignalError() instead")
    void localeGetSignalE(OAILocale summary, QNetworkReply::NetworkError error_type, QString error_str);
    void localeGetSignalError(OAILocale summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use localeGetContinentsSignalError() instead")
    void localeGetContinentsSignalE(OAIContinentList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void localeGetContinentsSignalError(OAIContinentList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use localeGetCountriesSignalError() instead")
    void localeGetCountriesSignalE(OAICountryList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void localeGetCountriesSignalError(OAICountryList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use localeGetCountriesEUSignalError() instead")
    void localeGetCountriesEUSignalE(OAICountryList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void localeGetCountriesEUSignalError(OAICountryList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use localeGetCountriesPhonesSignalError() instead")
    void localeGetCountriesPhonesSignalE(OAIPhoneList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void localeGetCountriesPhonesSignalError(OAIPhoneList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use localeGetCurrenciesSignalError() instead")
    void localeGetCurrenciesSignalE(OAICurrencyList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void localeGetCurrenciesSignalError(OAICurrencyList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use localeGetLanguagesSignalError() instead")
    void localeGetLanguagesSignalE(OAILanguageList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void localeGetLanguagesSignalError(OAILanguageList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use localeGetSignalErrorFull() instead")
    void localeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void localeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use localeGetContinentsSignalErrorFull() instead")
    void localeGetContinentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void localeGetContinentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use localeGetCountriesSignalErrorFull() instead")
    void localeGetCountriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void localeGetCountriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use localeGetCountriesEUSignalErrorFull() instead")
    void localeGetCountriesEUSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void localeGetCountriesEUSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use localeGetCountriesPhonesSignalErrorFull() instead")
    void localeGetCountriesPhonesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void localeGetCountriesPhonesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use localeGetCurrenciesSignalErrorFull() instead")
    void localeGetCurrenciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void localeGetCurrenciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use localeGetLanguagesSignalErrorFull() instead")
    void localeGetLanguagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void localeGetLanguagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
