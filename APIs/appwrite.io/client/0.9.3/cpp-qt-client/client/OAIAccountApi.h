/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountApi_H
#define OAI_OAIAccountApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountCreateRecovery_request.h"
#include "OAIAccountCreateVerification_request.h"
#include "OAIAccountCreate_request.h"
#include "OAIAccountUpdateEmail_request.h"
#include "OAIAccountUpdateName_request.h"
#include "OAIAccountUpdatePassword_request.h"
#include "OAIAccountUpdatePrefs_request.h"
#include "OAIAccountUpdateRecovery_request.h"
#include "OAIAccountUpdateVerification_request.h"
#include "OAIJwt.h"
#include "OAILogList.h"
#include "OAISession.h"
#include "OAISessionList.h"
#include "OAIToken.h"
#include "OAIUser.h"
#include <QJsonValue>
#include <QMap>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountApi : public QObject {
    Q_OBJECT

public:
    OAIAccountApi(const int timeOut = 0);
    ~OAIAccountApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_account_create_request OAIAccountCreate_request [optional]
    */
    virtual void accountCreate(const ::OpenAPI::OptionalParam<OAIAccountCreate_request> &oai_account_create_request = ::OpenAPI::OptionalParam<OAIAccountCreate_request>());


    virtual void accountCreateAnonymousSession();


    virtual void accountCreateJWT();

    /**
    * @param[in]  provider QString [required]
    * @param[in]  success QString [optional]
    * @param[in]  failure QString [optional]
    * @param[in]  scopes QList<QString> [optional]
    */
    virtual void accountCreateOAuth2Session(const QString &provider, const ::OpenAPI::OptionalParam<QString> &success = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &failure = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &scopes = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  oai_account_create_recovery_request OAIAccountCreateRecovery_request [optional]
    */
    virtual void accountCreateRecovery(const ::OpenAPI::OptionalParam<OAIAccountCreateRecovery_request> &oai_account_create_recovery_request = ::OpenAPI::OptionalParam<OAIAccountCreateRecovery_request>());

    /**
    * @param[in]  oai_account_update_email_request OAIAccountUpdateEmail_request [optional]
    */
    virtual void accountCreateSession(const ::OpenAPI::OptionalParam<OAIAccountUpdateEmail_request> &oai_account_update_email_request = ::OpenAPI::OptionalParam<OAIAccountUpdateEmail_request>());

    /**
    * @param[in]  oai_account_create_verification_request OAIAccountCreateVerification_request [optional]
    */
    virtual void accountCreateVerification(const ::OpenAPI::OptionalParam<OAIAccountCreateVerification_request> &oai_account_create_verification_request = ::OpenAPI::OptionalParam<OAIAccountCreateVerification_request>());


    virtual void accountDelete();

    /**
    * @param[in]  session_id QString [required]
    */
    virtual void accountDeleteSession(const QString &session_id);


    virtual void accountDeleteSessions();


    virtual void accountGet();


    virtual void accountGetLogs();


    virtual void accountGetPrefs();

    /**
    * @param[in]  session_id QString [required]
    */
    virtual void accountGetSession(const QString &session_id);


    virtual void accountGetSessions();

    /**
    * @param[in]  oai_account_update_email_request OAIAccountUpdateEmail_request [optional]
    */
    virtual void accountUpdateEmail(const ::OpenAPI::OptionalParam<OAIAccountUpdateEmail_request> &oai_account_update_email_request = ::OpenAPI::OptionalParam<OAIAccountUpdateEmail_request>());

    /**
    * @param[in]  oai_account_update_name_request OAIAccountUpdateName_request [optional]
    */
    virtual void accountUpdateName(const ::OpenAPI::OptionalParam<OAIAccountUpdateName_request> &oai_account_update_name_request = ::OpenAPI::OptionalParam<OAIAccountUpdateName_request>());

    /**
    * @param[in]  oai_account_update_password_request OAIAccountUpdatePassword_request [optional]
    */
    virtual void accountUpdatePassword(const ::OpenAPI::OptionalParam<OAIAccountUpdatePassword_request> &oai_account_update_password_request = ::OpenAPI::OptionalParam<OAIAccountUpdatePassword_request>());

    /**
    * @param[in]  oai_account_update_prefs_request OAIAccountUpdatePrefs_request [optional]
    */
    virtual void accountUpdatePrefs(const ::OpenAPI::OptionalParam<OAIAccountUpdatePrefs_request> &oai_account_update_prefs_request = ::OpenAPI::OptionalParam<OAIAccountUpdatePrefs_request>());

    /**
    * @param[in]  oai_account_update_recovery_request OAIAccountUpdateRecovery_request [optional]
    */
    virtual void accountUpdateRecovery(const ::OpenAPI::OptionalParam<OAIAccountUpdateRecovery_request> &oai_account_update_recovery_request = ::OpenAPI::OptionalParam<OAIAccountUpdateRecovery_request>());

    /**
    * @param[in]  oai_account_update_verification_request OAIAccountUpdateVerification_request [optional]
    */
    virtual void accountUpdateVerification(const ::OpenAPI::OptionalParam<OAIAccountUpdateVerification_request> &oai_account_update_verification_request = ::OpenAPI::OptionalParam<OAIAccountUpdateVerification_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountCreateCallback(OAIHttpRequestWorker *worker);
    void accountCreateAnonymousSessionCallback(OAIHttpRequestWorker *worker);
    void accountCreateJWTCallback(OAIHttpRequestWorker *worker);
    void accountCreateOAuth2SessionCallback(OAIHttpRequestWorker *worker);
    void accountCreateRecoveryCallback(OAIHttpRequestWorker *worker);
    void accountCreateSessionCallback(OAIHttpRequestWorker *worker);
    void accountCreateVerificationCallback(OAIHttpRequestWorker *worker);
    void accountDeleteCallback(OAIHttpRequestWorker *worker);
    void accountDeleteSessionCallback(OAIHttpRequestWorker *worker);
    void accountDeleteSessionsCallback(OAIHttpRequestWorker *worker);
    void accountGetCallback(OAIHttpRequestWorker *worker);
    void accountGetLogsCallback(OAIHttpRequestWorker *worker);
    void accountGetPrefsCallback(OAIHttpRequestWorker *worker);
    void accountGetSessionCallback(OAIHttpRequestWorker *worker);
    void accountGetSessionsCallback(OAIHttpRequestWorker *worker);
    void accountUpdateEmailCallback(OAIHttpRequestWorker *worker);
    void accountUpdateNameCallback(OAIHttpRequestWorker *worker);
    void accountUpdatePasswordCallback(OAIHttpRequestWorker *worker);
    void accountUpdatePrefsCallback(OAIHttpRequestWorker *worker);
    void accountUpdateRecoveryCallback(OAIHttpRequestWorker *worker);
    void accountUpdateVerificationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountCreateSignal(OAIUser summary);
    void accountCreateAnonymousSessionSignal(OAISession summary);
    void accountCreateJWTSignal(OAIJwt summary);
    void accountCreateOAuth2SessionSignal();
    void accountCreateRecoverySignal(OAIToken summary);
    void accountCreateSessionSignal(OAISession summary);
    void accountCreateVerificationSignal(OAIToken summary);
    void accountDeleteSignal();
    void accountDeleteSessionSignal();
    void accountDeleteSessionsSignal();
    void accountGetSignal(OAIUser summary);
    void accountGetLogsSignal(OAILogList summary);
    void accountGetPrefsSignal(QMap<QString, QJsonValue> summary);
    void accountGetSessionSignal(OAISession summary);
    void accountGetSessionsSignal(OAISessionList summary);
    void accountUpdateEmailSignal(OAIUser summary);
    void accountUpdateNameSignal(OAIUser summary);
    void accountUpdatePasswordSignal(OAIUser summary);
    void accountUpdatePrefsSignal(OAIUser summary);
    void accountUpdateRecoverySignal(OAIToken summary);
    void accountUpdateVerificationSignal(OAIToken summary);


    void accountCreateSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void accountCreateAnonymousSessionSignalFull(OAIHttpRequestWorker *worker, OAISession summary);
    void accountCreateJWTSignalFull(OAIHttpRequestWorker *worker, OAIJwt summary);
    void accountCreateOAuth2SessionSignalFull(OAIHttpRequestWorker *worker);
    void accountCreateRecoverySignalFull(OAIHttpRequestWorker *worker, OAIToken summary);
    void accountCreateSessionSignalFull(OAIHttpRequestWorker *worker, OAISession summary);
    void accountCreateVerificationSignalFull(OAIHttpRequestWorker *worker, OAIToken summary);
    void accountDeleteSignalFull(OAIHttpRequestWorker *worker);
    void accountDeleteSessionSignalFull(OAIHttpRequestWorker *worker);
    void accountDeleteSessionsSignalFull(OAIHttpRequestWorker *worker);
    void accountGetSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void accountGetLogsSignalFull(OAIHttpRequestWorker *worker, OAILogList summary);
    void accountGetPrefsSignalFull(OAIHttpRequestWorker *worker, QMap<QString, QJsonValue> summary);
    void accountGetSessionSignalFull(OAIHttpRequestWorker *worker, OAISession summary);
    void accountGetSessionsSignalFull(OAIHttpRequestWorker *worker, OAISessionList summary);
    void accountUpdateEmailSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void accountUpdateNameSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void accountUpdatePasswordSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void accountUpdatePrefsSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void accountUpdateRecoverySignalFull(OAIHttpRequestWorker *worker, OAIToken summary);
    void accountUpdateVerificationSignalFull(OAIHttpRequestWorker *worker, OAIToken summary);

    Q_DECL_DEPRECATED_X("Use accountCreateSignalError() instead")
    void accountCreateSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountCreateAnonymousSessionSignalError() instead")
    void accountCreateAnonymousSessionSignalE(OAISession summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateAnonymousSessionSignalError(OAISession summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountCreateJWTSignalError() instead")
    void accountCreateJWTSignalE(OAIJwt summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateJWTSignalError(OAIJwt summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountCreateOAuth2SessionSignalError() instead")
    void accountCreateOAuth2SessionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateOAuth2SessionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountCreateRecoverySignalError() instead")
    void accountCreateRecoverySignalE(OAIToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateRecoverySignalError(OAIToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountCreateSessionSignalError() instead")
    void accountCreateSessionSignalE(OAISession summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateSessionSignalError(OAISession summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountCreateVerificationSignalError() instead")
    void accountCreateVerificationSignalE(OAIToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateVerificationSignalError(OAIToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountDeleteSignalError() instead")
    void accountDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountDeleteSessionSignalError() instead")
    void accountDeleteSessionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountDeleteSessionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountDeleteSessionsSignalError() instead")
    void accountDeleteSessionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountDeleteSessionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetSignalError() instead")
    void accountGetSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetLogsSignalError() instead")
    void accountGetLogsSignalE(OAILogList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetLogsSignalError(OAILogList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetPrefsSignalError() instead")
    void accountGetPrefsSignalE(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetPrefsSignalError(QMap<QString, QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetSessionSignalError() instead")
    void accountGetSessionSignalE(OAISession summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetSessionSignalError(OAISession summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetSessionsSignalError() instead")
    void accountGetSessionsSignalE(OAISessionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetSessionsSignalError(OAISessionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountUpdateEmailSignalError() instead")
    void accountUpdateEmailSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateEmailSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountUpdateNameSignalError() instead")
    void accountUpdateNameSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateNameSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountUpdatePasswordSignalError() instead")
    void accountUpdatePasswordSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdatePasswordSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountUpdatePrefsSignalError() instead")
    void accountUpdatePrefsSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdatePrefsSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountUpdateRecoverySignalError() instead")
    void accountUpdateRecoverySignalE(OAIToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateRecoverySignalError(OAIToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountUpdateVerificationSignalError() instead")
    void accountUpdateVerificationSignalE(OAIToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateVerificationSignalError(OAIToken summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountCreateSignalErrorFull() instead")
    void accountCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountCreateAnonymousSessionSignalErrorFull() instead")
    void accountCreateAnonymousSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateAnonymousSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountCreateJWTSignalErrorFull() instead")
    void accountCreateJWTSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateJWTSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountCreateOAuth2SessionSignalErrorFull() instead")
    void accountCreateOAuth2SessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateOAuth2SessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountCreateRecoverySignalErrorFull() instead")
    void accountCreateRecoverySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateRecoverySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountCreateSessionSignalErrorFull() instead")
    void accountCreateSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountCreateVerificationSignalErrorFull() instead")
    void accountCreateVerificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountCreateVerificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountDeleteSignalErrorFull() instead")
    void accountDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountDeleteSessionSignalErrorFull() instead")
    void accountDeleteSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountDeleteSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountDeleteSessionsSignalErrorFull() instead")
    void accountDeleteSessionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountDeleteSessionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetSignalErrorFull() instead")
    void accountGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetLogsSignalErrorFull() instead")
    void accountGetLogsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetLogsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetPrefsSignalErrorFull() instead")
    void accountGetPrefsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetPrefsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetSessionSignalErrorFull() instead")
    void accountGetSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountGetSessionsSignalErrorFull() instead")
    void accountGetSessionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountGetSessionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountUpdateEmailSignalErrorFull() instead")
    void accountUpdateEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountUpdateNameSignalErrorFull() instead")
    void accountUpdateNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountUpdatePasswordSignalErrorFull() instead")
    void accountUpdatePasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdatePasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountUpdatePrefsSignalErrorFull() instead")
    void accountUpdatePrefsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdatePrefsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountUpdateRecoverySignalErrorFull() instead")
    void accountUpdateRecoverySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateRecoverySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountUpdateVerificationSignalErrorFull() instead")
    void accountUpdateVerificationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountUpdateVerificationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
