/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILog::OAILog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILog::OAILog() {
    this->initializeModel();
}

OAILog::~OAILog() {}

void OAILog::initializeModel() {

    m_client_code_isSet = false;
    m_client_code_isValid = false;

    m_client_engine_isSet = false;
    m_client_engine_isValid = false;

    m_client_engine_version_isSet = false;
    m_client_engine_version_isValid = false;

    m_client_name_isSet = false;
    m_client_name_isValid = false;

    m_client_type_isSet = false;
    m_client_type_isValid = false;

    m_client_version_isSet = false;
    m_client_version_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_name_isSet = false;
    m_country_name_isValid = false;

    m_device_brand_isSet = false;
    m_device_brand_isValid = false;

    m_device_model_isSet = false;
    m_device_model_isValid = false;

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_os_code_isSet = false;
    m_os_code_isValid = false;

    m_os_name_isSet = false;
    m_os_name_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAILog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILog::fromJsonObject(QJsonObject json) {

    m_client_code_isValid = ::OpenAPI::fromJsonValue(m_client_code, json[QString("clientCode")]);
    m_client_code_isSet = !json[QString("clientCode")].isNull() && m_client_code_isValid;

    m_client_engine_isValid = ::OpenAPI::fromJsonValue(m_client_engine, json[QString("clientEngine")]);
    m_client_engine_isSet = !json[QString("clientEngine")].isNull() && m_client_engine_isValid;

    m_client_engine_version_isValid = ::OpenAPI::fromJsonValue(m_client_engine_version, json[QString("clientEngineVersion")]);
    m_client_engine_version_isSet = !json[QString("clientEngineVersion")].isNull() && m_client_engine_version_isValid;

    m_client_name_isValid = ::OpenAPI::fromJsonValue(m_client_name, json[QString("clientName")]);
    m_client_name_isSet = !json[QString("clientName")].isNull() && m_client_name_isValid;

    m_client_type_isValid = ::OpenAPI::fromJsonValue(m_client_type, json[QString("clientType")]);
    m_client_type_isSet = !json[QString("clientType")].isNull() && m_client_type_isValid;

    m_client_version_isValid = ::OpenAPI::fromJsonValue(m_client_version, json[QString("clientVersion")]);
    m_client_version_isSet = !json[QString("clientVersion")].isNull() && m_client_version_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_country_name_isValid = ::OpenAPI::fromJsonValue(m_country_name, json[QString("countryName")]);
    m_country_name_isSet = !json[QString("countryName")].isNull() && m_country_name_isValid;

    m_device_brand_isValid = ::OpenAPI::fromJsonValue(m_device_brand, json[QString("deviceBrand")]);
    m_device_brand_isSet = !json[QString("deviceBrand")].isNull() && m_device_brand_isValid;

    m_device_model_isValid = ::OpenAPI::fromJsonValue(m_device_model, json[QString("deviceModel")]);
    m_device_model_isSet = !json[QString("deviceModel")].isNull() && m_device_model_isValid;

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("deviceName")]);
    m_device_name_isSet = !json[QString("deviceName")].isNull() && m_device_name_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_os_code_isValid = ::OpenAPI::fromJsonValue(m_os_code, json[QString("osCode")]);
    m_os_code_isSet = !json[QString("osCode")].isNull() && m_os_code_isValid;

    m_os_name_isValid = ::OpenAPI::fromJsonValue(m_os_name, json[QString("osName")]);
    m_os_name_isSet = !json[QString("osName")].isNull() && m_os_name_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString OAILog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILog::asJsonObject() const {
    QJsonObject obj;
    if (m_client_code_isSet) {
        obj.insert(QString("clientCode"), ::OpenAPI::toJsonValue(m_client_code));
    }
    if (m_client_engine_isSet) {
        obj.insert(QString("clientEngine"), ::OpenAPI::toJsonValue(m_client_engine));
    }
    if (m_client_engine_version_isSet) {
        obj.insert(QString("clientEngineVersion"), ::OpenAPI::toJsonValue(m_client_engine_version));
    }
    if (m_client_name_isSet) {
        obj.insert(QString("clientName"), ::OpenAPI::toJsonValue(m_client_name));
    }
    if (m_client_type_isSet) {
        obj.insert(QString("clientType"), ::OpenAPI::toJsonValue(m_client_type));
    }
    if (m_client_version_isSet) {
        obj.insert(QString("clientVersion"), ::OpenAPI::toJsonValue(m_client_version));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_name_isSet) {
        obj.insert(QString("countryName"), ::OpenAPI::toJsonValue(m_country_name));
    }
    if (m_device_brand_isSet) {
        obj.insert(QString("deviceBrand"), ::OpenAPI::toJsonValue(m_device_brand));
    }
    if (m_device_model_isSet) {
        obj.insert(QString("deviceModel"), ::OpenAPI::toJsonValue(m_device_model));
    }
    if (m_device_name_isSet) {
        obj.insert(QString("deviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_os_code_isSet) {
        obj.insert(QString("osCode"), ::OpenAPI::toJsonValue(m_os_code));
    }
    if (m_os_name_isSet) {
        obj.insert(QString("osName"), ::OpenAPI::toJsonValue(m_os_name));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

QString OAILog::getClientCode() const {
    return m_client_code;
}
void OAILog::setClientCode(const QString &client_code) {
    m_client_code = client_code;
    m_client_code_isSet = true;
}

bool OAILog::is_client_code_Set() const{
    return m_client_code_isSet;
}

bool OAILog::is_client_code_Valid() const{
    return m_client_code_isValid;
}

QString OAILog::getClientEngine() const {
    return m_client_engine;
}
void OAILog::setClientEngine(const QString &client_engine) {
    m_client_engine = client_engine;
    m_client_engine_isSet = true;
}

bool OAILog::is_client_engine_Set() const{
    return m_client_engine_isSet;
}

bool OAILog::is_client_engine_Valid() const{
    return m_client_engine_isValid;
}

QString OAILog::getClientEngineVersion() const {
    return m_client_engine_version;
}
void OAILog::setClientEngineVersion(const QString &client_engine_version) {
    m_client_engine_version = client_engine_version;
    m_client_engine_version_isSet = true;
}

bool OAILog::is_client_engine_version_Set() const{
    return m_client_engine_version_isSet;
}

bool OAILog::is_client_engine_version_Valid() const{
    return m_client_engine_version_isValid;
}

QString OAILog::getClientName() const {
    return m_client_name;
}
void OAILog::setClientName(const QString &client_name) {
    m_client_name = client_name;
    m_client_name_isSet = true;
}

bool OAILog::is_client_name_Set() const{
    return m_client_name_isSet;
}

bool OAILog::is_client_name_Valid() const{
    return m_client_name_isValid;
}

QString OAILog::getClientType() const {
    return m_client_type;
}
void OAILog::setClientType(const QString &client_type) {
    m_client_type = client_type;
    m_client_type_isSet = true;
}

bool OAILog::is_client_type_Set() const{
    return m_client_type_isSet;
}

bool OAILog::is_client_type_Valid() const{
    return m_client_type_isValid;
}

QString OAILog::getClientVersion() const {
    return m_client_version;
}
void OAILog::setClientVersion(const QString &client_version) {
    m_client_version = client_version;
    m_client_version_isSet = true;
}

bool OAILog::is_client_version_Set() const{
    return m_client_version_isSet;
}

bool OAILog::is_client_version_Valid() const{
    return m_client_version_isValid;
}

QString OAILog::getCountryCode() const {
    return m_country_code;
}
void OAILog::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAILog::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAILog::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAILog::getCountryName() const {
    return m_country_name;
}
void OAILog::setCountryName(const QString &country_name) {
    m_country_name = country_name;
    m_country_name_isSet = true;
}

bool OAILog::is_country_name_Set() const{
    return m_country_name_isSet;
}

bool OAILog::is_country_name_Valid() const{
    return m_country_name_isValid;
}

QString OAILog::getDeviceBrand() const {
    return m_device_brand;
}
void OAILog::setDeviceBrand(const QString &device_brand) {
    m_device_brand = device_brand;
    m_device_brand_isSet = true;
}

bool OAILog::is_device_brand_Set() const{
    return m_device_brand_isSet;
}

bool OAILog::is_device_brand_Valid() const{
    return m_device_brand_isValid;
}

QString OAILog::getDeviceModel() const {
    return m_device_model;
}
void OAILog::setDeviceModel(const QString &device_model) {
    m_device_model = device_model;
    m_device_model_isSet = true;
}

bool OAILog::is_device_model_Set() const{
    return m_device_model_isSet;
}

bool OAILog::is_device_model_Valid() const{
    return m_device_model_isValid;
}

QString OAILog::getDeviceName() const {
    return m_device_name;
}
void OAILog::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAILog::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAILog::is_device_name_Valid() const{
    return m_device_name_isValid;
}

QString OAILog::getEvent() const {
    return m_event;
}
void OAILog::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAILog::is_event_Set() const{
    return m_event_isSet;
}

bool OAILog::is_event_Valid() const{
    return m_event_isValid;
}

QString OAILog::getIp() const {
    return m_ip;
}
void OAILog::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAILog::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAILog::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAILog::getOsCode() const {
    return m_os_code;
}
void OAILog::setOsCode(const QString &os_code) {
    m_os_code = os_code;
    m_os_code_isSet = true;
}

bool OAILog::is_os_code_Set() const{
    return m_os_code_isSet;
}

bool OAILog::is_os_code_Valid() const{
    return m_os_code_isValid;
}

QString OAILog::getOsName() const {
    return m_os_name;
}
void OAILog::setOsName(const QString &os_name) {
    m_os_name = os_name;
    m_os_name_isSet = true;
}

bool OAILog::is_os_name_Set() const{
    return m_os_name_isSet;
}

bool OAILog::is_os_name_Valid() const{
    return m_os_name_isValid;
}

QString OAILog::getOsVersion() const {
    return m_os_version;
}
void OAILog::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAILog::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAILog::is_os_version_Valid() const{
    return m_os_version_isValid;
}

qint32 OAILog::getTime() const {
    return m_time;
}
void OAILog::setTime(const qint32 &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAILog::is_time_Set() const{
    return m_time_isSet;
}

bool OAILog::is_time_Valid() const{
    return m_time_isValid;
}

bool OAILog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_engine_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILog::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_code_isValid && m_client_engine_isValid && m_client_engine_version_isValid && m_client_name_isValid && m_client_type_isValid && m_client_version_isValid && m_country_code_isValid && m_country_name_isValid && m_device_brand_isValid && m_device_model_isValid && m_device_name_isValid && m_event_isValid && m_ip_isValid && m_os_code_isValid && m_os_name_isValid && m_os_version_isValid && m_time_isValid && true;
}

} // namespace OpenAPI
