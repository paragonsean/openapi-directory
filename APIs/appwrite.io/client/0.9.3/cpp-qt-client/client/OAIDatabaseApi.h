/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDatabaseApi_H
#define OAI_OAIDatabaseApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDatabaseCreateDocument_request.h"
#include "OAIDatabaseUpdateDocument_request.h"
#include "OAIDocument.h"
#include "OAIDocumentList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDatabaseApi : public QObject {
    Q_OBJECT

public:
    OAIDatabaseApi(const int timeOut = 0);
    ~OAIDatabaseApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  oai_database_create_document_request OAIDatabaseCreateDocument_request [optional]
    */
    virtual void databaseCreateDocument(const QString &collection_id, const ::OpenAPI::OptionalParam<OAIDatabaseCreateDocument_request> &oai_database_create_document_request = ::OpenAPI::OptionalParam<OAIDatabaseCreateDocument_request>());

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  document_id QString [required]
    */
    virtual void databaseDeleteDocument(const QString &collection_id, const QString &document_id);

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  document_id QString [required]
    */
    virtual void databaseGetDocument(const QString &collection_id, const QString &document_id);

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  filters QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  order_field QString [optional]
    * @param[in]  order_type QString [optional]
    * @param[in]  order_cast QString [optional]
    * @param[in]  search QString [optional]
    */
    virtual void databaseListDocuments(const QString &collection_id, const ::OpenAPI::OptionalParam<QList<QString>> &filters = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_field = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_cast = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  document_id QString [required]
    * @param[in]  oai_database_update_document_request OAIDatabaseUpdateDocument_request [optional]
    */
    virtual void databaseUpdateDocument(const QString &collection_id, const QString &document_id, const ::OpenAPI::OptionalParam<OAIDatabaseUpdateDocument_request> &oai_database_update_document_request = ::OpenAPI::OptionalParam<OAIDatabaseUpdateDocument_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void databaseCreateDocumentCallback(OAIHttpRequestWorker *worker);
    void databaseDeleteDocumentCallback(OAIHttpRequestWorker *worker);
    void databaseGetDocumentCallback(OAIHttpRequestWorker *worker);
    void databaseListDocumentsCallback(OAIHttpRequestWorker *worker);
    void databaseUpdateDocumentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void databaseCreateDocumentSignal(OAIDocument summary);
    void databaseDeleteDocumentSignal();
    void databaseGetDocumentSignal(OAIDocument summary);
    void databaseListDocumentsSignal(OAIDocumentList summary);
    void databaseUpdateDocumentSignal(OAIDocument summary);


    void databaseCreateDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void databaseDeleteDocumentSignalFull(OAIHttpRequestWorker *worker);
    void databaseGetDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);
    void databaseListDocumentsSignalFull(OAIHttpRequestWorker *worker, OAIDocumentList summary);
    void databaseUpdateDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDocument summary);

    Q_DECL_DEPRECATED_X("Use databaseCreateDocumentSignalError() instead")
    void databaseCreateDocumentSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseCreateDocumentSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseDeleteDocumentSignalError() instead")
    void databaseDeleteDocumentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void databaseDeleteDocumentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseGetDocumentSignalError() instead")
    void databaseGetDocumentSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseGetDocumentSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseListDocumentsSignalError() instead")
    void databaseListDocumentsSignalE(OAIDocumentList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseListDocumentsSignalError(OAIDocumentList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseUpdateDocumentSignalError() instead")
    void databaseUpdateDocumentSignalE(OAIDocument summary, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseUpdateDocumentSignalError(OAIDocument summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use databaseCreateDocumentSignalErrorFull() instead")
    void databaseCreateDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseCreateDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseDeleteDocumentSignalErrorFull() instead")
    void databaseDeleteDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseDeleteDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseGetDocumentSignalErrorFull() instead")
    void databaseGetDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseGetDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseListDocumentsSignalErrorFull() instead")
    void databaseListDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseListDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use databaseUpdateDocumentSignalErrorFull() instead")
    void databaseUpdateDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void databaseUpdateDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
