/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITeamsApi_H
#define OAI_OAITeamsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMembership.h"
#include "OAIMembershipList.h"
#include "OAITeam.h"
#include "OAITeamList.h"
#include "OAITeamsCreateMembership_request.h"
#include "OAITeamsCreate_request.h"
#include "OAITeamsUpdateMembershipRoles_request.h"
#include "OAITeamsUpdateMembershipStatus_request.h"
#include "OAITeamsUpdate_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITeamsApi : public QObject {
    Q_OBJECT

public:
    OAITeamsApi(const int timeOut = 0);
    ~OAITeamsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_teams_create_request OAITeamsCreate_request [optional]
    */
    virtual void teamsCreate(const ::OpenAPI::OptionalParam<OAITeamsCreate_request> &oai_teams_create_request = ::OpenAPI::OptionalParam<OAITeamsCreate_request>());

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  oai_teams_create_membership_request OAITeamsCreateMembership_request [optional]
    */
    virtual void teamsCreateMembership(const QString &team_id, const ::OpenAPI::OptionalParam<OAITeamsCreateMembership_request> &oai_teams_create_membership_request = ::OpenAPI::OptionalParam<OAITeamsCreateMembership_request>());

    /**
    * @param[in]  team_id QString [required]
    */
    virtual void teamsDelete(const QString &team_id);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  membership_id QString [required]
    */
    virtual void teamsDeleteMembership(const QString &team_id, const QString &membership_id);

    /**
    * @param[in]  team_id QString [required]
    */
    virtual void teamsGet(const QString &team_id);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  search QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  order_type QString [optional]
    */
    virtual void teamsGetMemberships(const QString &team_id, const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  search QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  order_type QString [optional]
    */
    virtual void teamsList(const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  oai_teams_update_request OAITeamsUpdate_request [optional]
    */
    virtual void teamsUpdate(const QString &team_id, const ::OpenAPI::OptionalParam<OAITeamsUpdate_request> &oai_teams_update_request = ::OpenAPI::OptionalParam<OAITeamsUpdate_request>());

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  membership_id QString [required]
    * @param[in]  oai_teams_update_membership_roles_request OAITeamsUpdateMembershipRoles_request [optional]
    */
    virtual void teamsUpdateMembershipRoles(const QString &team_id, const QString &membership_id, const ::OpenAPI::OptionalParam<OAITeamsUpdateMembershipRoles_request> &oai_teams_update_membership_roles_request = ::OpenAPI::OptionalParam<OAITeamsUpdateMembershipRoles_request>());

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  membership_id QString [required]
    * @param[in]  oai_teams_update_membership_status_request OAITeamsUpdateMembershipStatus_request [optional]
    */
    virtual void teamsUpdateMembershipStatus(const QString &team_id, const QString &membership_id, const ::OpenAPI::OptionalParam<OAITeamsUpdateMembershipStatus_request> &oai_teams_update_membership_status_request = ::OpenAPI::OptionalParam<OAITeamsUpdateMembershipStatus_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void teamsCreateCallback(OAIHttpRequestWorker *worker);
    void teamsCreateMembershipCallback(OAIHttpRequestWorker *worker);
    void teamsDeleteCallback(OAIHttpRequestWorker *worker);
    void teamsDeleteMembershipCallback(OAIHttpRequestWorker *worker);
    void teamsGetCallback(OAIHttpRequestWorker *worker);
    void teamsGetMembershipsCallback(OAIHttpRequestWorker *worker);
    void teamsListCallback(OAIHttpRequestWorker *worker);
    void teamsUpdateCallback(OAIHttpRequestWorker *worker);
    void teamsUpdateMembershipRolesCallback(OAIHttpRequestWorker *worker);
    void teamsUpdateMembershipStatusCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void teamsCreateSignal(OAITeam summary);
    void teamsCreateMembershipSignal(OAIMembership summary);
    void teamsDeleteSignal();
    void teamsDeleteMembershipSignal();
    void teamsGetSignal(OAITeam summary);
    void teamsGetMembershipsSignal(OAIMembershipList summary);
    void teamsListSignal(OAITeamList summary);
    void teamsUpdateSignal(OAITeam summary);
    void teamsUpdateMembershipRolesSignal(OAIMembership summary);
    void teamsUpdateMembershipStatusSignal(OAIMembership summary);


    void teamsCreateSignalFull(OAIHttpRequestWorker *worker, OAITeam summary);
    void teamsCreateMembershipSignalFull(OAIHttpRequestWorker *worker, OAIMembership summary);
    void teamsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void teamsDeleteMembershipSignalFull(OAIHttpRequestWorker *worker);
    void teamsGetSignalFull(OAIHttpRequestWorker *worker, OAITeam summary);
    void teamsGetMembershipsSignalFull(OAIHttpRequestWorker *worker, OAIMembershipList summary);
    void teamsListSignalFull(OAIHttpRequestWorker *worker, OAITeamList summary);
    void teamsUpdateSignalFull(OAIHttpRequestWorker *worker, OAITeam summary);
    void teamsUpdateMembershipRolesSignalFull(OAIHttpRequestWorker *worker, OAIMembership summary);
    void teamsUpdateMembershipStatusSignalFull(OAIHttpRequestWorker *worker, OAIMembership summary);

    Q_DECL_DEPRECATED_X("Use teamsCreateSignalError() instead")
    void teamsCreateSignalE(OAITeam summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsCreateSignalError(OAITeam summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsCreateMembershipSignalError() instead")
    void teamsCreateMembershipSignalE(OAIMembership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsCreateMembershipSignalError(OAIMembership summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsDeleteSignalError() instead")
    void teamsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsDeleteMembershipSignalError() instead")
    void teamsDeleteMembershipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamsDeleteMembershipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGetSignalError() instead")
    void teamsGetSignalE(OAITeam summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGetSignalError(OAITeam summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGetMembershipsSignalError() instead")
    void teamsGetMembershipsSignalE(OAIMembershipList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGetMembershipsSignalError(OAIMembershipList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsListSignalError() instead")
    void teamsListSignalE(OAITeamList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsListSignalError(OAITeamList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsUpdateSignalError() instead")
    void teamsUpdateSignalE(OAITeam summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsUpdateSignalError(OAITeam summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsUpdateMembershipRolesSignalError() instead")
    void teamsUpdateMembershipRolesSignalE(OAIMembership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsUpdateMembershipRolesSignalError(OAIMembership summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsUpdateMembershipStatusSignalError() instead")
    void teamsUpdateMembershipStatusSignalE(OAIMembership summary, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsUpdateMembershipStatusSignalError(OAIMembership summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use teamsCreateSignalErrorFull() instead")
    void teamsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsCreateMembershipSignalErrorFull() instead")
    void teamsCreateMembershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsCreateMembershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsDeleteSignalErrorFull() instead")
    void teamsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsDeleteMembershipSignalErrorFull() instead")
    void teamsDeleteMembershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsDeleteMembershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGetSignalErrorFull() instead")
    void teamsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsGetMembershipsSignalErrorFull() instead")
    void teamsGetMembershipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsGetMembershipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsListSignalErrorFull() instead")
    void teamsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsUpdateSignalErrorFull() instead")
    void teamsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsUpdateMembershipRolesSignalErrorFull() instead")
    void teamsUpdateMembershipRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsUpdateMembershipRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamsUpdateMembershipStatusSignalErrorFull() instead")
    void teamsUpdateMembershipStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamsUpdateMembershipStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
