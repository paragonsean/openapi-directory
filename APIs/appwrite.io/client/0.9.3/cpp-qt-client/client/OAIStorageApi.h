/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIStorageApi_H
#define OAI_OAIStorageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFileList.h"
#include "OAIHttpFileElement.h"
#include "OAIStorageUpdateFile_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIStorageApi : public QObject {
    Q_OBJECT

public:
    OAIStorageApi(const int timeOut = 0);
    ~OAIStorageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  file QString [required]
    * @param[in]  read QList<QString> [optional]
    * @param[in]  write QList<QString> [optional]
    */
    virtual void storageCreateFile(const QString &file, const ::OpenAPI::OptionalParam<QList<QString>> &read = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &write = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  file_id QString [required]
    */
    virtual void storageDeleteFile(const QString &file_id);

    /**
    * @param[in]  file_id QString [required]
    */
    virtual void storageGetFile(const QString &file_id);

    /**
    * @param[in]  file_id QString [required]
    */
    virtual void storageGetFileDownload(const QString &file_id);

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  gravity QString [optional]
    * @param[in]  quality qint32 [optional]
    * @param[in]  border_width qint32 [optional]
    * @param[in]  border_color QString [optional]
    * @param[in]  border_radius qint32 [optional]
    * @param[in]  opacity float [optional]
    * @param[in]  rotation qint32 [optional]
    * @param[in]  background QString [optional]
    * @param[in]  output QString [optional]
    */
    virtual void storageGetFilePreview(const QString &file_id, const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &gravity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &quality = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &border_width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &border_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &border_radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<float> &opacity = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &rotation = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &background = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &output = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  file_id QString [required]
    */
    virtual void storageGetFileView(const QString &file_id);

    /**
    * @param[in]  search QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  order_type QString [optional]
    */
    virtual void storageListFiles(const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &order_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  file_id QString [required]
    * @param[in]  oai_storage_update_file_request OAIStorageUpdateFile_request [optional]
    */
    virtual void storageUpdateFile(const QString &file_id, const ::OpenAPI::OptionalParam<OAIStorageUpdateFile_request> &oai_storage_update_file_request = ::OpenAPI::OptionalParam<OAIStorageUpdateFile_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void storageCreateFileCallback(OAIHttpRequestWorker *worker);
    void storageDeleteFileCallback(OAIHttpRequestWorker *worker);
    void storageGetFileCallback(OAIHttpRequestWorker *worker);
    void storageGetFileDownloadCallback(OAIHttpRequestWorker *worker);
    void storageGetFilePreviewCallback(OAIHttpRequestWorker *worker);
    void storageGetFileViewCallback(OAIHttpRequestWorker *worker);
    void storageListFilesCallback(OAIHttpRequestWorker *worker);
    void storageUpdateFileCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void storageCreateFileSignal(OAIHttpFileElement summary);
    void storageDeleteFileSignal();
    void storageGetFileSignal(OAIHttpFileElement summary);
    void storageGetFileDownloadSignal();
    void storageGetFilePreviewSignal();
    void storageGetFileViewSignal();
    void storageListFilesSignal(OAIFileList summary);
    void storageUpdateFileSignal(OAIHttpFileElement summary);


    void storageCreateFileSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void storageDeleteFileSignalFull(OAIHttpRequestWorker *worker);
    void storageGetFileSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void storageGetFileDownloadSignalFull(OAIHttpRequestWorker *worker);
    void storageGetFilePreviewSignalFull(OAIHttpRequestWorker *worker);
    void storageGetFileViewSignalFull(OAIHttpRequestWorker *worker);
    void storageListFilesSignalFull(OAIHttpRequestWorker *worker, OAIFileList summary);
    void storageUpdateFileSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);

    Q_DECL_DEPRECATED_X("Use storageCreateFileSignalError() instead")
    void storageCreateFileSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageCreateFileSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageDeleteFileSignalError() instead")
    void storageDeleteFileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storageDeleteFileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageGetFileSignalError() instead")
    void storageGetFileSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageGetFileSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageGetFileDownloadSignalError() instead")
    void storageGetFileDownloadSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storageGetFileDownloadSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageGetFilePreviewSignalError() instead")
    void storageGetFilePreviewSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storageGetFilePreviewSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageGetFileViewSignalError() instead")
    void storageGetFileViewSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void storageGetFileViewSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageListFilesSignalError() instead")
    void storageListFilesSignalE(OAIFileList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageListFilesSignalError(OAIFileList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageUpdateFileSignalError() instead")
    void storageUpdateFileSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storageUpdateFileSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use storageCreateFileSignalErrorFull() instead")
    void storageCreateFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageCreateFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageDeleteFileSignalErrorFull() instead")
    void storageDeleteFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageDeleteFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageGetFileSignalErrorFull() instead")
    void storageGetFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageGetFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageGetFileDownloadSignalErrorFull() instead")
    void storageGetFileDownloadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageGetFileDownloadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageGetFilePreviewSignalErrorFull() instead")
    void storageGetFilePreviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageGetFilePreviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageGetFileViewSignalErrorFull() instead")
    void storageGetFileViewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageGetFileViewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageListFilesSignalErrorFull() instead")
    void storageListFilesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageListFilesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storageUpdateFileSignalErrorFull() instead")
    void storageUpdateFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storageUpdateFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
