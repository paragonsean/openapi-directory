/**
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITag::OAITag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITag::OAITag() {
    this->initializeModel();
}

OAITag::~OAITag() {}

void OAITag::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_command_isSet = false;
    m_command_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_function_id_isSet = false;
    m_function_id_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAITag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITag::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("$id")]);
    m_id_isSet = !json[QString("$id")].isNull() && m_id_isValid;

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("command")]);
    m_command_isSet = !json[QString("command")].isNull() && m_command_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_function_id_isValid = ::OpenAPI::fromJsonValue(m_function_id, json[QString("functionId")]);
    m_function_id_isSet = !json[QString("functionId")].isNull() && m_function_id_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString OAITag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITag::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("$id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_command_isSet) {
        obj.insert(QString("command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_function_id_isSet) {
        obj.insert(QString("functionId"), ::OpenAPI::toJsonValue(m_function_id));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

QString OAITag::getId() const {
    return m_id;
}
void OAITag::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITag::is_id_Set() const{
    return m_id_isSet;
}

bool OAITag::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITag::getCommand() const {
    return m_command;
}
void OAITag::setCommand(const QString &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAITag::is_command_Set() const{
    return m_command_isSet;
}

bool OAITag::is_command_Valid() const{
    return m_command_isValid;
}

qint32 OAITag::getDateCreated() const {
    return m_date_created;
}
void OAITag::setDateCreated(const qint32 &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAITag::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAITag::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAITag::getFunctionId() const {
    return m_function_id;
}
void OAITag::setFunctionId(const QString &function_id) {
    m_function_id = function_id;
    m_function_id_isSet = true;
}

bool OAITag::is_function_id_Set() const{
    return m_function_id_isSet;
}

bool OAITag::is_function_id_Valid() const{
    return m_function_id_isValid;
}

QString OAITag::getSize() const {
    return m_size;
}
void OAITag::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAITag::is_size_Set() const{
    return m_size_isSet;
}

bool OAITag::is_size_Valid() const{
    return m_size_isValid;
}

bool OAITag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_command_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITag::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_command_isValid && m_date_created_isValid && m_function_id_isValid && m_size_isValid && true;
}

} // namespace OpenAPI
