/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Execution;
import org.openapitools.client.model.ExecutionList;
import org.openapitools.client.model.FunctionsCreateExecutionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FunctionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FunctionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FunctionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for functionsCreateExecution
     * @param functionId Function unique ID. (required)
     * @param functionsCreateExecutionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Execution </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionsCreateExecutionCall(String functionId, FunctionsCreateExecutionRequest functionsCreateExecutionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = functionsCreateExecutionRequest;

        // create path and map variables
        String localVarPath = "/functions/{functionId}/executions"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionsCreateExecutionValidateBeforeCall(String functionId, FunctionsCreateExecutionRequest functionsCreateExecutionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling functionsCreateExecution(Async)");
        }

        return functionsCreateExecutionCall(functionId, functionsCreateExecutionRequest, _callback);

    }

    /**
     * Create Execution
     * Trigger a function execution. The returned object will return you the current execution status. You can ping the &#x60;Get Execution&#x60; endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.
     * @param functionId Function unique ID. (required)
     * @param functionsCreateExecutionRequest  (optional)
     * @return Execution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Execution </td><td>  -  </td></tr>
     </table>
     */
    public Execution functionsCreateExecution(String functionId, FunctionsCreateExecutionRequest functionsCreateExecutionRequest) throws ApiException {
        ApiResponse<Execution> localVarResp = functionsCreateExecutionWithHttpInfo(functionId, functionsCreateExecutionRequest);
        return localVarResp.getData();
    }

    /**
     * Create Execution
     * Trigger a function execution. The returned object will return you the current execution status. You can ping the &#x60;Get Execution&#x60; endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.
     * @param functionId Function unique ID. (required)
     * @param functionsCreateExecutionRequest  (optional)
     * @return ApiResponse&lt;Execution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Execution </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Execution> functionsCreateExecutionWithHttpInfo(String functionId, FunctionsCreateExecutionRequest functionsCreateExecutionRequest) throws ApiException {
        okhttp3.Call localVarCall = functionsCreateExecutionValidateBeforeCall(functionId, functionsCreateExecutionRequest, null);
        Type localVarReturnType = new TypeToken<Execution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Execution (asynchronously)
     * Trigger a function execution. The returned object will return you the current execution status. You can ping the &#x60;Get Execution&#x60; endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.
     * @param functionId Function unique ID. (required)
     * @param functionsCreateExecutionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Execution </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionsCreateExecutionAsync(String functionId, FunctionsCreateExecutionRequest functionsCreateExecutionRequest, final ApiCallback<Execution> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionsCreateExecutionValidateBeforeCall(functionId, functionsCreateExecutionRequest, _callback);
        Type localVarReturnType = new TypeToken<Execution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for functionsGetExecution
     * @param functionId Function unique ID. (required)
     * @param executionId Execution unique ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Execution </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionsGetExecutionCall(String functionId, String executionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/functions/{functionId}/executions/{executionId}"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()))
            .replace("{" + "executionId" + "}", localVarApiClient.escapeString(executionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionsGetExecutionValidateBeforeCall(String functionId, String executionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling functionsGetExecution(Async)");
        }

        // verify the required parameter 'executionId' is set
        if (executionId == null) {
            throw new ApiException("Missing the required parameter 'executionId' when calling functionsGetExecution(Async)");
        }

        return functionsGetExecutionCall(functionId, executionId, _callback);

    }

    /**
     * Get Execution
     * Get a function execution log by its unique ID.
     * @param functionId Function unique ID. (required)
     * @param executionId Execution unique ID. (required)
     * @return Execution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Execution </td><td>  -  </td></tr>
     </table>
     */
    public Execution functionsGetExecution(String functionId, String executionId) throws ApiException {
        ApiResponse<Execution> localVarResp = functionsGetExecutionWithHttpInfo(functionId, executionId);
        return localVarResp.getData();
    }

    /**
     * Get Execution
     * Get a function execution log by its unique ID.
     * @param functionId Function unique ID. (required)
     * @param executionId Execution unique ID. (required)
     * @return ApiResponse&lt;Execution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Execution </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Execution> functionsGetExecutionWithHttpInfo(String functionId, String executionId) throws ApiException {
        okhttp3.Call localVarCall = functionsGetExecutionValidateBeforeCall(functionId, executionId, null);
        Type localVarReturnType = new TypeToken<Execution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Execution (asynchronously)
     * Get a function execution log by its unique ID.
     * @param functionId Function unique ID. (required)
     * @param executionId Execution unique ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Execution </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionsGetExecutionAsync(String functionId, String executionId, final ApiCallback<Execution> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionsGetExecutionValidateBeforeCall(functionId, executionId, _callback);
        Type localVarReturnType = new TypeToken<Execution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for functionsListExecutions
     * @param functionId Function unique ID. (required)
     * @param search Search term to filter your list results. Max length: 256 chars. (optional, default to )
     * @param limit Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request. (optional, default to 25)
     * @param offset Results offset. The default value is 0. Use this param to manage pagination. (optional, default to 0)
     * @param orderType Order result by ASC or DESC order. (optional, default to ASC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Executions List </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionsListExecutionsCall(String functionId, String search, Integer limit, Integer offset, String orderType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/functions/{functionId}/executions"
            .replace("{" + "functionId" + "}", localVarApiClient.escapeString(functionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (orderType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderType", orderType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call functionsListExecutionsValidateBeforeCall(String functionId, String search, Integer limit, Integer offset, String orderType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'functionId' is set
        if (functionId == null) {
            throw new ApiException("Missing the required parameter 'functionId' when calling functionsListExecutions(Async)");
        }

        return functionsListExecutionsCall(functionId, search, limit, offset, orderType, _callback);

    }

    /**
     * List Executions
     * Get a list of all the current user function execution logs. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project&#39;s executions. [Learn more about different API modes](/docs/admin).
     * @param functionId Function unique ID. (required)
     * @param search Search term to filter your list results. Max length: 256 chars. (optional, default to )
     * @param limit Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request. (optional, default to 25)
     * @param offset Results offset. The default value is 0. Use this param to manage pagination. (optional, default to 0)
     * @param orderType Order result by ASC or DESC order. (optional, default to ASC)
     * @return ExecutionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Executions List </td><td>  -  </td></tr>
     </table>
     */
    public ExecutionList functionsListExecutions(String functionId, String search, Integer limit, Integer offset, String orderType) throws ApiException {
        ApiResponse<ExecutionList> localVarResp = functionsListExecutionsWithHttpInfo(functionId, search, limit, offset, orderType);
        return localVarResp.getData();
    }

    /**
     * List Executions
     * Get a list of all the current user function execution logs. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project&#39;s executions. [Learn more about different API modes](/docs/admin).
     * @param functionId Function unique ID. (required)
     * @param search Search term to filter your list results. Max length: 256 chars. (optional, default to )
     * @param limit Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request. (optional, default to 25)
     * @param offset Results offset. The default value is 0. Use this param to manage pagination. (optional, default to 0)
     * @param orderType Order result by ASC or DESC order. (optional, default to ASC)
     * @return ApiResponse&lt;ExecutionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Executions List </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExecutionList> functionsListExecutionsWithHttpInfo(String functionId, String search, Integer limit, Integer offset, String orderType) throws ApiException {
        okhttp3.Call localVarCall = functionsListExecutionsValidateBeforeCall(functionId, search, limit, offset, orderType, null);
        Type localVarReturnType = new TypeToken<ExecutionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Executions (asynchronously)
     * Get a list of all the current user function execution logs. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project&#39;s executions. [Learn more about different API modes](/docs/admin).
     * @param functionId Function unique ID. (required)
     * @param search Search term to filter your list results. Max length: 256 chars. (optional, default to )
     * @param limit Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request. (optional, default to 25)
     * @param offset Results offset. The default value is 0. Use this param to manage pagination. (optional, default to 0)
     * @param orderType Order result by ASC or DESC order. (optional, default to ASC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Executions List </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call functionsListExecutionsAsync(String functionId, String search, Integer limit, Integer offset, String orderType, final ApiCallback<ExecutionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = functionsListExecutionsValidateBeforeCall(functionId, search, limit, offset, orderType, _callback);
        Type localVarReturnType = new TypeToken<ExecutionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
