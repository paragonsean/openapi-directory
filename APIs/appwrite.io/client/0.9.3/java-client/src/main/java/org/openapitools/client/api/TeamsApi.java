/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Membership;
import org.openapitools.client.model.MembershipList;
import org.openapitools.client.model.Team;
import org.openapitools.client.model.TeamList;
import org.openapitools.client.model.TeamsCreateMembershipRequest;
import org.openapitools.client.model.TeamsCreateRequest;
import org.openapitools.client.model.TeamsUpdateMembershipRolesRequest;
import org.openapitools.client.model.TeamsUpdateMembershipStatusRequest;
import org.openapitools.client.model.TeamsUpdateRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TeamsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeamsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for teamsCreate
     * @param teamsCreateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsCreateCall(TeamsCreateRequest teamsCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsCreateRequest;

        // create path and map variables
        String localVarPath = "/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsCreateValidateBeforeCall(TeamsCreateRequest teamsCreateRequest, final ApiCallback _callback) throws ApiException {
        return teamsCreateCall(teamsCreateRequest, _callback);

    }

    /**
     * Create Team
     * Create a new team. The user who creates the team will automatically be assigned as the owner of the team. The team owner can invite new members, who will be able add new owners and update or delete the team from your project.
     * @param teamsCreateRequest  (optional)
     * @return Team
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public Team teamsCreate(TeamsCreateRequest teamsCreateRequest) throws ApiException {
        ApiResponse<Team> localVarResp = teamsCreateWithHttpInfo(teamsCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create Team
     * Create a new team. The user who creates the team will automatically be assigned as the owner of the team. The team owner can invite new members, who will be able add new owners and update or delete the team from your project.
     * @param teamsCreateRequest  (optional)
     * @return ApiResponse&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Team> teamsCreateWithHttpInfo(TeamsCreateRequest teamsCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsCreateValidateBeforeCall(teamsCreateRequest, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Team (asynchronously)
     * Create a new team. The user who creates the team will automatically be assigned as the owner of the team. The team owner can invite new members, who will be able add new owners and update or delete the team from your project.
     * @param teamsCreateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsCreateAsync(TeamsCreateRequest teamsCreateRequest, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsCreateValidateBeforeCall(teamsCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsCreateMembership
     * @param teamId Team unique ID. (required)
     * @param teamsCreateMembershipRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Membership </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsCreateMembershipCall(String teamId, TeamsCreateMembershipRequest teamsCreateMembershipRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsCreateMembershipRequest;

        // create path and map variables
        String localVarPath = "/teams/{teamId}/memberships"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsCreateMembershipValidateBeforeCall(String teamId, TeamsCreateMembershipRequest teamsCreateMembershipRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsCreateMembership(Async)");
        }

        return teamsCreateMembershipCall(teamId, teamsCreateMembershipRequest, _callback);

    }

    /**
     * Create Team Membership
     * Use this endpoint to invite a new member to join your team. If initiated from Client SDK, an email with a link to join the team will be sent to the new member&#39;s email address if the member doesn&#39;t exist in the project it will be created automatically. If initiated from server side SDKs, new member will automatically be added to the team.  Use the &#39;URL&#39; parameter to redirect the user from the invitation email back to your app. When the user is redirected, use the [Update Team Membership Status](/docs/client/teams#teamsUpdateMembershipStatus) endpoint to allow the user to accept the invitation to the team.  While calling from side SDKs the redirect url can be empty string.  Please note that in order to avoid a [Redirect Attacks](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URL&#39;s are the once from domains you have set when added your platforms in the console interface.
     * @param teamId Team unique ID. (required)
     * @param teamsCreateMembershipRequest  (optional)
     * @return Membership
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Membership </td><td>  -  </td></tr>
     </table>
     */
    public Membership teamsCreateMembership(String teamId, TeamsCreateMembershipRequest teamsCreateMembershipRequest) throws ApiException {
        ApiResponse<Membership> localVarResp = teamsCreateMembershipWithHttpInfo(teamId, teamsCreateMembershipRequest);
        return localVarResp.getData();
    }

    /**
     * Create Team Membership
     * Use this endpoint to invite a new member to join your team. If initiated from Client SDK, an email with a link to join the team will be sent to the new member&#39;s email address if the member doesn&#39;t exist in the project it will be created automatically. If initiated from server side SDKs, new member will automatically be added to the team.  Use the &#39;URL&#39; parameter to redirect the user from the invitation email back to your app. When the user is redirected, use the [Update Team Membership Status](/docs/client/teams#teamsUpdateMembershipStatus) endpoint to allow the user to accept the invitation to the team.  While calling from side SDKs the redirect url can be empty string.  Please note that in order to avoid a [Redirect Attacks](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URL&#39;s are the once from domains you have set when added your platforms in the console interface.
     * @param teamId Team unique ID. (required)
     * @param teamsCreateMembershipRequest  (optional)
     * @return ApiResponse&lt;Membership&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Membership </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Membership> teamsCreateMembershipWithHttpInfo(String teamId, TeamsCreateMembershipRequest teamsCreateMembershipRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsCreateMembershipValidateBeforeCall(teamId, teamsCreateMembershipRequest, null);
        Type localVarReturnType = new TypeToken<Membership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Team Membership (asynchronously)
     * Use this endpoint to invite a new member to join your team. If initiated from Client SDK, an email with a link to join the team will be sent to the new member&#39;s email address if the member doesn&#39;t exist in the project it will be created automatically. If initiated from server side SDKs, new member will automatically be added to the team.  Use the &#39;URL&#39; parameter to redirect the user from the invitation email back to your app. When the user is redirected, use the [Update Team Membership Status](/docs/client/teams#teamsUpdateMembershipStatus) endpoint to allow the user to accept the invitation to the team.  While calling from side SDKs the redirect url can be empty string.  Please note that in order to avoid a [Redirect Attacks](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URL&#39;s are the once from domains you have set when added your platforms in the console interface.
     * @param teamId Team unique ID. (required)
     * @param teamsCreateMembershipRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Membership </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsCreateMembershipAsync(String teamId, TeamsCreateMembershipRequest teamsCreateMembershipRequest, final ApiCallback<Membership> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsCreateMembershipValidateBeforeCall(teamId, teamsCreateMembershipRequest, _callback);
        Type localVarReturnType = new TypeToken<Membership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsDelete
     * @param teamId Team unique ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsDeleteCall(String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{teamId}"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsDeleteValidateBeforeCall(String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsDelete(Async)");
        }

        return teamsDeleteCall(teamId, _callback);

    }

    /**
     * Delete Team
     * Delete a team by its unique ID. Only team owners have write access for this resource.
     * @param teamId Team unique ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public void teamsDelete(String teamId) throws ApiException {
        teamsDeleteWithHttpInfo(teamId);
    }

    /**
     * Delete Team
     * Delete a team by its unique ID. Only team owners have write access for this resource.
     * @param teamId Team unique ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamsDeleteWithHttpInfo(String teamId) throws ApiException {
        okhttp3.Call localVarCall = teamsDeleteValidateBeforeCall(teamId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Team (asynchronously)
     * Delete a team by its unique ID. Only team owners have write access for this resource.
     * @param teamId Team unique ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsDeleteAsync(String teamId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsDeleteValidateBeforeCall(teamId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsDeleteMembership
     * @param teamId Team unique ID. (required)
     * @param membershipId Membership ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsDeleteMembershipCall(String teamId, String membershipId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{teamId}/memberships/{membershipId}"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsDeleteMembershipValidateBeforeCall(String teamId, String membershipId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsDeleteMembership(Async)");
        }

        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling teamsDeleteMembership(Async)");
        }

        return teamsDeleteMembershipCall(teamId, membershipId, _callback);

    }

    /**
     * Delete Team Membership
     * This endpoint allows a user to leave a team or for a team owner to delete the membership of any other team member. You can also use this endpoint to delete a user membership even if it is not accepted.
     * @param teamId Team unique ID. (required)
     * @param membershipId Membership ID. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public void teamsDeleteMembership(String teamId, String membershipId) throws ApiException {
        teamsDeleteMembershipWithHttpInfo(teamId, membershipId);
    }

    /**
     * Delete Team Membership
     * This endpoint allows a user to leave a team or for a team owner to delete the membership of any other team member. You can also use this endpoint to delete a user membership even if it is not accepted.
     * @param teamId Team unique ID. (required)
     * @param membershipId Membership ID. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> teamsDeleteMembershipWithHttpInfo(String teamId, String membershipId) throws ApiException {
        okhttp3.Call localVarCall = teamsDeleteMembershipValidateBeforeCall(teamId, membershipId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Team Membership (asynchronously)
     * This endpoint allows a user to leave a team or for a team owner to delete the membership of any other team member. You can also use this endpoint to delete a user membership even if it is not accepted.
     * @param teamId Team unique ID. (required)
     * @param membershipId Membership ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsDeleteMembershipAsync(String teamId, String membershipId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsDeleteMembershipValidateBeforeCall(teamId, membershipId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGet
     * @param teamId Team unique ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGetCall(String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{teamId}"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetValidateBeforeCall(String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsGet(Async)");
        }

        return teamsGetCall(teamId, _callback);

    }

    /**
     * Get Team
     * Get a team by its unique ID. All team members have read access for this resource.
     * @param teamId Team unique ID. (required)
     * @return Team
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public Team teamsGet(String teamId) throws ApiException {
        ApiResponse<Team> localVarResp = teamsGetWithHttpInfo(teamId);
        return localVarResp.getData();
    }

    /**
     * Get Team
     * Get a team by its unique ID. All team members have read access for this resource.
     * @param teamId Team unique ID. (required)
     * @return ApiResponse&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Team> teamsGetWithHttpInfo(String teamId) throws ApiException {
        okhttp3.Call localVarCall = teamsGetValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Team (asynchronously)
     * Get a team by its unique ID. All team members have read access for this resource.
     * @param teamId Team unique ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGetAsync(String teamId, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsGetMemberships
     * @param teamId Team unique ID. (required)
     * @param search Search term to filter your list results. Max length: 256 chars. (optional, default to )
     * @param limit Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request. (optional, default to 25)
     * @param offset Results offset. The default value is 0. Use this param to manage pagination. (optional, default to 0)
     * @param orderType Order result by ASC or DESC order. (optional, default to ASC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Memberships List </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGetMembershipsCall(String teamId, String search, Integer limit, Integer offset, String orderType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{teamId}/memberships"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (orderType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderType", orderType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsGetMembershipsValidateBeforeCall(String teamId, String search, Integer limit, Integer offset, String orderType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsGetMemberships(Async)");
        }

        return teamsGetMembershipsCall(teamId, search, limit, offset, orderType, _callback);

    }

    /**
     * Get Team Memberships
     * Get a team members by the team unique ID. All team members have read access for this list of resources.
     * @param teamId Team unique ID. (required)
     * @param search Search term to filter your list results. Max length: 256 chars. (optional, default to )
     * @param limit Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request. (optional, default to 25)
     * @param offset Results offset. The default value is 0. Use this param to manage pagination. (optional, default to 0)
     * @param orderType Order result by ASC or DESC order. (optional, default to ASC)
     * @return MembershipList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Memberships List </td><td>  -  </td></tr>
     </table>
     */
    public MembershipList teamsGetMemberships(String teamId, String search, Integer limit, Integer offset, String orderType) throws ApiException {
        ApiResponse<MembershipList> localVarResp = teamsGetMembershipsWithHttpInfo(teamId, search, limit, offset, orderType);
        return localVarResp.getData();
    }

    /**
     * Get Team Memberships
     * Get a team members by the team unique ID. All team members have read access for this list of resources.
     * @param teamId Team unique ID. (required)
     * @param search Search term to filter your list results. Max length: 256 chars. (optional, default to )
     * @param limit Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request. (optional, default to 25)
     * @param offset Results offset. The default value is 0. Use this param to manage pagination. (optional, default to 0)
     * @param orderType Order result by ASC or DESC order. (optional, default to ASC)
     * @return ApiResponse&lt;MembershipList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Memberships List </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MembershipList> teamsGetMembershipsWithHttpInfo(String teamId, String search, Integer limit, Integer offset, String orderType) throws ApiException {
        okhttp3.Call localVarCall = teamsGetMembershipsValidateBeforeCall(teamId, search, limit, offset, orderType, null);
        Type localVarReturnType = new TypeToken<MembershipList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Team Memberships (asynchronously)
     * Get a team members by the team unique ID. All team members have read access for this list of resources.
     * @param teamId Team unique ID. (required)
     * @param search Search term to filter your list results. Max length: 256 chars. (optional, default to )
     * @param limit Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request. (optional, default to 25)
     * @param offset Results offset. The default value is 0. Use this param to manage pagination. (optional, default to 0)
     * @param orderType Order result by ASC or DESC order. (optional, default to ASC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Memberships List </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsGetMembershipsAsync(String teamId, String search, Integer limit, Integer offset, String orderType, final ApiCallback<MembershipList> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsGetMembershipsValidateBeforeCall(teamId, search, limit, offset, orderType, _callback);
        Type localVarReturnType = new TypeToken<MembershipList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsList
     * @param search Search term to filter your list results. Max length: 256 chars. (optional, default to )
     * @param limit Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request. (optional, default to 25)
     * @param offset Results offset. The default value is 0. Use this param to manage pagination. (optional, default to 0)
     * @param orderType Order result by ASC or DESC order. (optional, default to ASC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teams List </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsListCall(String search, Integer limit, Integer offset, String orderType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (orderType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderType", orderType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsListValidateBeforeCall(String search, Integer limit, Integer offset, String orderType, final ApiCallback _callback) throws ApiException {
        return teamsListCall(search, limit, offset, orderType, _callback);

    }

    /**
     * List Teams
     * Get a list of all the current user teams. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project&#39;s teams. [Learn more about different API modes](/docs/admin).
     * @param search Search term to filter your list results. Max length: 256 chars. (optional, default to )
     * @param limit Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request. (optional, default to 25)
     * @param offset Results offset. The default value is 0. Use this param to manage pagination. (optional, default to 0)
     * @param orderType Order result by ASC or DESC order. (optional, default to ASC)
     * @return TeamList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teams List </td><td>  -  </td></tr>
     </table>
     */
    public TeamList teamsList(String search, Integer limit, Integer offset, String orderType) throws ApiException {
        ApiResponse<TeamList> localVarResp = teamsListWithHttpInfo(search, limit, offset, orderType);
        return localVarResp.getData();
    }

    /**
     * List Teams
     * Get a list of all the current user teams. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project&#39;s teams. [Learn more about different API modes](/docs/admin).
     * @param search Search term to filter your list results. Max length: 256 chars. (optional, default to )
     * @param limit Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request. (optional, default to 25)
     * @param offset Results offset. The default value is 0. Use this param to manage pagination. (optional, default to 0)
     * @param orderType Order result by ASC or DESC order. (optional, default to ASC)
     * @return ApiResponse&lt;TeamList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teams List </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamList> teamsListWithHttpInfo(String search, Integer limit, Integer offset, String orderType) throws ApiException {
        okhttp3.Call localVarCall = teamsListValidateBeforeCall(search, limit, offset, orderType, null);
        Type localVarReturnType = new TypeToken<TeamList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Teams (asynchronously)
     * Get a list of all the current user teams. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project&#39;s teams. [Learn more about different API modes](/docs/admin).
     * @param search Search term to filter your list results. Max length: 256 chars. (optional, default to )
     * @param limit Results limit value. By default will return maximum 25 results. Maximum of 100 results allowed per request. (optional, default to 25)
     * @param offset Results offset. The default value is 0. Use this param to manage pagination. (optional, default to 0)
     * @param orderType Order result by ASC or DESC order. (optional, default to ASC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Teams List </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsListAsync(String search, Integer limit, Integer offset, String orderType, final ApiCallback<TeamList> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsListValidateBeforeCall(search, limit, offset, orderType, _callback);
        Type localVarReturnType = new TypeToken<TeamList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsUpdate
     * @param teamId Team unique ID. (required)
     * @param teamsUpdateRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsUpdateCall(String teamId, TeamsUpdateRequest teamsUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsUpdateRequest;

        // create path and map variables
        String localVarPath = "/teams/{teamId}"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsUpdateValidateBeforeCall(String teamId, TeamsUpdateRequest teamsUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsUpdate(Async)");
        }

        return teamsUpdateCall(teamId, teamsUpdateRequest, _callback);

    }

    /**
     * Update Team
     * Update a team by its unique ID. Only team owners have write access for this resource.
     * @param teamId Team unique ID. (required)
     * @param teamsUpdateRequest  (optional)
     * @return Team
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public Team teamsUpdate(String teamId, TeamsUpdateRequest teamsUpdateRequest) throws ApiException {
        ApiResponse<Team> localVarResp = teamsUpdateWithHttpInfo(teamId, teamsUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Update Team
     * Update a team by its unique ID. Only team owners have write access for this resource.
     * @param teamId Team unique ID. (required)
     * @param teamsUpdateRequest  (optional)
     * @return ApiResponse&lt;Team&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Team> teamsUpdateWithHttpInfo(String teamId, TeamsUpdateRequest teamsUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsUpdateValidateBeforeCall(teamId, teamsUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Team (asynchronously)
     * Update a team by its unique ID. Only team owners have write access for this resource.
     * @param teamId Team unique ID. (required)
     * @param teamsUpdateRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Team </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsUpdateAsync(String teamId, TeamsUpdateRequest teamsUpdateRequest, final ApiCallback<Team> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsUpdateValidateBeforeCall(teamId, teamsUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Team>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsUpdateMembershipRoles
     * @param teamId Team unique ID. (required)
     * @param membershipId Membership ID. (required)
     * @param teamsUpdateMembershipRolesRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsUpdateMembershipRolesCall(String teamId, String membershipId, TeamsUpdateMembershipRolesRequest teamsUpdateMembershipRolesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsUpdateMembershipRolesRequest;

        // create path and map variables
        String localVarPath = "/teams/{teamId}/memberships/{membershipId}"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsUpdateMembershipRolesValidateBeforeCall(String teamId, String membershipId, TeamsUpdateMembershipRolesRequest teamsUpdateMembershipRolesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsUpdateMembershipRoles(Async)");
        }

        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling teamsUpdateMembershipRoles(Async)");
        }

        return teamsUpdateMembershipRolesCall(teamId, membershipId, teamsUpdateMembershipRolesRequest, _callback);

    }

    /**
     * Update Membership Roles
     * 
     * @param teamId Team unique ID. (required)
     * @param membershipId Membership ID. (required)
     * @param teamsUpdateMembershipRolesRequest  (optional)
     * @return Membership
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
     </table>
     */
    public Membership teamsUpdateMembershipRoles(String teamId, String membershipId, TeamsUpdateMembershipRolesRequest teamsUpdateMembershipRolesRequest) throws ApiException {
        ApiResponse<Membership> localVarResp = teamsUpdateMembershipRolesWithHttpInfo(teamId, membershipId, teamsUpdateMembershipRolesRequest);
        return localVarResp.getData();
    }

    /**
     * Update Membership Roles
     * 
     * @param teamId Team unique ID. (required)
     * @param membershipId Membership ID. (required)
     * @param teamsUpdateMembershipRolesRequest  (optional)
     * @return ApiResponse&lt;Membership&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Membership> teamsUpdateMembershipRolesWithHttpInfo(String teamId, String membershipId, TeamsUpdateMembershipRolesRequest teamsUpdateMembershipRolesRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsUpdateMembershipRolesValidateBeforeCall(teamId, membershipId, teamsUpdateMembershipRolesRequest, null);
        Type localVarReturnType = new TypeToken<Membership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Membership Roles (asynchronously)
     * 
     * @param teamId Team unique ID. (required)
     * @param membershipId Membership ID. (required)
     * @param teamsUpdateMembershipRolesRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsUpdateMembershipRolesAsync(String teamId, String membershipId, TeamsUpdateMembershipRolesRequest teamsUpdateMembershipRolesRequest, final ApiCallback<Membership> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsUpdateMembershipRolesValidateBeforeCall(teamId, membershipId, teamsUpdateMembershipRolesRequest, _callback);
        Type localVarReturnType = new TypeToken<Membership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for teamsUpdateMembershipStatus
     * @param teamId Team unique ID. (required)
     * @param membershipId Membership ID. (required)
     * @param teamsUpdateMembershipStatusRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsUpdateMembershipStatusCall(String teamId, String membershipId, TeamsUpdateMembershipStatusRequest teamsUpdateMembershipStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamsUpdateMembershipStatusRequest;

        // create path and map variables
        String localVarPath = "/teams/{teamId}/memberships/{membershipId}/status"
            .replace("{" + "teamId" + "}", localVarApiClient.escapeString(teamId.toString()))
            .replace("{" + "membershipId" + "}", localVarApiClient.escapeString(membershipId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Project", "JWT" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teamsUpdateMembershipStatusValidateBeforeCall(String teamId, String membershipId, TeamsUpdateMembershipStatusRequest teamsUpdateMembershipStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling teamsUpdateMembershipStatus(Async)");
        }

        // verify the required parameter 'membershipId' is set
        if (membershipId == null) {
            throw new ApiException("Missing the required parameter 'membershipId' when calling teamsUpdateMembershipStatus(Async)");
        }

        return teamsUpdateMembershipStatusCall(teamId, membershipId, teamsUpdateMembershipStatusRequest, _callback);

    }

    /**
     * Update Team Membership Status
     * Use this endpoint to allow a user to accept an invitation to join a team after being redirected back to your app from the invitation email recieved by the user.
     * @param teamId Team unique ID. (required)
     * @param membershipId Membership ID. (required)
     * @param teamsUpdateMembershipStatusRequest  (optional)
     * @return Membership
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
     </table>
     */
    public Membership teamsUpdateMembershipStatus(String teamId, String membershipId, TeamsUpdateMembershipStatusRequest teamsUpdateMembershipStatusRequest) throws ApiException {
        ApiResponse<Membership> localVarResp = teamsUpdateMembershipStatusWithHttpInfo(teamId, membershipId, teamsUpdateMembershipStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Update Team Membership Status
     * Use this endpoint to allow a user to accept an invitation to join a team after being redirected back to your app from the invitation email recieved by the user.
     * @param teamId Team unique ID. (required)
     * @param membershipId Membership ID. (required)
     * @param teamsUpdateMembershipStatusRequest  (optional)
     * @return ApiResponse&lt;Membership&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Membership> teamsUpdateMembershipStatusWithHttpInfo(String teamId, String membershipId, TeamsUpdateMembershipStatusRequest teamsUpdateMembershipStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = teamsUpdateMembershipStatusValidateBeforeCall(teamId, membershipId, teamsUpdateMembershipStatusRequest, null);
        Type localVarReturnType = new TypeToken<Membership>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Team Membership Status (asynchronously)
     * Use this endpoint to allow a user to accept an invitation to join a team after being redirected back to your app from the invitation email recieved by the user.
     * @param teamId Team unique ID. (required)
     * @param membershipId Membership ID. (required)
     * @param teamsUpdateMembershipStatusRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Membership </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call teamsUpdateMembershipStatusAsync(String teamId, String membershipId, TeamsUpdateMembershipStatusRequest teamsUpdateMembershipStatusRequest, final ApiCallback<Membership> _callback) throws ApiException {

        okhttp3.Call localVarCall = teamsUpdateMembershipStatusValidateBeforeCall(teamId, membershipId, teamsUpdateMembershipStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<Membership>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
