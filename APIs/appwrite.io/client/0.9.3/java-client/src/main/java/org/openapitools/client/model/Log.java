/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Log
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:19.125241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Log {
  public static final String SERIALIZED_NAME_CLIENT_CODE = "clientCode";
  @SerializedName(SERIALIZED_NAME_CLIENT_CODE)
  private String clientCode;

  public static final String SERIALIZED_NAME_CLIENT_ENGINE = "clientEngine";
  @SerializedName(SERIALIZED_NAME_CLIENT_ENGINE)
  private String clientEngine;

  public static final String SERIALIZED_NAME_CLIENT_ENGINE_VERSION = "clientEngineVersion";
  @SerializedName(SERIALIZED_NAME_CLIENT_ENGINE_VERSION)
  private String clientEngineVersion;

  public static final String SERIALIZED_NAME_CLIENT_NAME = "clientName";
  @SerializedName(SERIALIZED_NAME_CLIENT_NAME)
  private String clientName;

  public static final String SERIALIZED_NAME_CLIENT_TYPE = "clientType";
  @SerializedName(SERIALIZED_NAME_CLIENT_TYPE)
  private String clientType;

  public static final String SERIALIZED_NAME_CLIENT_VERSION = "clientVersion";
  @SerializedName(SERIALIZED_NAME_CLIENT_VERSION)
  private String clientVersion;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_NAME = "countryName";
  @SerializedName(SERIALIZED_NAME_COUNTRY_NAME)
  private String countryName;

  public static final String SERIALIZED_NAME_DEVICE_BRAND = "deviceBrand";
  @SerializedName(SERIALIZED_NAME_DEVICE_BRAND)
  private String deviceBrand;

  public static final String SERIALIZED_NAME_DEVICE_MODEL = "deviceModel";
  @SerializedName(SERIALIZED_NAME_DEVICE_MODEL)
  private String deviceModel;

  public static final String SERIALIZED_NAME_DEVICE_NAME = "deviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public static final String SERIALIZED_NAME_EVENT = "event";
  @SerializedName(SERIALIZED_NAME_EVENT)
  private String event;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_OS_CODE = "osCode";
  @SerializedName(SERIALIZED_NAME_OS_CODE)
  private String osCode;

  public static final String SERIALIZED_NAME_OS_NAME = "osName";
  @SerializedName(SERIALIZED_NAME_OS_NAME)
  private String osName;

  public static final String SERIALIZED_NAME_OS_VERSION = "osVersion";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  private String osVersion;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private Integer time;

  public Log() {
  }

  public Log clientCode(String clientCode) {
    this.clientCode = clientCode;
    return this;
  }

  /**
   * Client code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/clients.json).
   * @return clientCode
   */
  @javax.annotation.Nonnull
  public String getClientCode() {
    return clientCode;
  }

  public void setClientCode(String clientCode) {
    this.clientCode = clientCode;
  }


  public Log clientEngine(String clientEngine) {
    this.clientEngine = clientEngine;
    return this;
  }

  /**
   * Client engine name.
   * @return clientEngine
   */
  @javax.annotation.Nonnull
  public String getClientEngine() {
    return clientEngine;
  }

  public void setClientEngine(String clientEngine) {
    this.clientEngine = clientEngine;
  }


  public Log clientEngineVersion(String clientEngineVersion) {
    this.clientEngineVersion = clientEngineVersion;
    return this;
  }

  /**
   * Client engine name.
   * @return clientEngineVersion
   */
  @javax.annotation.Nonnull
  public String getClientEngineVersion() {
    return clientEngineVersion;
  }

  public void setClientEngineVersion(String clientEngineVersion) {
    this.clientEngineVersion = clientEngineVersion;
  }


  public Log clientName(String clientName) {
    this.clientName = clientName;
    return this;
  }

  /**
   * Client name.
   * @return clientName
   */
  @javax.annotation.Nonnull
  public String getClientName() {
    return clientName;
  }

  public void setClientName(String clientName) {
    this.clientName = clientName;
  }


  public Log clientType(String clientType) {
    this.clientType = clientType;
    return this;
  }

  /**
   * Client type.
   * @return clientType
   */
  @javax.annotation.Nonnull
  public String getClientType() {
    return clientType;
  }

  public void setClientType(String clientType) {
    this.clientType = clientType;
  }


  public Log clientVersion(String clientVersion) {
    this.clientVersion = clientVersion;
    return this;
  }

  /**
   * Client version.
   * @return clientVersion
   */
  @javax.annotation.Nonnull
  public String getClientVersion() {
    return clientVersion;
  }

  public void setClientVersion(String clientVersion) {
    this.clientVersion = clientVersion;
  }


  public Log countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Country two-character ISO 3166-1 alpha code.
   * @return countryCode
   */
  @javax.annotation.Nonnull
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public Log countryName(String countryName) {
    this.countryName = countryName;
    return this;
  }

  /**
   * Country name.
   * @return countryName
   */
  @javax.annotation.Nonnull
  public String getCountryName() {
    return countryName;
  }

  public void setCountryName(String countryName) {
    this.countryName = countryName;
  }


  public Log deviceBrand(String deviceBrand) {
    this.deviceBrand = deviceBrand;
    return this;
  }

  /**
   * Device brand name.
   * @return deviceBrand
   */
  @javax.annotation.Nonnull
  public String getDeviceBrand() {
    return deviceBrand;
  }

  public void setDeviceBrand(String deviceBrand) {
    this.deviceBrand = deviceBrand;
  }


  public Log deviceModel(String deviceModel) {
    this.deviceModel = deviceModel;
    return this;
  }

  /**
   * Device model name.
   * @return deviceModel
   */
  @javax.annotation.Nonnull
  public String getDeviceModel() {
    return deviceModel;
  }

  public void setDeviceModel(String deviceModel) {
    this.deviceModel = deviceModel;
  }


  public Log deviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * Device name.
   * @return deviceName
   */
  @javax.annotation.Nonnull
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }


  public Log event(String event) {
    this.event = event;
    return this;
  }

  /**
   * Event name.
   * @return event
   */
  @javax.annotation.Nonnull
  public String getEvent() {
    return event;
  }

  public void setEvent(String event) {
    this.event = event;
  }


  public Log ip(String ip) {
    this.ip = ip;
    return this;
  }

  /**
   * IP session in use when the session was created.
   * @return ip
   */
  @javax.annotation.Nonnull
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public Log osCode(String osCode) {
    this.osCode = osCode;
    return this;
  }

  /**
   * Operating system code name. View list of [available options](https://github.com/appwrite/appwrite/blob/master/docs/lists/os.json).
   * @return osCode
   */
  @javax.annotation.Nonnull
  public String getOsCode() {
    return osCode;
  }

  public void setOsCode(String osCode) {
    this.osCode = osCode;
  }


  public Log osName(String osName) {
    this.osName = osName;
    return this;
  }

  /**
   * Operating system name.
   * @return osName
   */
  @javax.annotation.Nonnull
  public String getOsName() {
    return osName;
  }

  public void setOsName(String osName) {
    this.osName = osName;
  }


  public Log osVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  /**
   * Operating system version.
   * @return osVersion
   */
  @javax.annotation.Nonnull
  public String getOsVersion() {
    return osVersion;
  }

  public void setOsVersion(String osVersion) {
    this.osVersion = osVersion;
  }


  public Log time(Integer time) {
    this.time = time;
    return this;
  }

  /**
   * Log creation time in Unix timestamp.
   * @return time
   */
  @javax.annotation.Nonnull
  public Integer getTime() {
    return time;
  }

  public void setTime(Integer time) {
    this.time = time;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Log log = (Log) o;
    return Objects.equals(this.clientCode, log.clientCode) &&
        Objects.equals(this.clientEngine, log.clientEngine) &&
        Objects.equals(this.clientEngineVersion, log.clientEngineVersion) &&
        Objects.equals(this.clientName, log.clientName) &&
        Objects.equals(this.clientType, log.clientType) &&
        Objects.equals(this.clientVersion, log.clientVersion) &&
        Objects.equals(this.countryCode, log.countryCode) &&
        Objects.equals(this.countryName, log.countryName) &&
        Objects.equals(this.deviceBrand, log.deviceBrand) &&
        Objects.equals(this.deviceModel, log.deviceModel) &&
        Objects.equals(this.deviceName, log.deviceName) &&
        Objects.equals(this.event, log.event) &&
        Objects.equals(this.ip, log.ip) &&
        Objects.equals(this.osCode, log.osCode) &&
        Objects.equals(this.osName, log.osName) &&
        Objects.equals(this.osVersion, log.osVersion) &&
        Objects.equals(this.time, log.time);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientCode, clientEngine, clientEngineVersion, clientName, clientType, clientVersion, countryCode, countryName, deviceBrand, deviceModel, deviceName, event, ip, osCode, osName, osVersion, time);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Log {\n");
    sb.append("    clientCode: ").append(toIndentedString(clientCode)).append("\n");
    sb.append("    clientEngine: ").append(toIndentedString(clientEngine)).append("\n");
    sb.append("    clientEngineVersion: ").append(toIndentedString(clientEngineVersion)).append("\n");
    sb.append("    clientName: ").append(toIndentedString(clientName)).append("\n");
    sb.append("    clientType: ").append(toIndentedString(clientType)).append("\n");
    sb.append("    clientVersion: ").append(toIndentedString(clientVersion)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryName: ").append(toIndentedString(countryName)).append("\n");
    sb.append("    deviceBrand: ").append(toIndentedString(deviceBrand)).append("\n");
    sb.append("    deviceModel: ").append(toIndentedString(deviceModel)).append("\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    osCode: ").append(toIndentedString(osCode)).append("\n");
    sb.append("    osName: ").append(toIndentedString(osName)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientCode");
    openapiFields.add("clientEngine");
    openapiFields.add("clientEngineVersion");
    openapiFields.add("clientName");
    openapiFields.add("clientType");
    openapiFields.add("clientVersion");
    openapiFields.add("countryCode");
    openapiFields.add("countryName");
    openapiFields.add("deviceBrand");
    openapiFields.add("deviceModel");
    openapiFields.add("deviceName");
    openapiFields.add("event");
    openapiFields.add("ip");
    openapiFields.add("osCode");
    openapiFields.add("osName");
    openapiFields.add("osVersion");
    openapiFields.add("time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("clientCode");
    openapiRequiredFields.add("clientEngine");
    openapiRequiredFields.add("clientEngineVersion");
    openapiRequiredFields.add("clientName");
    openapiRequiredFields.add("clientType");
    openapiRequiredFields.add("clientVersion");
    openapiRequiredFields.add("countryCode");
    openapiRequiredFields.add("countryName");
    openapiRequiredFields.add("deviceBrand");
    openapiRequiredFields.add("deviceModel");
    openapiRequiredFields.add("deviceName");
    openapiRequiredFields.add("event");
    openapiRequiredFields.add("ip");
    openapiRequiredFields.add("osCode");
    openapiRequiredFields.add("osName");
    openapiRequiredFields.add("osVersion");
    openapiRequiredFields.add("time");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Log
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Log.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Log is not found in the empty JSON string", Log.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Log.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Log` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Log.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("clientCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientCode").toString()));
      }
      if (!jsonObj.get("clientEngine").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientEngine` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientEngine").toString()));
      }
      if (!jsonObj.get("clientEngineVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientEngineVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientEngineVersion").toString()));
      }
      if (!jsonObj.get("clientName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientName").toString()));
      }
      if (!jsonObj.get("clientType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientType").toString()));
      }
      if (!jsonObj.get("clientVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientVersion").toString()));
      }
      if (!jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if (!jsonObj.get("countryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryName").toString()));
      }
      if (!jsonObj.get("deviceBrand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceBrand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceBrand").toString()));
      }
      if (!jsonObj.get("deviceModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceModel").toString()));
      }
      if (!jsonObj.get("deviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceName").toString()));
      }
      if (!jsonObj.get("event").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event").toString()));
      }
      if (!jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if (!jsonObj.get("osCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osCode").toString()));
      }
      if (!jsonObj.get("osName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osName").toString()));
      }
      if (!jsonObj.get("osVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Log.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Log' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Log> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Log.class));

       return (TypeAdapter<T>) new TypeAdapter<Log>() {
           @Override
           public void write(JsonWriter out, Log value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Log read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Log given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Log
   * @throws IOException if the JSON string is invalid with respect to Log
   */
  public static Log fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Log.class);
  }

  /**
   * Convert an instance of Log to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

