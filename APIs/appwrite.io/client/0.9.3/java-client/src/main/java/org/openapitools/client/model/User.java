/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:29:19.125241-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class User {
  public static final String SERIALIZED_NAME_$_ID = "$id";
  @SerializedName(SERIALIZED_NAME_$_ID)
  private String $id;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMAIL_VERIFICATION = "emailVerification";
  @SerializedName(SERIALIZED_NAME_EMAIL_VERIFICATION)
  private Boolean emailVerification;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD_UPDATE = "passwordUpdate";
  @SerializedName(SERIALIZED_NAME_PASSWORD_UPDATE)
  private Integer passwordUpdate;

  public static final String SERIALIZED_NAME_PREFS = "prefs";
  @SerializedName(SERIALIZED_NAME_PREFS)
  private List<Map<String, Object>> prefs = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGISTRATION = "registration";
  @SerializedName(SERIALIZED_NAME_REGISTRATION)
  private Integer registration;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public User() {
  }

  public User $id(String $id) {
    this.$id = $id;
    return this;
  }

  /**
   * User ID.
   * @return $id
   */
  @javax.annotation.Nonnull
  public String get$Id() {
    return $id;
  }

  public void set$Id(String $id) {
    this.$id = $id;
  }


  public User email(String email) {
    this.email = email;
    return this;
  }

  /**
   * User email address.
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public User emailVerification(Boolean emailVerification) {
    this.emailVerification = emailVerification;
    return this;
  }

  /**
   * Email verification status.
   * @return emailVerification
   */
  @javax.annotation.Nonnull
  public Boolean getEmailVerification() {
    return emailVerification;
  }

  public void setEmailVerification(Boolean emailVerification) {
    this.emailVerification = emailVerification;
  }


  public User name(String name) {
    this.name = name;
    return this;
  }

  /**
   * User name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public User passwordUpdate(Integer passwordUpdate) {
    this.passwordUpdate = passwordUpdate;
    return this;
  }

  /**
   * Unix timestamp of the most recent password update
   * @return passwordUpdate
   */
  @javax.annotation.Nonnull
  public Integer getPasswordUpdate() {
    return passwordUpdate;
  }

  public void setPasswordUpdate(Integer passwordUpdate) {
    this.passwordUpdate = passwordUpdate;
  }


  public User prefs(List<Map<String, Object>> prefs) {
    this.prefs = prefs;
    return this;
  }

  public User addPrefsItem(Map<String, Object> prefsItem) {
    if (this.prefs == null) {
      this.prefs = new ArrayList<>();
    }
    this.prefs.add(prefsItem);
    return this;
  }

  /**
   * User preferences as a key-value object
   * @return prefs
   */
  @javax.annotation.Nonnull
  public List<Map<String, Object>> getPrefs() {
    return prefs;
  }

  public void setPrefs(List<Map<String, Object>> prefs) {
    this.prefs = prefs;
  }


  public User registration(Integer registration) {
    this.registration = registration;
    return this;
  }

  /**
   * User registration date in Unix timestamp.
   * @return registration
   */
  @javax.annotation.Nonnull
  public Integer getRegistration() {
    return registration;
  }

  public void setRegistration(Integer registration) {
    this.registration = registration;
  }


  public User status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * User status. 0 for Unactivated, 1 for active and 2 is blocked.
   * @return status
   */
  @javax.annotation.Nonnull
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.$id, user.$id) &&
        Objects.equals(this.email, user.email) &&
        Objects.equals(this.emailVerification, user.emailVerification) &&
        Objects.equals(this.name, user.name) &&
        Objects.equals(this.passwordUpdate, user.passwordUpdate) &&
        Objects.equals(this.prefs, user.prefs) &&
        Objects.equals(this.registration, user.registration) &&
        Objects.equals(this.status, user.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash($id, email, emailVerification, name, passwordUpdate, prefs, registration, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    $id: ").append(toIndentedString($id)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailVerification: ").append(toIndentedString(emailVerification)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    passwordUpdate: ").append(toIndentedString(passwordUpdate)).append("\n");
    sb.append("    prefs: ").append(toIndentedString(prefs)).append("\n");
    sb.append("    registration: ").append(toIndentedString(registration)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("$id");
    openapiFields.add("email");
    openapiFields.add("emailVerification");
    openapiFields.add("name");
    openapiFields.add("passwordUpdate");
    openapiFields.add("prefs");
    openapiFields.add("registration");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("$id");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("emailVerification");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("passwordUpdate");
    openapiRequiredFields.add("prefs");
    openapiRequiredFields.add("registration");
    openapiRequiredFields.add("status");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to User
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!User.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!User.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `User` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : User.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("$id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$id").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("prefs") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("prefs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `prefs` to be an array in the JSON string but got `%s`", jsonObj.get("prefs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of User given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of User
   * @throws IOException if the JSON string is invalid with respect to User
   */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

  /**
   * Convert an instance of User to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

