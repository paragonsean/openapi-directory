/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.io.File;
import org.openapitools.client.model.FileList;
import org.openapitools.client.model.StorageUpdateFileRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for StorageApi
 */
@Disabled
public class StorageApiTest {

    private final StorageApi api = new StorageApi();

    /**
     * Create File
     *
     * Create a new file. The user who creates the file will automatically be assigned to read and write access unless he has passed custom values for read and write arguments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageCreateFileTest() throws ApiException {
        String _file = null;
        List<String> read = null;
        List<String> write = null;
        File response = api.storageCreateFile(_file, read, write);
        // TODO: test validations
    }

    /**
     * Delete File
     *
     * Delete a file by its unique ID. Only users with write permissions have access to delete this resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageDeleteFileTest() throws ApiException {
        String fileId = null;
        api.storageDeleteFile(fileId);
        // TODO: test validations
    }

    /**
     * Get File
     *
     * Get a file by its unique ID. This endpoint response returns a JSON object with the file metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageGetFileTest() throws ApiException {
        String fileId = null;
        File response = api.storageGetFile(fileId);
        // TODO: test validations
    }

    /**
     * Get File for Download
     *
     * Get a file content by its unique ID. The endpoint response return with a &#39;Content-Disposition: attachment&#39; header that tells the browser to start downloading the file to user downloads directory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageGetFileDownloadTest() throws ApiException {
        String fileId = null;
        api.storageGetFileDownload(fileId);
        // TODO: test validations
    }

    /**
     * Get File Preview
     *
     * Get a file preview image. Currently, this method supports preview for image files (jpg, png, and gif), other supported formats, like pdf, docs, slides, and spreadsheets, will return the file icon image. You can also pass query string arguments for cutting and resizing your preview image.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageGetFilePreviewTest() throws ApiException {
        String fileId = null;
        Integer width = null;
        Integer height = null;
        String gravity = null;
        Integer quality = null;
        Integer borderWidth = null;
        String borderColor = null;
        Integer borderRadius = null;
        Float opacity = null;
        Integer rotation = null;
        String background = null;
        String output = null;
        api.storageGetFilePreview(fileId, width, height, gravity, quality, borderWidth, borderColor, borderRadius, opacity, rotation, background, output);
        // TODO: test validations
    }

    /**
     * Get File for View
     *
     * Get a file content by its unique ID. This endpoint is similar to the download method but returns with no  &#39;Content-Disposition: attachment&#39; header.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageGetFileViewTest() throws ApiException {
        String fileId = null;
        api.storageGetFileView(fileId);
        // TODO: test validations
    }

    /**
     * List Files
     *
     * Get a list of all the user files. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project&#39;s files. [Learn more about different API modes](/docs/admin).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageListFilesTest() throws ApiException {
        String search = null;
        Integer limit = null;
        Integer offset = null;
        String orderType = null;
        FileList response = api.storageListFiles(search, limit, offset, orderType);
        // TODO: test validations
    }

    /**
     * Update File
     *
     * Update a file by its unique ID. Only users with write permissions have access to update this resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storageUpdateFileTest() throws ApiException {
        String fileId = null;
        StorageUpdateFileRequest storageUpdateFileRequest = null;
        File response = api.storageUpdateFile(fileId, storageUpdateFileRequest);
        // TODO: test validations
    }

}
