/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AccountCreateRecoveryRequest;
import org.openapitools.client.model.AccountCreateRequest;
import org.openapitools.client.model.AccountCreateVerificationRequest;
import org.openapitools.client.model.AccountUpdateEmailRequest;
import org.openapitools.client.model.AccountUpdateNameRequest;
import org.openapitools.client.model.AccountUpdatePasswordRequest;
import org.openapitools.client.model.AccountUpdatePrefsRequest;
import org.openapitools.client.model.AccountUpdateRecoveryRequest;
import org.openapitools.client.model.AccountUpdateVerificationRequest;
import org.openapitools.client.model.Jwt;
import org.openapitools.client.model.LogList;
import org.openapitools.client.model.Session;
import org.openapitools.client.model.SessionList;
import org.openapitools.client.model.Token;
import org.openapitools.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountApi
 */
@Disabled
public class AccountApiTest {

    private final AccountApi api = new AccountApi();

    /**
     * Create Account
     *
     * Use this endpoint to allow a new user to register a new account in your project. After the user registration completes successfully, you can use the [/account/verfication](/docs/client/account#accountCreateVerification) route to start verifying the user email address. To allow the new user to login to their new account, you need to create a new [account session](/docs/client/account#accountCreateSession).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountCreateTest() throws ApiException {
        AccountCreateRequest accountCreateRequest = null;
        User response = api.accountCreate(accountCreateRequest);
        // TODO: test validations
    }

    /**
     * Create Anonymous Session
     *
     * Use this endpoint to allow a new user to register an anonymous account in your project. This route will also create a new session for the user. To allow the new user to convert an anonymous account to a normal account, you need to update its [email and password](/docs/client/account#accountUpdateEmail) or create an [OAuth2 session](/docs/client/account#accountCreateOAuth2Session).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountCreateAnonymousSessionTest() throws ApiException {
        Session response = api.accountCreateAnonymousSession();
        // TODO: test validations
    }

    /**
     * Create Account JWT
     *
     * Use this endpoint to create a JSON Web Token. You can use the resulting JWT to authenticate on behalf of the current user when working with the Appwrite server-side API and SDKs. The JWT secret is valid for 15 minutes from its creation and will be invalid if the user will logout in that time frame.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountCreateJWTTest() throws ApiException {
        Jwt response = api.accountCreateJWT();
        // TODO: test validations
    }

    /**
     * Create Account Session with OAuth2
     *
     * Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Appwrite console first. Use the success and failure arguments to provide a redirect URL&#39;s back to your app when login is completed.  If there is already an active session, the new session will be attached to the logged-in account. If there are no active sessions, the server will attempt to look for a user with the same email address as the email received from the OAuth2 provider and attach the new session to the existing user. If no matching user is found - the server will create a new user.. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountCreateOAuth2SessionTest() throws ApiException {
        String provider = null;
        String success = null;
        String failure = null;
        List<String> scopes = null;
        api.accountCreateOAuth2Session(provider, success, failure, scopes);
        // TODO: test validations
    }

    /**
     * Create Password Recovery
     *
     * Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the [PUT /account/recovery](/docs/client/account#accountUpdateRecovery) endpoint to complete the process. The verification link sent to the user&#39;s email address is valid for 1 hour.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountCreateRecoveryTest() throws ApiException {
        AccountCreateRecoveryRequest accountCreateRecoveryRequest = null;
        Token response = api.accountCreateRecovery(accountCreateRecoveryRequest);
        // TODO: test validations
    }

    /**
     * Create Account Session
     *
     * Allow the user to login into their account by providing a valid email and password combination. This route will create a new session for the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountCreateSessionTest() throws ApiException {
        AccountUpdateEmailRequest accountUpdateEmailRequest = null;
        Session response = api.accountCreateSession(accountUpdateEmailRequest);
        // TODO: test validations
    }

    /**
     * Create Email Verification
     *
     * Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the **userId** and **secret** arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the **userId** and **secret** parameters. Learn more about how to [complete the verification process](/docs/client/account#accountUpdateVerification). The verification link sent to the user&#39;s email address is valid for 7 days.  Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md), the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountCreateVerificationTest() throws ApiException {
        AccountCreateVerificationRequest accountCreateVerificationRequest = null;
        Token response = api.accountCreateVerification(accountCreateVerificationRequest);
        // TODO: test validations
    }

    /**
     * Delete Account
     *
     * Delete a currently logged in user account. Behind the scene, the user record is not deleted but permanently blocked from any access. This is done to avoid deleted accounts being overtaken by new users with the same email address. Any user-related resources like documents or storage files should be deleted separately.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountDeleteTest() throws ApiException {
        api.accountDelete();
        // TODO: test validations
    }

    /**
     * Delete Account Session
     *
     * Use this endpoint to log out the currently logged in user from all their account sessions across all of their different devices. When using the option id argument, only the session unique ID provider will be deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountDeleteSessionTest() throws ApiException {
        String sessionId = null;
        api.accountDeleteSession(sessionId);
        // TODO: test validations
    }

    /**
     * Delete All Account Sessions
     *
     * Delete all sessions from the user account and remove any sessions cookies from the end client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountDeleteSessionsTest() throws ApiException {
        api.accountDeleteSessions();
        // TODO: test validations
    }

    /**
     * Get Account
     *
     * Get currently logged in user data as JSON object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountGetTest() throws ApiException {
        User response = api.accountGet();
        // TODO: test validations
    }

    /**
     * Get Account Logs
     *
     * Get currently logged in user list of latest security activity logs. Each log returns user IP address, location and date and time of log.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountGetLogsTest() throws ApiException {
        LogList response = api.accountGetLogs();
        // TODO: test validations
    }

    /**
     * Get Account Preferences
     *
     * Get currently logged in user preferences as a key-value object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountGetPrefsTest() throws ApiException {
        Map<String, Object> response = api.accountGetPrefs();
        // TODO: test validations
    }

    /**
     * Get Session By ID
     *
     * Use this endpoint to get a logged in user&#39;s session using a Session ID. Inputting &#39;current&#39; will return the current session being used.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountGetSessionTest() throws ApiException {
        String sessionId = null;
        Session response = api.accountGetSession(sessionId);
        // TODO: test validations
    }

    /**
     * Get Account Sessions
     *
     * Get currently logged in user list of active sessions across different devices.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountGetSessionsTest() throws ApiException {
        SessionList response = api.accountGetSessions();
        // TODO: test validations
    }

    /**
     * Update Account Email
     *
     * Update currently logged in user account email address. After changing user address, user confirmation status is being reset and a new confirmation mail is sent. For security measures, user password is required to complete this request. This endpoint can also be used to convert an anonymous account to a normal one, by passing an email address and a new password.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountUpdateEmailTest() throws ApiException {
        AccountUpdateEmailRequest accountUpdateEmailRequest = null;
        User response = api.accountUpdateEmail(accountUpdateEmailRequest);
        // TODO: test validations
    }

    /**
     * Update Account Name
     *
     * Update currently logged in user account name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountUpdateNameTest() throws ApiException {
        AccountUpdateNameRequest accountUpdateNameRequest = null;
        User response = api.accountUpdateName(accountUpdateNameRequest);
        // TODO: test validations
    }

    /**
     * Update Account Password
     *
     * Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth and Team Invites, oldPassword is optional.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountUpdatePasswordTest() throws ApiException {
        AccountUpdatePasswordRequest accountUpdatePasswordRequest = null;
        User response = api.accountUpdatePassword(accountUpdatePasswordRequest);
        // TODO: test validations
    }

    /**
     * Update Account Preferences
     *
     * Update currently logged in user account preferences. You can pass only the specific settings you wish to update.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountUpdatePrefsTest() throws ApiException {
        AccountUpdatePrefsRequest accountUpdatePrefsRequest = null;
        User response = api.accountUpdatePrefs(accountUpdatePrefsRequest);
        // TODO: test validations
    }

    /**
     * Complete Password Recovery
     *
     * Use this endpoint to complete the user account password reset. Both the **userId** and **secret** arguments will be passed as query parameters to the redirect URL you have provided when sending your request to the [POST /account/recovery](/docs/client/account#accountCreateRecovery) endpoint.  Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountUpdateRecoveryTest() throws ApiException {
        AccountUpdateRecoveryRequest accountUpdateRecoveryRequest = null;
        Token response = api.accountUpdateRecovery(accountUpdateRecoveryRequest);
        // TODO: test validations
    }

    /**
     * Complete Email Verification
     *
     * Use this endpoint to complete the user email verification process. Use both the **userId** and **secret** parameters that were attached to your app URL to verify the user email ownership. If confirmed this route will return a 200 status code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountUpdateVerificationTest() throws ApiException {
        AccountUpdateVerificationRequest accountUpdateVerificationRequest = null;
        Token response = api.accountUpdateVerification(accountUpdateVerificationRequest);
        // TODO: test validations
    }

}
