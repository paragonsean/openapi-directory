/*
 * Appwrite
 * Appwrite backend as a service cuts up to 70% of the time and costs required for building a modern application. We abstract and simplify common development tasks behind a REST APIs, to help you develop your app in a fast and secure way. For full API documentation and tutorials go to [https://appwrite.io/docs](https://appwrite.io/docs)
 *
 * The version of the OpenAPI document: 0.9.3
 * Contact: team@appwrite.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DatabaseCreateDocumentRequest;
import org.openapitools.client.model.DatabaseUpdateDocumentRequest;
import org.openapitools.client.model.Document;
import org.openapitools.client.model.DocumentList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DatabaseApi
 */
@Disabled
public class DatabaseApiTest {

    private final DatabaseApi api = new DatabaseApi();

    /**
     * Create Document
     *
     * Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](/docs/server/database#databaseCreateCollection) API or directly from your database console.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseCreateDocumentTest() throws ApiException {
        String collectionId = null;
        DatabaseCreateDocumentRequest databaseCreateDocumentRequest = null;
        Document response = api.databaseCreateDocument(collectionId, databaseCreateDocumentRequest);
        // TODO: test validations
    }

    /**
     * Delete Document
     *
     * Delete a document by its unique ID. This endpoint deletes only the parent documents, its attributes and relations to other documents. Child documents **will not** be deleted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseDeleteDocumentTest() throws ApiException {
        String collectionId = null;
        String documentId = null;
        api.databaseDeleteDocument(collectionId, documentId);
        // TODO: test validations
    }

    /**
     * Get Document
     *
     * Get a document by its unique ID. This endpoint response returns a JSON object with the document data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseGetDocumentTest() throws ApiException {
        String collectionId = null;
        String documentId = null;
        Document response = api.databaseGetDocument(collectionId, documentId);
        // TODO: test validations
    }

    /**
     * List Documents
     *
     * Get a list of all the user documents. You can use the query params to filter your results. On admin mode, this endpoint will return a list of all of the project&#39;s documents. [Learn more about different API modes](/docs/admin).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseListDocumentsTest() throws ApiException {
        String collectionId = null;
        List<String> filters = null;
        Integer limit = null;
        Integer offset = null;
        String orderField = null;
        String orderType = null;
        String orderCast = null;
        String search = null;
        DocumentList response = api.databaseListDocuments(collectionId, filters, limit, offset, orderField, orderType, orderCast, search);
        // TODO: test validations
    }

    /**
     * Update Document
     *
     * Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void databaseUpdateDocumentTest() throws ApiException {
        String collectionId = null;
        String documentId = null;
        DatabaseUpdateDocumentRequest databaseUpdateDocumentRequest = null;
        Document response = api.databaseUpdateDocument(collectionId, documentId, databaseUpdateDocumentRequest);
        // TODO: test validations
    }

}
