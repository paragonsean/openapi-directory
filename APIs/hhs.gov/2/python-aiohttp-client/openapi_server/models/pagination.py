# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Pagination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, current_url: str=None, max: int=None, next_url: str=None, offset: int=None, page_num: int=None, previous_url: str=None, sort: str=None, total: int=None, total_pages: int=None):
        """Pagination - a model defined in OpenAPI

        :param count: The count of this Pagination.
        :param current_url: The current_url of this Pagination.
        :param max: The max of this Pagination.
        :param next_url: The next_url of this Pagination.
        :param offset: The offset of this Pagination.
        :param page_num: The page_num of this Pagination.
        :param previous_url: The previous_url of this Pagination.
        :param sort: The sort of this Pagination.
        :param total: The total of this Pagination.
        :param total_pages: The total_pages of this Pagination.
        """
        self.openapi_types = {
            'count': int,
            'current_url': str,
            'max': int,
            'next_url': str,
            'offset': int,
            'page_num': int,
            'previous_url': str,
            'sort': str,
            'total': int,
            'total_pages': int
        }

        self.attribute_map = {
            'count': 'count',
            'current_url': 'currentUrl',
            'max': 'max',
            'next_url': 'nextUrl',
            'offset': 'offset',
            'page_num': 'pageNum',
            'previous_url': 'previousUrl',
            'sort': 'sort',
            'total': 'total',
            'total_pages': 'totalPages'
        }

        self._count = count
        self._current_url = current_url
        self._max = max
        self._next_url = next_url
        self._offset = offset
        self._page_num = page_num
        self._previous_url = previous_url
        self._sort = sort
        self._total = total
        self._total_pages = total_pages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pagination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pagination of this Pagination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this Pagination.


        :return: The count of this Pagination.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Pagination.


        :param count: The count of this Pagination.
        :type count: int
        """

        self._count = count

    @property
    def current_url(self):
        """Gets the current_url of this Pagination.


        :return: The current_url of this Pagination.
        :rtype: str
        """
        return self._current_url

    @current_url.setter
    def current_url(self, current_url):
        """Sets the current_url of this Pagination.


        :param current_url: The current_url of this Pagination.
        :type current_url: str
        """

        self._current_url = current_url

    @property
    def max(self):
        """Gets the max of this Pagination.


        :return: The max of this Pagination.
        :rtype: int
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this Pagination.


        :param max: The max of this Pagination.
        :type max: int
        """

        self._max = max

    @property
    def next_url(self):
        """Gets the next_url of this Pagination.


        :return: The next_url of this Pagination.
        :rtype: str
        """
        return self._next_url

    @next_url.setter
    def next_url(self, next_url):
        """Sets the next_url of this Pagination.


        :param next_url: The next_url of this Pagination.
        :type next_url: str
        """

        self._next_url = next_url

    @property
    def offset(self):
        """Gets the offset of this Pagination.


        :return: The offset of this Pagination.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this Pagination.


        :param offset: The offset of this Pagination.
        :type offset: int
        """

        self._offset = offset

    @property
    def page_num(self):
        """Gets the page_num of this Pagination.


        :return: The page_num of this Pagination.
        :rtype: int
        """
        return self._page_num

    @page_num.setter
    def page_num(self, page_num):
        """Sets the page_num of this Pagination.


        :param page_num: The page_num of this Pagination.
        :type page_num: int
        """

        self._page_num = page_num

    @property
    def previous_url(self):
        """Gets the previous_url of this Pagination.


        :return: The previous_url of this Pagination.
        :rtype: str
        """
        return self._previous_url

    @previous_url.setter
    def previous_url(self, previous_url):
        """Sets the previous_url of this Pagination.


        :param previous_url: The previous_url of this Pagination.
        :type previous_url: str
        """

        self._previous_url = previous_url

    @property
    def sort(self):
        """Gets the sort of this Pagination.


        :return: The sort of this Pagination.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this Pagination.


        :param sort: The sort of this Pagination.
        :type sort: str
        """

        self._sort = sort

    @property
    def total(self):
        """Gets the total of this Pagination.


        :return: The total of this Pagination.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Pagination.


        :param total: The total of this Pagination.
        :type total: int
        """

        self._total = total

    @property
    def total_pages(self):
        """Gets the total_pages of this Pagination.


        :return: The total_pages of this Pagination.
        :rtype: int
        """
        return self._total_pages

    @total_pages.setter
    def total_pages(self, total_pages):
        """Sets the total_pages of this Pagination.


        :param total_pages: The total_pages of this Pagination.
        :type total_pages: int
        """

        self._total_pages = total_pages
