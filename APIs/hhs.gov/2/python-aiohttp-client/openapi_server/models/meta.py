# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message import Message
from openapi_server.models.pagination import Pagination
from openapi_server import util


class Meta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, messages: List[Message]=None, pagination: Pagination=None, status: int=None):
        """Meta - a model defined in OpenAPI

        :param messages: The messages of this Meta.
        :param pagination: The pagination of this Meta.
        :param status: The status of this Meta.
        """
        self.openapi_types = {
            'messages': List[Message],
            'pagination': Pagination,
            'status': int
        }

        self.attribute_map = {
            'messages': 'messages',
            'pagination': 'pagination',
            'status': 'status'
        }

        self._messages = messages
        self._pagination = pagination
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Meta':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Meta of this Meta.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def messages(self):
        """Gets the messages of this Meta.


        :return: The messages of this Meta.
        :rtype: List[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this Meta.


        :param messages: The messages of this Meta.
        :type messages: List[Message]
        """

        self._messages = messages

    @property
    def pagination(self):
        """Gets the pagination of this Meta.


        :return: The pagination of this Meta.
        :rtype: Pagination
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """Sets the pagination of this Meta.


        :param pagination: The pagination of this Meta.
        :type pagination: Pagination
        """

        self._pagination = pagination

    @property
    def status(self):
        """Gets the status of this Meta.


        :return: The status of this Meta.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Meta.


        :param status: The status of this Meta.
        :type status: int
        """

        self._status = status
