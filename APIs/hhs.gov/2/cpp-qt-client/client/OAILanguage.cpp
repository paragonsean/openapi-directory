/**
 * HHS Media Services API
 * <div class=\"swagger-ui-wrap extraFooter\"><h3>Common Features / Behaviors</h3> <div class=\"features\"> <ul> <li><strong>* \"sort\" param:</strong> supports multi column sorting through the use of commas as delimiters, and a hyphen to denote descending order. <br/> <strong><span>Examples:</span></strong> <ul> <li><span class=\"example\">name</span><span class=\"description\">sort results by name ascending</span></li> <li><span class=\"example\">-name</span><span class=\"description\">sort results by name descending</span></li> <li><span class=\"example\">-name,id</span><span class=\"description\">sort results by name descending and then by id ascending</span></li> <li><span class=\"example\">id,-dateContentAuthored</span><span class=\"description\">sort results by id ascending and then date descending</span></li> </ul> </li> <li><strong>Date formats:</strong> Date input format is expected to be based on <a href=\"http://www.ietf.org/rfc/rfc3339.txt\">RFC 3339</a>. <br/> <span><strong>Example:</strong></span> <ul><li>2013-11-18T18:43:01Z</li></ul> </li> </ul> </div> </div>
 *
 * The version of the OpenAPI document: 2
 * Contact: syndicationadmin@hhs.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILanguage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILanguage::OAILanguage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILanguage::OAILanguage() {
    this->initializeModel();
}

OAILanguage::~OAILanguage() {}

void OAILanguage::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_active_isSet = false;
    m_is_active_isValid = false;

    m_iso_code_isSet = false;
    m_iso_code_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAILanguage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILanguage::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_active_isValid = ::OpenAPI::fromJsonValue(m_is_active, json[QString("isActive")]);
    m_is_active_isSet = !json[QString("isActive")].isNull() && m_is_active_isValid;

    m_iso_code_isValid = ::OpenAPI::fromJsonValue(m_iso_code, json[QString("isoCode")]);
    m_iso_code_isSet = !json[QString("isoCode")].isNull() && m_iso_code_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAILanguage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILanguage::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_active_isSet) {
        obj.insert(QString("isActive"), ::OpenAPI::toJsonValue(m_is_active));
    }
    if (m_iso_code_isSet) {
        obj.insert(QString("isoCode"), ::OpenAPI::toJsonValue(m_iso_code));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

qint64 OAILanguage::getId() const {
    return m_id;
}
void OAILanguage::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILanguage::is_id_Set() const{
    return m_id_isSet;
}

bool OAILanguage::is_id_Valid() const{
    return m_id_isValid;
}

bool OAILanguage::isIsActive() const {
    return m_is_active;
}
void OAILanguage::setIsActive(const bool &is_active) {
    m_is_active = is_active;
    m_is_active_isSet = true;
}

bool OAILanguage::is_is_active_Set() const{
    return m_is_active_isSet;
}

bool OAILanguage::is_is_active_Valid() const{
    return m_is_active_isValid;
}

QString OAILanguage::getIsoCode() const {
    return m_iso_code;
}
void OAILanguage::setIsoCode(const QString &iso_code) {
    m_iso_code = iso_code;
    m_iso_code_isSet = true;
}

bool OAILanguage::is_iso_code_Set() const{
    return m_iso_code_isSet;
}

bool OAILanguage::is_iso_code_Valid() const{
    return m_iso_code_isValid;
}

QString OAILanguage::getName() const {
    return m_name;
}
void OAILanguage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILanguage::is_name_Set() const{
    return m_name_isSet;
}

bool OAILanguage::is_name_Valid() const{
    return m_name_isValid;
}

bool OAILanguage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iso_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILanguage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
