/**
 * HHS Media Services API
 * <div class=\"swagger-ui-wrap extraFooter\"><h3>Common Features / Behaviors</h3> <div class=\"features\"> <ul> <li><strong>* \"sort\" param:</strong> supports multi column sorting through the use of commas as delimiters, and a hyphen to denote descending order. <br/> <strong><span>Examples:</span></strong> <ul> <li><span class=\"example\">name</span><span class=\"description\">sort results by name ascending</span></li> <li><span class=\"example\">-name</span><span class=\"description\">sort results by name descending</span></li> <li><span class=\"example\">-name,id</span><span class=\"description\">sort results by name descending and then by id ascending</span></li> <li><span class=\"example\">id,-dateContentAuthored</span><span class=\"description\">sort results by id ascending and then date descending</span></li> </ul> </li> <li><strong>Date formats:</strong> Date input format is expected to be based on <a href=\"http://www.ietf.org/rfc/rfc3339.txt\">RFC 3339</a>. <br/> <span><strong>Example:</strong></span> <ul><li>2013-11-18T18:43:01Z</li></ul> </li> </ul> </div> </div>
 *
 * The version of the OpenAPI document: 2
 * Contact: syndicationadmin@hhs.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImage::OAIImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImage::OAIImage() {
    this->initializeModel();
}

OAIImage::~OAIImage() {}

void OAIImage::initializeModel() {

    m_campaigns_isSet = false;
    m_campaigns_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_custom_attribution_url_isSet = false;
    m_custom_attribution_url_isValid = false;

    m_custom_preview_url_isSet = false;
    m_custom_preview_url_isValid = false;

    m_custom_thumbnail_url_isSet = false;
    m_custom_thumbnail_url_isValid = false;

    m_date_content_authored_isSet = false;
    m_date_content_authored_isValid = false;

    m_date_content_published_isSet = false;
    m_date_content_published_isValid = false;

    m_date_content_reviewed_isSet = false;
    m_date_content_reviewed_isValid = false;

    m_date_content_updated_isSet = false;
    m_date_content_updated_isValid = false;

    m_date_syndication_captured_isSet = false;
    m_date_syndication_captured_isValid = false;

    m_date_syndication_updated_isSet = false;
    m_date_syndication_updated_isValid = false;

    m_date_syndication_visible_isSet = false;
    m_date_syndication_visible_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_extended_attributes_isSet = false;
    m_extended_attributes_isValid = false;

    m_external_guid_isSet = false;
    m_external_guid_isValid = false;

    m_foreign_syndication_api_url_isSet = false;
    m_foreign_syndication_api_url_isValid = false;

    m_hash_isSet = false;
    m_hash_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_source_url_isSet = false;
    m_source_url_isValid = false;

    m_target_url_isSet = false;
    m_target_url_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImage::fromJsonObject(QJsonObject json) {

    m_campaigns_isValid = ::OpenAPI::fromJsonValue(m_campaigns, json[QString("campaigns")]);
    m_campaigns_isSet = !json[QString("campaigns")].isNull() && m_campaigns_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_custom_attribution_url_isValid = ::OpenAPI::fromJsonValue(m_custom_attribution_url, json[QString("customAttributionUrl")]);
    m_custom_attribution_url_isSet = !json[QString("customAttributionUrl")].isNull() && m_custom_attribution_url_isValid;

    m_custom_preview_url_isValid = ::OpenAPI::fromJsonValue(m_custom_preview_url, json[QString("customPreviewUrl")]);
    m_custom_preview_url_isSet = !json[QString("customPreviewUrl")].isNull() && m_custom_preview_url_isValid;

    m_custom_thumbnail_url_isValid = ::OpenAPI::fromJsonValue(m_custom_thumbnail_url, json[QString("customThumbnailUrl")]);
    m_custom_thumbnail_url_isSet = !json[QString("customThumbnailUrl")].isNull() && m_custom_thumbnail_url_isValid;

    m_date_content_authored_isValid = ::OpenAPI::fromJsonValue(m_date_content_authored, json[QString("dateContentAuthored")]);
    m_date_content_authored_isSet = !json[QString("dateContentAuthored")].isNull() && m_date_content_authored_isValid;

    m_date_content_published_isValid = ::OpenAPI::fromJsonValue(m_date_content_published, json[QString("dateContentPublished")]);
    m_date_content_published_isSet = !json[QString("dateContentPublished")].isNull() && m_date_content_published_isValid;

    m_date_content_reviewed_isValid = ::OpenAPI::fromJsonValue(m_date_content_reviewed, json[QString("dateContentReviewed")]);
    m_date_content_reviewed_isSet = !json[QString("dateContentReviewed")].isNull() && m_date_content_reviewed_isValid;

    m_date_content_updated_isValid = ::OpenAPI::fromJsonValue(m_date_content_updated, json[QString("dateContentUpdated")]);
    m_date_content_updated_isSet = !json[QString("dateContentUpdated")].isNull() && m_date_content_updated_isValid;

    m_date_syndication_captured_isValid = ::OpenAPI::fromJsonValue(m_date_syndication_captured, json[QString("dateSyndicationCaptured")]);
    m_date_syndication_captured_isSet = !json[QString("dateSyndicationCaptured")].isNull() && m_date_syndication_captured_isValid;

    m_date_syndication_updated_isValid = ::OpenAPI::fromJsonValue(m_date_syndication_updated, json[QString("dateSyndicationUpdated")]);
    m_date_syndication_updated_isSet = !json[QString("dateSyndicationUpdated")].isNull() && m_date_syndication_updated_isValid;

    m_date_syndication_visible_isValid = ::OpenAPI::fromJsonValue(m_date_syndication_visible, json[QString("dateSyndicationVisible")]);
    m_date_syndication_visible_isSet = !json[QString("dateSyndicationVisible")].isNull() && m_date_syndication_visible_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_extended_attributes_isValid = ::OpenAPI::fromJsonValue(m_extended_attributes, json[QString("extendedAttributes")]);
    m_extended_attributes_isSet = !json[QString("extendedAttributes")].isNull() && m_extended_attributes_isValid;

    m_external_guid_isValid = ::OpenAPI::fromJsonValue(m_external_guid, json[QString("externalGuid")]);
    m_external_guid_isSet = !json[QString("externalGuid")].isNull() && m_external_guid_isValid;

    m_foreign_syndication_api_url_isValid = ::OpenAPI::fromJsonValue(m_foreign_syndication_api_url, json[QString("foreignSyndicationAPIUrl")]);
    m_foreign_syndication_api_url_isSet = !json[QString("foreignSyndicationAPIUrl")].isNull() && m_foreign_syndication_api_url_isValid;

    m_hash_isValid = ::OpenAPI::fromJsonValue(m_hash, json[QString("hash")]);
    m_hash_isSet = !json[QString("hash")].isNull() && m_hash_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("mediaType")]);
    m_media_type_isSet = !json[QString("mediaType")].isNull() && m_media_type_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_source_url_isValid = ::OpenAPI::fromJsonValue(m_source_url, json[QString("sourceUrl")]);
    m_source_url_isSet = !json[QString("sourceUrl")].isNull() && m_source_url_isValid;

    m_target_url_isValid = ::OpenAPI::fromJsonValue(m_target_url, json[QString("targetUrl")]);
    m_target_url_isSet = !json[QString("targetUrl")].isNull() && m_target_url_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImage::asJsonObject() const {
    QJsonObject obj;
    if (m_campaigns.size() > 0) {
        obj.insert(QString("campaigns"), ::OpenAPI::toJsonValue(m_campaigns));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_custom_attribution_url_isSet) {
        obj.insert(QString("customAttributionUrl"), ::OpenAPI::toJsonValue(m_custom_attribution_url));
    }
    if (m_custom_preview_url_isSet) {
        obj.insert(QString("customPreviewUrl"), ::OpenAPI::toJsonValue(m_custom_preview_url));
    }
    if (m_custom_thumbnail_url_isSet) {
        obj.insert(QString("customThumbnailUrl"), ::OpenAPI::toJsonValue(m_custom_thumbnail_url));
    }
    if (m_date_content_authored_isSet) {
        obj.insert(QString("dateContentAuthored"), ::OpenAPI::toJsonValue(m_date_content_authored));
    }
    if (m_date_content_published_isSet) {
        obj.insert(QString("dateContentPublished"), ::OpenAPI::toJsonValue(m_date_content_published));
    }
    if (m_date_content_reviewed_isSet) {
        obj.insert(QString("dateContentReviewed"), ::OpenAPI::toJsonValue(m_date_content_reviewed));
    }
    if (m_date_content_updated_isSet) {
        obj.insert(QString("dateContentUpdated"), ::OpenAPI::toJsonValue(m_date_content_updated));
    }
    if (m_date_syndication_captured_isSet) {
        obj.insert(QString("dateSyndicationCaptured"), ::OpenAPI::toJsonValue(m_date_syndication_captured));
    }
    if (m_date_syndication_updated_isSet) {
        obj.insert(QString("dateSyndicationUpdated"), ::OpenAPI::toJsonValue(m_date_syndication_updated));
    }
    if (m_date_syndication_visible_isSet) {
        obj.insert(QString("dateSyndicationVisible"), ::OpenAPI::toJsonValue(m_date_syndication_visible));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_extended_attributes.size() > 0) {
        obj.insert(QString("extendedAttributes"), ::OpenAPI::toJsonValue(m_extended_attributes));
    }
    if (m_external_guid_isSet) {
        obj.insert(QString("externalGuid"), ::OpenAPI::toJsonValue(m_external_guid));
    }
    if (m_foreign_syndication_api_url_isSet) {
        obj.insert(QString("foreignSyndicationAPIUrl"), ::OpenAPI::toJsonValue(m_foreign_syndication_api_url));
    }
    if (m_hash_isSet) {
        obj.insert(QString("hash"), ::OpenAPI::toJsonValue(m_hash));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_language.isSet()) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("mediaType"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_source_url_isSet) {
        obj.insert(QString("sourceUrl"), ::OpenAPI::toJsonValue(m_source_url));
    }
    if (m_target_url_isSet) {
        obj.insert(QString("targetUrl"), ::OpenAPI::toJsonValue(m_target_url));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QList<OAICampaign> OAIImage::getCampaigns() const {
    return m_campaigns;
}
void OAIImage::setCampaigns(const QList<OAICampaign> &campaigns) {
    m_campaigns = campaigns;
    m_campaigns_isSet = true;
}

bool OAIImage::is_campaigns_Set() const{
    return m_campaigns_isSet;
}

bool OAIImage::is_campaigns_Valid() const{
    return m_campaigns_isValid;
}

QString OAIImage::getCreatedBy() const {
    return m_created_by;
}
void OAIImage::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIImage::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIImage::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QString OAIImage::getCustomAttributionUrl() const {
    return m_custom_attribution_url;
}
void OAIImage::setCustomAttributionUrl(const QString &custom_attribution_url) {
    m_custom_attribution_url = custom_attribution_url;
    m_custom_attribution_url_isSet = true;
}

bool OAIImage::is_custom_attribution_url_Set() const{
    return m_custom_attribution_url_isSet;
}

bool OAIImage::is_custom_attribution_url_Valid() const{
    return m_custom_attribution_url_isValid;
}

QString OAIImage::getCustomPreviewUrl() const {
    return m_custom_preview_url;
}
void OAIImage::setCustomPreviewUrl(const QString &custom_preview_url) {
    m_custom_preview_url = custom_preview_url;
    m_custom_preview_url_isSet = true;
}

bool OAIImage::is_custom_preview_url_Set() const{
    return m_custom_preview_url_isSet;
}

bool OAIImage::is_custom_preview_url_Valid() const{
    return m_custom_preview_url_isValid;
}

QString OAIImage::getCustomThumbnailUrl() const {
    return m_custom_thumbnail_url;
}
void OAIImage::setCustomThumbnailUrl(const QString &custom_thumbnail_url) {
    m_custom_thumbnail_url = custom_thumbnail_url;
    m_custom_thumbnail_url_isSet = true;
}

bool OAIImage::is_custom_thumbnail_url_Set() const{
    return m_custom_thumbnail_url_isSet;
}

bool OAIImage::is_custom_thumbnail_url_Valid() const{
    return m_custom_thumbnail_url_isValid;
}

QDate OAIImage::getDateContentAuthored() const {
    return m_date_content_authored;
}
void OAIImage::setDateContentAuthored(const QDate &date_content_authored) {
    m_date_content_authored = date_content_authored;
    m_date_content_authored_isSet = true;
}

bool OAIImage::is_date_content_authored_Set() const{
    return m_date_content_authored_isSet;
}

bool OAIImage::is_date_content_authored_Valid() const{
    return m_date_content_authored_isValid;
}

QDate OAIImage::getDateContentPublished() const {
    return m_date_content_published;
}
void OAIImage::setDateContentPublished(const QDate &date_content_published) {
    m_date_content_published = date_content_published;
    m_date_content_published_isSet = true;
}

bool OAIImage::is_date_content_published_Set() const{
    return m_date_content_published_isSet;
}

bool OAIImage::is_date_content_published_Valid() const{
    return m_date_content_published_isValid;
}

QDate OAIImage::getDateContentReviewed() const {
    return m_date_content_reviewed;
}
void OAIImage::setDateContentReviewed(const QDate &date_content_reviewed) {
    m_date_content_reviewed = date_content_reviewed;
    m_date_content_reviewed_isSet = true;
}

bool OAIImage::is_date_content_reviewed_Set() const{
    return m_date_content_reviewed_isSet;
}

bool OAIImage::is_date_content_reviewed_Valid() const{
    return m_date_content_reviewed_isValid;
}

QDate OAIImage::getDateContentUpdated() const {
    return m_date_content_updated;
}
void OAIImage::setDateContentUpdated(const QDate &date_content_updated) {
    m_date_content_updated = date_content_updated;
    m_date_content_updated_isSet = true;
}

bool OAIImage::is_date_content_updated_Set() const{
    return m_date_content_updated_isSet;
}

bool OAIImage::is_date_content_updated_Valid() const{
    return m_date_content_updated_isValid;
}

QDate OAIImage::getDateSyndicationCaptured() const {
    return m_date_syndication_captured;
}
void OAIImage::setDateSyndicationCaptured(const QDate &date_syndication_captured) {
    m_date_syndication_captured = date_syndication_captured;
    m_date_syndication_captured_isSet = true;
}

bool OAIImage::is_date_syndication_captured_Set() const{
    return m_date_syndication_captured_isSet;
}

bool OAIImage::is_date_syndication_captured_Valid() const{
    return m_date_syndication_captured_isValid;
}

QDate OAIImage::getDateSyndicationUpdated() const {
    return m_date_syndication_updated;
}
void OAIImage::setDateSyndicationUpdated(const QDate &date_syndication_updated) {
    m_date_syndication_updated = date_syndication_updated;
    m_date_syndication_updated_isSet = true;
}

bool OAIImage::is_date_syndication_updated_Set() const{
    return m_date_syndication_updated_isSet;
}

bool OAIImage::is_date_syndication_updated_Valid() const{
    return m_date_syndication_updated_isValid;
}

QDate OAIImage::getDateSyndicationVisible() const {
    return m_date_syndication_visible;
}
void OAIImage::setDateSyndicationVisible(const QDate &date_syndication_visible) {
    m_date_syndication_visible = date_syndication_visible;
    m_date_syndication_visible_isSet = true;
}

bool OAIImage::is_date_syndication_visible_Set() const{
    return m_date_syndication_visible_isSet;
}

bool OAIImage::is_date_syndication_visible_Valid() const{
    return m_date_syndication_visible_isValid;
}

QString OAIImage::getDescription() const {
    return m_description;
}
void OAIImage::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIImage::is_description_Set() const{
    return m_description_isSet;
}

bool OAIImage::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIExtendedAttribute> OAIImage::getExtendedAttributes() const {
    return m_extended_attributes;
}
void OAIImage::setExtendedAttributes(const QList<OAIExtendedAttribute> &extended_attributes) {
    m_extended_attributes = extended_attributes;
    m_extended_attributes_isSet = true;
}

bool OAIImage::is_extended_attributes_Set() const{
    return m_extended_attributes_isSet;
}

bool OAIImage::is_extended_attributes_Valid() const{
    return m_extended_attributes_isValid;
}

QString OAIImage::getExternalGuid() const {
    return m_external_guid;
}
void OAIImage::setExternalGuid(const QString &external_guid) {
    m_external_guid = external_guid;
    m_external_guid_isSet = true;
}

bool OAIImage::is_external_guid_Set() const{
    return m_external_guid_isSet;
}

bool OAIImage::is_external_guid_Valid() const{
    return m_external_guid_isValid;
}

QString OAIImage::getForeignSyndicationApiUrl() const {
    return m_foreign_syndication_api_url;
}
void OAIImage::setForeignSyndicationApiUrl(const QString &foreign_syndication_api_url) {
    m_foreign_syndication_api_url = foreign_syndication_api_url;
    m_foreign_syndication_api_url_isSet = true;
}

bool OAIImage::is_foreign_syndication_api_url_Set() const{
    return m_foreign_syndication_api_url_isSet;
}

bool OAIImage::is_foreign_syndication_api_url_Valid() const{
    return m_foreign_syndication_api_url_isValid;
}

QString OAIImage::getHash() const {
    return m_hash;
}
void OAIImage::setHash(const QString &hash) {
    m_hash = hash;
    m_hash_isSet = true;
}

bool OAIImage::is_hash_Set() const{
    return m_hash_isSet;
}

bool OAIImage::is_hash_Valid() const{
    return m_hash_isValid;
}

qint32 OAIImage::getHeight() const {
    return m_height;
}
void OAIImage::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIImage::is_height_Set() const{
    return m_height_isSet;
}

bool OAIImage::is_height_Valid() const{
    return m_height_isValid;
}

qint64 OAIImage::getId() const {
    return m_id;
}
void OAIImage::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImage::is_id_Valid() const{
    return m_id_isValid;
}

OAILanguage OAIImage::getLanguage() const {
    return m_language;
}
void OAIImage::setLanguage(const OAILanguage &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIImage::is_language_Set() const{
    return m_language_isSet;
}

bool OAIImage::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIImage::getMediaType() const {
    return m_media_type;
}
void OAIImage::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIImage::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIImage::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QString OAIImage::getName() const {
    return m_name;
}
void OAIImage::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImage::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImage::is_name_Valid() const{
    return m_name_isValid;
}

OAISource OAIImage::getSource() const {
    return m_source;
}
void OAIImage::setSource(const OAISource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIImage::is_source_Set() const{
    return m_source_isSet;
}

bool OAIImage::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIImage::getSourceUrl() const {
    return m_source_url;
}
void OAIImage::setSourceUrl(const QString &source_url) {
    m_source_url = source_url;
    m_source_url_isSet = true;
}

bool OAIImage::is_source_url_Set() const{
    return m_source_url_isSet;
}

bool OAIImage::is_source_url_Valid() const{
    return m_source_url_isValid;
}

QString OAIImage::getTargetUrl() const {
    return m_target_url;
}
void OAIImage::setTargetUrl(const QString &target_url) {
    m_target_url = target_url;
    m_target_url_isSet = true;
}

bool OAIImage::is_target_url_Set() const{
    return m_target_url_isSet;
}

bool OAIImage::is_target_url_Valid() const{
    return m_target_url_isValid;
}

qint32 OAIImage::getWidth() const {
    return m_width;
}
void OAIImage::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIImage::is_width_Set() const{
    return m_width_isSet;
}

bool OAIImage::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campaigns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_attribution_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_preview_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_thumbnail_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_content_authored_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_content_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_content_reviewed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_content_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_syndication_captured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_syndication_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_syndication_visible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_foreign_syndication_api_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
