/**
 * HHS Media Services API
 * <div class=\"swagger-ui-wrap extraFooter\"><h3>Common Features / Behaviors</h3> <div class=\"features\"> <ul> <li><strong>* \"sort\" param:</strong> supports multi column sorting through the use of commas as delimiters, and a hyphen to denote descending order. <br/> <strong><span>Examples:</span></strong> <ul> <li><span class=\"example\">name</span><span class=\"description\">sort results by name ascending</span></li> <li><span class=\"example\">-name</span><span class=\"description\">sort results by name descending</span></li> <li><span class=\"example\">-name,id</span><span class=\"description\">sort results by name descending and then by id ascending</span></li> <li><span class=\"example\">id,-dateContentAuthored</span><span class=\"description\">sort results by id ascending and then date descending</span></li> </ul> </li> <li><strong>Date formats:</strong> Date input format is expected to be based on <a href=\"http://www.ietf.org/rfc/rfc3339.txt\">RFC 3339</a>. <br/> <span><strong>Example:</strong></span> <ul><li>2013-11-18T18:43:01Z</li></ul> </li> </ul> </div> </div>
 *
 * The version of the OpenAPI document: 2
 * Contact: syndicationadmin@hhs.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPagination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPagination::OAIPagination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPagination::OAIPagination() {
    this->initializeModel();
}

OAIPagination::~OAIPagination() {}

void OAIPagination::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_current_url_isSet = false;
    m_current_url_isValid = false;

    m_max_isSet = false;
    m_max_isValid = false;

    m_next_url_isSet = false;
    m_next_url_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_page_num_isSet = false;
    m_page_num_isValid = false;

    m_previous_url_isSet = false;
    m_previous_url_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_total_pages_isSet = false;
    m_total_pages_isValid = false;
}

void OAIPagination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPagination::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_current_url_isValid = ::OpenAPI::fromJsonValue(m_current_url, json[QString("currentUrl")]);
    m_current_url_isSet = !json[QString("currentUrl")].isNull() && m_current_url_isValid;

    m_max_isValid = ::OpenAPI::fromJsonValue(m_max, json[QString("max")]);
    m_max_isSet = !json[QString("max")].isNull() && m_max_isValid;

    m_next_url_isValid = ::OpenAPI::fromJsonValue(m_next_url, json[QString("nextUrl")]);
    m_next_url_isSet = !json[QString("nextUrl")].isNull() && m_next_url_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_page_num_isValid = ::OpenAPI::fromJsonValue(m_page_num, json[QString("pageNum")]);
    m_page_num_isSet = !json[QString("pageNum")].isNull() && m_page_num_isValid;

    m_previous_url_isValid = ::OpenAPI::fromJsonValue(m_previous_url, json[QString("previousUrl")]);
    m_previous_url_isSet = !json[QString("previousUrl")].isNull() && m_previous_url_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_total_pages_isValid = ::OpenAPI::fromJsonValue(m_total_pages, json[QString("totalPages")]);
    m_total_pages_isSet = !json[QString("totalPages")].isNull() && m_total_pages_isValid;
}

QString OAIPagination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPagination::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_current_url_isSet) {
        obj.insert(QString("currentUrl"), ::OpenAPI::toJsonValue(m_current_url));
    }
    if (m_max_isSet) {
        obj.insert(QString("max"), ::OpenAPI::toJsonValue(m_max));
    }
    if (m_next_url_isSet) {
        obj.insert(QString("nextUrl"), ::OpenAPI::toJsonValue(m_next_url));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_page_num_isSet) {
        obj.insert(QString("pageNum"), ::OpenAPI::toJsonValue(m_page_num));
    }
    if (m_previous_url_isSet) {
        obj.insert(QString("previousUrl"), ::OpenAPI::toJsonValue(m_previous_url));
    }
    if (m_sort_isSet) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_total_pages_isSet) {
        obj.insert(QString("totalPages"), ::OpenAPI::toJsonValue(m_total_pages));
    }
    return obj;
}

qint32 OAIPagination::getCount() const {
    return m_count;
}
void OAIPagination::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIPagination::is_count_Set() const{
    return m_count_isSet;
}

bool OAIPagination::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIPagination::getCurrentUrl() const {
    return m_current_url;
}
void OAIPagination::setCurrentUrl(const QString &current_url) {
    m_current_url = current_url;
    m_current_url_isSet = true;
}

bool OAIPagination::is_current_url_Set() const{
    return m_current_url_isSet;
}

bool OAIPagination::is_current_url_Valid() const{
    return m_current_url_isValid;
}

qint32 OAIPagination::getMax() const {
    return m_max;
}
void OAIPagination::setMax(const qint32 &max) {
    m_max = max;
    m_max_isSet = true;
}

bool OAIPagination::is_max_Set() const{
    return m_max_isSet;
}

bool OAIPagination::is_max_Valid() const{
    return m_max_isValid;
}

QString OAIPagination::getNextUrl() const {
    return m_next_url;
}
void OAIPagination::setNextUrl(const QString &next_url) {
    m_next_url = next_url;
    m_next_url_isSet = true;
}

bool OAIPagination::is_next_url_Set() const{
    return m_next_url_isSet;
}

bool OAIPagination::is_next_url_Valid() const{
    return m_next_url_isValid;
}

qint32 OAIPagination::getOffset() const {
    return m_offset;
}
void OAIPagination::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIPagination::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIPagination::is_offset_Valid() const{
    return m_offset_isValid;
}

qint32 OAIPagination::getPageNum() const {
    return m_page_num;
}
void OAIPagination::setPageNum(const qint32 &page_num) {
    m_page_num = page_num;
    m_page_num_isSet = true;
}

bool OAIPagination::is_page_num_Set() const{
    return m_page_num_isSet;
}

bool OAIPagination::is_page_num_Valid() const{
    return m_page_num_isValid;
}

QString OAIPagination::getPreviousUrl() const {
    return m_previous_url;
}
void OAIPagination::setPreviousUrl(const QString &previous_url) {
    m_previous_url = previous_url;
    m_previous_url_isSet = true;
}

bool OAIPagination::is_previous_url_Set() const{
    return m_previous_url_isSet;
}

bool OAIPagination::is_previous_url_Valid() const{
    return m_previous_url_isValid;
}

QString OAIPagination::getSort() const {
    return m_sort;
}
void OAIPagination::setSort(const QString &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIPagination::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIPagination::is_sort_Valid() const{
    return m_sort_isValid;
}

qint32 OAIPagination::getTotal() const {
    return m_total;
}
void OAIPagination::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIPagination::is_total_Set() const{
    return m_total_isSet;
}

bool OAIPagination::is_total_Valid() const{
    return m_total_isValid;
}

qint32 OAIPagination::getTotalPages() const {
    return m_total_pages;
}
void OAIPagination::setTotalPages(const qint32 &total_pages) {
    m_total_pages = total_pages;
    m_total_pages_isSet = true;
}

bool OAIPagination::is_total_pages_Set() const{
    return m_total_pages_isSet;
}

bool OAIPagination::is_total_pages_Valid() const{
    return m_total_pages_isValid;
}

bool OAIPagination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_num_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_pages_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPagination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
