/**
 * HHS Media Services API
 * <div class=\"swagger-ui-wrap extraFooter\"><h3>Common Features / Behaviors</h3> <div class=\"features\"> <ul> <li><strong>* \"sort\" param:</strong> supports multi column sorting through the use of commas as delimiters, and a hyphen to denote descending order. <br/> <strong><span>Examples:</span></strong> <ul> <li><span class=\"example\">name</span><span class=\"description\">sort results by name ascending</span></li> <li><span class=\"example\">-name</span><span class=\"description\">sort results by name descending</span></li> <li><span class=\"example\">-name,id</span><span class=\"description\">sort results by name descending and then by id ascending</span></li> <li><span class=\"example\">id,-dateContentAuthored</span><span class=\"description\">sort results by id ascending and then date descending</span></li> </ul> </li> <li><strong>Date formats:</strong> Date input format is expected to be based on <a href=\"http://www.ietf.org/rfc/rfc3339.txt\">RFC 3339</a>. <br/> <span><strong>Example:</strong></span> <ul><li>2013-11-18T18:43:01Z</li></ul> </li> </ul> </div> </div>
 *
 * The version of the OpenAPI document: 2
 * Contact: syndicationadmin@hhs.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITagsApi_H
#define OAI_OAITagsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMediaItemWrapped.h"
#include "OAITagLanguageMarshallerWrapped.h"
#include "OAITagMarshallerWrapped.h"
#include "OAITagTypeMarshallerWrapped.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITagsApi : public QObject {
    Q_OBJECT

public:
    OAITagsApi(const int timeOut = 0);
    ~OAITagsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  format QString [required]
    * @param[in]  sort QString [optional]
    * @param[in]  max qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  name QString [optional]
    * @param[in]  name_contains QString [optional]
    * @param[in]  media_id qint64 [optional]
    * @param[in]  type_id qint64 [optional]
    * @param[in]  type_name QString [optional]
    */
    virtual void resourcesTagsFormatGet(const QString &format, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name_contains = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &media_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &type_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &type_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  format QString [required]
    */
    virtual void resourcesTagsIdFormatGet(const qint64 &id, const QString &format);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  format QString [required]
    * @param[in]  sort QString [optional]
    * @param[in]  max qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void resourcesTagsIdMediaFormatGet(const qint64 &id, const QString &format, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  format QString [required]
    * @param[in]  sort QString [optional]
    * @param[in]  max qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void resourcesTagsIdRelatedFormatGet(const qint64 &id, const QString &format, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  format QString [required]
    * @param[in]  display_method QString [optional]
    */
    virtual void resourcesTagsIdSyndicateFormatGet(const qint64 &id, const QString &format, const ::OpenAPI::OptionalParam<QString> &display_method = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [required]
    */
    virtual void resourcesTagsTagLanguagesFormatGet(const QString &format);

    /**
    * @param[in]  format QString [required]
    */
    virtual void resourcesTagsTagTypesFormatGet(const QString &format);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void resourcesTagsFormatGetCallback(OAIHttpRequestWorker *worker);
    void resourcesTagsIdFormatGetCallback(OAIHttpRequestWorker *worker);
    void resourcesTagsIdMediaFormatGetCallback(OAIHttpRequestWorker *worker);
    void resourcesTagsIdRelatedFormatGetCallback(OAIHttpRequestWorker *worker);
    void resourcesTagsIdSyndicateFormatGetCallback(OAIHttpRequestWorker *worker);
    void resourcesTagsTagLanguagesFormatGetCallback(OAIHttpRequestWorker *worker);
    void resourcesTagsTagTypesFormatGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void resourcesTagsFormatGetSignal(QList<OAITagMarshallerWrapped> summary);
    void resourcesTagsIdFormatGetSignal(QList<OAITagMarshallerWrapped> summary);
    void resourcesTagsIdMediaFormatGetSignal(QList<OAIMediaItemWrapped> summary);
    void resourcesTagsIdRelatedFormatGetSignal(QList<OAITagMarshallerWrapped> summary);
    void resourcesTagsIdSyndicateFormatGetSignal(QString summary);
    void resourcesTagsTagLanguagesFormatGetSignal(QList<OAITagLanguageMarshallerWrapped> summary);
    void resourcesTagsTagTypesFormatGetSignal(QList<OAITagTypeMarshallerWrapped> summary);


    void resourcesTagsFormatGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITagMarshallerWrapped> summary);
    void resourcesTagsIdFormatGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITagMarshallerWrapped> summary);
    void resourcesTagsIdMediaFormatGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMediaItemWrapped> summary);
    void resourcesTagsIdRelatedFormatGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITagMarshallerWrapped> summary);
    void resourcesTagsIdSyndicateFormatGetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void resourcesTagsTagLanguagesFormatGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITagLanguageMarshallerWrapped> summary);
    void resourcesTagsTagTypesFormatGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITagTypeMarshallerWrapped> summary);

    Q_DECL_DEPRECATED_X("Use resourcesTagsFormatGetSignalError() instead")
    void resourcesTagsFormatGetSignalE(QList<OAITagMarshallerWrapped> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesTagsFormatGetSignalError(QList<OAITagMarshallerWrapped> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesTagsIdFormatGetSignalError() instead")
    void resourcesTagsIdFormatGetSignalE(QList<OAITagMarshallerWrapped> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesTagsIdFormatGetSignalError(QList<OAITagMarshallerWrapped> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesTagsIdMediaFormatGetSignalError() instead")
    void resourcesTagsIdMediaFormatGetSignalE(QList<OAIMediaItemWrapped> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesTagsIdMediaFormatGetSignalError(QList<OAIMediaItemWrapped> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesTagsIdRelatedFormatGetSignalError() instead")
    void resourcesTagsIdRelatedFormatGetSignalE(QList<OAITagMarshallerWrapped> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesTagsIdRelatedFormatGetSignalError(QList<OAITagMarshallerWrapped> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesTagsIdSyndicateFormatGetSignalError() instead")
    void resourcesTagsIdSyndicateFormatGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesTagsIdSyndicateFormatGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesTagsTagLanguagesFormatGetSignalError() instead")
    void resourcesTagsTagLanguagesFormatGetSignalE(QList<OAITagLanguageMarshallerWrapped> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesTagsTagLanguagesFormatGetSignalError(QList<OAITagLanguageMarshallerWrapped> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesTagsTagTypesFormatGetSignalError() instead")
    void resourcesTagsTagTypesFormatGetSignalE(QList<OAITagTypeMarshallerWrapped> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesTagsTagTypesFormatGetSignalError(QList<OAITagTypeMarshallerWrapped> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use resourcesTagsFormatGetSignalErrorFull() instead")
    void resourcesTagsFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesTagsFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesTagsIdFormatGetSignalErrorFull() instead")
    void resourcesTagsIdFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesTagsIdFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesTagsIdMediaFormatGetSignalErrorFull() instead")
    void resourcesTagsIdMediaFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesTagsIdMediaFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesTagsIdRelatedFormatGetSignalErrorFull() instead")
    void resourcesTagsIdRelatedFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesTagsIdRelatedFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesTagsIdSyndicateFormatGetSignalErrorFull() instead")
    void resourcesTagsIdSyndicateFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesTagsIdSyndicateFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesTagsTagLanguagesFormatGetSignalErrorFull() instead")
    void resourcesTagsTagLanguagesFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesTagsTagLanguagesFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesTagsTagTypesFormatGetSignalErrorFull() instead")
    void resourcesTagsTagTypesFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesTagsTagTypesFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
