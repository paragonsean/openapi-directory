/**
 * HHS Media Services API
 * <div class=\"swagger-ui-wrap extraFooter\"><h3>Common Features / Behaviors</h3> <div class=\"features\"> <ul> <li><strong>* \"sort\" param:</strong> supports multi column sorting through the use of commas as delimiters, and a hyphen to denote descending order. <br/> <strong><span>Examples:</span></strong> <ul> <li><span class=\"example\">name</span><span class=\"description\">sort results by name ascending</span></li> <li><span class=\"example\">-name</span><span class=\"description\">sort results by name descending</span></li> <li><span class=\"example\">-name,id</span><span class=\"description\">sort results by name descending and then by id ascending</span></li> <li><span class=\"example\">id,-dateContentAuthored</span><span class=\"description\">sort results by id ascending and then date descending</span></li> </ul> </li> <li><strong>Date formats:</strong> Date input format is expected to be based on <a href=\"http://www.ietf.org/rfc/rfc3339.txt\">RFC 3339</a>. <br/> <span><strong>Example:</strong></span> <ul><li>2013-11-18T18:43:01Z</li></ul> </li> </ul> </div> </div>
 *
 * The version of the OpenAPI document: 2
 * Contact: syndicationadmin@hhs.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMediaApi_H
#define OAI_OAIMediaApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIMediaItem.h"
#include "OAIMediaItemWrapped.h"
#include "OAIObject.h"
#include "OAISyndicateMarshallerWrapped.h"
#include "OAI_resources_media__id__youtubeMetaData_json_get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMediaApi : public QObject {
    Q_OBJECT

public:
    OAIMediaApi(const int timeOut = 0);
    ~OAIMediaApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  sort QString [optional]
    * @param[in]  max qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void resourcesMediaFeaturedJsonGet(const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  called_by_build bool [optional]
    */
    virtual void resourcesMediaIdContentGet(const qint64 &id, const ::OpenAPI::OptionalParam<bool> &called_by_build = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  flavor QString [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  iframe_name QString [optional]
    * @param[in]  exclude_jquery bool [optional]
    * @param[in]  exclude_div bool [optional]
    * @param[in]  div_id QString [optional]
    * @param[in]  display_method QString [optional]
    */
    virtual void resourcesMediaIdEmbedJsonGet(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &flavor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &iframe_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &exclude_jquery = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &exclude_div = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &div_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &display_method = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void resourcesMediaIdJsonGet(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void resourcesMediaIdPreviewJpgGet(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  format QString [required]
    * @param[in]  max qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void resourcesMediaIdRelatedMediaFormatGet(const qint64 &id, const QString &format, const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  format QString [required]
    * @param[in]  css_class QString [optional]
    * @param[in]  strip_styles bool [optional]
    * @param[in]  strip_scripts bool [optional]
    * @param[in]  strip_images bool [optional]
    * @param[in]  strip_breaks bool [optional]
    * @param[in]  strip_classes bool [optional]
    * @param[in]  font_size qint32 [optional]
    * @param[in]  image_float QString [optional]
    * @param[in]  image_margin QString [optional]
    * @param[in]  autoplay bool [optional]
    * @param[in]  rel bool [optional]
    */
    virtual void resourcesMediaIdSyndicateFormatGet(const qint64 &id, const QString &format, const ::OpenAPI::OptionalParam<QString> &css_class = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &strip_styles = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &strip_scripts = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &strip_images = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &strip_breaks = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &strip_classes = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &font_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &image_float = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &image_margin = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &autoplay = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &rel = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void resourcesMediaIdThumbnailJpgGet(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void resourcesMediaIdYoutubeMetaDataJsonGet(const qint64 &id);

    /**
    * @param[in]  max qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  media_types QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  collection_id qint32 [optional]
    * @param[in]  name_contains QString [optional]
    * @param[in]  description_contains QString [optional]
    * @param[in]  source_url QString [optional]
    * @param[in]  source_url_contains QString [optional]
    * @param[in]  custom_thumbnail_url QString [optional]
    * @param[in]  custom_thumbnail_url_contains QString [optional]
    * @param[in]  date_content_authored QDate [optional]
    * @param[in]  date_content_updated QDate [optional]
    * @param[in]  date_content_published QDate [optional]
    * @param[in]  date_content_reviewed QDate [optional]
    * @param[in]  date_syndication_captured QDate [optional]
    * @param[in]  date_syndication_updated QDate [optional]
    * @param[in]  content_authored_since_date QDate [optional]
    * @param[in]  content_authored_before_date QDate [optional]
    * @param[in]  content_authored_in_range QString [optional]
    * @param[in]  content_updated_since_date QDate [optional]
    * @param[in]  content_updated_before_date QDate [optional]
    * @param[in]  content_updated_in_range QString [optional]
    * @param[in]  content_published_since_date QDate [optional]
    * @param[in]  content_published_before_date QDate [optional]
    * @param[in]  content_published_in_range QString [optional]
    * @param[in]  content_reviewed_since_date QDate [optional]
    * @param[in]  content_reviewed_before_date QDate [optional]
    * @param[in]  content_reviewed_in_range QString [optional]
    * @param[in]  syndication_captured_since_date QDate [optional]
    * @param[in]  syndication_captured_before_date QDate [optional]
    * @param[in]  syndication_captured_in_range QString [optional]
    * @param[in]  syndication_updated_since_date QDate [optional]
    * @param[in]  syndication_updated_before_date QDate [optional]
    * @param[in]  syndication_updated_in_range QString [optional]
    * @param[in]  syndication_visible_since_date QDate [optional]
    * @param[in]  syndication_visible_before_date QDate [optional]
    * @param[in]  syndication_visible_in_range QDate [optional]
    * @param[in]  language_id qint64 [optional]
    * @param[in]  language_name QString [optional]
    * @param[in]  language_iso_code QString [optional]
    * @param[in]  hash QString [optional]
    * @param[in]  hash_contains QString [optional]
    * @param[in]  source_id qint64 [optional]
    * @param[in]  source_name QString [optional]
    * @param[in]  source_name_contains QString [optional]
    * @param[in]  source_acronym QString [optional]
    * @param[in]  source_acronym_contains QString [optional]
    * @param[in]  tag_ids QString [optional]
    * @param[in]  restrict_to_set QString [optional]
    * @param[in]  created_by QString [optional]
    */
    virtual void resourcesMediaJsonGet(const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &media_types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &collection_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name_contains = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description_contains = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_url_contains = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_thumbnail_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_thumbnail_url_contains = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &date_content_authored = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_content_updated = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_content_published = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_content_reviewed = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_syndication_captured = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_syndication_updated = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &content_authored_since_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &content_authored_before_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &content_authored_in_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &content_updated_since_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &content_updated_before_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &content_updated_in_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &content_published_since_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &content_published_before_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &content_published_in_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &content_reviewed_since_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &content_reviewed_before_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &content_reviewed_in_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &syndication_captured_since_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &syndication_captured_before_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &syndication_captured_in_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &syndication_updated_since_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &syndication_updated_before_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &syndication_updated_in_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &syndication_visible_since_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &syndication_visible_before_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &syndication_visible_in_range = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint64> &language_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &language_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_iso_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hash = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hash_contains = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint64> &source_id = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &source_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_name_contains = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_acronym = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_acronym_contains = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &restrict_to_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &created_by = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  format QString [required]
    * @param[in]  max qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void resourcesMediaMostPopularMediaFormatGet(const QString &format, const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  q QString [required]
    * @param[in]  max qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void resourcesMediaSearchResultsJsonGet(const QString &q, const ::OpenAPI::OptionalParam<qint32> &max = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void resourcesMediaFeaturedJsonGetCallback(OAIHttpRequestWorker *worker);
    void resourcesMediaIdContentGetCallback(OAIHttpRequestWorker *worker);
    void resourcesMediaIdEmbedJsonGetCallback(OAIHttpRequestWorker *worker);
    void resourcesMediaIdJsonGetCallback(OAIHttpRequestWorker *worker);
    void resourcesMediaIdPreviewJpgGetCallback(OAIHttpRequestWorker *worker);
    void resourcesMediaIdRelatedMediaFormatGetCallback(OAIHttpRequestWorker *worker);
    void resourcesMediaIdSyndicateFormatGetCallback(OAIHttpRequestWorker *worker);
    void resourcesMediaIdThumbnailJpgGetCallback(OAIHttpRequestWorker *worker);
    void resourcesMediaIdYoutubeMetaDataJsonGetCallback(OAIHttpRequestWorker *worker);
    void resourcesMediaJsonGetCallback(OAIHttpRequestWorker *worker);
    void resourcesMediaMostPopularMediaFormatGetCallback(OAIHttpRequestWorker *worker);
    void resourcesMediaSearchResultsJsonGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void resourcesMediaFeaturedJsonGetSignal(QList<OAIMediaItem> summary);
    void resourcesMediaIdContentGetSignal(QString summary);
    void resourcesMediaIdEmbedJsonGetSignal(QString summary);
    void resourcesMediaIdJsonGetSignal(QList<OAIMediaItemWrapped> summary);
    void resourcesMediaIdPreviewJpgGetSignal(OAIObject summary);
    void resourcesMediaIdRelatedMediaFormatGetSignal(QList<OAIMediaItemWrapped> summary);
    void resourcesMediaIdSyndicateFormatGetSignal(OAISyndicateMarshallerWrapped summary);
    void resourcesMediaIdThumbnailJpgGetSignal(OAIObject summary);
    void resourcesMediaIdYoutubeMetaDataJsonGetSignal(OAI_resources_media__id__youtubeMetaData_json_get_200_response summary);
    void resourcesMediaJsonGetSignal(QList<OAIMediaItemWrapped> summary);
    void resourcesMediaMostPopularMediaFormatGetSignal(QList<OAIMediaItemWrapped> summary);
    void resourcesMediaSearchResultsJsonGetSignal(QList<OAIMediaItemWrapped> summary);


    void resourcesMediaFeaturedJsonGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMediaItem> summary);
    void resourcesMediaIdContentGetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void resourcesMediaIdEmbedJsonGetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void resourcesMediaIdJsonGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMediaItemWrapped> summary);
    void resourcesMediaIdPreviewJpgGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void resourcesMediaIdRelatedMediaFormatGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMediaItemWrapped> summary);
    void resourcesMediaIdSyndicateFormatGetSignalFull(OAIHttpRequestWorker *worker, OAISyndicateMarshallerWrapped summary);
    void resourcesMediaIdThumbnailJpgGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void resourcesMediaIdYoutubeMetaDataJsonGetSignalFull(OAIHttpRequestWorker *worker, OAI_resources_media__id__youtubeMetaData_json_get_200_response summary);
    void resourcesMediaJsonGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMediaItemWrapped> summary);
    void resourcesMediaMostPopularMediaFormatGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMediaItemWrapped> summary);
    void resourcesMediaSearchResultsJsonGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIMediaItemWrapped> summary);

    Q_DECL_DEPRECATED_X("Use resourcesMediaFeaturedJsonGetSignalError() instead")
    void resourcesMediaFeaturedJsonGetSignalE(QList<OAIMediaItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaFeaturedJsonGetSignalError(QList<OAIMediaItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaIdContentGetSignalError() instead")
    void resourcesMediaIdContentGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaIdContentGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaIdEmbedJsonGetSignalError() instead")
    void resourcesMediaIdEmbedJsonGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaIdEmbedJsonGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaIdJsonGetSignalError() instead")
    void resourcesMediaIdJsonGetSignalE(QList<OAIMediaItemWrapped> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaIdJsonGetSignalError(QList<OAIMediaItemWrapped> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaIdPreviewJpgGetSignalError() instead")
    void resourcesMediaIdPreviewJpgGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaIdPreviewJpgGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaIdRelatedMediaFormatGetSignalError() instead")
    void resourcesMediaIdRelatedMediaFormatGetSignalE(QList<OAIMediaItemWrapped> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaIdRelatedMediaFormatGetSignalError(QList<OAIMediaItemWrapped> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaIdSyndicateFormatGetSignalError() instead")
    void resourcesMediaIdSyndicateFormatGetSignalE(OAISyndicateMarshallerWrapped summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaIdSyndicateFormatGetSignalError(OAISyndicateMarshallerWrapped summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaIdThumbnailJpgGetSignalError() instead")
    void resourcesMediaIdThumbnailJpgGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaIdThumbnailJpgGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaIdYoutubeMetaDataJsonGetSignalError() instead")
    void resourcesMediaIdYoutubeMetaDataJsonGetSignalE(OAI_resources_media__id__youtubeMetaData_json_get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaIdYoutubeMetaDataJsonGetSignalError(OAI_resources_media__id__youtubeMetaData_json_get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaJsonGetSignalError() instead")
    void resourcesMediaJsonGetSignalE(QList<OAIMediaItemWrapped> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaJsonGetSignalError(QList<OAIMediaItemWrapped> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaMostPopularMediaFormatGetSignalError() instead")
    void resourcesMediaMostPopularMediaFormatGetSignalE(QList<OAIMediaItemWrapped> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaMostPopularMediaFormatGetSignalError(QList<OAIMediaItemWrapped> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaSearchResultsJsonGetSignalError() instead")
    void resourcesMediaSearchResultsJsonGetSignalE(QList<OAIMediaItemWrapped> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaSearchResultsJsonGetSignalError(QList<OAIMediaItemWrapped> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use resourcesMediaFeaturedJsonGetSignalErrorFull() instead")
    void resourcesMediaFeaturedJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaFeaturedJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaIdContentGetSignalErrorFull() instead")
    void resourcesMediaIdContentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaIdContentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaIdEmbedJsonGetSignalErrorFull() instead")
    void resourcesMediaIdEmbedJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaIdEmbedJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaIdJsonGetSignalErrorFull() instead")
    void resourcesMediaIdJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaIdJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaIdPreviewJpgGetSignalErrorFull() instead")
    void resourcesMediaIdPreviewJpgGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaIdPreviewJpgGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaIdRelatedMediaFormatGetSignalErrorFull() instead")
    void resourcesMediaIdRelatedMediaFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaIdRelatedMediaFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaIdSyndicateFormatGetSignalErrorFull() instead")
    void resourcesMediaIdSyndicateFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaIdSyndicateFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaIdThumbnailJpgGetSignalErrorFull() instead")
    void resourcesMediaIdThumbnailJpgGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaIdThumbnailJpgGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaIdYoutubeMetaDataJsonGetSignalErrorFull() instead")
    void resourcesMediaIdYoutubeMetaDataJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaIdYoutubeMetaDataJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaJsonGetSignalErrorFull() instead")
    void resourcesMediaJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaMostPopularMediaFormatGetSignalErrorFull() instead")
    void resourcesMediaMostPopularMediaFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaMostPopularMediaFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resourcesMediaSearchResultsJsonGetSignalErrorFull() instead")
    void resourcesMediaSearchResultsJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resourcesMediaSearchResultsJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
