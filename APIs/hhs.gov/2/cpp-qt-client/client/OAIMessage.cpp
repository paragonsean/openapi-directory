/**
 * HHS Media Services API
 * <div class=\"swagger-ui-wrap extraFooter\"><h3>Common Features / Behaviors</h3> <div class=\"features\"> <ul> <li><strong>* \"sort\" param:</strong> supports multi column sorting through the use of commas as delimiters, and a hyphen to denote descending order. <br/> <strong><span>Examples:</span></strong> <ul> <li><span class=\"example\">name</span><span class=\"description\">sort results by name ascending</span></li> <li><span class=\"example\">-name</span><span class=\"description\">sort results by name descending</span></li> <li><span class=\"example\">-name,id</span><span class=\"description\">sort results by name descending and then by id ascending</span></li> <li><span class=\"example\">id,-dateContentAuthored</span><span class=\"description\">sort results by id ascending and then date descending</span></li> </ul> </li> <li><strong>Date formats:</strong> Date input format is expected to be based on <a href=\"http://www.ietf.org/rfc/rfc3339.txt\">RFC 3339</a>. <br/> <span><strong>Example:</strong></span> <ul><li>2013-11-18T18:43:01Z</li></ul> </li> </ul> </div> </div>
 *
 * The version of the OpenAPI document: 2
 * Contact: syndicationadmin@hhs.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessage::OAIMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessage::OAIMessage() {
    this->initializeModel();
}

OAIMessage::~OAIMessage() {}

void OAIMessage::initializeModel() {

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_error_detail_isSet = false;
    m_error_detail_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_user_message_isSet = false;
    m_user_message_isValid = false;
}

void OAIMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessage::fromJsonObject(QJsonObject json) {

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_error_detail_isValid = ::OpenAPI::fromJsonValue(m_error_detail, json[QString("errorDetail")]);
    m_error_detail_isSet = !json[QString("errorDetail")].isNull() && m_error_detail_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_user_message_isValid = ::OpenAPI::fromJsonValue(m_user_message, json[QString("userMessage")]);
    m_user_message_isSet = !json[QString("userMessage")].isNull() && m_user_message_isValid;
}

QString OAIMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_error_detail_isSet) {
        obj.insert(QString("errorDetail"), ::OpenAPI::toJsonValue(m_error_detail));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_user_message_isSet) {
        obj.insert(QString("userMessage"), ::OpenAPI::toJsonValue(m_user_message));
    }
    return obj;
}

QString OAIMessage::getErrorCode() const {
    return m_error_code;
}
void OAIMessage::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIMessage::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIMessage::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIMessage::getErrorDetail() const {
    return m_error_detail;
}
void OAIMessage::setErrorDetail(const QString &error_detail) {
    m_error_detail = error_detail;
    m_error_detail_isSet = true;
}

bool OAIMessage::is_error_detail_Set() const{
    return m_error_detail_isSet;
}

bool OAIMessage::is_error_detail_Valid() const{
    return m_error_detail_isValid;
}

QString OAIMessage::getErrorMessage() const {
    return m_error_message;
}
void OAIMessage::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIMessage::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIMessage::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIMessage::getUserMessage() const {
    return m_user_message;
}
void OAIMessage::setUserMessage(const QString &user_message) {
    m_user_message = user_message;
    m_user_message_isSet = true;
}

bool OAIMessage::is_user_message_Set() const{
    return m_user_message_isSet;
}

bool OAIMessage::is_user_message_Valid() const{
    return m_user_message_isValid;
}

bool OAIMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
