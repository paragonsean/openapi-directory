/**
 * HHS Media Services API
 * <div class=\"swagger-ui-wrap extraFooter\"><h3>Common Features / Behaviors</h3> <div class=\"features\"> <ul> <li><strong>* \"sort\" param:</strong> supports multi column sorting through the use of commas as delimiters, and a hyphen to denote descending order. <br/> <strong><span>Examples:</span></strong> <ul> <li><span class=\"example\">name</span><span class=\"description\">sort results by name ascending</span></li> <li><span class=\"example\">-name</span><span class=\"description\">sort results by name descending</span></li> <li><span class=\"example\">-name,id</span><span class=\"description\">sort results by name descending and then by id ascending</span></li> <li><span class=\"example\">id,-dateContentAuthored</span><span class=\"description\">sort results by id ascending and then date descending</span></li> </ul> </li> <li><strong>Date formats:</strong> Date input format is expected to be based on <a href=\"http://www.ietf.org/rfc/rfc3339.txt\">RFC 3339</a>. <br/> <span><strong>Example:</strong></span> <ul><li>2013-11-18T18:43:01Z</li></ul> </li> </ul> </div> </div>
 *
 * The version of the OpenAPI document: 2
 * Contact: syndicationadmin@hhs.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISource::OAISource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISource::OAISource() {
    this->initializeModel();
}

OAISource::~OAISource() {}

void OAISource::initializeModel() {

    m_acronym_isSet = false;
    m_acronym_isValid = false;

    m_contact_email_isSet = false;
    m_contact_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_large_logo_url_isSet = false;
    m_large_logo_url_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_small_logo_url_isSet = false;
    m_small_logo_url_isValid = false;

    m_website_url_isSet = false;
    m_website_url_isValid = false;
}

void OAISource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISource::fromJsonObject(QJsonObject json) {

    m_acronym_isValid = ::OpenAPI::fromJsonValue(m_acronym, json[QString("acronym")]);
    m_acronym_isSet = !json[QString("acronym")].isNull() && m_acronym_isValid;

    m_contact_email_isValid = ::OpenAPI::fromJsonValue(m_contact_email, json[QString("contactEmail")]);
    m_contact_email_isSet = !json[QString("contactEmail")].isNull() && m_contact_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_large_logo_url_isValid = ::OpenAPI::fromJsonValue(m_large_logo_url, json[QString("largeLogoUrl")]);
    m_large_logo_url_isSet = !json[QString("largeLogoUrl")].isNull() && m_large_logo_url_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_small_logo_url_isValid = ::OpenAPI::fromJsonValue(m_small_logo_url, json[QString("smallLogoUrl")]);
    m_small_logo_url_isSet = !json[QString("smallLogoUrl")].isNull() && m_small_logo_url_isValid;

    m_website_url_isValid = ::OpenAPI::fromJsonValue(m_website_url, json[QString("websiteUrl")]);
    m_website_url_isSet = !json[QString("websiteUrl")].isNull() && m_website_url_isValid;
}

QString OAISource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISource::asJsonObject() const {
    QJsonObject obj;
    if (m_acronym_isSet) {
        obj.insert(QString("acronym"), ::OpenAPI::toJsonValue(m_acronym));
    }
    if (m_contact_email_isSet) {
        obj.insert(QString("contactEmail"), ::OpenAPI::toJsonValue(m_contact_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_large_logo_url_isSet) {
        obj.insert(QString("largeLogoUrl"), ::OpenAPI::toJsonValue(m_large_logo_url));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_small_logo_url_isSet) {
        obj.insert(QString("smallLogoUrl"), ::OpenAPI::toJsonValue(m_small_logo_url));
    }
    if (m_website_url_isSet) {
        obj.insert(QString("websiteUrl"), ::OpenAPI::toJsonValue(m_website_url));
    }
    return obj;
}

QString OAISource::getAcronym() const {
    return m_acronym;
}
void OAISource::setAcronym(const QString &acronym) {
    m_acronym = acronym;
    m_acronym_isSet = true;
}

bool OAISource::is_acronym_Set() const{
    return m_acronym_isSet;
}

bool OAISource::is_acronym_Valid() const{
    return m_acronym_isValid;
}

QString OAISource::getContactEmail() const {
    return m_contact_email;
}
void OAISource::setContactEmail(const QString &contact_email) {
    m_contact_email = contact_email;
    m_contact_email_isSet = true;
}

bool OAISource::is_contact_email_Set() const{
    return m_contact_email_isSet;
}

bool OAISource::is_contact_email_Valid() const{
    return m_contact_email_isValid;
}

qint64 OAISource::getId() const {
    return m_id;
}
void OAISource::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISource::is_id_Set() const{
    return m_id_isSet;
}

bool OAISource::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISource::getLargeLogoUrl() const {
    return m_large_logo_url;
}
void OAISource::setLargeLogoUrl(const QString &large_logo_url) {
    m_large_logo_url = large_logo_url;
    m_large_logo_url_isSet = true;
}

bool OAISource::is_large_logo_url_Set() const{
    return m_large_logo_url_isSet;
}

bool OAISource::is_large_logo_url_Valid() const{
    return m_large_logo_url_isValid;
}

QString OAISource::getName() const {
    return m_name;
}
void OAISource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISource::is_name_Set() const{
    return m_name_isSet;
}

bool OAISource::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISource::getSmallLogoUrl() const {
    return m_small_logo_url;
}
void OAISource::setSmallLogoUrl(const QString &small_logo_url) {
    m_small_logo_url = small_logo_url;
    m_small_logo_url_isSet = true;
}

bool OAISource::is_small_logo_url_Set() const{
    return m_small_logo_url_isSet;
}

bool OAISource::is_small_logo_url_Valid() const{
    return m_small_logo_url_isValid;
}

QString OAISource::getWebsiteUrl() const {
    return m_website_url;
}
void OAISource::setWebsiteUrl(const QString &website_url) {
    m_website_url = website_url;
    m_website_url_isSet = true;
}

bool OAISource::is_website_url_Set() const{
    return m_website_url_isSet;
}

bool OAISource::is_website_url_Valid() const{
    return m_website_url_isValid;
}

bool OAISource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acronym_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
