/**
 * HHS Media Services API
 * <div class=\"swagger-ui-wrap extraFooter\"><h3>Common Features / Behaviors</h3> <div class=\"features\"> <ul> <li><strong>* \"sort\" param:</strong> supports multi column sorting through the use of commas as delimiters, and a hyphen to denote descending order. <br/> <strong><span>Examples:</span></strong> <ul> <li><span class=\"example\">name</span><span class=\"description\">sort results by name ascending</span></li> <li><span class=\"example\">-name</span><span class=\"description\">sort results by name descending</span></li> <li><span class=\"example\">-name,id</span><span class=\"description\">sort results by name descending and then by id ascending</span></li> <li><span class=\"example\">id,-dateContentAuthored</span><span class=\"description\">sort results by id ascending and then date descending</span></li> </ul> </li> <li><strong>Date formats:</strong> Date input format is expected to be based on <a href=\"http://www.ietf.org/rfc/rfc3339.txt\">RFC 3339</a>. <br/> <span><strong>Example:</strong></span> <ul><li>2013-11-18T18:43:01Z</li></ul> </li> </ul> </div> </div>
 *
 * The version of the OpenAPI document: 2
 * Contact: syndicationadmin@hhs.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPagination.h
 *
 * 
 */

#ifndef OAIPagination_H
#define OAIPagination_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPagination : public OAIObject {
public:
    OAIPagination();
    OAIPagination(QString json);
    ~OAIPagination() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getCount() const;
    void setCount(const qint32 &count);
    bool is_count_Set() const;
    bool is_count_Valid() const;

    QString getCurrentUrl() const;
    void setCurrentUrl(const QString &current_url);
    bool is_current_url_Set() const;
    bool is_current_url_Valid() const;

    qint32 getMax() const;
    void setMax(const qint32 &max);
    bool is_max_Set() const;
    bool is_max_Valid() const;

    QString getNextUrl() const;
    void setNextUrl(const QString &next_url);
    bool is_next_url_Set() const;
    bool is_next_url_Valid() const;

    qint32 getOffset() const;
    void setOffset(const qint32 &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    qint32 getPageNum() const;
    void setPageNum(const qint32 &page_num);
    bool is_page_num_Set() const;
    bool is_page_num_Valid() const;

    QString getPreviousUrl() const;
    void setPreviousUrl(const QString &previous_url);
    bool is_previous_url_Set() const;
    bool is_previous_url_Valid() const;

    QString getSort() const;
    void setSort(const QString &sort);
    bool is_sort_Set() const;
    bool is_sort_Valid() const;

    qint32 getTotal() const;
    void setTotal(const qint32 &total);
    bool is_total_Set() const;
    bool is_total_Valid() const;

    qint32 getTotalPages() const;
    void setTotalPages(const qint32 &total_pages);
    bool is_total_pages_Set() const;
    bool is_total_pages_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_count;
    bool m_count_isSet;
    bool m_count_isValid;

    QString m_current_url;
    bool m_current_url_isSet;
    bool m_current_url_isValid;

    qint32 m_max;
    bool m_max_isSet;
    bool m_max_isValid;

    QString m_next_url;
    bool m_next_url_isSet;
    bool m_next_url_isValid;

    qint32 m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    qint32 m_page_num;
    bool m_page_num_isSet;
    bool m_page_num_isValid;

    QString m_previous_url;
    bool m_previous_url_isSet;
    bool m_previous_url_isValid;

    QString m_sort;
    bool m_sort_isSet;
    bool m_sort_isValid;

    qint32 m_total;
    bool m_total_isSet;
    bool m_total_isValid;

    qint32 m_total_pages;
    bool m_total_pages_isSet;
    bool m_total_pages_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPagination)

#endif // OAIPagination_H
