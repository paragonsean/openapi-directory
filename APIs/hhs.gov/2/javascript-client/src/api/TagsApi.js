/**
 * HHS Media Services API
 * <div class=\"swagger-ui-wrap extraFooter\"><h3>Common Features / Behaviors</h3> <div class=\"features\"> <ul> <li><strong>* \"sort\" param:</strong> supports multi column sorting through the use of commas as delimiters, and a hyphen to denote descending order. <br/> <strong><span>Examples:</span></strong> <ul> <li><span class=\"example\">name</span><span class=\"description\">sort results by name ascending</span></li> <li><span class=\"example\">-name</span><span class=\"description\">sort results by name descending</span></li> <li><span class=\"example\">-name,id</span><span class=\"description\">sort results by name descending and then by id ascending</span></li> <li><span class=\"example\">id,-dateContentAuthored</span><span class=\"description\">sort results by id ascending and then date descending</span></li> </ul> </li> <li><strong>Date formats:</strong> Date input format is expected to be based on <a href=\"http://www.ietf.org/rfc/rfc3339.txt\">RFC 3339</a>. <br/> <span><strong>Example:</strong></span> <ul><li>2013-11-18T18:43:01Z</li></ul> </li> </ul> </div> </div>
 *
 * The version of the OpenAPI document: 2
 * Contact: syndicationadmin@hhs.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MediaItemWrapped from '../model/MediaItemWrapped';
import TagLanguageMarshallerWrapped from '../model/TagLanguageMarshallerWrapped';
import TagMarshallerWrapped from '../model/TagMarshallerWrapped';
import TagTypeMarshallerWrapped from '../model/TagTypeMarshallerWrapped';

/**
* Tags service.
* @module api/TagsApi
* @version 2
*/
export default class TagsApi {

    /**
    * Constructs a new TagsApi. 
    * @alias module:api/TagsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the resourcesTagsFormatGet operation.
     * @callback module:api/TagsApi~resourcesTagsFormatGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagMarshallerWrapped>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Tags
     * List of Tags
     * @param {String} format Automatically added
     * @param {Object} opts Optional parameters
     * @param {String} [sort] The name of the property to which sorting will be applied
     * @param {Number} [max] The maximum number of records to return
     * @param {Number} [offset] Return records starting at the offset index.
     * @param {String} [name] Return tags[s] matching the supplied name
     * @param {String} [nameContains] Return tags which contain the supplied partial name.
     * @param {Number} [mediaId] Return tags associated with the supplied media id.
     * @param {Number} [typeId] Return tags belonging to the supplied tag type id.
     * @param {String} [typeName] Return tags belonging to the supplied tag type name.
     * @param {module:api/TagsApi~resourcesTagsFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagMarshallerWrapped>}
     */
    resourcesTagsFormatGet(format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling resourcesTagsFormatGet");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
        'sort': opts['sort'],
        'max': opts['max'],
        'offset': opts['offset'],
        'name': opts['name'],
        'nameContains': opts['nameContains'],
        'mediaId': opts['mediaId'],
        'typeId': opts['typeId'],
        'typeName': opts['typeName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TagMarshallerWrapped];
      return this.apiClient.callApi(
        '/resources/tags.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesTagsIdFormatGet operation.
     * @callback module:api/TagsApi~resourcesTagsIdFormatGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagMarshallerWrapped>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Tag by ID
     * Information about a specific tag
     * @param {Number} id The id of the record to look up
     * @param {String} format Automatically added
     * @param {module:api/TagsApi~resourcesTagsIdFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagMarshallerWrapped>}
     */
    resourcesTagsIdFormatGet(id, format, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resourcesTagsIdFormatGet");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling resourcesTagsIdFormatGet");
      }

      let pathParams = {
        'id': id,
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TagMarshallerWrapped];
      return this.apiClient.callApi(
        '/resources/tags/{id}.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesTagsIdMediaFormatGet operation.
     * @callback module:api/TagsApi~resourcesTagsIdMediaFormatGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MediaItemWrapped>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get MediaItems for Tag
     * MediaItem
     * @param {Number} id The id of the tag to look up
     * @param {String} format Automatically added
     * @param {Object} opts Optional parameters
     * @param {String} [sort] The name of the property to which sorting will be applied
     * @param {Number} [max] The maximum number of records to return
     * @param {Number} [offset] Return records starting at the offset index.
     * @param {module:api/TagsApi~resourcesTagsIdMediaFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MediaItemWrapped>}
     */
    resourcesTagsIdMediaFormatGet(id, format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resourcesTagsIdMediaFormatGet");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling resourcesTagsIdMediaFormatGet");
      }

      let pathParams = {
        'id': id,
        'format': format
      };
      let queryParams = {
        'sort': opts['sort'],
        'max': opts['max'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MediaItemWrapped];
      return this.apiClient.callApi(
        '/resources/tags/{id}/media.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesTagsIdRelatedFormatGet operation.
     * @callback module:api/TagsApi~resourcesTagsIdRelatedFormatGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagMarshallerWrapped>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get related Tags by ID
     * Information about related tags to a specific tag
     * @param {Number} id The id of the tag to look up
     * @param {String} format Automatically added
     * @param {Object} opts Optional parameters
     * @param {String} [sort] The name of the property to which sorting will be applied
     * @param {Number} [max] The maximum number of records to return
     * @param {Number} [offset] Return records starting at the offset index.
     * @param {module:api/TagsApi~resourcesTagsIdRelatedFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagMarshallerWrapped>}
     */
    resourcesTagsIdRelatedFormatGet(id, format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resourcesTagsIdRelatedFormatGet");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling resourcesTagsIdRelatedFormatGet");
      }

      let pathParams = {
        'id': id,
        'format': format
      };
      let queryParams = {
        'sort': opts['sort'],
        'max': opts['max'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TagMarshallerWrapped];
      return this.apiClient.callApi(
        '/resources/tags/{id}/related.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesTagsIdSyndicateFormatGet operation.
     * @callback module:api/TagsApi~resourcesTagsIdSyndicateFormatGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get MediaItems for Tag
     * MediaItem
     * @param {Number} id The id of the record to look up
     * @param {String} format Automatically added
     * @param {Object} opts Optional parameters
     * @param {String} [displayMethod] Method used to render an html request. Accepts one: [mv, list, feed]
     * @param {module:api/TagsApi~resourcesTagsIdSyndicateFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    resourcesTagsIdSyndicateFormatGet(id, format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resourcesTagsIdSyndicateFormatGet");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling resourcesTagsIdSyndicateFormatGet");
      }

      let pathParams = {
        'id': id,
        'format': format
      };
      let queryParams = {
        'displayMethod': opts['displayMethod']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/resources/tags/{id}/syndicate.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesTagsTagLanguagesFormatGet operation.
     * @callback module:api/TagsApi~resourcesTagsTagLanguagesFormatGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagLanguageMarshallerWrapped>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get TagLanguages
     * List of Tag Languages
     * @param {String} format Automatically added
     * @param {module:api/TagsApi~resourcesTagsTagLanguagesFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagLanguageMarshallerWrapped>}
     */
    resourcesTagsTagLanguagesFormatGet(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling resourcesTagsTagLanguagesFormatGet");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TagLanguageMarshallerWrapped];
      return this.apiClient.callApi(
        '/resources/tags/tagLanguages.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesTagsTagTypesFormatGet operation.
     * @callback module:api/TagsApi~resourcesTagsTagTypesFormatGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagTypeMarshallerWrapped>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get MediaItems for Tag
     * List of Types
     * @param {String} format Automatically added
     * @param {module:api/TagsApi~resourcesTagsTagTypesFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagTypeMarshallerWrapped>}
     */
    resourcesTagsTagTypesFormatGet(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling resourcesTagsTagTypesFormatGet");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TagTypeMarshallerWrapped];
      return this.apiClient.callApi(
        '/resources/tags/tagTypes.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
