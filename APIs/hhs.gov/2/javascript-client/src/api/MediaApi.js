/**
 * HHS Media Services API
 * <div class=\"swagger-ui-wrap extraFooter\"><h3>Common Features / Behaviors</h3> <div class=\"features\"> <ul> <li><strong>* \"sort\" param:</strong> supports multi column sorting through the use of commas as delimiters, and a hyphen to denote descending order. <br/> <strong><span>Examples:</span></strong> <ul> <li><span class=\"example\">name</span><span class=\"description\">sort results by name ascending</span></li> <li><span class=\"example\">-name</span><span class=\"description\">sort results by name descending</span></li> <li><span class=\"example\">-name,id</span><span class=\"description\">sort results by name descending and then by id ascending</span></li> <li><span class=\"example\">id,-dateContentAuthored</span><span class=\"description\">sort results by id ascending and then date descending</span></li> </ul> </li> <li><strong>Date formats:</strong> Date input format is expected to be based on <a href=\"http://www.ietf.org/rfc/rfc3339.txt\">RFC 3339</a>. <br/> <span><strong>Example:</strong></span> <ul><li>2013-11-18T18:43:01Z</li></ul> </li> </ul> </div> </div>
 *
 * The version of the OpenAPI document: 2
 * Contact: syndicationadmin@hhs.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MediaItem from '../model/MediaItem';
import MediaItemWrapped from '../model/MediaItemWrapped';
import ResourcesMediaIdYoutubeMetaDataJsonGet200Response from '../model/ResourcesMediaIdYoutubeMetaDataJsonGet200Response';
import SyndicateMarshallerWrapped from '../model/SyndicateMarshallerWrapped';

/**
* Media service.
* @module api/MediaApi
* @version 2
*/
export default class MediaApi {

    /**
    * Constructs a new MediaApi. 
    * @alias module:api/MediaApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the resourcesMediaFeaturedJsonGet operation.
     * @callback module:api/MediaApi~resourcesMediaFeaturedJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MediaItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of featured content in the syndication system
     * Get the list of featured content in the syndication system
     * @param {Object} opts Optional parameters
     * @param {String} [sort] The name of the property to which sorting will be applied
     * @param {Number} [max] The maximum number of records to return
     * @param {Number} [offset] Return records starting at the offset index.
     * @param {module:api/MediaApi~resourcesMediaFeaturedJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MediaItem>}
     */
    resourcesMediaFeaturedJsonGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sort': opts['sort'],
        'max': opts['max'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MediaItem];
      return this.apiClient.callApi(
        '/resources/media/featured.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesMediaIdContentGet operation.
     * @callback module:api/MediaApi~resourcesMediaIdContentGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get content for MediaItem
     * The actual media content (html, image, etc...)
     * @param {Number} id The id of the media to show content for.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [calledByBuild] The method that called this method
     * @param {module:api/MediaApi~resourcesMediaIdContentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    resourcesMediaIdContentGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resourcesMediaIdContentGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'calledByBuild': opts['calledByBuild']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/resources/media/{id}/content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesMediaIdEmbedJsonGet operation.
     * @callback module:api/MediaApi~resourcesMediaIdEmbedJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get embed code for MediaItem
     * Get the javascript or iframe embed code for this item (to embed it on a web page).
     * @param {Number} id The id of the media to get embed code for.
     * @param {Object} opts Optional parameters
     * @param {String} [flavor] Currently supports 'iframe', defaults to 'javascript'.
     * @param {Number} [width] The width of the generated iframe.
     * @param {Number} [height] The height of the generated iframe.
     * @param {String} [iframeName] The name of the iframe element
     * @param {Boolean} [excludeJquery = false)] Should a reference to the JQuery Library be omitted?
     * @param {Boolean} [excludeDiv = false)] Should the div to insert content into be omitted?
     * @param {String} [divId] Should the div to insert content into have a specific name?
     * @param {String} [displayMethod] Method used to render an html request. Accepts one: [mv, list, feed]
     * @param {module:api/MediaApi~resourcesMediaIdEmbedJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    resourcesMediaIdEmbedJsonGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resourcesMediaIdEmbedJsonGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'flavor': opts['flavor'],
        'width': opts['width'],
        'height': opts['height'],
        'iframeName': opts['iframeName'],
        'excludeJquery': opts['excludeJquery'],
        'excludeDiv': opts['excludeDiv'],
        'divId': opts['divId'],
        'displayMethod': opts['displayMethod']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/resources/media/{id}/embed.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesMediaIdJsonGet operation.
     * @callback module:api/MediaApi~resourcesMediaIdJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MediaItemWrapped>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get MediaItem by ID
     * Information about a specific media item
     * @param {Number} id The id of the record to look up
     * @param {module:api/MediaApi~resourcesMediaIdJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MediaItemWrapped>}
     */
    resourcesMediaIdJsonGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resourcesMediaIdJsonGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MediaItemWrapped];
      return this.apiClient.callApi(
        '/resources/media/{id}.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesMediaIdPreviewJpgGet operation.
     * @callback module:api/MediaApi~resourcesMediaIdPreviewJpgGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Tag by ID
     * Get the jpg preview of the content item where applicable.
     * @param {Number} id The id of the media to get a preview for.
     * @param {module:api/MediaApi~resourcesMediaIdPreviewJpgGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    resourcesMediaIdPreviewJpgGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resourcesMediaIdPreviewJpgGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/resources/media/{id}/preview.jpg', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesMediaIdRelatedMediaFormatGet operation.
     * @callback module:api/MediaApi~resourcesMediaIdRelatedMediaFormatGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MediaItemWrapped>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get related MediaItems by ID
     * Get the media related to the current media item.
     * @param {Number} id The id of the media item to get related media for
     * @param {String} format Automatically added
     * @param {Object} opts Optional parameters
     * @param {Number} [max] The maximum number of records to return
     * @param {Number} [offset] Return records starting at the offset index.
     * @param {String} [sort] The name of the property to which sorting will be applied
     * @param {module:api/MediaApi~resourcesMediaIdRelatedMediaFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MediaItemWrapped>}
     */
    resourcesMediaIdRelatedMediaFormatGet(id, format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resourcesMediaIdRelatedMediaFormatGet");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling resourcesMediaIdRelatedMediaFormatGet");
      }

      let pathParams = {
        'id': id,
        'format': format
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MediaItemWrapped];
      return this.apiClient.callApi(
        '/resources/media/{id}/relatedMedia.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesMediaIdSyndicateFormatGet operation.
     * @callback module:api/MediaApi~resourcesMediaIdSyndicateFormatGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SyndicateMarshallerWrapped} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get syndicated content for MediaItem
     * Get syndicated content.
     * @param {Number} id The id of the media to show embed code for.
     * @param {String} format Automatically added
     * @param {Object} opts Optional parameters
     * @param {String} [cssClass = 'syndicate')] The css class to target for extraction.
     * @param {Boolean} [stripStyles = false)] Remove in-line styles from content.
     * @param {Boolean} [stripScripts = false)] Remove script tags from content.
     * @param {Boolean} [stripImages = false)] Remove image tags from content.
     * @param {Boolean} [stripBreaks = false)] Remove break tags from content.
     * @param {Boolean} [stripClasses = false)] Remove class attributes from content (except 'syndicate').
     * @param {Number} [fontSize] Set font size (in points) of p, div, and span tags.
     * @param {String} [imageFloat] Accepts valid CSS float options, such as 'left' or 'right'. Will inject a style into the content before rendering.
     * @param {String} [imageMargin] Accepts 4 CSV values representing pixel sizes of margin similar to CSS. Default format is 'north,east,south,west' - for example '0,10,10,0' would put a 10 pixel margin on the right and bottom sides of an image. Will inject a style into the content before rendering.
     * @param {Boolean} [autoplay = true)] If content is a video, the embeded video will auto play when loaded.
     * @param {Boolean} [rel = false)] If content is a video, related items will be shown at the end of playback.
     * @param {module:api/MediaApi~resourcesMediaIdSyndicateFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyndicateMarshallerWrapped}
     */
    resourcesMediaIdSyndicateFormatGet(id, format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resourcesMediaIdSyndicateFormatGet");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling resourcesMediaIdSyndicateFormatGet");
      }

      let pathParams = {
        'id': id,
        'format': format
      };
      let queryParams = {
        'cssClass': opts['cssClass'],
        'stripStyles': opts['stripStyles'],
        'stripScripts': opts['stripScripts'],
        'stripImages': opts['stripImages'],
        'stripBreaks': opts['stripBreaks'],
        'stripClasses': opts['stripClasses'],
        'font-size': opts['fontSize'],
        'imageFloat': opts['imageFloat'],
        'imageMargin': opts['imageMargin'],
        'autoplay': opts['autoplay'],
        'rel': opts['rel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SyndicateMarshallerWrapped;
      return this.apiClient.callApi(
        '/resources/media/{id}/syndicate.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesMediaIdThumbnailJpgGet operation.
     * @callback module:api/MediaApi~resourcesMediaIdThumbnailJpgGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get JPG thumbnail for MediaItem
     * Get the jpg thumbnail of the content item where applicable.
     * @param {Number} id The id of the media to get a thumbnail for.
     * @param {module:api/MediaApi~resourcesMediaIdThumbnailJpgGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    resourcesMediaIdThumbnailJpgGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resourcesMediaIdThumbnailJpgGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/resources/media/{id}/thumbnail.jpg', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesMediaIdYoutubeMetaDataJsonGet operation.
     * @callback module:api/MediaApi~resourcesMediaIdYoutubeMetaDataJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourcesMediaIdYoutubeMetaDataJsonGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Youtube metadata for MediaItem
     * Youtube meta-data for a video item.
     * @param {Number} id The id of the video to show meta data for.
     * @param {module:api/MediaApi~resourcesMediaIdYoutubeMetaDataJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourcesMediaIdYoutubeMetaDataJsonGet200Response}
     */
    resourcesMediaIdYoutubeMetaDataJsonGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resourcesMediaIdYoutubeMetaDataJsonGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourcesMediaIdYoutubeMetaDataJsonGet200Response;
      return this.apiClient.callApi(
        '/resources/media/{id}/youtubeMetaData.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesMediaJsonGet operation.
     * @callback module:api/MediaApi~resourcesMediaJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MediaItemWrapped>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get MediaItems
     * Media Items Listings
     * @param {Object} opts Optional parameters
     * @param {Number} [max] The maximum number of records to return
     * @param {Number} [offset] The offset of the records set to return for pagination.
     * @param {String} [sort] * Set of fields to sort the records by.
     * @param {String} [order] * The ascending or descending order.
     * @param {String} [mediaTypes] Find all media items belonging to the specified media type[s].
     * @param {String} [name] Find all media items containing the provided name, case insensitive.
     * @param {Number} [collectionId] Restrict filtering to media items in a specific collection.
     * @param {String} [nameContains] Find all media items containing the partial name, case insensitive.
     * @param {String} [descriptionContains] Find all media items containing the provided partial description, case insensitive.
     * @param {String} [sourceUrl] Find all media items which have the provided sourceUrl, case insensitive.
     * @param {String} [sourceUrlContains] Find all media items which contain the provided partial sourceUrl, case insensitive.
     * @param {String} [customThumbnailUrl] Find all media items which have the provided customThumbnailUrl, case insensitive.
     * @param {String} [customThumbnailUrlContains] Find all media items which contain the provided partial customThumbnailUrl, case insensitive.
     * @param {Date} [dateContentAuthored] Find all media items authored on the provided day (RFC 3339, time ignored).
     * @param {Date} [dateContentUpdated] Find all media items updated on the provided day (RFC 3339, time ignored).
     * @param {Date} [dateContentPublished] Find all media items published on the provided day (RFC 3339, time ignored).
     * @param {Date} [dateContentReviewed] Find all media items reviewed on the provided day (RFC 3339, time ignored).
     * @param {Date} [dateSyndicationCaptured] Find all media items syndicated on the provided day (RFC 3339, time ignored).
     * @param {Date} [dateSyndicationUpdated] Find all media items updated through the syndication system on the provided day, (RFC 3339, time ignored).
     * @param {Date} [contentAuthoredSinceDate] Find all media items authored since the provided day (RFC 3339, time ignored).
     * @param {Date} [contentAuthoredBeforeDate] Find all media items authored before the provided day (RFC 3339, time ignored).
     * @param {String} [contentAuthoredInRange] Find all media items authored between the provided start and end days (RFC 3339, comma separated, time ignored).
     * @param {Date} [contentUpdatedSinceDate] Find all media items updated since the provided day (RFC 3339, time ignored).
     * @param {Date} [contentUpdatedBeforeDate] Find all media items updated before the provided day (RFC 3339, time ignored).
     * @param {String} [contentUpdatedInRange] Find all media items updated between the provided start and end days (RFC 3339, comma separated, time ignored).
     * @param {Date} [contentPublishedSinceDate] Find all media items updated since the provided day (RFC 3339, time ignored).
     * @param {Date} [contentPublishedBeforeDate] Find all media items published before the provided day (RFC 3339, time ignored).
     * @param {String} [contentPublishedInRange] Find all media items published between the provided start and end days (RFC 3339, comma separated, time ignored).
     * @param {Date} [contentReviewedSinceDate] Find all media items reviewed since the provided day (RFC 3339, time ignored).
     * @param {Date} [contentReviewedBeforeDate] Find all media items reviewed before the provided day (RFC 3339, time ignored).
     * @param {String} [contentReviewedInRange] Find all media items reviewed between the provided start and end days (RFC 3339, comma separated, time ignored).
     * @param {Date} [syndicationCapturedSinceDate] Find all media items authored since the provided day (RFC 3339, time ignored).
     * @param {Date} [syndicationCapturedBeforeDate] Find all media items authored before the provided day (RFC 3339, time ignored).
     * @param {String} [syndicationCapturedInRange] Find all media items authored between the provided start and end days (RFC 3339, comma separated, time ignored).
     * @param {Date} [syndicationUpdatedSinceDate] Find all media items updated since the provided day, (RFC 3339, time ignored).
     * @param {Date} [syndicationUpdatedBeforeDate] Find all media items updated before the provided day, (RFC 3339, time ignored).
     * @param {String} [syndicationUpdatedInRange] Find all media items updated between the provided start and end days, (RFC 3339, comma separated, time ignored).
     * @param {Date} [syndicationVisibleSinceDate] Find all media items visible since the provided day, (RFC 3339, time ignored).
     * @param {Date} [syndicationVisibleBeforeDate] Find all media items visible before the provided day, (RFC 3339, time ignored).
     * @param {Date} [syndicationVisibleInRange] Find all media items visible between the provided start and end days, (RFC 3339, comma separated, time ignored).
     * @param {Number} [languageId] Find all media items written in the language specified by Id.
     * @param {String} [languageName] Find all media items written in the language specified by name, case insensitive.
     * @param {String} [languageIsoCode] Find all media items written in the language specified by 639-2 isoCode , case insensitive.
     * @param {String} [hash] Find all media items which match the provided hash, case insensitive.
     * @param {String} [hashContains] Find all media items which match the provided partial hash, case insensitive.
     * @param {Number} [sourceId] Find all media items that belong to the source specified by Id.
     * @param {String} [sourceName] Find all media items that belong to the source specified by name, case insensitive.
     * @param {String} [sourceNameContains] Find all media items that belong to the source specified by partial name, case insensitive.
     * @param {String} [sourceAcronym] Find all media items that belong to the source specified by acronym, case insensitive.
     * @param {String} [sourceAcronymContains] Find all media items that belong to the source specified by partial acronym, case insensitive.
     * @param {String} [tagIds] Find only media items tagged with the specified tag Ids.
     * @param {String} [restrictToSet] Find only media from within the supplied list of Ids.
     * @param {String} [createdBy] Find all media items containing the createdBy value.
     * @param {module:api/MediaApi~resourcesMediaJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MediaItemWrapped>}
     */
    resourcesMediaJsonGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'order': opts['order'],
        'mediaTypes': opts['mediaTypes'],
        'name': opts['name'],
        'collectionId': opts['collectionId'],
        'nameContains': opts['nameContains'],
        'descriptionContains': opts['descriptionContains'],
        'sourceUrl': opts['sourceUrl'],
        'sourceUrlContains': opts['sourceUrlContains'],
        'customThumbnailUrl': opts['customThumbnailUrl'],
        'customThumbnailUrlContains': opts['customThumbnailUrlContains'],
        'dateContentAuthored': opts['dateContentAuthored'],
        'dateContentUpdated': opts['dateContentUpdated'],
        'dateContentPublished': opts['dateContentPublished'],
        'dateContentReviewed': opts['dateContentReviewed'],
        'dateSyndicationCaptured': opts['dateSyndicationCaptured'],
        'dateSyndicationUpdated': opts['dateSyndicationUpdated'],
        'contentAuthoredSinceDate': opts['contentAuthoredSinceDate'],
        'contentAuthoredBeforeDate': opts['contentAuthoredBeforeDate'],
        'contentAuthoredInRange': opts['contentAuthoredInRange'],
        'contentUpdatedSinceDate': opts['contentUpdatedSinceDate'],
        'contentUpdatedBeforeDate': opts['contentUpdatedBeforeDate'],
        'contentUpdatedInRange': opts['contentUpdatedInRange'],
        'contentPublishedSinceDate': opts['contentPublishedSinceDate'],
        'contentPublishedBeforeDate': opts['contentPublishedBeforeDate'],
        'contentPublishedInRange': opts['contentPublishedInRange'],
        'contentReviewedSinceDate': opts['contentReviewedSinceDate'],
        'contentReviewedBeforeDate': opts['contentReviewedBeforeDate'],
        'contentReviewedInRange': opts['contentReviewedInRange'],
        'syndicationCapturedSinceDate': opts['syndicationCapturedSinceDate'],
        'syndicationCapturedBeforeDate': opts['syndicationCapturedBeforeDate'],
        'syndicationCapturedInRange': opts['syndicationCapturedInRange'],
        'syndicationUpdatedSinceDate': opts['syndicationUpdatedSinceDate'],
        'syndicationUpdatedBeforeDate': opts['syndicationUpdatedBeforeDate'],
        'syndicationUpdatedInRange': opts['syndicationUpdatedInRange'],
        'syndicationVisibleSinceDate': opts['syndicationVisibleSinceDate'],
        'syndicationVisibleBeforeDate': opts['syndicationVisibleBeforeDate'],
        'syndicationVisibleInRange': opts['syndicationVisibleInRange'],
        'languageId': opts['languageId'],
        'languageName': opts['languageName'],
        'languageIsoCode': opts['languageIsoCode'],
        'hash': opts['hash'],
        'hashContains': opts['hashContains'],
        'sourceId': opts['sourceId'],
        'sourceName': opts['sourceName'],
        'sourceNameContains': opts['sourceNameContains'],
        'sourceAcronym': opts['sourceAcronym'],
        'sourceAcronymContains': opts['sourceAcronymContains'],
        'tagIds': opts['tagIds'],
        'restrictToSet': opts['restrictToSet'],
        'createdBy': opts['createdBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MediaItemWrapped];
      return this.apiClient.callApi(
        '/resources/media.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesMediaMostPopularMediaFormatGet operation.
     * @callback module:api/MediaApi~resourcesMediaMostPopularMediaFormatGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MediaItemWrapped>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get MediaItems by popularity
     * Get the media with the highest ratings.
     * @param {String} format Automatically added
     * @param {Object} opts Optional parameters
     * @param {Number} [max] The maximum number of records to return
     * @param {Number} [offset] The offset of the records set to return for pagination.
     * @param {module:api/MediaApi~resourcesMediaMostPopularMediaFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MediaItemWrapped>}
     */
    resourcesMediaMostPopularMediaFormatGet(format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling resourcesMediaMostPopularMediaFormatGet");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
        'max': opts['max'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MediaItemWrapped];
      return this.apiClient.callApi(
        '/resources/media/mostPopularMedia.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourcesMediaSearchResultsJsonGet operation.
     * @callback module:api/MediaApi~resourcesMediaSearchResultsJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MediaItemWrapped>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get MediaItems by search query
     * Full search
     * @param {String} q The search query supplied by the user
     * @param {Object} opts Optional parameters
     * @param {Number} [max] The maximum number of records to return
     * @param {Number} [offset] The offset of the records set to return for pagination.
     * @param {module:api/MediaApi~resourcesMediaSearchResultsJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MediaItemWrapped>}
     */
    resourcesMediaSearchResultsJsonGet(q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling resourcesMediaSearchResultsJsonGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'max': opts['max'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [MediaItemWrapped];
      return this.apiClient.callApi(
        '/resources/media/searchResults.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
