/**
 * HHS Media Services API
 * <div class=\"swagger-ui-wrap extraFooter\"><h3>Common Features / Behaviors</h3> <div class=\"features\"> <ul> <li><strong>* \"sort\" param:</strong> supports multi column sorting through the use of commas as delimiters, and a hyphen to denote descending order. <br/> <strong><span>Examples:</span></strong> <ul> <li><span class=\"example\">name</span><span class=\"description\">sort results by name ascending</span></li> <li><span class=\"example\">-name</span><span class=\"description\">sort results by name descending</span></li> <li><span class=\"example\">-name,id</span><span class=\"description\">sort results by name descending and then by id ascending</span></li> <li><span class=\"example\">id,-dateContentAuthored</span><span class=\"description\">sort results by id ascending and then date descending</span></li> </ul> </li> <li><strong>Date formats:</strong> Date input format is expected to be based on <a href=\"http://www.ietf.org/rfc/rfc3339.txt\">RFC 3339</a>. <br/> <span><strong>Example:</strong></span> <ul><li>2013-11-18T18:43:01Z</li></ul> </li> </ul> </div> </div>
 *
 * The version of the OpenAPI document: 2
 * Contact: syndicationadmin@hhs.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AlternateImage from './model/AlternateImage';
import AlternateImageWrapped from './model/AlternateImageWrapped';
import Campaign from './model/Campaign';
import CampaignWrapped from './model/CampaignWrapped';
import Collection from './model/Collection';
import CollectionWrapped from './model/CollectionWrapped';
import ExtendedAttribute from './model/ExtendedAttribute';
import ExtendedAttributeWrapped from './model/ExtendedAttributeWrapped';
import Html from './model/Html';
import HtmlWrapped from './model/HtmlWrapped';
import Image from './model/Image';
import ImageWrapped from './model/ImageWrapped';
import Infographic from './model/Infographic';
import InfographicWrapped from './model/InfographicWrapped';
import Language from './model/Language';
import LanguageWrapped from './model/LanguageWrapped';
import MediaItem from './model/MediaItem';
import MediaItemWrapped from './model/MediaItemWrapped';
import MediaTypeHolder from './model/MediaTypeHolder';
import MediaTypeHolderWrapped from './model/MediaTypeHolderWrapped';
import Message from './model/Message';
import MessageWrapped from './model/MessageWrapped';
import Meta from './model/Meta';
import MetaWrapped from './model/MetaWrapped';
import PDF from './model/PDF';
import PDFWrapped from './model/PDFWrapped';
import Pagination from './model/Pagination';
import PaginationWrapped from './model/PaginationWrapped';
import ResourcesMediaIdYoutubeMetaDataJsonGet200Response from './model/ResourcesMediaIdYoutubeMetaDataJsonGet200Response';
import Source from './model/Source';
import SourceWrapped from './model/SourceWrapped';
import SyndicateMarshaller from './model/SyndicateMarshaller';
import SyndicateMarshallerWrapped from './model/SyndicateMarshallerWrapped';
import TagLanguageMarshaller from './model/TagLanguageMarshaller';
import TagLanguageMarshallerWrapped from './model/TagLanguageMarshallerWrapped';
import TagMarshaller from './model/TagMarshaller';
import TagMarshallerWrapped from './model/TagMarshallerWrapped';
import TagTypeMarshaller from './model/TagTypeMarshaller';
import TagTypeMarshallerWrapped from './model/TagTypeMarshallerWrapped';
import Tweet from './model/Tweet';
import TweetWrapped from './model/TweetWrapped';
import Video from './model/Video';
import VideoWrapped from './model/VideoWrapped';
import YoutubeMetadataWrapped from './model/YoutubeMetadataWrapped';
import CampaignsApi from './api/CampaignsApi';
import LanguagesApi from './api/LanguagesApi';
import MediaApi from './api/MediaApi';
import MediaTypesApi from './api/MediaTypesApi';
import ResourcesApi from './api/ResourcesApi';
import SourcesApi from './api/SourcesApi';
import TagsApi from './api/TagsApi';
import UserMediaListsApi from './api/UserMediaListsApi';


/**
* &lt;div class&#x3D;\&quot;swagger-ui-wrap extraFooter\&quot;&gt;&lt;h3&gt;Common Features / Behaviors&lt;/h3&gt; &lt;div class&#x3D;\&quot;features\&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;* \&quot;sort\&quot; param:&lt;/strong&gt; supports multi column sorting through the use of commas as delimiters, and a hyphen to denote descending order. &lt;br/&gt; &lt;strong&gt;&lt;span&gt;Examples:&lt;/span&gt;&lt;/strong&gt; &lt;ul&gt; &lt;li&gt;&lt;span class&#x3D;\&quot;example\&quot;&gt;name&lt;/span&gt;&lt;span class&#x3D;\&quot;description\&quot;&gt;sort results by name ascending&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span class&#x3D;\&quot;example\&quot;&gt;-name&lt;/span&gt;&lt;span class&#x3D;\&quot;description\&quot;&gt;sort results by name descending&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span class&#x3D;\&quot;example\&quot;&gt;-name,id&lt;/span&gt;&lt;span class&#x3D;\&quot;description\&quot;&gt;sort results by name descending and then by id ascending&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span class&#x3D;\&quot;example\&quot;&gt;id,-dateContentAuthored&lt;/span&gt;&lt;span class&#x3D;\&quot;description\&quot;&gt;sort results by id ascending and then date descending&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Date formats:&lt;/strong&gt; Date input format is expected to be based on &lt;a href&#x3D;\&quot;http://www.ietf.org/rfc/rfc3339.txt\&quot;&gt;RFC 3339&lt;/a&gt;. &lt;br/&gt; &lt;span&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/span&gt; &lt;ul&gt;&lt;li&gt;2013-11-18T18:43:01Z&lt;/li&gt;&lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt;.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var HhsMediaServicesApi = require('index'); // See note below*.
* var xxxSvc = new HhsMediaServicesApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new HhsMediaServicesApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new HhsMediaServicesApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new HhsMediaServicesApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AlternateImage model constructor.
     * @property {module:model/AlternateImage}
     */
    AlternateImage,

    /**
     * The AlternateImageWrapped model constructor.
     * @property {module:model/AlternateImageWrapped}
     */
    AlternateImageWrapped,

    /**
     * The Campaign model constructor.
     * @property {module:model/Campaign}
     */
    Campaign,

    /**
     * The CampaignWrapped model constructor.
     * @property {module:model/CampaignWrapped}
     */
    CampaignWrapped,

    /**
     * The Collection model constructor.
     * @property {module:model/Collection}
     */
    Collection,

    /**
     * The CollectionWrapped model constructor.
     * @property {module:model/CollectionWrapped}
     */
    CollectionWrapped,

    /**
     * The ExtendedAttribute model constructor.
     * @property {module:model/ExtendedAttribute}
     */
    ExtendedAttribute,

    /**
     * The ExtendedAttributeWrapped model constructor.
     * @property {module:model/ExtendedAttributeWrapped}
     */
    ExtendedAttributeWrapped,

    /**
     * The Html model constructor.
     * @property {module:model/Html}
     */
    Html,

    /**
     * The HtmlWrapped model constructor.
     * @property {module:model/HtmlWrapped}
     */
    HtmlWrapped,

    /**
     * The Image model constructor.
     * @property {module:model/Image}
     */
    Image,

    /**
     * The ImageWrapped model constructor.
     * @property {module:model/ImageWrapped}
     */
    ImageWrapped,

    /**
     * The Infographic model constructor.
     * @property {module:model/Infographic}
     */
    Infographic,

    /**
     * The InfographicWrapped model constructor.
     * @property {module:model/InfographicWrapped}
     */
    InfographicWrapped,

    /**
     * The Language model constructor.
     * @property {module:model/Language}
     */
    Language,

    /**
     * The LanguageWrapped model constructor.
     * @property {module:model/LanguageWrapped}
     */
    LanguageWrapped,

    /**
     * The MediaItem model constructor.
     * @property {module:model/MediaItem}
     */
    MediaItem,

    /**
     * The MediaItemWrapped model constructor.
     * @property {module:model/MediaItemWrapped}
     */
    MediaItemWrapped,

    /**
     * The MediaTypeHolder model constructor.
     * @property {module:model/MediaTypeHolder}
     */
    MediaTypeHolder,

    /**
     * The MediaTypeHolderWrapped model constructor.
     * @property {module:model/MediaTypeHolderWrapped}
     */
    MediaTypeHolderWrapped,

    /**
     * The Message model constructor.
     * @property {module:model/Message}
     */
    Message,

    /**
     * The MessageWrapped model constructor.
     * @property {module:model/MessageWrapped}
     */
    MessageWrapped,

    /**
     * The Meta model constructor.
     * @property {module:model/Meta}
     */
    Meta,

    /**
     * The MetaWrapped model constructor.
     * @property {module:model/MetaWrapped}
     */
    MetaWrapped,

    /**
     * The PDF model constructor.
     * @property {module:model/PDF}
     */
    PDF,

    /**
     * The PDFWrapped model constructor.
     * @property {module:model/PDFWrapped}
     */
    PDFWrapped,

    /**
     * The Pagination model constructor.
     * @property {module:model/Pagination}
     */
    Pagination,

    /**
     * The PaginationWrapped model constructor.
     * @property {module:model/PaginationWrapped}
     */
    PaginationWrapped,

    /**
     * The ResourcesMediaIdYoutubeMetaDataJsonGet200Response model constructor.
     * @property {module:model/ResourcesMediaIdYoutubeMetaDataJsonGet200Response}
     */
    ResourcesMediaIdYoutubeMetaDataJsonGet200Response,

    /**
     * The Source model constructor.
     * @property {module:model/Source}
     */
    Source,

    /**
     * The SourceWrapped model constructor.
     * @property {module:model/SourceWrapped}
     */
    SourceWrapped,

    /**
     * The SyndicateMarshaller model constructor.
     * @property {module:model/SyndicateMarshaller}
     */
    SyndicateMarshaller,

    /**
     * The SyndicateMarshallerWrapped model constructor.
     * @property {module:model/SyndicateMarshallerWrapped}
     */
    SyndicateMarshallerWrapped,

    /**
     * The TagLanguageMarshaller model constructor.
     * @property {module:model/TagLanguageMarshaller}
     */
    TagLanguageMarshaller,

    /**
     * The TagLanguageMarshallerWrapped model constructor.
     * @property {module:model/TagLanguageMarshallerWrapped}
     */
    TagLanguageMarshallerWrapped,

    /**
     * The TagMarshaller model constructor.
     * @property {module:model/TagMarshaller}
     */
    TagMarshaller,

    /**
     * The TagMarshallerWrapped model constructor.
     * @property {module:model/TagMarshallerWrapped}
     */
    TagMarshallerWrapped,

    /**
     * The TagTypeMarshaller model constructor.
     * @property {module:model/TagTypeMarshaller}
     */
    TagTypeMarshaller,

    /**
     * The TagTypeMarshallerWrapped model constructor.
     * @property {module:model/TagTypeMarshallerWrapped}
     */
    TagTypeMarshallerWrapped,

    /**
     * The Tweet model constructor.
     * @property {module:model/Tweet}
     */
    Tweet,

    /**
     * The TweetWrapped model constructor.
     * @property {module:model/TweetWrapped}
     */
    TweetWrapped,

    /**
     * The Video model constructor.
     * @property {module:model/Video}
     */
    Video,

    /**
     * The VideoWrapped model constructor.
     * @property {module:model/VideoWrapped}
     */
    VideoWrapped,

    /**
     * The YoutubeMetadataWrapped model constructor.
     * @property {module:model/YoutubeMetadataWrapped}
     */
    YoutubeMetadataWrapped,

    /**
    * The CampaignsApi service constructor.
    * @property {module:api/CampaignsApi}
    */
    CampaignsApi,

    /**
    * The LanguagesApi service constructor.
    * @property {module:api/LanguagesApi}
    */
    LanguagesApi,

    /**
    * The MediaApi service constructor.
    * @property {module:api/MediaApi}
    */
    MediaApi,

    /**
    * The MediaTypesApi service constructor.
    * @property {module:api/MediaTypesApi}
    */
    MediaTypesApi,

    /**
    * The ResourcesApi service constructor.
    * @property {module:api/ResourcesApi}
    */
    ResourcesApi,

    /**
    * The SourcesApi service constructor.
    * @property {module:api/SourcesApi}
    */
    SourcesApi,

    /**
    * The TagsApi service constructor.
    * @property {module:api/TagsApi}
    */
    TagsApi,

    /**
    * The UserMediaListsApi service constructor.
    * @property {module:api/UserMediaListsApi}
    */
    UserMediaListsApi
};
