/*
 * HHS Media Services API
 * <div class=\"swagger-ui-wrap extraFooter\"><h3>Common Features / Behaviors</h3> <div class=\"features\"> <ul> <li><strong>* \"sort\" param:</strong> supports multi column sorting through the use of commas as delimiters, and a hyphen to denote descending order. <br/> <strong><span>Examples:</span></strong> <ul> <li><span class=\"example\">name</span><span class=\"description\">sort results by name ascending</span></li> <li><span class=\"example\">-name</span><span class=\"description\">sort results by name descending</span></li> <li><span class=\"example\">-name,id</span><span class=\"description\">sort results by name descending and then by id ascending</span></li> <li><span class=\"example\">id,-dateContentAuthored</span><span class=\"description\">sort results by id ascending and then date descending</span></li> </ul> </li> <li><strong>Date formats:</strong> Date input format is expected to be based on <a href=\"http://www.ietf.org/rfc/rfc3339.txt\">RFC 3339</a>. <br/> <span><strong>Example:</strong></span> <ul><li>2013-11-18T18:43:01Z</li></ul> </li> </ul> </div> </div>
 *
 * The version of the OpenAPI document: 2
 * Contact: syndicationadmin@hhs.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MediaItemWrapped;
import org.openapitools.client.model.TagLanguageMarshallerWrapped;
import org.openapitools.client.model.TagMarshallerWrapped;
import org.openapitools.client.model.TagTypeMarshallerWrapped;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TagsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TagsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TagsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for resourcesTagsFormatGet
     * @param format Automatically added (required)
     * @param sort The name of the property to which sorting will be applied (optional)
     * @param max The maximum number of records to return (optional)
     * @param offset Return records starting at the offset index. (optional)
     * @param name Return tags[s] matching the supplied name (optional)
     * @param nameContains Return tags which contain the supplied partial name. (optional)
     * @param mediaId Return tags associated with the supplied media id. (optional)
     * @param typeId Return tags belonging to the supplied tag type id. (optional)
     * @param typeName Return tags belonging to the supplied tag type name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of Tags matching the specified query parameters in the specified &#39;format&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesTagsFormatGetCall(String format, String sort, Integer max, Integer offset, String name, String nameContains, Long mediaId, Long typeId, String typeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/tags.{format}"
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (nameContains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameContains", nameContains));
        }

        if (mediaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mediaId", mediaId));
        }

        if (typeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("typeId", typeId));
        }

        if (typeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("typeName", typeName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesTagsFormatGetValidateBeforeCall(String format, String sort, Integer max, Integer offset, String name, String nameContains, Long mediaId, Long typeId, String typeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling resourcesTagsFormatGet(Async)");
        }

        return resourcesTagsFormatGetCall(format, sort, max, offset, name, nameContains, mediaId, typeId, typeName, _callback);

    }

    /**
     * Get Tags
     * List of Tags
     * @param format Automatically added (required)
     * @param sort The name of the property to which sorting will be applied (optional)
     * @param max The maximum number of records to return (optional)
     * @param offset Return records starting at the offset index. (optional)
     * @param name Return tags[s] matching the supplied name (optional)
     * @param nameContains Return tags which contain the supplied partial name. (optional)
     * @param mediaId Return tags associated with the supplied media id. (optional)
     * @param typeId Return tags belonging to the supplied tag type id. (optional)
     * @param typeName Return tags belonging to the supplied tag type name. (optional)
     * @return List&lt;TagMarshallerWrapped&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of Tags matching the specified query parameters in the specified &#39;format&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<TagMarshallerWrapped> resourcesTagsFormatGet(String format, String sort, Integer max, Integer offset, String name, String nameContains, Long mediaId, Long typeId, String typeName) throws ApiException {
        ApiResponse<List<TagMarshallerWrapped>> localVarResp = resourcesTagsFormatGetWithHttpInfo(format, sort, max, offset, name, nameContains, mediaId, typeId, typeName);
        return localVarResp.getData();
    }

    /**
     * Get Tags
     * List of Tags
     * @param format Automatically added (required)
     * @param sort The name of the property to which sorting will be applied (optional)
     * @param max The maximum number of records to return (optional)
     * @param offset Return records starting at the offset index. (optional)
     * @param name Return tags[s] matching the supplied name (optional)
     * @param nameContains Return tags which contain the supplied partial name. (optional)
     * @param mediaId Return tags associated with the supplied media id. (optional)
     * @param typeId Return tags belonging to the supplied tag type id. (optional)
     * @param typeName Return tags belonging to the supplied tag type name. (optional)
     * @return ApiResponse&lt;List&lt;TagMarshallerWrapped&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of Tags matching the specified query parameters in the specified &#39;format&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TagMarshallerWrapped>> resourcesTagsFormatGetWithHttpInfo(String format, String sort, Integer max, Integer offset, String name, String nameContains, Long mediaId, Long typeId, String typeName) throws ApiException {
        okhttp3.Call localVarCall = resourcesTagsFormatGetValidateBeforeCall(format, sort, max, offset, name, nameContains, mediaId, typeId, typeName, null);
        Type localVarReturnType = new TypeToken<List<TagMarshallerWrapped>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Tags (asynchronously)
     * List of Tags
     * @param format Automatically added (required)
     * @param sort The name of the property to which sorting will be applied (optional)
     * @param max The maximum number of records to return (optional)
     * @param offset Return records starting at the offset index. (optional)
     * @param name Return tags[s] matching the supplied name (optional)
     * @param nameContains Return tags which contain the supplied partial name. (optional)
     * @param mediaId Return tags associated with the supplied media id. (optional)
     * @param typeId Return tags belonging to the supplied tag type id. (optional)
     * @param typeName Return tags belonging to the supplied tag type name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of Tags matching the specified query parameters in the specified &#39;format&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesTagsFormatGetAsync(String format, String sort, Integer max, Integer offset, String name, String nameContains, Long mediaId, Long typeId, String typeName, final ApiCallback<List<TagMarshallerWrapped>> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesTagsFormatGetValidateBeforeCall(format, sort, max, offset, name, nameContains, mediaId, typeId, typeName, _callback);
        Type localVarReturnType = new TypeToken<List<TagMarshallerWrapped>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesTagsIdFormatGet
     * @param id The id of the record to look up (required)
     * @param format Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the Tag identified by the &#39;id&#39; in the specified &#39;format&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesTagsIdFormatGetCall(Long id, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/tags/{id}.{format}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesTagsIdFormatGetValidateBeforeCall(Long id, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resourcesTagsIdFormatGet(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling resourcesTagsIdFormatGet(Async)");
        }

        return resourcesTagsIdFormatGetCall(id, format, _callback);

    }

    /**
     * Get Tag by ID
     * Information about a specific tag
     * @param id The id of the record to look up (required)
     * @param format Automatically added (required)
     * @return List&lt;TagMarshallerWrapped&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the Tag identified by the &#39;id&#39; in the specified &#39;format&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<TagMarshallerWrapped> resourcesTagsIdFormatGet(Long id, String format) throws ApiException {
        ApiResponse<List<TagMarshallerWrapped>> localVarResp = resourcesTagsIdFormatGetWithHttpInfo(id, format);
        return localVarResp.getData();
    }

    /**
     * Get Tag by ID
     * Information about a specific tag
     * @param id The id of the record to look up (required)
     * @param format Automatically added (required)
     * @return ApiResponse&lt;List&lt;TagMarshallerWrapped&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the Tag identified by the &#39;id&#39; in the specified &#39;format&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TagMarshallerWrapped>> resourcesTagsIdFormatGetWithHttpInfo(Long id, String format) throws ApiException {
        okhttp3.Call localVarCall = resourcesTagsIdFormatGetValidateBeforeCall(id, format, null);
        Type localVarReturnType = new TypeToken<List<TagMarshallerWrapped>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Tag by ID (asynchronously)
     * Information about a specific tag
     * @param id The id of the record to look up (required)
     * @param format Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the Tag identified by the &#39;id&#39; in the specified &#39;format&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesTagsIdFormatGetAsync(Long id, String format, final ApiCallback<List<TagMarshallerWrapped>> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesTagsIdFormatGetValidateBeforeCall(id, format, _callback);
        Type localVarReturnType = new TypeToken<List<TagMarshallerWrapped>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesTagsIdMediaFormatGet
     * @param id The id of the tag to look up (required)
     * @param format Automatically added (required)
     * @param sort The name of the property to which sorting will be applied (optional)
     * @param max The maximum number of records to return (optional)
     * @param offset Return records starting at the offset index. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of MediaItems associated with the Tag identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesTagsIdMediaFormatGetCall(Long id, String format, String sort, Integer max, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/tags/{id}/media.{format}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesTagsIdMediaFormatGetValidateBeforeCall(Long id, String format, String sort, Integer max, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resourcesTagsIdMediaFormatGet(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling resourcesTagsIdMediaFormatGet(Async)");
        }

        return resourcesTagsIdMediaFormatGetCall(id, format, sort, max, offset, _callback);

    }

    /**
     * Get MediaItems for Tag
     * MediaItem
     * @param id The id of the tag to look up (required)
     * @param format Automatically added (required)
     * @param sort The name of the property to which sorting will be applied (optional)
     * @param max The maximum number of records to return (optional)
     * @param offset Return records starting at the offset index. (optional)
     * @return List&lt;MediaItemWrapped&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of MediaItems associated with the Tag identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<MediaItemWrapped> resourcesTagsIdMediaFormatGet(Long id, String format, String sort, Integer max, Integer offset) throws ApiException {
        ApiResponse<List<MediaItemWrapped>> localVarResp = resourcesTagsIdMediaFormatGetWithHttpInfo(id, format, sort, max, offset);
        return localVarResp.getData();
    }

    /**
     * Get MediaItems for Tag
     * MediaItem
     * @param id The id of the tag to look up (required)
     * @param format Automatically added (required)
     * @param sort The name of the property to which sorting will be applied (optional)
     * @param max The maximum number of records to return (optional)
     * @param offset Return records starting at the offset index. (optional)
     * @return ApiResponse&lt;List&lt;MediaItemWrapped&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of MediaItems associated with the Tag identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MediaItemWrapped>> resourcesTagsIdMediaFormatGetWithHttpInfo(Long id, String format, String sort, Integer max, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = resourcesTagsIdMediaFormatGetValidateBeforeCall(id, format, sort, max, offset, null);
        Type localVarReturnType = new TypeToken<List<MediaItemWrapped>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get MediaItems for Tag (asynchronously)
     * MediaItem
     * @param id The id of the tag to look up (required)
     * @param format Automatically added (required)
     * @param sort The name of the property to which sorting will be applied (optional)
     * @param max The maximum number of records to return (optional)
     * @param offset Return records starting at the offset index. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of MediaItems associated with the Tag identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesTagsIdMediaFormatGetAsync(Long id, String format, String sort, Integer max, Integer offset, final ApiCallback<List<MediaItemWrapped>> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesTagsIdMediaFormatGetValidateBeforeCall(id, format, sort, max, offset, _callback);
        Type localVarReturnType = new TypeToken<List<MediaItemWrapped>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesTagsIdRelatedFormatGet
     * @param id The id of the tag to look up (required)
     * @param format Automatically added (required)
     * @param sort The name of the property to which sorting will be applied (optional)
     * @param max The maximum number of records to return (optional)
     * @param offset Return records starting at the offset index. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of Tags related to the Tag identified by the &#39;id&#39; in the specified format. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesTagsIdRelatedFormatGetCall(Long id, String format, String sort, Integer max, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/tags/{id}/related.{format}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesTagsIdRelatedFormatGetValidateBeforeCall(Long id, String format, String sort, Integer max, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resourcesTagsIdRelatedFormatGet(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling resourcesTagsIdRelatedFormatGet(Async)");
        }

        return resourcesTagsIdRelatedFormatGetCall(id, format, sort, max, offset, _callback);

    }

    /**
     * Get related Tags by ID
     * Information about related tags to a specific tag
     * @param id The id of the tag to look up (required)
     * @param format Automatically added (required)
     * @param sort The name of the property to which sorting will be applied (optional)
     * @param max The maximum number of records to return (optional)
     * @param offset Return records starting at the offset index. (optional)
     * @return List&lt;TagMarshallerWrapped&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of Tags related to the Tag identified by the &#39;id&#39; in the specified format. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<TagMarshallerWrapped> resourcesTagsIdRelatedFormatGet(Long id, String format, String sort, Integer max, Integer offset) throws ApiException {
        ApiResponse<List<TagMarshallerWrapped>> localVarResp = resourcesTagsIdRelatedFormatGetWithHttpInfo(id, format, sort, max, offset);
        return localVarResp.getData();
    }

    /**
     * Get related Tags by ID
     * Information about related tags to a specific tag
     * @param id The id of the tag to look up (required)
     * @param format Automatically added (required)
     * @param sort The name of the property to which sorting will be applied (optional)
     * @param max The maximum number of records to return (optional)
     * @param offset Return records starting at the offset index. (optional)
     * @return ApiResponse&lt;List&lt;TagMarshallerWrapped&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of Tags related to the Tag identified by the &#39;id&#39; in the specified format. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TagMarshallerWrapped>> resourcesTagsIdRelatedFormatGetWithHttpInfo(Long id, String format, String sort, Integer max, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = resourcesTagsIdRelatedFormatGetValidateBeforeCall(id, format, sort, max, offset, null);
        Type localVarReturnType = new TypeToken<List<TagMarshallerWrapped>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get related Tags by ID (asynchronously)
     * Information about related tags to a specific tag
     * @param id The id of the tag to look up (required)
     * @param format Automatically added (required)
     * @param sort The name of the property to which sorting will be applied (optional)
     * @param max The maximum number of records to return (optional)
     * @param offset Return records starting at the offset index. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of Tags related to the Tag identified by the &#39;id&#39; in the specified format. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesTagsIdRelatedFormatGetAsync(Long id, String format, String sort, Integer max, Integer offset, final ApiCallback<List<TagMarshallerWrapped>> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesTagsIdRelatedFormatGetValidateBeforeCall(id, format, sort, max, offset, _callback);
        Type localVarReturnType = new TypeToken<List<TagMarshallerWrapped>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesTagsIdSyndicateFormatGet
     * @param id The id of the record to look up (required)
     * @param format Automatically added (required)
     * @param displayMethod Method used to render an html request. Accepts one: [mv, list, feed] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Renders the list of MediaItems associated with the Tag identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesTagsIdSyndicateFormatGetCall(Long id, String format, String displayMethod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/tags/{id}/syndicate.{format}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (displayMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("displayMethod", displayMethod));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesTagsIdSyndicateFormatGetValidateBeforeCall(Long id, String format, String displayMethod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resourcesTagsIdSyndicateFormatGet(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling resourcesTagsIdSyndicateFormatGet(Async)");
        }

        return resourcesTagsIdSyndicateFormatGetCall(id, format, displayMethod, _callback);

    }

    /**
     * Get MediaItems for Tag
     * MediaItem
     * @param id The id of the record to look up (required)
     * @param format Automatically added (required)
     * @param displayMethod Method used to render an html request. Accepts one: [mv, list, feed] (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Renders the list of MediaItems associated with the Tag identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public String resourcesTagsIdSyndicateFormatGet(Long id, String format, String displayMethod) throws ApiException {
        ApiResponse<String> localVarResp = resourcesTagsIdSyndicateFormatGetWithHttpInfo(id, format, displayMethod);
        return localVarResp.getData();
    }

    /**
     * Get MediaItems for Tag
     * MediaItem
     * @param id The id of the record to look up (required)
     * @param format Automatically added (required)
     * @param displayMethod Method used to render an html request. Accepts one: [mv, list, feed] (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Renders the list of MediaItems associated with the Tag identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> resourcesTagsIdSyndicateFormatGetWithHttpInfo(Long id, String format, String displayMethod) throws ApiException {
        okhttp3.Call localVarCall = resourcesTagsIdSyndicateFormatGetValidateBeforeCall(id, format, displayMethod, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get MediaItems for Tag (asynchronously)
     * MediaItem
     * @param id The id of the record to look up (required)
     * @param format Automatically added (required)
     * @param displayMethod Method used to render an html request. Accepts one: [mv, list, feed] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Renders the list of MediaItems associated with the Tag identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesTagsIdSyndicateFormatGetAsync(Long id, String format, String displayMethod, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesTagsIdSyndicateFormatGetValidateBeforeCall(id, format, displayMethod, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesTagsTagLanguagesFormatGet
     * @param format Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of TagLanguages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesTagsTagLanguagesFormatGetCall(String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/tags/tagLanguages.{format}"
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesTagsTagLanguagesFormatGetValidateBeforeCall(String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling resourcesTagsTagLanguagesFormatGet(Async)");
        }

        return resourcesTagsTagLanguagesFormatGetCall(format, _callback);

    }

    /**
     * Get TagLanguages
     * List of Tag Languages
     * @param format Automatically added (required)
     * @return List&lt;TagLanguageMarshallerWrapped&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of TagLanguages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<TagLanguageMarshallerWrapped> resourcesTagsTagLanguagesFormatGet(String format) throws ApiException {
        ApiResponse<List<TagLanguageMarshallerWrapped>> localVarResp = resourcesTagsTagLanguagesFormatGetWithHttpInfo(format);
        return localVarResp.getData();
    }

    /**
     * Get TagLanguages
     * List of Tag Languages
     * @param format Automatically added (required)
     * @return ApiResponse&lt;List&lt;TagLanguageMarshallerWrapped&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of TagLanguages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TagLanguageMarshallerWrapped>> resourcesTagsTagLanguagesFormatGetWithHttpInfo(String format) throws ApiException {
        okhttp3.Call localVarCall = resourcesTagsTagLanguagesFormatGetValidateBeforeCall(format, null);
        Type localVarReturnType = new TypeToken<List<TagLanguageMarshallerWrapped>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get TagLanguages (asynchronously)
     * List of Tag Languages
     * @param format Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of TagLanguages </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesTagsTagLanguagesFormatGetAsync(String format, final ApiCallback<List<TagLanguageMarshallerWrapped>> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesTagsTagLanguagesFormatGetValidateBeforeCall(format, _callback);
        Type localVarReturnType = new TypeToken<List<TagLanguageMarshallerWrapped>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesTagsTagTypesFormatGet
     * @param format Automatically added (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Renders the list of MediaItems associated with the Tag identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesTagsTagTypesFormatGetCall(String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/tags/tagTypes.{format}"
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesTagsTagTypesFormatGetValidateBeforeCall(String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling resourcesTagsTagTypesFormatGet(Async)");
        }

        return resourcesTagsTagTypesFormatGetCall(format, _callback);

    }

    /**
     * Get MediaItems for Tag
     * List of Types
     * @param format Automatically added (required)
     * @return List&lt;TagTypeMarshallerWrapped&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Renders the list of MediaItems associated with the Tag identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<TagTypeMarshallerWrapped> resourcesTagsTagTypesFormatGet(String format) throws ApiException {
        ApiResponse<List<TagTypeMarshallerWrapped>> localVarResp = resourcesTagsTagTypesFormatGetWithHttpInfo(format);
        return localVarResp.getData();
    }

    /**
     * Get MediaItems for Tag
     * List of Types
     * @param format Automatically added (required)
     * @return ApiResponse&lt;List&lt;TagTypeMarshallerWrapped&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Renders the list of MediaItems associated with the Tag identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TagTypeMarshallerWrapped>> resourcesTagsTagTypesFormatGetWithHttpInfo(String format) throws ApiException {
        okhttp3.Call localVarCall = resourcesTagsTagTypesFormatGetValidateBeforeCall(format, null);
        Type localVarReturnType = new TypeToken<List<TagTypeMarshallerWrapped>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get MediaItems for Tag (asynchronously)
     * List of Types
     * @param format Automatically added (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Renders the list of MediaItems associated with the Tag identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesTagsTagTypesFormatGetAsync(String format, final ApiCallback<List<TagTypeMarshallerWrapped>> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesTagsTagTypesFormatGetValidateBeforeCall(format, _callback);
        Type localVarReturnType = new TypeToken<List<TagTypeMarshallerWrapped>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
