/*
 * HHS Media Services API
 * <div class=\"swagger-ui-wrap extraFooter\"><h3>Common Features / Behaviors</h3> <div class=\"features\"> <ul> <li><strong>* \"sort\" param:</strong> supports multi column sorting through the use of commas as delimiters, and a hyphen to denote descending order. <br/> <strong><span>Examples:</span></strong> <ul> <li><span class=\"example\">name</span><span class=\"description\">sort results by name ascending</span></li> <li><span class=\"example\">-name</span><span class=\"description\">sort results by name descending</span></li> <li><span class=\"example\">-name,id</span><span class=\"description\">sort results by name descending and then by id ascending</span></li> <li><span class=\"example\">id,-dateContentAuthored</span><span class=\"description\">sort results by id ascending and then date descending</span></li> </ul> </li> <li><strong>Date formats:</strong> Date input format is expected to be based on <a href=\"http://www.ietf.org/rfc/rfc3339.txt\">RFC 3339</a>. <br/> <span><strong>Example:</strong></span> <ul><li>2013-11-18T18:43:01Z</li></ul> </li> </ul> </div> </div>
 *
 * The version of the OpenAPI document: 2
 * Contact: syndicationadmin@hhs.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import org.openapitools.client.model.MediaItem;
import org.openapitools.client.model.MediaItemWrapped;
import org.openapitools.client.model.ResourcesMediaIdYoutubeMetaDataJsonGet200Response;
import org.openapitools.client.model.SyndicateMarshallerWrapped;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MediaApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MediaApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MediaApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for resourcesMediaFeaturedJsonGet
     * @param sort The name of the property to which sorting will be applied (optional)
     * @param max The maximum number of records to return (optional)
     * @param offset Return records starting at the offset index. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the list of featured content in the syndication system </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaFeaturedJsonGetCall(String sort, Integer max, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/media/featured.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesMediaFeaturedJsonGetValidateBeforeCall(String sort, Integer max, Integer offset, final ApiCallback _callback) throws ApiException {
        return resourcesMediaFeaturedJsonGetCall(sort, max, offset, _callback);

    }

    /**
     * Get the list of featured content in the syndication system
     * Get the list of featured content in the syndication system
     * @param sort The name of the property to which sorting will be applied (optional)
     * @param max The maximum number of records to return (optional)
     * @param offset Return records starting at the offset index. (optional)
     * @return List&lt;MediaItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the list of featured content in the syndication system </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<MediaItem> resourcesMediaFeaturedJsonGet(String sort, Integer max, Integer offset) throws ApiException {
        ApiResponse<List<MediaItem>> localVarResp = resourcesMediaFeaturedJsonGetWithHttpInfo(sort, max, offset);
        return localVarResp.getData();
    }

    /**
     * Get the list of featured content in the syndication system
     * Get the list of featured content in the syndication system
     * @param sort The name of the property to which sorting will be applied (optional)
     * @param max The maximum number of records to return (optional)
     * @param offset Return records starting at the offset index. (optional)
     * @return ApiResponse&lt;List&lt;MediaItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the list of featured content in the syndication system </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MediaItem>> resourcesMediaFeaturedJsonGetWithHttpInfo(String sort, Integer max, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = resourcesMediaFeaturedJsonGetValidateBeforeCall(sort, max, offset, null);
        Type localVarReturnType = new TypeToken<List<MediaItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of featured content in the syndication system (asynchronously)
     * Get the list of featured content in the syndication system
     * @param sort The name of the property to which sorting will be applied (optional)
     * @param max The maximum number of records to return (optional)
     * @param offset Return records starting at the offset index. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get the list of featured content in the syndication system </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaFeaturedJsonGetAsync(String sort, Integer max, Integer offset, final ApiCallback<List<MediaItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesMediaFeaturedJsonGetValidateBeforeCall(sort, max, offset, _callback);
        Type localVarReturnType = new TypeToken<List<MediaItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesMediaIdContentGet
     * @param id The id of the media to show content for. (required)
     * @param calledByBuild The method that called this method (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the raw content (html, image, etc...) for the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaIdContentGetCall(Long id, Boolean calledByBuild, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/media/{id}/content"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (calledByBuild != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calledByBuild", calledByBuild));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesMediaIdContentGetValidateBeforeCall(Long id, Boolean calledByBuild, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resourcesMediaIdContentGet(Async)");
        }

        return resourcesMediaIdContentGetCall(id, calledByBuild, _callback);

    }

    /**
     * Get content for MediaItem
     * The actual media content (html, image, etc...)
     * @param id The id of the media to show content for. (required)
     * @param calledByBuild The method that called this method (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the raw content (html, image, etc...) for the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public String resourcesMediaIdContentGet(Long id, Boolean calledByBuild) throws ApiException {
        ApiResponse<String> localVarResp = resourcesMediaIdContentGetWithHttpInfo(id, calledByBuild);
        return localVarResp.getData();
    }

    /**
     * Get content for MediaItem
     * The actual media content (html, image, etc...)
     * @param id The id of the media to show content for. (required)
     * @param calledByBuild The method that called this method (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the raw content (html, image, etc...) for the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> resourcesMediaIdContentGetWithHttpInfo(Long id, Boolean calledByBuild) throws ApiException {
        okhttp3.Call localVarCall = resourcesMediaIdContentGetValidateBeforeCall(id, calledByBuild, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get content for MediaItem (asynchronously)
     * The actual media content (html, image, etc...)
     * @param id The id of the media to show content for. (required)
     * @param calledByBuild The method that called this method (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the raw content (html, image, etc...) for the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaIdContentGetAsync(Long id, Boolean calledByBuild, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesMediaIdContentGetValidateBeforeCall(id, calledByBuild, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesMediaIdEmbedJsonGet
     * @param id The id of the media to get embed code for. (required)
     * @param flavor Currently supports &#39;iframe&#39;, defaults to &#39;javascript&#39;. (optional)
     * @param width The width of the generated iframe. (optional)
     * @param height The height of the generated iframe. (optional)
     * @param iframeName The name of the iframe element (optional)
     * @param excludeJquery Should a reference to the JQuery Library be omitted? (optional, default to false)
     * @param excludeDiv Should the div to insert content into be omitted? (optional, default to false)
     * @param divId Should the div to insert content into have a specific name? (optional)
     * @param displayMethod Method used to render an html request. Accepts one: [mv, list, feed] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the javascript or iframe embed code for the MediaItem identified by &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaIdEmbedJsonGetCall(Long id, String flavor, Integer width, Integer height, String iframeName, Boolean excludeJquery, Boolean excludeDiv, String divId, String displayMethod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/media/{id}/embed.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (flavor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flavor", flavor));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (iframeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iframeName", iframeName));
        }

        if (excludeJquery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeJquery", excludeJquery));
        }

        if (excludeDiv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeDiv", excludeDiv));
        }

        if (divId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("divId", divId));
        }

        if (displayMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("displayMethod", displayMethod));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesMediaIdEmbedJsonGetValidateBeforeCall(Long id, String flavor, Integer width, Integer height, String iframeName, Boolean excludeJquery, Boolean excludeDiv, String divId, String displayMethod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resourcesMediaIdEmbedJsonGet(Async)");
        }

        return resourcesMediaIdEmbedJsonGetCall(id, flavor, width, height, iframeName, excludeJquery, excludeDiv, divId, displayMethod, _callback);

    }

    /**
     * Get embed code for MediaItem
     * Get the javascript or iframe embed code for this item (to embed it on a web page).
     * @param id The id of the media to get embed code for. (required)
     * @param flavor Currently supports &#39;iframe&#39;, defaults to &#39;javascript&#39;. (optional)
     * @param width The width of the generated iframe. (optional)
     * @param height The height of the generated iframe. (optional)
     * @param iframeName The name of the iframe element (optional)
     * @param excludeJquery Should a reference to the JQuery Library be omitted? (optional, default to false)
     * @param excludeDiv Should the div to insert content into be omitted? (optional, default to false)
     * @param divId Should the div to insert content into have a specific name? (optional)
     * @param displayMethod Method used to render an html request. Accepts one: [mv, list, feed] (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the javascript or iframe embed code for the MediaItem identified by &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public String resourcesMediaIdEmbedJsonGet(Long id, String flavor, Integer width, Integer height, String iframeName, Boolean excludeJquery, Boolean excludeDiv, String divId, String displayMethod) throws ApiException {
        ApiResponse<String> localVarResp = resourcesMediaIdEmbedJsonGetWithHttpInfo(id, flavor, width, height, iframeName, excludeJquery, excludeDiv, divId, displayMethod);
        return localVarResp.getData();
    }

    /**
     * Get embed code for MediaItem
     * Get the javascript or iframe embed code for this item (to embed it on a web page).
     * @param id The id of the media to get embed code for. (required)
     * @param flavor Currently supports &#39;iframe&#39;, defaults to &#39;javascript&#39;. (optional)
     * @param width The width of the generated iframe. (optional)
     * @param height The height of the generated iframe. (optional)
     * @param iframeName The name of the iframe element (optional)
     * @param excludeJquery Should a reference to the JQuery Library be omitted? (optional, default to false)
     * @param excludeDiv Should the div to insert content into be omitted? (optional, default to false)
     * @param divId Should the div to insert content into have a specific name? (optional)
     * @param displayMethod Method used to render an html request. Accepts one: [mv, list, feed] (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the javascript or iframe embed code for the MediaItem identified by &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> resourcesMediaIdEmbedJsonGetWithHttpInfo(Long id, String flavor, Integer width, Integer height, String iframeName, Boolean excludeJquery, Boolean excludeDiv, String divId, String displayMethod) throws ApiException {
        okhttp3.Call localVarCall = resourcesMediaIdEmbedJsonGetValidateBeforeCall(id, flavor, width, height, iframeName, excludeJquery, excludeDiv, divId, displayMethod, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get embed code for MediaItem (asynchronously)
     * Get the javascript or iframe embed code for this item (to embed it on a web page).
     * @param id The id of the media to get embed code for. (required)
     * @param flavor Currently supports &#39;iframe&#39;, defaults to &#39;javascript&#39;. (optional)
     * @param width The width of the generated iframe. (optional)
     * @param height The height of the generated iframe. (optional)
     * @param iframeName The name of the iframe element (optional)
     * @param excludeJquery Should a reference to the JQuery Library be omitted? (optional, default to false)
     * @param excludeDiv Should the div to insert content into be omitted? (optional, default to false)
     * @param divId Should the div to insert content into have a specific name? (optional)
     * @param displayMethod Method used to render an html request. Accepts one: [mv, list, feed] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the javascript or iframe embed code for the MediaItem identified by &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaIdEmbedJsonGetAsync(Long id, String flavor, Integer width, Integer height, String iframeName, Boolean excludeJquery, Boolean excludeDiv, String divId, String displayMethod, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesMediaIdEmbedJsonGetValidateBeforeCall(id, flavor, width, height, iframeName, excludeJquery, excludeDiv, divId, displayMethod, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesMediaIdJsonGet
     * @param id The id of the record to look up (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaIdJsonGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/media/{id}.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesMediaIdJsonGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resourcesMediaIdJsonGet(Async)");
        }

        return resourcesMediaIdJsonGetCall(id, _callback);

    }

    /**
     * Get MediaItem by ID
     * Information about a specific media item
     * @param id The id of the record to look up (required)
     * @return List&lt;MediaItemWrapped&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<MediaItemWrapped> resourcesMediaIdJsonGet(Long id) throws ApiException {
        ApiResponse<List<MediaItemWrapped>> localVarResp = resourcesMediaIdJsonGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get MediaItem by ID
     * Information about a specific media item
     * @param id The id of the record to look up (required)
     * @return ApiResponse&lt;List&lt;MediaItemWrapped&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MediaItemWrapped>> resourcesMediaIdJsonGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = resourcesMediaIdJsonGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<MediaItemWrapped>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get MediaItem by ID (asynchronously)
     * Information about a specific media item
     * @param id The id of the record to look up (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaIdJsonGetAsync(Long id, final ApiCallback<List<MediaItemWrapped>> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesMediaIdJsonGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<MediaItemWrapped>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesMediaIdPreviewJpgGet
     * @param id The id of the media to get a preview for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the JPG preview, where applicable, for the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaIdPreviewJpgGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/media/{id}/preview.jpg"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesMediaIdPreviewJpgGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resourcesMediaIdPreviewJpgGet(Async)");
        }

        return resourcesMediaIdPreviewJpgGetCall(id, _callback);

    }

    /**
     * Get Tag by ID
     * Get the jpg preview of the content item where applicable.
     * @param id The id of the media to get a preview for. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the JPG preview, where applicable, for the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Object resourcesMediaIdPreviewJpgGet(Long id) throws ApiException {
        ApiResponse<Object> localVarResp = resourcesMediaIdPreviewJpgGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Tag by ID
     * Get the jpg preview of the content item where applicable.
     * @param id The id of the media to get a preview for. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the JPG preview, where applicable, for the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> resourcesMediaIdPreviewJpgGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = resourcesMediaIdPreviewJpgGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Tag by ID (asynchronously)
     * Get the jpg preview of the content item where applicable.
     * @param id The id of the media to get a preview for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the JPG preview, where applicable, for the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaIdPreviewJpgGetAsync(Long id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesMediaIdPreviewJpgGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesMediaIdRelatedMediaFormatGet
     * @param id The id of the media item to get related media for (required)
     * @param format Automatically added (required)
     * @param max The maximum number of records to return (optional)
     * @param offset Return records starting at the offset index. (optional)
     * @param sort The name of the property to which sorting will be applied (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of MediaItems related to the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaIdRelatedMediaFormatGetCall(Long id, String format, Integer max, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/media/{id}/relatedMedia.{format}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesMediaIdRelatedMediaFormatGetValidateBeforeCall(Long id, String format, Integer max, Integer offset, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resourcesMediaIdRelatedMediaFormatGet(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling resourcesMediaIdRelatedMediaFormatGet(Async)");
        }

        return resourcesMediaIdRelatedMediaFormatGetCall(id, format, max, offset, sort, _callback);

    }

    /**
     * Get related MediaItems by ID
     * Get the media related to the current media item.
     * @param id The id of the media item to get related media for (required)
     * @param format Automatically added (required)
     * @param max The maximum number of records to return (optional)
     * @param offset Return records starting at the offset index. (optional)
     * @param sort The name of the property to which sorting will be applied (optional)
     * @return List&lt;MediaItemWrapped&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of MediaItems related to the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<MediaItemWrapped> resourcesMediaIdRelatedMediaFormatGet(Long id, String format, Integer max, Integer offset, String sort) throws ApiException {
        ApiResponse<List<MediaItemWrapped>> localVarResp = resourcesMediaIdRelatedMediaFormatGetWithHttpInfo(id, format, max, offset, sort);
        return localVarResp.getData();
    }

    /**
     * Get related MediaItems by ID
     * Get the media related to the current media item.
     * @param id The id of the media item to get related media for (required)
     * @param format Automatically added (required)
     * @param max The maximum number of records to return (optional)
     * @param offset Return records starting at the offset index. (optional)
     * @param sort The name of the property to which sorting will be applied (optional)
     * @return ApiResponse&lt;List&lt;MediaItemWrapped&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of MediaItems related to the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MediaItemWrapped>> resourcesMediaIdRelatedMediaFormatGetWithHttpInfo(Long id, String format, Integer max, Integer offset, String sort) throws ApiException {
        okhttp3.Call localVarCall = resourcesMediaIdRelatedMediaFormatGetValidateBeforeCall(id, format, max, offset, sort, null);
        Type localVarReturnType = new TypeToken<List<MediaItemWrapped>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get related MediaItems by ID (asynchronously)
     * Get the media related to the current media item.
     * @param id The id of the media item to get related media for (required)
     * @param format Automatically added (required)
     * @param max The maximum number of records to return (optional)
     * @param offset Return records starting at the offset index. (optional)
     * @param sort The name of the property to which sorting will be applied (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of MediaItems related to the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaIdRelatedMediaFormatGetAsync(Long id, String format, Integer max, Integer offset, String sort, final ApiCallback<List<MediaItemWrapped>> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesMediaIdRelatedMediaFormatGetValidateBeforeCall(id, format, max, offset, sort, _callback);
        Type localVarReturnType = new TypeToken<List<MediaItemWrapped>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesMediaIdSyndicateFormatGet
     * @param id The id of the media to show embed code for. (required)
     * @param format Automatically added (required)
     * @param cssClass The css class to target for extraction. (optional, default to syndicate)
     * @param stripStyles Remove in-line styles from content. (optional, default to false)
     * @param stripScripts Remove script tags from content. (optional, default to false)
     * @param stripImages Remove image tags from content. (optional, default to false)
     * @param stripBreaks Remove break tags from content. (optional, default to false)
     * @param stripClasses Remove class attributes from content (except &#39;syndicate&#39;). (optional, default to false)
     * @param fontSize Set font size (in points) of p, div, and span tags. (optional)
     * @param imageFloat Accepts valid CSS float options, such as &#39;left&#39; or &#39;right&#39;. Will inject a style into the content before rendering. (optional)
     * @param imageMargin Accepts 4 CSV values representing pixel sizes of margin similar to CSS. Default format is &#39;north,east,south,west&#39; - for example &#39;0,10,10,0&#39; would put a 10 pixel margin on the right and bottom sides of an image. Will inject a style into the content before rendering. (optional)
     * @param autoplay If content is a video, the embeded video will auto play when loaded. (optional, default to true)
     * @param rel If content is a video, related items will be shown at the end of playback. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the syndicated content for a given MediaItem in the specified &#39;format&#39; (HTML or JSON). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaIdSyndicateFormatGetCall(Long id, String format, String cssClass, Boolean stripStyles, Boolean stripScripts, Boolean stripImages, Boolean stripBreaks, Boolean stripClasses, Integer fontSize, String imageFloat, String imageMargin, Boolean autoplay, Boolean rel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/media/{id}/syndicate.{format}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cssClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cssClass", cssClass));
        }

        if (stripStyles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stripStyles", stripStyles));
        }

        if (stripScripts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stripScripts", stripScripts));
        }

        if (stripImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stripImages", stripImages));
        }

        if (stripBreaks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stripBreaks", stripBreaks));
        }

        if (stripClasses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("stripClasses", stripClasses));
        }

        if (fontSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("font-size", fontSize));
        }

        if (imageFloat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageFloat", imageFloat));
        }

        if (imageMargin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageMargin", imageMargin));
        }

        if (autoplay != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("autoplay", autoplay));
        }

        if (rel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rel", rel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesMediaIdSyndicateFormatGetValidateBeforeCall(Long id, String format, String cssClass, Boolean stripStyles, Boolean stripScripts, Boolean stripImages, Boolean stripBreaks, Boolean stripClasses, Integer fontSize, String imageFloat, String imageMargin, Boolean autoplay, Boolean rel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resourcesMediaIdSyndicateFormatGet(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling resourcesMediaIdSyndicateFormatGet(Async)");
        }

        return resourcesMediaIdSyndicateFormatGetCall(id, format, cssClass, stripStyles, stripScripts, stripImages, stripBreaks, stripClasses, fontSize, imageFloat, imageMargin, autoplay, rel, _callback);

    }

    /**
     * Get syndicated content for MediaItem
     * Get syndicated content.
     * @param id The id of the media to show embed code for. (required)
     * @param format Automatically added (required)
     * @param cssClass The css class to target for extraction. (optional, default to syndicate)
     * @param stripStyles Remove in-line styles from content. (optional, default to false)
     * @param stripScripts Remove script tags from content. (optional, default to false)
     * @param stripImages Remove image tags from content. (optional, default to false)
     * @param stripBreaks Remove break tags from content. (optional, default to false)
     * @param stripClasses Remove class attributes from content (except &#39;syndicate&#39;). (optional, default to false)
     * @param fontSize Set font size (in points) of p, div, and span tags. (optional)
     * @param imageFloat Accepts valid CSS float options, such as &#39;left&#39; or &#39;right&#39;. Will inject a style into the content before rendering. (optional)
     * @param imageMargin Accepts 4 CSV values representing pixel sizes of margin similar to CSS. Default format is &#39;north,east,south,west&#39; - for example &#39;0,10,10,0&#39; would put a 10 pixel margin on the right and bottom sides of an image. Will inject a style into the content before rendering. (optional)
     * @param autoplay If content is a video, the embeded video will auto play when loaded. (optional, default to true)
     * @param rel If content is a video, related items will be shown at the end of playback. (optional, default to false)
     * @return SyndicateMarshallerWrapped
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the syndicated content for a given MediaItem in the specified &#39;format&#39; (HTML or JSON). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public SyndicateMarshallerWrapped resourcesMediaIdSyndicateFormatGet(Long id, String format, String cssClass, Boolean stripStyles, Boolean stripScripts, Boolean stripImages, Boolean stripBreaks, Boolean stripClasses, Integer fontSize, String imageFloat, String imageMargin, Boolean autoplay, Boolean rel) throws ApiException {
        ApiResponse<SyndicateMarshallerWrapped> localVarResp = resourcesMediaIdSyndicateFormatGetWithHttpInfo(id, format, cssClass, stripStyles, stripScripts, stripImages, stripBreaks, stripClasses, fontSize, imageFloat, imageMargin, autoplay, rel);
        return localVarResp.getData();
    }

    /**
     * Get syndicated content for MediaItem
     * Get syndicated content.
     * @param id The id of the media to show embed code for. (required)
     * @param format Automatically added (required)
     * @param cssClass The css class to target for extraction. (optional, default to syndicate)
     * @param stripStyles Remove in-line styles from content. (optional, default to false)
     * @param stripScripts Remove script tags from content. (optional, default to false)
     * @param stripImages Remove image tags from content. (optional, default to false)
     * @param stripBreaks Remove break tags from content. (optional, default to false)
     * @param stripClasses Remove class attributes from content (except &#39;syndicate&#39;). (optional, default to false)
     * @param fontSize Set font size (in points) of p, div, and span tags. (optional)
     * @param imageFloat Accepts valid CSS float options, such as &#39;left&#39; or &#39;right&#39;. Will inject a style into the content before rendering. (optional)
     * @param imageMargin Accepts 4 CSV values representing pixel sizes of margin similar to CSS. Default format is &#39;north,east,south,west&#39; - for example &#39;0,10,10,0&#39; would put a 10 pixel margin on the right and bottom sides of an image. Will inject a style into the content before rendering. (optional)
     * @param autoplay If content is a video, the embeded video will auto play when loaded. (optional, default to true)
     * @param rel If content is a video, related items will be shown at the end of playback. (optional, default to false)
     * @return ApiResponse&lt;SyndicateMarshallerWrapped&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the syndicated content for a given MediaItem in the specified &#39;format&#39; (HTML or JSON). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SyndicateMarshallerWrapped> resourcesMediaIdSyndicateFormatGetWithHttpInfo(Long id, String format, String cssClass, Boolean stripStyles, Boolean stripScripts, Boolean stripImages, Boolean stripBreaks, Boolean stripClasses, Integer fontSize, String imageFloat, String imageMargin, Boolean autoplay, Boolean rel) throws ApiException {
        okhttp3.Call localVarCall = resourcesMediaIdSyndicateFormatGetValidateBeforeCall(id, format, cssClass, stripStyles, stripScripts, stripImages, stripBreaks, stripClasses, fontSize, imageFloat, imageMargin, autoplay, rel, null);
        Type localVarReturnType = new TypeToken<SyndicateMarshallerWrapped>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get syndicated content for MediaItem (asynchronously)
     * Get syndicated content.
     * @param id The id of the media to show embed code for. (required)
     * @param format Automatically added (required)
     * @param cssClass The css class to target for extraction. (optional, default to syndicate)
     * @param stripStyles Remove in-line styles from content. (optional, default to false)
     * @param stripScripts Remove script tags from content. (optional, default to false)
     * @param stripImages Remove image tags from content. (optional, default to false)
     * @param stripBreaks Remove break tags from content. (optional, default to false)
     * @param stripClasses Remove class attributes from content (except &#39;syndicate&#39;). (optional, default to false)
     * @param fontSize Set font size (in points) of p, div, and span tags. (optional)
     * @param imageFloat Accepts valid CSS float options, such as &#39;left&#39; or &#39;right&#39;. Will inject a style into the content before rendering. (optional)
     * @param imageMargin Accepts 4 CSV values representing pixel sizes of margin similar to CSS. Default format is &#39;north,east,south,west&#39; - for example &#39;0,10,10,0&#39; would put a 10 pixel margin on the right and bottom sides of an image. Will inject a style into the content before rendering. (optional)
     * @param autoplay If content is a video, the embeded video will auto play when loaded. (optional, default to true)
     * @param rel If content is a video, related items will be shown at the end of playback. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the syndicated content for a given MediaItem in the specified &#39;format&#39; (HTML or JSON). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaIdSyndicateFormatGetAsync(Long id, String format, String cssClass, Boolean stripStyles, Boolean stripScripts, Boolean stripImages, Boolean stripBreaks, Boolean stripClasses, Integer fontSize, String imageFloat, String imageMargin, Boolean autoplay, Boolean rel, final ApiCallback<SyndicateMarshallerWrapped> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesMediaIdSyndicateFormatGetValidateBeforeCall(id, format, cssClass, stripStyles, stripScripts, stripImages, stripBreaks, stripClasses, fontSize, imageFloat, imageMargin, autoplay, rel, _callback);
        Type localVarReturnType = new TypeToken<SyndicateMarshallerWrapped>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesMediaIdThumbnailJpgGet
     * @param id The id of the media to get a thumbnail for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the JPG thumbnail, where applicable, for the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaIdThumbnailJpgGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/media/{id}/thumbnail.jpg"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesMediaIdThumbnailJpgGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resourcesMediaIdThumbnailJpgGet(Async)");
        }

        return resourcesMediaIdThumbnailJpgGetCall(id, _callback);

    }

    /**
     * Get JPG thumbnail for MediaItem
     * Get the jpg thumbnail of the content item where applicable.
     * @param id The id of the media to get a thumbnail for. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the JPG thumbnail, where applicable, for the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Object resourcesMediaIdThumbnailJpgGet(Long id) throws ApiException {
        ApiResponse<Object> localVarResp = resourcesMediaIdThumbnailJpgGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get JPG thumbnail for MediaItem
     * Get the jpg thumbnail of the content item where applicable.
     * @param id The id of the media to get a thumbnail for. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the JPG thumbnail, where applicable, for the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> resourcesMediaIdThumbnailJpgGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = resourcesMediaIdThumbnailJpgGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get JPG thumbnail for MediaItem (asynchronously)
     * Get the jpg thumbnail of the content item where applicable.
     * @param id The id of the media to get a thumbnail for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the JPG thumbnail, where applicable, for the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaIdThumbnailJpgGetAsync(Long id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesMediaIdThumbnailJpgGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesMediaIdYoutubeMetaDataJsonGet
     * @param id The id of the video to show meta data for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the Youtube metadata, where applicable, for the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaIdYoutubeMetaDataJsonGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/media/{id}/youtubeMetaData.json"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesMediaIdYoutubeMetaDataJsonGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resourcesMediaIdYoutubeMetaDataJsonGet(Async)");
        }

        return resourcesMediaIdYoutubeMetaDataJsonGetCall(id, _callback);

    }

    /**
     * Get Youtube metadata for MediaItem
     * Youtube meta-data for a video item.
     * @param id The id of the video to show meta data for. (required)
     * @return ResourcesMediaIdYoutubeMetaDataJsonGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the Youtube metadata, where applicable, for the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ResourcesMediaIdYoutubeMetaDataJsonGet200Response resourcesMediaIdYoutubeMetaDataJsonGet(Long id) throws ApiException {
        ApiResponse<ResourcesMediaIdYoutubeMetaDataJsonGet200Response> localVarResp = resourcesMediaIdYoutubeMetaDataJsonGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Youtube metadata for MediaItem
     * Youtube meta-data for a video item.
     * @param id The id of the video to show meta data for. (required)
     * @return ApiResponse&lt;ResourcesMediaIdYoutubeMetaDataJsonGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the Youtube metadata, where applicable, for the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourcesMediaIdYoutubeMetaDataJsonGet200Response> resourcesMediaIdYoutubeMetaDataJsonGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = resourcesMediaIdYoutubeMetaDataJsonGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ResourcesMediaIdYoutubeMetaDataJsonGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Youtube metadata for MediaItem (asynchronously)
     * Youtube meta-data for a video item.
     * @param id The id of the video to show meta data for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the Youtube metadata, where applicable, for the MediaItem identified by the &#39;id&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaIdYoutubeMetaDataJsonGetAsync(Long id, final ApiCallback<ResourcesMediaIdYoutubeMetaDataJsonGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesMediaIdYoutubeMetaDataJsonGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ResourcesMediaIdYoutubeMetaDataJsonGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesMediaJsonGet
     * @param max The maximum number of records to return (optional)
     * @param offset The offset of the records set to return for pagination. (optional)
     * @param sort * Set of fields to sort the records by. (optional)
     * @param order * The ascending or descending order. (optional)
     * @param mediaTypes Find all media items belonging to the specified media type[s]. (optional)
     * @param name Find all media items containing the provided name, case insensitive. (optional)
     * @param collectionId Restrict filtering to media items in a specific collection. (optional)
     * @param nameContains Find all media items containing the partial name, case insensitive. (optional)
     * @param descriptionContains Find all media items containing the provided partial description, case insensitive. (optional)
     * @param sourceUrl Find all media items which have the provided sourceUrl, case insensitive. (optional)
     * @param sourceUrlContains Find all media items which contain the provided partial sourceUrl, case insensitive. (optional)
     * @param customThumbnailUrl Find all media items which have the provided customThumbnailUrl, case insensitive. (optional)
     * @param customThumbnailUrlContains Find all media items which contain the provided partial customThumbnailUrl, case insensitive. (optional)
     * @param dateContentAuthored Find all media items authored on the provided day (RFC 3339, time ignored). (optional)
     * @param dateContentUpdated Find all media items updated on the provided day (RFC 3339, time ignored). (optional)
     * @param dateContentPublished Find all media items published on the provided day (RFC 3339, time ignored). (optional)
     * @param dateContentReviewed Find all media items reviewed on the provided day (RFC 3339, time ignored). (optional)
     * @param dateSyndicationCaptured Find all media items syndicated on the provided day (RFC 3339, time ignored). (optional)
     * @param dateSyndicationUpdated Find all media items updated through the syndication system on the provided day, (RFC 3339, time ignored). (optional)
     * @param contentAuthoredSinceDate Find all media items authored since the provided day (RFC 3339, time ignored). (optional)
     * @param contentAuthoredBeforeDate Find all media items authored before the provided day (RFC 3339, time ignored). (optional)
     * @param contentAuthoredInRange Find all media items authored between the provided start and end days (RFC 3339, comma separated, time ignored). (optional)
     * @param contentUpdatedSinceDate Find all media items updated since the provided day (RFC 3339, time ignored). (optional)
     * @param contentUpdatedBeforeDate Find all media items updated before the provided day (RFC 3339, time ignored). (optional)
     * @param contentUpdatedInRange Find all media items updated between the provided start and end days (RFC 3339, comma separated, time ignored). (optional)
     * @param contentPublishedSinceDate Find all media items updated since the provided day (RFC 3339, time ignored). (optional)
     * @param contentPublishedBeforeDate Find all media items published before the provided day (RFC 3339, time ignored). (optional)
     * @param contentPublishedInRange Find all media items published between the provided start and end days (RFC 3339, comma separated, time ignored). (optional)
     * @param contentReviewedSinceDate Find all media items reviewed since the provided day (RFC 3339, time ignored). (optional)
     * @param contentReviewedBeforeDate Find all media items reviewed before the provided day (RFC 3339, time ignored). (optional)
     * @param contentReviewedInRange Find all media items reviewed between the provided start and end days (RFC 3339, comma separated, time ignored). (optional)
     * @param syndicationCapturedSinceDate Find all media items authored since the provided day (RFC 3339, time ignored). (optional)
     * @param syndicationCapturedBeforeDate Find all media items authored before the provided day (RFC 3339, time ignored). (optional)
     * @param syndicationCapturedInRange Find all media items authored between the provided start and end days (RFC 3339, comma separated, time ignored). (optional)
     * @param syndicationUpdatedSinceDate Find all media items updated since the provided day, (RFC 3339, time ignored). (optional)
     * @param syndicationUpdatedBeforeDate Find all media items updated before the provided day, (RFC 3339, time ignored). (optional)
     * @param syndicationUpdatedInRange Find all media items updated between the provided start and end days, (RFC 3339, comma separated, time ignored). (optional)
     * @param syndicationVisibleSinceDate Find all media items visible since the provided day, (RFC 3339, time ignored). (optional)
     * @param syndicationVisibleBeforeDate Find all media items visible before the provided day, (RFC 3339, time ignored). (optional)
     * @param syndicationVisibleInRange Find all media items visible between the provided start and end days, (RFC 3339, comma separated, time ignored). (optional)
     * @param languageId Find all media items written in the language specified by Id. (optional)
     * @param languageName Find all media items written in the language specified by name, case insensitive. (optional)
     * @param languageIsoCode Find all media items written in the language specified by 639-2 isoCode , case insensitive. (optional)
     * @param hash Find all media items which match the provided hash, case insensitive. (optional)
     * @param hashContains Find all media items which match the provided partial hash, case insensitive. (optional)
     * @param sourceId Find all media items that belong to the source specified by Id. (optional)
     * @param sourceName Find all media items that belong to the source specified by name, case insensitive. (optional)
     * @param sourceNameContains Find all media items that belong to the source specified by partial name, case insensitive. (optional)
     * @param sourceAcronym Find all media items that belong to the source specified by acronym, case insensitive. (optional)
     * @param sourceAcronymContains Find all media items that belong to the source specified by partial acronym, case insensitive. (optional)
     * @param tagIds Find only media items tagged with the specified tag Ids. (optional)
     * @param restrictToSet Find only media from within the supplied list of Ids. (optional)
     * @param createdBy Find all media items containing the createdBy value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of MediaItems matching the specified query parameters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaJsonGetCall(Integer max, Integer offset, String sort, String order, String mediaTypes, String name, Integer collectionId, String nameContains, String descriptionContains, String sourceUrl, String sourceUrlContains, String customThumbnailUrl, String customThumbnailUrlContains, LocalDate dateContentAuthored, LocalDate dateContentUpdated, LocalDate dateContentPublished, LocalDate dateContentReviewed, LocalDate dateSyndicationCaptured, LocalDate dateSyndicationUpdated, LocalDate contentAuthoredSinceDate, LocalDate contentAuthoredBeforeDate, String contentAuthoredInRange, LocalDate contentUpdatedSinceDate, LocalDate contentUpdatedBeforeDate, String contentUpdatedInRange, LocalDate contentPublishedSinceDate, LocalDate contentPublishedBeforeDate, String contentPublishedInRange, LocalDate contentReviewedSinceDate, LocalDate contentReviewedBeforeDate, String contentReviewedInRange, LocalDate syndicationCapturedSinceDate, LocalDate syndicationCapturedBeforeDate, String syndicationCapturedInRange, LocalDate syndicationUpdatedSinceDate, LocalDate syndicationUpdatedBeforeDate, String syndicationUpdatedInRange, LocalDate syndicationVisibleSinceDate, LocalDate syndicationVisibleBeforeDate, LocalDate syndicationVisibleInRange, Long languageId, String languageName, String languageIsoCode, String hash, String hashContains, Long sourceId, String sourceName, String sourceNameContains, String sourceAcronym, String sourceAcronymContains, String tagIds, String restrictToSet, String createdBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/media.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (mediaTypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mediaTypes", mediaTypes));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (collectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("collectionId", collectionId));
        }

        if (nameContains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nameContains", nameContains));
        }

        if (descriptionContains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("descriptionContains", descriptionContains));
        }

        if (sourceUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceUrl", sourceUrl));
        }

        if (sourceUrlContains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceUrlContains", sourceUrlContains));
        }

        if (customThumbnailUrl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customThumbnailUrl", customThumbnailUrl));
        }

        if (customThumbnailUrlContains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customThumbnailUrlContains", customThumbnailUrlContains));
        }

        if (dateContentAuthored != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateContentAuthored", dateContentAuthored));
        }

        if (dateContentUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateContentUpdated", dateContentUpdated));
        }

        if (dateContentPublished != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateContentPublished", dateContentPublished));
        }

        if (dateContentReviewed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateContentReviewed", dateContentReviewed));
        }

        if (dateSyndicationCaptured != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateSyndicationCaptured", dateSyndicationCaptured));
        }

        if (dateSyndicationUpdated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateSyndicationUpdated", dateSyndicationUpdated));
        }

        if (contentAuthoredSinceDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentAuthoredSinceDate", contentAuthoredSinceDate));
        }

        if (contentAuthoredBeforeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentAuthoredBeforeDate", contentAuthoredBeforeDate));
        }

        if (contentAuthoredInRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentAuthoredInRange", contentAuthoredInRange));
        }

        if (contentUpdatedSinceDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentUpdatedSinceDate", contentUpdatedSinceDate));
        }

        if (contentUpdatedBeforeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentUpdatedBeforeDate", contentUpdatedBeforeDate));
        }

        if (contentUpdatedInRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentUpdatedInRange", contentUpdatedInRange));
        }

        if (contentPublishedSinceDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentPublishedSinceDate", contentPublishedSinceDate));
        }

        if (contentPublishedBeforeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentPublishedBeforeDate", contentPublishedBeforeDate));
        }

        if (contentPublishedInRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentPublishedInRange", contentPublishedInRange));
        }

        if (contentReviewedSinceDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentReviewedSinceDate", contentReviewedSinceDate));
        }

        if (contentReviewedBeforeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentReviewedBeforeDate", contentReviewedBeforeDate));
        }

        if (contentReviewedInRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentReviewedInRange", contentReviewedInRange));
        }

        if (syndicationCapturedSinceDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syndicationCapturedSinceDate", syndicationCapturedSinceDate));
        }

        if (syndicationCapturedBeforeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syndicationCapturedBeforeDate", syndicationCapturedBeforeDate));
        }

        if (syndicationCapturedInRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syndicationCapturedInRange", syndicationCapturedInRange));
        }

        if (syndicationUpdatedSinceDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syndicationUpdatedSinceDate", syndicationUpdatedSinceDate));
        }

        if (syndicationUpdatedBeforeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syndicationUpdatedBeforeDate", syndicationUpdatedBeforeDate));
        }

        if (syndicationUpdatedInRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syndicationUpdatedInRange", syndicationUpdatedInRange));
        }

        if (syndicationVisibleSinceDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syndicationVisibleSinceDate", syndicationVisibleSinceDate));
        }

        if (syndicationVisibleBeforeDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syndicationVisibleBeforeDate", syndicationVisibleBeforeDate));
        }

        if (syndicationVisibleInRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syndicationVisibleInRange", syndicationVisibleInRange));
        }

        if (languageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("languageId", languageId));
        }

        if (languageName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("languageName", languageName));
        }

        if (languageIsoCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("languageIsoCode", languageIsoCode));
        }

        if (hash != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hash", hash));
        }

        if (hashContains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hashContains", hashContains));
        }

        if (sourceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceId", sourceId));
        }

        if (sourceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceName", sourceName));
        }

        if (sourceNameContains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceNameContains", sourceNameContains));
        }

        if (sourceAcronym != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceAcronym", sourceAcronym));
        }

        if (sourceAcronymContains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceAcronymContains", sourceAcronymContains));
        }

        if (tagIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tagIds", tagIds));
        }

        if (restrictToSet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("restrictToSet", restrictToSet));
        }

        if (createdBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdBy", createdBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesMediaJsonGetValidateBeforeCall(Integer max, Integer offset, String sort, String order, String mediaTypes, String name, Integer collectionId, String nameContains, String descriptionContains, String sourceUrl, String sourceUrlContains, String customThumbnailUrl, String customThumbnailUrlContains, LocalDate dateContentAuthored, LocalDate dateContentUpdated, LocalDate dateContentPublished, LocalDate dateContentReviewed, LocalDate dateSyndicationCaptured, LocalDate dateSyndicationUpdated, LocalDate contentAuthoredSinceDate, LocalDate contentAuthoredBeforeDate, String contentAuthoredInRange, LocalDate contentUpdatedSinceDate, LocalDate contentUpdatedBeforeDate, String contentUpdatedInRange, LocalDate contentPublishedSinceDate, LocalDate contentPublishedBeforeDate, String contentPublishedInRange, LocalDate contentReviewedSinceDate, LocalDate contentReviewedBeforeDate, String contentReviewedInRange, LocalDate syndicationCapturedSinceDate, LocalDate syndicationCapturedBeforeDate, String syndicationCapturedInRange, LocalDate syndicationUpdatedSinceDate, LocalDate syndicationUpdatedBeforeDate, String syndicationUpdatedInRange, LocalDate syndicationVisibleSinceDate, LocalDate syndicationVisibleBeforeDate, LocalDate syndicationVisibleInRange, Long languageId, String languageName, String languageIsoCode, String hash, String hashContains, Long sourceId, String sourceName, String sourceNameContains, String sourceAcronym, String sourceAcronymContains, String tagIds, String restrictToSet, String createdBy, final ApiCallback _callback) throws ApiException {
        return resourcesMediaJsonGetCall(max, offset, sort, order, mediaTypes, name, collectionId, nameContains, descriptionContains, sourceUrl, sourceUrlContains, customThumbnailUrl, customThumbnailUrlContains, dateContentAuthored, dateContentUpdated, dateContentPublished, dateContentReviewed, dateSyndicationCaptured, dateSyndicationUpdated, contentAuthoredSinceDate, contentAuthoredBeforeDate, contentAuthoredInRange, contentUpdatedSinceDate, contentUpdatedBeforeDate, contentUpdatedInRange, contentPublishedSinceDate, contentPublishedBeforeDate, contentPublishedInRange, contentReviewedSinceDate, contentReviewedBeforeDate, contentReviewedInRange, syndicationCapturedSinceDate, syndicationCapturedBeforeDate, syndicationCapturedInRange, syndicationUpdatedSinceDate, syndicationUpdatedBeforeDate, syndicationUpdatedInRange, syndicationVisibleSinceDate, syndicationVisibleBeforeDate, syndicationVisibleInRange, languageId, languageName, languageIsoCode, hash, hashContains, sourceId, sourceName, sourceNameContains, sourceAcronym, sourceAcronymContains, tagIds, restrictToSet, createdBy, _callback);

    }

    /**
     * Get MediaItems
     * Media Items Listings
     * @param max The maximum number of records to return (optional)
     * @param offset The offset of the records set to return for pagination. (optional)
     * @param sort * Set of fields to sort the records by. (optional)
     * @param order * The ascending or descending order. (optional)
     * @param mediaTypes Find all media items belonging to the specified media type[s]. (optional)
     * @param name Find all media items containing the provided name, case insensitive. (optional)
     * @param collectionId Restrict filtering to media items in a specific collection. (optional)
     * @param nameContains Find all media items containing the partial name, case insensitive. (optional)
     * @param descriptionContains Find all media items containing the provided partial description, case insensitive. (optional)
     * @param sourceUrl Find all media items which have the provided sourceUrl, case insensitive. (optional)
     * @param sourceUrlContains Find all media items which contain the provided partial sourceUrl, case insensitive. (optional)
     * @param customThumbnailUrl Find all media items which have the provided customThumbnailUrl, case insensitive. (optional)
     * @param customThumbnailUrlContains Find all media items which contain the provided partial customThumbnailUrl, case insensitive. (optional)
     * @param dateContentAuthored Find all media items authored on the provided day (RFC 3339, time ignored). (optional)
     * @param dateContentUpdated Find all media items updated on the provided day (RFC 3339, time ignored). (optional)
     * @param dateContentPublished Find all media items published on the provided day (RFC 3339, time ignored). (optional)
     * @param dateContentReviewed Find all media items reviewed on the provided day (RFC 3339, time ignored). (optional)
     * @param dateSyndicationCaptured Find all media items syndicated on the provided day (RFC 3339, time ignored). (optional)
     * @param dateSyndicationUpdated Find all media items updated through the syndication system on the provided day, (RFC 3339, time ignored). (optional)
     * @param contentAuthoredSinceDate Find all media items authored since the provided day (RFC 3339, time ignored). (optional)
     * @param contentAuthoredBeforeDate Find all media items authored before the provided day (RFC 3339, time ignored). (optional)
     * @param contentAuthoredInRange Find all media items authored between the provided start and end days (RFC 3339, comma separated, time ignored). (optional)
     * @param contentUpdatedSinceDate Find all media items updated since the provided day (RFC 3339, time ignored). (optional)
     * @param contentUpdatedBeforeDate Find all media items updated before the provided day (RFC 3339, time ignored). (optional)
     * @param contentUpdatedInRange Find all media items updated between the provided start and end days (RFC 3339, comma separated, time ignored). (optional)
     * @param contentPublishedSinceDate Find all media items updated since the provided day (RFC 3339, time ignored). (optional)
     * @param contentPublishedBeforeDate Find all media items published before the provided day (RFC 3339, time ignored). (optional)
     * @param contentPublishedInRange Find all media items published between the provided start and end days (RFC 3339, comma separated, time ignored). (optional)
     * @param contentReviewedSinceDate Find all media items reviewed since the provided day (RFC 3339, time ignored). (optional)
     * @param contentReviewedBeforeDate Find all media items reviewed before the provided day (RFC 3339, time ignored). (optional)
     * @param contentReviewedInRange Find all media items reviewed between the provided start and end days (RFC 3339, comma separated, time ignored). (optional)
     * @param syndicationCapturedSinceDate Find all media items authored since the provided day (RFC 3339, time ignored). (optional)
     * @param syndicationCapturedBeforeDate Find all media items authored before the provided day (RFC 3339, time ignored). (optional)
     * @param syndicationCapturedInRange Find all media items authored between the provided start and end days (RFC 3339, comma separated, time ignored). (optional)
     * @param syndicationUpdatedSinceDate Find all media items updated since the provided day, (RFC 3339, time ignored). (optional)
     * @param syndicationUpdatedBeforeDate Find all media items updated before the provided day, (RFC 3339, time ignored). (optional)
     * @param syndicationUpdatedInRange Find all media items updated between the provided start and end days, (RFC 3339, comma separated, time ignored). (optional)
     * @param syndicationVisibleSinceDate Find all media items visible since the provided day, (RFC 3339, time ignored). (optional)
     * @param syndicationVisibleBeforeDate Find all media items visible before the provided day, (RFC 3339, time ignored). (optional)
     * @param syndicationVisibleInRange Find all media items visible between the provided start and end days, (RFC 3339, comma separated, time ignored). (optional)
     * @param languageId Find all media items written in the language specified by Id. (optional)
     * @param languageName Find all media items written in the language specified by name, case insensitive. (optional)
     * @param languageIsoCode Find all media items written in the language specified by 639-2 isoCode , case insensitive. (optional)
     * @param hash Find all media items which match the provided hash, case insensitive. (optional)
     * @param hashContains Find all media items which match the provided partial hash, case insensitive. (optional)
     * @param sourceId Find all media items that belong to the source specified by Id. (optional)
     * @param sourceName Find all media items that belong to the source specified by name, case insensitive. (optional)
     * @param sourceNameContains Find all media items that belong to the source specified by partial name, case insensitive. (optional)
     * @param sourceAcronym Find all media items that belong to the source specified by acronym, case insensitive. (optional)
     * @param sourceAcronymContains Find all media items that belong to the source specified by partial acronym, case insensitive. (optional)
     * @param tagIds Find only media items tagged with the specified tag Ids. (optional)
     * @param restrictToSet Find only media from within the supplied list of Ids. (optional)
     * @param createdBy Find all media items containing the createdBy value. (optional)
     * @return List&lt;MediaItemWrapped&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of MediaItems matching the specified query parameters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<MediaItemWrapped> resourcesMediaJsonGet(Integer max, Integer offset, String sort, String order, String mediaTypes, String name, Integer collectionId, String nameContains, String descriptionContains, String sourceUrl, String sourceUrlContains, String customThumbnailUrl, String customThumbnailUrlContains, LocalDate dateContentAuthored, LocalDate dateContentUpdated, LocalDate dateContentPublished, LocalDate dateContentReviewed, LocalDate dateSyndicationCaptured, LocalDate dateSyndicationUpdated, LocalDate contentAuthoredSinceDate, LocalDate contentAuthoredBeforeDate, String contentAuthoredInRange, LocalDate contentUpdatedSinceDate, LocalDate contentUpdatedBeforeDate, String contentUpdatedInRange, LocalDate contentPublishedSinceDate, LocalDate contentPublishedBeforeDate, String contentPublishedInRange, LocalDate contentReviewedSinceDate, LocalDate contentReviewedBeforeDate, String contentReviewedInRange, LocalDate syndicationCapturedSinceDate, LocalDate syndicationCapturedBeforeDate, String syndicationCapturedInRange, LocalDate syndicationUpdatedSinceDate, LocalDate syndicationUpdatedBeforeDate, String syndicationUpdatedInRange, LocalDate syndicationVisibleSinceDate, LocalDate syndicationVisibleBeforeDate, LocalDate syndicationVisibleInRange, Long languageId, String languageName, String languageIsoCode, String hash, String hashContains, Long sourceId, String sourceName, String sourceNameContains, String sourceAcronym, String sourceAcronymContains, String tagIds, String restrictToSet, String createdBy) throws ApiException {
        ApiResponse<List<MediaItemWrapped>> localVarResp = resourcesMediaJsonGetWithHttpInfo(max, offset, sort, order, mediaTypes, name, collectionId, nameContains, descriptionContains, sourceUrl, sourceUrlContains, customThumbnailUrl, customThumbnailUrlContains, dateContentAuthored, dateContentUpdated, dateContentPublished, dateContentReviewed, dateSyndicationCaptured, dateSyndicationUpdated, contentAuthoredSinceDate, contentAuthoredBeforeDate, contentAuthoredInRange, contentUpdatedSinceDate, contentUpdatedBeforeDate, contentUpdatedInRange, contentPublishedSinceDate, contentPublishedBeforeDate, contentPublishedInRange, contentReviewedSinceDate, contentReviewedBeforeDate, contentReviewedInRange, syndicationCapturedSinceDate, syndicationCapturedBeforeDate, syndicationCapturedInRange, syndicationUpdatedSinceDate, syndicationUpdatedBeforeDate, syndicationUpdatedInRange, syndicationVisibleSinceDate, syndicationVisibleBeforeDate, syndicationVisibleInRange, languageId, languageName, languageIsoCode, hash, hashContains, sourceId, sourceName, sourceNameContains, sourceAcronym, sourceAcronymContains, tagIds, restrictToSet, createdBy);
        return localVarResp.getData();
    }

    /**
     * Get MediaItems
     * Media Items Listings
     * @param max The maximum number of records to return (optional)
     * @param offset The offset of the records set to return for pagination. (optional)
     * @param sort * Set of fields to sort the records by. (optional)
     * @param order * The ascending or descending order. (optional)
     * @param mediaTypes Find all media items belonging to the specified media type[s]. (optional)
     * @param name Find all media items containing the provided name, case insensitive. (optional)
     * @param collectionId Restrict filtering to media items in a specific collection. (optional)
     * @param nameContains Find all media items containing the partial name, case insensitive. (optional)
     * @param descriptionContains Find all media items containing the provided partial description, case insensitive. (optional)
     * @param sourceUrl Find all media items which have the provided sourceUrl, case insensitive. (optional)
     * @param sourceUrlContains Find all media items which contain the provided partial sourceUrl, case insensitive. (optional)
     * @param customThumbnailUrl Find all media items which have the provided customThumbnailUrl, case insensitive. (optional)
     * @param customThumbnailUrlContains Find all media items which contain the provided partial customThumbnailUrl, case insensitive. (optional)
     * @param dateContentAuthored Find all media items authored on the provided day (RFC 3339, time ignored). (optional)
     * @param dateContentUpdated Find all media items updated on the provided day (RFC 3339, time ignored). (optional)
     * @param dateContentPublished Find all media items published on the provided day (RFC 3339, time ignored). (optional)
     * @param dateContentReviewed Find all media items reviewed on the provided day (RFC 3339, time ignored). (optional)
     * @param dateSyndicationCaptured Find all media items syndicated on the provided day (RFC 3339, time ignored). (optional)
     * @param dateSyndicationUpdated Find all media items updated through the syndication system on the provided day, (RFC 3339, time ignored). (optional)
     * @param contentAuthoredSinceDate Find all media items authored since the provided day (RFC 3339, time ignored). (optional)
     * @param contentAuthoredBeforeDate Find all media items authored before the provided day (RFC 3339, time ignored). (optional)
     * @param contentAuthoredInRange Find all media items authored between the provided start and end days (RFC 3339, comma separated, time ignored). (optional)
     * @param contentUpdatedSinceDate Find all media items updated since the provided day (RFC 3339, time ignored). (optional)
     * @param contentUpdatedBeforeDate Find all media items updated before the provided day (RFC 3339, time ignored). (optional)
     * @param contentUpdatedInRange Find all media items updated between the provided start and end days (RFC 3339, comma separated, time ignored). (optional)
     * @param contentPublishedSinceDate Find all media items updated since the provided day (RFC 3339, time ignored). (optional)
     * @param contentPublishedBeforeDate Find all media items published before the provided day (RFC 3339, time ignored). (optional)
     * @param contentPublishedInRange Find all media items published between the provided start and end days (RFC 3339, comma separated, time ignored). (optional)
     * @param contentReviewedSinceDate Find all media items reviewed since the provided day (RFC 3339, time ignored). (optional)
     * @param contentReviewedBeforeDate Find all media items reviewed before the provided day (RFC 3339, time ignored). (optional)
     * @param contentReviewedInRange Find all media items reviewed between the provided start and end days (RFC 3339, comma separated, time ignored). (optional)
     * @param syndicationCapturedSinceDate Find all media items authored since the provided day (RFC 3339, time ignored). (optional)
     * @param syndicationCapturedBeforeDate Find all media items authored before the provided day (RFC 3339, time ignored). (optional)
     * @param syndicationCapturedInRange Find all media items authored between the provided start and end days (RFC 3339, comma separated, time ignored). (optional)
     * @param syndicationUpdatedSinceDate Find all media items updated since the provided day, (RFC 3339, time ignored). (optional)
     * @param syndicationUpdatedBeforeDate Find all media items updated before the provided day, (RFC 3339, time ignored). (optional)
     * @param syndicationUpdatedInRange Find all media items updated between the provided start and end days, (RFC 3339, comma separated, time ignored). (optional)
     * @param syndicationVisibleSinceDate Find all media items visible since the provided day, (RFC 3339, time ignored). (optional)
     * @param syndicationVisibleBeforeDate Find all media items visible before the provided day, (RFC 3339, time ignored). (optional)
     * @param syndicationVisibleInRange Find all media items visible between the provided start and end days, (RFC 3339, comma separated, time ignored). (optional)
     * @param languageId Find all media items written in the language specified by Id. (optional)
     * @param languageName Find all media items written in the language specified by name, case insensitive. (optional)
     * @param languageIsoCode Find all media items written in the language specified by 639-2 isoCode , case insensitive. (optional)
     * @param hash Find all media items which match the provided hash, case insensitive. (optional)
     * @param hashContains Find all media items which match the provided partial hash, case insensitive. (optional)
     * @param sourceId Find all media items that belong to the source specified by Id. (optional)
     * @param sourceName Find all media items that belong to the source specified by name, case insensitive. (optional)
     * @param sourceNameContains Find all media items that belong to the source specified by partial name, case insensitive. (optional)
     * @param sourceAcronym Find all media items that belong to the source specified by acronym, case insensitive. (optional)
     * @param sourceAcronymContains Find all media items that belong to the source specified by partial acronym, case insensitive. (optional)
     * @param tagIds Find only media items tagged with the specified tag Ids. (optional)
     * @param restrictToSet Find only media from within the supplied list of Ids. (optional)
     * @param createdBy Find all media items containing the createdBy value. (optional)
     * @return ApiResponse&lt;List&lt;MediaItemWrapped&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of MediaItems matching the specified query parameters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MediaItemWrapped>> resourcesMediaJsonGetWithHttpInfo(Integer max, Integer offset, String sort, String order, String mediaTypes, String name, Integer collectionId, String nameContains, String descriptionContains, String sourceUrl, String sourceUrlContains, String customThumbnailUrl, String customThumbnailUrlContains, LocalDate dateContentAuthored, LocalDate dateContentUpdated, LocalDate dateContentPublished, LocalDate dateContentReviewed, LocalDate dateSyndicationCaptured, LocalDate dateSyndicationUpdated, LocalDate contentAuthoredSinceDate, LocalDate contentAuthoredBeforeDate, String contentAuthoredInRange, LocalDate contentUpdatedSinceDate, LocalDate contentUpdatedBeforeDate, String contentUpdatedInRange, LocalDate contentPublishedSinceDate, LocalDate contentPublishedBeforeDate, String contentPublishedInRange, LocalDate contentReviewedSinceDate, LocalDate contentReviewedBeforeDate, String contentReviewedInRange, LocalDate syndicationCapturedSinceDate, LocalDate syndicationCapturedBeforeDate, String syndicationCapturedInRange, LocalDate syndicationUpdatedSinceDate, LocalDate syndicationUpdatedBeforeDate, String syndicationUpdatedInRange, LocalDate syndicationVisibleSinceDate, LocalDate syndicationVisibleBeforeDate, LocalDate syndicationVisibleInRange, Long languageId, String languageName, String languageIsoCode, String hash, String hashContains, Long sourceId, String sourceName, String sourceNameContains, String sourceAcronym, String sourceAcronymContains, String tagIds, String restrictToSet, String createdBy) throws ApiException {
        okhttp3.Call localVarCall = resourcesMediaJsonGetValidateBeforeCall(max, offset, sort, order, mediaTypes, name, collectionId, nameContains, descriptionContains, sourceUrl, sourceUrlContains, customThumbnailUrl, customThumbnailUrlContains, dateContentAuthored, dateContentUpdated, dateContentPublished, dateContentReviewed, dateSyndicationCaptured, dateSyndicationUpdated, contentAuthoredSinceDate, contentAuthoredBeforeDate, contentAuthoredInRange, contentUpdatedSinceDate, contentUpdatedBeforeDate, contentUpdatedInRange, contentPublishedSinceDate, contentPublishedBeforeDate, contentPublishedInRange, contentReviewedSinceDate, contentReviewedBeforeDate, contentReviewedInRange, syndicationCapturedSinceDate, syndicationCapturedBeforeDate, syndicationCapturedInRange, syndicationUpdatedSinceDate, syndicationUpdatedBeforeDate, syndicationUpdatedInRange, syndicationVisibleSinceDate, syndicationVisibleBeforeDate, syndicationVisibleInRange, languageId, languageName, languageIsoCode, hash, hashContains, sourceId, sourceName, sourceNameContains, sourceAcronym, sourceAcronymContains, tagIds, restrictToSet, createdBy, null);
        Type localVarReturnType = new TypeToken<List<MediaItemWrapped>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get MediaItems (asynchronously)
     * Media Items Listings
     * @param max The maximum number of records to return (optional)
     * @param offset The offset of the records set to return for pagination. (optional)
     * @param sort * Set of fields to sort the records by. (optional)
     * @param order * The ascending or descending order. (optional)
     * @param mediaTypes Find all media items belonging to the specified media type[s]. (optional)
     * @param name Find all media items containing the provided name, case insensitive. (optional)
     * @param collectionId Restrict filtering to media items in a specific collection. (optional)
     * @param nameContains Find all media items containing the partial name, case insensitive. (optional)
     * @param descriptionContains Find all media items containing the provided partial description, case insensitive. (optional)
     * @param sourceUrl Find all media items which have the provided sourceUrl, case insensitive. (optional)
     * @param sourceUrlContains Find all media items which contain the provided partial sourceUrl, case insensitive. (optional)
     * @param customThumbnailUrl Find all media items which have the provided customThumbnailUrl, case insensitive. (optional)
     * @param customThumbnailUrlContains Find all media items which contain the provided partial customThumbnailUrl, case insensitive. (optional)
     * @param dateContentAuthored Find all media items authored on the provided day (RFC 3339, time ignored). (optional)
     * @param dateContentUpdated Find all media items updated on the provided day (RFC 3339, time ignored). (optional)
     * @param dateContentPublished Find all media items published on the provided day (RFC 3339, time ignored). (optional)
     * @param dateContentReviewed Find all media items reviewed on the provided day (RFC 3339, time ignored). (optional)
     * @param dateSyndicationCaptured Find all media items syndicated on the provided day (RFC 3339, time ignored). (optional)
     * @param dateSyndicationUpdated Find all media items updated through the syndication system on the provided day, (RFC 3339, time ignored). (optional)
     * @param contentAuthoredSinceDate Find all media items authored since the provided day (RFC 3339, time ignored). (optional)
     * @param contentAuthoredBeforeDate Find all media items authored before the provided day (RFC 3339, time ignored). (optional)
     * @param contentAuthoredInRange Find all media items authored between the provided start and end days (RFC 3339, comma separated, time ignored). (optional)
     * @param contentUpdatedSinceDate Find all media items updated since the provided day (RFC 3339, time ignored). (optional)
     * @param contentUpdatedBeforeDate Find all media items updated before the provided day (RFC 3339, time ignored). (optional)
     * @param contentUpdatedInRange Find all media items updated between the provided start and end days (RFC 3339, comma separated, time ignored). (optional)
     * @param contentPublishedSinceDate Find all media items updated since the provided day (RFC 3339, time ignored). (optional)
     * @param contentPublishedBeforeDate Find all media items published before the provided day (RFC 3339, time ignored). (optional)
     * @param contentPublishedInRange Find all media items published between the provided start and end days (RFC 3339, comma separated, time ignored). (optional)
     * @param contentReviewedSinceDate Find all media items reviewed since the provided day (RFC 3339, time ignored). (optional)
     * @param contentReviewedBeforeDate Find all media items reviewed before the provided day (RFC 3339, time ignored). (optional)
     * @param contentReviewedInRange Find all media items reviewed between the provided start and end days (RFC 3339, comma separated, time ignored). (optional)
     * @param syndicationCapturedSinceDate Find all media items authored since the provided day (RFC 3339, time ignored). (optional)
     * @param syndicationCapturedBeforeDate Find all media items authored before the provided day (RFC 3339, time ignored). (optional)
     * @param syndicationCapturedInRange Find all media items authored between the provided start and end days (RFC 3339, comma separated, time ignored). (optional)
     * @param syndicationUpdatedSinceDate Find all media items updated since the provided day, (RFC 3339, time ignored). (optional)
     * @param syndicationUpdatedBeforeDate Find all media items updated before the provided day, (RFC 3339, time ignored). (optional)
     * @param syndicationUpdatedInRange Find all media items updated between the provided start and end days, (RFC 3339, comma separated, time ignored). (optional)
     * @param syndicationVisibleSinceDate Find all media items visible since the provided day, (RFC 3339, time ignored). (optional)
     * @param syndicationVisibleBeforeDate Find all media items visible before the provided day, (RFC 3339, time ignored). (optional)
     * @param syndicationVisibleInRange Find all media items visible between the provided start and end days, (RFC 3339, comma separated, time ignored). (optional)
     * @param languageId Find all media items written in the language specified by Id. (optional)
     * @param languageName Find all media items written in the language specified by name, case insensitive. (optional)
     * @param languageIsoCode Find all media items written in the language specified by 639-2 isoCode , case insensitive. (optional)
     * @param hash Find all media items which match the provided hash, case insensitive. (optional)
     * @param hashContains Find all media items which match the provided partial hash, case insensitive. (optional)
     * @param sourceId Find all media items that belong to the source specified by Id. (optional)
     * @param sourceName Find all media items that belong to the source specified by name, case insensitive. (optional)
     * @param sourceNameContains Find all media items that belong to the source specified by partial name, case insensitive. (optional)
     * @param sourceAcronym Find all media items that belong to the source specified by acronym, case insensitive. (optional)
     * @param sourceAcronymContains Find all media items that belong to the source specified by partial acronym, case insensitive. (optional)
     * @param tagIds Find only media items tagged with the specified tag Ids. (optional)
     * @param restrictToSet Find only media from within the supplied list of Ids. (optional)
     * @param createdBy Find all media items containing the createdBy value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of MediaItems matching the specified query parameters. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaJsonGetAsync(Integer max, Integer offset, String sort, String order, String mediaTypes, String name, Integer collectionId, String nameContains, String descriptionContains, String sourceUrl, String sourceUrlContains, String customThumbnailUrl, String customThumbnailUrlContains, LocalDate dateContentAuthored, LocalDate dateContentUpdated, LocalDate dateContentPublished, LocalDate dateContentReviewed, LocalDate dateSyndicationCaptured, LocalDate dateSyndicationUpdated, LocalDate contentAuthoredSinceDate, LocalDate contentAuthoredBeforeDate, String contentAuthoredInRange, LocalDate contentUpdatedSinceDate, LocalDate contentUpdatedBeforeDate, String contentUpdatedInRange, LocalDate contentPublishedSinceDate, LocalDate contentPublishedBeforeDate, String contentPublishedInRange, LocalDate contentReviewedSinceDate, LocalDate contentReviewedBeforeDate, String contentReviewedInRange, LocalDate syndicationCapturedSinceDate, LocalDate syndicationCapturedBeforeDate, String syndicationCapturedInRange, LocalDate syndicationUpdatedSinceDate, LocalDate syndicationUpdatedBeforeDate, String syndicationUpdatedInRange, LocalDate syndicationVisibleSinceDate, LocalDate syndicationVisibleBeforeDate, LocalDate syndicationVisibleInRange, Long languageId, String languageName, String languageIsoCode, String hash, String hashContains, Long sourceId, String sourceName, String sourceNameContains, String sourceAcronym, String sourceAcronymContains, String tagIds, String restrictToSet, String createdBy, final ApiCallback<List<MediaItemWrapped>> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesMediaJsonGetValidateBeforeCall(max, offset, sort, order, mediaTypes, name, collectionId, nameContains, descriptionContains, sourceUrl, sourceUrlContains, customThumbnailUrl, customThumbnailUrlContains, dateContentAuthored, dateContentUpdated, dateContentPublished, dateContentReviewed, dateSyndicationCaptured, dateSyndicationUpdated, contentAuthoredSinceDate, contentAuthoredBeforeDate, contentAuthoredInRange, contentUpdatedSinceDate, contentUpdatedBeforeDate, contentUpdatedInRange, contentPublishedSinceDate, contentPublishedBeforeDate, contentPublishedInRange, contentReviewedSinceDate, contentReviewedBeforeDate, contentReviewedInRange, syndicationCapturedSinceDate, syndicationCapturedBeforeDate, syndicationCapturedInRange, syndicationUpdatedSinceDate, syndicationUpdatedBeforeDate, syndicationUpdatedInRange, syndicationVisibleSinceDate, syndicationVisibleBeforeDate, syndicationVisibleInRange, languageId, languageName, languageIsoCode, hash, hashContains, sourceId, sourceName, sourceNameContains, sourceAcronym, sourceAcronymContains, tagIds, restrictToSet, createdBy, _callback);
        Type localVarReturnType = new TypeToken<List<MediaItemWrapped>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesMediaMostPopularMediaFormatGet
     * @param format Automatically added (required)
     * @param max The maximum number of records to return (optional)
     * @param offset The offset of the records set to return for pagination. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of MediaItems with the highest ratings. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaMostPopularMediaFormatGetCall(String format, Integer max, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/media/mostPopularMedia.{format}"
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesMediaMostPopularMediaFormatGetValidateBeforeCall(String format, Integer max, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling resourcesMediaMostPopularMediaFormatGet(Async)");
        }

        return resourcesMediaMostPopularMediaFormatGetCall(format, max, offset, _callback);

    }

    /**
     * Get MediaItems by popularity
     * Get the media with the highest ratings.
     * @param format Automatically added (required)
     * @param max The maximum number of records to return (optional)
     * @param offset The offset of the records set to return for pagination. (optional)
     * @return List&lt;MediaItemWrapped&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of MediaItems with the highest ratings. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<MediaItemWrapped> resourcesMediaMostPopularMediaFormatGet(String format, Integer max, Integer offset) throws ApiException {
        ApiResponse<List<MediaItemWrapped>> localVarResp = resourcesMediaMostPopularMediaFormatGetWithHttpInfo(format, max, offset);
        return localVarResp.getData();
    }

    /**
     * Get MediaItems by popularity
     * Get the media with the highest ratings.
     * @param format Automatically added (required)
     * @param max The maximum number of records to return (optional)
     * @param offset The offset of the records set to return for pagination. (optional)
     * @return ApiResponse&lt;List&lt;MediaItemWrapped&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of MediaItems with the highest ratings. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MediaItemWrapped>> resourcesMediaMostPopularMediaFormatGetWithHttpInfo(String format, Integer max, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = resourcesMediaMostPopularMediaFormatGetValidateBeforeCall(format, max, offset, null);
        Type localVarReturnType = new TypeToken<List<MediaItemWrapped>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get MediaItems by popularity (asynchronously)
     * Get the media with the highest ratings.
     * @param format Automatically added (required)
     * @param max The maximum number of records to return (optional)
     * @param offset The offset of the records set to return for pagination. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of MediaItems with the highest ratings. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaMostPopularMediaFormatGetAsync(String format, Integer max, Integer offset, final ApiCallback<List<MediaItemWrapped>> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesMediaMostPopularMediaFormatGetValidateBeforeCall(format, max, offset, _callback);
        Type localVarReturnType = new TypeToken<List<MediaItemWrapped>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourcesMediaSearchResultsJsonGet
     * @param q The search query supplied by the user (required)
     * @param max The maximum number of records to return (optional)
     * @param offset The offset of the records set to return for pagination. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of MediaItems matching the search query &#39;q&#39;.&lt;p&gt;Please enter keyword or URL in search query &#39;q&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaSearchResultsJsonGetCall(String q, Integer max, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/resources/media/searchResults.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesMediaSearchResultsJsonGetValidateBeforeCall(String q, Integer max, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling resourcesMediaSearchResultsJsonGet(Async)");
        }

        return resourcesMediaSearchResultsJsonGetCall(q, max, offset, _callback);

    }

    /**
     * Get MediaItems by search query
     * Full search
     * @param q The search query supplied by the user (required)
     * @param max The maximum number of records to return (optional)
     * @param offset The offset of the records set to return for pagination. (optional)
     * @return List&lt;MediaItemWrapped&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of MediaItems matching the search query &#39;q&#39;.&lt;p&gt;Please enter keyword or URL in search query &#39;q&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<MediaItemWrapped> resourcesMediaSearchResultsJsonGet(String q, Integer max, Integer offset) throws ApiException {
        ApiResponse<List<MediaItemWrapped>> localVarResp = resourcesMediaSearchResultsJsonGetWithHttpInfo(q, max, offset);
        return localVarResp.getData();
    }

    /**
     * Get MediaItems by search query
     * Full search
     * @param q The search query supplied by the user (required)
     * @param max The maximum number of records to return (optional)
     * @param offset The offset of the records set to return for pagination. (optional)
     * @return ApiResponse&lt;List&lt;MediaItemWrapped&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of MediaItems matching the search query &#39;q&#39;.&lt;p&gt;Please enter keyword or URL in search query &#39;q&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<MediaItemWrapped>> resourcesMediaSearchResultsJsonGetWithHttpInfo(String q, Integer max, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = resourcesMediaSearchResultsJsonGetValidateBeforeCall(q, max, offset, null);
        Type localVarReturnType = new TypeToken<List<MediaItemWrapped>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get MediaItems by search query (asynchronously)
     * Full search
     * @param q The search query supplied by the user (required)
     * @param max The maximum number of records to return (optional)
     * @param offset The offset of the records set to return for pagination. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the list of MediaItems matching the search query &#39;q&#39;.&lt;p&gt;Please enter keyword or URL in search query &#39;q&#39;. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesMediaSearchResultsJsonGetAsync(String q, Integer max, Integer offset, final ApiCallback<List<MediaItemWrapped>> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesMediaSearchResultsJsonGetValidateBeforeCall(q, max, offset, _callback);
        Type localVarReturnType = new TypeToken<List<MediaItemWrapped>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
