/*
 * HHS Media Services API
 * <div class=\"swagger-ui-wrap extraFooter\"><h3>Common Features / Behaviors</h3> <div class=\"features\"> <ul> <li><strong>* \"sort\" param:</strong> supports multi column sorting through the use of commas as delimiters, and a hyphen to denote descending order. <br/> <strong><span>Examples:</span></strong> <ul> <li><span class=\"example\">name</span><span class=\"description\">sort results by name ascending</span></li> <li><span class=\"example\">-name</span><span class=\"description\">sort results by name descending</span></li> <li><span class=\"example\">-name,id</span><span class=\"description\">sort results by name descending and then by id ascending</span></li> <li><span class=\"example\">id,-dateContentAuthored</span><span class=\"description\">sort results by id ascending and then date descending</span></li> </ul> </li> <li><strong>Date formats:</strong> Date input format is expected to be based on <a href=\"http://www.ietf.org/rfc/rfc3339.txt\">RFC 3339</a>. <br/> <span><strong>Example:</strong></span> <ul><li>2013-11-18T18:43:01Z</li></ul> </li> </ul> </div> </div>
 *
 * The version of the OpenAPI document: 2
 * Contact: syndicationadmin@hhs.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Campaign;
import org.openapitools.client.model.ExtendedAttribute;
import org.openapitools.client.model.Language;
import org.openapitools.client.model.Source;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for MediaItem
 */
public class MediaItemTest {
    private final MediaItem model = new MediaItem();

    /**
     * Model tests for MediaItem
     */
    @Test
    public void testMediaItem() {
        // TODO: test MediaItem
    }

    /**
     * Test the property 'campaigns'
     */
    @Test
    public void campaignsTest() {
        // TODO: test campaigns
    }

    /**
     * Test the property 'createdBy'
     */
    @Test
    public void createdByTest() {
        // TODO: test createdBy
    }

    /**
     * Test the property 'customAttributionUrl'
     */
    @Test
    public void customAttributionUrlTest() {
        // TODO: test customAttributionUrl
    }

    /**
     * Test the property 'customPreviewUrl'
     */
    @Test
    public void customPreviewUrlTest() {
        // TODO: test customPreviewUrl
    }

    /**
     * Test the property 'customThumbnailUrl'
     */
    @Test
    public void customThumbnailUrlTest() {
        // TODO: test customThumbnailUrl
    }

    /**
     * Test the property 'dateContentAuthored'
     */
    @Test
    public void dateContentAuthoredTest() {
        // TODO: test dateContentAuthored
    }

    /**
     * Test the property 'dateContentPublished'
     */
    @Test
    public void dateContentPublishedTest() {
        // TODO: test dateContentPublished
    }

    /**
     * Test the property 'dateContentReviewed'
     */
    @Test
    public void dateContentReviewedTest() {
        // TODO: test dateContentReviewed
    }

    /**
     * Test the property 'dateContentUpdated'
     */
    @Test
    public void dateContentUpdatedTest() {
        // TODO: test dateContentUpdated
    }

    /**
     * Test the property 'dateSyndicationCaptured'
     */
    @Test
    public void dateSyndicationCapturedTest() {
        // TODO: test dateSyndicationCaptured
    }

    /**
     * Test the property 'dateSyndicationUpdated'
     */
    @Test
    public void dateSyndicationUpdatedTest() {
        // TODO: test dateSyndicationUpdated
    }

    /**
     * Test the property 'dateSyndicationVisible'
     */
    @Test
    public void dateSyndicationVisibleTest() {
        // TODO: test dateSyndicationVisible
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'extendedAttributes'
     */
    @Test
    public void extendedAttributesTest() {
        // TODO: test extendedAttributes
    }

    /**
     * Test the property 'externalGuid'
     */
    @Test
    public void externalGuidTest() {
        // TODO: test externalGuid
    }

    /**
     * Test the property 'foreignSyndicationAPIUrl'
     */
    @Test
    public void foreignSyndicationAPIUrlTest() {
        // TODO: test foreignSyndicationAPIUrl
    }

    /**
     * Test the property 'hash'
     */
    @Test
    public void hashTest() {
        // TODO: test hash
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'language'
     */
    @Test
    public void languageTest() {
        // TODO: test language
    }

    /**
     * Test the property 'mediaType'
     */
    @Test
    public void mediaTypeTest() {
        // TODO: test mediaType
    }

    /**
     * Test the property 'name'
     */
    @Test
    public void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'source'
     */
    @Test
    public void sourceTest() {
        // TODO: test source
    }

    /**
     * Test the property 'sourceUrl'
     */
    @Test
    public void sourceUrlTest() {
        // TODO: test sourceUrl
    }

    /**
     * Test the property 'targetUrl'
     */
    @Test
    public void targetUrlTest() {
        // TODO: test targetUrl
    }

}
