/*
 * HHS Media Services API
 * <div class=\"swagger-ui-wrap extraFooter\"><h3>Common Features / Behaviors</h3> <div class=\"features\"> <ul> <li><strong>* \"sort\" param:</strong> supports multi column sorting through the use of commas as delimiters, and a hyphen to denote descending order. <br/> <strong><span>Examples:</span></strong> <ul> <li><span class=\"example\">name</span><span class=\"description\">sort results by name ascending</span></li> <li><span class=\"example\">-name</span><span class=\"description\">sort results by name descending</span></li> <li><span class=\"example\">-name,id</span><span class=\"description\">sort results by name descending and then by id ascending</span></li> <li><span class=\"example\">id,-dateContentAuthored</span><span class=\"description\">sort results by id ascending and then date descending</span></li> </ul> </li> <li><strong>Date formats:</strong> Date input format is expected to be based on <a href=\"http://www.ietf.org/rfc/rfc3339.txt\">RFC 3339</a>. <br/> <span><strong>Example:</strong></span> <ul><li>2013-11-18T18:43:01Z</li></ul> </li> </ul> </div> </div>
 *
 * The version of the OpenAPI document: 2
 * Contact: syndicationadmin@hhs.gov
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.LocalDate;
import org.openapitools.client.model.MediaItem;
import org.openapitools.client.model.MediaItemWrapped;
import org.openapitools.client.model.ResourcesMediaIdYoutubeMetaDataJsonGet200Response;
import org.openapitools.client.model.SyndicateMarshallerWrapped;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MediaApi
 */
@Disabled
public class MediaApiTest {

    private final MediaApi api = new MediaApi();

    /**
     * Get the list of featured content in the syndication system
     *
     * Get the list of featured content in the syndication system
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesMediaFeaturedJsonGetTest() throws ApiException {
        String sort = null;
        Integer max = null;
        Integer offset = null;
        List<MediaItem> response = api.resourcesMediaFeaturedJsonGet(sort, max, offset);
        // TODO: test validations
    }

    /**
     * Get content for MediaItem
     *
     * The actual media content (html, image, etc...)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesMediaIdContentGetTest() throws ApiException {
        Long id = null;
        Boolean calledByBuild = null;
        String response = api.resourcesMediaIdContentGet(id, calledByBuild);
        // TODO: test validations
    }

    /**
     * Get embed code for MediaItem
     *
     * Get the javascript or iframe embed code for this item (to embed it on a web page).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesMediaIdEmbedJsonGetTest() throws ApiException {
        Long id = null;
        String flavor = null;
        Integer width = null;
        Integer height = null;
        String iframeName = null;
        Boolean excludeJquery = null;
        Boolean excludeDiv = null;
        String divId = null;
        String displayMethod = null;
        String response = api.resourcesMediaIdEmbedJsonGet(id, flavor, width, height, iframeName, excludeJquery, excludeDiv, divId, displayMethod);
        // TODO: test validations
    }

    /**
     * Get MediaItem by ID
     *
     * Information about a specific media item
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesMediaIdJsonGetTest() throws ApiException {
        Long id = null;
        List<MediaItemWrapped> response = api.resourcesMediaIdJsonGet(id);
        // TODO: test validations
    }

    /**
     * Get Tag by ID
     *
     * Get the jpg preview of the content item where applicable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesMediaIdPreviewJpgGetTest() throws ApiException {
        Long id = null;
        Object response = api.resourcesMediaIdPreviewJpgGet(id);
        // TODO: test validations
    }

    /**
     * Get related MediaItems by ID
     *
     * Get the media related to the current media item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesMediaIdRelatedMediaFormatGetTest() throws ApiException {
        Long id = null;
        String format = null;
        Integer max = null;
        Integer offset = null;
        String sort = null;
        List<MediaItemWrapped> response = api.resourcesMediaIdRelatedMediaFormatGet(id, format, max, offset, sort);
        // TODO: test validations
    }

    /**
     * Get syndicated content for MediaItem
     *
     * Get syndicated content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesMediaIdSyndicateFormatGetTest() throws ApiException {
        Long id = null;
        String format = null;
        String cssClass = null;
        Boolean stripStyles = null;
        Boolean stripScripts = null;
        Boolean stripImages = null;
        Boolean stripBreaks = null;
        Boolean stripClasses = null;
        Integer fontSize = null;
        String imageFloat = null;
        String imageMargin = null;
        Boolean autoplay = null;
        Boolean rel = null;
        SyndicateMarshallerWrapped response = api.resourcesMediaIdSyndicateFormatGet(id, format, cssClass, stripStyles, stripScripts, stripImages, stripBreaks, stripClasses, fontSize, imageFloat, imageMargin, autoplay, rel);
        // TODO: test validations
    }

    /**
     * Get JPG thumbnail for MediaItem
     *
     * Get the jpg thumbnail of the content item where applicable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesMediaIdThumbnailJpgGetTest() throws ApiException {
        Long id = null;
        Object response = api.resourcesMediaIdThumbnailJpgGet(id);
        // TODO: test validations
    }

    /**
     * Get Youtube metadata for MediaItem
     *
     * Youtube meta-data for a video item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesMediaIdYoutubeMetaDataJsonGetTest() throws ApiException {
        Long id = null;
        ResourcesMediaIdYoutubeMetaDataJsonGet200Response response = api.resourcesMediaIdYoutubeMetaDataJsonGet(id);
        // TODO: test validations
    }

    /**
     * Get MediaItems
     *
     * Media Items Listings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesMediaJsonGetTest() throws ApiException {
        Integer max = null;
        Integer offset = null;
        String sort = null;
        String order = null;
        String mediaTypes = null;
        String name = null;
        Integer collectionId = null;
        String nameContains = null;
        String descriptionContains = null;
        String sourceUrl = null;
        String sourceUrlContains = null;
        String customThumbnailUrl = null;
        String customThumbnailUrlContains = null;
        LocalDate dateContentAuthored = null;
        LocalDate dateContentUpdated = null;
        LocalDate dateContentPublished = null;
        LocalDate dateContentReviewed = null;
        LocalDate dateSyndicationCaptured = null;
        LocalDate dateSyndicationUpdated = null;
        LocalDate contentAuthoredSinceDate = null;
        LocalDate contentAuthoredBeforeDate = null;
        String contentAuthoredInRange = null;
        LocalDate contentUpdatedSinceDate = null;
        LocalDate contentUpdatedBeforeDate = null;
        String contentUpdatedInRange = null;
        LocalDate contentPublishedSinceDate = null;
        LocalDate contentPublishedBeforeDate = null;
        String contentPublishedInRange = null;
        LocalDate contentReviewedSinceDate = null;
        LocalDate contentReviewedBeforeDate = null;
        String contentReviewedInRange = null;
        LocalDate syndicationCapturedSinceDate = null;
        LocalDate syndicationCapturedBeforeDate = null;
        String syndicationCapturedInRange = null;
        LocalDate syndicationUpdatedSinceDate = null;
        LocalDate syndicationUpdatedBeforeDate = null;
        String syndicationUpdatedInRange = null;
        LocalDate syndicationVisibleSinceDate = null;
        LocalDate syndicationVisibleBeforeDate = null;
        LocalDate syndicationVisibleInRange = null;
        Long languageId = null;
        String languageName = null;
        String languageIsoCode = null;
        String hash = null;
        String hashContains = null;
        Long sourceId = null;
        String sourceName = null;
        String sourceNameContains = null;
        String sourceAcronym = null;
        String sourceAcronymContains = null;
        String tagIds = null;
        String restrictToSet = null;
        String createdBy = null;
        List<MediaItemWrapped> response = api.resourcesMediaJsonGet(max, offset, sort, order, mediaTypes, name, collectionId, nameContains, descriptionContains, sourceUrl, sourceUrlContains, customThumbnailUrl, customThumbnailUrlContains, dateContentAuthored, dateContentUpdated, dateContentPublished, dateContentReviewed, dateSyndicationCaptured, dateSyndicationUpdated, contentAuthoredSinceDate, contentAuthoredBeforeDate, contentAuthoredInRange, contentUpdatedSinceDate, contentUpdatedBeforeDate, contentUpdatedInRange, contentPublishedSinceDate, contentPublishedBeforeDate, contentPublishedInRange, contentReviewedSinceDate, contentReviewedBeforeDate, contentReviewedInRange, syndicationCapturedSinceDate, syndicationCapturedBeforeDate, syndicationCapturedInRange, syndicationUpdatedSinceDate, syndicationUpdatedBeforeDate, syndicationUpdatedInRange, syndicationVisibleSinceDate, syndicationVisibleBeforeDate, syndicationVisibleInRange, languageId, languageName, languageIsoCode, hash, hashContains, sourceId, sourceName, sourceNameContains, sourceAcronym, sourceAcronymContains, tagIds, restrictToSet, createdBy);
        // TODO: test validations
    }

    /**
     * Get MediaItems by popularity
     *
     * Get the media with the highest ratings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesMediaMostPopularMediaFormatGetTest() throws ApiException {
        String format = null;
        Integer max = null;
        Integer offset = null;
        List<MediaItemWrapped> response = api.resourcesMediaMostPopularMediaFormatGet(format, max, offset);
        // TODO: test validations
    }

    /**
     * Get MediaItems by search query
     *
     * Full search
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourcesMediaSearchResultsJsonGetTest() throws ApiException {
        String q = null;
        Integer max = null;
        Integer offset = null;
        List<MediaItemWrapped> response = api.resourcesMediaSearchResultsJsonGet(q, max, offset);
        // TODO: test validations
    }

}
