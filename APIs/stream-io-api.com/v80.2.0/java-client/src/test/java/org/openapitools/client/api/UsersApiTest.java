/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.APIError;
import org.openapitools.client.model.BanRequest;
import org.openapitools.client.model.ConnectRequest;
import org.openapitools.client.model.DeactivateUserRequest;
import org.openapitools.client.model.DeactivateUserResponse;
import org.openapitools.client.model.DeactivateUsersRequest;
import org.openapitools.client.model.DeactivateUsersResponse;
import org.openapitools.client.model.DeleteUserResponse;
import org.openapitools.client.model.DeleteUsersRequest;
import org.openapitools.client.model.DeleteUsersResponse;
import org.openapitools.client.model.ExportUserResponse;
import org.openapitools.client.model.ExportUsersRequest;
import org.openapitools.client.model.ExportUsersResponse;
import org.openapitools.client.model.FlagRequest;
import org.openapitools.client.model.FlagResponse;
import org.openapitools.client.model.GuestRequest;
import org.openapitools.client.model.GuestResponse;
import org.openapitools.client.model.MuteUserRequest;
import org.openapitools.client.model.MuteUserResponse;
import org.openapitools.client.model.QueryBannedUsersRequest;
import org.openapitools.client.model.QueryBannedUsersResponse;
import org.openapitools.client.model.QueryUsersRequest;
import org.openapitools.client.model.ReactivateUserRequest;
import org.openapitools.client.model.ReactivateUserResponse;
import org.openapitools.client.model.ReactivateUsersRequest;
import org.openapitools.client.model.ReactivateUsersResponse;
import org.openapitools.client.model.Response;
import org.openapitools.client.model.RestoreUsersRequest;
import org.openapitools.client.model.UnmuteResponse;
import org.openapitools.client.model.UnmuteUserRequest;
import org.openapitools.client.model.UpdateUserPartialRequest;
import org.openapitools.client.model.UpdateUsersRequest;
import org.openapitools.client.model.UpdateUsersResponse;
import org.openapitools.client.model.UsersResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Ban user
     *
     * Restricts user activity either in specific channel or globally  Sends events: - user.banned  Required permissions: - BanChannelMember - BanUser 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void banTest() throws ApiException {
        BanRequest banRequest = null;
        Response response = api.ban(banRequest);
        // TODO: test validations
    }

    /**
     * Connect (WebSocket)
     *
     * Establishes WebSocket connection for user  Sends events: - user.updated 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectTest() throws ApiException {
        ConnectRequest json = null;
        api.connect(json);
        // TODO: test validations
    }

    /**
     * Create guest
     *
     * Creates guest user 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGuestTest() throws ApiException {
        GuestRequest guestRequest = null;
        GuestResponse response = api.createGuest(guestRequest);
        // TODO: test validations
    }

    /**
     * Deactivate user
     *
     * Deactivates user with possibility to activate it back  Sends events: - user.deactivated 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateUserTest() throws ApiException {
        String userId = null;
        DeactivateUserRequest deactivateUserRequest = null;
        DeactivateUserResponse response = api.deactivateUser(userId, deactivateUserRequest);
        // TODO: test validations
    }

    /**
     * Deactivate users
     *
     * Deactivate users in batches  Sends events: - user.deactivated 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateUsersTest() throws ApiException {
        DeactivateUsersRequest deactivateUsersRequest = null;
        DeactivateUsersResponse response = api.deactivateUsers(deactivateUsersRequest);
        // TODO: test validations
    }

    /**
     * Delete user
     *
     * Deletes user and optionally all their belongings. The Endpoint is deprecated, please use &#39;Delete Users&#39; endpoint instead  Sends events: - channel.deleted - message.deleted - user.deleted 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String userId = null;
        Boolean markMessagesDeleted = null;
        Boolean hardDelete = null;
        Boolean deleteConversationChannels = null;
        DeleteUserResponse response = api.deleteUser(userId, markMessagesDeleted, hardDelete, deleteConversationChannels);
        // TODO: test validations
    }

    /**
     * Delete Users
     *
     * Deletes users and optionally all their belongings asynchronously.  Sends events: - channel.deleted - user.deleted 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUsersTest() throws ApiException {
        DeleteUsersRequest deleteUsersRequest = null;
        DeleteUsersResponse response = api.deleteUsers(deleteUsersRequest);
        // TODO: test validations
    }

    /**
     * Export users
     *
     * Exports user profile, reactions and messages for list of given users 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportUserTest() throws ApiException {
        ExportUsersRequest exportUsersRequest = null;
        ExportUsersResponse response = api.exportUser(exportUsersRequest);
        // TODO: test validations
    }

    /**
     * Flag
     *
     * Reports message or user for review by moderators  Sends events: - message.flagged - user.flagged  Required permissions: - FlagMessage - FlagUser 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flag_1Test() throws ApiException {
        FlagRequest flagRequest = null;
        FlagResponse response = api.flag_1(flagRequest);
        // TODO: test validations
    }

    /**
     * Long Poll (Transport)
     *
     * WebSocket fallback transport endpoint  Sends events: - user.updated 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void longPollTest() throws ApiException {
        ConnectRequest json = null;
        String connectionId = null;
        api.longPoll(json, connectionId);
        // TODO: test validations
    }

    /**
     * Mute user
     *
     * Mutes one or several users  Sends events: - user.muted  Required permissions: - MuteUser 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void muteUserTest() throws ApiException {
        MuteUserRequest muteUserRequest = null;
        MuteUserResponse response = api.muteUser(muteUserRequest);
        // TODO: test validations
    }

    /**
     * Query Banned Users
     *
     * Find and filter channel scoped or global user bans  Required permissions: - ReadChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryBannedUsersTest() throws ApiException {
        QueryBannedUsersRequest payload = null;
        QueryBannedUsersResponse response = api.queryBannedUsers(payload);
        // TODO: test validations
    }

    /**
     * Query users
     *
     * Find and filter users  Required permissions: - SearchUser 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryUsersTest() throws ApiException {
        QueryUsersRequest payload = null;
        UsersResponse response = api.queryUsers(payload);
        // TODO: test validations
    }

    /**
     * Reactivate user
     *
     * Activates user who&#39;s been deactivated previously  Sends events: - user.reactivated 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactivateUserTest() throws ApiException {
        String userId = null;
        ReactivateUserRequest reactivateUserRequest = null;
        ReactivateUserResponse response = api.reactivateUser(userId, reactivateUserRequest);
        // TODO: test validations
    }

    /**
     * Reactivate users
     *
     * Reactivate users in batches  Sends events: - user.reactivated 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactivateUsersTest() throws ApiException {
        ReactivateUsersRequest reactivateUsersRequest = null;
        ReactivateUsersResponse response = api.reactivateUsers(reactivateUsersRequest);
        // TODO: test validations
    }

    /**
     * Restore users
     *
     * Restore soft deleted users 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restoreUsersTest() throws ApiException {
        RestoreUsersRequest restoreUsersRequest = null;
        Response response = api.restoreUsers(restoreUsersRequest);
        // TODO: test validations
    }

    /**
     * Unban user
     *
     * Removes previously applied ban  Sends events: - user.unbanned  Required permissions: - BanChannelMember - BanUser 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unbanTest() throws ApiException {
        String targetUserId = null;
        String type = null;
        String id = null;
        Response response = api.unban(targetUserId, type, id);
        // TODO: test validations
    }

    /**
     * Unflag
     *
     * Removes previously created user or message flag  Required permissions: - FlagMessage - FlagUser 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unflag_1Test() throws ApiException {
        FlagRequest flagRequest = null;
        FlagResponse response = api.unflag_1(flagRequest);
        // TODO: test validations
    }

    /**
     * Unmute user
     *
     * Unmutes previously muted user  Sends events: - user.unmuted  Required permissions: - MuteUser 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unmuteUserTest() throws ApiException {
        UnmuteUserRequest unmuteUserRequest = null;
        UnmuteResponse response = api.unmuteUser(unmuteUserRequest);
        // TODO: test validations
    }

    /**
     * Upsert users
     *
     * Update or create users in bulk  Sends events: - user.updated 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUsersTest() throws ApiException {
        UpdateUsersRequest updateUsersRequest = null;
        UpdateUsersResponse response = api.updateUsers(updateUsersRequest);
        // TODO: test validations
    }

    /**
     * Partially update user
     *
     * Updates certain fields of the user  Sends events: - user.presence.changed - user.updated 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUsersPartialTest() throws ApiException {
        UpdateUserPartialRequest updateUserPartialRequest = null;
        UpdateUsersResponse response = api.updateUsersPartial(updateUserPartialRequest);
        // TODO: test validations
    }

    /**
     * Export user
     *
     * Exports the user&#39;s profile, reactions and messages. Raises an error if a user has more than 10k messages or reactions 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdExportGetTest() throws ApiException {
        String userId = null;
        ExportUserResponse response = api.usersUserIdExportGet(userId);
        // TODO: test validations
    }

}
