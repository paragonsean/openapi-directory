/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.APIError;
import org.openapitools.client.model.DeactivateUserRequest;
import org.openapitools.client.model.DeactivateUserResponse;
import org.openapitools.client.model.DeactivateUsersRequest;
import org.openapitools.client.model.DeactivateUsersResponse;
import org.openapitools.client.model.DeleteChannelsRequest;
import org.openapitools.client.model.DeleteChannelsResponse;
import org.openapitools.client.model.DeleteUserResponse;
import org.openapitools.client.model.DeleteUsersRequest;
import org.openapitools.client.model.DeleteUsersResponse;
import org.openapitools.client.model.ReactivateUserRequest;
import org.openapitools.client.model.ReactivateUserResponse;
import org.openapitools.client.model.ReactivateUsersRequest;
import org.openapitools.client.model.ReactivateUsersResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GdprApi
 */
@Disabled
public class GdprApiTest {

    private final GdprApi api = new GdprApi();

    /**
     * Deactivate user
     *
     * Deactivates user with possibility to activate it back  Sends events: - user.deactivated 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateUser_0Test() throws ApiException {
        String userId = null;
        DeactivateUserRequest deactivateUserRequest = null;
        DeactivateUserResponse response = api.deactivateUser_0(userId, deactivateUserRequest);
        // TODO: test validations
    }

    /**
     * Deactivate users
     *
     * Deactivate users in batches  Sends events: - user.deactivated 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateUsers_0Test() throws ApiException {
        DeactivateUsersRequest deactivateUsersRequest = null;
        DeactivateUsersResponse response = api.deactivateUsers_0(deactivateUsersRequest);
        // TODO: test validations
    }

    /**
     * Deletes channels asynchronously
     *
     * Allows to delete several channels at once asynchronously  Sends events: - channel.deleted  Required permissions: - DeleteChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChannels_0Test() throws ApiException {
        DeleteChannelsRequest deleteChannelsRequest = null;
        DeleteChannelsResponse response = api.deleteChannels_0(deleteChannelsRequest);
        // TODO: test validations
    }

    /**
     * Delete user
     *
     * Deletes user and optionally all their belongings. The Endpoint is deprecated, please use &#39;Delete Users&#39; endpoint instead  Sends events: - channel.deleted - message.deleted - user.deleted 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUser_0Test() throws ApiException {
        String userId = null;
        Boolean markMessagesDeleted = null;
        Boolean hardDelete = null;
        Boolean deleteConversationChannels = null;
        DeleteUserResponse response = api.deleteUser_0(userId, markMessagesDeleted, hardDelete, deleteConversationChannels);
        // TODO: test validations
    }

    /**
     * Delete Users
     *
     * Deletes users and optionally all their belongings asynchronously.  Sends events: - channel.deleted - user.deleted 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUsers_0Test() throws ApiException {
        DeleteUsersRequest deleteUsersRequest = null;
        DeleteUsersResponse response = api.deleteUsers_0(deleteUsersRequest);
        // TODO: test validations
    }

    /**
     * Reactivate user
     *
     * Activates user who&#39;s been deactivated previously  Sends events: - user.reactivated 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactivateUser_0Test() throws ApiException {
        String userId = null;
        ReactivateUserRequest reactivateUserRequest = null;
        ReactivateUserResponse response = api.reactivateUser_0(userId, reactivateUserRequest);
        // TODO: test validations
    }

    /**
     * Reactivate users
     *
     * Reactivate users in batches  Sends events: - user.reactivated 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactivateUsers_0Test() throws ApiException {
        ReactivateUsersRequest reactivateUsersRequest = null;
        ReactivateUsersResponse response = api.reactivateUsers_0(reactivateUsersRequest);
        // TODO: test validations
    }

}
