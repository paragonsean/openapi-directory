/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.APIError;
import org.openapitools.client.model.CheckPushRequest;
import org.openapitools.client.model.CheckPushResponse;
import org.openapitools.client.model.CheckSQSRequest;
import org.openapitools.client.model.CheckSQSResponse;
import org.openapitools.client.model.CreateBlockListRequest;
import org.openapitools.client.model.CreateChannelTypeRequest;
import org.openapitools.client.model.CreateChannelTypeResponse;
import org.openapitools.client.model.GetApplicationResponse;
import org.openapitools.client.model.GetBlockListResponse;
import org.openapitools.client.model.GetRateLimitsResponse;
import org.openapitools.client.model.ListBlockListResponse;
import org.openapitools.client.model.ListChannelTypesResponse;
import org.openapitools.client.model.ListPushProvidersResponse;
import org.openapitools.client.model.Response;
import org.openapitools.client.model.UpdateAppRequest;
import org.openapitools.client.model.UpdateBlockListRequest;
import org.openapitools.client.model.UpdateChannelTypeRequest;
import org.openapitools.client.model.UpdateChannelTypeResponse;
import org.openapitools.client.model.UpsertPushProviderRequest;
import org.openapitools.client.model.UpsertPushProviderResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SettingsApi
 */
@Disabled
public class SettingsApiTest {

    private final SettingsApi api = new SettingsApi();

    /**
     * Check push
     *
     * Sends a test message via push, this is a test endpoint to verify your push settings 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkPushTest() throws ApiException {
        CheckPushRequest checkPushRequest = null;
        CheckPushResponse response = api.checkPush(checkPushRequest);
        // TODO: test validations
    }

    /**
     * Check SQS
     *
     * Validates Amazon SQS credentials 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkSQSTest() throws ApiException {
        CheckSQSRequest checkSQSRequest = null;
        CheckSQSResponse response = api.checkSQS(checkSQSRequest);
        // TODO: test validations
    }

    /**
     * Create block list
     *
     * Creates a new application blocklist, once created the blocklist can be used by any channel type 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBlockListTest() throws ApiException {
        CreateBlockListRequest createBlockListRequest = null;
        Response response = api.createBlockList(createBlockListRequest);
        // TODO: test validations
    }

    /**
     * Create channel type
     *
     * Creates new channel type 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChannelTypeTest() throws ApiException {
        CreateChannelTypeRequest createChannelTypeRequest = null;
        CreateChannelTypeResponse response = api.createChannelType(createChannelTypeRequest);
        // TODO: test validations
    }

    /**
     * Delete block list
     *
     * Deletes previously created application blocklist 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBlockListTest() throws ApiException {
        String name = null;
        Response response = api.deleteBlockList(name);
        // TODO: test validations
    }

    /**
     * Delete channel type
     *
     * Deletes channel type 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChannelTypeTest() throws ApiException {
        String name = null;
        Response response = api.deleteChannelType(name);
        // TODO: test validations
    }

    /**
     * Delete a push provider
     *
     * Delete a push provider from v2 with multi bundle/package support. v1 isn&#39;t supported in this endpoint 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePushProvider_0Test() throws ApiException {
        String type = null;
        String name = null;
        Response response = api.deletePushProvider_0(type, name);
        // TODO: test validations
    }

    /**
     * Get App Settings
     *
     * This method returns the application settings 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppTest() throws ApiException {
        GetApplicationResponse response = api.getApp();
        // TODO: test validations
    }

    /**
     * Get block list
     *
     * Returns block list by given name 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBlockListTest() throws ApiException {
        String name = null;
        GetBlockListResponse response = api.getBlockList(name);
        // TODO: test validations
    }

    /**
     * Get channel type
     *
     * Gets channel type 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChannelTypeTest() throws ApiException {
        String name = null;
        Response response = api.getChannelType(name);
        // TODO: test validations
    }

    /**
     * Get rate limits
     *
     * Get rate limits usage and quotas 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRateLimitsTest() throws ApiException {
        Boolean serverSide = null;
        Boolean android = null;
        Boolean ios = null;
        Boolean web = null;
        String endpoints = null;
        GetRateLimitsResponse response = api.getRateLimits(serverSide, android, ios, web, endpoints);
        // TODO: test validations
    }

    /**
     * List block lists
     *
     * Returns all available block lists 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBlockListsTest() throws ApiException {
        ListBlockListResponse response = api.listBlockLists();
        // TODO: test validations
    }

    /**
     * List channel types
     *
     * Lists all available channel types 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChannelTypesTest() throws ApiException {
        ListChannelTypesResponse response = api.listChannelTypes();
        // TODO: test validations
    }

    /**
     * List push providers
     *
     * List details of all push providers. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPushProviders_0Test() throws ApiException {
        ListPushProvidersResponse response = api.listPushProviders_0();
        // TODO: test validations
    }

    /**
     * Update App Settings
     *
     * This method updates one or more application settings 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAppTest() throws ApiException {
        UpdateAppRequest updateAppRequest = null;
        Response response = api.updateApp(updateAppRequest);
        // TODO: test validations
    }

    /**
     * Update block list
     *
     * Updates contents of the block list 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBlockListTest() throws ApiException {
        String name = null;
        UpdateBlockListRequest updateBlockListRequest = null;
        Response response = api.updateBlockList(name, updateBlockListRequest);
        // TODO: test validations
    }

    /**
     * Update channel type
     *
     * Updates channel type 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChannelTypeTest() throws ApiException {
        String name = null;
        UpdateChannelTypeRequest updateChannelTypeRequest = null;
        UpdateChannelTypeResponse response = api.updateChannelType(name, updateChannelTypeRequest);
        // TODO: test validations
    }

    /**
     * Upsert a push provider
     *
     * Upsert a push provider for v2 with multi bundle/package support 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void upsertPushProvider_0Test() throws ApiException {
        UpsertPushProviderRequest upsertPushProviderRequest = null;
        UpsertPushProviderResponse response = api.upsertPushProvider_0(upsertPushProviderRequest);
        // TODO: test validations
    }

}
