/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.APIError;
import org.openapitools.client.model.BanRequest;
import org.openapitools.client.model.CreateBlockListRequest;
import org.openapitools.client.model.DeactivateUserRequest;
import org.openapitools.client.model.DeactivateUserResponse;
import org.openapitools.client.model.DeactivateUsersRequest;
import org.openapitools.client.model.DeactivateUsersResponse;
import org.openapitools.client.model.DeleteUserResponse;
import org.openapitools.client.model.DeleteUsersRequest;
import org.openapitools.client.model.DeleteUsersResponse;
import org.openapitools.client.model.FlagRequest;
import org.openapitools.client.model.FlagResponse;
import org.openapitools.client.model.GetBlockListResponse;
import org.openapitools.client.model.ListBlockListResponse;
import org.openapitools.client.model.MuteUserRequest;
import org.openapitools.client.model.MuteUserResponse;
import org.openapitools.client.model.QueryBannedUsersRequest;
import org.openapitools.client.model.QueryBannedUsersResponse;
import org.openapitools.client.model.QueryMessageFlagsRequest;
import org.openapitools.client.model.QueryMessageFlagsResponse;
import org.openapitools.client.model.ReactivateUserRequest;
import org.openapitools.client.model.ReactivateUserResponse;
import org.openapitools.client.model.ReactivateUsersRequest;
import org.openapitools.client.model.ReactivateUsersResponse;
import org.openapitools.client.model.Response;
import org.openapitools.client.model.UnmuteResponse;
import org.openapitools.client.model.UnmuteUserRequest;
import org.openapitools.client.model.UpdateBlockListRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ModerationApi
 */
@Disabled
public class ModerationApiTest {

    private final ModerationApi api = new ModerationApi();

    /**
     * Ban user
     *
     * Restricts user activity either in specific channel or globally  Sends events: - user.banned  Required permissions: - BanChannelMember - BanUser 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ban_0Test() throws ApiException {
        BanRequest banRequest = null;
        Response response = api.ban_0(banRequest);
        // TODO: test validations
    }

    /**
     * Create block list
     *
     * Creates a new application blocklist, once created the blocklist can be used by any channel type 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBlockList_0Test() throws ApiException {
        CreateBlockListRequest createBlockListRequest = null;
        Response response = api.createBlockList_0(createBlockListRequest);
        // TODO: test validations
    }

    /**
     * Deactivate user
     *
     * Deactivates user with possibility to activate it back  Sends events: - user.deactivated 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateUser_1Test() throws ApiException {
        String userId = null;
        DeactivateUserRequest deactivateUserRequest = null;
        DeactivateUserResponse response = api.deactivateUser_1(userId, deactivateUserRequest);
        // TODO: test validations
    }

    /**
     * Deactivate users
     *
     * Deactivate users in batches  Sends events: - user.deactivated 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deactivateUsers_1Test() throws ApiException {
        DeactivateUsersRequest deactivateUsersRequest = null;
        DeactivateUsersResponse response = api.deactivateUsers_1(deactivateUsersRequest);
        // TODO: test validations
    }

    /**
     * Delete block list
     *
     * Deletes previously created application blocklist 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBlockList_0Test() throws ApiException {
        String name = null;
        Response response = api.deleteBlockList_0(name);
        // TODO: test validations
    }

    /**
     * Delete user
     *
     * Deletes user and optionally all their belongings. The Endpoint is deprecated, please use &#39;Delete Users&#39; endpoint instead  Sends events: - channel.deleted - message.deleted - user.deleted 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUser_1Test() throws ApiException {
        String userId = null;
        Boolean markMessagesDeleted = null;
        Boolean hardDelete = null;
        Boolean deleteConversationChannels = null;
        DeleteUserResponse response = api.deleteUser_1(userId, markMessagesDeleted, hardDelete, deleteConversationChannels);
        // TODO: test validations
    }

    /**
     * Delete Users
     *
     * Deletes users and optionally all their belongings asynchronously.  Sends events: - channel.deleted - user.deleted 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUsers_1Test() throws ApiException {
        DeleteUsersRequest deleteUsersRequest = null;
        DeleteUsersResponse response = api.deleteUsers_1(deleteUsersRequest);
        // TODO: test validations
    }

    /**
     * Flag
     *
     * Reports message or user for review by moderators  Sends events: - message.flagged - user.flagged  Required permissions: - FlagMessage - FlagUser 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flagTest() throws ApiException {
        FlagRequest flagRequest = null;
        FlagResponse response = api.flag(flagRequest);
        // TODO: test validations
    }

    /**
     * Get block list
     *
     * Returns block list by given name 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBlockList_0Test() throws ApiException {
        String name = null;
        GetBlockListResponse response = api.getBlockList_0(name);
        // TODO: test validations
    }

    /**
     * List block lists
     *
     * Returns all available block lists 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBlockLists_0Test() throws ApiException {
        ListBlockListResponse response = api.listBlockLists_0();
        // TODO: test validations
    }

    /**
     * Mute user
     *
     * Mutes one or several users  Sends events: - user.muted  Required permissions: - MuteUser 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void muteUser_0Test() throws ApiException {
        MuteUserRequest muteUserRequest = null;
        MuteUserResponse response = api.muteUser_0(muteUserRequest);
        // TODO: test validations
    }

    /**
     * Query Banned Users
     *
     * Find and filter channel scoped or global user bans  Required permissions: - ReadChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryBannedUsers_0Test() throws ApiException {
        QueryBannedUsersRequest payload = null;
        QueryBannedUsersResponse response = api.queryBannedUsers_0(payload);
        // TODO: test validations
    }

    /**
     * Query Message Flags
     *
     * Find and filter message flags  Required permissions: - ReadMessageFlags 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryMessageFlags_0Test() throws ApiException {
        QueryMessageFlagsRequest payload = null;
        QueryMessageFlagsResponse response = api.queryMessageFlags_0(payload);
        // TODO: test validations
    }

    /**
     * Reactivate user
     *
     * Activates user who&#39;s been deactivated previously  Sends events: - user.reactivated 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactivateUser_1Test() throws ApiException {
        String userId = null;
        ReactivateUserRequest reactivateUserRequest = null;
        ReactivateUserResponse response = api.reactivateUser_1(userId, reactivateUserRequest);
        // TODO: test validations
    }

    /**
     * Reactivate users
     *
     * Reactivate users in batches  Sends events: - user.reactivated 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reactivateUsers_1Test() throws ApiException {
        ReactivateUsersRequest reactivateUsersRequest = null;
        ReactivateUsersResponse response = api.reactivateUsers_1(reactivateUsersRequest);
        // TODO: test validations
    }

    /**
     * Unban user
     *
     * Removes previously applied ban  Sends events: - user.unbanned  Required permissions: - BanChannelMember - BanUser 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unban_0Test() throws ApiException {
        String targetUserId = null;
        String type = null;
        String id = null;
        Response response = api.unban_0(targetUserId, type, id);
        // TODO: test validations
    }

    /**
     * Unflag
     *
     * Removes previously created user or message flag  Required permissions: - FlagMessage - FlagUser 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unflagTest() throws ApiException {
        FlagRequest flagRequest = null;
        FlagResponse response = api.unflag(flagRequest);
        // TODO: test validations
    }

    /**
     * Unmute user
     *
     * Unmutes previously muted user  Sends events: - user.unmuted  Required permissions: - MuteUser 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unmuteUser_0Test() throws ApiException {
        UnmuteUserRequest unmuteUserRequest = null;
        UnmuteResponse response = api.unmuteUser_0(unmuteUserRequest);
        // TODO: test validations
    }

    /**
     * Update block list
     *
     * Updates contents of the block list 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateBlockList_0Test() throws ApiException {
        String name = null;
        UpdateBlockListRequest updateBlockListRequest = null;
        Response response = api.updateBlockList_0(name, updateBlockListRequest);
        // TODO: test validations
    }

}
