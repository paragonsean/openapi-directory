/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.APIError;
import org.openapitools.client.model.ChannelGetOrCreateRequest;
import org.openapitools.client.model.ChannelStateResponse;
import org.openapitools.client.model.ChannelStopWatchingRequest;
import org.openapitools.client.model.ChannelsResponse;
import org.openapitools.client.model.DeleteChannelResponse;
import org.openapitools.client.model.DeleteChannelsRequest;
import org.openapitools.client.model.DeleteChannelsResponse;
import org.openapitools.client.model.ExportChannelsRequest;
import org.openapitools.client.model.ExportChannelsResponse;
import org.openapitools.client.model.GetExportChannelsStatusResponse;
import org.openapitools.client.model.HideChannelRequest;
import org.openapitools.client.model.HideChannelResponse;
import org.openapitools.client.model.MarkChannelsReadRequest;
import org.openapitools.client.model.MarkReadRequest;
import org.openapitools.client.model.MarkReadResponse;
import org.openapitools.client.model.MarkUnreadRequest;
import org.openapitools.client.model.MembersResponse;
import org.openapitools.client.model.MuteChannelRequest;
import org.openapitools.client.model.MuteChannelResponse;
import org.openapitools.client.model.QueryChannelsRequest;
import org.openapitools.client.model.QueryMembersRequest;
import org.openapitools.client.model.Response;
import org.openapitools.client.model.SearchRequest;
import org.openapitools.client.model.SearchResponse;
import org.openapitools.client.model.ShowChannelRequest;
import org.openapitools.client.model.ShowChannelResponse;
import org.openapitools.client.model.StopWatchingResponse;
import org.openapitools.client.model.SyncRequest;
import org.openapitools.client.model.SyncResponse;
import org.openapitools.client.model.TruncateChannelRequest;
import org.openapitools.client.model.TruncateChannelResponse;
import org.openapitools.client.model.UnmuteChannelRequest;
import org.openapitools.client.model.UnmuteResponse;
import org.openapitools.client.model.UpdateChannelPartialRequest;
import org.openapitools.client.model.UpdateChannelPartialResponse;
import org.openapitools.client.model.UpdateChannelRequest;
import org.openapitools.client.model.UpdateChannelResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ChannelsApi
 */
@Disabled
public class ChannelsApiTest {

    private final ChannelsApi api = new ChannelsApi();

    /**
     * Delete channel
     *
     * Deletes channel  Sends events: - channel.deleted  Required permissions: - DeleteChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChannelTest() throws ApiException {
        String type = null;
        String id = null;
        Boolean hardDelete = null;
        DeleteChannelResponse response = api.deleteChannel(type, id, hardDelete);
        // TODO: test validations
    }

    /**
     * Deletes channels asynchronously
     *
     * Allows to delete several channels at once asynchronously  Sends events: - channel.deleted  Required permissions: - DeleteChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteChannelsTest() throws ApiException {
        DeleteChannelsRequest deleteChannelsRequest = null;
        DeleteChannelsResponse response = api.deleteChannels(deleteChannelsRequest);
        // TODO: test validations
    }

    /**
     * Export channels
     *
     * Exports channel data to JSON file 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportChannelsTest() throws ApiException {
        ExportChannelsRequest exportChannelsRequest = null;
        ExportChannelsResponse response = api.exportChannels(exportChannelsRequest);
        // TODO: test validations
    }

    /**
     * Export channels status
     *
     *  
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getExportChannelsStatusTest() throws ApiException {
        String id = null;
        GetExportChannelsStatusResponse response = api.getExportChannelsStatus(id);
        // TODO: test validations
    }

    /**
     * Get or create channel (type)
     *
     * This method creates a channel or returns an existing one with matching attributes  Sends events: - channel.created - member.added - member.removed - member.updated - user.watching.start 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrCreateChannelType1Test() throws ApiException {
        String type = null;
        ChannelGetOrCreateRequest channelGetOrCreateRequest = null;
        String clientId = null;
        String connectionId = null;
        ChannelStateResponse response = api.getOrCreateChannelType1(type, channelGetOrCreateRequest, clientId, connectionId);
        // TODO: test validations
    }

    /**
     * Get or create channel (type, id)
     *
     * This method creates a channel or returns an existing one with matching attributes  Sends events: - channel.created - member.added - member.removed - member.updated - user.watching.start 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrCreateChannelTypeId0Test() throws ApiException {
        String type = null;
        String id = null;
        ChannelGetOrCreateRequest channelGetOrCreateRequest = null;
        String clientId = null;
        String connectionId = null;
        ChannelStateResponse response = api.getOrCreateChannelTypeId0(type, id, channelGetOrCreateRequest, clientId, connectionId);
        // TODO: test validations
    }

    /**
     * Hide channel
     *
     * Marks channel as hidden for current user  Sends events: - channel.hidden  Required permissions: - ReadChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hideChannelTest() throws ApiException {
        String type = null;
        String id = null;
        HideChannelRequest hideChannelRequest = null;
        HideChannelResponse response = api.hideChannel(type, id, hideChannelRequest);
        // TODO: test validations
    }

    /**
     * Mark channels as read
     *
     * Marks channels as read up to the specific message. If no channels is given, mark all channel as read  Sends events: - message.read  Required permissions: - ReadChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markChannelsReadTest() throws ApiException {
        MarkChannelsReadRequest markChannelsReadRequest = null;
        MarkReadResponse response = api.markChannelsRead(markChannelsReadRequest);
        // TODO: test validations
    }

    /**
     * Mark read
     *
     * Marks channel as read up to the specific message  Sends events: - message.read  Required permissions: - ReadChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markReadTest() throws ApiException {
        String type = null;
        String id = null;
        MarkReadRequest markReadRequest = null;
        MarkReadResponse response = api.markRead(type, id, markReadRequest);
        // TODO: test validations
    }

    /**
     * Mark unread
     *
     * Marks channel as unread from a specific message  Required permissions: - ReadChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markUnreadTest() throws ApiException {
        String type = null;
        String id = null;
        MarkUnreadRequest markUnreadRequest = null;
        Response response = api.markUnread(type, id, markUnreadRequest);
        // TODO: test validations
    }

    /**
     * Mute channel
     *
     * Mutes channel for user  Sends events: - channel.muted  Required permissions: - MuteChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void muteChannelTest() throws ApiException {
        MuteChannelRequest muteChannelRequest = null;
        MuteChannelResponse response = api.muteChannel(muteChannelRequest);
        // TODO: test validations
    }

    /**
     * Query channels
     *
     * Query channels with filter query  Required permissions: - ReadChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryChannelsTest() throws ApiException {
        QueryChannelsRequest queryChannelsRequest = null;
        String clientId = null;
        String connectionId = null;
        ChannelsResponse response = api.queryChannels(queryChannelsRequest, clientId, connectionId);
        // TODO: test validations
    }

    /**
     * Query members
     *
     * Find and filter channel members  Required permissions: - ReadChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryMembersTest() throws ApiException {
        QueryMembersRequest payload = null;
        MembersResponse response = api.queryMembers(payload);
        // TODO: test validations
    }

    /**
     * Search messages
     *
     * Search messages across channels  Required permissions: - ReadChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchTest() throws ApiException {
        SearchRequest payload = null;
        SearchResponse response = api.search(payload);
        // TODO: test validations
    }

    /**
     * Show channel
     *
     * Shows previously hidden channel  Sends events: - channel.visible 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void showChannelTest() throws ApiException {
        String type = null;
        String id = null;
        ShowChannelRequest showChannelRequest = null;
        ShowChannelResponse response = api.showChannel(type, id, showChannelRequest);
        // TODO: test validations
    }

    /**
     * Stop watching channel
     *
     * Call this method to stop receiving channel events  Sends events: - user.watching.stop 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopWatchingChannelTest() throws ApiException {
        String type = null;
        String id = null;
        ChannelStopWatchingRequest channelStopWatchingRequest = null;
        String clientId = null;
        String connectionId = null;
        StopWatchingResponse response = api.stopWatchingChannel(type, id, channelStopWatchingRequest, clientId, connectionId);
        // TODO: test validations
    }

    /**
     * Sync
     *
     * Returns all events happened since client disconnect in specified channels  Required permissions: - ReadChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncTest() throws ApiException {
        SyncRequest syncRequest = null;
        Boolean withInaccessibleCids = null;
        Boolean watch = null;
        String clientId = null;
        String connectionId = null;
        SyncResponse response = api.sync(syncRequest, withInaccessibleCids, watch, clientId, connectionId);
        // TODO: test validations
    }

    /**
     * Truncate channel
     *
     * Truncates channel  Sends events: - channel.truncated  Required permissions: - DeleteChannel - TruncateChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void truncateChannelTest() throws ApiException {
        String type = null;
        String id = null;
        TruncateChannelRequest truncateChannelRequest = null;
        TruncateChannelResponse response = api.truncateChannel(type, id, truncateChannelRequest);
        // TODO: test validations
    }

    /**
     * Unmute channel
     *
     * Unmutes channel for user  Sends events: - channel.unmuted  Required permissions: - MuteChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unmuteChannelTest() throws ApiException {
        UnmuteChannelRequest unmuteChannelRequest = null;
        UnmuteResponse response = api.unmuteChannel(unmuteChannelRequest);
        // TODO: test validations
    }

    /**
     * Update channel
     *
     * Change channel data  Sends events: - channel.updated - member.added - member.removed - member.updated - message.new  Required permissions: - AddOwnChannelMembership - RemoveOwnChannelMembership - UpdateChannel - UpdateChannelCooldown - UpdateChannelFrozen - UpdateChannelMembers 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChannelTest() throws ApiException {
        String type = null;
        String id = null;
        UpdateChannelRequest updateChannelRequest = null;
        UpdateChannelResponse response = api.updateChannel(type, id, updateChannelRequest);
        // TODO: test validations
    }

    /**
     * Partially update channel
     *
     * Updates certain fields of the channel  Sends events: - channel.updated  Required permissions: - UpdateChannel - UpdateChannelCooldown - UpdateChannelFrozen 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateChannelPartialTest() throws ApiException {
        String type = null;
        String id = null;
        UpdateChannelPartialRequest updateChannelPartialRequest = null;
        UpdateChannelPartialResponse response = api.updateChannelPartial(type, id, updateChannelPartialRequest);
        // TODO: test validations
    }

}
