/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.APIError;
import org.openapitools.client.model.FileDeleteResponse;
import org.openapitools.client.model.FileUploadResponse;
import org.openapitools.client.model.FlagRequest;
import org.openapitools.client.model.FlagResponse;
import org.openapitools.client.model.GetManyMessagesResponse;
import org.openapitools.client.model.GetOGResponse;
import org.openapitools.client.model.GetReactionsResponse;
import org.openapitools.client.model.GetRepliesResponse;
import org.openapitools.client.model.ImageSizeRequest;
import org.openapitools.client.model.ImageUploadResponse;
import org.openapitools.client.model.MarkChannelsReadRequest;
import org.openapitools.client.model.MarkReadRequest;
import org.openapitools.client.model.MarkReadResponse;
import org.openapitools.client.model.MarkUnreadRequest;
import org.openapitools.client.model.MessageActionRequest;
import org.openapitools.client.model.MessageResponse;
import org.openapitools.client.model.MessageWithPendingMetadataResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.OnlyUserIDRequest;
import org.openapitools.client.model.QueryMessageFlagsRequest;
import org.openapitools.client.model.QueryMessageFlagsResponse;
import org.openapitools.client.model.ReactionRemovalResponse;
import org.openapitools.client.model.ReactionResponse;
import org.openapitools.client.model.Response;
import org.openapitools.client.model.SearchRequest;
import org.openapitools.client.model.SearchResponse;
import org.openapitools.client.model.SendMessageRequest;
import org.openapitools.client.model.SendReactionRequest;
import org.openapitools.client.model.TranslateMessageRequest;
import org.openapitools.client.model.UpdateMessagePartialRequest;
import org.openapitools.client.model.UpdateMessageRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessagesApi
 */
@Disabled
public class MessagesApiTest {

    private final MessagesApi api = new MessagesApi();

    /**
     * Delete file
     *
     * Deletes previously uploaded file  Required permissions: - DeleteAttachment 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFileTest() throws ApiException {
        String type = null;
        String id = null;
        String url = null;
        FileDeleteResponse response = api.deleteFile(type, id, url);
        // TODO: test validations
    }

    /**
     * Delete image
     *
     * Deletes previously uploaded image  Required permissions: - DeleteAttachment 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteImageTest() throws ApiException {
        String type = null;
        String id = null;
        String url = null;
        FileDeleteResponse response = api.deleteImage(type, id, url);
        // TODO: test validations
    }

    /**
     * Delete message
     *
     * Deletes message  Sends events: - message.deleted  Required permissions: - DeleteMessage 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMessageTest() throws ApiException {
        String id = null;
        Boolean hard = null;
        MessageResponse response = api.deleteMessage(id, hard);
        // TODO: test validations
    }

    /**
     * Delete reaction
     *
     * Removes user reaction from the message  Sends events: - reaction.deleted  Required permissions: - DeleteReaction 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReactionTest() throws ApiException {
        String id = null;
        String type = null;
        String userId = null;
        ReactionRemovalResponse response = api.deleteReaction(id, type, userId);
        // TODO: test validations
    }

    /**
     * Flag
     *
     * Reports message or user for review by moderators  Sends events: - message.flagged - user.flagged  Required permissions: - FlagMessage - FlagUser 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flag_0Test() throws ApiException {
        FlagRequest flagRequest = null;
        FlagResponse response = api.flag_0(flagRequest);
        // TODO: test validations
    }

    /**
     * Get many messages
     *
     * Returns list messages found by IDs  Required permissions: - ReadChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getManyMessagesTest() throws ApiException {
        String type = null;
        String id = null;
        List<String> ids = null;
        GetManyMessagesResponse response = api.getManyMessages(type, id, ids);
        // TODO: test validations
    }

    /**
     * Get message
     *
     * Returns message by ID  Required permissions: - ReadChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMessageTest() throws ApiException {
        String id = null;
        MessageWithPendingMetadataResponse response = api.getMessage(id);
        // TODO: test validations
    }

    /**
     * Get OG
     *
     * Get an OpenGraph attachment for a link 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOGTest() throws ApiException {
        String url = null;
        GetOGResponse response = api.getOG(url);
        // TODO: test validations
    }

    /**
     * Get reactions
     *
     * Returns list of reactions of specific message  Required permissions: - ReadChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReactionsTest() throws ApiException {
        String id = null;
        Integer limit = null;
        Integer offset = null;
        GetReactionsResponse response = api.getReactions(id, limit, offset);
        // TODO: test validations
    }

    /**
     * Get replies
     *
     * Returns replies (thread) of the message  Required permissions: - ReadChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepliesTest() throws ApiException {
        String parentId = null;
        String idGte = null;
        String idGt = null;
        String idLte = null;
        String idLt = null;
        OffsetDateTime createdAtAfterOrEqual = null;
        OffsetDateTime createdAtAfter = null;
        OffsetDateTime createdAtBeforeOrEqual = null;
        OffsetDateTime createdAtBefore = null;
        String idAround = null;
        OffsetDateTime createdAtAround = null;
        GetRepliesResponse response = api.getReplies(parentId, idGte, idGt, idLte, idLt, createdAtAfterOrEqual, createdAtAfter, createdAtBeforeOrEqual, createdAtBefore, idAround, createdAtAround);
        // TODO: test validations
    }

    /**
     * Mark channels as read
     *
     * Marks channels as read up to the specific message. If no channels is given, mark all channel as read  Sends events: - message.read  Required permissions: - ReadChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markChannelsRead_0Test() throws ApiException {
        MarkChannelsReadRequest markChannelsReadRequest = null;
        MarkReadResponse response = api.markChannelsRead_0(markChannelsReadRequest);
        // TODO: test validations
    }

    /**
     * Mark read
     *
     * Marks channel as read up to the specific message  Sends events: - message.read  Required permissions: - ReadChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markRead_0Test() throws ApiException {
        String type = null;
        String id = null;
        MarkReadRequest markReadRequest = null;
        MarkReadResponse response = api.markRead_0(type, id, markReadRequest);
        // TODO: test validations
    }

    /**
     * Mark unread
     *
     * Marks channel as unread from a specific message  Required permissions: - ReadChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markUnread_0Test() throws ApiException {
        String type = null;
        String id = null;
        MarkUnreadRequest markUnreadRequest = null;
        Response response = api.markUnread_0(type, id, markUnreadRequest);
        // TODO: test validations
    }

    /**
     * Query Message Flags
     *
     * Find and filter message flags  Required permissions: - ReadMessageFlags 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryMessageFlagsTest() throws ApiException {
        QueryMessageFlagsRequest payload = null;
        QueryMessageFlagsResponse response = api.queryMessageFlags(payload);
        // TODO: test validations
    }

    /**
     * Run message command action
     *
     * Executes message command action with given parameters  Sends events: - message.new  Required permissions: - RunMessageAction 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void runMessageActionTest() throws ApiException {
        String id = null;
        MessageActionRequest messageActionRequest = null;
        MessageResponse response = api.runMessageAction(id, messageActionRequest);
        // TODO: test validations
    }

    /**
     * Search messages
     *
     * Search messages across channels  Required permissions: - ReadChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void search_0Test() throws ApiException {
        SearchRequest payload = null;
        SearchResponse response = api.search_0(payload);
        // TODO: test validations
    }

    /**
     * Send new message
     *
     * Sends new message to the specified channel  Sends events: - message.new - message.updated  Required permissions: - AddLinks - CreateMessage - PinMessage - SkipChannelCooldown - SkipMessageModeration - UseFrozenChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendMessageTest() throws ApiException {
        String type = null;
        String id = null;
        SendMessageRequest sendMessageRequest = null;
        MessageWithPendingMetadataResponse response = api.sendMessage(type, id, sendMessageRequest);
        // TODO: test validations
    }

    /**
     * Send reaction
     *
     * Sends reaction to specified message  Sends events: - reaction.new - reaction.updated  Required permissions: - CreateReaction - UseFrozenChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendReactionTest() throws ApiException {
        String id = null;
        SendReactionRequest sendReactionRequest = null;
        ReactionResponse response = api.sendReaction(id, sendReactionRequest);
        // TODO: test validations
    }

    /**
     * Translate message
     *
     * Translates message to a given language using automated translation software  Sends events: - message.updated  Required permissions: - ReadChannel 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void translateMessageTest() throws ApiException {
        String id = null;
        TranslateMessageRequest translateMessageRequest = null;
        MessageResponse response = api.translateMessage(id, translateMessageRequest);
        // TODO: test validations
    }

    /**
     * Unflag
     *
     * Removes previously created user or message flag  Required permissions: - FlagMessage - FlagUser 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unflag_0Test() throws ApiException {
        FlagRequest flagRequest = null;
        FlagResponse response = api.unflag_0(flagRequest);
        // TODO: test validations
    }

    /**
     * Update message
     *
     * Updates message with new data  Sends events: - message.updated  Required permissions: - AddLinks - PinMessage - SkipMessageModeration - UpdateMessage 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMessageTest() throws ApiException {
        String id = null;
        UpdateMessageRequest updateMessageRequest = null;
        MessageResponse response = api.updateMessage(id, updateMessageRequest);
        // TODO: test validations
    }

    /**
     * Partially message update
     *
     * Updates certain fields of the message  Sends events: - message.updated  Required permissions: - AddLinks - PinMessage - SkipMessageModeration - UpdateMessage 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMessagePartialTest() throws ApiException {
        String id = null;
        UpdateMessagePartialRequest updateMessagePartialRequest = null;
        MessageResponse response = api.updateMessagePartial(id, updateMessagePartialRequest);
        // TODO: test validations
    }

    /**
     * Upload file
     *
     * Uploads file  Required permissions: - UploadAttachment 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadFileTest() throws ApiException {
        String type = null;
        String id = null;
        String _file = null;
        OnlyUserIDRequest user = null;
        FileUploadResponse response = api.uploadFile(type, id, _file, user);
        // TODO: test validations
    }

    /**
     * Upload image
     *
     * Uploads image  Required permissions: - UploadAttachment 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadImageTest() throws ApiException {
        String type = null;
        String id = null;
        String _file = null;
        List<ImageSizeRequest> uploadSizes = null;
        OnlyUserIDRequest user = null;
        ImageUploadResponse response = api.uploadImage(type, id, _file, uploadSizes, user);
        // TODO: test validations
    }

}
