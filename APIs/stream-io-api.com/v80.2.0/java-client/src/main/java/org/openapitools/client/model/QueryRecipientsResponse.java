/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Campaign;
import org.openapitools.client.model.Channel;
import org.openapitools.client.model.Recipient;
import org.openapitools.client.model.Segment;
import org.openapitools.client.model.UserObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QueryRecipientsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryRecipientsResponse {
  public static final String SERIALIZED_NAME_CAMPAIGNS = "campaigns";
  @SerializedName(SERIALIZED_NAME_CAMPAIGNS)
  private Map<String, Campaign> campaigns = new HashMap<>();

  public static final String SERIALIZED_NAME_CHANNELS = "channels";
  @SerializedName(SERIALIZED_NAME_CHANNELS)
  private Map<String, Channel> channels = new HashMap<>();

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<Recipient> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEGMENTS = "segments";
  @SerializedName(SERIALIZED_NAME_SEGMENTS)
  private Map<String, Segment> segments = new HashMap<>();

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private Map<String, UserObject> users = new HashMap<>();

  public QueryRecipientsResponse() {
  }

  public QueryRecipientsResponse campaigns(Map<String, Campaign> campaigns) {
    this.campaigns = campaigns;
    return this;
  }

  public QueryRecipientsResponse putCampaignsItem(String key, Campaign campaignsItem) {
    if (this.campaigns == null) {
      this.campaigns = new HashMap<>();
    }
    this.campaigns.put(key, campaignsItem);
    return this;
  }

  /**
   * Get campaigns
   * @return campaigns
   */
  @javax.annotation.Nonnull
  public Map<String, Campaign> getCampaigns() {
    return campaigns;
  }

  public void setCampaigns(Map<String, Campaign> campaigns) {
    this.campaigns = campaigns;
  }


  public QueryRecipientsResponse channels(Map<String, Channel> channels) {
    this.channels = channels;
    return this;
  }

  public QueryRecipientsResponse putChannelsItem(String key, Channel channelsItem) {
    if (this.channels == null) {
      this.channels = new HashMap<>();
    }
    this.channels.put(key, channelsItem);
    return this;
  }

  /**
   * Get channels
   * @return channels
   */
  @javax.annotation.Nonnull
  public Map<String, Channel> getChannels() {
    return channels;
  }

  public void setChannels(Map<String, Channel> channels) {
    this.channels = channels;
  }


  public QueryRecipientsResponse duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Duration of the request in human-readable format
   * @return duration
   */
  @javax.annotation.Nonnull
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public QueryRecipientsResponse recipients(List<Recipient> recipients) {
    this.recipients = recipients;
    return this;
  }

  public QueryRecipientsResponse addRecipientsItem(Recipient recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

  /**
   * Get recipients
   * @return recipients
   */
  @javax.annotation.Nonnull
  public List<Recipient> getRecipients() {
    return recipients;
  }

  public void setRecipients(List<Recipient> recipients) {
    this.recipients = recipients;
  }


  public QueryRecipientsResponse segments(Map<String, Segment> segments) {
    this.segments = segments;
    return this;
  }

  public QueryRecipientsResponse putSegmentsItem(String key, Segment segmentsItem) {
    if (this.segments == null) {
      this.segments = new HashMap<>();
    }
    this.segments.put(key, segmentsItem);
    return this;
  }

  /**
   * Get segments
   * @return segments
   */
  @javax.annotation.Nonnull
  public Map<String, Segment> getSegments() {
    return segments;
  }

  public void setSegments(Map<String, Segment> segments) {
    this.segments = segments;
  }


  public QueryRecipientsResponse users(Map<String, UserObject> users) {
    this.users = users;
    return this;
  }

  public QueryRecipientsResponse putUsersItem(String key, UserObject usersItem) {
    if (this.users == null) {
      this.users = new HashMap<>();
    }
    this.users.put(key, usersItem);
    return this;
  }

  /**
   * Get users
   * @return users
   */
  @javax.annotation.Nonnull
  public Map<String, UserObject> getUsers() {
    return users;
  }

  public void setUsers(Map<String, UserObject> users) {
    this.users = users;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryRecipientsResponse queryRecipientsResponse = (QueryRecipientsResponse) o;
    return Objects.equals(this.campaigns, queryRecipientsResponse.campaigns) &&
        Objects.equals(this.channels, queryRecipientsResponse.channels) &&
        Objects.equals(this.duration, queryRecipientsResponse.duration) &&
        Objects.equals(this.recipients, queryRecipientsResponse.recipients) &&
        Objects.equals(this.segments, queryRecipientsResponse.segments) &&
        Objects.equals(this.users, queryRecipientsResponse.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(campaigns, channels, duration, recipients, segments, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryRecipientsResponse {\n");
    sb.append("    campaigns: ").append(toIndentedString(campaigns)).append("\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    segments: ").append(toIndentedString(segments)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("campaigns");
    openapiFields.add("channels");
    openapiFields.add("duration");
    openapiFields.add("recipients");
    openapiFields.add("segments");
    openapiFields.add("users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("campaigns");
    openapiRequiredFields.add("channels");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("recipients");
    openapiRequiredFields.add("segments");
    openapiRequiredFields.add("users");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryRecipientsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryRecipientsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryRecipientsResponse is not found in the empty JSON string", QueryRecipientsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryRecipientsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryRecipientsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QueryRecipientsResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("recipients").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
      }

      JsonArray jsonArrayrecipients = jsonObj.getAsJsonArray("recipients");
      // validate the required field `recipients` (array)
      for (int i = 0; i < jsonArrayrecipients.size(); i++) {
        Recipient.validateJsonElement(jsonArrayrecipients.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryRecipientsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryRecipientsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryRecipientsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryRecipientsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryRecipientsResponse>() {
           @Override
           public void write(JsonWriter out, QueryRecipientsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryRecipientsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryRecipientsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryRecipientsResponse
   * @throws IOException if the JSON string is invalid with respect to QueryRecipientsResponse
   */
  public static QueryRecipientsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryRecipientsResponse.class);
  }

  /**
   * Convert an instance of QueryRecipientsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

