/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.UserObjectRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CheckPushRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckPushRequest {
  public static final String SERIALIZED_NAME_APN_TEMPLATE = "apn_template";
  @SerializedName(SERIALIZED_NAME_APN_TEMPLATE)
  private String apnTemplate;

  public static final String SERIALIZED_NAME_FIREBASE_DATA_TEMPLATE = "firebase_data_template";
  @SerializedName(SERIALIZED_NAME_FIREBASE_DATA_TEMPLATE)
  private String firebaseDataTemplate;

  public static final String SERIALIZED_NAME_FIREBASE_TEMPLATE = "firebase_template";
  @SerializedName(SERIALIZED_NAME_FIREBASE_TEMPLATE)
  private String firebaseTemplate;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "message_id";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_PUSH_PROVIDER_NAME = "push_provider_name";
  @SerializedName(SERIALIZED_NAME_PUSH_PROVIDER_NAME)
  private String pushProviderName;

  /**
   * Push provider type
   */
  @JsonAdapter(PushProviderTypeEnum.Adapter.class)
  public enum PushProviderTypeEnum {
    FIREBASE("firebase"),
    
    APN("apn"),
    
    HUAWEI("huawei"),
    
    XIAOMI("xiaomi");

    private String value;

    PushProviderTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PushProviderTypeEnum fromValue(String value) {
      for (PushProviderTypeEnum b : PushProviderTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PushProviderTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PushProviderTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PushProviderTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PushProviderTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PushProviderTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PUSH_PROVIDER_TYPE = "push_provider_type";
  @SerializedName(SERIALIZED_NAME_PUSH_PROVIDER_TYPE)
  private PushProviderTypeEnum pushProviderType;

  public static final String SERIALIZED_NAME_SKIP_DEVICES = "skip_devices";
  @SerializedName(SERIALIZED_NAME_SKIP_DEVICES)
  private Boolean skipDevices;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserObjectRequest user;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public CheckPushRequest() {
  }

  public CheckPushRequest apnTemplate(String apnTemplate) {
    this.apnTemplate = apnTemplate;
    return this;
  }

  /**
   * Push message template for APN
   * @return apnTemplate
   */
  @javax.annotation.Nullable
  public String getApnTemplate() {
    return apnTemplate;
  }

  public void setApnTemplate(String apnTemplate) {
    this.apnTemplate = apnTemplate;
  }


  public CheckPushRequest firebaseDataTemplate(String firebaseDataTemplate) {
    this.firebaseDataTemplate = firebaseDataTemplate;
    return this;
  }

  /**
   * Push message data template for Firebase
   * @return firebaseDataTemplate
   */
  @javax.annotation.Nullable
  public String getFirebaseDataTemplate() {
    return firebaseDataTemplate;
  }

  public void setFirebaseDataTemplate(String firebaseDataTemplate) {
    this.firebaseDataTemplate = firebaseDataTemplate;
  }


  public CheckPushRequest firebaseTemplate(String firebaseTemplate) {
    this.firebaseTemplate = firebaseTemplate;
    return this;
  }

  /**
   * Push message template for Firebase
   * @return firebaseTemplate
   */
  @javax.annotation.Nullable
  public String getFirebaseTemplate() {
    return firebaseTemplate;
  }

  public void setFirebaseTemplate(String firebaseTemplate) {
    this.firebaseTemplate = firebaseTemplate;
  }


  public CheckPushRequest messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * Message ID to send push notification for
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public CheckPushRequest pushProviderName(String pushProviderName) {
    this.pushProviderName = pushProviderName;
    return this;
  }

  /**
   * Name of push provider
   * @return pushProviderName
   */
  @javax.annotation.Nullable
  public String getPushProviderName() {
    return pushProviderName;
  }

  public void setPushProviderName(String pushProviderName) {
    this.pushProviderName = pushProviderName;
  }


  public CheckPushRequest pushProviderType(PushProviderTypeEnum pushProviderType) {
    this.pushProviderType = pushProviderType;
    return this;
  }

  /**
   * Push provider type
   * @return pushProviderType
   */
  @javax.annotation.Nullable
  public PushProviderTypeEnum getPushProviderType() {
    return pushProviderType;
  }

  public void setPushProviderType(PushProviderTypeEnum pushProviderType) {
    this.pushProviderType = pushProviderType;
  }


  public CheckPushRequest skipDevices(Boolean skipDevices) {
    this.skipDevices = skipDevices;
    return this;
  }

  /**
   * Don&#39;t require existing devices to render templates
   * @return skipDevices
   */
  @javax.annotation.Nullable
  public Boolean getSkipDevices() {
    return skipDevices;
  }

  public void setSkipDevices(Boolean skipDevices) {
    this.skipDevices = skipDevices;
  }


  public CheckPushRequest user(UserObjectRequest user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserObjectRequest getUser() {
    return user;
  }

  public void setUser(UserObjectRequest user) {
    this.user = user;
  }


  public CheckPushRequest userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckPushRequest checkPushRequest = (CheckPushRequest) o;
    return Objects.equals(this.apnTemplate, checkPushRequest.apnTemplate) &&
        Objects.equals(this.firebaseDataTemplate, checkPushRequest.firebaseDataTemplate) &&
        Objects.equals(this.firebaseTemplate, checkPushRequest.firebaseTemplate) &&
        Objects.equals(this.messageId, checkPushRequest.messageId) &&
        Objects.equals(this.pushProviderName, checkPushRequest.pushProviderName) &&
        Objects.equals(this.pushProviderType, checkPushRequest.pushProviderType) &&
        Objects.equals(this.skipDevices, checkPushRequest.skipDevices) &&
        Objects.equals(this.user, checkPushRequest.user) &&
        Objects.equals(this.userId, checkPushRequest.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apnTemplate, firebaseDataTemplate, firebaseTemplate, messageId, pushProviderName, pushProviderType, skipDevices, user, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckPushRequest {\n");
    sb.append("    apnTemplate: ").append(toIndentedString(apnTemplate)).append("\n");
    sb.append("    firebaseDataTemplate: ").append(toIndentedString(firebaseDataTemplate)).append("\n");
    sb.append("    firebaseTemplate: ").append(toIndentedString(firebaseTemplate)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    pushProviderName: ").append(toIndentedString(pushProviderName)).append("\n");
    sb.append("    pushProviderType: ").append(toIndentedString(pushProviderType)).append("\n");
    sb.append("    skipDevices: ").append(toIndentedString(skipDevices)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apn_template");
    openapiFields.add("firebase_data_template");
    openapiFields.add("firebase_template");
    openapiFields.add("message_id");
    openapiFields.add("push_provider_name");
    openapiFields.add("push_provider_type");
    openapiFields.add("skip_devices");
    openapiFields.add("user");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckPushRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckPushRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckPushRequest is not found in the empty JSON string", CheckPushRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckPushRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckPushRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apn_template") != null && !jsonObj.get("apn_template").isJsonNull()) && !jsonObj.get("apn_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apn_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apn_template").toString()));
      }
      if ((jsonObj.get("firebase_data_template") != null && !jsonObj.get("firebase_data_template").isJsonNull()) && !jsonObj.get("firebase_data_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firebase_data_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firebase_data_template").toString()));
      }
      if ((jsonObj.get("firebase_template") != null && !jsonObj.get("firebase_template").isJsonNull()) && !jsonObj.get("firebase_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firebase_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firebase_template").toString()));
      }
      if ((jsonObj.get("message_id") != null && !jsonObj.get("message_id").isJsonNull()) && !jsonObj.get("message_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_id").toString()));
      }
      if ((jsonObj.get("push_provider_name") != null && !jsonObj.get("push_provider_name").isJsonNull()) && !jsonObj.get("push_provider_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `push_provider_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("push_provider_name").toString()));
      }
      if ((jsonObj.get("push_provider_type") != null && !jsonObj.get("push_provider_type").isJsonNull()) && !jsonObj.get("push_provider_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `push_provider_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("push_provider_type").toString()));
      }
      // validate the optional field `push_provider_type`
      if (jsonObj.get("push_provider_type") != null && !jsonObj.get("push_provider_type").isJsonNull()) {
        PushProviderTypeEnum.validateJsonElement(jsonObj.get("push_provider_type"));
      }
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckPushRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckPushRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckPushRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckPushRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckPushRequest>() {
           @Override
           public void write(JsonWriter out, CheckPushRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckPushRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckPushRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckPushRequest
   * @throws IOException if the JSON string is invalid with respect to CheckPushRequest
   */
  public static CheckPushRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckPushRequest.class);
  }

  /**
   * Convert an instance of CheckPushRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

