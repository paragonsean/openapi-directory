/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.FlagDetails;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.UserObject;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains information about flagged user or message
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Flag {
  public static final String SERIALIZED_NAME_APPROVED_AT = "approved_at";
  @SerializedName(SERIALIZED_NAME_APPROVED_AT)
  private OffsetDateTime approvedAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY_AUTOMOD = "created_by_automod";
  @SerializedName(SERIALIZED_NAME_CREATED_BY_AUTOMOD)
  private Boolean createdByAutomod;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private FlagDetails details;

  public static final String SERIALIZED_NAME_REJECTED_AT = "rejected_at";
  @SerializedName(SERIALIZED_NAME_REJECTED_AT)
  private OffsetDateTime rejectedAt;

  public static final String SERIALIZED_NAME_REVIEWED_AT = "reviewed_at";
  @SerializedName(SERIALIZED_NAME_REVIEWED_AT)
  private OffsetDateTime reviewedAt;

  public static final String SERIALIZED_NAME_TARGET_MESSAGE = "target_message";
  @SerializedName(SERIALIZED_NAME_TARGET_MESSAGE)
  private Message targetMessage;

  public static final String SERIALIZED_NAME_TARGET_MESSAGE_ID = "target_message_id";
  @SerializedName(SERIALIZED_NAME_TARGET_MESSAGE_ID)
  private String targetMessageId;

  public static final String SERIALIZED_NAME_TARGET_USER = "target_user";
  @SerializedName(SERIALIZED_NAME_TARGET_USER)
  private UserObject targetUser;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserObject user;

  public Flag() {
  }

  public Flag approvedAt(OffsetDateTime approvedAt) {
    this.approvedAt = approvedAt;
    return this;
  }

  /**
   * Date of the approval
   * @return approvedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getApprovedAt() {
    return approvedAt;
  }

  public void setApprovedAt(OffsetDateTime approvedAt) {
    this.approvedAt = approvedAt;
  }


  public Flag createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Date/time of creation
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Flag createdByAutomod(Boolean createdByAutomod) {
    this.createdByAutomod = createdByAutomod;
    return this;
  }

  /**
   * Get createdByAutomod
   * @return createdByAutomod
   */
  @javax.annotation.Nonnull
  public Boolean getCreatedByAutomod() {
    return createdByAutomod;
  }

  public void setCreatedByAutomod(Boolean createdByAutomod) {
    this.createdByAutomod = createdByAutomod;
  }


  public Flag details(FlagDetails details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public FlagDetails getDetails() {
    return details;
  }

  public void setDetails(FlagDetails details) {
    this.details = details;
  }


  public Flag rejectedAt(OffsetDateTime rejectedAt) {
    this.rejectedAt = rejectedAt;
    return this;
  }

  /**
   * Date of the rejection
   * @return rejectedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRejectedAt() {
    return rejectedAt;
  }

  public void setRejectedAt(OffsetDateTime rejectedAt) {
    this.rejectedAt = rejectedAt;
  }


  public Flag reviewedAt(OffsetDateTime reviewedAt) {
    this.reviewedAt = reviewedAt;
    return this;
  }

  /**
   * Date of the review
   * @return reviewedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReviewedAt() {
    return reviewedAt;
  }

  public void setReviewedAt(OffsetDateTime reviewedAt) {
    this.reviewedAt = reviewedAt;
  }


  public Flag targetMessage(Message targetMessage) {
    this.targetMessage = targetMessage;
    return this;
  }

  /**
   * Get targetMessage
   * @return targetMessage
   */
  @javax.annotation.Nullable
  public Message getTargetMessage() {
    return targetMessage;
  }

  public void setTargetMessage(Message targetMessage) {
    this.targetMessage = targetMessage;
  }


  public Flag targetMessageId(String targetMessageId) {
    this.targetMessageId = targetMessageId;
    return this;
  }

  /**
   * ID of flagged message
   * @return targetMessageId
   */
  @javax.annotation.Nullable
  public String getTargetMessageId() {
    return targetMessageId;
  }

  public void setTargetMessageId(String targetMessageId) {
    this.targetMessageId = targetMessageId;
  }


  public Flag targetUser(UserObject targetUser) {
    this.targetUser = targetUser;
    return this;
  }

  /**
   * Get targetUser
   * @return targetUser
   */
  @javax.annotation.Nullable
  public UserObject getTargetUser() {
    return targetUser;
  }

  public void setTargetUser(UserObject targetUser) {
    this.targetUser = targetUser;
  }


  public Flag updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Date/time of the last update
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Flag user(UserObject user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserObject getUser() {
    return user;
  }

  public void setUser(UserObject user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Flag flag = (Flag) o;
    return Objects.equals(this.approvedAt, flag.approvedAt) &&
        Objects.equals(this.createdAt, flag.createdAt) &&
        Objects.equals(this.createdByAutomod, flag.createdByAutomod) &&
        Objects.equals(this.details, flag.details) &&
        Objects.equals(this.rejectedAt, flag.rejectedAt) &&
        Objects.equals(this.reviewedAt, flag.reviewedAt) &&
        Objects.equals(this.targetMessage, flag.targetMessage) &&
        Objects.equals(this.targetMessageId, flag.targetMessageId) &&
        Objects.equals(this.targetUser, flag.targetUser) &&
        Objects.equals(this.updatedAt, flag.updatedAt) &&
        Objects.equals(this.user, flag.user);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(approvedAt, createdAt, createdByAutomod, details, rejectedAt, reviewedAt, targetMessage, targetMessageId, targetUser, updatedAt, user);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Flag {\n");
    sb.append("    approvedAt: ").append(toIndentedString(approvedAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdByAutomod: ").append(toIndentedString(createdByAutomod)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    rejectedAt: ").append(toIndentedString(rejectedAt)).append("\n");
    sb.append("    reviewedAt: ").append(toIndentedString(reviewedAt)).append("\n");
    sb.append("    targetMessage: ").append(toIndentedString(targetMessage)).append("\n");
    sb.append("    targetMessageId: ").append(toIndentedString(targetMessageId)).append("\n");
    sb.append("    targetUser: ").append(toIndentedString(targetUser)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("approved_at");
    openapiFields.add("created_at");
    openapiFields.add("created_by_automod");
    openapiFields.add("details");
    openapiFields.add("rejected_at");
    openapiFields.add("reviewed_at");
    openapiFields.add("target_message");
    openapiFields.add("target_message_id");
    openapiFields.add("target_user");
    openapiFields.add("updated_at");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("created_by_automod");
    openapiRequiredFields.add("updated_at");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Flag
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Flag.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Flag is not found in the empty JSON string", Flag.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Flag.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Flag` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Flag.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("target_message_id") != null && !jsonObj.get("target_message_id").isJsonNull()) && !jsonObj.get("target_message_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_message_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_message_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Flag.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Flag' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Flag> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Flag.class));

       return (TypeAdapter<T>) new TypeAdapter<Flag>() {
           @Override
           public void write(JsonWriter out, Flag value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Flag read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Flag given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Flag
   * @throws IOException if the JSON string is invalid with respect to Flag
   */
  public static Flag fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Flag.class);
  }

  /**
   * Convert an instance of Flag to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

