/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChannelExportRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExportChannelsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportChannelsRequest {
  public static final String SERIALIZED_NAME_CHANNELS = "channels";
  @SerializedName(SERIALIZED_NAME_CHANNELS)
  private List<ChannelExportRequest> channels = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLEAR_DELETED_MESSAGE_TEXT = "clear_deleted_message_text";
  @SerializedName(SERIALIZED_NAME_CLEAR_DELETED_MESSAGE_TEXT)
  private Boolean clearDeletedMessageText;

  public static final String SERIALIZED_NAME_EXPORT_USERS = "export_users";
  @SerializedName(SERIALIZED_NAME_EXPORT_USERS)
  private Boolean exportUsers;

  public static final String SERIALIZED_NAME_INCLUDE_TRUNCATED_MESSAGES = "include_truncated_messages";
  @SerializedName(SERIALIZED_NAME_INCLUDE_TRUNCATED_MESSAGES)
  private Boolean includeTruncatedMessages;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public ExportChannelsRequest() {
  }

  public ExportChannelsRequest channels(List<ChannelExportRequest> channels) {
    this.channels = channels;
    return this;
  }

  public ExportChannelsRequest addChannelsItem(ChannelExportRequest channelsItem) {
    if (this.channels == null) {
      this.channels = new ArrayList<>();
    }
    this.channels.add(channelsItem);
    return this;
  }

  /**
   * Export options for channels
   * @return channels
   */
  @javax.annotation.Nullable
  public List<ChannelExportRequest> getChannels() {
    return channels;
  }

  public void setChannels(List<ChannelExportRequest> channels) {
    this.channels = channels;
  }


  public ExportChannelsRequest clearDeletedMessageText(Boolean clearDeletedMessageText) {
    this.clearDeletedMessageText = clearDeletedMessageText;
    return this;
  }

  /**
   * Set if deleted message text should be cleared
   * @return clearDeletedMessageText
   */
  @javax.annotation.Nullable
  public Boolean getClearDeletedMessageText() {
    return clearDeletedMessageText;
  }

  public void setClearDeletedMessageText(Boolean clearDeletedMessageText) {
    this.clearDeletedMessageText = clearDeletedMessageText;
  }


  public ExportChannelsRequest exportUsers(Boolean exportUsers) {
    this.exportUsers = exportUsers;
    return this;
  }

  /**
   * Get exportUsers
   * @return exportUsers
   */
  @javax.annotation.Nullable
  public Boolean getExportUsers() {
    return exportUsers;
  }

  public void setExportUsers(Boolean exportUsers) {
    this.exportUsers = exportUsers;
  }


  public ExportChannelsRequest includeTruncatedMessages(Boolean includeTruncatedMessages) {
    this.includeTruncatedMessages = includeTruncatedMessages;
    return this;
  }

  /**
   * Set if you want to include truncated messages
   * @return includeTruncatedMessages
   */
  @javax.annotation.Nullable
  public Boolean getIncludeTruncatedMessages() {
    return includeTruncatedMessages;
  }

  public void setIncludeTruncatedMessages(Boolean includeTruncatedMessages) {
    this.includeTruncatedMessages = includeTruncatedMessages;
  }


  public ExportChannelsRequest version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportChannelsRequest exportChannelsRequest = (ExportChannelsRequest) o;
    return Objects.equals(this.channels, exportChannelsRequest.channels) &&
        Objects.equals(this.clearDeletedMessageText, exportChannelsRequest.clearDeletedMessageText) &&
        Objects.equals(this.exportUsers, exportChannelsRequest.exportUsers) &&
        Objects.equals(this.includeTruncatedMessages, exportChannelsRequest.includeTruncatedMessages) &&
        Objects.equals(this.version, exportChannelsRequest.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channels, clearDeletedMessageText, exportUsers, includeTruncatedMessages, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportChannelsRequest {\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    clearDeletedMessageText: ").append(toIndentedString(clearDeletedMessageText)).append("\n");
    sb.append("    exportUsers: ").append(toIndentedString(exportUsers)).append("\n");
    sb.append("    includeTruncatedMessages: ").append(toIndentedString(includeTruncatedMessages)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channels");
    openapiFields.add("clear_deleted_message_text");
    openapiFields.add("export_users");
    openapiFields.add("include_truncated_messages");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportChannelsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportChannelsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportChannelsRequest is not found in the empty JSON string", ExportChannelsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportChannelsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportChannelsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("channels") != null && !jsonObj.get("channels").isJsonNull()) {
        JsonArray jsonArraychannels = jsonObj.getAsJsonArray("channels");
        if (jsonArraychannels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("channels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `channels` to be an array in the JSON string but got `%s`", jsonObj.get("channels").toString()));
          }

          // validate the optional field `channels` (array)
          for (int i = 0; i < jsonArraychannels.size(); i++) {
            ChannelExportRequest.validateJsonElement(jsonArraychannels.get(i));
          };
        }
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportChannelsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportChannelsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportChannelsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportChannelsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportChannelsRequest>() {
           @Override
           public void write(JsonWriter out, ExportChannelsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportChannelsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportChannelsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportChannelsRequest
   * @throws IOException if the JSON string is invalid with respect to ExportChannelsRequest
   */
  public static ExportChannelsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportChannelsRequest.class);
  }

  /**
   * Convert an instance of ExportChannelsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

