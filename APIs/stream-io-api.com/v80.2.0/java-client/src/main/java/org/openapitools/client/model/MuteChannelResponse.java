/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChannelMute;
import org.openapitools.client.model.OwnUser;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MuteChannelResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MuteChannelResponse {
  public static final String SERIALIZED_NAME_CHANNEL_MUTE = "channel_mute";
  @SerializedName(SERIALIZED_NAME_CHANNEL_MUTE)
  private ChannelMute channelMute;

  public static final String SERIALIZED_NAME_CHANNEL_MUTES = "channel_mutes";
  @SerializedName(SERIALIZED_NAME_CHANNEL_MUTES)
  private List<ChannelMute> channelMutes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_OWN_USER = "own_user";
  @SerializedName(SERIALIZED_NAME_OWN_USER)
  private OwnUser ownUser;

  public MuteChannelResponse() {
  }

  public MuteChannelResponse channelMute(ChannelMute channelMute) {
    this.channelMute = channelMute;
    return this;
  }

  /**
   * Get channelMute
   * @return channelMute
   */
  @javax.annotation.Nullable
  public ChannelMute getChannelMute() {
    return channelMute;
  }

  public void setChannelMute(ChannelMute channelMute) {
    this.channelMute = channelMute;
  }


  public MuteChannelResponse channelMutes(List<ChannelMute> channelMutes) {
    this.channelMutes = channelMutes;
    return this;
  }

  public MuteChannelResponse addChannelMutesItem(ChannelMute channelMutesItem) {
    if (this.channelMutes == null) {
      this.channelMutes = new ArrayList<>();
    }
    this.channelMutes.add(channelMutesItem);
    return this;
  }

  /**
   * Object with mutes (if multiple channels were muted)
   * @return channelMutes
   */
  @javax.annotation.Nullable
  public List<ChannelMute> getChannelMutes() {
    return channelMutes;
  }

  public void setChannelMutes(List<ChannelMute> channelMutes) {
    this.channelMutes = channelMutes;
  }


  public MuteChannelResponse duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nonnull
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public MuteChannelResponse ownUser(OwnUser ownUser) {
    this.ownUser = ownUser;
    return this;
  }

  /**
   * Get ownUser
   * @return ownUser
   */
  @javax.annotation.Nullable
  public OwnUser getOwnUser() {
    return ownUser;
  }

  public void setOwnUser(OwnUser ownUser) {
    this.ownUser = ownUser;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MuteChannelResponse muteChannelResponse = (MuteChannelResponse) o;
    return Objects.equals(this.channelMute, muteChannelResponse.channelMute) &&
        Objects.equals(this.channelMutes, muteChannelResponse.channelMutes) &&
        Objects.equals(this.duration, muteChannelResponse.duration) &&
        Objects.equals(this.ownUser, muteChannelResponse.ownUser);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelMute, channelMutes, duration, ownUser);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MuteChannelResponse {\n");
    sb.append("    channelMute: ").append(toIndentedString(channelMute)).append("\n");
    sb.append("    channelMutes: ").append(toIndentedString(channelMutes)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    ownUser: ").append(toIndentedString(ownUser)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channel_mute");
    openapiFields.add("channel_mutes");
    openapiFields.add("duration");
    openapiFields.add("own_user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("duration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MuteChannelResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MuteChannelResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MuteChannelResponse is not found in the empty JSON string", MuteChannelResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MuteChannelResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MuteChannelResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MuteChannelResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `channel_mute`
      if (jsonObj.get("channel_mute") != null && !jsonObj.get("channel_mute").isJsonNull()) {
        ChannelMute.validateJsonElement(jsonObj.get("channel_mute"));
      }
      if (jsonObj.get("channel_mutes") != null && !jsonObj.get("channel_mutes").isJsonNull()) {
        JsonArray jsonArraychannelMutes = jsonObj.getAsJsonArray("channel_mutes");
        if (jsonArraychannelMutes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("channel_mutes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `channel_mutes` to be an array in the JSON string but got `%s`", jsonObj.get("channel_mutes").toString()));
          }

          // validate the optional field `channel_mutes` (array)
          for (int i = 0; i < jsonArraychannelMutes.size(); i++) {
            ChannelMute.validateJsonElement(jsonArraychannelMutes.get(i));
          };
        }
      }
      if (!jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MuteChannelResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MuteChannelResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MuteChannelResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MuteChannelResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MuteChannelResponse>() {
           @Override
           public void write(JsonWriter out, MuteChannelResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MuteChannelResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MuteChannelResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MuteChannelResponse
   * @throws IOException if the JSON string is invalid with respect to MuteChannelResponse
   */
  public static MuteChannelResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MuteChannelResponse.class);
  }

  /**
   * Convert an instance of MuteChannelResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

