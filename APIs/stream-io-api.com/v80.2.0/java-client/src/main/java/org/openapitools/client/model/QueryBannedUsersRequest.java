/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.SortParam;
import org.openapitools.client.model.UserObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QueryBannedUsersRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryBannedUsersRequest {
  public static final String SERIALIZED_NAME_CREATED_AT_AFTER = "created_at_after";
  @SerializedName(SERIALIZED_NAME_CREATED_AT_AFTER)
  private OffsetDateTime createdAtAfter;

  public static final String SERIALIZED_NAME_CREATED_AT_AFTER_OR_EQUAL = "created_at_after_or_equal";
  @SerializedName(SERIALIZED_NAME_CREATED_AT_AFTER_OR_EQUAL)
  private OffsetDateTime createdAtAfterOrEqual;

  public static final String SERIALIZED_NAME_CREATED_AT_BEFORE = "created_at_before";
  @SerializedName(SERIALIZED_NAME_CREATED_AT_BEFORE)
  private OffsetDateTime createdAtBefore;

  public static final String SERIALIZED_NAME_CREATED_AT_BEFORE_OR_EQUAL = "created_at_before_or_equal";
  @SerializedName(SERIALIZED_NAME_CREATED_AT_BEFORE_OR_EQUAL)
  private OffsetDateTime createdAtBeforeOrEqual;

  public static final String SERIALIZED_NAME_FILTER_CONDITIONS = "filter_conditions";
  @SerializedName(SERIALIZED_NAME_FILTER_CONDITIONS)
  private Map<String, Object> filterConditions = new HashMap<>();

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private List<SortParam> sort = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserObject user;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public QueryBannedUsersRequest() {
  }

  public QueryBannedUsersRequest createdAtAfter(OffsetDateTime createdAtAfter) {
    this.createdAtAfter = createdAtAfter;
    return this;
  }

  /**
   * Get createdAtAfter
   * @return createdAtAfter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAtAfter() {
    return createdAtAfter;
  }

  public void setCreatedAtAfter(OffsetDateTime createdAtAfter) {
    this.createdAtAfter = createdAtAfter;
  }


  public QueryBannedUsersRequest createdAtAfterOrEqual(OffsetDateTime createdAtAfterOrEqual) {
    this.createdAtAfterOrEqual = createdAtAfterOrEqual;
    return this;
  }

  /**
   * Get createdAtAfterOrEqual
   * @return createdAtAfterOrEqual
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAtAfterOrEqual() {
    return createdAtAfterOrEqual;
  }

  public void setCreatedAtAfterOrEqual(OffsetDateTime createdAtAfterOrEqual) {
    this.createdAtAfterOrEqual = createdAtAfterOrEqual;
  }


  public QueryBannedUsersRequest createdAtBefore(OffsetDateTime createdAtBefore) {
    this.createdAtBefore = createdAtBefore;
    return this;
  }

  /**
   * Get createdAtBefore
   * @return createdAtBefore
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAtBefore() {
    return createdAtBefore;
  }

  public void setCreatedAtBefore(OffsetDateTime createdAtBefore) {
    this.createdAtBefore = createdAtBefore;
  }


  public QueryBannedUsersRequest createdAtBeforeOrEqual(OffsetDateTime createdAtBeforeOrEqual) {
    this.createdAtBeforeOrEqual = createdAtBeforeOrEqual;
    return this;
  }

  /**
   * Get createdAtBeforeOrEqual
   * @return createdAtBeforeOrEqual
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAtBeforeOrEqual() {
    return createdAtBeforeOrEqual;
  }

  public void setCreatedAtBeforeOrEqual(OffsetDateTime createdAtBeforeOrEqual) {
    this.createdAtBeforeOrEqual = createdAtBeforeOrEqual;
  }


  public QueryBannedUsersRequest filterConditions(Map<String, Object> filterConditions) {
    this.filterConditions = filterConditions;
    return this;
  }

  public QueryBannedUsersRequest putFilterConditionsItem(String key, Object filterConditionsItem) {
    if (this.filterConditions == null) {
      this.filterConditions = new HashMap<>();
    }
    this.filterConditions.put(key, filterConditionsItem);
    return this;
  }

  /**
   * Get filterConditions
   * @return filterConditions
   */
  @javax.annotation.Nonnull
  public Map<String, Object> getFilterConditions() {
    return filterConditions;
  }

  public void setFilterConditions(Map<String, Object> filterConditions) {
    this.filterConditions = filterConditions;
  }


  public QueryBannedUsersRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Get limit
   * maximum: 300
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public QueryBannedUsersRequest offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Get offset
   * maximum: 10000
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public QueryBannedUsersRequest sort(List<SortParam> sort) {
    this.sort = sort;
    return this;
  }

  public QueryBannedUsersRequest addSortItem(SortParam sortItem) {
    if (this.sort == null) {
      this.sort = new ArrayList<>();
    }
    this.sort.add(sortItem);
    return this;
  }

  /**
   * Get sort
   * @return sort
   */
  @javax.annotation.Nullable
  public List<SortParam> getSort() {
    return sort;
  }

  public void setSort(List<SortParam> sort) {
    this.sort = sort;
  }


  public QueryBannedUsersRequest user(UserObject user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserObject getUser() {
    return user;
  }

  public void setUser(UserObject user) {
    this.user = user;
  }


  public QueryBannedUsersRequest userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * **Server-side only**. User ID which server acts upon
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryBannedUsersRequest queryBannedUsersRequest = (QueryBannedUsersRequest) o;
    return Objects.equals(this.createdAtAfter, queryBannedUsersRequest.createdAtAfter) &&
        Objects.equals(this.createdAtAfterOrEqual, queryBannedUsersRequest.createdAtAfterOrEqual) &&
        Objects.equals(this.createdAtBefore, queryBannedUsersRequest.createdAtBefore) &&
        Objects.equals(this.createdAtBeforeOrEqual, queryBannedUsersRequest.createdAtBeforeOrEqual) &&
        Objects.equals(this.filterConditions, queryBannedUsersRequest.filterConditions) &&
        Objects.equals(this.limit, queryBannedUsersRequest.limit) &&
        Objects.equals(this.offset, queryBannedUsersRequest.offset) &&
        Objects.equals(this.sort, queryBannedUsersRequest.sort) &&
        Objects.equals(this.user, queryBannedUsersRequest.user) &&
        Objects.equals(this.userId, queryBannedUsersRequest.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAtAfter, createdAtAfterOrEqual, createdAtBefore, createdAtBeforeOrEqual, filterConditions, limit, offset, sort, user, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryBannedUsersRequest {\n");
    sb.append("    createdAtAfter: ").append(toIndentedString(createdAtAfter)).append("\n");
    sb.append("    createdAtAfterOrEqual: ").append(toIndentedString(createdAtAfterOrEqual)).append("\n");
    sb.append("    createdAtBefore: ").append(toIndentedString(createdAtBefore)).append("\n");
    sb.append("    createdAtBeforeOrEqual: ").append(toIndentedString(createdAtBeforeOrEqual)).append("\n");
    sb.append("    filterConditions: ").append(toIndentedString(filterConditions)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at_after");
    openapiFields.add("created_at_after_or_equal");
    openapiFields.add("created_at_before");
    openapiFields.add("created_at_before_or_equal");
    openapiFields.add("filter_conditions");
    openapiFields.add("limit");
    openapiFields.add("offset");
    openapiFields.add("sort");
    openapiFields.add("user");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("filter_conditions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryBannedUsersRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryBannedUsersRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryBannedUsersRequest is not found in the empty JSON string", QueryBannedUsersRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryBannedUsersRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryBannedUsersRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QueryBannedUsersRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) {
        JsonArray jsonArraysort = jsonObj.getAsJsonArray("sort");
        if (jsonArraysort != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sort").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sort` to be an array in the JSON string but got `%s`", jsonObj.get("sort").toString()));
          }

          // validate the optional field `sort` (array)
          for (int i = 0; i < jsonArraysort.size(); i++) {
            SortParam.validateJsonElement(jsonArraysort.get(i));
          };
        }
      }
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryBannedUsersRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryBannedUsersRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryBannedUsersRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryBannedUsersRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryBannedUsersRequest>() {
           @Override
           public void write(JsonWriter out, QueryBannedUsersRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryBannedUsersRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryBannedUsersRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryBannedUsersRequest
   * @throws IOException if the JSON string is invalid with respect to QueryBannedUsersRequest
   */
  public static QueryBannedUsersRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryBannedUsersRequest.class);
  }

  /**
   * Convert an instance of QueryBannedUsersRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

