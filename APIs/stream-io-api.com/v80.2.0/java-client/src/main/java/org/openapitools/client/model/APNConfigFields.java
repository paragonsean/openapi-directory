/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * APNConfigFields
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class APNConfigFields {
  public static final String SERIALIZED_NAME_AUTH_KEY = "auth_key";
  @SerializedName(SERIALIZED_NAME_AUTH_KEY)
  private String authKey;

  public static final String SERIALIZED_NAME_AUTH_TYPE = "auth_type";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  private String authType;

  public static final String SERIALIZED_NAME_BUNDLE_ID = "bundle_id";
  @SerializedName(SERIALIZED_NAME_BUNDLE_ID)
  private String bundleId;

  public static final String SERIALIZED_NAME_DEVELOPMENT = "development";
  @SerializedName(SERIALIZED_NAME_DEVELOPMENT)
  private Boolean development;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_KEY_ID = "key_id";
  @SerializedName(SERIALIZED_NAME_KEY_ID)
  private String keyId;

  public static final String SERIALIZED_NAME_NOTIFICATION_TEMPLATE = "notification_template";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TEMPLATE)
  private String notificationTemplate;

  public static final String SERIALIZED_NAME_P12_CERT = "p12_cert";
  @SerializedName(SERIALIZED_NAME_P12_CERT)
  private String p12Cert;

  public static final String SERIALIZED_NAME_TEAM_ID = "team_id";
  @SerializedName(SERIALIZED_NAME_TEAM_ID)
  private String teamId;

  public APNConfigFields() {
  }

  public APNConfigFields authKey(String authKey) {
    this.authKey = authKey;
    return this;
  }

  /**
   * Get authKey
   * @return authKey
   */
  @javax.annotation.Nullable
  public String getAuthKey() {
    return authKey;
  }

  public void setAuthKey(String authKey) {
    this.authKey = authKey;
  }


  public APNConfigFields authType(String authType) {
    this.authType = authType;
    return this;
  }

  /**
   * Get authType
   * @return authType
   */
  @javax.annotation.Nullable
  public String getAuthType() {
    return authType;
  }

  public void setAuthType(String authType) {
    this.authType = authType;
  }


  public APNConfigFields bundleId(String bundleId) {
    this.bundleId = bundleId;
    return this;
  }

  /**
   * Get bundleId
   * @return bundleId
   */
  @javax.annotation.Nullable
  public String getBundleId() {
    return bundleId;
  }

  public void setBundleId(String bundleId) {
    this.bundleId = bundleId;
  }


  public APNConfigFields development(Boolean development) {
    this.development = development;
    return this;
  }

  /**
   * Get development
   * @return development
   */
  @javax.annotation.Nonnull
  public Boolean getDevelopment() {
    return development;
  }

  public void setDevelopment(Boolean development) {
    this.development = development;
  }


  public APNConfigFields enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nonnull
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public APNConfigFields host(String host) {
    this.host = host;
    return this;
  }

  /**
   * Get host
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public APNConfigFields keyId(String keyId) {
    this.keyId = keyId;
    return this;
  }

  /**
   * Get keyId
   * @return keyId
   */
  @javax.annotation.Nullable
  public String getKeyId() {
    return keyId;
  }

  public void setKeyId(String keyId) {
    this.keyId = keyId;
  }


  public APNConfigFields notificationTemplate(String notificationTemplate) {
    this.notificationTemplate = notificationTemplate;
    return this;
  }

  /**
   * Get notificationTemplate
   * @return notificationTemplate
   */
  @javax.annotation.Nonnull
  public String getNotificationTemplate() {
    return notificationTemplate;
  }

  public void setNotificationTemplate(String notificationTemplate) {
    this.notificationTemplate = notificationTemplate;
  }


  public APNConfigFields p12Cert(String p12Cert) {
    this.p12Cert = p12Cert;
    return this;
  }

  /**
   * Get p12Cert
   * @return p12Cert
   */
  @javax.annotation.Nullable
  public String getP12Cert() {
    return p12Cert;
  }

  public void setP12Cert(String p12Cert) {
    this.p12Cert = p12Cert;
  }


  public APNConfigFields teamId(String teamId) {
    this.teamId = teamId;
    return this;
  }

  /**
   * Get teamId
   * @return teamId
   */
  @javax.annotation.Nullable
  public String getTeamId() {
    return teamId;
  }

  public void setTeamId(String teamId) {
    this.teamId = teamId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APNConfigFields apNConfigFields = (APNConfigFields) o;
    return Objects.equals(this.authKey, apNConfigFields.authKey) &&
        Objects.equals(this.authType, apNConfigFields.authType) &&
        Objects.equals(this.bundleId, apNConfigFields.bundleId) &&
        Objects.equals(this.development, apNConfigFields.development) &&
        Objects.equals(this.enabled, apNConfigFields.enabled) &&
        Objects.equals(this.host, apNConfigFields.host) &&
        Objects.equals(this.keyId, apNConfigFields.keyId) &&
        Objects.equals(this.notificationTemplate, apNConfigFields.notificationTemplate) &&
        Objects.equals(this.p12Cert, apNConfigFields.p12Cert) &&
        Objects.equals(this.teamId, apNConfigFields.teamId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authKey, authType, bundleId, development, enabled, host, keyId, notificationTemplate, p12Cert, teamId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APNConfigFields {\n");
    sb.append("    authKey: ").append(toIndentedString(authKey)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    bundleId: ").append(toIndentedString(bundleId)).append("\n");
    sb.append("    development: ").append(toIndentedString(development)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    keyId: ").append(toIndentedString(keyId)).append("\n");
    sb.append("    notificationTemplate: ").append(toIndentedString(notificationTemplate)).append("\n");
    sb.append("    p12Cert: ").append(toIndentedString(p12Cert)).append("\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auth_key");
    openapiFields.add("auth_type");
    openapiFields.add("bundle_id");
    openapiFields.add("development");
    openapiFields.add("enabled");
    openapiFields.add("host");
    openapiFields.add("key_id");
    openapiFields.add("notification_template");
    openapiFields.add("p12_cert");
    openapiFields.add("team_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("development");
    openapiRequiredFields.add("enabled");
    openapiRequiredFields.add("notification_template");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to APNConfigFields
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!APNConfigFields.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in APNConfigFields is not found in the empty JSON string", APNConfigFields.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!APNConfigFields.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APNConfigFields` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : APNConfigFields.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("auth_key") != null && !jsonObj.get("auth_key").isJsonNull()) && !jsonObj.get("auth_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_key").toString()));
      }
      if ((jsonObj.get("auth_type") != null && !jsonObj.get("auth_type").isJsonNull()) && !jsonObj.get("auth_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_type").toString()));
      }
      if ((jsonObj.get("bundle_id") != null && !jsonObj.get("bundle_id").isJsonNull()) && !jsonObj.get("bundle_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bundle_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bundle_id").toString()));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("key_id") != null && !jsonObj.get("key_id").isJsonNull()) && !jsonObj.get("key_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key_id").toString()));
      }
      if (!jsonObj.get("notification_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notification_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notification_template").toString()));
      }
      if ((jsonObj.get("p12_cert") != null && !jsonObj.get("p12_cert").isJsonNull()) && !jsonObj.get("p12_cert").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `p12_cert` to be a primitive type in the JSON string but got `%s`", jsonObj.get("p12_cert").toString()));
      }
      if ((jsonObj.get("team_id") != null && !jsonObj.get("team_id").isJsonNull()) && !jsonObj.get("team_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APNConfigFields.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APNConfigFields' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APNConfigFields> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APNConfigFields.class));

       return (TypeAdapter<T>) new TypeAdapter<APNConfigFields>() {
           @Override
           public void write(JsonWriter out, APNConfigFields value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APNConfigFields read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of APNConfigFields given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of APNConfigFields
   * @throws IOException if the JSON string is invalid with respect to APNConfigFields
   */
  public static APNConfigFields fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APNConfigFields.class);
  }

  /**
   * Convert an instance of APNConfigFields to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

