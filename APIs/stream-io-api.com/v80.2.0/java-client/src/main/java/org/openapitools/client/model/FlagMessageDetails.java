/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FlagMessageDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FlagMessageDetails {
  public static final String SERIALIZED_NAME_PIN_CHANGED = "pin_changed";
  @SerializedName(SERIALIZED_NAME_PIN_CHANGED)
  private Boolean pinChanged;

  public static final String SERIALIZED_NAME_SHOULD_ENRICH = "should_enrich";
  @SerializedName(SERIALIZED_NAME_SHOULD_ENRICH)
  private Boolean shouldEnrich;

  public static final String SERIALIZED_NAME_SKIP_PUSH = "skip_push";
  @SerializedName(SERIALIZED_NAME_SKIP_PUSH)
  private Boolean skipPush;

  public static final String SERIALIZED_NAME_UPDATED_BY_ID = "updated_by_id";
  @SerializedName(SERIALIZED_NAME_UPDATED_BY_ID)
  private String updatedById;

  public FlagMessageDetails() {
  }

  public FlagMessageDetails pinChanged(Boolean pinChanged) {
    this.pinChanged = pinChanged;
    return this;
  }

  /**
   * Get pinChanged
   * @return pinChanged
   */
  @javax.annotation.Nullable
  public Boolean getPinChanged() {
    return pinChanged;
  }

  public void setPinChanged(Boolean pinChanged) {
    this.pinChanged = pinChanged;
  }


  public FlagMessageDetails shouldEnrich(Boolean shouldEnrich) {
    this.shouldEnrich = shouldEnrich;
    return this;
  }

  /**
   * Get shouldEnrich
   * @return shouldEnrich
   */
  @javax.annotation.Nullable
  public Boolean getShouldEnrich() {
    return shouldEnrich;
  }

  public void setShouldEnrich(Boolean shouldEnrich) {
    this.shouldEnrich = shouldEnrich;
  }


  public FlagMessageDetails skipPush(Boolean skipPush) {
    this.skipPush = skipPush;
    return this;
  }

  /**
   * Get skipPush
   * @return skipPush
   */
  @javax.annotation.Nullable
  public Boolean getSkipPush() {
    return skipPush;
  }

  public void setSkipPush(Boolean skipPush) {
    this.skipPush = skipPush;
  }


  public FlagMessageDetails updatedById(String updatedById) {
    this.updatedById = updatedById;
    return this;
  }

  /**
   * Get updatedById
   * @return updatedById
   */
  @javax.annotation.Nullable
  public String getUpdatedById() {
    return updatedById;
  }

  public void setUpdatedById(String updatedById) {
    this.updatedById = updatedById;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlagMessageDetails flagMessageDetails = (FlagMessageDetails) o;
    return Objects.equals(this.pinChanged, flagMessageDetails.pinChanged) &&
        Objects.equals(this.shouldEnrich, flagMessageDetails.shouldEnrich) &&
        Objects.equals(this.skipPush, flagMessageDetails.skipPush) &&
        Objects.equals(this.updatedById, flagMessageDetails.updatedById);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pinChanged, shouldEnrich, skipPush, updatedById);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlagMessageDetails {\n");
    sb.append("    pinChanged: ").append(toIndentedString(pinChanged)).append("\n");
    sb.append("    shouldEnrich: ").append(toIndentedString(shouldEnrich)).append("\n");
    sb.append("    skipPush: ").append(toIndentedString(skipPush)).append("\n");
    sb.append("    updatedById: ").append(toIndentedString(updatedById)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pin_changed");
    openapiFields.add("should_enrich");
    openapiFields.add("skip_push");
    openapiFields.add("updated_by_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FlagMessageDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlagMessageDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlagMessageDetails is not found in the empty JSON string", FlagMessageDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlagMessageDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlagMessageDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("updated_by_id") != null && !jsonObj.get("updated_by_id").isJsonNull()) && !jsonObj.get("updated_by_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_by_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_by_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlagMessageDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlagMessageDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlagMessageDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlagMessageDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<FlagMessageDetails>() {
           @Override
           public void write(JsonWriter out, FlagMessageDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlagMessageDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FlagMessageDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FlagMessageDetails
   * @throws IOException if the JSON string is invalid with respect to FlagMessageDetails
   */
  public static FlagMessageDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlagMessageDetails.class);
  }

  /**
   * Convert an instance of FlagMessageDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

