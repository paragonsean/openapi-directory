/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ImageData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Images
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Images {
  public static final String SERIALIZED_NAME_FIXED_HEIGHT = "fixed_height";
  @SerializedName(SERIALIZED_NAME_FIXED_HEIGHT)
  private ImageData fixedHeight;

  public static final String SERIALIZED_NAME_FIXED_HEIGHT_DOWNSAMPLED = "fixed_height_downsampled";
  @SerializedName(SERIALIZED_NAME_FIXED_HEIGHT_DOWNSAMPLED)
  private ImageData fixedHeightDownsampled;

  public static final String SERIALIZED_NAME_FIXED_HEIGHT_STILL = "fixed_height_still";
  @SerializedName(SERIALIZED_NAME_FIXED_HEIGHT_STILL)
  private ImageData fixedHeightStill;

  public static final String SERIALIZED_NAME_FIXED_WIDTH = "fixed_width";
  @SerializedName(SERIALIZED_NAME_FIXED_WIDTH)
  private ImageData fixedWidth;

  public static final String SERIALIZED_NAME_FIXED_WIDTH_DOWNSAMPLED = "fixed_width_downsampled";
  @SerializedName(SERIALIZED_NAME_FIXED_WIDTH_DOWNSAMPLED)
  private ImageData fixedWidthDownsampled;

  public static final String SERIALIZED_NAME_FIXED_WIDTH_STILL = "fixed_width_still";
  @SerializedName(SERIALIZED_NAME_FIXED_WIDTH_STILL)
  private ImageData fixedWidthStill;

  public static final String SERIALIZED_NAME_ORIGINAL = "original";
  @SerializedName(SERIALIZED_NAME_ORIGINAL)
  private ImageData original;

  public Images() {
  }

  public Images fixedHeight(ImageData fixedHeight) {
    this.fixedHeight = fixedHeight;
    return this;
  }

  /**
   * Get fixedHeight
   * @return fixedHeight
   */
  @javax.annotation.Nonnull
  public ImageData getFixedHeight() {
    return fixedHeight;
  }

  public void setFixedHeight(ImageData fixedHeight) {
    this.fixedHeight = fixedHeight;
  }


  public Images fixedHeightDownsampled(ImageData fixedHeightDownsampled) {
    this.fixedHeightDownsampled = fixedHeightDownsampled;
    return this;
  }

  /**
   * Get fixedHeightDownsampled
   * @return fixedHeightDownsampled
   */
  @javax.annotation.Nonnull
  public ImageData getFixedHeightDownsampled() {
    return fixedHeightDownsampled;
  }

  public void setFixedHeightDownsampled(ImageData fixedHeightDownsampled) {
    this.fixedHeightDownsampled = fixedHeightDownsampled;
  }


  public Images fixedHeightStill(ImageData fixedHeightStill) {
    this.fixedHeightStill = fixedHeightStill;
    return this;
  }

  /**
   * Get fixedHeightStill
   * @return fixedHeightStill
   */
  @javax.annotation.Nonnull
  public ImageData getFixedHeightStill() {
    return fixedHeightStill;
  }

  public void setFixedHeightStill(ImageData fixedHeightStill) {
    this.fixedHeightStill = fixedHeightStill;
  }


  public Images fixedWidth(ImageData fixedWidth) {
    this.fixedWidth = fixedWidth;
    return this;
  }

  /**
   * Get fixedWidth
   * @return fixedWidth
   */
  @javax.annotation.Nonnull
  public ImageData getFixedWidth() {
    return fixedWidth;
  }

  public void setFixedWidth(ImageData fixedWidth) {
    this.fixedWidth = fixedWidth;
  }


  public Images fixedWidthDownsampled(ImageData fixedWidthDownsampled) {
    this.fixedWidthDownsampled = fixedWidthDownsampled;
    return this;
  }

  /**
   * Get fixedWidthDownsampled
   * @return fixedWidthDownsampled
   */
  @javax.annotation.Nonnull
  public ImageData getFixedWidthDownsampled() {
    return fixedWidthDownsampled;
  }

  public void setFixedWidthDownsampled(ImageData fixedWidthDownsampled) {
    this.fixedWidthDownsampled = fixedWidthDownsampled;
  }


  public Images fixedWidthStill(ImageData fixedWidthStill) {
    this.fixedWidthStill = fixedWidthStill;
    return this;
  }

  /**
   * Get fixedWidthStill
   * @return fixedWidthStill
   */
  @javax.annotation.Nonnull
  public ImageData getFixedWidthStill() {
    return fixedWidthStill;
  }

  public void setFixedWidthStill(ImageData fixedWidthStill) {
    this.fixedWidthStill = fixedWidthStill;
  }


  public Images original(ImageData original) {
    this.original = original;
    return this;
  }

  /**
   * Get original
   * @return original
   */
  @javax.annotation.Nonnull
  public ImageData getOriginal() {
    return original;
  }

  public void setOriginal(ImageData original) {
    this.original = original;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Images images = (Images) o;
    return Objects.equals(this.fixedHeight, images.fixedHeight) &&
        Objects.equals(this.fixedHeightDownsampled, images.fixedHeightDownsampled) &&
        Objects.equals(this.fixedHeightStill, images.fixedHeightStill) &&
        Objects.equals(this.fixedWidth, images.fixedWidth) &&
        Objects.equals(this.fixedWidthDownsampled, images.fixedWidthDownsampled) &&
        Objects.equals(this.fixedWidthStill, images.fixedWidthStill) &&
        Objects.equals(this.original, images.original);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fixedHeight, fixedHeightDownsampled, fixedHeightStill, fixedWidth, fixedWidthDownsampled, fixedWidthStill, original);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Images {\n");
    sb.append("    fixedHeight: ").append(toIndentedString(fixedHeight)).append("\n");
    sb.append("    fixedHeightDownsampled: ").append(toIndentedString(fixedHeightDownsampled)).append("\n");
    sb.append("    fixedHeightStill: ").append(toIndentedString(fixedHeightStill)).append("\n");
    sb.append("    fixedWidth: ").append(toIndentedString(fixedWidth)).append("\n");
    sb.append("    fixedWidthDownsampled: ").append(toIndentedString(fixedWidthDownsampled)).append("\n");
    sb.append("    fixedWidthStill: ").append(toIndentedString(fixedWidthStill)).append("\n");
    sb.append("    original: ").append(toIndentedString(original)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fixed_height");
    openapiFields.add("fixed_height_downsampled");
    openapiFields.add("fixed_height_still");
    openapiFields.add("fixed_width");
    openapiFields.add("fixed_width_downsampled");
    openapiFields.add("fixed_width_still");
    openapiFields.add("original");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("fixed_height");
    openapiRequiredFields.add("fixed_height_downsampled");
    openapiRequiredFields.add("fixed_height_still");
    openapiRequiredFields.add("fixed_width");
    openapiRequiredFields.add("fixed_width_downsampled");
    openapiRequiredFields.add("fixed_width_still");
    openapiRequiredFields.add("original");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Images
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Images.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Images is not found in the empty JSON string", Images.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Images.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Images` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Images.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `fixed_height`
      ImageData.validateJsonElement(jsonObj.get("fixed_height"));
      // validate the required field `fixed_height_downsampled`
      ImageData.validateJsonElement(jsonObj.get("fixed_height_downsampled"));
      // validate the required field `fixed_height_still`
      ImageData.validateJsonElement(jsonObj.get("fixed_height_still"));
      // validate the required field `fixed_width`
      ImageData.validateJsonElement(jsonObj.get("fixed_width"));
      // validate the required field `fixed_width_downsampled`
      ImageData.validateJsonElement(jsonObj.get("fixed_width_downsampled"));
      // validate the required field `fixed_width_still`
      ImageData.validateJsonElement(jsonObj.get("fixed_width_still"));
      // validate the required field `original`
      ImageData.validateJsonElement(jsonObj.get("original"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Images.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Images' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Images> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Images.class));

       return (TypeAdapter<T>) new TypeAdapter<Images>() {
           @Override
           public void write(JsonWriter out, Images value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Images read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Images given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Images
   * @throws IOException if the JSON string is invalid with respect to Images
   */
  public static Images fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Images.class);
  }

  /**
   * Convert an instance of Images to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

