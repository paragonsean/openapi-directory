/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChannelConfig;
import org.openapitools.client.model.ChannelMember;
import org.openapitools.client.model.UserObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Channel
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Channel {
  public static final String SERIALIZED_NAME_AUTO_TRANSLATION_ENABLED = "auto_translation_enabled";
  @SerializedName(SERIALIZED_NAME_AUTO_TRANSLATION_ENABLED)
  private Boolean autoTranslationEnabled;

  public static final String SERIALIZED_NAME_AUTO_TRANSLATION_LANGUAGE = "auto_translation_language";
  @SerializedName(SERIALIZED_NAME_AUTO_TRANSLATION_LANGUAGE)
  private String autoTranslationLanguage;

  public static final String SERIALIZED_NAME_CID = "cid";
  @SerializedName(SERIALIZED_NAME_CID)
  private String cid;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private ChannelConfig config;

  public static final String SERIALIZED_NAME_CONFIG_OVERRIDES = "config_overrides";
  @SerializedName(SERIALIZED_NAME_CONFIG_OVERRIDES)
  private ChannelConfig configOverrides;

  public static final String SERIALIZED_NAME_COOLDOWN = "cooldown";
  @SerializedName(SERIALIZED_NAME_COOLDOWN)
  private Integer cooldown;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserObject createdBy;

  public static final String SERIALIZED_NAME_DELETED_AT = "deleted_at";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private OffsetDateTime deletedAt;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_FROZEN = "frozen";
  @SerializedName(SERIALIZED_NAME_FROZEN)
  private Boolean frozen;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INVITES = "invites";
  @SerializedName(SERIALIZED_NAME_INVITES)
  private List<ChannelMember> invites = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_MESSAGE_AT = "last_message_at";
  @SerializedName(SERIALIZED_NAME_LAST_MESSAGE_AT)
  private OffsetDateTime lastMessageAt;

  public static final String SERIALIZED_NAME_MEMBER_COUNT = "member_count";
  @SerializedName(SERIALIZED_NAME_MEMBER_COUNT)
  private Integer memberCount;

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private List<ChannelMember> members = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TRUNCATED_BY = "truncated_by";
  @SerializedName(SERIALIZED_NAME_TRUNCATED_BY)
  private UserObject truncatedBy;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public Channel() {
  }

  public Channel autoTranslationEnabled(Boolean autoTranslationEnabled) {
    this.autoTranslationEnabled = autoTranslationEnabled;
    return this;
  }

  /**
   * Get autoTranslationEnabled
   * @return autoTranslationEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAutoTranslationEnabled() {
    return autoTranslationEnabled;
  }

  public void setAutoTranslationEnabled(Boolean autoTranslationEnabled) {
    this.autoTranslationEnabled = autoTranslationEnabled;
  }


  public Channel autoTranslationLanguage(String autoTranslationLanguage) {
    this.autoTranslationLanguage = autoTranslationLanguage;
    return this;
  }

  /**
   * Get autoTranslationLanguage
   * @return autoTranslationLanguage
   */
  @javax.annotation.Nonnull
  public String getAutoTranslationLanguage() {
    return autoTranslationLanguage;
  }

  public void setAutoTranslationLanguage(String autoTranslationLanguage) {
    this.autoTranslationLanguage = autoTranslationLanguage;
  }


  public Channel cid(String cid) {
    this.cid = cid;
    return this;
  }

  /**
   * Get cid
   * @return cid
   */
  @javax.annotation.Nonnull
  public String getCid() {
    return cid;
  }

  public void setCid(String cid) {
    this.cid = cid;
  }


  public Channel config(ChannelConfig config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public ChannelConfig getConfig() {
    return config;
  }

  public void setConfig(ChannelConfig config) {
    this.config = config;
  }


  public Channel configOverrides(ChannelConfig configOverrides) {
    this.configOverrides = configOverrides;
    return this;
  }

  /**
   * Get configOverrides
   * @return configOverrides
   */
  @javax.annotation.Nullable
  public ChannelConfig getConfigOverrides() {
    return configOverrides;
  }

  public void setConfigOverrides(ChannelConfig configOverrides) {
    this.configOverrides = configOverrides;
  }


  public Channel cooldown(Integer cooldown) {
    this.cooldown = cooldown;
    return this;
  }

  /**
   * Get cooldown
   * @return cooldown
   */
  @javax.annotation.Nullable
  public Integer getCooldown() {
    return cooldown;
  }

  public void setCooldown(Integer cooldown) {
    this.cooldown = cooldown;
  }


  public Channel createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Channel createdBy(UserObject createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public UserObject getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(UserObject createdBy) {
    this.createdBy = createdBy;
  }


  public Channel deletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

  /**
   * Get deletedAt
   * @return deletedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }

  public void setDeletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }


  public Channel disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Get disabled
   * @return disabled
   */
  @javax.annotation.Nonnull
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public Channel frozen(Boolean frozen) {
    this.frozen = frozen;
    return this;
  }

  /**
   * Get frozen
   * @return frozen
   */
  @javax.annotation.Nonnull
  public Boolean getFrozen() {
    return frozen;
  }

  public void setFrozen(Boolean frozen) {
    this.frozen = frozen;
  }


  public Channel id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Channel invites(List<ChannelMember> invites) {
    this.invites = invites;
    return this;
  }

  public Channel addInvitesItem(ChannelMember invitesItem) {
    if (this.invites == null) {
      this.invites = new ArrayList<>();
    }
    this.invites.add(invitesItem);
    return this;
  }

  /**
   * Get invites
   * @return invites
   */
  @javax.annotation.Nullable
  public List<ChannelMember> getInvites() {
    return invites;
  }

  public void setInvites(List<ChannelMember> invites) {
    this.invites = invites;
  }


  public Channel lastMessageAt(OffsetDateTime lastMessageAt) {
    this.lastMessageAt = lastMessageAt;
    return this;
  }

  /**
   * Get lastMessageAt
   * @return lastMessageAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastMessageAt() {
    return lastMessageAt;
  }

  public void setLastMessageAt(OffsetDateTime lastMessageAt) {
    this.lastMessageAt = lastMessageAt;
  }


  public Channel memberCount(Integer memberCount) {
    this.memberCount = memberCount;
    return this;
  }

  /**
   * Get memberCount
   * @return memberCount
   */
  @javax.annotation.Nullable
  public Integer getMemberCount() {
    return memberCount;
  }

  public void setMemberCount(Integer memberCount) {
    this.memberCount = memberCount;
  }


  public Channel members(List<ChannelMember> members) {
    this.members = members;
    return this;
  }

  public Channel addMembersItem(ChannelMember membersItem) {
    if (this.members == null) {
      this.members = new ArrayList<>();
    }
    this.members.add(membersItem);
    return this;
  }

  /**
   * Get members
   * @return members
   */
  @javax.annotation.Nullable
  public List<ChannelMember> getMembers() {
    return members;
  }

  public void setMembers(List<ChannelMember> members) {
    this.members = members;
  }


  public Channel team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public Channel truncatedBy(UserObject truncatedBy) {
    this.truncatedBy = truncatedBy;
    return this;
  }

  /**
   * Get truncatedBy
   * @return truncatedBy
   */
  @javax.annotation.Nullable
  public UserObject getTruncatedBy() {
    return truncatedBy;
  }

  public void setTruncatedBy(UserObject truncatedBy) {
    this.truncatedBy = truncatedBy;
  }


  public Channel type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Channel updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Channel instance itself
   */
  public Channel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Channel channel = (Channel) o;
    return Objects.equals(this.autoTranslationEnabled, channel.autoTranslationEnabled) &&
        Objects.equals(this.autoTranslationLanguage, channel.autoTranslationLanguage) &&
        Objects.equals(this.cid, channel.cid) &&
        Objects.equals(this.config, channel.config) &&
        Objects.equals(this.configOverrides, channel.configOverrides) &&
        Objects.equals(this.cooldown, channel.cooldown) &&
        Objects.equals(this.createdAt, channel.createdAt) &&
        Objects.equals(this.createdBy, channel.createdBy) &&
        Objects.equals(this.deletedAt, channel.deletedAt) &&
        Objects.equals(this.disabled, channel.disabled) &&
        Objects.equals(this.frozen, channel.frozen) &&
        Objects.equals(this.id, channel.id) &&
        Objects.equals(this.invites, channel.invites) &&
        Objects.equals(this.lastMessageAt, channel.lastMessageAt) &&
        Objects.equals(this.memberCount, channel.memberCount) &&
        Objects.equals(this.members, channel.members) &&
        Objects.equals(this.team, channel.team) &&
        Objects.equals(this.truncatedBy, channel.truncatedBy) &&
        Objects.equals(this.type, channel.type) &&
        Objects.equals(this.updatedAt, channel.updatedAt)&&
        Objects.equals(this.additionalProperties, channel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoTranslationEnabled, autoTranslationLanguage, cid, config, configOverrides, cooldown, createdAt, createdBy, deletedAt, disabled, frozen, id, invites, lastMessageAt, memberCount, members, team, truncatedBy, type, updatedAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Channel {\n");
    sb.append("    autoTranslationEnabled: ").append(toIndentedString(autoTranslationEnabled)).append("\n");
    sb.append("    autoTranslationLanguage: ").append(toIndentedString(autoTranslationLanguage)).append("\n");
    sb.append("    cid: ").append(toIndentedString(cid)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    configOverrides: ").append(toIndentedString(configOverrides)).append("\n");
    sb.append("    cooldown: ").append(toIndentedString(cooldown)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    frozen: ").append(toIndentedString(frozen)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    invites: ").append(toIndentedString(invites)).append("\n");
    sb.append("    lastMessageAt: ").append(toIndentedString(lastMessageAt)).append("\n");
    sb.append("    memberCount: ").append(toIndentedString(memberCount)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    truncatedBy: ").append(toIndentedString(truncatedBy)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auto_translation_enabled");
    openapiFields.add("auto_translation_language");
    openapiFields.add("cid");
    openapiFields.add("config");
    openapiFields.add("config_overrides");
    openapiFields.add("cooldown");
    openapiFields.add("created_at");
    openapiFields.add("created_by");
    openapiFields.add("deleted_at");
    openapiFields.add("disabled");
    openapiFields.add("frozen");
    openapiFields.add("id");
    openapiFields.add("invites");
    openapiFields.add("last_message_at");
    openapiFields.add("member_count");
    openapiFields.add("members");
    openapiFields.add("team");
    openapiFields.add("truncated_by");
    openapiFields.add("type");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("auto_translation_language");
    openapiRequiredFields.add("cid");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("disabled");
    openapiRequiredFields.add("frozen");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("updated_at");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Channel
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Channel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Channel is not found in the empty JSON string", Channel.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Channel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("auto_translation_language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auto_translation_language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auto_translation_language").toString()));
      }
      if (!jsonObj.get("cid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cid").toString()));
      }
      // validate the optional field `config`
      if (jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull()) {
        ChannelConfig.validateJsonElement(jsonObj.get("config"));
      }
      // validate the optional field `config_overrides`
      if (jsonObj.get("config_overrides") != null && !jsonObj.get("config_overrides").isJsonNull()) {
        ChannelConfig.validateJsonElement(jsonObj.get("config_overrides"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("invites") != null && !jsonObj.get("invites").isJsonNull()) {
        JsonArray jsonArrayinvites = jsonObj.getAsJsonArray("invites");
        if (jsonArrayinvites != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invites").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invites` to be an array in the JSON string but got `%s`", jsonObj.get("invites").toString()));
          }

          // validate the optional field `invites` (array)
          for (int i = 0; i < jsonArrayinvites.size(); i++) {
            ChannelMember.validateJsonElement(jsonArrayinvites.get(i));
          };
        }
      }
      if (jsonObj.get("members") != null && !jsonObj.get("members").isJsonNull()) {
        JsonArray jsonArraymembers = jsonObj.getAsJsonArray("members");
        if (jsonArraymembers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("members").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `members` to be an array in the JSON string but got `%s`", jsonObj.get("members").toString()));
          }

          // validate the optional field `members` (array)
          for (int i = 0; i < jsonArraymembers.size(); i++) {
            ChannelMember.validateJsonElement(jsonArraymembers.get(i));
          };
        }
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Channel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Channel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Channel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Channel.class));

       return (TypeAdapter<T>) new TypeAdapter<Channel>() {
           @Override
           public void write(JsonWriter out, Channel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Channel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             Channel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Channel given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Channel
   * @throws IOException if the JSON string is invalid with respect to Channel
   */
  public static Channel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Channel.class);
  }

  /**
   * Convert an instance of Channel to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

