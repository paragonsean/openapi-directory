/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.PolicyRequest1;
import org.openapitools.client.model.Thresholds;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateChannelTypeResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateChannelTypeResponse {
  /**
   * Gets or Sets automod
   */
  @JsonAdapter(AutomodEnum.Adapter.class)
  public enum AutomodEnum {
    DISABLED("disabled"),
    
    SIMPLE("simple"),
    
    AI("AI");

    private String value;

    AutomodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutomodEnum fromValue(String value) {
      for (AutomodEnum b : AutomodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutomodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutomodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutomodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutomodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AutomodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTOMOD = "automod";
  @SerializedName(SERIALIZED_NAME_AUTOMOD)
  private AutomodEnum automod;

  /**
   * Gets or Sets automodBehavior
   */
  @JsonAdapter(AutomodBehaviorEnum.Adapter.class)
  public enum AutomodBehaviorEnum {
    FLAG("flag"),
    
    BLOCK("block");

    private String value;

    AutomodBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutomodBehaviorEnum fromValue(String value) {
      for (AutomodBehaviorEnum b : AutomodBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutomodBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutomodBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutomodBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutomodBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AutomodBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTOMOD_BEHAVIOR = "automod_behavior";
  @SerializedName(SERIALIZED_NAME_AUTOMOD_BEHAVIOR)
  private AutomodBehaviorEnum automodBehavior;

  public static final String SERIALIZED_NAME_AUTOMOD_THRESHOLDS = "automod_thresholds";
  @SerializedName(SERIALIZED_NAME_AUTOMOD_THRESHOLDS)
  private Thresholds automodThresholds;

  public static final String SERIALIZED_NAME_BLOCKLIST = "blocklist";
  @SerializedName(SERIALIZED_NAME_BLOCKLIST)
  private String blocklist;

  /**
   * Gets or Sets blocklistBehavior
   */
  @JsonAdapter(BlocklistBehaviorEnum.Adapter.class)
  public enum BlocklistBehaviorEnum {
    FLAG("flag"),
    
    BLOCK("block");

    private String value;

    BlocklistBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BlocklistBehaviorEnum fromValue(String value) {
      for (BlocklistBehaviorEnum b : BlocklistBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BlocklistBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BlocklistBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BlocklistBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BlocklistBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BlocklistBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BLOCKLIST_BEHAVIOR = "blocklist_behavior";
  @SerializedName(SERIALIZED_NAME_BLOCKLIST_BEHAVIOR)
  private BlocklistBehaviorEnum blocklistBehavior;

  public static final String SERIALIZED_NAME_COMMANDS = "commands";
  @SerializedName(SERIALIZED_NAME_COMMANDS)
  private List<String> commands = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONNECT_EVENTS = "connect_events";
  @SerializedName(SERIALIZED_NAME_CONNECT_EVENTS)
  private Boolean connectEvents;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CUSTOM_EVENTS = "custom_events";
  @SerializedName(SERIALIZED_NAME_CUSTOM_EVENTS)
  private Boolean customEvents;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_GRANTS = "grants";
  @SerializedName(SERIALIZED_NAME_GRANTS)
  private Map<String, List<String>> grants = new HashMap<>();

  public static final String SERIALIZED_NAME_MAX_MESSAGE_LENGTH = "max_message_length";
  @SerializedName(SERIALIZED_NAME_MAX_MESSAGE_LENGTH)
  private Integer maxMessageLength;

  public static final String SERIALIZED_NAME_MESSAGE_RETENTION = "message_retention";
  @SerializedName(SERIALIZED_NAME_MESSAGE_RETENTION)
  private String messageRetention;

  public static final String SERIALIZED_NAME_MUTES = "mutes";
  @SerializedName(SERIALIZED_NAME_MUTES)
  private Boolean mutes;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<PolicyRequest1> permissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUSH_NOTIFICATIONS = "push_notifications";
  @SerializedName(SERIALIZED_NAME_PUSH_NOTIFICATIONS)
  private Boolean pushNotifications;

  public static final String SERIALIZED_NAME_QUOTES = "quotes";
  @SerializedName(SERIALIZED_NAME_QUOTES)
  private Boolean quotes;

  public static final String SERIALIZED_NAME_REACTIONS = "reactions";
  @SerializedName(SERIALIZED_NAME_REACTIONS)
  private Boolean reactions;

  public static final String SERIALIZED_NAME_READ_EVENTS = "read_events";
  @SerializedName(SERIALIZED_NAME_READ_EVENTS)
  private Boolean readEvents;

  public static final String SERIALIZED_NAME_REMINDERS = "reminders";
  @SerializedName(SERIALIZED_NAME_REMINDERS)
  private Boolean reminders;

  public static final String SERIALIZED_NAME_REPLIES = "replies";
  @SerializedName(SERIALIZED_NAME_REPLIES)
  private Boolean replies;

  public static final String SERIALIZED_NAME_SEARCH = "search";
  @SerializedName(SERIALIZED_NAME_SEARCH)
  private Boolean search;

  public static final String SERIALIZED_NAME_TYPING_EVENTS = "typing_events";
  @SerializedName(SERIALIZED_NAME_TYPING_EVENTS)
  private Boolean typingEvents;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_UPLOADS = "uploads";
  @SerializedName(SERIALIZED_NAME_UPLOADS)
  private Boolean uploads;

  public static final String SERIALIZED_NAME_URL_ENRICHMENT = "url_enrichment";
  @SerializedName(SERIALIZED_NAME_URL_ENRICHMENT)
  private Boolean urlEnrichment;

  public UpdateChannelTypeResponse() {
  }

  public UpdateChannelTypeResponse automod(AutomodEnum automod) {
    this.automod = automod;
    return this;
  }

  /**
   * Get automod
   * @return automod
   */
  @javax.annotation.Nonnull
  public AutomodEnum getAutomod() {
    return automod;
  }

  public void setAutomod(AutomodEnum automod) {
    this.automod = automod;
  }


  public UpdateChannelTypeResponse automodBehavior(AutomodBehaviorEnum automodBehavior) {
    this.automodBehavior = automodBehavior;
    return this;
  }

  /**
   * Get automodBehavior
   * @return automodBehavior
   */
  @javax.annotation.Nonnull
  public AutomodBehaviorEnum getAutomodBehavior() {
    return automodBehavior;
  }

  public void setAutomodBehavior(AutomodBehaviorEnum automodBehavior) {
    this.automodBehavior = automodBehavior;
  }


  public UpdateChannelTypeResponse automodThresholds(Thresholds automodThresholds) {
    this.automodThresholds = automodThresholds;
    return this;
  }

  /**
   * Get automodThresholds
   * @return automodThresholds
   */
  @javax.annotation.Nullable
  public Thresholds getAutomodThresholds() {
    return automodThresholds;
  }

  public void setAutomodThresholds(Thresholds automodThresholds) {
    this.automodThresholds = automodThresholds;
  }


  public UpdateChannelTypeResponse blocklist(String blocklist) {
    this.blocklist = blocklist;
    return this;
  }

  /**
   * Get blocklist
   * @return blocklist
   */
  @javax.annotation.Nullable
  public String getBlocklist() {
    return blocklist;
  }

  public void setBlocklist(String blocklist) {
    this.blocklist = blocklist;
  }


  public UpdateChannelTypeResponse blocklistBehavior(BlocklistBehaviorEnum blocklistBehavior) {
    this.blocklistBehavior = blocklistBehavior;
    return this;
  }

  /**
   * Get blocklistBehavior
   * @return blocklistBehavior
   */
  @javax.annotation.Nullable
  public BlocklistBehaviorEnum getBlocklistBehavior() {
    return blocklistBehavior;
  }

  public void setBlocklistBehavior(BlocklistBehaviorEnum blocklistBehavior) {
    this.blocklistBehavior = blocklistBehavior;
  }


  public UpdateChannelTypeResponse commands(List<String> commands) {
    this.commands = commands;
    return this;
  }

  public UpdateChannelTypeResponse addCommandsItem(String commandsItem) {
    if (this.commands == null) {
      this.commands = new ArrayList<>();
    }
    this.commands.add(commandsItem);
    return this;
  }

  /**
   * Get commands
   * @return commands
   */
  @javax.annotation.Nonnull
  public List<String> getCommands() {
    return commands;
  }

  public void setCommands(List<String> commands) {
    this.commands = commands;
  }


  public UpdateChannelTypeResponse connectEvents(Boolean connectEvents) {
    this.connectEvents = connectEvents;
    return this;
  }

  /**
   * Get connectEvents
   * @return connectEvents
   */
  @javax.annotation.Nonnull
  public Boolean getConnectEvents() {
    return connectEvents;
  }

  public void setConnectEvents(Boolean connectEvents) {
    this.connectEvents = connectEvents;
  }


  public UpdateChannelTypeResponse createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public UpdateChannelTypeResponse customEvents(Boolean customEvents) {
    this.customEvents = customEvents;
    return this;
  }

  /**
   * Get customEvents
   * @return customEvents
   */
  @javax.annotation.Nonnull
  public Boolean getCustomEvents() {
    return customEvents;
  }

  public void setCustomEvents(Boolean customEvents) {
    this.customEvents = customEvents;
  }


  public UpdateChannelTypeResponse duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nonnull
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public UpdateChannelTypeResponse grants(Map<String, List<String>> grants) {
    this.grants = grants;
    return this;
  }

  public UpdateChannelTypeResponse putGrantsItem(String key, List<String> grantsItem) {
    if (this.grants == null) {
      this.grants = new HashMap<>();
    }
    this.grants.put(key, grantsItem);
    return this;
  }

  /**
   * Get grants
   * @return grants
   */
  @javax.annotation.Nonnull
  public Map<String, List<String>> getGrants() {
    return grants;
  }

  public void setGrants(Map<String, List<String>> grants) {
    this.grants = grants;
  }


  public UpdateChannelTypeResponse maxMessageLength(Integer maxMessageLength) {
    this.maxMessageLength = maxMessageLength;
    return this;
  }

  /**
   * Get maxMessageLength
   * maximum: 20000
   * @return maxMessageLength
   */
  @javax.annotation.Nonnull
  public Integer getMaxMessageLength() {
    return maxMessageLength;
  }

  public void setMaxMessageLength(Integer maxMessageLength) {
    this.maxMessageLength = maxMessageLength;
  }


  public UpdateChannelTypeResponse messageRetention(String messageRetention) {
    this.messageRetention = messageRetention;
    return this;
  }

  /**
   * Get messageRetention
   * @return messageRetention
   */
  @javax.annotation.Nonnull
  public String getMessageRetention() {
    return messageRetention;
  }

  public void setMessageRetention(String messageRetention) {
    this.messageRetention = messageRetention;
  }


  public UpdateChannelTypeResponse mutes(Boolean mutes) {
    this.mutes = mutes;
    return this;
  }

  /**
   * Get mutes
   * @return mutes
   */
  @javax.annotation.Nonnull
  public Boolean getMutes() {
    return mutes;
  }

  public void setMutes(Boolean mutes) {
    this.mutes = mutes;
  }


  public UpdateChannelTypeResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateChannelTypeResponse permissions(List<PolicyRequest1> permissions) {
    this.permissions = permissions;
    return this;
  }

  public UpdateChannelTypeResponse addPermissionsItem(PolicyRequest1 permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nonnull
  public List<PolicyRequest1> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<PolicyRequest1> permissions) {
    this.permissions = permissions;
  }


  public UpdateChannelTypeResponse pushNotifications(Boolean pushNotifications) {
    this.pushNotifications = pushNotifications;
    return this;
  }

  /**
   * Get pushNotifications
   * @return pushNotifications
   */
  @javax.annotation.Nonnull
  public Boolean getPushNotifications() {
    return pushNotifications;
  }

  public void setPushNotifications(Boolean pushNotifications) {
    this.pushNotifications = pushNotifications;
  }


  public UpdateChannelTypeResponse quotes(Boolean quotes) {
    this.quotes = quotes;
    return this;
  }

  /**
   * Get quotes
   * @return quotes
   */
  @javax.annotation.Nonnull
  public Boolean getQuotes() {
    return quotes;
  }

  public void setQuotes(Boolean quotes) {
    this.quotes = quotes;
  }


  public UpdateChannelTypeResponse reactions(Boolean reactions) {
    this.reactions = reactions;
    return this;
  }

  /**
   * Get reactions
   * @return reactions
   */
  @javax.annotation.Nonnull
  public Boolean getReactions() {
    return reactions;
  }

  public void setReactions(Boolean reactions) {
    this.reactions = reactions;
  }


  public UpdateChannelTypeResponse readEvents(Boolean readEvents) {
    this.readEvents = readEvents;
    return this;
  }

  /**
   * Get readEvents
   * @return readEvents
   */
  @javax.annotation.Nonnull
  public Boolean getReadEvents() {
    return readEvents;
  }

  public void setReadEvents(Boolean readEvents) {
    this.readEvents = readEvents;
  }


  public UpdateChannelTypeResponse reminders(Boolean reminders) {
    this.reminders = reminders;
    return this;
  }

  /**
   * Get reminders
   * @return reminders
   */
  @javax.annotation.Nonnull
  public Boolean getReminders() {
    return reminders;
  }

  public void setReminders(Boolean reminders) {
    this.reminders = reminders;
  }


  public UpdateChannelTypeResponse replies(Boolean replies) {
    this.replies = replies;
    return this;
  }

  /**
   * Get replies
   * @return replies
   */
  @javax.annotation.Nonnull
  public Boolean getReplies() {
    return replies;
  }

  public void setReplies(Boolean replies) {
    this.replies = replies;
  }


  public UpdateChannelTypeResponse search(Boolean search) {
    this.search = search;
    return this;
  }

  /**
   * Get search
   * @return search
   */
  @javax.annotation.Nonnull
  public Boolean getSearch() {
    return search;
  }

  public void setSearch(Boolean search) {
    this.search = search;
  }


  public UpdateChannelTypeResponse typingEvents(Boolean typingEvents) {
    this.typingEvents = typingEvents;
    return this;
  }

  /**
   * Get typingEvents
   * @return typingEvents
   */
  @javax.annotation.Nonnull
  public Boolean getTypingEvents() {
    return typingEvents;
  }

  public void setTypingEvents(Boolean typingEvents) {
    this.typingEvents = typingEvents;
  }


  public UpdateChannelTypeResponse updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public UpdateChannelTypeResponse uploads(Boolean uploads) {
    this.uploads = uploads;
    return this;
  }

  /**
   * Get uploads
   * @return uploads
   */
  @javax.annotation.Nonnull
  public Boolean getUploads() {
    return uploads;
  }

  public void setUploads(Boolean uploads) {
    this.uploads = uploads;
  }


  public UpdateChannelTypeResponse urlEnrichment(Boolean urlEnrichment) {
    this.urlEnrichment = urlEnrichment;
    return this;
  }

  /**
   * Get urlEnrichment
   * @return urlEnrichment
   */
  @javax.annotation.Nonnull
  public Boolean getUrlEnrichment() {
    return urlEnrichment;
  }

  public void setUrlEnrichment(Boolean urlEnrichment) {
    this.urlEnrichment = urlEnrichment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateChannelTypeResponse updateChannelTypeResponse = (UpdateChannelTypeResponse) o;
    return Objects.equals(this.automod, updateChannelTypeResponse.automod) &&
        Objects.equals(this.automodBehavior, updateChannelTypeResponse.automodBehavior) &&
        Objects.equals(this.automodThresholds, updateChannelTypeResponse.automodThresholds) &&
        Objects.equals(this.blocklist, updateChannelTypeResponse.blocklist) &&
        Objects.equals(this.blocklistBehavior, updateChannelTypeResponse.blocklistBehavior) &&
        Objects.equals(this.commands, updateChannelTypeResponse.commands) &&
        Objects.equals(this.connectEvents, updateChannelTypeResponse.connectEvents) &&
        Objects.equals(this.createdAt, updateChannelTypeResponse.createdAt) &&
        Objects.equals(this.customEvents, updateChannelTypeResponse.customEvents) &&
        Objects.equals(this.duration, updateChannelTypeResponse.duration) &&
        Objects.equals(this.grants, updateChannelTypeResponse.grants) &&
        Objects.equals(this.maxMessageLength, updateChannelTypeResponse.maxMessageLength) &&
        Objects.equals(this.messageRetention, updateChannelTypeResponse.messageRetention) &&
        Objects.equals(this.mutes, updateChannelTypeResponse.mutes) &&
        Objects.equals(this.name, updateChannelTypeResponse.name) &&
        Objects.equals(this.permissions, updateChannelTypeResponse.permissions) &&
        Objects.equals(this.pushNotifications, updateChannelTypeResponse.pushNotifications) &&
        Objects.equals(this.quotes, updateChannelTypeResponse.quotes) &&
        Objects.equals(this.reactions, updateChannelTypeResponse.reactions) &&
        Objects.equals(this.readEvents, updateChannelTypeResponse.readEvents) &&
        Objects.equals(this.reminders, updateChannelTypeResponse.reminders) &&
        Objects.equals(this.replies, updateChannelTypeResponse.replies) &&
        Objects.equals(this.search, updateChannelTypeResponse.search) &&
        Objects.equals(this.typingEvents, updateChannelTypeResponse.typingEvents) &&
        Objects.equals(this.updatedAt, updateChannelTypeResponse.updatedAt) &&
        Objects.equals(this.uploads, updateChannelTypeResponse.uploads) &&
        Objects.equals(this.urlEnrichment, updateChannelTypeResponse.urlEnrichment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(automod, automodBehavior, automodThresholds, blocklist, blocklistBehavior, commands, connectEvents, createdAt, customEvents, duration, grants, maxMessageLength, messageRetention, mutes, name, permissions, pushNotifications, quotes, reactions, readEvents, reminders, replies, search, typingEvents, updatedAt, uploads, urlEnrichment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateChannelTypeResponse {\n");
    sb.append("    automod: ").append(toIndentedString(automod)).append("\n");
    sb.append("    automodBehavior: ").append(toIndentedString(automodBehavior)).append("\n");
    sb.append("    automodThresholds: ").append(toIndentedString(automodThresholds)).append("\n");
    sb.append("    blocklist: ").append(toIndentedString(blocklist)).append("\n");
    sb.append("    blocklistBehavior: ").append(toIndentedString(blocklistBehavior)).append("\n");
    sb.append("    commands: ").append(toIndentedString(commands)).append("\n");
    sb.append("    connectEvents: ").append(toIndentedString(connectEvents)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    customEvents: ").append(toIndentedString(customEvents)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    grants: ").append(toIndentedString(grants)).append("\n");
    sb.append("    maxMessageLength: ").append(toIndentedString(maxMessageLength)).append("\n");
    sb.append("    messageRetention: ").append(toIndentedString(messageRetention)).append("\n");
    sb.append("    mutes: ").append(toIndentedString(mutes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    pushNotifications: ").append(toIndentedString(pushNotifications)).append("\n");
    sb.append("    quotes: ").append(toIndentedString(quotes)).append("\n");
    sb.append("    reactions: ").append(toIndentedString(reactions)).append("\n");
    sb.append("    readEvents: ").append(toIndentedString(readEvents)).append("\n");
    sb.append("    reminders: ").append(toIndentedString(reminders)).append("\n");
    sb.append("    replies: ").append(toIndentedString(replies)).append("\n");
    sb.append("    search: ").append(toIndentedString(search)).append("\n");
    sb.append("    typingEvents: ").append(toIndentedString(typingEvents)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    uploads: ").append(toIndentedString(uploads)).append("\n");
    sb.append("    urlEnrichment: ").append(toIndentedString(urlEnrichment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("automod");
    openapiFields.add("automod_behavior");
    openapiFields.add("automod_thresholds");
    openapiFields.add("blocklist");
    openapiFields.add("blocklist_behavior");
    openapiFields.add("commands");
    openapiFields.add("connect_events");
    openapiFields.add("created_at");
    openapiFields.add("custom_events");
    openapiFields.add("duration");
    openapiFields.add("grants");
    openapiFields.add("max_message_length");
    openapiFields.add("message_retention");
    openapiFields.add("mutes");
    openapiFields.add("name");
    openapiFields.add("permissions");
    openapiFields.add("push_notifications");
    openapiFields.add("quotes");
    openapiFields.add("reactions");
    openapiFields.add("read_events");
    openapiFields.add("reminders");
    openapiFields.add("replies");
    openapiFields.add("search");
    openapiFields.add("typing_events");
    openapiFields.add("updated_at");
    openapiFields.add("uploads");
    openapiFields.add("url_enrichment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("automod");
    openapiRequiredFields.add("automod_behavior");
    openapiRequiredFields.add("commands");
    openapiRequiredFields.add("connect_events");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("custom_events");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("grants");
    openapiRequiredFields.add("max_message_length");
    openapiRequiredFields.add("message_retention");
    openapiRequiredFields.add("mutes");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("permissions");
    openapiRequiredFields.add("push_notifications");
    openapiRequiredFields.add("quotes");
    openapiRequiredFields.add("reactions");
    openapiRequiredFields.add("read_events");
    openapiRequiredFields.add("reminders");
    openapiRequiredFields.add("replies");
    openapiRequiredFields.add("search");
    openapiRequiredFields.add("typing_events");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("uploads");
    openapiRequiredFields.add("url_enrichment");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateChannelTypeResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateChannelTypeResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateChannelTypeResponse is not found in the empty JSON string", UpdateChannelTypeResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateChannelTypeResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateChannelTypeResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateChannelTypeResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("automod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `automod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("automod").toString()));
      }
      // validate the required field `automod`
      AutomodEnum.validateJsonElement(jsonObj.get("automod"));
      if (!jsonObj.get("automod_behavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `automod_behavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("automod_behavior").toString()));
      }
      // validate the required field `automod_behavior`
      AutomodBehaviorEnum.validateJsonElement(jsonObj.get("automod_behavior"));
      // validate the optional field `automod_thresholds`
      if (jsonObj.get("automod_thresholds") != null && !jsonObj.get("automod_thresholds").isJsonNull()) {
        Thresholds.validateJsonElement(jsonObj.get("automod_thresholds"));
      }
      if ((jsonObj.get("blocklist") != null && !jsonObj.get("blocklist").isJsonNull()) && !jsonObj.get("blocklist").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blocklist` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blocklist").toString()));
      }
      if ((jsonObj.get("blocklist_behavior") != null && !jsonObj.get("blocklist_behavior").isJsonNull()) && !jsonObj.get("blocklist_behavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blocklist_behavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blocklist_behavior").toString()));
      }
      // validate the optional field `blocklist_behavior`
      if (jsonObj.get("blocklist_behavior") != null && !jsonObj.get("blocklist_behavior").isJsonNull()) {
        BlocklistBehaviorEnum.validateJsonElement(jsonObj.get("blocklist_behavior"));
      }
      // ensure the required json array is present
      if (jsonObj.get("commands") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("commands").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `commands` to be an array in the JSON string but got `%s`", jsonObj.get("commands").toString()));
      }
      if (!jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if (!jsonObj.get("message_retention").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_retention` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_retention").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }

      JsonArray jsonArraypermissions = jsonObj.getAsJsonArray("permissions");
      // validate the required field `permissions` (array)
      for (int i = 0; i < jsonArraypermissions.size(); i++) {
        PolicyRequest1.validateJsonElement(jsonArraypermissions.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateChannelTypeResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateChannelTypeResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateChannelTypeResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateChannelTypeResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateChannelTypeResponse>() {
           @Override
           public void write(JsonWriter out, UpdateChannelTypeResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateChannelTypeResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateChannelTypeResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateChannelTypeResponse
   * @throws IOException if the JSON string is invalid with respect to UpdateChannelTypeResponse
   */
  public static UpdateChannelTypeResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateChannelTypeResponse.class);
  }

  /**
   * Convert an instance of UpdateChannelTypeResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

