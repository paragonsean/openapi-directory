/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.SortParam;
import org.openapitools.client.model.UserObject;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QueryUsersRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryUsersRequest {
  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CONNECTION_ID = "connection_id";
  @SerializedName(SERIALIZED_NAME_CONNECTION_ID)
  private String connectionId;

  public static final String SERIALIZED_NAME_FILTER_CONDITIONS = "filter_conditions";
  @SerializedName(SERIALIZED_NAME_FILTER_CONDITIONS)
  private Map<String, Object> filterConditions = new HashMap<>();

  public static final String SERIALIZED_NAME_ID_GT = "id_gt";
  @SerializedName(SERIALIZED_NAME_ID_GT)
  private String idGt;

  public static final String SERIALIZED_NAME_ID_GTE = "id_gte";
  @SerializedName(SERIALIZED_NAME_ID_GTE)
  private String idGte;

  public static final String SERIALIZED_NAME_ID_LT = "id_lt";
  @SerializedName(SERIALIZED_NAME_ID_LT)
  private String idLt;

  public static final String SERIALIZED_NAME_ID_LTE = "id_lte";
  @SerializedName(SERIALIZED_NAME_ID_LTE)
  private String idLte;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_PRESENCE = "presence";
  @SerializedName(SERIALIZED_NAME_PRESENCE)
  private Boolean presence;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private List<SortParam> sort = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserObject user;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public QueryUsersRequest() {
  }

  public QueryUsersRequest clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public QueryUsersRequest connectionId(String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

  /**
   * Get connectionId
   * @return connectionId
   */
  @javax.annotation.Nullable
  public String getConnectionId() {
    return connectionId;
  }

  public void setConnectionId(String connectionId) {
    this.connectionId = connectionId;
  }


  public QueryUsersRequest filterConditions(Map<String, Object> filterConditions) {
    this.filterConditions = filterConditions;
    return this;
  }

  public QueryUsersRequest putFilterConditionsItem(String key, Object filterConditionsItem) {
    if (this.filterConditions == null) {
      this.filterConditions = new HashMap<>();
    }
    this.filterConditions.put(key, filterConditionsItem);
    return this;
  }

  /**
   * User filters
   * @return filterConditions
   */
  @javax.annotation.Nonnull
  public Map<String, Object> getFilterConditions() {
    return filterConditions;
  }

  public void setFilterConditions(Map<String, Object> filterConditions) {
    this.filterConditions = filterConditions;
  }


  public QueryUsersRequest idGt(String idGt) {
    this.idGt = idGt;
    return this;
  }

  /**
   * Get idGt
   * @return idGt
   */
  @javax.annotation.Nullable
  public String getIdGt() {
    return idGt;
  }

  public void setIdGt(String idGt) {
    this.idGt = idGt;
  }


  public QueryUsersRequest idGte(String idGte) {
    this.idGte = idGte;
    return this;
  }

  /**
   * Get idGte
   * @return idGte
   */
  @javax.annotation.Nullable
  public String getIdGte() {
    return idGte;
  }

  public void setIdGte(String idGte) {
    this.idGte = idGte;
  }


  public QueryUsersRequest idLt(String idLt) {
    this.idLt = idLt;
    return this;
  }

  /**
   * Get idLt
   * @return idLt
   */
  @javax.annotation.Nullable
  public String getIdLt() {
    return idLt;
  }

  public void setIdLt(String idLt) {
    this.idLt = idLt;
  }


  public QueryUsersRequest idLte(String idLte) {
    this.idLte = idLte;
    return this;
  }

  /**
   * Get idLte
   * @return idLte
   */
  @javax.annotation.Nullable
  public String getIdLte() {
    return idLte;
  }

  public void setIdLte(String idLte) {
    this.idLte = idLte;
  }


  public QueryUsersRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Get limit
   * minimum: 0
   * maximum: 100
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public QueryUsersRequest offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Get offset
   * maximum: 1000
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public QueryUsersRequest presence(Boolean presence) {
    this.presence = presence;
    return this;
  }

  /**
   * Request user presence status
   * @return presence
   */
  @javax.annotation.Nullable
  public Boolean getPresence() {
    return presence;
  }

  public void setPresence(Boolean presence) {
    this.presence = presence;
  }


  public QueryUsersRequest sort(List<SortParam> sort) {
    this.sort = sort;
    return this;
  }

  public QueryUsersRequest addSortItem(SortParam sortItem) {
    if (this.sort == null) {
      this.sort = new ArrayList<>();
    }
    this.sort.add(sortItem);
    return this;
  }

  /**
   * Array of sort parameters
   * @return sort
   */
  @javax.annotation.Nonnull
  public List<SortParam> getSort() {
    return sort;
  }

  public void setSort(List<SortParam> sort) {
    this.sort = sort;
  }


  public QueryUsersRequest user(UserObject user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserObject getUser() {
    return user;
  }

  public void setUser(UserObject user) {
    this.user = user;
  }


  public QueryUsersRequest userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryUsersRequest queryUsersRequest = (QueryUsersRequest) o;
    return Objects.equals(this.clientId, queryUsersRequest.clientId) &&
        Objects.equals(this.connectionId, queryUsersRequest.connectionId) &&
        Objects.equals(this.filterConditions, queryUsersRequest.filterConditions) &&
        Objects.equals(this.idGt, queryUsersRequest.idGt) &&
        Objects.equals(this.idGte, queryUsersRequest.idGte) &&
        Objects.equals(this.idLt, queryUsersRequest.idLt) &&
        Objects.equals(this.idLte, queryUsersRequest.idLte) &&
        Objects.equals(this.limit, queryUsersRequest.limit) &&
        Objects.equals(this.offset, queryUsersRequest.offset) &&
        Objects.equals(this.presence, queryUsersRequest.presence) &&
        Objects.equals(this.sort, queryUsersRequest.sort) &&
        Objects.equals(this.user, queryUsersRequest.user) &&
        Objects.equals(this.userId, queryUsersRequest.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, connectionId, filterConditions, idGt, idGte, idLt, idLte, limit, offset, presence, sort, user, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryUsersRequest {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    filterConditions: ").append(toIndentedString(filterConditions)).append("\n");
    sb.append("    idGt: ").append(toIndentedString(idGt)).append("\n");
    sb.append("    idGte: ").append(toIndentedString(idGte)).append("\n");
    sb.append("    idLt: ").append(toIndentedString(idLt)).append("\n");
    sb.append("    idLte: ").append(toIndentedString(idLte)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    presence: ").append(toIndentedString(presence)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_id");
    openapiFields.add("connection_id");
    openapiFields.add("filter_conditions");
    openapiFields.add("id_gt");
    openapiFields.add("id_gte");
    openapiFields.add("id_lt");
    openapiFields.add("id_lte");
    openapiFields.add("limit");
    openapiFields.add("offset");
    openapiFields.add("presence");
    openapiFields.add("sort");
    openapiFields.add("user");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("filter_conditions");
    openapiRequiredFields.add("sort");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryUsersRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryUsersRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryUsersRequest is not found in the empty JSON string", QueryUsersRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryUsersRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryUsersRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QueryUsersRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("client_id") != null && !jsonObj.get("client_id").isJsonNull()) && !jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if ((jsonObj.get("connection_id") != null && !jsonObj.get("connection_id").isJsonNull()) && !jsonObj.get("connection_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connection_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connection_id").toString()));
      }
      if ((jsonObj.get("id_gt") != null && !jsonObj.get("id_gt").isJsonNull()) && !jsonObj.get("id_gt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_gt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id_gt").toString()));
      }
      if ((jsonObj.get("id_gte") != null && !jsonObj.get("id_gte").isJsonNull()) && !jsonObj.get("id_gte").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_gte` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id_gte").toString()));
      }
      if ((jsonObj.get("id_lt") != null && !jsonObj.get("id_lt").isJsonNull()) && !jsonObj.get("id_lt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_lt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id_lt").toString()));
      }
      if ((jsonObj.get("id_lte") != null && !jsonObj.get("id_lte").isJsonNull()) && !jsonObj.get("id_lte").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id_lte` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id_lte").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("sort").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort` to be an array in the JSON string but got `%s`", jsonObj.get("sort").toString()));
      }

      JsonArray jsonArraysort = jsonObj.getAsJsonArray("sort");
      // validate the required field `sort` (array)
      for (int i = 0; i < jsonArraysort.size(); i++) {
        SortParam.validateJsonElement(jsonArraysort.get(i));
      };
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryUsersRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryUsersRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryUsersRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryUsersRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryUsersRequest>() {
           @Override
           public void write(JsonWriter out, QueryUsersRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryUsersRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryUsersRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryUsersRequest
   * @throws IOException if the JSON string is invalid with respect to QueryUsersRequest
   */
  public static QueryUsersRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryUsersRequest.class);
  }

  /**
   * Convert an instance of QueryUsersRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

