/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AnyEvent;
import org.openapitools.client.model.ChannelCreatedEvent;
import org.openapitools.client.model.ChannelDeletedEvent;
import org.openapitools.client.model.ChannelFrozenEvent;
import org.openapitools.client.model.ChannelHiddenEvent;
import org.openapitools.client.model.ChannelKickedEvent;
import org.openapitools.client.model.ChannelMember;
import org.openapitools.client.model.ChannelMessages;
import org.openapitools.client.model.ChannelMutedEvent;
import org.openapitools.client.model.ChannelResponse;
import org.openapitools.client.model.ChannelTruncatedEvent;
import org.openapitools.client.model.ChannelUnFrozenEvent;
import org.openapitools.client.model.ChannelUnmutedEvent;
import org.openapitools.client.model.ChannelUpdatedEvent;
import org.openapitools.client.model.ChannelVisibleEvent;
import org.openapitools.client.model.Flag;
import org.openapitools.client.model.HealthCheckEvent;
import org.openapitools.client.model.MemberAddedEvent;
import org.openapitools.client.model.MemberRemovedEvent;
import org.openapitools.client.model.MemberUpdatedEvent;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.MessageDeletedEvent;
import org.openapitools.client.model.MessageFlaggedEvent;
import org.openapitools.client.model.MessageNewEvent;
import org.openapitools.client.model.MessageReadEvent;
import org.openapitools.client.model.MessageUnblockedEvent;
import org.openapitools.client.model.MessageUpdatedEvent;
import org.openapitools.client.model.NotificationAddedToChannelEvent;
import org.openapitools.client.model.NotificationChannelDeletedEvent;
import org.openapitools.client.model.NotificationChannelMutesUpdatedEvent;
import org.openapitools.client.model.NotificationChannelTruncatedEvent;
import org.openapitools.client.model.NotificationInviteAcceptedEvent;
import org.openapitools.client.model.NotificationInviteRejectedEvent;
import org.openapitools.client.model.NotificationInvitedEvent;
import org.openapitools.client.model.NotificationMarkReadEvent;
import org.openapitools.client.model.NotificationMarkUnreadEvent;
import org.openapitools.client.model.NotificationMutesUpdatedEvent;
import org.openapitools.client.model.NotificationNewMessageEvent;
import org.openapitools.client.model.NotificationRemovedFromChannelEvent;
import org.openapitools.client.model.OwnUser;
import org.openapitools.client.model.Reaction;
import org.openapitools.client.model.ReactionDeletedEvent;
import org.openapitools.client.model.ReactionNewEvent;
import org.openapitools.client.model.ReactionUpdatedEvent;
import org.openapitools.client.model.TypingStartEvent;
import org.openapitools.client.model.TypingStopEvent;
import org.openapitools.client.model.UserBannedEvent;
import org.openapitools.client.model.UserDeactivatedEvent;
import org.openapitools.client.model.UserDeletedEvent;
import org.openapitools.client.model.UserFlaggedEvent;
import org.openapitools.client.model.UserMutedEvent;
import org.openapitools.client.model.UserObject;
import org.openapitools.client.model.UserPresenceChangedEvent;
import org.openapitools.client.model.UserReactivatedEvent;
import org.openapitools.client.model.UserUnbannedEvent;
import org.openapitools.client.model.UserUnmutedEvent;
import org.openapitools.client.model.UserUnreadReminderEvent;
import org.openapitools.client.model.UserUpdatedEvent;
import org.openapitools.client.model.UserWatchingStartEvent;
import org.openapitools.client.model.UserWatchingStopEvent;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChatEvent extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(ChatEvent.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ChatEvent.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ChatEvent' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AnyEvent> adapterAnyEvent = gson.getDelegateAdapter(this, TypeToken.get(AnyEvent.class));
            final TypeAdapter<ChannelCreatedEvent> adapterChannelCreatedEvent = gson.getDelegateAdapter(this, TypeToken.get(ChannelCreatedEvent.class));
            final TypeAdapter<ChannelDeletedEvent> adapterChannelDeletedEvent = gson.getDelegateAdapter(this, TypeToken.get(ChannelDeletedEvent.class));
            final TypeAdapter<ChannelFrozenEvent> adapterChannelFrozenEvent = gson.getDelegateAdapter(this, TypeToken.get(ChannelFrozenEvent.class));
            final TypeAdapter<ChannelHiddenEvent> adapterChannelHiddenEvent = gson.getDelegateAdapter(this, TypeToken.get(ChannelHiddenEvent.class));
            final TypeAdapter<ChannelKickedEvent> adapterChannelKickedEvent = gson.getDelegateAdapter(this, TypeToken.get(ChannelKickedEvent.class));
            final TypeAdapter<ChannelMutedEvent> adapterChannelMutedEvent = gson.getDelegateAdapter(this, TypeToken.get(ChannelMutedEvent.class));
            final TypeAdapter<ChannelTruncatedEvent> adapterChannelTruncatedEvent = gson.getDelegateAdapter(this, TypeToken.get(ChannelTruncatedEvent.class));
            final TypeAdapter<ChannelUnFrozenEvent> adapterChannelUnFrozenEvent = gson.getDelegateAdapter(this, TypeToken.get(ChannelUnFrozenEvent.class));
            final TypeAdapter<ChannelUnmutedEvent> adapterChannelUnmutedEvent = gson.getDelegateAdapter(this, TypeToken.get(ChannelUnmutedEvent.class));
            final TypeAdapter<ChannelUpdatedEvent> adapterChannelUpdatedEvent = gson.getDelegateAdapter(this, TypeToken.get(ChannelUpdatedEvent.class));
            final TypeAdapter<ChannelVisibleEvent> adapterChannelVisibleEvent = gson.getDelegateAdapter(this, TypeToken.get(ChannelVisibleEvent.class));
            final TypeAdapter<HealthCheckEvent> adapterHealthCheckEvent = gson.getDelegateAdapter(this, TypeToken.get(HealthCheckEvent.class));
            final TypeAdapter<MemberAddedEvent> adapterMemberAddedEvent = gson.getDelegateAdapter(this, TypeToken.get(MemberAddedEvent.class));
            final TypeAdapter<MemberRemovedEvent> adapterMemberRemovedEvent = gson.getDelegateAdapter(this, TypeToken.get(MemberRemovedEvent.class));
            final TypeAdapter<MemberUpdatedEvent> adapterMemberUpdatedEvent = gson.getDelegateAdapter(this, TypeToken.get(MemberUpdatedEvent.class));
            final TypeAdapter<MessageDeletedEvent> adapterMessageDeletedEvent = gson.getDelegateAdapter(this, TypeToken.get(MessageDeletedEvent.class));
            final TypeAdapter<MessageFlaggedEvent> adapterMessageFlaggedEvent = gson.getDelegateAdapter(this, TypeToken.get(MessageFlaggedEvent.class));
            final TypeAdapter<MessageNewEvent> adapterMessageNewEvent = gson.getDelegateAdapter(this, TypeToken.get(MessageNewEvent.class));
            final TypeAdapter<MessageReadEvent> adapterMessageReadEvent = gson.getDelegateAdapter(this, TypeToken.get(MessageReadEvent.class));
            final TypeAdapter<MessageUnblockedEvent> adapterMessageUnblockedEvent = gson.getDelegateAdapter(this, TypeToken.get(MessageUnblockedEvent.class));
            final TypeAdapter<MessageUpdatedEvent> adapterMessageUpdatedEvent = gson.getDelegateAdapter(this, TypeToken.get(MessageUpdatedEvent.class));
            final TypeAdapter<NotificationAddedToChannelEvent> adapterNotificationAddedToChannelEvent = gson.getDelegateAdapter(this, TypeToken.get(NotificationAddedToChannelEvent.class));
            final TypeAdapter<NotificationChannelDeletedEvent> adapterNotificationChannelDeletedEvent = gson.getDelegateAdapter(this, TypeToken.get(NotificationChannelDeletedEvent.class));
            final TypeAdapter<NotificationChannelMutesUpdatedEvent> adapterNotificationChannelMutesUpdatedEvent = gson.getDelegateAdapter(this, TypeToken.get(NotificationChannelMutesUpdatedEvent.class));
            final TypeAdapter<NotificationChannelTruncatedEvent> adapterNotificationChannelTruncatedEvent = gson.getDelegateAdapter(this, TypeToken.get(NotificationChannelTruncatedEvent.class));
            final TypeAdapter<NotificationInviteAcceptedEvent> adapterNotificationInviteAcceptedEvent = gson.getDelegateAdapter(this, TypeToken.get(NotificationInviteAcceptedEvent.class));
            final TypeAdapter<NotificationInviteRejectedEvent> adapterNotificationInviteRejectedEvent = gson.getDelegateAdapter(this, TypeToken.get(NotificationInviteRejectedEvent.class));
            final TypeAdapter<NotificationInvitedEvent> adapterNotificationInvitedEvent = gson.getDelegateAdapter(this, TypeToken.get(NotificationInvitedEvent.class));
            final TypeAdapter<NotificationMarkReadEvent> adapterNotificationMarkReadEvent = gson.getDelegateAdapter(this, TypeToken.get(NotificationMarkReadEvent.class));
            final TypeAdapter<NotificationMarkUnreadEvent> adapterNotificationMarkUnreadEvent = gson.getDelegateAdapter(this, TypeToken.get(NotificationMarkUnreadEvent.class));
            final TypeAdapter<NotificationMutesUpdatedEvent> adapterNotificationMutesUpdatedEvent = gson.getDelegateAdapter(this, TypeToken.get(NotificationMutesUpdatedEvent.class));
            final TypeAdapter<NotificationNewMessageEvent> adapterNotificationNewMessageEvent = gson.getDelegateAdapter(this, TypeToken.get(NotificationNewMessageEvent.class));
            final TypeAdapter<NotificationRemovedFromChannelEvent> adapterNotificationRemovedFromChannelEvent = gson.getDelegateAdapter(this, TypeToken.get(NotificationRemovedFromChannelEvent.class));
            final TypeAdapter<ReactionDeletedEvent> adapterReactionDeletedEvent = gson.getDelegateAdapter(this, TypeToken.get(ReactionDeletedEvent.class));
            final TypeAdapter<ReactionNewEvent> adapterReactionNewEvent = gson.getDelegateAdapter(this, TypeToken.get(ReactionNewEvent.class));
            final TypeAdapter<ReactionUpdatedEvent> adapterReactionUpdatedEvent = gson.getDelegateAdapter(this, TypeToken.get(ReactionUpdatedEvent.class));
            final TypeAdapter<TypingStartEvent> adapterTypingStartEvent = gson.getDelegateAdapter(this, TypeToken.get(TypingStartEvent.class));
            final TypeAdapter<TypingStopEvent> adapterTypingStopEvent = gson.getDelegateAdapter(this, TypeToken.get(TypingStopEvent.class));
            final TypeAdapter<UserBannedEvent> adapterUserBannedEvent = gson.getDelegateAdapter(this, TypeToken.get(UserBannedEvent.class));
            final TypeAdapter<UserDeactivatedEvent> adapterUserDeactivatedEvent = gson.getDelegateAdapter(this, TypeToken.get(UserDeactivatedEvent.class));
            final TypeAdapter<UserDeletedEvent> adapterUserDeletedEvent = gson.getDelegateAdapter(this, TypeToken.get(UserDeletedEvent.class));
            final TypeAdapter<UserFlaggedEvent> adapterUserFlaggedEvent = gson.getDelegateAdapter(this, TypeToken.get(UserFlaggedEvent.class));
            final TypeAdapter<UserMutedEvent> adapterUserMutedEvent = gson.getDelegateAdapter(this, TypeToken.get(UserMutedEvent.class));
            final TypeAdapter<UserPresenceChangedEvent> adapterUserPresenceChangedEvent = gson.getDelegateAdapter(this, TypeToken.get(UserPresenceChangedEvent.class));
            final TypeAdapter<UserReactivatedEvent> adapterUserReactivatedEvent = gson.getDelegateAdapter(this, TypeToken.get(UserReactivatedEvent.class));
            final TypeAdapter<UserUnbannedEvent> adapterUserUnbannedEvent = gson.getDelegateAdapter(this, TypeToken.get(UserUnbannedEvent.class));
            final TypeAdapter<UserUnmutedEvent> adapterUserUnmutedEvent = gson.getDelegateAdapter(this, TypeToken.get(UserUnmutedEvent.class));
            final TypeAdapter<UserUnreadReminderEvent> adapterUserUnreadReminderEvent = gson.getDelegateAdapter(this, TypeToken.get(UserUnreadReminderEvent.class));
            final TypeAdapter<UserUpdatedEvent> adapterUserUpdatedEvent = gson.getDelegateAdapter(this, TypeToken.get(UserUpdatedEvent.class));
            final TypeAdapter<UserWatchingStartEvent> adapterUserWatchingStartEvent = gson.getDelegateAdapter(this, TypeToken.get(UserWatchingStartEvent.class));
            final TypeAdapter<UserWatchingStopEvent> adapterUserWatchingStopEvent = gson.getDelegateAdapter(this, TypeToken.get(UserWatchingStopEvent.class));

            return (TypeAdapter<T>) new TypeAdapter<ChatEvent>() {
                @Override
                public void write(JsonWriter out, ChatEvent value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `AnyEvent`
                    if (value.getActualInstance() instanceof AnyEvent) {
                        JsonElement element = adapterAnyEvent.toJsonTree((AnyEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ChannelCreatedEvent`
                    if (value.getActualInstance() instanceof ChannelCreatedEvent) {
                        JsonElement element = adapterChannelCreatedEvent.toJsonTree((ChannelCreatedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ChannelDeletedEvent`
                    if (value.getActualInstance() instanceof ChannelDeletedEvent) {
                        JsonElement element = adapterChannelDeletedEvent.toJsonTree((ChannelDeletedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ChannelFrozenEvent`
                    if (value.getActualInstance() instanceof ChannelFrozenEvent) {
                        JsonElement element = adapterChannelFrozenEvent.toJsonTree((ChannelFrozenEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ChannelHiddenEvent`
                    if (value.getActualInstance() instanceof ChannelHiddenEvent) {
                        JsonElement element = adapterChannelHiddenEvent.toJsonTree((ChannelHiddenEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ChannelKickedEvent`
                    if (value.getActualInstance() instanceof ChannelKickedEvent) {
                        JsonElement element = adapterChannelKickedEvent.toJsonTree((ChannelKickedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ChannelMutedEvent`
                    if (value.getActualInstance() instanceof ChannelMutedEvent) {
                        JsonElement element = adapterChannelMutedEvent.toJsonTree((ChannelMutedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ChannelTruncatedEvent`
                    if (value.getActualInstance() instanceof ChannelTruncatedEvent) {
                        JsonElement element = adapterChannelTruncatedEvent.toJsonTree((ChannelTruncatedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ChannelUnFrozenEvent`
                    if (value.getActualInstance() instanceof ChannelUnFrozenEvent) {
                        JsonElement element = adapterChannelUnFrozenEvent.toJsonTree((ChannelUnFrozenEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ChannelUnmutedEvent`
                    if (value.getActualInstance() instanceof ChannelUnmutedEvent) {
                        JsonElement element = adapterChannelUnmutedEvent.toJsonTree((ChannelUnmutedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ChannelUpdatedEvent`
                    if (value.getActualInstance() instanceof ChannelUpdatedEvent) {
                        JsonElement element = adapterChannelUpdatedEvent.toJsonTree((ChannelUpdatedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ChannelVisibleEvent`
                    if (value.getActualInstance() instanceof ChannelVisibleEvent) {
                        JsonElement element = adapterChannelVisibleEvent.toJsonTree((ChannelVisibleEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `HealthCheckEvent`
                    if (value.getActualInstance() instanceof HealthCheckEvent) {
                        JsonElement element = adapterHealthCheckEvent.toJsonTree((HealthCheckEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MemberAddedEvent`
                    if (value.getActualInstance() instanceof MemberAddedEvent) {
                        JsonElement element = adapterMemberAddedEvent.toJsonTree((MemberAddedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MemberRemovedEvent`
                    if (value.getActualInstance() instanceof MemberRemovedEvent) {
                        JsonElement element = adapterMemberRemovedEvent.toJsonTree((MemberRemovedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MemberUpdatedEvent`
                    if (value.getActualInstance() instanceof MemberUpdatedEvent) {
                        JsonElement element = adapterMemberUpdatedEvent.toJsonTree((MemberUpdatedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MessageDeletedEvent`
                    if (value.getActualInstance() instanceof MessageDeletedEvent) {
                        JsonElement element = adapterMessageDeletedEvent.toJsonTree((MessageDeletedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MessageFlaggedEvent`
                    if (value.getActualInstance() instanceof MessageFlaggedEvent) {
                        JsonElement element = adapterMessageFlaggedEvent.toJsonTree((MessageFlaggedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MessageNewEvent`
                    if (value.getActualInstance() instanceof MessageNewEvent) {
                        JsonElement element = adapterMessageNewEvent.toJsonTree((MessageNewEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MessageReadEvent`
                    if (value.getActualInstance() instanceof MessageReadEvent) {
                        JsonElement element = adapterMessageReadEvent.toJsonTree((MessageReadEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MessageUnblockedEvent`
                    if (value.getActualInstance() instanceof MessageUnblockedEvent) {
                        JsonElement element = adapterMessageUnblockedEvent.toJsonTree((MessageUnblockedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MessageUpdatedEvent`
                    if (value.getActualInstance() instanceof MessageUpdatedEvent) {
                        JsonElement element = adapterMessageUpdatedEvent.toJsonTree((MessageUpdatedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `NotificationAddedToChannelEvent`
                    if (value.getActualInstance() instanceof NotificationAddedToChannelEvent) {
                        JsonElement element = adapterNotificationAddedToChannelEvent.toJsonTree((NotificationAddedToChannelEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `NotificationChannelDeletedEvent`
                    if (value.getActualInstance() instanceof NotificationChannelDeletedEvent) {
                        JsonElement element = adapterNotificationChannelDeletedEvent.toJsonTree((NotificationChannelDeletedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `NotificationChannelMutesUpdatedEvent`
                    if (value.getActualInstance() instanceof NotificationChannelMutesUpdatedEvent) {
                        JsonElement element = adapterNotificationChannelMutesUpdatedEvent.toJsonTree((NotificationChannelMutesUpdatedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `NotificationChannelTruncatedEvent`
                    if (value.getActualInstance() instanceof NotificationChannelTruncatedEvent) {
                        JsonElement element = adapterNotificationChannelTruncatedEvent.toJsonTree((NotificationChannelTruncatedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `NotificationInviteAcceptedEvent`
                    if (value.getActualInstance() instanceof NotificationInviteAcceptedEvent) {
                        JsonElement element = adapterNotificationInviteAcceptedEvent.toJsonTree((NotificationInviteAcceptedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `NotificationInviteRejectedEvent`
                    if (value.getActualInstance() instanceof NotificationInviteRejectedEvent) {
                        JsonElement element = adapterNotificationInviteRejectedEvent.toJsonTree((NotificationInviteRejectedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `NotificationInvitedEvent`
                    if (value.getActualInstance() instanceof NotificationInvitedEvent) {
                        JsonElement element = adapterNotificationInvitedEvent.toJsonTree((NotificationInvitedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `NotificationMarkReadEvent`
                    if (value.getActualInstance() instanceof NotificationMarkReadEvent) {
                        JsonElement element = adapterNotificationMarkReadEvent.toJsonTree((NotificationMarkReadEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `NotificationMarkUnreadEvent`
                    if (value.getActualInstance() instanceof NotificationMarkUnreadEvent) {
                        JsonElement element = adapterNotificationMarkUnreadEvent.toJsonTree((NotificationMarkUnreadEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `NotificationMutesUpdatedEvent`
                    if (value.getActualInstance() instanceof NotificationMutesUpdatedEvent) {
                        JsonElement element = adapterNotificationMutesUpdatedEvent.toJsonTree((NotificationMutesUpdatedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `NotificationNewMessageEvent`
                    if (value.getActualInstance() instanceof NotificationNewMessageEvent) {
                        JsonElement element = adapterNotificationNewMessageEvent.toJsonTree((NotificationNewMessageEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `NotificationRemovedFromChannelEvent`
                    if (value.getActualInstance() instanceof NotificationRemovedFromChannelEvent) {
                        JsonElement element = adapterNotificationRemovedFromChannelEvent.toJsonTree((NotificationRemovedFromChannelEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ReactionDeletedEvent`
                    if (value.getActualInstance() instanceof ReactionDeletedEvent) {
                        JsonElement element = adapterReactionDeletedEvent.toJsonTree((ReactionDeletedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ReactionNewEvent`
                    if (value.getActualInstance() instanceof ReactionNewEvent) {
                        JsonElement element = adapterReactionNewEvent.toJsonTree((ReactionNewEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ReactionUpdatedEvent`
                    if (value.getActualInstance() instanceof ReactionUpdatedEvent) {
                        JsonElement element = adapterReactionUpdatedEvent.toJsonTree((ReactionUpdatedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TypingStartEvent`
                    if (value.getActualInstance() instanceof TypingStartEvent) {
                        JsonElement element = adapterTypingStartEvent.toJsonTree((TypingStartEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TypingStopEvent`
                    if (value.getActualInstance() instanceof TypingStopEvent) {
                        JsonElement element = adapterTypingStopEvent.toJsonTree((TypingStopEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserBannedEvent`
                    if (value.getActualInstance() instanceof UserBannedEvent) {
                        JsonElement element = adapterUserBannedEvent.toJsonTree((UserBannedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserDeactivatedEvent`
                    if (value.getActualInstance() instanceof UserDeactivatedEvent) {
                        JsonElement element = adapterUserDeactivatedEvent.toJsonTree((UserDeactivatedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserDeletedEvent`
                    if (value.getActualInstance() instanceof UserDeletedEvent) {
                        JsonElement element = adapterUserDeletedEvent.toJsonTree((UserDeletedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserFlaggedEvent`
                    if (value.getActualInstance() instanceof UserFlaggedEvent) {
                        JsonElement element = adapterUserFlaggedEvent.toJsonTree((UserFlaggedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserMutedEvent`
                    if (value.getActualInstance() instanceof UserMutedEvent) {
                        JsonElement element = adapterUserMutedEvent.toJsonTree((UserMutedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserPresenceChangedEvent`
                    if (value.getActualInstance() instanceof UserPresenceChangedEvent) {
                        JsonElement element = adapterUserPresenceChangedEvent.toJsonTree((UserPresenceChangedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserReactivatedEvent`
                    if (value.getActualInstance() instanceof UserReactivatedEvent) {
                        JsonElement element = adapterUserReactivatedEvent.toJsonTree((UserReactivatedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserUnbannedEvent`
                    if (value.getActualInstance() instanceof UserUnbannedEvent) {
                        JsonElement element = adapterUserUnbannedEvent.toJsonTree((UserUnbannedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserUnmutedEvent`
                    if (value.getActualInstance() instanceof UserUnmutedEvent) {
                        JsonElement element = adapterUserUnmutedEvent.toJsonTree((UserUnmutedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserUnreadReminderEvent`
                    if (value.getActualInstance() instanceof UserUnreadReminderEvent) {
                        JsonElement element = adapterUserUnreadReminderEvent.toJsonTree((UserUnreadReminderEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserUpdatedEvent`
                    if (value.getActualInstance() instanceof UserUpdatedEvent) {
                        JsonElement element = adapterUserUpdatedEvent.toJsonTree((UserUpdatedEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserWatchingStartEvent`
                    if (value.getActualInstance() instanceof UserWatchingStartEvent) {
                        JsonElement element = adapterUserWatchingStartEvent.toJsonTree((UserWatchingStartEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UserWatchingStopEvent`
                    if (value.getActualInstance() instanceof UserWatchingStopEvent) {
                        JsonElement element = adapterUserWatchingStopEvent.toJsonTree((UserWatchingStopEvent)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: AnyEvent, ChannelCreatedEvent, ChannelDeletedEvent, ChannelFrozenEvent, ChannelHiddenEvent, ChannelKickedEvent, ChannelMutedEvent, ChannelTruncatedEvent, ChannelUnFrozenEvent, ChannelUnmutedEvent, ChannelUpdatedEvent, ChannelVisibleEvent, HealthCheckEvent, MemberAddedEvent, MemberRemovedEvent, MemberUpdatedEvent, MessageDeletedEvent, MessageFlaggedEvent, MessageNewEvent, MessageReadEvent, MessageUnblockedEvent, MessageUpdatedEvent, NotificationAddedToChannelEvent, NotificationChannelDeletedEvent, NotificationChannelMutesUpdatedEvent, NotificationChannelTruncatedEvent, NotificationInviteAcceptedEvent, NotificationInviteRejectedEvent, NotificationInvitedEvent, NotificationMarkReadEvent, NotificationMarkUnreadEvent, NotificationMutesUpdatedEvent, NotificationNewMessageEvent, NotificationRemovedFromChannelEvent, ReactionDeletedEvent, ReactionNewEvent, ReactionUpdatedEvent, TypingStartEvent, TypingStopEvent, UserBannedEvent, UserDeactivatedEvent, UserDeletedEvent, UserFlaggedEvent, UserMutedEvent, UserPresenceChangedEvent, UserReactivatedEvent, UserUnbannedEvent, UserUnmutedEvent, UserUnreadReminderEvent, UserUpdatedEvent, UserWatchingStartEvent, UserWatchingStopEvent");
                }

                @Override
                public ChatEvent read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize AnyEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AnyEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterAnyEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AnyEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AnyEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AnyEvent'", e);
                    }
                    // deserialize ChannelCreatedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChannelCreatedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterChannelCreatedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ChannelCreatedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChannelCreatedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChannelCreatedEvent'", e);
                    }
                    // deserialize ChannelDeletedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChannelDeletedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterChannelDeletedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ChannelDeletedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChannelDeletedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChannelDeletedEvent'", e);
                    }
                    // deserialize ChannelFrozenEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChannelFrozenEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterChannelFrozenEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ChannelFrozenEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChannelFrozenEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChannelFrozenEvent'", e);
                    }
                    // deserialize ChannelHiddenEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChannelHiddenEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterChannelHiddenEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ChannelHiddenEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChannelHiddenEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChannelHiddenEvent'", e);
                    }
                    // deserialize ChannelKickedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChannelKickedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterChannelKickedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ChannelKickedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChannelKickedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChannelKickedEvent'", e);
                    }
                    // deserialize ChannelMutedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChannelMutedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterChannelMutedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ChannelMutedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChannelMutedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChannelMutedEvent'", e);
                    }
                    // deserialize ChannelTruncatedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChannelTruncatedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterChannelTruncatedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ChannelTruncatedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChannelTruncatedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChannelTruncatedEvent'", e);
                    }
                    // deserialize ChannelUnFrozenEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChannelUnFrozenEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterChannelUnFrozenEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ChannelUnFrozenEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChannelUnFrozenEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChannelUnFrozenEvent'", e);
                    }
                    // deserialize ChannelUnmutedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChannelUnmutedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterChannelUnmutedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ChannelUnmutedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChannelUnmutedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChannelUnmutedEvent'", e);
                    }
                    // deserialize ChannelUpdatedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChannelUpdatedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterChannelUpdatedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ChannelUpdatedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChannelUpdatedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChannelUpdatedEvent'", e);
                    }
                    // deserialize ChannelVisibleEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ChannelVisibleEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterChannelVisibleEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ChannelVisibleEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ChannelVisibleEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ChannelVisibleEvent'", e);
                    }
                    // deserialize HealthCheckEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        HealthCheckEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterHealthCheckEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'HealthCheckEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for HealthCheckEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'HealthCheckEvent'", e);
                    }
                    // deserialize MemberAddedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MemberAddedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterMemberAddedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MemberAddedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MemberAddedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MemberAddedEvent'", e);
                    }
                    // deserialize MemberRemovedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MemberRemovedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterMemberRemovedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MemberRemovedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MemberRemovedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MemberRemovedEvent'", e);
                    }
                    // deserialize MemberUpdatedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MemberUpdatedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterMemberUpdatedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MemberUpdatedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MemberUpdatedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MemberUpdatedEvent'", e);
                    }
                    // deserialize MessageDeletedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MessageDeletedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterMessageDeletedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MessageDeletedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MessageDeletedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MessageDeletedEvent'", e);
                    }
                    // deserialize MessageFlaggedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MessageFlaggedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterMessageFlaggedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MessageFlaggedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MessageFlaggedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MessageFlaggedEvent'", e);
                    }
                    // deserialize MessageNewEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MessageNewEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterMessageNewEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MessageNewEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MessageNewEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MessageNewEvent'", e);
                    }
                    // deserialize MessageReadEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MessageReadEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterMessageReadEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MessageReadEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MessageReadEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MessageReadEvent'", e);
                    }
                    // deserialize MessageUnblockedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MessageUnblockedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterMessageUnblockedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MessageUnblockedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MessageUnblockedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MessageUnblockedEvent'", e);
                    }
                    // deserialize MessageUpdatedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MessageUpdatedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterMessageUpdatedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MessageUpdatedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MessageUpdatedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MessageUpdatedEvent'", e);
                    }
                    // deserialize NotificationAddedToChannelEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        NotificationAddedToChannelEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterNotificationAddedToChannelEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'NotificationAddedToChannelEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for NotificationAddedToChannelEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'NotificationAddedToChannelEvent'", e);
                    }
                    // deserialize NotificationChannelDeletedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        NotificationChannelDeletedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterNotificationChannelDeletedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'NotificationChannelDeletedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for NotificationChannelDeletedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'NotificationChannelDeletedEvent'", e);
                    }
                    // deserialize NotificationChannelMutesUpdatedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        NotificationChannelMutesUpdatedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterNotificationChannelMutesUpdatedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'NotificationChannelMutesUpdatedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for NotificationChannelMutesUpdatedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'NotificationChannelMutesUpdatedEvent'", e);
                    }
                    // deserialize NotificationChannelTruncatedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        NotificationChannelTruncatedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterNotificationChannelTruncatedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'NotificationChannelTruncatedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for NotificationChannelTruncatedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'NotificationChannelTruncatedEvent'", e);
                    }
                    // deserialize NotificationInviteAcceptedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        NotificationInviteAcceptedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterNotificationInviteAcceptedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'NotificationInviteAcceptedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for NotificationInviteAcceptedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'NotificationInviteAcceptedEvent'", e);
                    }
                    // deserialize NotificationInviteRejectedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        NotificationInviteRejectedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterNotificationInviteRejectedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'NotificationInviteRejectedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for NotificationInviteRejectedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'NotificationInviteRejectedEvent'", e);
                    }
                    // deserialize NotificationInvitedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        NotificationInvitedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterNotificationInvitedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'NotificationInvitedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for NotificationInvitedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'NotificationInvitedEvent'", e);
                    }
                    // deserialize NotificationMarkReadEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        NotificationMarkReadEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterNotificationMarkReadEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'NotificationMarkReadEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for NotificationMarkReadEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'NotificationMarkReadEvent'", e);
                    }
                    // deserialize NotificationMarkUnreadEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        NotificationMarkUnreadEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterNotificationMarkUnreadEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'NotificationMarkUnreadEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for NotificationMarkUnreadEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'NotificationMarkUnreadEvent'", e);
                    }
                    // deserialize NotificationMutesUpdatedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        NotificationMutesUpdatedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterNotificationMutesUpdatedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'NotificationMutesUpdatedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for NotificationMutesUpdatedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'NotificationMutesUpdatedEvent'", e);
                    }
                    // deserialize NotificationNewMessageEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        NotificationNewMessageEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterNotificationNewMessageEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'NotificationNewMessageEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for NotificationNewMessageEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'NotificationNewMessageEvent'", e);
                    }
                    // deserialize NotificationRemovedFromChannelEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        NotificationRemovedFromChannelEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterNotificationRemovedFromChannelEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'NotificationRemovedFromChannelEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for NotificationRemovedFromChannelEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'NotificationRemovedFromChannelEvent'", e);
                    }
                    // deserialize ReactionDeletedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ReactionDeletedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterReactionDeletedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ReactionDeletedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ReactionDeletedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ReactionDeletedEvent'", e);
                    }
                    // deserialize ReactionNewEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ReactionNewEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterReactionNewEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ReactionNewEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ReactionNewEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ReactionNewEvent'", e);
                    }
                    // deserialize ReactionUpdatedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ReactionUpdatedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterReactionUpdatedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ReactionUpdatedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ReactionUpdatedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ReactionUpdatedEvent'", e);
                    }
                    // deserialize TypingStartEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TypingStartEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterTypingStartEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TypingStartEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TypingStartEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TypingStartEvent'", e);
                    }
                    // deserialize TypingStopEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TypingStopEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterTypingStopEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TypingStopEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TypingStopEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TypingStopEvent'", e);
                    }
                    // deserialize UserBannedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserBannedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserBannedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserBannedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserBannedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserBannedEvent'", e);
                    }
                    // deserialize UserDeactivatedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserDeactivatedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserDeactivatedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserDeactivatedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserDeactivatedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserDeactivatedEvent'", e);
                    }
                    // deserialize UserDeletedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserDeletedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserDeletedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserDeletedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserDeletedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserDeletedEvent'", e);
                    }
                    // deserialize UserFlaggedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserFlaggedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserFlaggedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserFlaggedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserFlaggedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserFlaggedEvent'", e);
                    }
                    // deserialize UserMutedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserMutedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserMutedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserMutedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserMutedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserMutedEvent'", e);
                    }
                    // deserialize UserPresenceChangedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserPresenceChangedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserPresenceChangedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserPresenceChangedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserPresenceChangedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserPresenceChangedEvent'", e);
                    }
                    // deserialize UserReactivatedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserReactivatedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserReactivatedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserReactivatedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserReactivatedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserReactivatedEvent'", e);
                    }
                    // deserialize UserUnbannedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserUnbannedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserUnbannedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserUnbannedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserUnbannedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserUnbannedEvent'", e);
                    }
                    // deserialize UserUnmutedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserUnmutedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserUnmutedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserUnmutedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserUnmutedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserUnmutedEvent'", e);
                    }
                    // deserialize UserUnreadReminderEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserUnreadReminderEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserUnreadReminderEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserUnreadReminderEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserUnreadReminderEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserUnreadReminderEvent'", e);
                    }
                    // deserialize UserUpdatedEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserUpdatedEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserUpdatedEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserUpdatedEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserUpdatedEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserUpdatedEvent'", e);
                    }
                    // deserialize UserWatchingStartEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserWatchingStartEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserWatchingStartEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserWatchingStartEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserWatchingStartEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserWatchingStartEvent'", e);
                    }
                    // deserialize UserWatchingStopEvent
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UserWatchingStopEvent.validateJsonElement(jsonElement);
                        actualAdapter = adapterUserWatchingStopEvent;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UserWatchingStopEvent'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UserWatchingStopEvent failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UserWatchingStopEvent'", e);
                    }

                    if (match == 1) {
                        ChatEvent ret = new ChatEvent();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for ChatEvent: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public ChatEvent() {
        super("oneOf", Boolean.FALSE);
    }

    public ChatEvent(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AnyEvent", AnyEvent.class);
        schemas.put("ChannelCreatedEvent", ChannelCreatedEvent.class);
        schemas.put("ChannelDeletedEvent", ChannelDeletedEvent.class);
        schemas.put("ChannelFrozenEvent", ChannelFrozenEvent.class);
        schemas.put("ChannelHiddenEvent", ChannelHiddenEvent.class);
        schemas.put("ChannelKickedEvent", ChannelKickedEvent.class);
        schemas.put("ChannelMutedEvent", ChannelMutedEvent.class);
        schemas.put("ChannelTruncatedEvent", ChannelTruncatedEvent.class);
        schemas.put("ChannelUnFrozenEvent", ChannelUnFrozenEvent.class);
        schemas.put("ChannelUnmutedEvent", ChannelUnmutedEvent.class);
        schemas.put("ChannelUpdatedEvent", ChannelUpdatedEvent.class);
        schemas.put("ChannelVisibleEvent", ChannelVisibleEvent.class);
        schemas.put("HealthCheckEvent", HealthCheckEvent.class);
        schemas.put("MemberAddedEvent", MemberAddedEvent.class);
        schemas.put("MemberRemovedEvent", MemberRemovedEvent.class);
        schemas.put("MemberUpdatedEvent", MemberUpdatedEvent.class);
        schemas.put("MessageDeletedEvent", MessageDeletedEvent.class);
        schemas.put("MessageFlaggedEvent", MessageFlaggedEvent.class);
        schemas.put("MessageNewEvent", MessageNewEvent.class);
        schemas.put("MessageReadEvent", MessageReadEvent.class);
        schemas.put("MessageUnblockedEvent", MessageUnblockedEvent.class);
        schemas.put("MessageUpdatedEvent", MessageUpdatedEvent.class);
        schemas.put("NotificationAddedToChannelEvent", NotificationAddedToChannelEvent.class);
        schemas.put("NotificationChannelDeletedEvent", NotificationChannelDeletedEvent.class);
        schemas.put("NotificationChannelMutesUpdatedEvent", NotificationChannelMutesUpdatedEvent.class);
        schemas.put("NotificationChannelTruncatedEvent", NotificationChannelTruncatedEvent.class);
        schemas.put("NotificationInviteAcceptedEvent", NotificationInviteAcceptedEvent.class);
        schemas.put("NotificationInviteRejectedEvent", NotificationInviteRejectedEvent.class);
        schemas.put("NotificationInvitedEvent", NotificationInvitedEvent.class);
        schemas.put("NotificationMarkReadEvent", NotificationMarkReadEvent.class);
        schemas.put("NotificationMarkUnreadEvent", NotificationMarkUnreadEvent.class);
        schemas.put("NotificationMutesUpdatedEvent", NotificationMutesUpdatedEvent.class);
        schemas.put("NotificationNewMessageEvent", NotificationNewMessageEvent.class);
        schemas.put("NotificationRemovedFromChannelEvent", NotificationRemovedFromChannelEvent.class);
        schemas.put("ReactionDeletedEvent", ReactionDeletedEvent.class);
        schemas.put("ReactionNewEvent", ReactionNewEvent.class);
        schemas.put("ReactionUpdatedEvent", ReactionUpdatedEvent.class);
        schemas.put("TypingStartEvent", TypingStartEvent.class);
        schemas.put("TypingStopEvent", TypingStopEvent.class);
        schemas.put("UserBannedEvent", UserBannedEvent.class);
        schemas.put("UserDeactivatedEvent", UserDeactivatedEvent.class);
        schemas.put("UserDeletedEvent", UserDeletedEvent.class);
        schemas.put("UserFlaggedEvent", UserFlaggedEvent.class);
        schemas.put("UserMutedEvent", UserMutedEvent.class);
        schemas.put("UserPresenceChangedEvent", UserPresenceChangedEvent.class);
        schemas.put("UserReactivatedEvent", UserReactivatedEvent.class);
        schemas.put("UserUnbannedEvent", UserUnbannedEvent.class);
        schemas.put("UserUnmutedEvent", UserUnmutedEvent.class);
        schemas.put("UserUnreadReminderEvent", UserUnreadReminderEvent.class);
        schemas.put("UserUpdatedEvent", UserUpdatedEvent.class);
        schemas.put("UserWatchingStartEvent", UserWatchingStartEvent.class);
        schemas.put("UserWatchingStopEvent", UserWatchingStopEvent.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return ChatEvent.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * AnyEvent, ChannelCreatedEvent, ChannelDeletedEvent, ChannelFrozenEvent, ChannelHiddenEvent, ChannelKickedEvent, ChannelMutedEvent, ChannelTruncatedEvent, ChannelUnFrozenEvent, ChannelUnmutedEvent, ChannelUpdatedEvent, ChannelVisibleEvent, HealthCheckEvent, MemberAddedEvent, MemberRemovedEvent, MemberUpdatedEvent, MessageDeletedEvent, MessageFlaggedEvent, MessageNewEvent, MessageReadEvent, MessageUnblockedEvent, MessageUpdatedEvent, NotificationAddedToChannelEvent, NotificationChannelDeletedEvent, NotificationChannelMutesUpdatedEvent, NotificationChannelTruncatedEvent, NotificationInviteAcceptedEvent, NotificationInviteRejectedEvent, NotificationInvitedEvent, NotificationMarkReadEvent, NotificationMarkUnreadEvent, NotificationMutesUpdatedEvent, NotificationNewMessageEvent, NotificationRemovedFromChannelEvent, ReactionDeletedEvent, ReactionNewEvent, ReactionUpdatedEvent, TypingStartEvent, TypingStopEvent, UserBannedEvent, UserDeactivatedEvent, UserDeletedEvent, UserFlaggedEvent, UserMutedEvent, UserPresenceChangedEvent, UserReactivatedEvent, UserUnbannedEvent, UserUnmutedEvent, UserUnreadReminderEvent, UserUpdatedEvent, UserWatchingStartEvent, UserWatchingStopEvent
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof AnyEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChannelCreatedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChannelDeletedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChannelFrozenEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChannelHiddenEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChannelKickedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChannelMutedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChannelTruncatedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChannelUnFrozenEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChannelUnmutedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChannelUpdatedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ChannelVisibleEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof HealthCheckEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MemberAddedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MemberRemovedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MemberUpdatedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MessageDeletedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MessageFlaggedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MessageNewEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MessageReadEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MessageUnblockedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MessageUpdatedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NotificationAddedToChannelEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NotificationChannelDeletedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NotificationChannelMutesUpdatedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NotificationChannelTruncatedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NotificationInviteAcceptedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NotificationInviteRejectedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NotificationInvitedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NotificationMarkReadEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NotificationMarkUnreadEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NotificationMutesUpdatedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NotificationNewMessageEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof NotificationRemovedFromChannelEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ReactionDeletedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ReactionNewEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ReactionUpdatedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TypingStartEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TypingStopEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserBannedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserDeactivatedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserDeletedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserFlaggedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserMutedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserPresenceChangedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserReactivatedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserUnbannedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserUnmutedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserUnreadReminderEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserUpdatedEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserWatchingStartEvent) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UserWatchingStopEvent) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AnyEvent, ChannelCreatedEvent, ChannelDeletedEvent, ChannelFrozenEvent, ChannelHiddenEvent, ChannelKickedEvent, ChannelMutedEvent, ChannelTruncatedEvent, ChannelUnFrozenEvent, ChannelUnmutedEvent, ChannelUpdatedEvent, ChannelVisibleEvent, HealthCheckEvent, MemberAddedEvent, MemberRemovedEvent, MemberUpdatedEvent, MessageDeletedEvent, MessageFlaggedEvent, MessageNewEvent, MessageReadEvent, MessageUnblockedEvent, MessageUpdatedEvent, NotificationAddedToChannelEvent, NotificationChannelDeletedEvent, NotificationChannelMutesUpdatedEvent, NotificationChannelTruncatedEvent, NotificationInviteAcceptedEvent, NotificationInviteRejectedEvent, NotificationInvitedEvent, NotificationMarkReadEvent, NotificationMarkUnreadEvent, NotificationMutesUpdatedEvent, NotificationNewMessageEvent, NotificationRemovedFromChannelEvent, ReactionDeletedEvent, ReactionNewEvent, ReactionUpdatedEvent, TypingStartEvent, TypingStopEvent, UserBannedEvent, UserDeactivatedEvent, UserDeletedEvent, UserFlaggedEvent, UserMutedEvent, UserPresenceChangedEvent, UserReactivatedEvent, UserUnbannedEvent, UserUnmutedEvent, UserUnreadReminderEvent, UserUpdatedEvent, UserWatchingStartEvent, UserWatchingStopEvent");
    }

    /**
     * Get the actual instance, which can be the following:
     * AnyEvent, ChannelCreatedEvent, ChannelDeletedEvent, ChannelFrozenEvent, ChannelHiddenEvent, ChannelKickedEvent, ChannelMutedEvent, ChannelTruncatedEvent, ChannelUnFrozenEvent, ChannelUnmutedEvent, ChannelUpdatedEvent, ChannelVisibleEvent, HealthCheckEvent, MemberAddedEvent, MemberRemovedEvent, MemberUpdatedEvent, MessageDeletedEvent, MessageFlaggedEvent, MessageNewEvent, MessageReadEvent, MessageUnblockedEvent, MessageUpdatedEvent, NotificationAddedToChannelEvent, NotificationChannelDeletedEvent, NotificationChannelMutesUpdatedEvent, NotificationChannelTruncatedEvent, NotificationInviteAcceptedEvent, NotificationInviteRejectedEvent, NotificationInvitedEvent, NotificationMarkReadEvent, NotificationMarkUnreadEvent, NotificationMutesUpdatedEvent, NotificationNewMessageEvent, NotificationRemovedFromChannelEvent, ReactionDeletedEvent, ReactionNewEvent, ReactionUpdatedEvent, TypingStartEvent, TypingStopEvent, UserBannedEvent, UserDeactivatedEvent, UserDeletedEvent, UserFlaggedEvent, UserMutedEvent, UserPresenceChangedEvent, UserReactivatedEvent, UserUnbannedEvent, UserUnmutedEvent, UserUnreadReminderEvent, UserUpdatedEvent, UserWatchingStartEvent, UserWatchingStopEvent
     *
     * @return The actual instance (AnyEvent, ChannelCreatedEvent, ChannelDeletedEvent, ChannelFrozenEvent, ChannelHiddenEvent, ChannelKickedEvent, ChannelMutedEvent, ChannelTruncatedEvent, ChannelUnFrozenEvent, ChannelUnmutedEvent, ChannelUpdatedEvent, ChannelVisibleEvent, HealthCheckEvent, MemberAddedEvent, MemberRemovedEvent, MemberUpdatedEvent, MessageDeletedEvent, MessageFlaggedEvent, MessageNewEvent, MessageReadEvent, MessageUnblockedEvent, MessageUpdatedEvent, NotificationAddedToChannelEvent, NotificationChannelDeletedEvent, NotificationChannelMutesUpdatedEvent, NotificationChannelTruncatedEvent, NotificationInviteAcceptedEvent, NotificationInviteRejectedEvent, NotificationInvitedEvent, NotificationMarkReadEvent, NotificationMarkUnreadEvent, NotificationMutesUpdatedEvent, NotificationNewMessageEvent, NotificationRemovedFromChannelEvent, ReactionDeletedEvent, ReactionNewEvent, ReactionUpdatedEvent, TypingStartEvent, TypingStopEvent, UserBannedEvent, UserDeactivatedEvent, UserDeletedEvent, UserFlaggedEvent, UserMutedEvent, UserPresenceChangedEvent, UserReactivatedEvent, UserUnbannedEvent, UserUnmutedEvent, UserUnreadReminderEvent, UserUpdatedEvent, UserWatchingStartEvent, UserWatchingStopEvent)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AnyEvent`. If the actual instance is not `AnyEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AnyEvent`
     * @throws ClassCastException if the instance is not `AnyEvent`
     */
    public AnyEvent getAnyEvent() throws ClassCastException {
        return (AnyEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ChannelCreatedEvent`. If the actual instance is not `ChannelCreatedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChannelCreatedEvent`
     * @throws ClassCastException if the instance is not `ChannelCreatedEvent`
     */
    public ChannelCreatedEvent getChannelCreatedEvent() throws ClassCastException {
        return (ChannelCreatedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ChannelDeletedEvent`. If the actual instance is not `ChannelDeletedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChannelDeletedEvent`
     * @throws ClassCastException if the instance is not `ChannelDeletedEvent`
     */
    public ChannelDeletedEvent getChannelDeletedEvent() throws ClassCastException {
        return (ChannelDeletedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ChannelFrozenEvent`. If the actual instance is not `ChannelFrozenEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChannelFrozenEvent`
     * @throws ClassCastException if the instance is not `ChannelFrozenEvent`
     */
    public ChannelFrozenEvent getChannelFrozenEvent() throws ClassCastException {
        return (ChannelFrozenEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ChannelHiddenEvent`. If the actual instance is not `ChannelHiddenEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChannelHiddenEvent`
     * @throws ClassCastException if the instance is not `ChannelHiddenEvent`
     */
    public ChannelHiddenEvent getChannelHiddenEvent() throws ClassCastException {
        return (ChannelHiddenEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ChannelKickedEvent`. If the actual instance is not `ChannelKickedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChannelKickedEvent`
     * @throws ClassCastException if the instance is not `ChannelKickedEvent`
     */
    public ChannelKickedEvent getChannelKickedEvent() throws ClassCastException {
        return (ChannelKickedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ChannelMutedEvent`. If the actual instance is not `ChannelMutedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChannelMutedEvent`
     * @throws ClassCastException if the instance is not `ChannelMutedEvent`
     */
    public ChannelMutedEvent getChannelMutedEvent() throws ClassCastException {
        return (ChannelMutedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ChannelTruncatedEvent`. If the actual instance is not `ChannelTruncatedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChannelTruncatedEvent`
     * @throws ClassCastException if the instance is not `ChannelTruncatedEvent`
     */
    public ChannelTruncatedEvent getChannelTruncatedEvent() throws ClassCastException {
        return (ChannelTruncatedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ChannelUnFrozenEvent`. If the actual instance is not `ChannelUnFrozenEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChannelUnFrozenEvent`
     * @throws ClassCastException if the instance is not `ChannelUnFrozenEvent`
     */
    public ChannelUnFrozenEvent getChannelUnFrozenEvent() throws ClassCastException {
        return (ChannelUnFrozenEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ChannelUnmutedEvent`. If the actual instance is not `ChannelUnmutedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChannelUnmutedEvent`
     * @throws ClassCastException if the instance is not `ChannelUnmutedEvent`
     */
    public ChannelUnmutedEvent getChannelUnmutedEvent() throws ClassCastException {
        return (ChannelUnmutedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ChannelUpdatedEvent`. If the actual instance is not `ChannelUpdatedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChannelUpdatedEvent`
     * @throws ClassCastException if the instance is not `ChannelUpdatedEvent`
     */
    public ChannelUpdatedEvent getChannelUpdatedEvent() throws ClassCastException {
        return (ChannelUpdatedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ChannelVisibleEvent`. If the actual instance is not `ChannelVisibleEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ChannelVisibleEvent`
     * @throws ClassCastException if the instance is not `ChannelVisibleEvent`
     */
    public ChannelVisibleEvent getChannelVisibleEvent() throws ClassCastException {
        return (ChannelVisibleEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `HealthCheckEvent`. If the actual instance is not `HealthCheckEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `HealthCheckEvent`
     * @throws ClassCastException if the instance is not `HealthCheckEvent`
     */
    public HealthCheckEvent getHealthCheckEvent() throws ClassCastException {
        return (HealthCheckEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MemberAddedEvent`. If the actual instance is not `MemberAddedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MemberAddedEvent`
     * @throws ClassCastException if the instance is not `MemberAddedEvent`
     */
    public MemberAddedEvent getMemberAddedEvent() throws ClassCastException {
        return (MemberAddedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MemberRemovedEvent`. If the actual instance is not `MemberRemovedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MemberRemovedEvent`
     * @throws ClassCastException if the instance is not `MemberRemovedEvent`
     */
    public MemberRemovedEvent getMemberRemovedEvent() throws ClassCastException {
        return (MemberRemovedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MemberUpdatedEvent`. If the actual instance is not `MemberUpdatedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MemberUpdatedEvent`
     * @throws ClassCastException if the instance is not `MemberUpdatedEvent`
     */
    public MemberUpdatedEvent getMemberUpdatedEvent() throws ClassCastException {
        return (MemberUpdatedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MessageDeletedEvent`. If the actual instance is not `MessageDeletedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MessageDeletedEvent`
     * @throws ClassCastException if the instance is not `MessageDeletedEvent`
     */
    public MessageDeletedEvent getMessageDeletedEvent() throws ClassCastException {
        return (MessageDeletedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MessageFlaggedEvent`. If the actual instance is not `MessageFlaggedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MessageFlaggedEvent`
     * @throws ClassCastException if the instance is not `MessageFlaggedEvent`
     */
    public MessageFlaggedEvent getMessageFlaggedEvent() throws ClassCastException {
        return (MessageFlaggedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MessageNewEvent`. If the actual instance is not `MessageNewEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MessageNewEvent`
     * @throws ClassCastException if the instance is not `MessageNewEvent`
     */
    public MessageNewEvent getMessageNewEvent() throws ClassCastException {
        return (MessageNewEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MessageReadEvent`. If the actual instance is not `MessageReadEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MessageReadEvent`
     * @throws ClassCastException if the instance is not `MessageReadEvent`
     */
    public MessageReadEvent getMessageReadEvent() throws ClassCastException {
        return (MessageReadEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MessageUnblockedEvent`. If the actual instance is not `MessageUnblockedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MessageUnblockedEvent`
     * @throws ClassCastException if the instance is not `MessageUnblockedEvent`
     */
    public MessageUnblockedEvent getMessageUnblockedEvent() throws ClassCastException {
        return (MessageUnblockedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `MessageUpdatedEvent`. If the actual instance is not `MessageUpdatedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MessageUpdatedEvent`
     * @throws ClassCastException if the instance is not `MessageUpdatedEvent`
     */
    public MessageUpdatedEvent getMessageUpdatedEvent() throws ClassCastException {
        return (MessageUpdatedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `NotificationAddedToChannelEvent`. If the actual instance is not `NotificationAddedToChannelEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NotificationAddedToChannelEvent`
     * @throws ClassCastException if the instance is not `NotificationAddedToChannelEvent`
     */
    public NotificationAddedToChannelEvent getNotificationAddedToChannelEvent() throws ClassCastException {
        return (NotificationAddedToChannelEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `NotificationChannelDeletedEvent`. If the actual instance is not `NotificationChannelDeletedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NotificationChannelDeletedEvent`
     * @throws ClassCastException if the instance is not `NotificationChannelDeletedEvent`
     */
    public NotificationChannelDeletedEvent getNotificationChannelDeletedEvent() throws ClassCastException {
        return (NotificationChannelDeletedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `NotificationChannelMutesUpdatedEvent`. If the actual instance is not `NotificationChannelMutesUpdatedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NotificationChannelMutesUpdatedEvent`
     * @throws ClassCastException if the instance is not `NotificationChannelMutesUpdatedEvent`
     */
    public NotificationChannelMutesUpdatedEvent getNotificationChannelMutesUpdatedEvent() throws ClassCastException {
        return (NotificationChannelMutesUpdatedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `NotificationChannelTruncatedEvent`. If the actual instance is not `NotificationChannelTruncatedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NotificationChannelTruncatedEvent`
     * @throws ClassCastException if the instance is not `NotificationChannelTruncatedEvent`
     */
    public NotificationChannelTruncatedEvent getNotificationChannelTruncatedEvent() throws ClassCastException {
        return (NotificationChannelTruncatedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `NotificationInviteAcceptedEvent`. If the actual instance is not `NotificationInviteAcceptedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NotificationInviteAcceptedEvent`
     * @throws ClassCastException if the instance is not `NotificationInviteAcceptedEvent`
     */
    public NotificationInviteAcceptedEvent getNotificationInviteAcceptedEvent() throws ClassCastException {
        return (NotificationInviteAcceptedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `NotificationInviteRejectedEvent`. If the actual instance is not `NotificationInviteRejectedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NotificationInviteRejectedEvent`
     * @throws ClassCastException if the instance is not `NotificationInviteRejectedEvent`
     */
    public NotificationInviteRejectedEvent getNotificationInviteRejectedEvent() throws ClassCastException {
        return (NotificationInviteRejectedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `NotificationInvitedEvent`. If the actual instance is not `NotificationInvitedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NotificationInvitedEvent`
     * @throws ClassCastException if the instance is not `NotificationInvitedEvent`
     */
    public NotificationInvitedEvent getNotificationInvitedEvent() throws ClassCastException {
        return (NotificationInvitedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `NotificationMarkReadEvent`. If the actual instance is not `NotificationMarkReadEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NotificationMarkReadEvent`
     * @throws ClassCastException if the instance is not `NotificationMarkReadEvent`
     */
    public NotificationMarkReadEvent getNotificationMarkReadEvent() throws ClassCastException {
        return (NotificationMarkReadEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `NotificationMarkUnreadEvent`. If the actual instance is not `NotificationMarkUnreadEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NotificationMarkUnreadEvent`
     * @throws ClassCastException if the instance is not `NotificationMarkUnreadEvent`
     */
    public NotificationMarkUnreadEvent getNotificationMarkUnreadEvent() throws ClassCastException {
        return (NotificationMarkUnreadEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `NotificationMutesUpdatedEvent`. If the actual instance is not `NotificationMutesUpdatedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NotificationMutesUpdatedEvent`
     * @throws ClassCastException if the instance is not `NotificationMutesUpdatedEvent`
     */
    public NotificationMutesUpdatedEvent getNotificationMutesUpdatedEvent() throws ClassCastException {
        return (NotificationMutesUpdatedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `NotificationNewMessageEvent`. If the actual instance is not `NotificationNewMessageEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NotificationNewMessageEvent`
     * @throws ClassCastException if the instance is not `NotificationNewMessageEvent`
     */
    public NotificationNewMessageEvent getNotificationNewMessageEvent() throws ClassCastException {
        return (NotificationNewMessageEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `NotificationRemovedFromChannelEvent`. If the actual instance is not `NotificationRemovedFromChannelEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `NotificationRemovedFromChannelEvent`
     * @throws ClassCastException if the instance is not `NotificationRemovedFromChannelEvent`
     */
    public NotificationRemovedFromChannelEvent getNotificationRemovedFromChannelEvent() throws ClassCastException {
        return (NotificationRemovedFromChannelEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ReactionDeletedEvent`. If the actual instance is not `ReactionDeletedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ReactionDeletedEvent`
     * @throws ClassCastException if the instance is not `ReactionDeletedEvent`
     */
    public ReactionDeletedEvent getReactionDeletedEvent() throws ClassCastException {
        return (ReactionDeletedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ReactionNewEvent`. If the actual instance is not `ReactionNewEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ReactionNewEvent`
     * @throws ClassCastException if the instance is not `ReactionNewEvent`
     */
    public ReactionNewEvent getReactionNewEvent() throws ClassCastException {
        return (ReactionNewEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ReactionUpdatedEvent`. If the actual instance is not `ReactionUpdatedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ReactionUpdatedEvent`
     * @throws ClassCastException if the instance is not `ReactionUpdatedEvent`
     */
    public ReactionUpdatedEvent getReactionUpdatedEvent() throws ClassCastException {
        return (ReactionUpdatedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TypingStartEvent`. If the actual instance is not `TypingStartEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TypingStartEvent`
     * @throws ClassCastException if the instance is not `TypingStartEvent`
     */
    public TypingStartEvent getTypingStartEvent() throws ClassCastException {
        return (TypingStartEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `TypingStopEvent`. If the actual instance is not `TypingStopEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TypingStopEvent`
     * @throws ClassCastException if the instance is not `TypingStopEvent`
     */
    public TypingStopEvent getTypingStopEvent() throws ClassCastException {
        return (TypingStopEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserBannedEvent`. If the actual instance is not `UserBannedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserBannedEvent`
     * @throws ClassCastException if the instance is not `UserBannedEvent`
     */
    public UserBannedEvent getUserBannedEvent() throws ClassCastException {
        return (UserBannedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserDeactivatedEvent`. If the actual instance is not `UserDeactivatedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserDeactivatedEvent`
     * @throws ClassCastException if the instance is not `UserDeactivatedEvent`
     */
    public UserDeactivatedEvent getUserDeactivatedEvent() throws ClassCastException {
        return (UserDeactivatedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserDeletedEvent`. If the actual instance is not `UserDeletedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserDeletedEvent`
     * @throws ClassCastException if the instance is not `UserDeletedEvent`
     */
    public UserDeletedEvent getUserDeletedEvent() throws ClassCastException {
        return (UserDeletedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserFlaggedEvent`. If the actual instance is not `UserFlaggedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserFlaggedEvent`
     * @throws ClassCastException if the instance is not `UserFlaggedEvent`
     */
    public UserFlaggedEvent getUserFlaggedEvent() throws ClassCastException {
        return (UserFlaggedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserMutedEvent`. If the actual instance is not `UserMutedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserMutedEvent`
     * @throws ClassCastException if the instance is not `UserMutedEvent`
     */
    public UserMutedEvent getUserMutedEvent() throws ClassCastException {
        return (UserMutedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserPresenceChangedEvent`. If the actual instance is not `UserPresenceChangedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserPresenceChangedEvent`
     * @throws ClassCastException if the instance is not `UserPresenceChangedEvent`
     */
    public UserPresenceChangedEvent getUserPresenceChangedEvent() throws ClassCastException {
        return (UserPresenceChangedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserReactivatedEvent`. If the actual instance is not `UserReactivatedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserReactivatedEvent`
     * @throws ClassCastException if the instance is not `UserReactivatedEvent`
     */
    public UserReactivatedEvent getUserReactivatedEvent() throws ClassCastException {
        return (UserReactivatedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserUnbannedEvent`. If the actual instance is not `UserUnbannedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserUnbannedEvent`
     * @throws ClassCastException if the instance is not `UserUnbannedEvent`
     */
    public UserUnbannedEvent getUserUnbannedEvent() throws ClassCastException {
        return (UserUnbannedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserUnmutedEvent`. If the actual instance is not `UserUnmutedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserUnmutedEvent`
     * @throws ClassCastException if the instance is not `UserUnmutedEvent`
     */
    public UserUnmutedEvent getUserUnmutedEvent() throws ClassCastException {
        return (UserUnmutedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserUnreadReminderEvent`. If the actual instance is not `UserUnreadReminderEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserUnreadReminderEvent`
     * @throws ClassCastException if the instance is not `UserUnreadReminderEvent`
     */
    public UserUnreadReminderEvent getUserUnreadReminderEvent() throws ClassCastException {
        return (UserUnreadReminderEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserUpdatedEvent`. If the actual instance is not `UserUpdatedEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserUpdatedEvent`
     * @throws ClassCastException if the instance is not `UserUpdatedEvent`
     */
    public UserUpdatedEvent getUserUpdatedEvent() throws ClassCastException {
        return (UserUpdatedEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserWatchingStartEvent`. If the actual instance is not `UserWatchingStartEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserWatchingStartEvent`
     * @throws ClassCastException if the instance is not `UserWatchingStartEvent`
     */
    public UserWatchingStartEvent getUserWatchingStartEvent() throws ClassCastException {
        return (UserWatchingStartEvent)super.getActualInstance();
    }
    /**
     * Get the actual instance of `UserWatchingStopEvent`. If the actual instance is not `UserWatchingStopEvent`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UserWatchingStopEvent`
     * @throws ClassCastException if the instance is not `UserWatchingStopEvent`
     */
    public UserWatchingStopEvent getUserWatchingStopEvent() throws ClassCastException {
        return (UserWatchingStopEvent)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ChatEvent
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with AnyEvent
        try {
            AnyEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AnyEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ChannelCreatedEvent
        try {
            ChannelCreatedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChannelCreatedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ChannelDeletedEvent
        try {
            ChannelDeletedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChannelDeletedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ChannelFrozenEvent
        try {
            ChannelFrozenEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChannelFrozenEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ChannelHiddenEvent
        try {
            ChannelHiddenEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChannelHiddenEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ChannelKickedEvent
        try {
            ChannelKickedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChannelKickedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ChannelMutedEvent
        try {
            ChannelMutedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChannelMutedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ChannelTruncatedEvent
        try {
            ChannelTruncatedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChannelTruncatedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ChannelUnFrozenEvent
        try {
            ChannelUnFrozenEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChannelUnFrozenEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ChannelUnmutedEvent
        try {
            ChannelUnmutedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChannelUnmutedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ChannelUpdatedEvent
        try {
            ChannelUpdatedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChannelUpdatedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ChannelVisibleEvent
        try {
            ChannelVisibleEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ChannelVisibleEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with HealthCheckEvent
        try {
            HealthCheckEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for HealthCheckEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MemberAddedEvent
        try {
            MemberAddedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MemberAddedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MemberRemovedEvent
        try {
            MemberRemovedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MemberRemovedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MemberUpdatedEvent
        try {
            MemberUpdatedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MemberUpdatedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MessageDeletedEvent
        try {
            MessageDeletedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MessageDeletedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MessageFlaggedEvent
        try {
            MessageFlaggedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MessageFlaggedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MessageNewEvent
        try {
            MessageNewEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MessageNewEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MessageReadEvent
        try {
            MessageReadEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MessageReadEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MessageUnblockedEvent
        try {
            MessageUnblockedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MessageUnblockedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MessageUpdatedEvent
        try {
            MessageUpdatedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MessageUpdatedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with NotificationAddedToChannelEvent
        try {
            NotificationAddedToChannelEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for NotificationAddedToChannelEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with NotificationChannelDeletedEvent
        try {
            NotificationChannelDeletedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for NotificationChannelDeletedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with NotificationChannelMutesUpdatedEvent
        try {
            NotificationChannelMutesUpdatedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for NotificationChannelMutesUpdatedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with NotificationChannelTruncatedEvent
        try {
            NotificationChannelTruncatedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for NotificationChannelTruncatedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with NotificationInviteAcceptedEvent
        try {
            NotificationInviteAcceptedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for NotificationInviteAcceptedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with NotificationInviteRejectedEvent
        try {
            NotificationInviteRejectedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for NotificationInviteRejectedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with NotificationInvitedEvent
        try {
            NotificationInvitedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for NotificationInvitedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with NotificationMarkReadEvent
        try {
            NotificationMarkReadEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for NotificationMarkReadEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with NotificationMarkUnreadEvent
        try {
            NotificationMarkUnreadEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for NotificationMarkUnreadEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with NotificationMutesUpdatedEvent
        try {
            NotificationMutesUpdatedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for NotificationMutesUpdatedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with NotificationNewMessageEvent
        try {
            NotificationNewMessageEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for NotificationNewMessageEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with NotificationRemovedFromChannelEvent
        try {
            NotificationRemovedFromChannelEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for NotificationRemovedFromChannelEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ReactionDeletedEvent
        try {
            ReactionDeletedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ReactionDeletedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ReactionNewEvent
        try {
            ReactionNewEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ReactionNewEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ReactionUpdatedEvent
        try {
            ReactionUpdatedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ReactionUpdatedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TypingStartEvent
        try {
            TypingStartEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TypingStartEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TypingStopEvent
        try {
            TypingStopEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TypingStopEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserBannedEvent
        try {
            UserBannedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserBannedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserDeactivatedEvent
        try {
            UserDeactivatedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserDeactivatedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserDeletedEvent
        try {
            UserDeletedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserDeletedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserFlaggedEvent
        try {
            UserFlaggedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserFlaggedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserMutedEvent
        try {
            UserMutedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserMutedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserPresenceChangedEvent
        try {
            UserPresenceChangedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserPresenceChangedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserReactivatedEvent
        try {
            UserReactivatedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserReactivatedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserUnbannedEvent
        try {
            UserUnbannedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserUnbannedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserUnmutedEvent
        try {
            UserUnmutedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserUnmutedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserUnreadReminderEvent
        try {
            UserUnreadReminderEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserUnreadReminderEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserUpdatedEvent
        try {
            UserUpdatedEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserUpdatedEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserWatchingStartEvent
        try {
            UserWatchingStartEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserWatchingStartEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UserWatchingStopEvent
        try {
            UserWatchingStopEvent.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UserWatchingStopEvent failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for ChatEvent with oneOf schemas: AnyEvent, ChannelCreatedEvent, ChannelDeletedEvent, ChannelFrozenEvent, ChannelHiddenEvent, ChannelKickedEvent, ChannelMutedEvent, ChannelTruncatedEvent, ChannelUnFrozenEvent, ChannelUnmutedEvent, ChannelUpdatedEvent, ChannelVisibleEvent, HealthCheckEvent, MemberAddedEvent, MemberRemovedEvent, MemberUpdatedEvent, MessageDeletedEvent, MessageFlaggedEvent, MessageNewEvent, MessageReadEvent, MessageUnblockedEvent, MessageUpdatedEvent, NotificationAddedToChannelEvent, NotificationChannelDeletedEvent, NotificationChannelMutesUpdatedEvent, NotificationChannelTruncatedEvent, NotificationInviteAcceptedEvent, NotificationInviteRejectedEvent, NotificationInvitedEvent, NotificationMarkReadEvent, NotificationMarkUnreadEvent, NotificationMutesUpdatedEvent, NotificationNewMessageEvent, NotificationRemovedFromChannelEvent, ReactionDeletedEvent, ReactionNewEvent, ReactionUpdatedEvent, TypingStartEvent, TypingStopEvent, UserBannedEvent, UserDeactivatedEvent, UserDeletedEvent, UserFlaggedEvent, UserMutedEvent, UserPresenceChangedEvent, UserReactivatedEvent, UserUnbannedEvent, UserUnmutedEvent, UserUnreadReminderEvent, UserUpdatedEvent, UserWatchingStartEvent, UserWatchingStopEvent. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of ChatEvent given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ChatEvent
     * @throws IOException if the JSON string is invalid with respect to ChatEvent
     */
    public static ChatEvent fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ChatEvent.class);
    }

    /**
     * Convert an instance of ChatEvent to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

