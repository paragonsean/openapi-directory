/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.APNConfigFields;
import org.openapitools.client.model.FirebaseConfigFields;
import org.openapitools.client.model.HuaweiConfigFields;
import org.openapitools.client.model.PushProvider;
import org.openapitools.client.model.XiaomiConfigFields;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PushNotificationFields
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PushNotificationFields {
  public static final String SERIALIZED_NAME_APN = "apn";
  @SerializedName(SERIALIZED_NAME_APN)
  private APNConfigFields apn;

  public static final String SERIALIZED_NAME_FIREBASE = "firebase";
  @SerializedName(SERIALIZED_NAME_FIREBASE)
  private FirebaseConfigFields firebase;

  public static final String SERIALIZED_NAME_HUAWEI = "huawei";
  @SerializedName(SERIALIZED_NAME_HUAWEI)
  private HuaweiConfigFields huawei;

  public static final String SERIALIZED_NAME_OFFLINE_ONLY = "offline_only";
  @SerializedName(SERIALIZED_NAME_OFFLINE_ONLY)
  private Boolean offlineOnly;

  public static final String SERIALIZED_NAME_PROVIDERS = "providers";
  @SerializedName(SERIALIZED_NAME_PROVIDERS)
  private List<PushProvider> providers = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_XIAOMI = "xiaomi";
  @SerializedName(SERIALIZED_NAME_XIAOMI)
  private XiaomiConfigFields xiaomi;

  public PushNotificationFields() {
  }

  public PushNotificationFields apn(APNConfigFields apn) {
    this.apn = apn;
    return this;
  }

  /**
   * Get apn
   * @return apn
   */
  @javax.annotation.Nonnull
  public APNConfigFields getApn() {
    return apn;
  }

  public void setApn(APNConfigFields apn) {
    this.apn = apn;
  }


  public PushNotificationFields firebase(FirebaseConfigFields firebase) {
    this.firebase = firebase;
    return this;
  }

  /**
   * Get firebase
   * @return firebase
   */
  @javax.annotation.Nonnull
  public FirebaseConfigFields getFirebase() {
    return firebase;
  }

  public void setFirebase(FirebaseConfigFields firebase) {
    this.firebase = firebase;
  }


  public PushNotificationFields huawei(HuaweiConfigFields huawei) {
    this.huawei = huawei;
    return this;
  }

  /**
   * Get huawei
   * @return huawei
   */
  @javax.annotation.Nonnull
  public HuaweiConfigFields getHuawei() {
    return huawei;
  }

  public void setHuawei(HuaweiConfigFields huawei) {
    this.huawei = huawei;
  }


  public PushNotificationFields offlineOnly(Boolean offlineOnly) {
    this.offlineOnly = offlineOnly;
    return this;
  }

  /**
   * Get offlineOnly
   * @return offlineOnly
   */
  @javax.annotation.Nonnull
  public Boolean getOfflineOnly() {
    return offlineOnly;
  }

  public void setOfflineOnly(Boolean offlineOnly) {
    this.offlineOnly = offlineOnly;
  }


  public PushNotificationFields providers(List<PushProvider> providers) {
    this.providers = providers;
    return this;
  }

  public PushNotificationFields addProvidersItem(PushProvider providersItem) {
    if (this.providers == null) {
      this.providers = new ArrayList<>();
    }
    this.providers.add(providersItem);
    return this;
  }

  /**
   * Get providers
   * @return providers
   */
  @javax.annotation.Nullable
  public List<PushProvider> getProviders() {
    return providers;
  }

  public void setProviders(List<PushProvider> providers) {
    this.providers = providers;
  }


  public PushNotificationFields version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public PushNotificationFields xiaomi(XiaomiConfigFields xiaomi) {
    this.xiaomi = xiaomi;
    return this;
  }

  /**
   * Get xiaomi
   * @return xiaomi
   */
  @javax.annotation.Nonnull
  public XiaomiConfigFields getXiaomi() {
    return xiaomi;
  }

  public void setXiaomi(XiaomiConfigFields xiaomi) {
    this.xiaomi = xiaomi;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PushNotificationFields pushNotificationFields = (PushNotificationFields) o;
    return Objects.equals(this.apn, pushNotificationFields.apn) &&
        Objects.equals(this.firebase, pushNotificationFields.firebase) &&
        Objects.equals(this.huawei, pushNotificationFields.huawei) &&
        Objects.equals(this.offlineOnly, pushNotificationFields.offlineOnly) &&
        Objects.equals(this.providers, pushNotificationFields.providers) &&
        Objects.equals(this.version, pushNotificationFields.version) &&
        Objects.equals(this.xiaomi, pushNotificationFields.xiaomi);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apn, firebase, huawei, offlineOnly, providers, version, xiaomi);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PushNotificationFields {\n");
    sb.append("    apn: ").append(toIndentedString(apn)).append("\n");
    sb.append("    firebase: ").append(toIndentedString(firebase)).append("\n");
    sb.append("    huawei: ").append(toIndentedString(huawei)).append("\n");
    sb.append("    offlineOnly: ").append(toIndentedString(offlineOnly)).append("\n");
    sb.append("    providers: ").append(toIndentedString(providers)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    xiaomi: ").append(toIndentedString(xiaomi)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apn");
    openapiFields.add("firebase");
    openapiFields.add("huawei");
    openapiFields.add("offline_only");
    openapiFields.add("providers");
    openapiFields.add("version");
    openapiFields.add("xiaomi");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("apn");
    openapiRequiredFields.add("firebase");
    openapiRequiredFields.add("huawei");
    openapiRequiredFields.add("offline_only");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("xiaomi");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PushNotificationFields
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PushNotificationFields.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PushNotificationFields is not found in the empty JSON string", PushNotificationFields.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PushNotificationFields.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PushNotificationFields` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PushNotificationFields.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `apn`
      APNConfigFields.validateJsonElement(jsonObj.get("apn"));
      // validate the required field `firebase`
      FirebaseConfigFields.validateJsonElement(jsonObj.get("firebase"));
      // validate the required field `huawei`
      HuaweiConfigFields.validateJsonElement(jsonObj.get("huawei"));
      if (jsonObj.get("providers") != null && !jsonObj.get("providers").isJsonNull()) {
        JsonArray jsonArrayproviders = jsonObj.getAsJsonArray("providers");
        if (jsonArrayproviders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("providers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `providers` to be an array in the JSON string but got `%s`", jsonObj.get("providers").toString()));
          }

          // validate the optional field `providers` (array)
          for (int i = 0; i < jsonArrayproviders.size(); i++) {
            PushProvider.validateJsonElement(jsonArrayproviders.get(i));
          };
        }
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      // validate the required field `xiaomi`
      XiaomiConfigFields.validateJsonElement(jsonObj.get("xiaomi"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PushNotificationFields.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PushNotificationFields' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PushNotificationFields> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PushNotificationFields.class));

       return (TypeAdapter<T>) new TypeAdapter<PushNotificationFields>() {
           @Override
           public void write(JsonWriter out, PushNotificationFields value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PushNotificationFields read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PushNotificationFields given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PushNotificationFields
   * @throws IOException if the JSON string is invalid with respect to PushNotificationFields
   */
  public static PushNotificationFields fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PushNotificationFields.class);
  }

  /**
   * Convert an instance of PushNotificationFields to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

