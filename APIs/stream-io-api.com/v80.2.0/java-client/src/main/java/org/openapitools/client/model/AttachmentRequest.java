/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ActionRequest;
import org.openapitools.client.model.FieldRequest;
import org.openapitools.client.model.ImagesRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AttachmentRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AttachmentRequest {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<ActionRequest> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSET_URL = "asset_url";
  @SerializedName(SERIALIZED_NAME_ASSET_URL)
  private String assetUrl;

  public static final String SERIALIZED_NAME_AUTHOR_ICON = "author_icon";
  @SerializedName(SERIALIZED_NAME_AUTHOR_ICON)
  private String authorIcon;

  public static final String SERIALIZED_NAME_AUTHOR_LINK = "author_link";
  @SerializedName(SERIALIZED_NAME_AUTHOR_LINK)
  private String authorLink;

  public static final String SERIALIZED_NAME_AUTHOR_NAME = "author_name";
  @SerializedName(SERIALIZED_NAME_AUTHOR_NAME)
  private String authorName;

  public static final String SERIALIZED_NAME_COLOR = "color";
  @SerializedName(SERIALIZED_NAME_COLOR)
  private String color;

  public static final String SERIALIZED_NAME_FALLBACK = "fallback";
  @SerializedName(SERIALIZED_NAME_FALLBACK)
  private String fallback;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<FieldRequest> fields = new ArrayList<>();

  public static final String SERIALIZED_NAME_FOOTER = "footer";
  @SerializedName(SERIALIZED_NAME_FOOTER)
  private String footer;

  public static final String SERIALIZED_NAME_FOOTER_ICON = "footer_icon";
  @SerializedName(SERIALIZED_NAME_FOOTER_ICON)
  private String footerIcon;

  public static final String SERIALIZED_NAME_GIPHY = "giphy";
  @SerializedName(SERIALIZED_NAME_GIPHY)
  private ImagesRequest giphy;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_OG_SCRAPE_URL = "og_scrape_url";
  @SerializedName(SERIALIZED_NAME_OG_SCRAPE_URL)
  private String ogScrapeUrl;

  public static final String SERIALIZED_NAME_ORIGINAL_HEIGHT = "original_height";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_HEIGHT)
  private Integer originalHeight;

  public static final String SERIALIZED_NAME_ORIGINAL_WIDTH = "original_width";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_WIDTH)
  private Integer originalWidth;

  public static final String SERIALIZED_NAME_PRETEXT = "pretext";
  @SerializedName(SERIALIZED_NAME_PRETEXT)
  private String pretext;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_THUMB_URL = "thumb_url";
  @SerializedName(SERIALIZED_NAME_THUMB_URL)
  private String thumbUrl;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TITLE_LINK = "title_link";
  @SerializedName(SERIALIZED_NAME_TITLE_LINK)
  private String titleLink;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public AttachmentRequest() {
  }

  public AttachmentRequest actions(List<ActionRequest> actions) {
    this.actions = actions;
    return this;
  }

  public AttachmentRequest addActionsItem(ActionRequest actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

  /**
   * Get actions
   * @return actions
   */
  @javax.annotation.Nullable
  public List<ActionRequest> getActions() {
    return actions;
  }

  public void setActions(List<ActionRequest> actions) {
    this.actions = actions;
  }


  public AttachmentRequest assetUrl(String assetUrl) {
    this.assetUrl = assetUrl;
    return this;
  }

  /**
   * Get assetUrl
   * @return assetUrl
   */
  @javax.annotation.Nullable
  public String getAssetUrl() {
    return assetUrl;
  }

  public void setAssetUrl(String assetUrl) {
    this.assetUrl = assetUrl;
  }


  public AttachmentRequest authorIcon(String authorIcon) {
    this.authorIcon = authorIcon;
    return this;
  }

  /**
   * Get authorIcon
   * @return authorIcon
   */
  @javax.annotation.Nullable
  public String getAuthorIcon() {
    return authorIcon;
  }

  public void setAuthorIcon(String authorIcon) {
    this.authorIcon = authorIcon;
  }


  public AttachmentRequest authorLink(String authorLink) {
    this.authorLink = authorLink;
    return this;
  }

  /**
   * Get authorLink
   * @return authorLink
   */
  @javax.annotation.Nullable
  public String getAuthorLink() {
    return authorLink;
  }

  public void setAuthorLink(String authorLink) {
    this.authorLink = authorLink;
  }


  public AttachmentRequest authorName(String authorName) {
    this.authorName = authorName;
    return this;
  }

  /**
   * Get authorName
   * @return authorName
   */
  @javax.annotation.Nullable
  public String getAuthorName() {
    return authorName;
  }

  public void setAuthorName(String authorName) {
    this.authorName = authorName;
  }


  public AttachmentRequest color(String color) {
    this.color = color;
    return this;
  }

  /**
   * Get color
   * @return color
   */
  @javax.annotation.Nullable
  public String getColor() {
    return color;
  }

  public void setColor(String color) {
    this.color = color;
  }


  public AttachmentRequest fallback(String fallback) {
    this.fallback = fallback;
    return this;
  }

  /**
   * Get fallback
   * @return fallback
   */
  @javax.annotation.Nullable
  public String getFallback() {
    return fallback;
  }

  public void setFallback(String fallback) {
    this.fallback = fallback;
  }


  public AttachmentRequest fields(List<FieldRequest> fields) {
    this.fields = fields;
    return this;
  }

  public AttachmentRequest addFieldsItem(FieldRequest fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

  /**
   * Get fields
   * @return fields
   */
  @javax.annotation.Nullable
  public List<FieldRequest> getFields() {
    return fields;
  }

  public void setFields(List<FieldRequest> fields) {
    this.fields = fields;
  }


  public AttachmentRequest footer(String footer) {
    this.footer = footer;
    return this;
  }

  /**
   * Get footer
   * @return footer
   */
  @javax.annotation.Nullable
  public String getFooter() {
    return footer;
  }

  public void setFooter(String footer) {
    this.footer = footer;
  }


  public AttachmentRequest footerIcon(String footerIcon) {
    this.footerIcon = footerIcon;
    return this;
  }

  /**
   * Get footerIcon
   * @return footerIcon
   */
  @javax.annotation.Nullable
  public String getFooterIcon() {
    return footerIcon;
  }

  public void setFooterIcon(String footerIcon) {
    this.footerIcon = footerIcon;
  }


  public AttachmentRequest giphy(ImagesRequest giphy) {
    this.giphy = giphy;
    return this;
  }

  /**
   * Get giphy
   * @return giphy
   */
  @javax.annotation.Nullable
  public ImagesRequest getGiphy() {
    return giphy;
  }

  public void setGiphy(ImagesRequest giphy) {
    this.giphy = giphy;
  }


  public AttachmentRequest imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  /**
   * Get imageUrl
   * @return imageUrl
   */
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public AttachmentRequest ogScrapeUrl(String ogScrapeUrl) {
    this.ogScrapeUrl = ogScrapeUrl;
    return this;
  }

  /**
   * Get ogScrapeUrl
   * @return ogScrapeUrl
   */
  @javax.annotation.Nullable
  public String getOgScrapeUrl() {
    return ogScrapeUrl;
  }

  public void setOgScrapeUrl(String ogScrapeUrl) {
    this.ogScrapeUrl = ogScrapeUrl;
  }


  public AttachmentRequest originalHeight(Integer originalHeight) {
    this.originalHeight = originalHeight;
    return this;
  }

  /**
   * Get originalHeight
   * @return originalHeight
   */
  @javax.annotation.Nullable
  public Integer getOriginalHeight() {
    return originalHeight;
  }

  public void setOriginalHeight(Integer originalHeight) {
    this.originalHeight = originalHeight;
  }


  public AttachmentRequest originalWidth(Integer originalWidth) {
    this.originalWidth = originalWidth;
    return this;
  }

  /**
   * Get originalWidth
   * @return originalWidth
   */
  @javax.annotation.Nullable
  public Integer getOriginalWidth() {
    return originalWidth;
  }

  public void setOriginalWidth(Integer originalWidth) {
    this.originalWidth = originalWidth;
  }


  public AttachmentRequest pretext(String pretext) {
    this.pretext = pretext;
    return this;
  }

  /**
   * Get pretext
   * @return pretext
   */
  @javax.annotation.Nullable
  public String getPretext() {
    return pretext;
  }

  public void setPretext(String pretext) {
    this.pretext = pretext;
  }


  public AttachmentRequest text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public AttachmentRequest thumbUrl(String thumbUrl) {
    this.thumbUrl = thumbUrl;
    return this;
  }

  /**
   * Get thumbUrl
   * @return thumbUrl
   */
  @javax.annotation.Nullable
  public String getThumbUrl() {
    return thumbUrl;
  }

  public void setThumbUrl(String thumbUrl) {
    this.thumbUrl = thumbUrl;
  }


  public AttachmentRequest title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public AttachmentRequest titleLink(String titleLink) {
    this.titleLink = titleLink;
    return this;
  }

  /**
   * Get titleLink
   * @return titleLink
   */
  @javax.annotation.Nullable
  public String getTitleLink() {
    return titleLink;
  }

  public void setTitleLink(String titleLink) {
    this.titleLink = titleLink;
  }


  public AttachmentRequest type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Attachment type (e.g. image, video, url)
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AttachmentRequest instance itself
   */
  public AttachmentRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AttachmentRequest attachmentRequest = (AttachmentRequest) o;
    return Objects.equals(this.actions, attachmentRequest.actions) &&
        Objects.equals(this.assetUrl, attachmentRequest.assetUrl) &&
        Objects.equals(this.authorIcon, attachmentRequest.authorIcon) &&
        Objects.equals(this.authorLink, attachmentRequest.authorLink) &&
        Objects.equals(this.authorName, attachmentRequest.authorName) &&
        Objects.equals(this.color, attachmentRequest.color) &&
        Objects.equals(this.fallback, attachmentRequest.fallback) &&
        Objects.equals(this.fields, attachmentRequest.fields) &&
        Objects.equals(this.footer, attachmentRequest.footer) &&
        Objects.equals(this.footerIcon, attachmentRequest.footerIcon) &&
        Objects.equals(this.giphy, attachmentRequest.giphy) &&
        Objects.equals(this.imageUrl, attachmentRequest.imageUrl) &&
        Objects.equals(this.ogScrapeUrl, attachmentRequest.ogScrapeUrl) &&
        Objects.equals(this.originalHeight, attachmentRequest.originalHeight) &&
        Objects.equals(this.originalWidth, attachmentRequest.originalWidth) &&
        Objects.equals(this.pretext, attachmentRequest.pretext) &&
        Objects.equals(this.text, attachmentRequest.text) &&
        Objects.equals(this.thumbUrl, attachmentRequest.thumbUrl) &&
        Objects.equals(this.title, attachmentRequest.title) &&
        Objects.equals(this.titleLink, attachmentRequest.titleLink) &&
        Objects.equals(this.type, attachmentRequest.type)&&
        Objects.equals(this.additionalProperties, attachmentRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, assetUrl, authorIcon, authorLink, authorName, color, fallback, fields, footer, footerIcon, giphy, imageUrl, ogScrapeUrl, originalHeight, originalWidth, pretext, text, thumbUrl, title, titleLink, type, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AttachmentRequest {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    assetUrl: ").append(toIndentedString(assetUrl)).append("\n");
    sb.append("    authorIcon: ").append(toIndentedString(authorIcon)).append("\n");
    sb.append("    authorLink: ").append(toIndentedString(authorLink)).append("\n");
    sb.append("    authorName: ").append(toIndentedString(authorName)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    fallback: ").append(toIndentedString(fallback)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    footer: ").append(toIndentedString(footer)).append("\n");
    sb.append("    footerIcon: ").append(toIndentedString(footerIcon)).append("\n");
    sb.append("    giphy: ").append(toIndentedString(giphy)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    ogScrapeUrl: ").append(toIndentedString(ogScrapeUrl)).append("\n");
    sb.append("    originalHeight: ").append(toIndentedString(originalHeight)).append("\n");
    sb.append("    originalWidth: ").append(toIndentedString(originalWidth)).append("\n");
    sb.append("    pretext: ").append(toIndentedString(pretext)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    thumbUrl: ").append(toIndentedString(thumbUrl)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    titleLink: ").append(toIndentedString(titleLink)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actions");
    openapiFields.add("asset_url");
    openapiFields.add("author_icon");
    openapiFields.add("author_link");
    openapiFields.add("author_name");
    openapiFields.add("color");
    openapiFields.add("fallback");
    openapiFields.add("fields");
    openapiFields.add("footer");
    openapiFields.add("footer_icon");
    openapiFields.add("giphy");
    openapiFields.add("image_url");
    openapiFields.add("og_scrape_url");
    openapiFields.add("original_height");
    openapiFields.add("original_width");
    openapiFields.add("pretext");
    openapiFields.add("text");
    openapiFields.add("thumb_url");
    openapiFields.add("title");
    openapiFields.add("title_link");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AttachmentRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AttachmentRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AttachmentRequest is not found in the empty JSON string", AttachmentRequest.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull()) {
        JsonArray jsonArrayactions = jsonObj.getAsJsonArray("actions");
        if (jsonArrayactions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
          }

          // validate the optional field `actions` (array)
          for (int i = 0; i < jsonArrayactions.size(); i++) {
            ActionRequest.validateJsonElement(jsonArrayactions.get(i));
          };
        }
      }
      if ((jsonObj.get("asset_url") != null && !jsonObj.get("asset_url").isJsonNull()) && !jsonObj.get("asset_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asset_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_url").toString()));
      }
      if ((jsonObj.get("author_icon") != null && !jsonObj.get("author_icon").isJsonNull()) && !jsonObj.get("author_icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author_icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author_icon").toString()));
      }
      if ((jsonObj.get("author_link") != null && !jsonObj.get("author_link").isJsonNull()) && !jsonObj.get("author_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author_link").toString()));
      }
      if ((jsonObj.get("author_name") != null && !jsonObj.get("author_name").isJsonNull()) && !jsonObj.get("author_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author_name").toString()));
      }
      if ((jsonObj.get("color") != null && !jsonObj.get("color").isJsonNull()) && !jsonObj.get("color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("color").toString()));
      }
      if ((jsonObj.get("fallback") != null && !jsonObj.get("fallback").isJsonNull()) && !jsonObj.get("fallback").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallback` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallback").toString()));
      }
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonNull()) {
        JsonArray jsonArrayfields = jsonObj.getAsJsonArray("fields");
        if (jsonArrayfields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
          }

          // validate the optional field `fields` (array)
          for (int i = 0; i < jsonArrayfields.size(); i++) {
            FieldRequest.validateJsonElement(jsonArrayfields.get(i));
          };
        }
      }
      if ((jsonObj.get("footer") != null && !jsonObj.get("footer").isJsonNull()) && !jsonObj.get("footer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `footer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("footer").toString()));
      }
      if ((jsonObj.get("footer_icon") != null && !jsonObj.get("footer_icon").isJsonNull()) && !jsonObj.get("footer_icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `footer_icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("footer_icon").toString()));
      }
      // validate the optional field `giphy`
      if (jsonObj.get("giphy") != null && !jsonObj.get("giphy").isJsonNull()) {
        ImagesRequest.validateJsonElement(jsonObj.get("giphy"));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
      if ((jsonObj.get("og_scrape_url") != null && !jsonObj.get("og_scrape_url").isJsonNull()) && !jsonObj.get("og_scrape_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `og_scrape_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("og_scrape_url").toString()));
      }
      if ((jsonObj.get("pretext") != null && !jsonObj.get("pretext").isJsonNull()) && !jsonObj.get("pretext").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pretext` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pretext").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("thumb_url") != null && !jsonObj.get("thumb_url").isJsonNull()) && !jsonObj.get("thumb_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumb_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumb_url").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("title_link") != null && !jsonObj.get("title_link").isJsonNull()) && !jsonObj.get("title_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title_link").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AttachmentRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AttachmentRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AttachmentRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AttachmentRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AttachmentRequest>() {
           @Override
           public void write(JsonWriter out, AttachmentRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AttachmentRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             AttachmentRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AttachmentRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AttachmentRequest
   * @throws IOException if the JSON string is invalid with respect to AttachmentRequest
   */
  public static AttachmentRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AttachmentRequest.class);
  }

  /**
   * Convert an instance of AttachmentRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

