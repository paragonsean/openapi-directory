/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeleteUsersRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeleteUsersRequest {
  /**
   * Conversation channels delete mode. Conversation channel is any channel which only has two members one of which is the user being deleted.  * null or empty string - doesn&#39;t delete any conversation channels * soft - marks all conversation channels as deleted (same effect as Delete Channels with &#39;hard&#39; option disabled) * hard - deletes channel and all its data completely including messages (same effect as Delete Channels with &#39;hard&#39; option enabled) 
   */
  @JsonAdapter(ConversationsEnum.Adapter.class)
  public enum ConversationsEnum {
    SOFT("soft"),
    
    HARD("hard");

    private String value;

    ConversationsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConversationsEnum fromValue(String value) {
      for (ConversationsEnum b : ConversationsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConversationsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConversationsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConversationsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConversationsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConversationsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONVERSATIONS = "conversations";
  @SerializedName(SERIALIZED_NAME_CONVERSATIONS)
  private ConversationsEnum conversations;

  /**
   * Message delete mode.  * null or empty string - doesn&#39;t delete user messages * soft - marks all user messages as deleted without removing any related message data * pruning - marks all user messages as deleted, nullifies message information and removes some message data such as reactions and flags * hard - deletes messages completely with all related information 
   */
  @JsonAdapter(MessagesEnum.Adapter.class)
  public enum MessagesEnum {
    SOFT("soft"),
    
    PRUNING("pruning"),
    
    HARD("hard");

    private String value;

    MessagesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MessagesEnum fromValue(String value) {
      for (MessagesEnum b : MessagesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MessagesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MessagesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MessagesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MessagesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MessagesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private MessagesEnum messages;

  public static final String SERIALIZED_NAME_NEW_CHANNEL_OWNER_ID = "new_channel_owner_id";
  @SerializedName(SERIALIZED_NAME_NEW_CHANNEL_OWNER_ID)
  private String newChannelOwnerId;

  /**
   * User delete mode.  * soft - marks user as deleted and retains all user data * pruning - marks user as deleted and nullifies user information * hard - deletes user completely. Requires &#39;hard&#39; option for messages and conversations as well 
   */
  @JsonAdapter(UserEnum.Adapter.class)
  public enum UserEnum {
    SOFT("soft"),
    
    PRUNING("pruning"),
    
    HARD("hard");

    private String value;

    UserEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserEnum fromValue(String value) {
      for (UserEnum b : UserEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UserEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserEnum user;

  public static final String SERIALIZED_NAME_USER_IDS = "user_ids";
  @SerializedName(SERIALIZED_NAME_USER_IDS)
  private List<String> userIds = new ArrayList<>();

  public DeleteUsersRequest() {
  }

  public DeleteUsersRequest conversations(ConversationsEnum conversations) {
    this.conversations = conversations;
    return this;
  }

  /**
   * Conversation channels delete mode. Conversation channel is any channel which only has two members one of which is the user being deleted.  * null or empty string - doesn&#39;t delete any conversation channels * soft - marks all conversation channels as deleted (same effect as Delete Channels with &#39;hard&#39; option disabled) * hard - deletes channel and all its data completely including messages (same effect as Delete Channels with &#39;hard&#39; option enabled) 
   * @return conversations
   */
  @javax.annotation.Nullable
  public ConversationsEnum getConversations() {
    return conversations;
  }

  public void setConversations(ConversationsEnum conversations) {
    this.conversations = conversations;
  }


  public DeleteUsersRequest messages(MessagesEnum messages) {
    this.messages = messages;
    return this;
  }

  /**
   * Message delete mode.  * null or empty string - doesn&#39;t delete user messages * soft - marks all user messages as deleted without removing any related message data * pruning - marks all user messages as deleted, nullifies message information and removes some message data such as reactions and flags * hard - deletes messages completely with all related information 
   * @return messages
   */
  @javax.annotation.Nullable
  public MessagesEnum getMessages() {
    return messages;
  }

  public void setMessages(MessagesEnum messages) {
    this.messages = messages;
  }


  public DeleteUsersRequest newChannelOwnerId(String newChannelOwnerId) {
    this.newChannelOwnerId = newChannelOwnerId;
    return this;
  }

  /**
   * Get newChannelOwnerId
   * @return newChannelOwnerId
   */
  @javax.annotation.Nullable
  public String getNewChannelOwnerId() {
    return newChannelOwnerId;
  }

  public void setNewChannelOwnerId(String newChannelOwnerId) {
    this.newChannelOwnerId = newChannelOwnerId;
  }


  public DeleteUsersRequest user(UserEnum user) {
    this.user = user;
    return this;
  }

  /**
   * User delete mode.  * soft - marks user as deleted and retains all user data * pruning - marks user as deleted and nullifies user information * hard - deletes user completely. Requires &#39;hard&#39; option for messages and conversations as well 
   * @return user
   */
  @javax.annotation.Nullable
  public UserEnum getUser() {
    return user;
  }

  public void setUser(UserEnum user) {
    this.user = user;
  }


  public DeleteUsersRequest userIds(List<String> userIds) {
    this.userIds = userIds;
    return this;
  }

  public DeleteUsersRequest addUserIdsItem(String userIdsItem) {
    if (this.userIds == null) {
      this.userIds = new ArrayList<>();
    }
    this.userIds.add(userIdsItem);
    return this;
  }

  /**
   * IDs of users to delete
   * @return userIds
   */
  @javax.annotation.Nonnull
  public List<String> getUserIds() {
    return userIds;
  }

  public void setUserIds(List<String> userIds) {
    this.userIds = userIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeleteUsersRequest deleteUsersRequest = (DeleteUsersRequest) o;
    return Objects.equals(this.conversations, deleteUsersRequest.conversations) &&
        Objects.equals(this.messages, deleteUsersRequest.messages) &&
        Objects.equals(this.newChannelOwnerId, deleteUsersRequest.newChannelOwnerId) &&
        Objects.equals(this.user, deleteUsersRequest.user) &&
        Objects.equals(this.userIds, deleteUsersRequest.userIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(conversations, messages, newChannelOwnerId, user, userIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeleteUsersRequest {\n");
    sb.append("    conversations: ").append(toIndentedString(conversations)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    newChannelOwnerId: ").append(toIndentedString(newChannelOwnerId)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userIds: ").append(toIndentedString(userIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conversations");
    openapiFields.add("messages");
    openapiFields.add("new_channel_owner_id");
    openapiFields.add("user");
    openapiFields.add("user_ids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("user_ids");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeleteUsersRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeleteUsersRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeleteUsersRequest is not found in the empty JSON string", DeleteUsersRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeleteUsersRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeleteUsersRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeleteUsersRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("conversations") != null && !jsonObj.get("conversations").isJsonNull()) && !jsonObj.get("conversations").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversations` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversations").toString()));
      }
      // validate the optional field `conversations`
      if (jsonObj.get("conversations") != null && !jsonObj.get("conversations").isJsonNull()) {
        ConversationsEnum.validateJsonElement(jsonObj.get("conversations"));
      }
      if ((jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) && !jsonObj.get("messages").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messages` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messages").toString()));
      }
      // validate the optional field `messages`
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        MessagesEnum.validateJsonElement(jsonObj.get("messages"));
      }
      if ((jsonObj.get("new_channel_owner_id") != null && !jsonObj.get("new_channel_owner_id").isJsonNull()) && !jsonObj.get("new_channel_owner_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `new_channel_owner_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("new_channel_owner_id").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        UserEnum.validateJsonElement(jsonObj.get("user"));
      }
      // ensure the required json array is present
      if (jsonObj.get("user_ids") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("user_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_ids` to be an array in the JSON string but got `%s`", jsonObj.get("user_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeleteUsersRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeleteUsersRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeleteUsersRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeleteUsersRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DeleteUsersRequest>() {
           @Override
           public void write(JsonWriter out, DeleteUsersRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeleteUsersRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeleteUsersRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeleteUsersRequest
   * @throws IOException if the JSON string is invalid with respect to DeleteUsersRequest
   */
  public static DeleteUsersRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeleteUsersRequest.class);
  }

  /**
   * Convert an instance of DeleteUsersRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

