/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CampaignSort;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QueryRecipientsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryRecipientsRequest {
  public static final String SERIALIZED_NAME_FILTER_CONDITIONS = "filter_conditions";
  @SerializedName(SERIALIZED_NAME_FILTER_CONDITIONS)
  private Map<String, Object> filterConditions = new HashMap<>();

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private CampaignSort sort;

  public QueryRecipientsRequest() {
  }

  public QueryRecipientsRequest filterConditions(Map<String, Object> filterConditions) {
    this.filterConditions = filterConditions;
    return this;
  }

  public QueryRecipientsRequest putFilterConditionsItem(String key, Object filterConditionsItem) {
    if (this.filterConditions == null) {
      this.filterConditions = new HashMap<>();
    }
    this.filterConditions.put(key, filterConditionsItem);
    return this;
  }

  /**
   * Get filterConditions
   * @return filterConditions
   */
  @javax.annotation.Nonnull
  public Map<String, Object> getFilterConditions() {
    return filterConditions;
  }

  public void setFilterConditions(Map<String, Object> filterConditions) {
    this.filterConditions = filterConditions;
  }


  public QueryRecipientsRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Get limit
   * minimum: 1
   * maximum: 20
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public QueryRecipientsRequest sort(CampaignSort sort) {
    this.sort = sort;
    return this;
  }

  /**
   * Get sort
   * @return sort
   */
  @javax.annotation.Nullable
  public CampaignSort getSort() {
    return sort;
  }

  public void setSort(CampaignSort sort) {
    this.sort = sort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryRecipientsRequest queryRecipientsRequest = (QueryRecipientsRequest) o;
    return Objects.equals(this.filterConditions, queryRecipientsRequest.filterConditions) &&
        Objects.equals(this.limit, queryRecipientsRequest.limit) &&
        Objects.equals(this.sort, queryRecipientsRequest.sort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterConditions, limit, sort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryRecipientsRequest {\n");
    sb.append("    filterConditions: ").append(toIndentedString(filterConditions)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filter_conditions");
    openapiFields.add("limit");
    openapiFields.add("sort");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("filter_conditions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryRecipientsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryRecipientsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryRecipientsRequest is not found in the empty JSON string", QueryRecipientsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryRecipientsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryRecipientsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QueryRecipientsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `sort`
      if (jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) {
        CampaignSort.validateJsonElement(jsonObj.get("sort"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryRecipientsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryRecipientsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryRecipientsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryRecipientsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryRecipientsRequest>() {
           @Override
           public void write(JsonWriter out, QueryRecipientsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryRecipientsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryRecipientsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryRecipientsRequest
   * @throws IOException if the JSON string is invalid with respect to QueryRecipientsRequest
   */
  public static QueryRecipientsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryRecipientsRequest.class);
  }

  /**
   * Convert an instance of QueryRecipientsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

