/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchWarning
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchWarning {
  public static final String SERIALIZED_NAME_CHANNEL_SEARCH_CIDS = "channel_search_cids";
  @SerializedName(SERIALIZED_NAME_CHANNEL_SEARCH_CIDS)
  private List<String> channelSearchCids = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHANNEL_SEARCH_COUNT = "channel_search_count";
  @SerializedName(SERIALIZED_NAME_CHANNEL_SEARCH_COUNT)
  private Integer channelSearchCount;

  public static final String SERIALIZED_NAME_WARNING_CODE = "warning_code";
  @SerializedName(SERIALIZED_NAME_WARNING_CODE)
  private Integer warningCode;

  public static final String SERIALIZED_NAME_WARNING_DESCRIPTION = "warning_description";
  @SerializedName(SERIALIZED_NAME_WARNING_DESCRIPTION)
  private String warningDescription;

  public SearchWarning() {
  }

  public SearchWarning channelSearchCids(List<String> channelSearchCids) {
    this.channelSearchCids = channelSearchCids;
    return this;
  }

  public SearchWarning addChannelSearchCidsItem(String channelSearchCidsItem) {
    if (this.channelSearchCids == null) {
      this.channelSearchCids = new ArrayList<>();
    }
    this.channelSearchCids.add(channelSearchCidsItem);
    return this;
  }

  /**
   * Channel CIDs for the searched channels
   * @return channelSearchCids
   */
  @javax.annotation.Nullable
  public List<String> getChannelSearchCids() {
    return channelSearchCids;
  }

  public void setChannelSearchCids(List<String> channelSearchCids) {
    this.channelSearchCids = channelSearchCids;
  }


  public SearchWarning channelSearchCount(Integer channelSearchCount) {
    this.channelSearchCount = channelSearchCount;
    return this;
  }

  /**
   * Number of channels searched
   * @return channelSearchCount
   */
  @javax.annotation.Nullable
  public Integer getChannelSearchCount() {
    return channelSearchCount;
  }

  public void setChannelSearchCount(Integer channelSearchCount) {
    this.channelSearchCount = channelSearchCount;
  }


  public SearchWarning warningCode(Integer warningCode) {
    this.warningCode = warningCode;
    return this;
  }

  /**
   * Code corresponding to the warning
   * @return warningCode
   */
  @javax.annotation.Nonnull
  public Integer getWarningCode() {
    return warningCode;
  }

  public void setWarningCode(Integer warningCode) {
    this.warningCode = warningCode;
  }


  public SearchWarning warningDescription(String warningDescription) {
    this.warningDescription = warningDescription;
    return this;
  }

  /**
   * Description of the warning
   * @return warningDescription
   */
  @javax.annotation.Nonnull
  public String getWarningDescription() {
    return warningDescription;
  }

  public void setWarningDescription(String warningDescription) {
    this.warningDescription = warningDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchWarning searchWarning = (SearchWarning) o;
    return Objects.equals(this.channelSearchCids, searchWarning.channelSearchCids) &&
        Objects.equals(this.channelSearchCount, searchWarning.channelSearchCount) &&
        Objects.equals(this.warningCode, searchWarning.warningCode) &&
        Objects.equals(this.warningDescription, searchWarning.warningDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelSearchCids, channelSearchCount, warningCode, warningDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchWarning {\n");
    sb.append("    channelSearchCids: ").append(toIndentedString(channelSearchCids)).append("\n");
    sb.append("    channelSearchCount: ").append(toIndentedString(channelSearchCount)).append("\n");
    sb.append("    warningCode: ").append(toIndentedString(warningCode)).append("\n");
    sb.append("    warningDescription: ").append(toIndentedString(warningDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channel_search_cids");
    openapiFields.add("channel_search_count");
    openapiFields.add("warning_code");
    openapiFields.add("warning_description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("warning_code");
    openapiRequiredFields.add("warning_description");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchWarning
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchWarning.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchWarning is not found in the empty JSON string", SearchWarning.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchWarning.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchWarning` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchWarning.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("channel_search_cids") != null && !jsonObj.get("channel_search_cids").isJsonNull() && !jsonObj.get("channel_search_cids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_search_cids` to be an array in the JSON string but got `%s`", jsonObj.get("channel_search_cids").toString()));
      }
      if (!jsonObj.get("warning_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warning_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warning_description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchWarning.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchWarning' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchWarning> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchWarning.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchWarning>() {
           @Override
           public void write(JsonWriter out, SearchWarning value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchWarning read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchWarning given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchWarning
   * @throws IOException if the JSON string is invalid with respect to SearchWarning
   */
  public static SearchWarning fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchWarning.class);
  }

  /**
   * Convert an instance of SearchWarning to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

