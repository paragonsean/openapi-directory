/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttachmentRequest;
import org.openapitools.client.model.UserObjectRequest;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents any chat message
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MessageRequest {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<AttachmentRequest> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CID = "cid";
  @SerializedName(SERIALIZED_NAME_CID)
  private List<Integer> cid = new ArrayList<>();

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private String html;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_MENTIONED_USERS = "mentioned_users";
  @SerializedName(SERIALIZED_NAME_MENTIONED_USERS)
  private List<String> mentionedUsers = new ArrayList<>();

  public static final String SERIALIZED_NAME_MML = "mml";
  @SerializedName(SERIALIZED_NAME_MML)
  private String mml;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private List<Integer> parent = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private String parentId;

  public static final String SERIALIZED_NAME_PIN_EXPIRES = "pin_expires";
  @SerializedName(SERIALIZED_NAME_PIN_EXPIRES)
  private OffsetDateTime pinExpires;

  public static final String SERIALIZED_NAME_PINNED = "pinned";
  @SerializedName(SERIALIZED_NAME_PINNED)
  private Boolean pinned;

  public static final String SERIALIZED_NAME_PINNED_AT = "pinned_at";
  @SerializedName(SERIALIZED_NAME_PINNED_AT)
  private OffsetDateTime pinnedAt;

  public static final String SERIALIZED_NAME_PINNED_BY = "pinned_by";
  @SerializedName(SERIALIZED_NAME_PINNED_BY)
  private List<Integer> pinnedBy = new ArrayList<>();

  public static final String SERIALIZED_NAME_QUOTED_MESSAGE_ID = "quoted_message_id";
  @SerializedName(SERIALIZED_NAME_QUOTED_MESSAGE_ID)
  private String quotedMessageId;

  public static final String SERIALIZED_NAME_REACTION_SCORES = "reaction_scores";
  @SerializedName(SERIALIZED_NAME_REACTION_SCORES)
  private List<Integer> reactionScores = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHOW_IN_CHANNEL = "show_in_channel";
  @SerializedName(SERIALIZED_NAME_SHOW_IN_CHANNEL)
  private Boolean showInChannel;

  public static final String SERIALIZED_NAME_SILENT = "silent";
  @SerializedName(SERIALIZED_NAME_SILENT)
  private Boolean silent;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  /**
   * Contains type of the message
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    REGULAR("regular"),
    
    EPHEMERAL("ephemeral"),
    
    ERROR("error"),
    
    REPLY("reply"),
    
    SYSTEM("system"),
    
    DELETED("deleted");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserObjectRequest user;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public MessageRequest() {
  }

  public MessageRequest attachments(List<AttachmentRequest> attachments) {
    this.attachments = attachments;
    return this;
  }

  public MessageRequest addAttachmentsItem(AttachmentRequest attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Array of message attachments
   * @return attachments
   */
  @javax.annotation.Nonnull
  public List<AttachmentRequest> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<AttachmentRequest> attachments) {
    this.attachments = attachments;
  }


  public MessageRequest cid(List<Integer> cid) {
    this.cid = cid;
    return this;
  }

  public MessageRequest addCidItem(Integer cidItem) {
    if (this.cid == null) {
      this.cid = new ArrayList<>();
    }
    this.cid.add(cidItem);
    return this;
  }

  /**
   * Channel unique identifier in &lt;type&gt;:&lt;id&gt; format
   * @return cid
   */
  @javax.annotation.Nullable
  public List<Integer> getCid() {
    return cid;
  }

  public void setCid(List<Integer> cid) {
    this.cid = cid;
  }


  public MessageRequest html(String html) {
    this.html = html;
    return this;
  }

  /**
   * Contains HTML markup of the message. Can only be set when using server-side API
   * @return html
   */
  @javax.annotation.Nullable
  public String getHtml() {
    return html;
  }

  public void setHtml(String html) {
    this.html = html;
  }


  public MessageRequest id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Message ID is unique string identifier of the message
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public MessageRequest mentionedUsers(List<String> mentionedUsers) {
    this.mentionedUsers = mentionedUsers;
    return this;
  }

  public MessageRequest addMentionedUsersItem(String mentionedUsersItem) {
    if (this.mentionedUsers == null) {
      this.mentionedUsers = new ArrayList<>();
    }
    this.mentionedUsers.add(mentionedUsersItem);
    return this;
  }

  /**
   * List of mentioned users
   * @return mentionedUsers
   */
  @javax.annotation.Nullable
  public List<String> getMentionedUsers() {
    return mentionedUsers;
  }

  public void setMentionedUsers(List<String> mentionedUsers) {
    this.mentionedUsers = mentionedUsers;
  }


  public MessageRequest mml(String mml) {
    this.mml = mml;
    return this;
  }

  /**
   * Should be empty if &#x60;text&#x60; is provided. Can only be set when using server-side API
   * @return mml
   */
  @javax.annotation.Nullable
  public String getMml() {
    return mml;
  }

  public void setMml(String mml) {
    this.mml = mml;
  }


  public MessageRequest parent(List<Integer> parent) {
    this.parent = parent;
    return this;
  }

  public MessageRequest addParentItem(Integer parentItem) {
    if (this.parent == null) {
      this.parent = new ArrayList<>();
    }
    this.parent.add(parentItem);
    return this;
  }

  /**
   * Get parent
   * @return parent
   */
  @javax.annotation.Nullable
  public List<Integer> getParent() {
    return parent;
  }

  public void setParent(List<Integer> parent) {
    this.parent = parent;
  }


  public MessageRequest parentId(String parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * ID of parent message (thread)
   * @return parentId
   */
  @javax.annotation.Nullable
  public String getParentId() {
    return parentId;
  }

  public void setParentId(String parentId) {
    this.parentId = parentId;
  }


  public MessageRequest pinExpires(OffsetDateTime pinExpires) {
    this.pinExpires = pinExpires;
    return this;
  }

  /**
   * Date when pinned message expires
   * @return pinExpires
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPinExpires() {
    return pinExpires;
  }

  public void setPinExpires(OffsetDateTime pinExpires) {
    this.pinExpires = pinExpires;
  }


  public MessageRequest pinned(Boolean pinned) {
    this.pinned = pinned;
    return this;
  }

  /**
   * Whether message is pinned or not
   * @return pinned
   */
  @javax.annotation.Nullable
  public Boolean getPinned() {
    return pinned;
  }

  public void setPinned(Boolean pinned) {
    this.pinned = pinned;
  }


  public MessageRequest pinnedAt(OffsetDateTime pinnedAt) {
    this.pinnedAt = pinnedAt;
    return this;
  }

  /**
   * Date when message got pinned
   * @return pinnedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPinnedAt() {
    return pinnedAt;
  }

  public void setPinnedAt(OffsetDateTime pinnedAt) {
    this.pinnedAt = pinnedAt;
  }


  public MessageRequest pinnedBy(List<Integer> pinnedBy) {
    this.pinnedBy = pinnedBy;
    return this;
  }

  public MessageRequest addPinnedByItem(Integer pinnedByItem) {
    if (this.pinnedBy == null) {
      this.pinnedBy = new ArrayList<>();
    }
    this.pinnedBy.add(pinnedByItem);
    return this;
  }

  /**
   * Contains user who pinned the message
   * @return pinnedBy
   */
  @javax.annotation.Nullable
  public List<Integer> getPinnedBy() {
    return pinnedBy;
  }

  public void setPinnedBy(List<Integer> pinnedBy) {
    this.pinnedBy = pinnedBy;
  }


  public MessageRequest quotedMessageId(String quotedMessageId) {
    this.quotedMessageId = quotedMessageId;
    return this;
  }

  /**
   * Get quotedMessageId
   * @return quotedMessageId
   */
  @javax.annotation.Nullable
  public String getQuotedMessageId() {
    return quotedMessageId;
  }

  public void setQuotedMessageId(String quotedMessageId) {
    this.quotedMessageId = quotedMessageId;
  }


  public MessageRequest reactionScores(List<Integer> reactionScores) {
    this.reactionScores = reactionScores;
    return this;
  }

  public MessageRequest addReactionScoresItem(Integer reactionScoresItem) {
    if (this.reactionScores == null) {
      this.reactionScores = new ArrayList<>();
    }
    this.reactionScores.add(reactionScoresItem);
    return this;
  }

  /**
   * An object containing scores of reactions of each type. Key: reaction type (string), value: total score of reactions (int)
   * @return reactionScores
   */
  @javax.annotation.Nullable
  public List<Integer> getReactionScores() {
    return reactionScores;
  }

  public void setReactionScores(List<Integer> reactionScores) {
    this.reactionScores = reactionScores;
  }


  public MessageRequest showInChannel(Boolean showInChannel) {
    this.showInChannel = showInChannel;
    return this;
  }

  /**
   * Whether thread reply should be shown in the channel as well
   * @return showInChannel
   */
  @javax.annotation.Nullable
  public Boolean getShowInChannel() {
    return showInChannel;
  }

  public void setShowInChannel(Boolean showInChannel) {
    this.showInChannel = showInChannel;
  }


  public MessageRequest silent(Boolean silent) {
    this.silent = silent;
    return this;
  }

  /**
   * Whether message is silent or not
   * @return silent
   */
  @javax.annotation.Nullable
  public Boolean getSilent() {
    return silent;
  }

  public void setSilent(Boolean silent) {
    this.silent = silent;
  }


  public MessageRequest text(String text) {
    this.text = text;
    return this;
  }

  /**
   * Text of the message. Should be empty if &#x60;mml&#x60; is provided
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public MessageRequest type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Contains type of the message
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public MessageRequest user(UserObjectRequest user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserObjectRequest getUser() {
    return user;
  }

  public void setUser(UserObjectRequest user) {
    this.user = user;
  }


  public MessageRequest userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MessageRequest instance itself
   */
  public MessageRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageRequest messageRequest = (MessageRequest) o;
    return Objects.equals(this.attachments, messageRequest.attachments) &&
        Objects.equals(this.cid, messageRequest.cid) &&
        Objects.equals(this.html, messageRequest.html) &&
        Objects.equals(this.id, messageRequest.id) &&
        Objects.equals(this.mentionedUsers, messageRequest.mentionedUsers) &&
        Objects.equals(this.mml, messageRequest.mml) &&
        Objects.equals(this.parent, messageRequest.parent) &&
        Objects.equals(this.parentId, messageRequest.parentId) &&
        Objects.equals(this.pinExpires, messageRequest.pinExpires) &&
        Objects.equals(this.pinned, messageRequest.pinned) &&
        Objects.equals(this.pinnedAt, messageRequest.pinnedAt) &&
        Objects.equals(this.pinnedBy, messageRequest.pinnedBy) &&
        Objects.equals(this.quotedMessageId, messageRequest.quotedMessageId) &&
        Objects.equals(this.reactionScores, messageRequest.reactionScores) &&
        Objects.equals(this.showInChannel, messageRequest.showInChannel) &&
        Objects.equals(this.silent, messageRequest.silent) &&
        Objects.equals(this.text, messageRequest.text) &&
        Objects.equals(this.type, messageRequest.type) &&
        Objects.equals(this.user, messageRequest.user) &&
        Objects.equals(this.userId, messageRequest.userId)&&
        Objects.equals(this.additionalProperties, messageRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, cid, html, id, mentionedUsers, mml, parent, parentId, pinExpires, pinned, pinnedAt, pinnedBy, quotedMessageId, reactionScores, showInChannel, silent, text, type, user, userId, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageRequest {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    cid: ").append(toIndentedString(cid)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mentionedUsers: ").append(toIndentedString(mentionedUsers)).append("\n");
    sb.append("    mml: ").append(toIndentedString(mml)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    pinExpires: ").append(toIndentedString(pinExpires)).append("\n");
    sb.append("    pinned: ").append(toIndentedString(pinned)).append("\n");
    sb.append("    pinnedAt: ").append(toIndentedString(pinnedAt)).append("\n");
    sb.append("    pinnedBy: ").append(toIndentedString(pinnedBy)).append("\n");
    sb.append("    quotedMessageId: ").append(toIndentedString(quotedMessageId)).append("\n");
    sb.append("    reactionScores: ").append(toIndentedString(reactionScores)).append("\n");
    sb.append("    showInChannel: ").append(toIndentedString(showInChannel)).append("\n");
    sb.append("    silent: ").append(toIndentedString(silent)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachments");
    openapiFields.add("cid");
    openapiFields.add("html");
    openapiFields.add("id");
    openapiFields.add("mentioned_users");
    openapiFields.add("mml");
    openapiFields.add("parent");
    openapiFields.add("parent_id");
    openapiFields.add("pin_expires");
    openapiFields.add("pinned");
    openapiFields.add("pinned_at");
    openapiFields.add("pinned_by");
    openapiFields.add("quoted_message_id");
    openapiFields.add("reaction_scores");
    openapiFields.add("show_in_channel");
    openapiFields.add("silent");
    openapiFields.add("text");
    openapiFields.add("type");
    openapiFields.add("user");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attachments");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MessageRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MessageRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessageRequest is not found in the empty JSON string", MessageRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MessageRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("attachments") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("attachments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cid") != null && !jsonObj.get("cid").isJsonNull() && !jsonObj.get("cid").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cid` to be an array in the JSON string but got `%s`", jsonObj.get("cid").toString()));
      }
      if ((jsonObj.get("html") != null && !jsonObj.get("html").isJsonNull()) && !jsonObj.get("html").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `html` to be a primitive type in the JSON string but got `%s`", jsonObj.get("html").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mentioned_users") != null && !jsonObj.get("mentioned_users").isJsonNull() && !jsonObj.get("mentioned_users").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mentioned_users` to be an array in the JSON string but got `%s`", jsonObj.get("mentioned_users").toString()));
      }
      if ((jsonObj.get("mml") != null && !jsonObj.get("mml").isJsonNull()) && !jsonObj.get("mml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mml").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull() && !jsonObj.get("parent").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent` to be an array in the JSON string but got `%s`", jsonObj.get("parent").toString()));
      }
      if ((jsonObj.get("parent_id") != null && !jsonObj.get("parent_id").isJsonNull()) && !jsonObj.get("parent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pinned_by") != null && !jsonObj.get("pinned_by").isJsonNull() && !jsonObj.get("pinned_by").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pinned_by` to be an array in the JSON string but got `%s`", jsonObj.get("pinned_by").toString()));
      }
      if ((jsonObj.get("quoted_message_id") != null && !jsonObj.get("quoted_message_id").isJsonNull()) && !jsonObj.get("quoted_message_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quoted_message_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quoted_message_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reaction_scores") != null && !jsonObj.get("reaction_scores").isJsonNull() && !jsonObj.get("reaction_scores").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reaction_scores` to be an array in the JSON string but got `%s`", jsonObj.get("reaction_scores").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessageRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessageRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessageRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessageRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<MessageRequest>() {
           @Override
           public void write(JsonWriter out, MessageRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MessageRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             MessageRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MessageRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MessageRequest
   * @throws IOException if the JSON string is invalid with respect to MessageRequest
   */
  public static MessageRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessageRequest.class);
  }

  /**
   * Convert an instance of MessageRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

