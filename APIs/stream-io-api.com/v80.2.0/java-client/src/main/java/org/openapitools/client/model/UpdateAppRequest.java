/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.APNConfigRequest;
import org.openapitools.client.model.AsyncModerationConfigurationRequest;
import org.openapitools.client.model.ConfigRequest;
import org.openapitools.client.model.FileUploadConfigRequest;
import org.openapitools.client.model.FirebaseConfigRequest;
import org.openapitools.client.model.HuaweiConfigRequest;
import org.openapitools.client.model.PushConfigRequest;
import org.openapitools.client.model.XiaomiConfigRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateAppRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateAppRequest {
  public static final String SERIALIZED_NAME_AGORA_OPTIONS = "agora_options";
  @SerializedName(SERIALIZED_NAME_AGORA_OPTIONS)
  private ConfigRequest agoraOptions;

  public static final String SERIALIZED_NAME_APN_CONFIG = "apn_config";
  @SerializedName(SERIALIZED_NAME_APN_CONFIG)
  private APNConfigRequest apnConfig;

  public static final String SERIALIZED_NAME_ASYNC_MODERATION_CONFIG = "async_moderation_config";
  @SerializedName(SERIALIZED_NAME_ASYNC_MODERATION_CONFIG)
  private AsyncModerationConfigurationRequest asyncModerationConfig;

  public static final String SERIALIZED_NAME_ASYNC_URL_ENRICH_ENABLED = "async_url_enrich_enabled";
  @SerializedName(SERIALIZED_NAME_ASYNC_URL_ENRICH_ENABLED)
  private Boolean asyncUrlEnrichEnabled;

  public static final String SERIALIZED_NAME_AUTO_TRANSLATION_ENABLED = "auto_translation_enabled";
  @SerializedName(SERIALIZED_NAME_AUTO_TRANSLATION_ENABLED)
  private Boolean autoTranslationEnabled;

  public static final String SERIALIZED_NAME_BEFORE_MESSAGE_SEND_HOOK_URL = "before_message_send_hook_url";
  @SerializedName(SERIALIZED_NAME_BEFORE_MESSAGE_SEND_HOOK_URL)
  private String beforeMessageSendHookUrl;

  public static final String SERIALIZED_NAME_CDN_EXPIRATION_SECONDS = "cdn_expiration_seconds";
  @SerializedName(SERIALIZED_NAME_CDN_EXPIRATION_SECONDS)
  private Integer cdnExpirationSeconds;

  public static final String SERIALIZED_NAME_CHANNEL_HIDE_MEMBERS_ONLY = "channel_hide_members_only";
  @SerializedName(SERIALIZED_NAME_CHANNEL_HIDE_MEMBERS_ONLY)
  private Boolean channelHideMembersOnly;

  public static final String SERIALIZED_NAME_CUSTOM_ACTION_HANDLER_URL = "custom_action_handler_url";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ACTION_HANDLER_URL)
  private String customActionHandlerUrl;

  public static final String SERIALIZED_NAME_DISABLE_AUTH_CHECKS = "disable_auth_checks";
  @SerializedName(SERIALIZED_NAME_DISABLE_AUTH_CHECKS)
  private Boolean disableAuthChecks;

  public static final String SERIALIZED_NAME_DISABLE_PERMISSIONS_CHECKS = "disable_permissions_checks";
  @SerializedName(SERIALIZED_NAME_DISABLE_PERMISSIONS_CHECKS)
  private Boolean disablePermissionsChecks;

  /**
   * Gets or Sets enforceUniqueUsernames
   */
  @JsonAdapter(EnforceUniqueUsernamesEnum.Adapter.class)
  public enum EnforceUniqueUsernamesEnum {
    FALSE("false"),
    
    APP("app"),
    
    TEAM("team");

    private String value;

    EnforceUniqueUsernamesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EnforceUniqueUsernamesEnum fromValue(String value) {
      for (EnforceUniqueUsernamesEnum b : EnforceUniqueUsernamesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EnforceUniqueUsernamesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EnforceUniqueUsernamesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EnforceUniqueUsernamesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EnforceUniqueUsernamesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EnforceUniqueUsernamesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENFORCE_UNIQUE_USERNAMES = "enforce_unique_usernames";
  @SerializedName(SERIALIZED_NAME_ENFORCE_UNIQUE_USERNAMES)
  private EnforceUniqueUsernamesEnum enforceUniqueUsernames;

  public static final String SERIALIZED_NAME_FILE_UPLOAD_CONFIG = "file_upload_config";
  @SerializedName(SERIALIZED_NAME_FILE_UPLOAD_CONFIG)
  private FileUploadConfigRequest fileUploadConfig;

  public static final String SERIALIZED_NAME_FIREBASE_CONFIG = "firebase_config";
  @SerializedName(SERIALIZED_NAME_FIREBASE_CONFIG)
  private FirebaseConfigRequest firebaseConfig;

  public static final String SERIALIZED_NAME_GRANTS = "grants";
  @SerializedName(SERIALIZED_NAME_GRANTS)
  private Map<String, List<String>> grants = new HashMap<>();

  public static final String SERIALIZED_NAME_HMS_OPTIONS = "hms_options";
  @SerializedName(SERIALIZED_NAME_HMS_OPTIONS)
  private ConfigRequest hmsOptions;

  public static final String SERIALIZED_NAME_HUAWEI_CONFIG = "huawei_config";
  @SerializedName(SERIALIZED_NAME_HUAWEI_CONFIG)
  private HuaweiConfigRequest huaweiConfig;

  public static final String SERIALIZED_NAME_IMAGE_MODERATION_BLOCK_LABELS = "image_moderation_block_labels";
  @SerializedName(SERIALIZED_NAME_IMAGE_MODERATION_BLOCK_LABELS)
  private List<String> imageModerationBlockLabels = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE_MODERATION_ENABLED = "image_moderation_enabled";
  @SerializedName(SERIALIZED_NAME_IMAGE_MODERATION_ENABLED)
  private Boolean imageModerationEnabled;

  public static final String SERIALIZED_NAME_IMAGE_MODERATION_LABELS = "image_moderation_labels";
  @SerializedName(SERIALIZED_NAME_IMAGE_MODERATION_LABELS)
  private List<String> imageModerationLabels = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE_UPLOAD_CONFIG = "image_upload_config";
  @SerializedName(SERIALIZED_NAME_IMAGE_UPLOAD_CONFIG)
  private FileUploadConfigRequest imageUploadConfig;

  public static final String SERIALIZED_NAME_MIGRATE_PERMISSIONS_TO_V2 = "migrate_permissions_to_v2";
  @SerializedName(SERIALIZED_NAME_MIGRATE_PERMISSIONS_TO_V2)
  private Boolean migratePermissionsToV2;

  public static final String SERIALIZED_NAME_MULTI_TENANT_ENABLED = "multi_tenant_enabled";
  @SerializedName(SERIALIZED_NAME_MULTI_TENANT_ENABLED)
  private Boolean multiTenantEnabled;

  /**
   * Gets or Sets permissionVersion
   */
  @JsonAdapter(PermissionVersionEnum.Adapter.class)
  public enum PermissionVersionEnum {
    V1("v1"),
    
    V2("v2");

    private String value;

    PermissionVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PermissionVersionEnum fromValue(String value) {
      for (PermissionVersionEnum b : PermissionVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PermissionVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PermissionVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PermissionVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PermissionVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PermissionVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERMISSION_VERSION = "permission_version";
  @SerializedName(SERIALIZED_NAME_PERMISSION_VERSION)
  private PermissionVersionEnum permissionVersion;

  public static final String SERIALIZED_NAME_PUSH_CONFIG = "push_config";
  @SerializedName(SERIALIZED_NAME_PUSH_CONFIG)
  private PushConfigRequest pushConfig;

  public static final String SERIALIZED_NAME_REMINDERS_INTERVAL = "reminders_interval";
  @SerializedName(SERIALIZED_NAME_REMINDERS_INTERVAL)
  private Integer remindersInterval;

  public static final String SERIALIZED_NAME_REVOKE_TOKENS_ISSUED_BEFORE = "revoke_tokens_issued_before";
  @SerializedName(SERIALIZED_NAME_REVOKE_TOKENS_ISSUED_BEFORE)
  private OffsetDateTime revokeTokensIssuedBefore;

  public static final String SERIALIZED_NAME_SQS_KEY = "sqs_key";
  @SerializedName(SERIALIZED_NAME_SQS_KEY)
  private String sqsKey;

  public static final String SERIALIZED_NAME_SQS_SECRET = "sqs_secret";
  @SerializedName(SERIALIZED_NAME_SQS_SECRET)
  private String sqsSecret;

  public static final String SERIALIZED_NAME_SQS_URL = "sqs_url";
  @SerializedName(SERIALIZED_NAME_SQS_URL)
  private String sqsUrl;

  public static final String SERIALIZED_NAME_USER_SEARCH_DISALLOWED_ROLES = "user_search_disallowed_roles";
  @SerializedName(SERIALIZED_NAME_USER_SEARCH_DISALLOWED_ROLES)
  private List<String> userSearchDisallowedRoles = new ArrayList<>();

  /**
   * Gets or Sets videoProvider
   */
  @JsonAdapter(VideoProviderEnum.Adapter.class)
  public enum VideoProviderEnum {
    AGORA("agora"),
    
    HMS("hms");

    private String value;

    VideoProviderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VideoProviderEnum fromValue(String value) {
      for (VideoProviderEnum b : VideoProviderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VideoProviderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VideoProviderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VideoProviderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VideoProviderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VideoProviderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIDEO_PROVIDER = "video_provider";
  @SerializedName(SERIALIZED_NAME_VIDEO_PROVIDER)
  private VideoProviderEnum videoProvider;

  public static final String SERIALIZED_NAME_WEBHOOK_EVENTS = "webhook_events";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_EVENTS)
  private List<String> webhookEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEBHOOK_URL = "webhook_url";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_URL)
  private String webhookUrl;

  public static final String SERIALIZED_NAME_XIAOMI_CONFIG = "xiaomi_config";
  @SerializedName(SERIALIZED_NAME_XIAOMI_CONFIG)
  private XiaomiConfigRequest xiaomiConfig;

  public UpdateAppRequest() {
  }

  public UpdateAppRequest agoraOptions(ConfigRequest agoraOptions) {
    this.agoraOptions = agoraOptions;
    return this;
  }

  /**
   * Get agoraOptions
   * @return agoraOptions
   */
  @javax.annotation.Nullable
  public ConfigRequest getAgoraOptions() {
    return agoraOptions;
  }

  public void setAgoraOptions(ConfigRequest agoraOptions) {
    this.agoraOptions = agoraOptions;
  }


  public UpdateAppRequest apnConfig(APNConfigRequest apnConfig) {
    this.apnConfig = apnConfig;
    return this;
  }

  /**
   * Get apnConfig
   * @return apnConfig
   */
  @javax.annotation.Nullable
  public APNConfigRequest getApnConfig() {
    return apnConfig;
  }

  public void setApnConfig(APNConfigRequest apnConfig) {
    this.apnConfig = apnConfig;
  }


  public UpdateAppRequest asyncModerationConfig(AsyncModerationConfigurationRequest asyncModerationConfig) {
    this.asyncModerationConfig = asyncModerationConfig;
    return this;
  }

  /**
   * Get asyncModerationConfig
   * @return asyncModerationConfig
   */
  @javax.annotation.Nullable
  public AsyncModerationConfigurationRequest getAsyncModerationConfig() {
    return asyncModerationConfig;
  }

  public void setAsyncModerationConfig(AsyncModerationConfigurationRequest asyncModerationConfig) {
    this.asyncModerationConfig = asyncModerationConfig;
  }


  public UpdateAppRequest asyncUrlEnrichEnabled(Boolean asyncUrlEnrichEnabled) {
    this.asyncUrlEnrichEnabled = asyncUrlEnrichEnabled;
    return this;
  }

  /**
   * Get asyncUrlEnrichEnabled
   * @return asyncUrlEnrichEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAsyncUrlEnrichEnabled() {
    return asyncUrlEnrichEnabled;
  }

  public void setAsyncUrlEnrichEnabled(Boolean asyncUrlEnrichEnabled) {
    this.asyncUrlEnrichEnabled = asyncUrlEnrichEnabled;
  }


  public UpdateAppRequest autoTranslationEnabled(Boolean autoTranslationEnabled) {
    this.autoTranslationEnabled = autoTranslationEnabled;
    return this;
  }

  /**
   * Get autoTranslationEnabled
   * @return autoTranslationEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAutoTranslationEnabled() {
    return autoTranslationEnabled;
  }

  public void setAutoTranslationEnabled(Boolean autoTranslationEnabled) {
    this.autoTranslationEnabled = autoTranslationEnabled;
  }


  public UpdateAppRequest beforeMessageSendHookUrl(String beforeMessageSendHookUrl) {
    this.beforeMessageSendHookUrl = beforeMessageSendHookUrl;
    return this;
  }

  /**
   * Get beforeMessageSendHookUrl
   * @return beforeMessageSendHookUrl
   */
  @javax.annotation.Nullable
  public String getBeforeMessageSendHookUrl() {
    return beforeMessageSendHookUrl;
  }

  public void setBeforeMessageSendHookUrl(String beforeMessageSendHookUrl) {
    this.beforeMessageSendHookUrl = beforeMessageSendHookUrl;
  }


  public UpdateAppRequest cdnExpirationSeconds(Integer cdnExpirationSeconds) {
    this.cdnExpirationSeconds = cdnExpirationSeconds;
    return this;
  }

  /**
   * Get cdnExpirationSeconds
   * minimum: 14400
   * maximum: 1209600
   * @return cdnExpirationSeconds
   */
  @javax.annotation.Nullable
  public Integer getCdnExpirationSeconds() {
    return cdnExpirationSeconds;
  }

  public void setCdnExpirationSeconds(Integer cdnExpirationSeconds) {
    this.cdnExpirationSeconds = cdnExpirationSeconds;
  }


  public UpdateAppRequest channelHideMembersOnly(Boolean channelHideMembersOnly) {
    this.channelHideMembersOnly = channelHideMembersOnly;
    return this;
  }

  /**
   * Get channelHideMembersOnly
   * @return channelHideMembersOnly
   */
  @javax.annotation.Nullable
  public Boolean getChannelHideMembersOnly() {
    return channelHideMembersOnly;
  }

  public void setChannelHideMembersOnly(Boolean channelHideMembersOnly) {
    this.channelHideMembersOnly = channelHideMembersOnly;
  }


  public UpdateAppRequest customActionHandlerUrl(String customActionHandlerUrl) {
    this.customActionHandlerUrl = customActionHandlerUrl;
    return this;
  }

  /**
   * Get customActionHandlerUrl
   * @return customActionHandlerUrl
   */
  @javax.annotation.Nullable
  public String getCustomActionHandlerUrl() {
    return customActionHandlerUrl;
  }

  public void setCustomActionHandlerUrl(String customActionHandlerUrl) {
    this.customActionHandlerUrl = customActionHandlerUrl;
  }


  public UpdateAppRequest disableAuthChecks(Boolean disableAuthChecks) {
    this.disableAuthChecks = disableAuthChecks;
    return this;
  }

  /**
   * Get disableAuthChecks
   * @return disableAuthChecks
   */
  @javax.annotation.Nullable
  public Boolean getDisableAuthChecks() {
    return disableAuthChecks;
  }

  public void setDisableAuthChecks(Boolean disableAuthChecks) {
    this.disableAuthChecks = disableAuthChecks;
  }


  public UpdateAppRequest disablePermissionsChecks(Boolean disablePermissionsChecks) {
    this.disablePermissionsChecks = disablePermissionsChecks;
    return this;
  }

  /**
   * Get disablePermissionsChecks
   * @return disablePermissionsChecks
   */
  @javax.annotation.Nullable
  public Boolean getDisablePermissionsChecks() {
    return disablePermissionsChecks;
  }

  public void setDisablePermissionsChecks(Boolean disablePermissionsChecks) {
    this.disablePermissionsChecks = disablePermissionsChecks;
  }


  public UpdateAppRequest enforceUniqueUsernames(EnforceUniqueUsernamesEnum enforceUniqueUsernames) {
    this.enforceUniqueUsernames = enforceUniqueUsernames;
    return this;
  }

  /**
   * Get enforceUniqueUsernames
   * @return enforceUniqueUsernames
   */
  @javax.annotation.Nullable
  public EnforceUniqueUsernamesEnum getEnforceUniqueUsernames() {
    return enforceUniqueUsernames;
  }

  public void setEnforceUniqueUsernames(EnforceUniqueUsernamesEnum enforceUniqueUsernames) {
    this.enforceUniqueUsernames = enforceUniqueUsernames;
  }


  public UpdateAppRequest fileUploadConfig(FileUploadConfigRequest fileUploadConfig) {
    this.fileUploadConfig = fileUploadConfig;
    return this;
  }

  /**
   * Get fileUploadConfig
   * @return fileUploadConfig
   */
  @javax.annotation.Nullable
  public FileUploadConfigRequest getFileUploadConfig() {
    return fileUploadConfig;
  }

  public void setFileUploadConfig(FileUploadConfigRequest fileUploadConfig) {
    this.fileUploadConfig = fileUploadConfig;
  }


  public UpdateAppRequest firebaseConfig(FirebaseConfigRequest firebaseConfig) {
    this.firebaseConfig = firebaseConfig;
    return this;
  }

  /**
   * Get firebaseConfig
   * @return firebaseConfig
   */
  @javax.annotation.Nullable
  public FirebaseConfigRequest getFirebaseConfig() {
    return firebaseConfig;
  }

  public void setFirebaseConfig(FirebaseConfigRequest firebaseConfig) {
    this.firebaseConfig = firebaseConfig;
  }


  public UpdateAppRequest grants(Map<String, List<String>> grants) {
    this.grants = grants;
    return this;
  }

  public UpdateAppRequest putGrantsItem(String key, List<String> grantsItem) {
    if (this.grants == null) {
      this.grants = new HashMap<>();
    }
    this.grants.put(key, grantsItem);
    return this;
  }

  /**
   * Get grants
   * @return grants
   */
  @javax.annotation.Nullable
  public Map<String, List<String>> getGrants() {
    return grants;
  }

  public void setGrants(Map<String, List<String>> grants) {
    this.grants = grants;
  }


  public UpdateAppRequest hmsOptions(ConfigRequest hmsOptions) {
    this.hmsOptions = hmsOptions;
    return this;
  }

  /**
   * Get hmsOptions
   * @return hmsOptions
   */
  @javax.annotation.Nullable
  public ConfigRequest getHmsOptions() {
    return hmsOptions;
  }

  public void setHmsOptions(ConfigRequest hmsOptions) {
    this.hmsOptions = hmsOptions;
  }


  public UpdateAppRequest huaweiConfig(HuaweiConfigRequest huaweiConfig) {
    this.huaweiConfig = huaweiConfig;
    return this;
  }

  /**
   * Get huaweiConfig
   * @return huaweiConfig
   */
  @javax.annotation.Nullable
  public HuaweiConfigRequest getHuaweiConfig() {
    return huaweiConfig;
  }

  public void setHuaweiConfig(HuaweiConfigRequest huaweiConfig) {
    this.huaweiConfig = huaweiConfig;
  }


  public UpdateAppRequest imageModerationBlockLabels(List<String> imageModerationBlockLabels) {
    this.imageModerationBlockLabels = imageModerationBlockLabels;
    return this;
  }

  public UpdateAppRequest addImageModerationBlockLabelsItem(String imageModerationBlockLabelsItem) {
    if (this.imageModerationBlockLabels == null) {
      this.imageModerationBlockLabels = new ArrayList<>();
    }
    this.imageModerationBlockLabels.add(imageModerationBlockLabelsItem);
    return this;
  }

  /**
   * Get imageModerationBlockLabels
   * @return imageModerationBlockLabels
   */
  @javax.annotation.Nullable
  public List<String> getImageModerationBlockLabels() {
    return imageModerationBlockLabels;
  }

  public void setImageModerationBlockLabels(List<String> imageModerationBlockLabels) {
    this.imageModerationBlockLabels = imageModerationBlockLabels;
  }


  public UpdateAppRequest imageModerationEnabled(Boolean imageModerationEnabled) {
    this.imageModerationEnabled = imageModerationEnabled;
    return this;
  }

  /**
   * Get imageModerationEnabled
   * @return imageModerationEnabled
   */
  @javax.annotation.Nullable
  public Boolean getImageModerationEnabled() {
    return imageModerationEnabled;
  }

  public void setImageModerationEnabled(Boolean imageModerationEnabled) {
    this.imageModerationEnabled = imageModerationEnabled;
  }


  public UpdateAppRequest imageModerationLabels(List<String> imageModerationLabels) {
    this.imageModerationLabels = imageModerationLabels;
    return this;
  }

  public UpdateAppRequest addImageModerationLabelsItem(String imageModerationLabelsItem) {
    if (this.imageModerationLabels == null) {
      this.imageModerationLabels = new ArrayList<>();
    }
    this.imageModerationLabels.add(imageModerationLabelsItem);
    return this;
  }

  /**
   * Get imageModerationLabels
   * @return imageModerationLabels
   */
  @javax.annotation.Nullable
  public List<String> getImageModerationLabels() {
    return imageModerationLabels;
  }

  public void setImageModerationLabels(List<String> imageModerationLabels) {
    this.imageModerationLabels = imageModerationLabels;
  }


  public UpdateAppRequest imageUploadConfig(FileUploadConfigRequest imageUploadConfig) {
    this.imageUploadConfig = imageUploadConfig;
    return this;
  }

  /**
   * Get imageUploadConfig
   * @return imageUploadConfig
   */
  @javax.annotation.Nullable
  public FileUploadConfigRequest getImageUploadConfig() {
    return imageUploadConfig;
  }

  public void setImageUploadConfig(FileUploadConfigRequest imageUploadConfig) {
    this.imageUploadConfig = imageUploadConfig;
  }


  public UpdateAppRequest migratePermissionsToV2(Boolean migratePermissionsToV2) {
    this.migratePermissionsToV2 = migratePermissionsToV2;
    return this;
  }

  /**
   * Get migratePermissionsToV2
   * @return migratePermissionsToV2
   */
  @javax.annotation.Nullable
  public Boolean getMigratePermissionsToV2() {
    return migratePermissionsToV2;
  }

  public void setMigratePermissionsToV2(Boolean migratePermissionsToV2) {
    this.migratePermissionsToV2 = migratePermissionsToV2;
  }


  public UpdateAppRequest multiTenantEnabled(Boolean multiTenantEnabled) {
    this.multiTenantEnabled = multiTenantEnabled;
    return this;
  }

  /**
   * Get multiTenantEnabled
   * @return multiTenantEnabled
   */
  @javax.annotation.Nullable
  public Boolean getMultiTenantEnabled() {
    return multiTenantEnabled;
  }

  public void setMultiTenantEnabled(Boolean multiTenantEnabled) {
    this.multiTenantEnabled = multiTenantEnabled;
  }


  public UpdateAppRequest permissionVersion(PermissionVersionEnum permissionVersion) {
    this.permissionVersion = permissionVersion;
    return this;
  }

  /**
   * Get permissionVersion
   * @return permissionVersion
   */
  @javax.annotation.Nullable
  public PermissionVersionEnum getPermissionVersion() {
    return permissionVersion;
  }

  public void setPermissionVersion(PermissionVersionEnum permissionVersion) {
    this.permissionVersion = permissionVersion;
  }


  public UpdateAppRequest pushConfig(PushConfigRequest pushConfig) {
    this.pushConfig = pushConfig;
    return this;
  }

  /**
   * Get pushConfig
   * @return pushConfig
   */
  @javax.annotation.Nullable
  public PushConfigRequest getPushConfig() {
    return pushConfig;
  }

  public void setPushConfig(PushConfigRequest pushConfig) {
    this.pushConfig = pushConfig;
  }


  public UpdateAppRequest remindersInterval(Integer remindersInterval) {
    this.remindersInterval = remindersInterval;
    return this;
  }

  /**
   * Get remindersInterval
   * minimum: 60
   * maximum: 86400
   * @return remindersInterval
   */
  @javax.annotation.Nullable
  public Integer getRemindersInterval() {
    return remindersInterval;
  }

  public void setRemindersInterval(Integer remindersInterval) {
    this.remindersInterval = remindersInterval;
  }


  public UpdateAppRequest revokeTokensIssuedBefore(OffsetDateTime revokeTokensIssuedBefore) {
    this.revokeTokensIssuedBefore = revokeTokensIssuedBefore;
    return this;
  }

  /**
   * Get revokeTokensIssuedBefore
   * @return revokeTokensIssuedBefore
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRevokeTokensIssuedBefore() {
    return revokeTokensIssuedBefore;
  }

  public void setRevokeTokensIssuedBefore(OffsetDateTime revokeTokensIssuedBefore) {
    this.revokeTokensIssuedBefore = revokeTokensIssuedBefore;
  }


  public UpdateAppRequest sqsKey(String sqsKey) {
    this.sqsKey = sqsKey;
    return this;
  }

  /**
   * Get sqsKey
   * @return sqsKey
   */
  @javax.annotation.Nullable
  public String getSqsKey() {
    return sqsKey;
  }

  public void setSqsKey(String sqsKey) {
    this.sqsKey = sqsKey;
  }


  public UpdateAppRequest sqsSecret(String sqsSecret) {
    this.sqsSecret = sqsSecret;
    return this;
  }

  /**
   * Get sqsSecret
   * @return sqsSecret
   */
  @javax.annotation.Nullable
  public String getSqsSecret() {
    return sqsSecret;
  }

  public void setSqsSecret(String sqsSecret) {
    this.sqsSecret = sqsSecret;
  }


  public UpdateAppRequest sqsUrl(String sqsUrl) {
    this.sqsUrl = sqsUrl;
    return this;
  }

  /**
   * Get sqsUrl
   * @return sqsUrl
   */
  @javax.annotation.Nullable
  public String getSqsUrl() {
    return sqsUrl;
  }

  public void setSqsUrl(String sqsUrl) {
    this.sqsUrl = sqsUrl;
  }


  public UpdateAppRequest userSearchDisallowedRoles(List<String> userSearchDisallowedRoles) {
    this.userSearchDisallowedRoles = userSearchDisallowedRoles;
    return this;
  }

  public UpdateAppRequest addUserSearchDisallowedRolesItem(String userSearchDisallowedRolesItem) {
    if (this.userSearchDisallowedRoles == null) {
      this.userSearchDisallowedRoles = new ArrayList<>();
    }
    this.userSearchDisallowedRoles.add(userSearchDisallowedRolesItem);
    return this;
  }

  /**
   * Get userSearchDisallowedRoles
   * @return userSearchDisallowedRoles
   */
  @javax.annotation.Nullable
  public List<String> getUserSearchDisallowedRoles() {
    return userSearchDisallowedRoles;
  }

  public void setUserSearchDisallowedRoles(List<String> userSearchDisallowedRoles) {
    this.userSearchDisallowedRoles = userSearchDisallowedRoles;
  }


  public UpdateAppRequest videoProvider(VideoProviderEnum videoProvider) {
    this.videoProvider = videoProvider;
    return this;
  }

  /**
   * Get videoProvider
   * @return videoProvider
   */
  @javax.annotation.Nullable
  public VideoProviderEnum getVideoProvider() {
    return videoProvider;
  }

  public void setVideoProvider(VideoProviderEnum videoProvider) {
    this.videoProvider = videoProvider;
  }


  public UpdateAppRequest webhookEvents(List<String> webhookEvents) {
    this.webhookEvents = webhookEvents;
    return this;
  }

  public UpdateAppRequest addWebhookEventsItem(String webhookEventsItem) {
    if (this.webhookEvents == null) {
      this.webhookEvents = new ArrayList<>();
    }
    this.webhookEvents.add(webhookEventsItem);
    return this;
  }

  /**
   * Get webhookEvents
   * @return webhookEvents
   */
  @javax.annotation.Nullable
  public List<String> getWebhookEvents() {
    return webhookEvents;
  }

  public void setWebhookEvents(List<String> webhookEvents) {
    this.webhookEvents = webhookEvents;
  }


  public UpdateAppRequest webhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
    return this;
  }

  /**
   * Get webhookUrl
   * @return webhookUrl
   */
  @javax.annotation.Nullable
  public String getWebhookUrl() {
    return webhookUrl;
  }

  public void setWebhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
  }


  public UpdateAppRequest xiaomiConfig(XiaomiConfigRequest xiaomiConfig) {
    this.xiaomiConfig = xiaomiConfig;
    return this;
  }

  /**
   * Get xiaomiConfig
   * @return xiaomiConfig
   */
  @javax.annotation.Nullable
  public XiaomiConfigRequest getXiaomiConfig() {
    return xiaomiConfig;
  }

  public void setXiaomiConfig(XiaomiConfigRequest xiaomiConfig) {
    this.xiaomiConfig = xiaomiConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateAppRequest updateAppRequest = (UpdateAppRequest) o;
    return Objects.equals(this.agoraOptions, updateAppRequest.agoraOptions) &&
        Objects.equals(this.apnConfig, updateAppRequest.apnConfig) &&
        Objects.equals(this.asyncModerationConfig, updateAppRequest.asyncModerationConfig) &&
        Objects.equals(this.asyncUrlEnrichEnabled, updateAppRequest.asyncUrlEnrichEnabled) &&
        Objects.equals(this.autoTranslationEnabled, updateAppRequest.autoTranslationEnabled) &&
        Objects.equals(this.beforeMessageSendHookUrl, updateAppRequest.beforeMessageSendHookUrl) &&
        Objects.equals(this.cdnExpirationSeconds, updateAppRequest.cdnExpirationSeconds) &&
        Objects.equals(this.channelHideMembersOnly, updateAppRequest.channelHideMembersOnly) &&
        Objects.equals(this.customActionHandlerUrl, updateAppRequest.customActionHandlerUrl) &&
        Objects.equals(this.disableAuthChecks, updateAppRequest.disableAuthChecks) &&
        Objects.equals(this.disablePermissionsChecks, updateAppRequest.disablePermissionsChecks) &&
        Objects.equals(this.enforceUniqueUsernames, updateAppRequest.enforceUniqueUsernames) &&
        Objects.equals(this.fileUploadConfig, updateAppRequest.fileUploadConfig) &&
        Objects.equals(this.firebaseConfig, updateAppRequest.firebaseConfig) &&
        Objects.equals(this.grants, updateAppRequest.grants) &&
        Objects.equals(this.hmsOptions, updateAppRequest.hmsOptions) &&
        Objects.equals(this.huaweiConfig, updateAppRequest.huaweiConfig) &&
        Objects.equals(this.imageModerationBlockLabels, updateAppRequest.imageModerationBlockLabels) &&
        Objects.equals(this.imageModerationEnabled, updateAppRequest.imageModerationEnabled) &&
        Objects.equals(this.imageModerationLabels, updateAppRequest.imageModerationLabels) &&
        Objects.equals(this.imageUploadConfig, updateAppRequest.imageUploadConfig) &&
        Objects.equals(this.migratePermissionsToV2, updateAppRequest.migratePermissionsToV2) &&
        Objects.equals(this.multiTenantEnabled, updateAppRequest.multiTenantEnabled) &&
        Objects.equals(this.permissionVersion, updateAppRequest.permissionVersion) &&
        Objects.equals(this.pushConfig, updateAppRequest.pushConfig) &&
        Objects.equals(this.remindersInterval, updateAppRequest.remindersInterval) &&
        Objects.equals(this.revokeTokensIssuedBefore, updateAppRequest.revokeTokensIssuedBefore) &&
        Objects.equals(this.sqsKey, updateAppRequest.sqsKey) &&
        Objects.equals(this.sqsSecret, updateAppRequest.sqsSecret) &&
        Objects.equals(this.sqsUrl, updateAppRequest.sqsUrl) &&
        Objects.equals(this.userSearchDisallowedRoles, updateAppRequest.userSearchDisallowedRoles) &&
        Objects.equals(this.videoProvider, updateAppRequest.videoProvider) &&
        Objects.equals(this.webhookEvents, updateAppRequest.webhookEvents) &&
        Objects.equals(this.webhookUrl, updateAppRequest.webhookUrl) &&
        Objects.equals(this.xiaomiConfig, updateAppRequest.xiaomiConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agoraOptions, apnConfig, asyncModerationConfig, asyncUrlEnrichEnabled, autoTranslationEnabled, beforeMessageSendHookUrl, cdnExpirationSeconds, channelHideMembersOnly, customActionHandlerUrl, disableAuthChecks, disablePermissionsChecks, enforceUniqueUsernames, fileUploadConfig, firebaseConfig, grants, hmsOptions, huaweiConfig, imageModerationBlockLabels, imageModerationEnabled, imageModerationLabels, imageUploadConfig, migratePermissionsToV2, multiTenantEnabled, permissionVersion, pushConfig, remindersInterval, revokeTokensIssuedBefore, sqsKey, sqsSecret, sqsUrl, userSearchDisallowedRoles, videoProvider, webhookEvents, webhookUrl, xiaomiConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateAppRequest {\n");
    sb.append("    agoraOptions: ").append(toIndentedString(agoraOptions)).append("\n");
    sb.append("    apnConfig: ").append(toIndentedString(apnConfig)).append("\n");
    sb.append("    asyncModerationConfig: ").append(toIndentedString(asyncModerationConfig)).append("\n");
    sb.append("    asyncUrlEnrichEnabled: ").append(toIndentedString(asyncUrlEnrichEnabled)).append("\n");
    sb.append("    autoTranslationEnabled: ").append(toIndentedString(autoTranslationEnabled)).append("\n");
    sb.append("    beforeMessageSendHookUrl: ").append(toIndentedString(beforeMessageSendHookUrl)).append("\n");
    sb.append("    cdnExpirationSeconds: ").append(toIndentedString(cdnExpirationSeconds)).append("\n");
    sb.append("    channelHideMembersOnly: ").append(toIndentedString(channelHideMembersOnly)).append("\n");
    sb.append("    customActionHandlerUrl: ").append(toIndentedString(customActionHandlerUrl)).append("\n");
    sb.append("    disableAuthChecks: ").append(toIndentedString(disableAuthChecks)).append("\n");
    sb.append("    disablePermissionsChecks: ").append(toIndentedString(disablePermissionsChecks)).append("\n");
    sb.append("    enforceUniqueUsernames: ").append(toIndentedString(enforceUniqueUsernames)).append("\n");
    sb.append("    fileUploadConfig: ").append(toIndentedString(fileUploadConfig)).append("\n");
    sb.append("    firebaseConfig: ").append(toIndentedString(firebaseConfig)).append("\n");
    sb.append("    grants: ").append(toIndentedString(grants)).append("\n");
    sb.append("    hmsOptions: ").append(toIndentedString(hmsOptions)).append("\n");
    sb.append("    huaweiConfig: ").append(toIndentedString(huaweiConfig)).append("\n");
    sb.append("    imageModerationBlockLabels: ").append(toIndentedString(imageModerationBlockLabels)).append("\n");
    sb.append("    imageModerationEnabled: ").append(toIndentedString(imageModerationEnabled)).append("\n");
    sb.append("    imageModerationLabels: ").append(toIndentedString(imageModerationLabels)).append("\n");
    sb.append("    imageUploadConfig: ").append(toIndentedString(imageUploadConfig)).append("\n");
    sb.append("    migratePermissionsToV2: ").append(toIndentedString(migratePermissionsToV2)).append("\n");
    sb.append("    multiTenantEnabled: ").append(toIndentedString(multiTenantEnabled)).append("\n");
    sb.append("    permissionVersion: ").append(toIndentedString(permissionVersion)).append("\n");
    sb.append("    pushConfig: ").append(toIndentedString(pushConfig)).append("\n");
    sb.append("    remindersInterval: ").append(toIndentedString(remindersInterval)).append("\n");
    sb.append("    revokeTokensIssuedBefore: ").append(toIndentedString(revokeTokensIssuedBefore)).append("\n");
    sb.append("    sqsKey: ").append(toIndentedString(sqsKey)).append("\n");
    sb.append("    sqsSecret: ").append(toIndentedString(sqsSecret)).append("\n");
    sb.append("    sqsUrl: ").append(toIndentedString(sqsUrl)).append("\n");
    sb.append("    userSearchDisallowedRoles: ").append(toIndentedString(userSearchDisallowedRoles)).append("\n");
    sb.append("    videoProvider: ").append(toIndentedString(videoProvider)).append("\n");
    sb.append("    webhookEvents: ").append(toIndentedString(webhookEvents)).append("\n");
    sb.append("    webhookUrl: ").append(toIndentedString(webhookUrl)).append("\n");
    sb.append("    xiaomiConfig: ").append(toIndentedString(xiaomiConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agora_options");
    openapiFields.add("apn_config");
    openapiFields.add("async_moderation_config");
    openapiFields.add("async_url_enrich_enabled");
    openapiFields.add("auto_translation_enabled");
    openapiFields.add("before_message_send_hook_url");
    openapiFields.add("cdn_expiration_seconds");
    openapiFields.add("channel_hide_members_only");
    openapiFields.add("custom_action_handler_url");
    openapiFields.add("disable_auth_checks");
    openapiFields.add("disable_permissions_checks");
    openapiFields.add("enforce_unique_usernames");
    openapiFields.add("file_upload_config");
    openapiFields.add("firebase_config");
    openapiFields.add("grants");
    openapiFields.add("hms_options");
    openapiFields.add("huawei_config");
    openapiFields.add("image_moderation_block_labels");
    openapiFields.add("image_moderation_enabled");
    openapiFields.add("image_moderation_labels");
    openapiFields.add("image_upload_config");
    openapiFields.add("migrate_permissions_to_v2");
    openapiFields.add("multi_tenant_enabled");
    openapiFields.add("permission_version");
    openapiFields.add("push_config");
    openapiFields.add("reminders_interval");
    openapiFields.add("revoke_tokens_issued_before");
    openapiFields.add("sqs_key");
    openapiFields.add("sqs_secret");
    openapiFields.add("sqs_url");
    openapiFields.add("user_search_disallowed_roles");
    openapiFields.add("video_provider");
    openapiFields.add("webhook_events");
    openapiFields.add("webhook_url");
    openapiFields.add("xiaomi_config");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateAppRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateAppRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateAppRequest is not found in the empty JSON string", UpdateAppRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateAppRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateAppRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `agora_options`
      if (jsonObj.get("agora_options") != null && !jsonObj.get("agora_options").isJsonNull()) {
        ConfigRequest.validateJsonElement(jsonObj.get("agora_options"));
      }
      // validate the optional field `apn_config`
      if (jsonObj.get("apn_config") != null && !jsonObj.get("apn_config").isJsonNull()) {
        APNConfigRequest.validateJsonElement(jsonObj.get("apn_config"));
      }
      // validate the optional field `async_moderation_config`
      if (jsonObj.get("async_moderation_config") != null && !jsonObj.get("async_moderation_config").isJsonNull()) {
        AsyncModerationConfigurationRequest.validateJsonElement(jsonObj.get("async_moderation_config"));
      }
      if ((jsonObj.get("before_message_send_hook_url") != null && !jsonObj.get("before_message_send_hook_url").isJsonNull()) && !jsonObj.get("before_message_send_hook_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `before_message_send_hook_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("before_message_send_hook_url").toString()));
      }
      if ((jsonObj.get("custom_action_handler_url") != null && !jsonObj.get("custom_action_handler_url").isJsonNull()) && !jsonObj.get("custom_action_handler_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_action_handler_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_action_handler_url").toString()));
      }
      if ((jsonObj.get("enforce_unique_usernames") != null && !jsonObj.get("enforce_unique_usernames").isJsonNull()) && !jsonObj.get("enforce_unique_usernames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enforce_unique_usernames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enforce_unique_usernames").toString()));
      }
      // validate the optional field `enforce_unique_usernames`
      if (jsonObj.get("enforce_unique_usernames") != null && !jsonObj.get("enforce_unique_usernames").isJsonNull()) {
        EnforceUniqueUsernamesEnum.validateJsonElement(jsonObj.get("enforce_unique_usernames"));
      }
      // validate the optional field `file_upload_config`
      if (jsonObj.get("file_upload_config") != null && !jsonObj.get("file_upload_config").isJsonNull()) {
        FileUploadConfigRequest.validateJsonElement(jsonObj.get("file_upload_config"));
      }
      // validate the optional field `firebase_config`
      if (jsonObj.get("firebase_config") != null && !jsonObj.get("firebase_config").isJsonNull()) {
        FirebaseConfigRequest.validateJsonElement(jsonObj.get("firebase_config"));
      }
      // validate the optional field `hms_options`
      if (jsonObj.get("hms_options") != null && !jsonObj.get("hms_options").isJsonNull()) {
        ConfigRequest.validateJsonElement(jsonObj.get("hms_options"));
      }
      // validate the optional field `huawei_config`
      if (jsonObj.get("huawei_config") != null && !jsonObj.get("huawei_config").isJsonNull()) {
        HuaweiConfigRequest.validateJsonElement(jsonObj.get("huawei_config"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("image_moderation_block_labels") != null && !jsonObj.get("image_moderation_block_labels").isJsonNull() && !jsonObj.get("image_moderation_block_labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_moderation_block_labels` to be an array in the JSON string but got `%s`", jsonObj.get("image_moderation_block_labels").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("image_moderation_labels") != null && !jsonObj.get("image_moderation_labels").isJsonNull() && !jsonObj.get("image_moderation_labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_moderation_labels` to be an array in the JSON string but got `%s`", jsonObj.get("image_moderation_labels").toString()));
      }
      // validate the optional field `image_upload_config`
      if (jsonObj.get("image_upload_config") != null && !jsonObj.get("image_upload_config").isJsonNull()) {
        FileUploadConfigRequest.validateJsonElement(jsonObj.get("image_upload_config"));
      }
      if ((jsonObj.get("permission_version") != null && !jsonObj.get("permission_version").isJsonNull()) && !jsonObj.get("permission_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permission_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permission_version").toString()));
      }
      // validate the optional field `permission_version`
      if (jsonObj.get("permission_version") != null && !jsonObj.get("permission_version").isJsonNull()) {
        PermissionVersionEnum.validateJsonElement(jsonObj.get("permission_version"));
      }
      // validate the optional field `push_config`
      if (jsonObj.get("push_config") != null && !jsonObj.get("push_config").isJsonNull()) {
        PushConfigRequest.validateJsonElement(jsonObj.get("push_config"));
      }
      if ((jsonObj.get("sqs_key") != null && !jsonObj.get("sqs_key").isJsonNull()) && !jsonObj.get("sqs_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqs_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqs_key").toString()));
      }
      if ((jsonObj.get("sqs_secret") != null && !jsonObj.get("sqs_secret").isJsonNull()) && !jsonObj.get("sqs_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqs_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqs_secret").toString()));
      }
      if ((jsonObj.get("sqs_url") != null && !jsonObj.get("sqs_url").isJsonNull()) && !jsonObj.get("sqs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqs_url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("user_search_disallowed_roles") != null && !jsonObj.get("user_search_disallowed_roles").isJsonNull() && !jsonObj.get("user_search_disallowed_roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_search_disallowed_roles` to be an array in the JSON string but got `%s`", jsonObj.get("user_search_disallowed_roles").toString()));
      }
      if ((jsonObj.get("video_provider") != null && !jsonObj.get("video_provider").isJsonNull()) && !jsonObj.get("video_provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video_provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video_provider").toString()));
      }
      // validate the optional field `video_provider`
      if (jsonObj.get("video_provider") != null && !jsonObj.get("video_provider").isJsonNull()) {
        VideoProviderEnum.validateJsonElement(jsonObj.get("video_provider"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("webhook_events") != null && !jsonObj.get("webhook_events").isJsonNull() && !jsonObj.get("webhook_events").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhook_events` to be an array in the JSON string but got `%s`", jsonObj.get("webhook_events").toString()));
      }
      if ((jsonObj.get("webhook_url") != null && !jsonObj.get("webhook_url").isJsonNull()) && !jsonObj.get("webhook_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhook_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhook_url").toString()));
      }
      // validate the optional field `xiaomi_config`
      if (jsonObj.get("xiaomi_config") != null && !jsonObj.get("xiaomi_config").isJsonNull()) {
        XiaomiConfigRequest.validateJsonElement(jsonObj.get("xiaomi_config"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateAppRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateAppRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateAppRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateAppRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateAppRequest>() {
           @Override
           public void write(JsonWriter out, UpdateAppRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateAppRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateAppRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateAppRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateAppRequest
   */
  public static UpdateAppRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateAppRequest.class);
  }

  /**
   * Convert an instance of UpdateAppRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

