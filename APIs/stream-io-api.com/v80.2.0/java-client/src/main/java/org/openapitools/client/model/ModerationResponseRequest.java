/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModerationResponseRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModerationResponseRequest {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_AUTOMOD_RESPONSE = "automod_response";
  @SerializedName(SERIALIZED_NAME_AUTOMOD_RESPONSE)
  private Object automodResponse = null;

  public static final String SERIALIZED_NAME_EXPLICIT = "explicit";
  @SerializedName(SERIALIZED_NAME_EXPLICIT)
  private Float explicit;

  public static final String SERIALIZED_NAME_SPAM = "spam";
  @SerializedName(SERIALIZED_NAME_SPAM)
  private Float spam;

  public static final String SERIALIZED_NAME_TOXIC = "toxic";
  @SerializedName(SERIALIZED_NAME_TOXIC)
  private Float toxic;

  public ModerationResponseRequest() {
  }

  public ModerationResponseRequest action(String action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public ModerationResponseRequest automodResponse(Object automodResponse) {
    this.automodResponse = automodResponse;
    return this;
  }

  /**
   * Get automodResponse
   * @return automodResponse
   */
  @javax.annotation.Nullable
  public Object getAutomodResponse() {
    return automodResponse;
  }

  public void setAutomodResponse(Object automodResponse) {
    this.automodResponse = automodResponse;
  }


  public ModerationResponseRequest explicit(Float explicit) {
    this.explicit = explicit;
    return this;
  }

  /**
   * Get explicit
   * @return explicit
   */
  @javax.annotation.Nullable
  public Float getExplicit() {
    return explicit;
  }

  public void setExplicit(Float explicit) {
    this.explicit = explicit;
  }


  public ModerationResponseRequest spam(Float spam) {
    this.spam = spam;
    return this;
  }

  /**
   * Get spam
   * @return spam
   */
  @javax.annotation.Nullable
  public Float getSpam() {
    return spam;
  }

  public void setSpam(Float spam) {
    this.spam = spam;
  }


  public ModerationResponseRequest toxic(Float toxic) {
    this.toxic = toxic;
    return this;
  }

  /**
   * Get toxic
   * @return toxic
   */
  @javax.annotation.Nullable
  public Float getToxic() {
    return toxic;
  }

  public void setToxic(Float toxic) {
    this.toxic = toxic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModerationResponseRequest moderationResponseRequest = (ModerationResponseRequest) o;
    return Objects.equals(this.action, moderationResponseRequest.action) &&
        Objects.equals(this.automodResponse, moderationResponseRequest.automodResponse) &&
        Objects.equals(this.explicit, moderationResponseRequest.explicit) &&
        Objects.equals(this.spam, moderationResponseRequest.spam) &&
        Objects.equals(this.toxic, moderationResponseRequest.toxic);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, automodResponse, explicit, spam, toxic);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModerationResponseRequest {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    automodResponse: ").append(toIndentedString(automodResponse)).append("\n");
    sb.append("    explicit: ").append(toIndentedString(explicit)).append("\n");
    sb.append("    spam: ").append(toIndentedString(spam)).append("\n");
    sb.append("    toxic: ").append(toIndentedString(toxic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("automod_response");
    openapiFields.add("explicit");
    openapiFields.add("spam");
    openapiFields.add("toxic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModerationResponseRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModerationResponseRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModerationResponseRequest is not found in the empty JSON string", ModerationResponseRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModerationResponseRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModerationResponseRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModerationResponseRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModerationResponseRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModerationResponseRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModerationResponseRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ModerationResponseRequest>() {
           @Override
           public void write(JsonWriter out, ModerationResponseRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModerationResponseRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModerationResponseRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModerationResponseRequest
   * @throws IOException if the JSON string is invalid with respect to ModerationResponseRequest
   */
  public static ModerationResponseRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModerationResponseRequest.class);
  }

  /**
   * Convert an instance of ModerationResponseRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

