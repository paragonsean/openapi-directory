/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChannelMember;
import org.openapitools.client.model.ChannelResponse;
import org.openapitools.client.model.Message;
import org.openapitools.client.model.PendingMessage;
import org.openapitools.client.model.Read;
import org.openapitools.client.model.UserObject;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChannelStateResponseFields
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelStateResponseFields {
  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private ChannelResponse channel;

  public static final String SERIALIZED_NAME_HIDDEN = "hidden";
  @SerializedName(SERIALIZED_NAME_HIDDEN)
  private Boolean hidden;

  public static final String SERIALIZED_NAME_HIDE_MESSAGES_BEFORE = "hide_messages_before";
  @SerializedName(SERIALIZED_NAME_HIDE_MESSAGES_BEFORE)
  private OffsetDateTime hideMessagesBefore;

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private List<ChannelMember> members = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEMBERSHIP = "membership";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP)
  private ChannelMember membership;

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private List<Message> messages = new ArrayList<>();

  public static final String SERIALIZED_NAME_PENDING_MESSAGES = "pending_messages";
  @SerializedName(SERIALIZED_NAME_PENDING_MESSAGES)
  private List<PendingMessage> pendingMessages = new ArrayList<>();

  public static final String SERIALIZED_NAME_PINNED_MESSAGES = "pinned_messages";
  @SerializedName(SERIALIZED_NAME_PINNED_MESSAGES)
  private List<Message> pinnedMessages = new ArrayList<>();

  public static final String SERIALIZED_NAME_READ = "read";
  @SerializedName(SERIALIZED_NAME_READ)
  private List<Read> read = new ArrayList<>();

  public static final String SERIALIZED_NAME_WATCHER_COUNT = "watcher_count";
  @SerializedName(SERIALIZED_NAME_WATCHER_COUNT)
  private Integer watcherCount;

  public static final String SERIALIZED_NAME_WATCHERS = "watchers";
  @SerializedName(SERIALIZED_NAME_WATCHERS)
  private List<UserObject> watchers = new ArrayList<>();

  public ChannelStateResponseFields() {
  }

  public ChannelStateResponseFields channel(ChannelResponse channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Get channel
   * @return channel
   */
  @javax.annotation.Nullable
  public ChannelResponse getChannel() {
    return channel;
  }

  public void setChannel(ChannelResponse channel) {
    this.channel = channel;
  }


  public ChannelStateResponseFields hidden(Boolean hidden) {
    this.hidden = hidden;
    return this;
  }

  /**
   * Whether this channel is hidden or not
   * @return hidden
   */
  @javax.annotation.Nullable
  public Boolean getHidden() {
    return hidden;
  }

  public void setHidden(Boolean hidden) {
    this.hidden = hidden;
  }


  public ChannelStateResponseFields hideMessagesBefore(OffsetDateTime hideMessagesBefore) {
    this.hideMessagesBefore = hideMessagesBefore;
    return this;
  }

  /**
   * Messages before this date are hidden from the user
   * @return hideMessagesBefore
   */
  @javax.annotation.Nullable
  public OffsetDateTime getHideMessagesBefore() {
    return hideMessagesBefore;
  }

  public void setHideMessagesBefore(OffsetDateTime hideMessagesBefore) {
    this.hideMessagesBefore = hideMessagesBefore;
  }


  public ChannelStateResponseFields members(List<ChannelMember> members) {
    this.members = members;
    return this;
  }

  public ChannelStateResponseFields addMembersItem(ChannelMember membersItem) {
    if (this.members == null) {
      this.members = new ArrayList<>();
    }
    this.members.add(membersItem);
    return this;
  }

  /**
   * List of channel members
   * @return members
   */
  @javax.annotation.Nonnull
  public List<ChannelMember> getMembers() {
    return members;
  }

  public void setMembers(List<ChannelMember> members) {
    this.members = members;
  }


  public ChannelStateResponseFields membership(ChannelMember membership) {
    this.membership = membership;
    return this;
  }

  /**
   * Get membership
   * @return membership
   */
  @javax.annotation.Nullable
  public ChannelMember getMembership() {
    return membership;
  }

  public void setMembership(ChannelMember membership) {
    this.membership = membership;
  }


  public ChannelStateResponseFields messages(List<Message> messages) {
    this.messages = messages;
    return this;
  }

  public ChannelStateResponseFields addMessagesItem(Message messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

  /**
   * List of channel messages
   * @return messages
   */
  @javax.annotation.Nonnull
  public List<Message> getMessages() {
    return messages;
  }

  public void setMessages(List<Message> messages) {
    this.messages = messages;
  }


  public ChannelStateResponseFields pendingMessages(List<PendingMessage> pendingMessages) {
    this.pendingMessages = pendingMessages;
    return this;
  }

  public ChannelStateResponseFields addPendingMessagesItem(PendingMessage pendingMessagesItem) {
    if (this.pendingMessages == null) {
      this.pendingMessages = new ArrayList<>();
    }
    this.pendingMessages.add(pendingMessagesItem);
    return this;
  }

  /**
   * Pending messages that this user has sent
   * @return pendingMessages
   */
  @javax.annotation.Nullable
  public List<PendingMessage> getPendingMessages() {
    return pendingMessages;
  }

  public void setPendingMessages(List<PendingMessage> pendingMessages) {
    this.pendingMessages = pendingMessages;
  }


  public ChannelStateResponseFields pinnedMessages(List<Message> pinnedMessages) {
    this.pinnedMessages = pinnedMessages;
    return this;
  }

  public ChannelStateResponseFields addPinnedMessagesItem(Message pinnedMessagesItem) {
    if (this.pinnedMessages == null) {
      this.pinnedMessages = new ArrayList<>();
    }
    this.pinnedMessages.add(pinnedMessagesItem);
    return this;
  }

  /**
   * List of pinned messages in the channel
   * @return pinnedMessages
   */
  @javax.annotation.Nonnull
  public List<Message> getPinnedMessages() {
    return pinnedMessages;
  }

  public void setPinnedMessages(List<Message> pinnedMessages) {
    this.pinnedMessages = pinnedMessages;
  }


  public ChannelStateResponseFields read(List<Read> read) {
    this.read = read;
    return this;
  }

  public ChannelStateResponseFields addReadItem(Read readItem) {
    if (this.read == null) {
      this.read = new ArrayList<>();
    }
    this.read.add(readItem);
    return this;
  }

  /**
   * List of read states
   * @return read
   */
  @javax.annotation.Nullable
  public List<Read> getRead() {
    return read;
  }

  public void setRead(List<Read> read) {
    this.read = read;
  }


  public ChannelStateResponseFields watcherCount(Integer watcherCount) {
    this.watcherCount = watcherCount;
    return this;
  }

  /**
   * Number of channel watchers
   * @return watcherCount
   */
  @javax.annotation.Nullable
  public Integer getWatcherCount() {
    return watcherCount;
  }

  public void setWatcherCount(Integer watcherCount) {
    this.watcherCount = watcherCount;
  }


  public ChannelStateResponseFields watchers(List<UserObject> watchers) {
    this.watchers = watchers;
    return this;
  }

  public ChannelStateResponseFields addWatchersItem(UserObject watchersItem) {
    if (this.watchers == null) {
      this.watchers = new ArrayList<>();
    }
    this.watchers.add(watchersItem);
    return this;
  }

  /**
   * List of user who is watching the channel
   * @return watchers
   */
  @javax.annotation.Nullable
  public List<UserObject> getWatchers() {
    return watchers;
  }

  public void setWatchers(List<UserObject> watchers) {
    this.watchers = watchers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelStateResponseFields channelStateResponseFields = (ChannelStateResponseFields) o;
    return Objects.equals(this.channel, channelStateResponseFields.channel) &&
        Objects.equals(this.hidden, channelStateResponseFields.hidden) &&
        Objects.equals(this.hideMessagesBefore, channelStateResponseFields.hideMessagesBefore) &&
        Objects.equals(this.members, channelStateResponseFields.members) &&
        Objects.equals(this.membership, channelStateResponseFields.membership) &&
        Objects.equals(this.messages, channelStateResponseFields.messages) &&
        Objects.equals(this.pendingMessages, channelStateResponseFields.pendingMessages) &&
        Objects.equals(this.pinnedMessages, channelStateResponseFields.pinnedMessages) &&
        Objects.equals(this.read, channelStateResponseFields.read) &&
        Objects.equals(this.watcherCount, channelStateResponseFields.watcherCount) &&
        Objects.equals(this.watchers, channelStateResponseFields.watchers);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(channel, hidden, hideMessagesBefore, members, membership, messages, pendingMessages, pinnedMessages, read, watcherCount, watchers);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelStateResponseFields {\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    hideMessagesBefore: ").append(toIndentedString(hideMessagesBefore)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    membership: ").append(toIndentedString(membership)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    pendingMessages: ").append(toIndentedString(pendingMessages)).append("\n");
    sb.append("    pinnedMessages: ").append(toIndentedString(pinnedMessages)).append("\n");
    sb.append("    read: ").append(toIndentedString(read)).append("\n");
    sb.append("    watcherCount: ").append(toIndentedString(watcherCount)).append("\n");
    sb.append("    watchers: ").append(toIndentedString(watchers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channel");
    openapiFields.add("hidden");
    openapiFields.add("hide_messages_before");
    openapiFields.add("members");
    openapiFields.add("membership");
    openapiFields.add("messages");
    openapiFields.add("pending_messages");
    openapiFields.add("pinned_messages");
    openapiFields.add("read");
    openapiFields.add("watcher_count");
    openapiFields.add("watchers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("members");
    openapiRequiredFields.add("messages");
    openapiRequiredFields.add("pinned_messages");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelStateResponseFields
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelStateResponseFields.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelStateResponseFields is not found in the empty JSON string", ChannelStateResponseFields.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelStateResponseFields.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelStateResponseFields` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ChannelStateResponseFields.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("members").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `members` to be an array in the JSON string but got `%s`", jsonObj.get("members").toString()));
      }

      JsonArray jsonArraymembers = jsonObj.getAsJsonArray("members");
      // validate the required field `members` (array)
      for (int i = 0; i < jsonArraymembers.size(); i++) {
        ChannelMember.validateJsonElement(jsonArraymembers.get(i));
      };
      // validate the optional field `membership`
      if (jsonObj.get("membership") != null && !jsonObj.get("membership").isJsonNull()) {
        ChannelMember.validateJsonElement(jsonObj.get("membership"));
      }
      // ensure the required json array is present
      if (jsonObj.get("messages") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("messages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `messages` to be an array in the JSON string but got `%s`", jsonObj.get("messages").toString()));
      }
      if (jsonObj.get("pending_messages") != null && !jsonObj.get("pending_messages").isJsonNull()) {
        JsonArray jsonArraypendingMessages = jsonObj.getAsJsonArray("pending_messages");
        if (jsonArraypendingMessages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pending_messages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pending_messages` to be an array in the JSON string but got `%s`", jsonObj.get("pending_messages").toString()));
          }

          // validate the optional field `pending_messages` (array)
          for (int i = 0; i < jsonArraypendingMessages.size(); i++) {
            PendingMessage.validateJsonElement(jsonArraypendingMessages.get(i));
          };
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("pinned_messages") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("pinned_messages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pinned_messages` to be an array in the JSON string but got `%s`", jsonObj.get("pinned_messages").toString()));
      }
      if (jsonObj.get("read") != null && !jsonObj.get("read").isJsonNull()) {
        JsonArray jsonArrayread = jsonObj.getAsJsonArray("read");
        if (jsonArrayread != null) {
          // ensure the json data is an array
          if (!jsonObj.get("read").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `read` to be an array in the JSON string but got `%s`", jsonObj.get("read").toString()));
          }

          // validate the optional field `read` (array)
          for (int i = 0; i < jsonArrayread.size(); i++) {
            Read.validateJsonElement(jsonArrayread.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("watchers") != null && !jsonObj.get("watchers").isJsonNull() && !jsonObj.get("watchers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `watchers` to be an array in the JSON string but got `%s`", jsonObj.get("watchers").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelStateResponseFields.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelStateResponseFields' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelStateResponseFields> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelStateResponseFields.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelStateResponseFields>() {
           @Override
           public void write(JsonWriter out, ChannelStateResponseFields value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelStateResponseFields read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelStateResponseFields given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelStateResponseFields
   * @throws IOException if the JSON string is invalid with respect to ChannelStateResponseFields
   */
  public static ChannelStateResponseFields fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelStateResponseFields.class);
  }

  /**
   * Convert an instance of ChannelStateResponseFields to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

