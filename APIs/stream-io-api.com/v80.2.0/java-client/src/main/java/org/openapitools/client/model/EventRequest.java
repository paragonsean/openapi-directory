/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ChannelMemberRequest;
import org.openapitools.client.model.ChannelResponseRequest;
import org.openapitools.client.model.MessageRequest1;
import org.openapitools.client.model.ModerationResponseRequest;
import org.openapitools.client.model.OwnUserRequest;
import org.openapitools.client.model.ReactionRequest;
import org.openapitools.client.model.UserObjectRequest;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents an BaseEvent that happened in Stream Chat
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventRequest {
  public static final String SERIALIZED_NAME_AUTOMODERATION = "automoderation";
  @SerializedName(SERIALIZED_NAME_AUTOMODERATION)
  private Boolean automoderation;

  public static final String SERIALIZED_NAME_AUTOMODERATION_SCORES = "automoderation_scores";
  @SerializedName(SERIALIZED_NAME_AUTOMODERATION_SCORES)
  private ModerationResponseRequest automoderationScores;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private ChannelResponseRequest channel;

  public static final String SERIALIZED_NAME_CHANNEL_ID = "channel_id";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private String channelId;

  public static final String SERIALIZED_NAME_CHANNEL_TYPE = "channel_type";
  @SerializedName(SERIALIZED_NAME_CHANNEL_TYPE)
  private String channelType;

  public static final String SERIALIZED_NAME_CID = "cid";
  @SerializedName(SERIALIZED_NAME_CID)
  private String cid;

  public static final String SERIALIZED_NAME_CONNECTION_ID = "connection_id";
  @SerializedName(SERIALIZED_NAME_CONNECTION_ID)
  private String connectionId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private UserObjectRequest createdBy;

  public static final String SERIALIZED_NAME_ME = "me";
  @SerializedName(SERIALIZED_NAME_ME)
  private OwnUserRequest me;

  public static final String SERIALIZED_NAME_MEMBER = "member";
  @SerializedName(SERIALIZED_NAME_MEMBER)
  private ChannelMemberRequest member;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private MessageRequest1 message;

  public static final String SERIALIZED_NAME_PARENT_ID = "parent_id";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private String parentId;

  public static final String SERIALIZED_NAME_REACTION = "reaction";
  @SerializedName(SERIALIZED_NAME_REACTION)
  private ReactionRequest reaction;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserObjectRequest user;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_WATCHER_COUNT = "watcher_count";
  @SerializedName(SERIALIZED_NAME_WATCHER_COUNT)
  private Integer watcherCount;

  public EventRequest() {
  }

  public EventRequest automoderation(Boolean automoderation) {
    this.automoderation = automoderation;
    return this;
  }

  /**
   * Only applicable to &#x60;message.flagged&#x60; BaseEvent.
   * @return automoderation
   */
  @javax.annotation.Nullable
  public Boolean getAutomoderation() {
    return automoderation;
  }

  public void setAutomoderation(Boolean automoderation) {
    this.automoderation = automoderation;
  }


  public EventRequest automoderationScores(ModerationResponseRequest automoderationScores) {
    this.automoderationScores = automoderationScores;
    return this;
  }

  /**
   * Get automoderationScores
   * @return automoderationScores
   */
  @javax.annotation.Nullable
  public ModerationResponseRequest getAutomoderationScores() {
    return automoderationScores;
  }

  public void setAutomoderationScores(ModerationResponseRequest automoderationScores) {
    this.automoderationScores = automoderationScores;
  }


  public EventRequest channel(ChannelResponseRequest channel) {
    this.channel = channel;
    return this;
  }

  /**
   * Get channel
   * @return channel
   */
  @javax.annotation.Nullable
  public ChannelResponseRequest getChannel() {
    return channel;
  }

  public void setChannel(ChannelResponseRequest channel) {
    this.channel = channel;
  }


  public EventRequest channelId(String channelId) {
    this.channelId = channelId;
    return this;
  }

  /**
   * Get channelId
   * @return channelId
   */
  @javax.annotation.Nullable
  public String getChannelId() {
    return channelId;
  }

  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }


  public EventRequest channelType(String channelType) {
    this.channelType = channelType;
    return this;
  }

  /**
   * Get channelType
   * @return channelType
   */
  @javax.annotation.Nullable
  public String getChannelType() {
    return channelType;
  }

  public void setChannelType(String channelType) {
    this.channelType = channelType;
  }


  public EventRequest cid(String cid) {
    this.cid = cid;
    return this;
  }

  /**
   * Channel CID (&lt;type&gt;:&lt;id&gt;)
   * @return cid
   */
  @javax.annotation.Nullable
  public String getCid() {
    return cid;
  }

  public void setCid(String cid) {
    this.cid = cid;
  }


  public EventRequest connectionId(String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

  /**
   * Only applicable to &#x60;health.check&#x60; BaseEvent
   * @return connectionId
   */
  @javax.annotation.Nullable
  public String getConnectionId() {
    return connectionId;
  }

  public void setConnectionId(String connectionId) {
    this.connectionId = connectionId;
  }


  public EventRequest createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Date/time of creation
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public EventRequest createdBy(UserObjectRequest createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public UserObjectRequest getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(UserObjectRequest createdBy) {
    this.createdBy = createdBy;
  }


  public EventRequest me(OwnUserRequest me) {
    this.me = me;
    return this;
  }

  /**
   * Get me
   * @return me
   */
  @javax.annotation.Nullable
  public OwnUserRequest getMe() {
    return me;
  }

  public void setMe(OwnUserRequest me) {
    this.me = me;
  }


  public EventRequest member(ChannelMemberRequest member) {
    this.member = member;
    return this;
  }

  /**
   * Get member
   * @return member
   */
  @javax.annotation.Nullable
  public ChannelMemberRequest getMember() {
    return member;
  }

  public void setMember(ChannelMemberRequest member) {
    this.member = member;
  }


  public EventRequest message(MessageRequest1 message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public MessageRequest1 getMessage() {
    return message;
  }

  public void setMessage(MessageRequest1 message) {
    this.message = message;
  }


  public EventRequest parentId(String parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * ID of thread. Used in typing events
   * @return parentId
   */
  @javax.annotation.Nullable
  public String getParentId() {
    return parentId;
  }

  public void setParentId(String parentId) {
    this.parentId = parentId;
  }


  public EventRequest reaction(ReactionRequest reaction) {
    this.reaction = reaction;
    return this;
  }

  /**
   * Get reaction
   * @return reaction
   */
  @javax.annotation.Nullable
  public ReactionRequest getReaction() {
    return reaction;
  }

  public void setReaction(ReactionRequest reaction) {
    this.reaction = reaction;
  }


  public EventRequest reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Ban reason. Only applicable to &#x60;user.banned&#x60; BaseEvent
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public EventRequest team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public EventRequest type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Event type. To use custom BaseEvent types see Custom Events documentation
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public EventRequest user(UserObjectRequest user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserObjectRequest getUser() {
    return user;
  }

  public void setUser(UserObjectRequest user) {
    this.user = user;
  }


  public EventRequest userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  public EventRequest watcherCount(Integer watcherCount) {
    this.watcherCount = watcherCount;
    return this;
  }

  /**
   * Number of watchers who received this BaseEvent
   * @return watcherCount
   */
  @javax.annotation.Nullable
  public Integer getWatcherCount() {
    return watcherCount;
  }

  public void setWatcherCount(Integer watcherCount) {
    this.watcherCount = watcherCount;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EventRequest instance itself
   */
  public EventRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventRequest eventRequest = (EventRequest) o;
    return Objects.equals(this.automoderation, eventRequest.automoderation) &&
        Objects.equals(this.automoderationScores, eventRequest.automoderationScores) &&
        Objects.equals(this.channel, eventRequest.channel) &&
        Objects.equals(this.channelId, eventRequest.channelId) &&
        Objects.equals(this.channelType, eventRequest.channelType) &&
        Objects.equals(this.cid, eventRequest.cid) &&
        Objects.equals(this.connectionId, eventRequest.connectionId) &&
        Objects.equals(this.createdAt, eventRequest.createdAt) &&
        Objects.equals(this.createdBy, eventRequest.createdBy) &&
        Objects.equals(this.me, eventRequest.me) &&
        Objects.equals(this.member, eventRequest.member) &&
        Objects.equals(this.message, eventRequest.message) &&
        Objects.equals(this.parentId, eventRequest.parentId) &&
        Objects.equals(this.reaction, eventRequest.reaction) &&
        Objects.equals(this.reason, eventRequest.reason) &&
        Objects.equals(this.team, eventRequest.team) &&
        Objects.equals(this.type, eventRequest.type) &&
        Objects.equals(this.user, eventRequest.user) &&
        Objects.equals(this.userId, eventRequest.userId) &&
        Objects.equals(this.watcherCount, eventRequest.watcherCount)&&
        Objects.equals(this.additionalProperties, eventRequest.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(automoderation, automoderationScores, channel, channelId, channelType, cid, connectionId, createdAt, createdBy, me, member, message, parentId, reaction, reason, team, type, user, userId, watcherCount, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventRequest {\n");
    sb.append("    automoderation: ").append(toIndentedString(automoderation)).append("\n");
    sb.append("    automoderationScores: ").append(toIndentedString(automoderationScores)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    channelType: ").append(toIndentedString(channelType)).append("\n");
    sb.append("    cid: ").append(toIndentedString(cid)).append("\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    me: ").append(toIndentedString(me)).append("\n");
    sb.append("    member: ").append(toIndentedString(member)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    reaction: ").append(toIndentedString(reaction)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    watcherCount: ").append(toIndentedString(watcherCount)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("automoderation");
    openapiFields.add("automoderation_scores");
    openapiFields.add("channel");
    openapiFields.add("channel_id");
    openapiFields.add("channel_type");
    openapiFields.add("cid");
    openapiFields.add("connection_id");
    openapiFields.add("created_at");
    openapiFields.add("created_by");
    openapiFields.add("me");
    openapiFields.add("member");
    openapiFields.add("message");
    openapiFields.add("parent_id");
    openapiFields.add("reaction");
    openapiFields.add("reason");
    openapiFields.add("team");
    openapiFields.add("type");
    openapiFields.add("user");
    openapiFields.add("user_id");
    openapiFields.add("watcher_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventRequest is not found in the empty JSON string", EventRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `automoderation_scores`
      if (jsonObj.get("automoderation_scores") != null && !jsonObj.get("automoderation_scores").isJsonNull()) {
        ModerationResponseRequest.validateJsonElement(jsonObj.get("automoderation_scores"));
      }
      if ((jsonObj.get("channel_id") != null && !jsonObj.get("channel_id").isJsonNull()) && !jsonObj.get("channel_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel_id").toString()));
      }
      if ((jsonObj.get("channel_type") != null && !jsonObj.get("channel_type").isJsonNull()) && !jsonObj.get("channel_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel_type").toString()));
      }
      if ((jsonObj.get("cid") != null && !jsonObj.get("cid").isJsonNull()) && !jsonObj.get("cid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cid").toString()));
      }
      if ((jsonObj.get("connection_id") != null && !jsonObj.get("connection_id").isJsonNull()) && !jsonObj.get("connection_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connection_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connection_id").toString()));
      }
      // validate the optional field `member`
      if (jsonObj.get("member") != null && !jsonObj.get("member").isJsonNull()) {
        ChannelMemberRequest.validateJsonElement(jsonObj.get("member"));
      }
      if ((jsonObj.get("parent_id") != null && !jsonObj.get("parent_id").isJsonNull()) && !jsonObj.get("parent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parent_id").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("team") != null && !jsonObj.get("team").isJsonNull()) && !jsonObj.get("team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("team").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<EventRequest>() {
           @Override
           public void write(JsonWriter out, EventRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EventRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             EventRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventRequest
   * @throws IOException if the JSON string is invalid with respect to EventRequest
   */
  public static EventRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventRequest.class);
  }

  /**
   * Convert an instance of EventRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

