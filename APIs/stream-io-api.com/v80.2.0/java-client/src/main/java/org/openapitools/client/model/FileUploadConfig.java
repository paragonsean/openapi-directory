/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FileUploadConfig
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FileUploadConfig {
  public static final String SERIALIZED_NAME_ALLOWED_FILE_EXTENSIONS = "allowed_file_extensions";
  @SerializedName(SERIALIZED_NAME_ALLOWED_FILE_EXTENSIONS)
  private List<String> allowedFileExtensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_MIME_TYPES = "allowed_mime_types";
  @SerializedName(SERIALIZED_NAME_ALLOWED_MIME_TYPES)
  private List<String> allowedMimeTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_BLOCKED_FILE_EXTENSIONS = "blocked_file_extensions";
  @SerializedName(SERIALIZED_NAME_BLOCKED_FILE_EXTENSIONS)
  private List<String> blockedFileExtensions = new ArrayList<>();

  public static final String SERIALIZED_NAME_BLOCKED_MIME_TYPES = "blocked_mime_types";
  @SerializedName(SERIALIZED_NAME_BLOCKED_MIME_TYPES)
  private List<String> blockedMimeTypes = new ArrayList<>();

  public FileUploadConfig() {
  }

  public FileUploadConfig allowedFileExtensions(List<String> allowedFileExtensions) {
    this.allowedFileExtensions = allowedFileExtensions;
    return this;
  }

  public FileUploadConfig addAllowedFileExtensionsItem(String allowedFileExtensionsItem) {
    if (this.allowedFileExtensions == null) {
      this.allowedFileExtensions = new ArrayList<>();
    }
    this.allowedFileExtensions.add(allowedFileExtensionsItem);
    return this;
  }

  /**
   * Get allowedFileExtensions
   * @return allowedFileExtensions
   */
  @javax.annotation.Nonnull
  public List<String> getAllowedFileExtensions() {
    return allowedFileExtensions;
  }

  public void setAllowedFileExtensions(List<String> allowedFileExtensions) {
    this.allowedFileExtensions = allowedFileExtensions;
  }


  public FileUploadConfig allowedMimeTypes(List<String> allowedMimeTypes) {
    this.allowedMimeTypes = allowedMimeTypes;
    return this;
  }

  public FileUploadConfig addAllowedMimeTypesItem(String allowedMimeTypesItem) {
    if (this.allowedMimeTypes == null) {
      this.allowedMimeTypes = new ArrayList<>();
    }
    this.allowedMimeTypes.add(allowedMimeTypesItem);
    return this;
  }

  /**
   * Get allowedMimeTypes
   * @return allowedMimeTypes
   */
  @javax.annotation.Nonnull
  public List<String> getAllowedMimeTypes() {
    return allowedMimeTypes;
  }

  public void setAllowedMimeTypes(List<String> allowedMimeTypes) {
    this.allowedMimeTypes = allowedMimeTypes;
  }


  public FileUploadConfig blockedFileExtensions(List<String> blockedFileExtensions) {
    this.blockedFileExtensions = blockedFileExtensions;
    return this;
  }

  public FileUploadConfig addBlockedFileExtensionsItem(String blockedFileExtensionsItem) {
    if (this.blockedFileExtensions == null) {
      this.blockedFileExtensions = new ArrayList<>();
    }
    this.blockedFileExtensions.add(blockedFileExtensionsItem);
    return this;
  }

  /**
   * Get blockedFileExtensions
   * @return blockedFileExtensions
   */
  @javax.annotation.Nonnull
  public List<String> getBlockedFileExtensions() {
    return blockedFileExtensions;
  }

  public void setBlockedFileExtensions(List<String> blockedFileExtensions) {
    this.blockedFileExtensions = blockedFileExtensions;
  }


  public FileUploadConfig blockedMimeTypes(List<String> blockedMimeTypes) {
    this.blockedMimeTypes = blockedMimeTypes;
    return this;
  }

  public FileUploadConfig addBlockedMimeTypesItem(String blockedMimeTypesItem) {
    if (this.blockedMimeTypes == null) {
      this.blockedMimeTypes = new ArrayList<>();
    }
    this.blockedMimeTypes.add(blockedMimeTypesItem);
    return this;
  }

  /**
   * Get blockedMimeTypes
   * @return blockedMimeTypes
   */
  @javax.annotation.Nonnull
  public List<String> getBlockedMimeTypes() {
    return blockedMimeTypes;
  }

  public void setBlockedMimeTypes(List<String> blockedMimeTypes) {
    this.blockedMimeTypes = blockedMimeTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileUploadConfig fileUploadConfig = (FileUploadConfig) o;
    return Objects.equals(this.allowedFileExtensions, fileUploadConfig.allowedFileExtensions) &&
        Objects.equals(this.allowedMimeTypes, fileUploadConfig.allowedMimeTypes) &&
        Objects.equals(this.blockedFileExtensions, fileUploadConfig.blockedFileExtensions) &&
        Objects.equals(this.blockedMimeTypes, fileUploadConfig.blockedMimeTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedFileExtensions, allowedMimeTypes, blockedFileExtensions, blockedMimeTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileUploadConfig {\n");
    sb.append("    allowedFileExtensions: ").append(toIndentedString(allowedFileExtensions)).append("\n");
    sb.append("    allowedMimeTypes: ").append(toIndentedString(allowedMimeTypes)).append("\n");
    sb.append("    blockedFileExtensions: ").append(toIndentedString(blockedFileExtensions)).append("\n");
    sb.append("    blockedMimeTypes: ").append(toIndentedString(blockedMimeTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowed_file_extensions");
    openapiFields.add("allowed_mime_types");
    openapiFields.add("blocked_file_extensions");
    openapiFields.add("blocked_mime_types");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("allowed_file_extensions");
    openapiRequiredFields.add("allowed_mime_types");
    openapiRequiredFields.add("blocked_file_extensions");
    openapiRequiredFields.add("blocked_mime_types");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileUploadConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileUploadConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileUploadConfig is not found in the empty JSON string", FileUploadConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileUploadConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileUploadConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FileUploadConfig.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("allowed_file_extensions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("allowed_file_extensions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_file_extensions` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_file_extensions").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("allowed_mime_types") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("allowed_mime_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_mime_types` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_mime_types").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("blocked_file_extensions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("blocked_file_extensions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blocked_file_extensions` to be an array in the JSON string but got `%s`", jsonObj.get("blocked_file_extensions").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("blocked_mime_types") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("blocked_mime_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blocked_mime_types` to be an array in the JSON string but got `%s`", jsonObj.get("blocked_mime_types").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileUploadConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileUploadConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileUploadConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileUploadConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<FileUploadConfig>() {
           @Override
           public void write(JsonWriter out, FileUploadConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileUploadConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileUploadConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileUploadConfig
   * @throws IOException if the JSON string is invalid with respect to FileUploadConfig
   */
  public static FileUploadConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileUploadConfig.class);
  }

  /**
   * Convert an instance of FileUploadConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

