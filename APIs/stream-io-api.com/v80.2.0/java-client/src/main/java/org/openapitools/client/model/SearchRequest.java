/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.SortParam;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchRequest {
  public static final String SERIALIZED_NAME_FILTER_CONDITIONS = "filter_conditions";
  @SerializedName(SERIALIZED_NAME_FILTER_CONDITIONS)
  private Map<String, Object> filterConditions = new HashMap<>();

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_MESSAGE_FILTER_CONDITIONS = "message_filter_conditions";
  @SerializedName(SERIALIZED_NAME_MESSAGE_FILTER_CONDITIONS)
  private Map<String, Object> messageFilterConditions = new HashMap<>();

  public static final String SERIALIZED_NAME_NEXT = "next";
  @SerializedName(SERIALIZED_NAME_NEXT)
  private String next;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private List<SortParam> sort = new ArrayList<>();

  public SearchRequest() {
  }

  public SearchRequest filterConditions(Map<String, Object> filterConditions) {
    this.filterConditions = filterConditions;
    return this;
  }

  public SearchRequest putFilterConditionsItem(String key, Object filterConditionsItem) {
    if (this.filterConditions == null) {
      this.filterConditions = new HashMap<>();
    }
    this.filterConditions.put(key, filterConditionsItem);
    return this;
  }

  /**
   * Channel filter conditions
   * @return filterConditions
   */
  @javax.annotation.Nonnull
  public Map<String, Object> getFilterConditions() {
    return filterConditions;
  }

  public void setFilterConditions(Map<String, Object> filterConditions) {
    this.filterConditions = filterConditions;
  }


  public SearchRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Number of messages to return
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public SearchRequest messageFilterConditions(Map<String, Object> messageFilterConditions) {
    this.messageFilterConditions = messageFilterConditions;
    return this;
  }

  public SearchRequest putMessageFilterConditionsItem(String key, Object messageFilterConditionsItem) {
    if (this.messageFilterConditions == null) {
      this.messageFilterConditions = new HashMap<>();
    }
    this.messageFilterConditions.put(key, messageFilterConditionsItem);
    return this;
  }

  /**
   * Message filter conditions
   * @return messageFilterConditions
   */
  @javax.annotation.Nullable
  public Map<String, Object> getMessageFilterConditions() {
    return messageFilterConditions;
  }

  public void setMessageFilterConditions(Map<String, Object> messageFilterConditions) {
    this.messageFilterConditions = messageFilterConditions;
  }


  public SearchRequest next(String next) {
    this.next = next;
    return this;
  }

  /**
   * Pagination parameter. Cannot be used with non-zero offset.
   * @return next
   */
  @javax.annotation.Nullable
  public String getNext() {
    return next;
  }

  public void setNext(String next) {
    this.next = next;
  }


  public SearchRequest offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Pagination offset. Cannot be used with sort or next.
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public SearchRequest query(String query) {
    this.query = query;
    return this;
  }

  /**
   * Search phrase
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }


  public SearchRequest sort(List<SortParam> sort) {
    this.sort = sort;
    return this;
  }

  public SearchRequest addSortItem(SortParam sortItem) {
    if (this.sort == null) {
      this.sort = new ArrayList<>();
    }
    this.sort.add(sortItem);
    return this;
  }

  /**
   * Sort parameters. Cannot be used with non-zero offset
   * @return sort
   */
  @javax.annotation.Nullable
  public List<SortParam> getSort() {
    return sort;
  }

  public void setSort(List<SortParam> sort) {
    this.sort = sort;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchRequest searchRequest = (SearchRequest) o;
    return Objects.equals(this.filterConditions, searchRequest.filterConditions) &&
        Objects.equals(this.limit, searchRequest.limit) &&
        Objects.equals(this.messageFilterConditions, searchRequest.messageFilterConditions) &&
        Objects.equals(this.next, searchRequest.next) &&
        Objects.equals(this.offset, searchRequest.offset) &&
        Objects.equals(this.query, searchRequest.query) &&
        Objects.equals(this.sort, searchRequest.sort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterConditions, limit, messageFilterConditions, next, offset, query, sort);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchRequest {\n");
    sb.append("    filterConditions: ").append(toIndentedString(filterConditions)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    messageFilterConditions: ").append(toIndentedString(messageFilterConditions)).append("\n");
    sb.append("    next: ").append(toIndentedString(next)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filter_conditions");
    openapiFields.add("limit");
    openapiFields.add("message_filter_conditions");
    openapiFields.add("next");
    openapiFields.add("offset");
    openapiFields.add("query");
    openapiFields.add("sort");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("filter_conditions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchRequest is not found in the empty JSON string", SearchRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("next") != null && !jsonObj.get("next").isJsonNull()) && !jsonObj.get("next").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `next` to be a primitive type in the JSON string but got `%s`", jsonObj.get("next").toString()));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if (jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) {
        JsonArray jsonArraysort = jsonObj.getAsJsonArray("sort");
        if (jsonArraysort != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sort").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sort` to be an array in the JSON string but got `%s`", jsonObj.get("sort").toString()));
          }

          // validate the optional field `sort` (array)
          for (int i = 0; i < jsonArraysort.size(); i++) {
            SortParam.validateJsonElement(jsonArraysort.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchRequest>() {
           @Override
           public void write(JsonWriter out, SearchRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchRequest
   * @throws IOException if the JSON string is invalid with respect to SearchRequest
   */
  public static SearchRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchRequest.class);
  }

  /**
   * Convert an instance of SearchRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

