/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PushNotificationSettingsRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents chat user
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserObjectRequest {
  public static final String SERIALIZED_NAME_BAN_EXPIRES = "ban_expires";
  @SerializedName(SERIALIZED_NAME_BAN_EXPIRES)
  private OffsetDateTime banExpires;

  public static final String SERIALIZED_NAME_BANNED = "banned";
  @SerializedName(SERIALIZED_NAME_BANNED)
  private Boolean banned;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INVISIBLE = "invisible";
  @SerializedName(SERIALIZED_NAME_INVISIBLE)
  private Boolean invisible;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_PUSH_NOTIFICATIONS = "push_notifications";
  @SerializedName(SERIALIZED_NAME_PUSH_NOTIFICATIONS)
  private PushNotificationSettingsRequest pushNotifications;

  public static final String SERIALIZED_NAME_REVOKE_TOKENS_ISSUED_BEFORE = "revoke_tokens_issued_before";
  @SerializedName(SERIALIZED_NAME_REVOKE_TOKENS_ISSUED_BEFORE)
  private OffsetDateTime revokeTokensIssuedBefore;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_TEAMS = "teams";
  @SerializedName(SERIALIZED_NAME_TEAMS)
  private List<String> teams = new ArrayList<>();

  public UserObjectRequest() {
  }

  public UserObjectRequest banExpires(OffsetDateTime banExpires) {
    this.banExpires = banExpires;
    return this;
  }

  /**
   * Expiration date of the ban
   * @return banExpires
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBanExpires() {
    return banExpires;
  }

  public void setBanExpires(OffsetDateTime banExpires) {
    this.banExpires = banExpires;
  }


  public UserObjectRequest banned(Boolean banned) {
    this.banned = banned;
    return this;
  }

  /**
   * Whether a user is banned or not
   * @return banned
   */
  @javax.annotation.Nullable
  public Boolean getBanned() {
    return banned;
  }

  public void setBanned(Boolean banned) {
    this.banned = banned;
  }


  public UserObjectRequest id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique user identifier
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UserObjectRequest invisible(Boolean invisible) {
    this.invisible = invisible;
    return this;
  }

  /**
   * Get invisible
   * @return invisible
   */
  @javax.annotation.Nullable
  public Boolean getInvisible() {
    return invisible;
  }

  public void setInvisible(Boolean invisible) {
    this.invisible = invisible;
  }


  public UserObjectRequest language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Preferred language of a user
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public UserObjectRequest pushNotifications(PushNotificationSettingsRequest pushNotifications) {
    this.pushNotifications = pushNotifications;
    return this;
  }

  /**
   * Get pushNotifications
   * @return pushNotifications
   */
  @javax.annotation.Nullable
  public PushNotificationSettingsRequest getPushNotifications() {
    return pushNotifications;
  }

  public void setPushNotifications(PushNotificationSettingsRequest pushNotifications) {
    this.pushNotifications = pushNotifications;
  }


  public UserObjectRequest revokeTokensIssuedBefore(OffsetDateTime revokeTokensIssuedBefore) {
    this.revokeTokensIssuedBefore = revokeTokensIssuedBefore;
    return this;
  }

  /**
   * Revocation date for tokens
   * @return revokeTokensIssuedBefore
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRevokeTokensIssuedBefore() {
    return revokeTokensIssuedBefore;
  }

  public void setRevokeTokensIssuedBefore(OffsetDateTime revokeTokensIssuedBefore) {
    this.revokeTokensIssuedBefore = revokeTokensIssuedBefore;
  }


  public UserObjectRequest role(String role) {
    this.role = role;
    return this;
  }

  /**
   * Determines the set of user permissions
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public UserObjectRequest teams(List<String> teams) {
    this.teams = teams;
    return this;
  }

  public UserObjectRequest addTeamsItem(String teamsItem) {
    if (this.teams == null) {
      this.teams = new ArrayList<>();
    }
    this.teams.add(teamsItem);
    return this;
  }

  /**
   * List of teams user is a part of
   * @return teams
   */
  @javax.annotation.Nullable
  public List<String> getTeams() {
    return teams;
  }

  public void setTeams(List<String> teams) {
    this.teams = teams;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the UserObjectRequest instance itself
   */
  public UserObjectRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserObjectRequest userObjectRequest = (UserObjectRequest) o;
    return Objects.equals(this.banExpires, userObjectRequest.banExpires) &&
        Objects.equals(this.banned, userObjectRequest.banned) &&
        Objects.equals(this.id, userObjectRequest.id) &&
        Objects.equals(this.invisible, userObjectRequest.invisible) &&
        Objects.equals(this.language, userObjectRequest.language) &&
        Objects.equals(this.pushNotifications, userObjectRequest.pushNotifications) &&
        Objects.equals(this.revokeTokensIssuedBefore, userObjectRequest.revokeTokensIssuedBefore) &&
        Objects.equals(this.role, userObjectRequest.role) &&
        Objects.equals(this.teams, userObjectRequest.teams)&&
        Objects.equals(this.additionalProperties, userObjectRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(banExpires, banned, id, invisible, language, pushNotifications, revokeTokensIssuedBefore, role, teams, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserObjectRequest {\n");
    sb.append("    banExpires: ").append(toIndentedString(banExpires)).append("\n");
    sb.append("    banned: ").append(toIndentedString(banned)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    invisible: ").append(toIndentedString(invisible)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    pushNotifications: ").append(toIndentedString(pushNotifications)).append("\n");
    sb.append("    revokeTokensIssuedBefore: ").append(toIndentedString(revokeTokensIssuedBefore)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    teams: ").append(toIndentedString(teams)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ban_expires");
    openapiFields.add("banned");
    openapiFields.add("id");
    openapiFields.add("invisible");
    openapiFields.add("language");
    openapiFields.add("push_notifications");
    openapiFields.add("revoke_tokens_issued_before");
    openapiFields.add("role");
    openapiFields.add("teams");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserObjectRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserObjectRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserObjectRequest is not found in the empty JSON string", UserObjectRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserObjectRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // validate the optional field `push_notifications`
      if (jsonObj.get("push_notifications") != null && !jsonObj.get("push_notifications").isJsonNull()) {
        PushNotificationSettingsRequest.validateJsonElement(jsonObj.get("push_notifications"));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("teams") != null && !jsonObj.get("teams").isJsonNull() && !jsonObj.get("teams").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `teams` to be an array in the JSON string but got `%s`", jsonObj.get("teams").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserObjectRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserObjectRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserObjectRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserObjectRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UserObjectRequest>() {
           @Override
           public void write(JsonWriter out, UserObjectRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public UserObjectRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             UserObjectRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserObjectRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserObjectRequest
   * @throws IOException if the JSON string is invalid with respect to UserObjectRequest
   */
  public static UserObjectRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserObjectRequest.class);
  }

  /**
   * Convert an instance of UserObjectRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

