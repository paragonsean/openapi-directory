/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ModerationResponse;
import org.openapitools.client.model.Thresholds;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MessageModerationResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MessageModerationResult {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_AI_MODERATION_RESPONSE = "ai_moderation_response";
  @SerializedName(SERIALIZED_NAME_AI_MODERATION_RESPONSE)
  private ModerationResponse aiModerationResponse;

  public static final String SERIALIZED_NAME_BLOCKED_WORD = "blocked_word";
  @SerializedName(SERIALIZED_NAME_BLOCKED_WORD)
  private String blockedWord;

  public static final String SERIALIZED_NAME_BLOCKLIST_NAME = "blocklist_name";
  @SerializedName(SERIALIZED_NAME_BLOCKLIST_NAME)
  private String blocklistName;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "message_id";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_MODERATED_BY = "moderated_by";
  @SerializedName(SERIALIZED_NAME_MODERATED_BY)
  private String moderatedBy;

  public static final String SERIALIZED_NAME_MODERATION_THRESHOLDS = "moderation_thresholds";
  @SerializedName(SERIALIZED_NAME_MODERATION_THRESHOLDS)
  private Thresholds moderationThresholds;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USER_BAD_KARMA = "user_bad_karma";
  @SerializedName(SERIALIZED_NAME_USER_BAD_KARMA)
  private Boolean userBadKarma;

  public static final String SERIALIZED_NAME_USER_KARMA = "user_karma";
  @SerializedName(SERIALIZED_NAME_USER_KARMA)
  private Float userKarma;

  public MessageModerationResult() {
  }

  public MessageModerationResult action(String action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nonnull
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public MessageModerationResult aiModerationResponse(ModerationResponse aiModerationResponse) {
    this.aiModerationResponse = aiModerationResponse;
    return this;
  }

  /**
   * Get aiModerationResponse
   * @return aiModerationResponse
   */
  @javax.annotation.Nullable
  public ModerationResponse getAiModerationResponse() {
    return aiModerationResponse;
  }

  public void setAiModerationResponse(ModerationResponse aiModerationResponse) {
    this.aiModerationResponse = aiModerationResponse;
  }


  public MessageModerationResult blockedWord(String blockedWord) {
    this.blockedWord = blockedWord;
    return this;
  }

  /**
   * Get blockedWord
   * @return blockedWord
   */
  @javax.annotation.Nullable
  public String getBlockedWord() {
    return blockedWord;
  }

  public void setBlockedWord(String blockedWord) {
    this.blockedWord = blockedWord;
  }


  public MessageModerationResult blocklistName(String blocklistName) {
    this.blocklistName = blocklistName;
    return this;
  }

  /**
   * Get blocklistName
   * @return blocklistName
   */
  @javax.annotation.Nullable
  public String getBlocklistName() {
    return blocklistName;
  }

  public void setBlocklistName(String blocklistName) {
    this.blocklistName = blocklistName;
  }


  public MessageModerationResult createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public MessageModerationResult messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * Get messageId
   * @return messageId
   */
  @javax.annotation.Nonnull
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public MessageModerationResult moderatedBy(String moderatedBy) {
    this.moderatedBy = moderatedBy;
    return this;
  }

  /**
   * Get moderatedBy
   * @return moderatedBy
   */
  @javax.annotation.Nullable
  public String getModeratedBy() {
    return moderatedBy;
  }

  public void setModeratedBy(String moderatedBy) {
    this.moderatedBy = moderatedBy;
  }


  public MessageModerationResult moderationThresholds(Thresholds moderationThresholds) {
    this.moderationThresholds = moderationThresholds;
    return this;
  }

  /**
   * Get moderationThresholds
   * @return moderationThresholds
   */
  @javax.annotation.Nullable
  public Thresholds getModerationThresholds() {
    return moderationThresholds;
  }

  public void setModerationThresholds(Thresholds moderationThresholds) {
    this.moderationThresholds = moderationThresholds;
  }


  public MessageModerationResult updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public MessageModerationResult userBadKarma(Boolean userBadKarma) {
    this.userBadKarma = userBadKarma;
    return this;
  }

  /**
   * Get userBadKarma
   * @return userBadKarma
   */
  @javax.annotation.Nonnull
  public Boolean getUserBadKarma() {
    return userBadKarma;
  }

  public void setUserBadKarma(Boolean userBadKarma) {
    this.userBadKarma = userBadKarma;
  }


  public MessageModerationResult userKarma(Float userKarma) {
    this.userKarma = userKarma;
    return this;
  }

  /**
   * Get userKarma
   * @return userKarma
   */
  @javax.annotation.Nonnull
  public Float getUserKarma() {
    return userKarma;
  }

  public void setUserKarma(Float userKarma) {
    this.userKarma = userKarma;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageModerationResult messageModerationResult = (MessageModerationResult) o;
    return Objects.equals(this.action, messageModerationResult.action) &&
        Objects.equals(this.aiModerationResponse, messageModerationResult.aiModerationResponse) &&
        Objects.equals(this.blockedWord, messageModerationResult.blockedWord) &&
        Objects.equals(this.blocklistName, messageModerationResult.blocklistName) &&
        Objects.equals(this.createdAt, messageModerationResult.createdAt) &&
        Objects.equals(this.messageId, messageModerationResult.messageId) &&
        Objects.equals(this.moderatedBy, messageModerationResult.moderatedBy) &&
        Objects.equals(this.moderationThresholds, messageModerationResult.moderationThresholds) &&
        Objects.equals(this.updatedAt, messageModerationResult.updatedAt) &&
        Objects.equals(this.userBadKarma, messageModerationResult.userBadKarma) &&
        Objects.equals(this.userKarma, messageModerationResult.userKarma);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, aiModerationResponse, blockedWord, blocklistName, createdAt, messageId, moderatedBy, moderationThresholds, updatedAt, userBadKarma, userKarma);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageModerationResult {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    aiModerationResponse: ").append(toIndentedString(aiModerationResponse)).append("\n");
    sb.append("    blockedWord: ").append(toIndentedString(blockedWord)).append("\n");
    sb.append("    blocklistName: ").append(toIndentedString(blocklistName)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    moderatedBy: ").append(toIndentedString(moderatedBy)).append("\n");
    sb.append("    moderationThresholds: ").append(toIndentedString(moderationThresholds)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userBadKarma: ").append(toIndentedString(userBadKarma)).append("\n");
    sb.append("    userKarma: ").append(toIndentedString(userKarma)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("ai_moderation_response");
    openapiFields.add("blocked_word");
    openapiFields.add("blocklist_name");
    openapiFields.add("created_at");
    openapiFields.add("message_id");
    openapiFields.add("moderated_by");
    openapiFields.add("moderation_thresholds");
    openapiFields.add("updated_at");
    openapiFields.add("user_bad_karma");
    openapiFields.add("user_karma");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("message_id");
    openapiRequiredFields.add("updated_at");
    openapiRequiredFields.add("user_bad_karma");
    openapiRequiredFields.add("user_karma");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MessageModerationResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MessageModerationResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessageModerationResult is not found in the empty JSON string", MessageModerationResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MessageModerationResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessageModerationResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MessageModerationResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the optional field `ai_moderation_response`
      if (jsonObj.get("ai_moderation_response") != null && !jsonObj.get("ai_moderation_response").isJsonNull()) {
        ModerationResponse.validateJsonElement(jsonObj.get("ai_moderation_response"));
      }
      if ((jsonObj.get("blocked_word") != null && !jsonObj.get("blocked_word").isJsonNull()) && !jsonObj.get("blocked_word").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blocked_word` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blocked_word").toString()));
      }
      if ((jsonObj.get("blocklist_name") != null && !jsonObj.get("blocklist_name").isJsonNull()) && !jsonObj.get("blocklist_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blocklist_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blocklist_name").toString()));
      }
      if (!jsonObj.get("message_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message_id").toString()));
      }
      if ((jsonObj.get("moderated_by") != null && !jsonObj.get("moderated_by").isJsonNull()) && !jsonObj.get("moderated_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moderated_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moderated_by").toString()));
      }
      // validate the optional field `moderation_thresholds`
      if (jsonObj.get("moderation_thresholds") != null && !jsonObj.get("moderation_thresholds").isJsonNull()) {
        Thresholds.validateJsonElement(jsonObj.get("moderation_thresholds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessageModerationResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessageModerationResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessageModerationResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessageModerationResult.class));

       return (TypeAdapter<T>) new TypeAdapter<MessageModerationResult>() {
           @Override
           public void write(JsonWriter out, MessageModerationResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessageModerationResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MessageModerationResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MessageModerationResult
   * @throws IOException if the JSON string is invalid with respect to MessageModerationResult
   */
  public static MessageModerationResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessageModerationResult.class);
  }

  /**
   * Convert an instance of MessageModerationResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

