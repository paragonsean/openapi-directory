/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FlagMessageDetails;
import org.openapitools.client.model.MessageModerationResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AutomodDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AutomodDetails {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_IMAGE_LABELS = "image_labels";
  @SerializedName(SERIALIZED_NAME_IMAGE_LABELS)
  private List<String> imageLabels = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE_DETAILS = "message_details";
  @SerializedName(SERIALIZED_NAME_MESSAGE_DETAILS)
  private FlagMessageDetails messageDetails;

  public static final String SERIALIZED_NAME_ORIGINAL_MESSAGE_TYPE = "original_message_type";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_MESSAGE_TYPE)
  private String originalMessageType;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private MessageModerationResult result;

  public AutomodDetails() {
  }

  public AutomodDetails action(String action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nullable
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public AutomodDetails imageLabels(List<String> imageLabels) {
    this.imageLabels = imageLabels;
    return this;
  }

  public AutomodDetails addImageLabelsItem(String imageLabelsItem) {
    if (this.imageLabels == null) {
      this.imageLabels = new ArrayList<>();
    }
    this.imageLabels.add(imageLabelsItem);
    return this;
  }

  /**
   * Get imageLabels
   * @return imageLabels
   */
  @javax.annotation.Nullable
  public List<String> getImageLabels() {
    return imageLabels;
  }

  public void setImageLabels(List<String> imageLabels) {
    this.imageLabels = imageLabels;
  }


  public AutomodDetails messageDetails(FlagMessageDetails messageDetails) {
    this.messageDetails = messageDetails;
    return this;
  }

  /**
   * Get messageDetails
   * @return messageDetails
   */
  @javax.annotation.Nullable
  public FlagMessageDetails getMessageDetails() {
    return messageDetails;
  }

  public void setMessageDetails(FlagMessageDetails messageDetails) {
    this.messageDetails = messageDetails;
  }


  public AutomodDetails originalMessageType(String originalMessageType) {
    this.originalMessageType = originalMessageType;
    return this;
  }

  /**
   * Get originalMessageType
   * @return originalMessageType
   */
  @javax.annotation.Nullable
  public String getOriginalMessageType() {
    return originalMessageType;
  }

  public void setOriginalMessageType(String originalMessageType) {
    this.originalMessageType = originalMessageType;
  }


  public AutomodDetails result(MessageModerationResult result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public MessageModerationResult getResult() {
    return result;
  }

  public void setResult(MessageModerationResult result) {
    this.result = result;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AutomodDetails automodDetails = (AutomodDetails) o;
    return Objects.equals(this.action, automodDetails.action) &&
        Objects.equals(this.imageLabels, automodDetails.imageLabels) &&
        Objects.equals(this.messageDetails, automodDetails.messageDetails) &&
        Objects.equals(this.originalMessageType, automodDetails.originalMessageType) &&
        Objects.equals(this.result, automodDetails.result);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, imageLabels, messageDetails, originalMessageType, result);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AutomodDetails {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    imageLabels: ").append(toIndentedString(imageLabels)).append("\n");
    sb.append("    messageDetails: ").append(toIndentedString(messageDetails)).append("\n");
    sb.append("    originalMessageType: ").append(toIndentedString(originalMessageType)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("image_labels");
    openapiFields.add("message_details");
    openapiFields.add("original_message_type");
    openapiFields.add("result");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AutomodDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AutomodDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AutomodDetails is not found in the empty JSON string", AutomodDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AutomodDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AutomodDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("image_labels") != null && !jsonObj.get("image_labels").isJsonNull() && !jsonObj.get("image_labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_labels` to be an array in the JSON string but got `%s`", jsonObj.get("image_labels").toString()));
      }
      // validate the optional field `message_details`
      if (jsonObj.get("message_details") != null && !jsonObj.get("message_details").isJsonNull()) {
        FlagMessageDetails.validateJsonElement(jsonObj.get("message_details"));
      }
      if ((jsonObj.get("original_message_type") != null && !jsonObj.get("original_message_type").isJsonNull()) && !jsonObj.get("original_message_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_message_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_message_type").toString()));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        MessageModerationResult.validateJsonElement(jsonObj.get("result"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AutomodDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AutomodDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AutomodDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AutomodDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<AutomodDetails>() {
           @Override
           public void write(JsonWriter out, AutomodDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AutomodDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AutomodDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AutomodDetails
   * @throws IOException if the JSON string is invalid with respect to AutomodDetails
   */
  public static AutomodDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AutomodDetails.class);
  }

  /**
   * Convert an instance of AutomodDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

