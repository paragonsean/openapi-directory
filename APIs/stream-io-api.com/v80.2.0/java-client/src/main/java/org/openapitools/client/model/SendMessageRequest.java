/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.MessageRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains all information needed to send new message
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendMessageRequest {
  public static final String SERIALIZED_NAME_FORCE_MODERATION = "force_moderation";
  @SerializedName(SERIALIZED_NAME_FORCE_MODERATION)
  private Boolean forceModeration;

  public static final String SERIALIZED_NAME_IS_PENDING_MESSAGE = "is_pending_message";
  @SerializedName(SERIALIZED_NAME_IS_PENDING_MESSAGE)
  private Boolean isPendingMessage;

  public static final String SERIALIZED_NAME_KEEP_CHANNEL_HIDDEN = "keep_channel_hidden";
  @SerializedName(SERIALIZED_NAME_KEEP_CHANNEL_HIDDEN)
  private Boolean keepChannelHidden;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private MessageRequest message;

  public static final String SERIALIZED_NAME_PENDING_MESSAGE_METADATA = "pending_message_metadata";
  @SerializedName(SERIALIZED_NAME_PENDING_MESSAGE_METADATA)
  private Map<String, String> pendingMessageMetadata = new HashMap<>();

  public static final String SERIALIZED_NAME_SKIP_ENRICH_URL = "skip_enrich_url";
  @SerializedName(SERIALIZED_NAME_SKIP_ENRICH_URL)
  private Boolean skipEnrichUrl;

  public static final String SERIALIZED_NAME_SKIP_PUSH = "skip_push";
  @SerializedName(SERIALIZED_NAME_SKIP_PUSH)
  private Boolean skipPush;

  public SendMessageRequest() {
  }

  public SendMessageRequest forceModeration(Boolean forceModeration) {
    this.forceModeration = forceModeration;
    return this;
  }

  /**
   * Enable moderation on server-side requests
   * @return forceModeration
   */
  @javax.annotation.Nullable
  public Boolean getForceModeration() {
    return forceModeration;
  }

  public void setForceModeration(Boolean forceModeration) {
    this.forceModeration = forceModeration;
  }


  public SendMessageRequest isPendingMessage(Boolean isPendingMessage) {
    this.isPendingMessage = isPendingMessage;
    return this;
  }

  /**
   * Make the message a pending message. This message will not be viewable to others until it is committed.
   * @return isPendingMessage
   */
  @javax.annotation.Nullable
  public Boolean getIsPendingMessage() {
    return isPendingMessage;
  }

  public void setIsPendingMessage(Boolean isPendingMessage) {
    this.isPendingMessage = isPendingMessage;
  }


  public SendMessageRequest keepChannelHidden(Boolean keepChannelHidden) {
    this.keepChannelHidden = keepChannelHidden;
    return this;
  }

  /**
   * Keeps the channel hidden for the sender
   * @return keepChannelHidden
   */
  @javax.annotation.Nullable
  public Boolean getKeepChannelHidden() {
    return keepChannelHidden;
  }

  public void setKeepChannelHidden(Boolean keepChannelHidden) {
    this.keepChannelHidden = keepChannelHidden;
  }


  public SendMessageRequest message(MessageRequest message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nonnull
  public MessageRequest getMessage() {
    return message;
  }

  public void setMessage(MessageRequest message) {
    this.message = message;
  }


  public SendMessageRequest pendingMessageMetadata(Map<String, String> pendingMessageMetadata) {
    this.pendingMessageMetadata = pendingMessageMetadata;
    return this;
  }

  public SendMessageRequest putPendingMessageMetadataItem(String key, String pendingMessageMetadataItem) {
    if (this.pendingMessageMetadata == null) {
      this.pendingMessageMetadata = new HashMap<>();
    }
    this.pendingMessageMetadata.put(key, pendingMessageMetadataItem);
    return this;
  }

  /**
   * Get pendingMessageMetadata
   * @return pendingMessageMetadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getPendingMessageMetadata() {
    return pendingMessageMetadata;
  }

  public void setPendingMessageMetadata(Map<String, String> pendingMessageMetadata) {
    this.pendingMessageMetadata = pendingMessageMetadata;
  }


  public SendMessageRequest skipEnrichUrl(Boolean skipEnrichUrl) {
    this.skipEnrichUrl = skipEnrichUrl;
    return this;
  }

  /**
   * Do not try to enrich the links within message
   * @return skipEnrichUrl
   */
  @javax.annotation.Nullable
  public Boolean getSkipEnrichUrl() {
    return skipEnrichUrl;
  }

  public void setSkipEnrichUrl(Boolean skipEnrichUrl) {
    this.skipEnrichUrl = skipEnrichUrl;
  }


  public SendMessageRequest skipPush(Boolean skipPush) {
    this.skipPush = skipPush;
    return this;
  }

  /**
   * Disables all push notifications for this message
   * @return skipPush
   */
  @javax.annotation.Nullable
  public Boolean getSkipPush() {
    return skipPush;
  }

  public void setSkipPush(Boolean skipPush) {
    this.skipPush = skipPush;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendMessageRequest sendMessageRequest = (SendMessageRequest) o;
    return Objects.equals(this.forceModeration, sendMessageRequest.forceModeration) &&
        Objects.equals(this.isPendingMessage, sendMessageRequest.isPendingMessage) &&
        Objects.equals(this.keepChannelHidden, sendMessageRequest.keepChannelHidden) &&
        Objects.equals(this.message, sendMessageRequest.message) &&
        Objects.equals(this.pendingMessageMetadata, sendMessageRequest.pendingMessageMetadata) &&
        Objects.equals(this.skipEnrichUrl, sendMessageRequest.skipEnrichUrl) &&
        Objects.equals(this.skipPush, sendMessageRequest.skipPush);
  }

  @Override
  public int hashCode() {
    return Objects.hash(forceModeration, isPendingMessage, keepChannelHidden, message, pendingMessageMetadata, skipEnrichUrl, skipPush);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendMessageRequest {\n");
    sb.append("    forceModeration: ").append(toIndentedString(forceModeration)).append("\n");
    sb.append("    isPendingMessage: ").append(toIndentedString(isPendingMessage)).append("\n");
    sb.append("    keepChannelHidden: ").append(toIndentedString(keepChannelHidden)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    pendingMessageMetadata: ").append(toIndentedString(pendingMessageMetadata)).append("\n");
    sb.append("    skipEnrichUrl: ").append(toIndentedString(skipEnrichUrl)).append("\n");
    sb.append("    skipPush: ").append(toIndentedString(skipPush)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("force_moderation");
    openapiFields.add("is_pending_message");
    openapiFields.add("keep_channel_hidden");
    openapiFields.add("message");
    openapiFields.add("pending_message_metadata");
    openapiFields.add("skip_enrich_url");
    openapiFields.add("skip_push");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("message");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendMessageRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendMessageRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendMessageRequest is not found in the empty JSON string", SendMessageRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendMessageRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendMessageRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SendMessageRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendMessageRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendMessageRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendMessageRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendMessageRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SendMessageRequest>() {
           @Override
           public void write(JsonWriter out, SendMessageRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendMessageRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendMessageRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendMessageRequest
   * @throws IOException if the JSON string is invalid with respect to SendMessageRequest
   */
  public static SendMessageRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendMessageRequest.class);
  }

  /**
   * Convert an instance of SendMessageRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

