/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UserObjectRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SyncRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SyncRequest {
  public static final String SERIALIZED_NAME_CHANNEL_CIDS = "channel_cids";
  @SerializedName(SERIALIZED_NAME_CHANNEL_CIDS)
  private List<String> channelCids = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CONNECTION_ID = "connection_id";
  @SerializedName(SERIALIZED_NAME_CONNECTION_ID)
  private String connectionId;

  public static final String SERIALIZED_NAME_LAST_SYNC_AT = "last_sync_at";
  @SerializedName(SERIALIZED_NAME_LAST_SYNC_AT)
  private OffsetDateTime lastSyncAt;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserObjectRequest user;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_WATCH = "watch";
  @SerializedName(SERIALIZED_NAME_WATCH)
  private Boolean watch;

  public static final String SERIALIZED_NAME_WITH_INACCESSIBLE_CIDS = "with_inaccessible_cids";
  @SerializedName(SERIALIZED_NAME_WITH_INACCESSIBLE_CIDS)
  private Boolean withInaccessibleCids;

  public SyncRequest() {
  }

  public SyncRequest channelCids(List<String> channelCids) {
    this.channelCids = channelCids;
    return this;
  }

  public SyncRequest addChannelCidsItem(String channelCidsItem) {
    if (this.channelCids == null) {
      this.channelCids = new ArrayList<>();
    }
    this.channelCids.add(channelCidsItem);
    return this;
  }

  /**
   * List of channel CIDs to sync
   * @return channelCids
   */
  @javax.annotation.Nullable
  public List<String> getChannelCids() {
    return channelCids;
  }

  public void setChannelCids(List<String> channelCids) {
    this.channelCids = channelCids;
  }


  public SyncRequest clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public SyncRequest connectionId(String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

  /**
   * Get connectionId
   * @return connectionId
   */
  @javax.annotation.Nullable
  public String getConnectionId() {
    return connectionId;
  }

  public void setConnectionId(String connectionId) {
    this.connectionId = connectionId;
  }


  public SyncRequest lastSyncAt(OffsetDateTime lastSyncAt) {
    this.lastSyncAt = lastSyncAt;
    return this;
  }

  /**
   * Date from which synchronization should happen
   * @return lastSyncAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastSyncAt() {
    return lastSyncAt;
  }

  public void setLastSyncAt(OffsetDateTime lastSyncAt) {
    this.lastSyncAt = lastSyncAt;
  }


  public SyncRequest user(UserObjectRequest user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserObjectRequest getUser() {
    return user;
  }

  public void setUser(UserObjectRequest user) {
    this.user = user;
  }


  public SyncRequest userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }


  public SyncRequest watch(Boolean watch) {
    this.watch = watch;
    return this;
  }

  /**
   * If set to true this will start watching requested and newly added channels that user has access to. If error occurred with this option enabled and it is not an input error - channels will still be watched.
   * @return watch
   */
  @javax.annotation.Nullable
  public Boolean getWatch() {
    return watch;
  }

  public void setWatch(Boolean watch) {
    this.watch = watch;
  }


  public SyncRequest withInaccessibleCids(Boolean withInaccessibleCids) {
    this.withInaccessibleCids = withInaccessibleCids;
    return this;
  }

  /**
   * If set to true this will add &#39;inaccessible_cids&#39; to response type
   * @return withInaccessibleCids
   */
  @javax.annotation.Nullable
  public Boolean getWithInaccessibleCids() {
    return withInaccessibleCids;
  }

  public void setWithInaccessibleCids(Boolean withInaccessibleCids) {
    this.withInaccessibleCids = withInaccessibleCids;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SyncRequest syncRequest = (SyncRequest) o;
    return Objects.equals(this.channelCids, syncRequest.channelCids) &&
        Objects.equals(this.clientId, syncRequest.clientId) &&
        Objects.equals(this.connectionId, syncRequest.connectionId) &&
        Objects.equals(this.lastSyncAt, syncRequest.lastSyncAt) &&
        Objects.equals(this.user, syncRequest.user) &&
        Objects.equals(this.userId, syncRequest.userId) &&
        Objects.equals(this.watch, syncRequest.watch) &&
        Objects.equals(this.withInaccessibleCids, syncRequest.withInaccessibleCids);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelCids, clientId, connectionId, lastSyncAt, user, userId, watch, withInaccessibleCids);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SyncRequest {\n");
    sb.append("    channelCids: ").append(toIndentedString(channelCids)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    lastSyncAt: ").append(toIndentedString(lastSyncAt)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    watch: ").append(toIndentedString(watch)).append("\n");
    sb.append("    withInaccessibleCids: ").append(toIndentedString(withInaccessibleCids)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("channel_cids");
    openapiFields.add("client_id");
    openapiFields.add("connection_id");
    openapiFields.add("last_sync_at");
    openapiFields.add("user");
    openapiFields.add("user_id");
    openapiFields.add("watch");
    openapiFields.add("with_inaccessible_cids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("last_sync_at");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SyncRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SyncRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SyncRequest is not found in the empty JSON string", SyncRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SyncRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SyncRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SyncRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("channel_cids") != null && !jsonObj.get("channel_cids").isJsonNull() && !jsonObj.get("channel_cids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_cids` to be an array in the JSON string but got `%s`", jsonObj.get("channel_cids").toString()));
      }
      if ((jsonObj.get("client_id") != null && !jsonObj.get("client_id").isJsonNull()) && !jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if ((jsonObj.get("connection_id") != null && !jsonObj.get("connection_id").isJsonNull()) && !jsonObj.get("connection_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connection_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connection_id").toString()));
      }
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SyncRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SyncRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SyncRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SyncRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SyncRequest>() {
           @Override
           public void write(JsonWriter out, SyncRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SyncRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SyncRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SyncRequest
   * @throws IOException if the JSON string is invalid with respect to SyncRequest
   */
  public static SyncRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SyncRequest.class);
  }

  /**
   * Convert an instance of SyncRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

