/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CallType;
import org.openapitools.client.model.ChannelConfig;
import org.openapitools.client.model.Config;
import org.openapitools.client.model.FileUploadConfig;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.PushNotificationFields;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * App
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class App {
  public static final String SERIALIZED_NAME_AGORA_OPTIONS = "agora_options";
  @SerializedName(SERIALIZED_NAME_AGORA_OPTIONS)
  private Config agoraOptions;

  public static final String SERIALIZED_NAME_ASYNC_URL_ENRICH_ENABLED = "async_url_enrich_enabled";
  @SerializedName(SERIALIZED_NAME_ASYNC_URL_ENRICH_ENABLED)
  private Boolean asyncUrlEnrichEnabled;

  public static final String SERIALIZED_NAME_AUTO_TRANSLATION_ENABLED = "auto_translation_enabled";
  @SerializedName(SERIALIZED_NAME_AUTO_TRANSLATION_ENABLED)
  private Boolean autoTranslationEnabled;

  public static final String SERIALIZED_NAME_BEFORE_MESSAGE_SEND_HOOK_URL = "before_message_send_hook_url";
  @SerializedName(SERIALIZED_NAME_BEFORE_MESSAGE_SEND_HOOK_URL)
  private String beforeMessageSendHookUrl;

  public static final String SERIALIZED_NAME_CALL_TYPES = "call_types";
  @SerializedName(SERIALIZED_NAME_CALL_TYPES)
  private Map<String, CallType> callTypes = new HashMap<>();

  public static final String SERIALIZED_NAME_CAMPAIGN_ENABLED = "campaign_enabled";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ENABLED)
  private Boolean campaignEnabled;

  public static final String SERIALIZED_NAME_CDN_EXPIRATION_SECONDS = "cdn_expiration_seconds";
  @SerializedName(SERIALIZED_NAME_CDN_EXPIRATION_SECONDS)
  private Integer cdnExpirationSeconds;

  public static final String SERIALIZED_NAME_CHANNEL_CONFIGS = "channel_configs";
  @SerializedName(SERIALIZED_NAME_CHANNEL_CONFIGS)
  private Map<String, ChannelConfig> channelConfigs = new HashMap<>();

  public static final String SERIALIZED_NAME_CUSTOM_ACTION_HANDLER_URL = "custom_action_handler_url";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ACTION_HANDLER_URL)
  private String customActionHandlerUrl;

  public static final String SERIALIZED_NAME_DISABLE_AUTH_CHECKS = "disable_auth_checks";
  @SerializedName(SERIALIZED_NAME_DISABLE_AUTH_CHECKS)
  private Boolean disableAuthChecks;

  public static final String SERIALIZED_NAME_DISABLE_PERMISSIONS_CHECKS = "disable_permissions_checks";
  @SerializedName(SERIALIZED_NAME_DISABLE_PERMISSIONS_CHECKS)
  private Boolean disablePermissionsChecks;

  public static final String SERIALIZED_NAME_ENFORCE_UNIQUE_USERNAMES = "enforce_unique_usernames";
  @SerializedName(SERIALIZED_NAME_ENFORCE_UNIQUE_USERNAMES)
  private String enforceUniqueUsernames;

  public static final String SERIALIZED_NAME_FILE_UPLOAD_CONFIG = "file_upload_config";
  @SerializedName(SERIALIZED_NAME_FILE_UPLOAD_CONFIG)
  private FileUploadConfig fileUploadConfig;

  public static final String SERIALIZED_NAME_GRANTS = "grants";
  @SerializedName(SERIALIZED_NAME_GRANTS)
  private Map<String, List<String>> grants = new HashMap<>();

  public static final String SERIALIZED_NAME_HMS_OPTIONS = "hms_options";
  @SerializedName(SERIALIZED_NAME_HMS_OPTIONS)
  private Config hmsOptions;

  public static final String SERIALIZED_NAME_IMAGE_MODERATION_ENABLED = "image_moderation_enabled";
  @SerializedName(SERIALIZED_NAME_IMAGE_MODERATION_ENABLED)
  private Boolean imageModerationEnabled;

  public static final String SERIALIZED_NAME_IMAGE_MODERATION_LABELS = "image_moderation_labels";
  @SerializedName(SERIALIZED_NAME_IMAGE_MODERATION_LABELS)
  private List<String> imageModerationLabels = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE_UPLOAD_CONFIG = "image_upload_config";
  @SerializedName(SERIALIZED_NAME_IMAGE_UPLOAD_CONFIG)
  private FileUploadConfig imageUploadConfig;

  public static final String SERIALIZED_NAME_MULTI_TENANT_ENABLED = "multi_tenant_enabled";
  @SerializedName(SERIALIZED_NAME_MULTI_TENANT_ENABLED)
  private Boolean multiTenantEnabled;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private String organization;

  public static final String SERIALIZED_NAME_PERMISSION_VERSION = "permission_version";
  @SerializedName(SERIALIZED_NAME_PERMISSION_VERSION)
  private String permissionVersion;

  public static final String SERIALIZED_NAME_POLICIES = "policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  private Map<String, List<Policy>> policies = new HashMap<>();

  public static final String SERIALIZED_NAME_PUSH_NOTIFICATIONS = "push_notifications";
  @SerializedName(SERIALIZED_NAME_PUSH_NOTIFICATIONS)
  private PushNotificationFields pushNotifications;

  public static final String SERIALIZED_NAME_REMINDERS_INTERVAL = "reminders_interval";
  @SerializedName(SERIALIZED_NAME_REMINDERS_INTERVAL)
  private Integer remindersInterval;

  public static final String SERIALIZED_NAME_REVOKE_TOKENS_ISSUED_BEFORE = "revoke_tokens_issued_before";
  @SerializedName(SERIALIZED_NAME_REVOKE_TOKENS_ISSUED_BEFORE)
  private OffsetDateTime revokeTokensIssuedBefore;

  /**
   * Backend implementation used for search
   */
  @JsonAdapter(SearchBackendEnum.Adapter.class)
  public enum SearchBackendEnum {
    ELASTICSEARCH("elasticsearch"),
    
    POSTGRES("postgres"),
    
    DISABLED("disabled");

    private String value;

    SearchBackendEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SearchBackendEnum fromValue(String value) {
      for (SearchBackendEnum b : SearchBackendEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SearchBackendEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SearchBackendEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SearchBackendEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SearchBackendEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SearchBackendEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEARCH_BACKEND = "search_backend";
  @SerializedName(SERIALIZED_NAME_SEARCH_BACKEND)
  private SearchBackendEnum searchBackend;

  public static final String SERIALIZED_NAME_SQS_KEY = "sqs_key";
  @SerializedName(SERIALIZED_NAME_SQS_KEY)
  private String sqsKey;

  public static final String SERIALIZED_NAME_SQS_SECRET = "sqs_secret";
  @SerializedName(SERIALIZED_NAME_SQS_SECRET)
  private String sqsSecret;

  public static final String SERIALIZED_NAME_SQS_URL = "sqs_url";
  @SerializedName(SERIALIZED_NAME_SQS_URL)
  private String sqsUrl;

  public static final String SERIALIZED_NAME_SUSPENDED = "suspended";
  @SerializedName(SERIALIZED_NAME_SUSPENDED)
  private Boolean suspended;

  public static final String SERIALIZED_NAME_SUSPENDED_EXPLANATION = "suspended_explanation";
  @SerializedName(SERIALIZED_NAME_SUSPENDED_EXPLANATION)
  private String suspendedExplanation;

  public static final String SERIALIZED_NAME_USER_SEARCH_DISALLOWED_ROLES = "user_search_disallowed_roles";
  @SerializedName(SERIALIZED_NAME_USER_SEARCH_DISALLOWED_ROLES)
  private List<String> userSearchDisallowedRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIDEO_PROVIDER = "video_provider";
  @SerializedName(SERIALIZED_NAME_VIDEO_PROVIDER)
  private String videoProvider;

  public static final String SERIALIZED_NAME_WEBHOOK_EVENTS = "webhook_events";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_EVENTS)
  private List<String> webhookEvents = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEBHOOK_URL = "webhook_url";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_URL)
  private String webhookUrl;

  public App() {
  }

  public App agoraOptions(Config agoraOptions) {
    this.agoraOptions = agoraOptions;
    return this;
  }

  /**
   * Get agoraOptions
   * @return agoraOptions
   */
  @javax.annotation.Nullable
  public Config getAgoraOptions() {
    return agoraOptions;
  }

  public void setAgoraOptions(Config agoraOptions) {
    this.agoraOptions = agoraOptions;
  }


  public App asyncUrlEnrichEnabled(Boolean asyncUrlEnrichEnabled) {
    this.asyncUrlEnrichEnabled = asyncUrlEnrichEnabled;
    return this;
  }

  /**
   * Get asyncUrlEnrichEnabled
   * @return asyncUrlEnrichEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getAsyncUrlEnrichEnabled() {
    return asyncUrlEnrichEnabled;
  }

  public void setAsyncUrlEnrichEnabled(Boolean asyncUrlEnrichEnabled) {
    this.asyncUrlEnrichEnabled = asyncUrlEnrichEnabled;
  }


  public App autoTranslationEnabled(Boolean autoTranslationEnabled) {
    this.autoTranslationEnabled = autoTranslationEnabled;
    return this;
  }

  /**
   * Get autoTranslationEnabled
   * @return autoTranslationEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAutoTranslationEnabled() {
    return autoTranslationEnabled;
  }

  public void setAutoTranslationEnabled(Boolean autoTranslationEnabled) {
    this.autoTranslationEnabled = autoTranslationEnabled;
  }


  public App beforeMessageSendHookUrl(String beforeMessageSendHookUrl) {
    this.beforeMessageSendHookUrl = beforeMessageSendHookUrl;
    return this;
  }

  /**
   * Get beforeMessageSendHookUrl
   * @return beforeMessageSendHookUrl
   */
  @javax.annotation.Nullable
  public String getBeforeMessageSendHookUrl() {
    return beforeMessageSendHookUrl;
  }

  public void setBeforeMessageSendHookUrl(String beforeMessageSendHookUrl) {
    this.beforeMessageSendHookUrl = beforeMessageSendHookUrl;
  }


  public App callTypes(Map<String, CallType> callTypes) {
    this.callTypes = callTypes;
    return this;
  }

  public App putCallTypesItem(String key, CallType callTypesItem) {
    if (this.callTypes == null) {
      this.callTypes = new HashMap<>();
    }
    this.callTypes.put(key, callTypesItem);
    return this;
  }

  /**
   * Get callTypes
   * @return callTypes
   */
  @javax.annotation.Nonnull
  public Map<String, CallType> getCallTypes() {
    return callTypes;
  }

  public void setCallTypes(Map<String, CallType> callTypes) {
    this.callTypes = callTypes;
  }


  public App campaignEnabled(Boolean campaignEnabled) {
    this.campaignEnabled = campaignEnabled;
    return this;
  }

  /**
   * Get campaignEnabled
   * @return campaignEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getCampaignEnabled() {
    return campaignEnabled;
  }

  public void setCampaignEnabled(Boolean campaignEnabled) {
    this.campaignEnabled = campaignEnabled;
  }


  public App cdnExpirationSeconds(Integer cdnExpirationSeconds) {
    this.cdnExpirationSeconds = cdnExpirationSeconds;
    return this;
  }

  /**
   * Get cdnExpirationSeconds
   * @return cdnExpirationSeconds
   */
  @javax.annotation.Nonnull
  public Integer getCdnExpirationSeconds() {
    return cdnExpirationSeconds;
  }

  public void setCdnExpirationSeconds(Integer cdnExpirationSeconds) {
    this.cdnExpirationSeconds = cdnExpirationSeconds;
  }


  public App channelConfigs(Map<String, ChannelConfig> channelConfigs) {
    this.channelConfigs = channelConfigs;
    return this;
  }

  public App putChannelConfigsItem(String key, ChannelConfig channelConfigsItem) {
    if (this.channelConfigs == null) {
      this.channelConfigs = new HashMap<>();
    }
    this.channelConfigs.put(key, channelConfigsItem);
    return this;
  }

  /**
   * Object with channel configs
   * @return channelConfigs
   */
  @javax.annotation.Nonnull
  public Map<String, ChannelConfig> getChannelConfigs() {
    return channelConfigs;
  }

  public void setChannelConfigs(Map<String, ChannelConfig> channelConfigs) {
    this.channelConfigs = channelConfigs;
  }


  public App customActionHandlerUrl(String customActionHandlerUrl) {
    this.customActionHandlerUrl = customActionHandlerUrl;
    return this;
  }

  /**
   * Get customActionHandlerUrl
   * @return customActionHandlerUrl
   */
  @javax.annotation.Nonnull
  public String getCustomActionHandlerUrl() {
    return customActionHandlerUrl;
  }

  public void setCustomActionHandlerUrl(String customActionHandlerUrl) {
    this.customActionHandlerUrl = customActionHandlerUrl;
  }


  public App disableAuthChecks(Boolean disableAuthChecks) {
    this.disableAuthChecks = disableAuthChecks;
    return this;
  }

  /**
   * Get disableAuthChecks
   * @return disableAuthChecks
   */
  @javax.annotation.Nonnull
  public Boolean getDisableAuthChecks() {
    return disableAuthChecks;
  }

  public void setDisableAuthChecks(Boolean disableAuthChecks) {
    this.disableAuthChecks = disableAuthChecks;
  }


  public App disablePermissionsChecks(Boolean disablePermissionsChecks) {
    this.disablePermissionsChecks = disablePermissionsChecks;
    return this;
  }

  /**
   * Get disablePermissionsChecks
   * @return disablePermissionsChecks
   */
  @javax.annotation.Nonnull
  public Boolean getDisablePermissionsChecks() {
    return disablePermissionsChecks;
  }

  public void setDisablePermissionsChecks(Boolean disablePermissionsChecks) {
    this.disablePermissionsChecks = disablePermissionsChecks;
  }


  public App enforceUniqueUsernames(String enforceUniqueUsernames) {
    this.enforceUniqueUsernames = enforceUniqueUsernames;
    return this;
  }

  /**
   * Get enforceUniqueUsernames
   * @return enforceUniqueUsernames
   */
  @javax.annotation.Nonnull
  public String getEnforceUniqueUsernames() {
    return enforceUniqueUsernames;
  }

  public void setEnforceUniqueUsernames(String enforceUniqueUsernames) {
    this.enforceUniqueUsernames = enforceUniqueUsernames;
  }


  public App fileUploadConfig(FileUploadConfig fileUploadConfig) {
    this.fileUploadConfig = fileUploadConfig;
    return this;
  }

  /**
   * Get fileUploadConfig
   * @return fileUploadConfig
   */
  @javax.annotation.Nonnull
  public FileUploadConfig getFileUploadConfig() {
    return fileUploadConfig;
  }

  public void setFileUploadConfig(FileUploadConfig fileUploadConfig) {
    this.fileUploadConfig = fileUploadConfig;
  }


  public App grants(Map<String, List<String>> grants) {
    this.grants = grants;
    return this;
  }

  public App putGrantsItem(String key, List<String> grantsItem) {
    if (this.grants == null) {
      this.grants = new HashMap<>();
    }
    this.grants.put(key, grantsItem);
    return this;
  }

  /**
   * Get grants
   * @return grants
   */
  @javax.annotation.Nonnull
  public Map<String, List<String>> getGrants() {
    return grants;
  }

  public void setGrants(Map<String, List<String>> grants) {
    this.grants = grants;
  }


  public App hmsOptions(Config hmsOptions) {
    this.hmsOptions = hmsOptions;
    return this;
  }

  /**
   * Get hmsOptions
   * @return hmsOptions
   */
  @javax.annotation.Nullable
  public Config getHmsOptions() {
    return hmsOptions;
  }

  public void setHmsOptions(Config hmsOptions) {
    this.hmsOptions = hmsOptions;
  }


  public App imageModerationEnabled(Boolean imageModerationEnabled) {
    this.imageModerationEnabled = imageModerationEnabled;
    return this;
  }

  /**
   * Get imageModerationEnabled
   * @return imageModerationEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getImageModerationEnabled() {
    return imageModerationEnabled;
  }

  public void setImageModerationEnabled(Boolean imageModerationEnabled) {
    this.imageModerationEnabled = imageModerationEnabled;
  }


  public App imageModerationLabels(List<String> imageModerationLabels) {
    this.imageModerationLabels = imageModerationLabels;
    return this;
  }

  public App addImageModerationLabelsItem(String imageModerationLabelsItem) {
    if (this.imageModerationLabels == null) {
      this.imageModerationLabels = new ArrayList<>();
    }
    this.imageModerationLabels.add(imageModerationLabelsItem);
    return this;
  }

  /**
   * Get imageModerationLabels
   * @return imageModerationLabels
   */
  @javax.annotation.Nullable
  public List<String> getImageModerationLabels() {
    return imageModerationLabels;
  }

  public void setImageModerationLabels(List<String> imageModerationLabels) {
    this.imageModerationLabels = imageModerationLabels;
  }


  public App imageUploadConfig(FileUploadConfig imageUploadConfig) {
    this.imageUploadConfig = imageUploadConfig;
    return this;
  }

  /**
   * Get imageUploadConfig
   * @return imageUploadConfig
   */
  @javax.annotation.Nonnull
  public FileUploadConfig getImageUploadConfig() {
    return imageUploadConfig;
  }

  public void setImageUploadConfig(FileUploadConfig imageUploadConfig) {
    this.imageUploadConfig = imageUploadConfig;
  }


  public App multiTenantEnabled(Boolean multiTenantEnabled) {
    this.multiTenantEnabled = multiTenantEnabled;
    return this;
  }

  /**
   * Get multiTenantEnabled
   * @return multiTenantEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getMultiTenantEnabled() {
    return multiTenantEnabled;
  }

  public void setMultiTenantEnabled(Boolean multiTenantEnabled) {
    this.multiTenantEnabled = multiTenantEnabled;
  }


  public App name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public App organization(String organization) {
    this.organization = organization;
    return this;
  }

  /**
   * Get organization
   * @return organization
   */
  @javax.annotation.Nonnull
  public String getOrganization() {
    return organization;
  }

  public void setOrganization(String organization) {
    this.organization = organization;
  }


  public App permissionVersion(String permissionVersion) {
    this.permissionVersion = permissionVersion;
    return this;
  }

  /**
   * Get permissionVersion
   * @return permissionVersion
   */
  @javax.annotation.Nonnull
  public String getPermissionVersion() {
    return permissionVersion;
  }

  public void setPermissionVersion(String permissionVersion) {
    this.permissionVersion = permissionVersion;
  }


  public App policies(Map<String, List<Policy>> policies) {
    this.policies = policies;
    return this;
  }

  public App putPoliciesItem(String key, List<Policy> policiesItem) {
    if (this.policies == null) {
      this.policies = new HashMap<>();
    }
    this.policies.put(key, policiesItem);
    return this;
  }

  /**
   * Get policies
   * @return policies
   */
  @javax.annotation.Nonnull
  public Map<String, List<Policy>> getPolicies() {
    return policies;
  }

  public void setPolicies(Map<String, List<Policy>> policies) {
    this.policies = policies;
  }


  public App pushNotifications(PushNotificationFields pushNotifications) {
    this.pushNotifications = pushNotifications;
    return this;
  }

  /**
   * Get pushNotifications
   * @return pushNotifications
   */
  @javax.annotation.Nonnull
  public PushNotificationFields getPushNotifications() {
    return pushNotifications;
  }

  public void setPushNotifications(PushNotificationFields pushNotifications) {
    this.pushNotifications = pushNotifications;
  }


  public App remindersInterval(Integer remindersInterval) {
    this.remindersInterval = remindersInterval;
    return this;
  }

  /**
   * Get remindersInterval
   * @return remindersInterval
   */
  @javax.annotation.Nonnull
  public Integer getRemindersInterval() {
    return remindersInterval;
  }

  public void setRemindersInterval(Integer remindersInterval) {
    this.remindersInterval = remindersInterval;
  }


  public App revokeTokensIssuedBefore(OffsetDateTime revokeTokensIssuedBefore) {
    this.revokeTokensIssuedBefore = revokeTokensIssuedBefore;
    return this;
  }

  /**
   * Get revokeTokensIssuedBefore
   * @return revokeTokensIssuedBefore
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRevokeTokensIssuedBefore() {
    return revokeTokensIssuedBefore;
  }

  public void setRevokeTokensIssuedBefore(OffsetDateTime revokeTokensIssuedBefore) {
    this.revokeTokensIssuedBefore = revokeTokensIssuedBefore;
  }


  public App searchBackend(SearchBackendEnum searchBackend) {
    this.searchBackend = searchBackend;
    return this;
  }

  /**
   * Backend implementation used for search
   * @return searchBackend
   */
  @javax.annotation.Nonnull
  public SearchBackendEnum getSearchBackend() {
    return searchBackend;
  }

  public void setSearchBackend(SearchBackendEnum searchBackend) {
    this.searchBackend = searchBackend;
  }


  public App sqsKey(String sqsKey) {
    this.sqsKey = sqsKey;
    return this;
  }

  /**
   * Get sqsKey
   * @return sqsKey
   */
  @javax.annotation.Nonnull
  public String getSqsKey() {
    return sqsKey;
  }

  public void setSqsKey(String sqsKey) {
    this.sqsKey = sqsKey;
  }


  public App sqsSecret(String sqsSecret) {
    this.sqsSecret = sqsSecret;
    return this;
  }

  /**
   * Get sqsSecret
   * @return sqsSecret
   */
  @javax.annotation.Nonnull
  public String getSqsSecret() {
    return sqsSecret;
  }

  public void setSqsSecret(String sqsSecret) {
    this.sqsSecret = sqsSecret;
  }


  public App sqsUrl(String sqsUrl) {
    this.sqsUrl = sqsUrl;
    return this;
  }

  /**
   * Get sqsUrl
   * @return sqsUrl
   */
  @javax.annotation.Nonnull
  public String getSqsUrl() {
    return sqsUrl;
  }

  public void setSqsUrl(String sqsUrl) {
    this.sqsUrl = sqsUrl;
  }


  public App suspended(Boolean suspended) {
    this.suspended = suspended;
    return this;
  }

  /**
   * Get suspended
   * @return suspended
   */
  @javax.annotation.Nonnull
  public Boolean getSuspended() {
    return suspended;
  }

  public void setSuspended(Boolean suspended) {
    this.suspended = suspended;
  }


  public App suspendedExplanation(String suspendedExplanation) {
    this.suspendedExplanation = suspendedExplanation;
    return this;
  }

  /**
   * Get suspendedExplanation
   * @return suspendedExplanation
   */
  @javax.annotation.Nonnull
  public String getSuspendedExplanation() {
    return suspendedExplanation;
  }

  public void setSuspendedExplanation(String suspendedExplanation) {
    this.suspendedExplanation = suspendedExplanation;
  }


  public App userSearchDisallowedRoles(List<String> userSearchDisallowedRoles) {
    this.userSearchDisallowedRoles = userSearchDisallowedRoles;
    return this;
  }

  public App addUserSearchDisallowedRolesItem(String userSearchDisallowedRolesItem) {
    if (this.userSearchDisallowedRoles == null) {
      this.userSearchDisallowedRoles = new ArrayList<>();
    }
    this.userSearchDisallowedRoles.add(userSearchDisallowedRolesItem);
    return this;
  }

  /**
   * Get userSearchDisallowedRoles
   * @return userSearchDisallowedRoles
   */
  @javax.annotation.Nonnull
  public List<String> getUserSearchDisallowedRoles() {
    return userSearchDisallowedRoles;
  }

  public void setUserSearchDisallowedRoles(List<String> userSearchDisallowedRoles) {
    this.userSearchDisallowedRoles = userSearchDisallowedRoles;
  }


  public App videoProvider(String videoProvider) {
    this.videoProvider = videoProvider;
    return this;
  }

  /**
   * Get videoProvider
   * @return videoProvider
   */
  @javax.annotation.Nonnull
  public String getVideoProvider() {
    return videoProvider;
  }

  public void setVideoProvider(String videoProvider) {
    this.videoProvider = videoProvider;
  }


  public App webhookEvents(List<String> webhookEvents) {
    this.webhookEvents = webhookEvents;
    return this;
  }

  public App addWebhookEventsItem(String webhookEventsItem) {
    if (this.webhookEvents == null) {
      this.webhookEvents = new ArrayList<>();
    }
    this.webhookEvents.add(webhookEventsItem);
    return this;
  }

  /**
   * Get webhookEvents
   * @return webhookEvents
   */
  @javax.annotation.Nonnull
  public List<String> getWebhookEvents() {
    return webhookEvents;
  }

  public void setWebhookEvents(List<String> webhookEvents) {
    this.webhookEvents = webhookEvents;
  }


  public App webhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
    return this;
  }

  /**
   * Get webhookUrl
   * @return webhookUrl
   */
  @javax.annotation.Nonnull
  public String getWebhookUrl() {
    return webhookUrl;
  }

  public void setWebhookUrl(String webhookUrl) {
    this.webhookUrl = webhookUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    App app = (App) o;
    return Objects.equals(this.agoraOptions, app.agoraOptions) &&
        Objects.equals(this.asyncUrlEnrichEnabled, app.asyncUrlEnrichEnabled) &&
        Objects.equals(this.autoTranslationEnabled, app.autoTranslationEnabled) &&
        Objects.equals(this.beforeMessageSendHookUrl, app.beforeMessageSendHookUrl) &&
        Objects.equals(this.callTypes, app.callTypes) &&
        Objects.equals(this.campaignEnabled, app.campaignEnabled) &&
        Objects.equals(this.cdnExpirationSeconds, app.cdnExpirationSeconds) &&
        Objects.equals(this.channelConfigs, app.channelConfigs) &&
        Objects.equals(this.customActionHandlerUrl, app.customActionHandlerUrl) &&
        Objects.equals(this.disableAuthChecks, app.disableAuthChecks) &&
        Objects.equals(this.disablePermissionsChecks, app.disablePermissionsChecks) &&
        Objects.equals(this.enforceUniqueUsernames, app.enforceUniqueUsernames) &&
        Objects.equals(this.fileUploadConfig, app.fileUploadConfig) &&
        Objects.equals(this.grants, app.grants) &&
        Objects.equals(this.hmsOptions, app.hmsOptions) &&
        Objects.equals(this.imageModerationEnabled, app.imageModerationEnabled) &&
        Objects.equals(this.imageModerationLabels, app.imageModerationLabels) &&
        Objects.equals(this.imageUploadConfig, app.imageUploadConfig) &&
        Objects.equals(this.multiTenantEnabled, app.multiTenantEnabled) &&
        Objects.equals(this.name, app.name) &&
        Objects.equals(this.organization, app.organization) &&
        Objects.equals(this.permissionVersion, app.permissionVersion) &&
        Objects.equals(this.policies, app.policies) &&
        Objects.equals(this.pushNotifications, app.pushNotifications) &&
        Objects.equals(this.remindersInterval, app.remindersInterval) &&
        Objects.equals(this.revokeTokensIssuedBefore, app.revokeTokensIssuedBefore) &&
        Objects.equals(this.searchBackend, app.searchBackend) &&
        Objects.equals(this.sqsKey, app.sqsKey) &&
        Objects.equals(this.sqsSecret, app.sqsSecret) &&
        Objects.equals(this.sqsUrl, app.sqsUrl) &&
        Objects.equals(this.suspended, app.suspended) &&
        Objects.equals(this.suspendedExplanation, app.suspendedExplanation) &&
        Objects.equals(this.userSearchDisallowedRoles, app.userSearchDisallowedRoles) &&
        Objects.equals(this.videoProvider, app.videoProvider) &&
        Objects.equals(this.webhookEvents, app.webhookEvents) &&
        Objects.equals(this.webhookUrl, app.webhookUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agoraOptions, asyncUrlEnrichEnabled, autoTranslationEnabled, beforeMessageSendHookUrl, callTypes, campaignEnabled, cdnExpirationSeconds, channelConfigs, customActionHandlerUrl, disableAuthChecks, disablePermissionsChecks, enforceUniqueUsernames, fileUploadConfig, grants, hmsOptions, imageModerationEnabled, imageModerationLabels, imageUploadConfig, multiTenantEnabled, name, organization, permissionVersion, policies, pushNotifications, remindersInterval, revokeTokensIssuedBefore, searchBackend, sqsKey, sqsSecret, sqsUrl, suspended, suspendedExplanation, userSearchDisallowedRoles, videoProvider, webhookEvents, webhookUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class App {\n");
    sb.append("    agoraOptions: ").append(toIndentedString(agoraOptions)).append("\n");
    sb.append("    asyncUrlEnrichEnabled: ").append(toIndentedString(asyncUrlEnrichEnabled)).append("\n");
    sb.append("    autoTranslationEnabled: ").append(toIndentedString(autoTranslationEnabled)).append("\n");
    sb.append("    beforeMessageSendHookUrl: ").append(toIndentedString(beforeMessageSendHookUrl)).append("\n");
    sb.append("    callTypes: ").append(toIndentedString(callTypes)).append("\n");
    sb.append("    campaignEnabled: ").append(toIndentedString(campaignEnabled)).append("\n");
    sb.append("    cdnExpirationSeconds: ").append(toIndentedString(cdnExpirationSeconds)).append("\n");
    sb.append("    channelConfigs: ").append(toIndentedString(channelConfigs)).append("\n");
    sb.append("    customActionHandlerUrl: ").append(toIndentedString(customActionHandlerUrl)).append("\n");
    sb.append("    disableAuthChecks: ").append(toIndentedString(disableAuthChecks)).append("\n");
    sb.append("    disablePermissionsChecks: ").append(toIndentedString(disablePermissionsChecks)).append("\n");
    sb.append("    enforceUniqueUsernames: ").append(toIndentedString(enforceUniqueUsernames)).append("\n");
    sb.append("    fileUploadConfig: ").append(toIndentedString(fileUploadConfig)).append("\n");
    sb.append("    grants: ").append(toIndentedString(grants)).append("\n");
    sb.append("    hmsOptions: ").append(toIndentedString(hmsOptions)).append("\n");
    sb.append("    imageModerationEnabled: ").append(toIndentedString(imageModerationEnabled)).append("\n");
    sb.append("    imageModerationLabels: ").append(toIndentedString(imageModerationLabels)).append("\n");
    sb.append("    imageUploadConfig: ").append(toIndentedString(imageUploadConfig)).append("\n");
    sb.append("    multiTenantEnabled: ").append(toIndentedString(multiTenantEnabled)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    permissionVersion: ").append(toIndentedString(permissionVersion)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    pushNotifications: ").append(toIndentedString(pushNotifications)).append("\n");
    sb.append("    remindersInterval: ").append(toIndentedString(remindersInterval)).append("\n");
    sb.append("    revokeTokensIssuedBefore: ").append(toIndentedString(revokeTokensIssuedBefore)).append("\n");
    sb.append("    searchBackend: ").append(toIndentedString(searchBackend)).append("\n");
    sb.append("    sqsKey: ").append(toIndentedString(sqsKey)).append("\n");
    sb.append("    sqsSecret: ").append(toIndentedString(sqsSecret)).append("\n");
    sb.append("    sqsUrl: ").append(toIndentedString(sqsUrl)).append("\n");
    sb.append("    suspended: ").append(toIndentedString(suspended)).append("\n");
    sb.append("    suspendedExplanation: ").append(toIndentedString(suspendedExplanation)).append("\n");
    sb.append("    userSearchDisallowedRoles: ").append(toIndentedString(userSearchDisallowedRoles)).append("\n");
    sb.append("    videoProvider: ").append(toIndentedString(videoProvider)).append("\n");
    sb.append("    webhookEvents: ").append(toIndentedString(webhookEvents)).append("\n");
    sb.append("    webhookUrl: ").append(toIndentedString(webhookUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agora_options");
    openapiFields.add("async_url_enrich_enabled");
    openapiFields.add("auto_translation_enabled");
    openapiFields.add("before_message_send_hook_url");
    openapiFields.add("call_types");
    openapiFields.add("campaign_enabled");
    openapiFields.add("cdn_expiration_seconds");
    openapiFields.add("channel_configs");
    openapiFields.add("custom_action_handler_url");
    openapiFields.add("disable_auth_checks");
    openapiFields.add("disable_permissions_checks");
    openapiFields.add("enforce_unique_usernames");
    openapiFields.add("file_upload_config");
    openapiFields.add("grants");
    openapiFields.add("hms_options");
    openapiFields.add("image_moderation_enabled");
    openapiFields.add("image_moderation_labels");
    openapiFields.add("image_upload_config");
    openapiFields.add("multi_tenant_enabled");
    openapiFields.add("name");
    openapiFields.add("organization");
    openapiFields.add("permission_version");
    openapiFields.add("policies");
    openapiFields.add("push_notifications");
    openapiFields.add("reminders_interval");
    openapiFields.add("revoke_tokens_issued_before");
    openapiFields.add("search_backend");
    openapiFields.add("sqs_key");
    openapiFields.add("sqs_secret");
    openapiFields.add("sqs_url");
    openapiFields.add("suspended");
    openapiFields.add("suspended_explanation");
    openapiFields.add("user_search_disallowed_roles");
    openapiFields.add("video_provider");
    openapiFields.add("webhook_events");
    openapiFields.add("webhook_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("async_url_enrich_enabled");
    openapiRequiredFields.add("call_types");
    openapiRequiredFields.add("campaign_enabled");
    openapiRequiredFields.add("cdn_expiration_seconds");
    openapiRequiredFields.add("channel_configs");
    openapiRequiredFields.add("custom_action_handler_url");
    openapiRequiredFields.add("disable_auth_checks");
    openapiRequiredFields.add("disable_permissions_checks");
    openapiRequiredFields.add("enforce_unique_usernames");
    openapiRequiredFields.add("file_upload_config");
    openapiRequiredFields.add("grants");
    openapiRequiredFields.add("image_moderation_enabled");
    openapiRequiredFields.add("image_upload_config");
    openapiRequiredFields.add("multi_tenant_enabled");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("organization");
    openapiRequiredFields.add("permission_version");
    openapiRequiredFields.add("policies");
    openapiRequiredFields.add("push_notifications");
    openapiRequiredFields.add("reminders_interval");
    openapiRequiredFields.add("search_backend");
    openapiRequiredFields.add("sqs_key");
    openapiRequiredFields.add("sqs_secret");
    openapiRequiredFields.add("sqs_url");
    openapiRequiredFields.add("suspended");
    openapiRequiredFields.add("suspended_explanation");
    openapiRequiredFields.add("user_search_disallowed_roles");
    openapiRequiredFields.add("video_provider");
    openapiRequiredFields.add("webhook_events");
    openapiRequiredFields.add("webhook_url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to App
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!App.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in App is not found in the empty JSON string", App.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!App.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `App` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : App.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `agora_options`
      if (jsonObj.get("agora_options") != null && !jsonObj.get("agora_options").isJsonNull()) {
        Config.validateJsonElement(jsonObj.get("agora_options"));
      }
      if ((jsonObj.get("before_message_send_hook_url") != null && !jsonObj.get("before_message_send_hook_url").isJsonNull()) && !jsonObj.get("before_message_send_hook_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `before_message_send_hook_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("before_message_send_hook_url").toString()));
      }
      if (!jsonObj.get("custom_action_handler_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_action_handler_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_action_handler_url").toString()));
      }
      if (!jsonObj.get("enforce_unique_usernames").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enforce_unique_usernames` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enforce_unique_usernames").toString()));
      }
      // validate the required field `file_upload_config`
      FileUploadConfig.validateJsonElement(jsonObj.get("file_upload_config"));
      // validate the optional field `hms_options`
      if (jsonObj.get("hms_options") != null && !jsonObj.get("hms_options").isJsonNull()) {
        Config.validateJsonElement(jsonObj.get("hms_options"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("image_moderation_labels") != null && !jsonObj.get("image_moderation_labels").isJsonNull() && !jsonObj.get("image_moderation_labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_moderation_labels` to be an array in the JSON string but got `%s`", jsonObj.get("image_moderation_labels").toString()));
      }
      // validate the required field `image_upload_config`
      FileUploadConfig.validateJsonElement(jsonObj.get("image_upload_config"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization").toString()));
      }
      if (!jsonObj.get("permission_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permission_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permission_version").toString()));
      }
      // validate the required field `push_notifications`
      PushNotificationFields.validateJsonElement(jsonObj.get("push_notifications"));
      if (!jsonObj.get("search_backend").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search_backend` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search_backend").toString()));
      }
      // validate the required field `search_backend`
      SearchBackendEnum.validateJsonElement(jsonObj.get("search_backend"));
      if (!jsonObj.get("sqs_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqs_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqs_key").toString()));
      }
      if (!jsonObj.get("sqs_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqs_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqs_secret").toString()));
      }
      if (!jsonObj.get("sqs_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqs_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqs_url").toString()));
      }
      if (!jsonObj.get("suspended_explanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `suspended_explanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("suspended_explanation").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("user_search_disallowed_roles") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("user_search_disallowed_roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_search_disallowed_roles` to be an array in the JSON string but got `%s`", jsonObj.get("user_search_disallowed_roles").toString()));
      }
      if (!jsonObj.get("video_provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `video_provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("video_provider").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("webhook_events") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("webhook_events").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhook_events` to be an array in the JSON string but got `%s`", jsonObj.get("webhook_events").toString()));
      }
      if (!jsonObj.get("webhook_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhook_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhook_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!App.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'App' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<App> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(App.class));

       return (TypeAdapter<T>) new TypeAdapter<App>() {
           @Override
           public void write(JsonWriter out, App value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public App read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of App given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of App
   * @throws IOException if the JSON string is invalid with respect to App
   */
  public static App fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, App.class);
  }

  /**
   * Convert an instance of App to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

