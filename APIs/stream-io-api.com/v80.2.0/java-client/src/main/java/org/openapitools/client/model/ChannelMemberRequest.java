/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.UserObjectRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChannelMemberRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelMemberRequest {
  public static final String SERIALIZED_NAME_BAN_EXPIRES = "ban_expires";
  @SerializedName(SERIALIZED_NAME_BAN_EXPIRES)
  private OffsetDateTime banExpires;

  public static final String SERIALIZED_NAME_BANNED = "banned";
  @SerializedName(SERIALIZED_NAME_BANNED)
  private Boolean banned;

  public static final String SERIALIZED_NAME_CHANNEL_ROLE = "channel_role";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ROLE)
  private String channelRole;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DELETED_AT = "deleted_at";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private OffsetDateTime deletedAt;

  public static final String SERIALIZED_NAME_INVITE_ACCEPTED_AT = "invite_accepted_at";
  @SerializedName(SERIALIZED_NAME_INVITE_ACCEPTED_AT)
  private OffsetDateTime inviteAcceptedAt;

  public static final String SERIALIZED_NAME_INVITE_REJECTED_AT = "invite_rejected_at";
  @SerializedName(SERIALIZED_NAME_INVITE_REJECTED_AT)
  private OffsetDateTime inviteRejectedAt;

  public static final String SERIALIZED_NAME_INVITED = "invited";
  @SerializedName(SERIALIZED_NAME_INVITED)
  private Boolean invited;

  public static final String SERIALIZED_NAME_IS_MODERATOR = "is_moderator";
  @SerializedName(SERIALIZED_NAME_IS_MODERATOR)
  private Boolean isModerator;

  /**
   * Permission level of the member in the channel (DEPRECATED: use channel_role instead)
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    MEMBER("member"),
    
    MODERATOR("moderator"),
    
    ADMIN("admin"),
    
    OWNER("owner");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleEnum role;

  public static final String SERIALIZED_NAME_SHADOW_BANNED = "shadow_banned";
  @SerializedName(SERIALIZED_NAME_SHADOW_BANNED)
  private Boolean shadowBanned;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserObjectRequest user;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public ChannelMemberRequest() {
  }

  public ChannelMemberRequest banExpires(OffsetDateTime banExpires) {
    this.banExpires = banExpires;
    return this;
  }

  /**
   * Expiration date of the ban
   * @return banExpires
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBanExpires() {
    return banExpires;
  }

  public void setBanExpires(OffsetDateTime banExpires) {
    this.banExpires = banExpires;
  }


  public ChannelMemberRequest banned(Boolean banned) {
    this.banned = banned;
    return this;
  }

  /**
   * Whether member is banned this channel or not
   * @return banned
   */
  @javax.annotation.Nullable
  public Boolean getBanned() {
    return banned;
  }

  public void setBanned(Boolean banned) {
    this.banned = banned;
  }


  public ChannelMemberRequest channelRole(String channelRole) {
    this.channelRole = channelRole;
    return this;
  }

  /**
   * Role of the member in the channel
   * @return channelRole
   */
  @javax.annotation.Nullable
  public String getChannelRole() {
    return channelRole;
  }

  public void setChannelRole(String channelRole) {
    this.channelRole = channelRole;
  }


  public ChannelMemberRequest createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Date/time of creation
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ChannelMemberRequest deletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
    return this;
  }

  /**
   * Get deletedAt
   * @return deletedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletedAt() {
    return deletedAt;
  }

  public void setDeletedAt(OffsetDateTime deletedAt) {
    this.deletedAt = deletedAt;
  }


  public ChannelMemberRequest inviteAcceptedAt(OffsetDateTime inviteAcceptedAt) {
    this.inviteAcceptedAt = inviteAcceptedAt;
    return this;
  }

  /**
   * Date when invite was accepted
   * @return inviteAcceptedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInviteAcceptedAt() {
    return inviteAcceptedAt;
  }

  public void setInviteAcceptedAt(OffsetDateTime inviteAcceptedAt) {
    this.inviteAcceptedAt = inviteAcceptedAt;
  }


  public ChannelMemberRequest inviteRejectedAt(OffsetDateTime inviteRejectedAt) {
    this.inviteRejectedAt = inviteRejectedAt;
    return this;
  }

  /**
   * Date when invite was rejected
   * @return inviteRejectedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getInviteRejectedAt() {
    return inviteRejectedAt;
  }

  public void setInviteRejectedAt(OffsetDateTime inviteRejectedAt) {
    this.inviteRejectedAt = inviteRejectedAt;
  }


  public ChannelMemberRequest invited(Boolean invited) {
    this.invited = invited;
    return this;
  }

  /**
   * Whether member was invited or not
   * @return invited
   */
  @javax.annotation.Nullable
  public Boolean getInvited() {
    return invited;
  }

  public void setInvited(Boolean invited) {
    this.invited = invited;
  }


  public ChannelMemberRequest isModerator(Boolean isModerator) {
    this.isModerator = isModerator;
    return this;
  }

  /**
   * Whether member is channel moderator or not
   * @return isModerator
   */
  @javax.annotation.Nullable
  public Boolean getIsModerator() {
    return isModerator;
  }

  public void setIsModerator(Boolean isModerator) {
    this.isModerator = isModerator;
  }


  public ChannelMemberRequest role(RoleEnum role) {
    this.role = role;
    return this;
  }

  /**
   * Permission level of the member in the channel (DEPRECATED: use channel_role instead)
   * @return role
   */
  @javax.annotation.Nullable
  public RoleEnum getRole() {
    return role;
  }

  public void setRole(RoleEnum role) {
    this.role = role;
  }


  public ChannelMemberRequest shadowBanned(Boolean shadowBanned) {
    this.shadowBanned = shadowBanned;
    return this;
  }

  /**
   * Whether member is shadow banned in this channel or not
   * @return shadowBanned
   */
  @javax.annotation.Nullable
  public Boolean getShadowBanned() {
    return shadowBanned;
  }

  public void setShadowBanned(Boolean shadowBanned) {
    this.shadowBanned = shadowBanned;
  }


  public ChannelMemberRequest updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Date/time of the last update
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public ChannelMemberRequest user(UserObjectRequest user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserObjectRequest getUser() {
    return user;
  }

  public void setUser(UserObjectRequest user) {
    this.user = user;
  }


  public ChannelMemberRequest userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelMemberRequest channelMemberRequest = (ChannelMemberRequest) o;
    return Objects.equals(this.banExpires, channelMemberRequest.banExpires) &&
        Objects.equals(this.banned, channelMemberRequest.banned) &&
        Objects.equals(this.channelRole, channelMemberRequest.channelRole) &&
        Objects.equals(this.createdAt, channelMemberRequest.createdAt) &&
        Objects.equals(this.deletedAt, channelMemberRequest.deletedAt) &&
        Objects.equals(this.inviteAcceptedAt, channelMemberRequest.inviteAcceptedAt) &&
        Objects.equals(this.inviteRejectedAt, channelMemberRequest.inviteRejectedAt) &&
        Objects.equals(this.invited, channelMemberRequest.invited) &&
        Objects.equals(this.isModerator, channelMemberRequest.isModerator) &&
        Objects.equals(this.role, channelMemberRequest.role) &&
        Objects.equals(this.shadowBanned, channelMemberRequest.shadowBanned) &&
        Objects.equals(this.updatedAt, channelMemberRequest.updatedAt) &&
        Objects.equals(this.user, channelMemberRequest.user) &&
        Objects.equals(this.userId, channelMemberRequest.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(banExpires, banned, channelRole, createdAt, deletedAt, inviteAcceptedAt, inviteRejectedAt, invited, isModerator, role, shadowBanned, updatedAt, user, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelMemberRequest {\n");
    sb.append("    banExpires: ").append(toIndentedString(banExpires)).append("\n");
    sb.append("    banned: ").append(toIndentedString(banned)).append("\n");
    sb.append("    channelRole: ").append(toIndentedString(channelRole)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    inviteAcceptedAt: ").append(toIndentedString(inviteAcceptedAt)).append("\n");
    sb.append("    inviteRejectedAt: ").append(toIndentedString(inviteRejectedAt)).append("\n");
    sb.append("    invited: ").append(toIndentedString(invited)).append("\n");
    sb.append("    isModerator: ").append(toIndentedString(isModerator)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    shadowBanned: ").append(toIndentedString(shadowBanned)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ban_expires");
    openapiFields.add("banned");
    openapiFields.add("channel_role");
    openapiFields.add("created_at");
    openapiFields.add("deleted_at");
    openapiFields.add("invite_accepted_at");
    openapiFields.add("invite_rejected_at");
    openapiFields.add("invited");
    openapiFields.add("is_moderator");
    openapiFields.add("role");
    openapiFields.add("shadow_banned");
    openapiFields.add("updated_at");
    openapiFields.add("user");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelMemberRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelMemberRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelMemberRequest is not found in the empty JSON string", ChannelMemberRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelMemberRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelMemberRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("channel_role") != null && !jsonObj.get("channel_role").isJsonNull()) && !jsonObj.get("channel_role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel_role").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // validate the optional field `role`
      if (jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) {
        RoleEnum.validateJsonElement(jsonObj.get("role"));
      }
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelMemberRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelMemberRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelMemberRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelMemberRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelMemberRequest>() {
           @Override
           public void write(JsonWriter out, ChannelMemberRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelMemberRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelMemberRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelMemberRequest
   * @throws IOException if the JSON string is invalid with respect to ChannelMemberRequest
   */
  public static ChannelMemberRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelMemberRequest.class);
  }

  /**
   * Convert an instance of ChannelMemberRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

