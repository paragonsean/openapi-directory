/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeviceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceRequest {
  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_DISABLED = "disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_DISABLED_REASON = "disabled_reason";
  @SerializedName(SERIALIZED_NAME_DISABLED_REASON)
  private String disabledReason;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PUSH_PROVIDER = "push_provider";
  @SerializedName(SERIALIZED_NAME_PUSH_PROVIDER)
  private String pushProvider;

  public static final String SERIALIZED_NAME_PUSH_PROVIDER_NAME = "push_provider_name";
  @SerializedName(SERIALIZED_NAME_PUSH_PROVIDER_NAME)
  private String pushProviderName;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public DeviceRequest() {
  }

  public DeviceRequest createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Date/time of creation
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public DeviceRequest disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Whether device is disabled or not
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public DeviceRequest disabledReason(String disabledReason) {
    this.disabledReason = disabledReason;
    return this;
  }

  /**
   * Reason explaining why device had been disabled
   * @return disabledReason
   */
  @javax.annotation.Nullable
  public String getDisabledReason() {
    return disabledReason;
  }

  public void setDisabledReason(String disabledReason) {
    this.disabledReason = disabledReason;
  }


  public DeviceRequest id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DeviceRequest pushProvider(String pushProvider) {
    this.pushProvider = pushProvider;
    return this;
  }

  /**
   * Get pushProvider
   * @return pushProvider
   */
  @javax.annotation.Nullable
  public String getPushProvider() {
    return pushProvider;
  }

  public void setPushProvider(String pushProvider) {
    this.pushProvider = pushProvider;
  }


  public DeviceRequest pushProviderName(String pushProviderName) {
    this.pushProviderName = pushProviderName;
    return this;
  }

  /**
   * Get pushProviderName
   * @return pushProviderName
   */
  @javax.annotation.Nullable
  public String getPushProviderName() {
    return pushProviderName;
  }

  public void setPushProviderName(String pushProviderName) {
    this.pushProviderName = pushProviderName;
  }


  public DeviceRequest userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceRequest deviceRequest = (DeviceRequest) o;
    return Objects.equals(this.createdAt, deviceRequest.createdAt) &&
        Objects.equals(this.disabled, deviceRequest.disabled) &&
        Objects.equals(this.disabledReason, deviceRequest.disabledReason) &&
        Objects.equals(this.id, deviceRequest.id) &&
        Objects.equals(this.pushProvider, deviceRequest.pushProvider) &&
        Objects.equals(this.pushProviderName, deviceRequest.pushProviderName) &&
        Objects.equals(this.userId, deviceRequest.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, disabled, disabledReason, id, pushProvider, pushProviderName, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceRequest {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    disabledReason: ").append(toIndentedString(disabledReason)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    pushProvider: ").append(toIndentedString(pushProvider)).append("\n");
    sb.append("    pushProviderName: ").append(toIndentedString(pushProviderName)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("created_at");
    openapiFields.add("disabled");
    openapiFields.add("disabled_reason");
    openapiFields.add("id");
    openapiFields.add("push_provider");
    openapiFields.add("push_provider_name");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceRequest is not found in the empty JSON string", DeviceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("disabled_reason") != null && !jsonObj.get("disabled_reason").isJsonNull()) && !jsonObj.get("disabled_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disabled_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disabled_reason").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("push_provider") != null && !jsonObj.get("push_provider").isJsonNull()) && !jsonObj.get("push_provider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `push_provider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("push_provider").toString()));
      }
      if ((jsonObj.get("push_provider_name") != null && !jsonObj.get("push_provider_name").isJsonNull()) && !jsonObj.get("push_provider_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `push_provider_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("push_provider_name").toString()));
      }
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceRequest>() {
           @Override
           public void write(JsonWriter out, DeviceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceRequest
   * @throws IOException if the JSON string is invalid with respect to DeviceRequest
   */
  public static DeviceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceRequest.class);
  }

  /**
   * Convert an instance of DeviceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

