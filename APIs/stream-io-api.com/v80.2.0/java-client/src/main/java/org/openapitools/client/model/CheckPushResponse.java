/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.DeviceErrorInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CheckPushResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckPushResponse {
  public static final String SERIALIZED_NAME_DEVICE_ERRORS = "device_errors";
  @SerializedName(SERIALIZED_NAME_DEVICE_ERRORS)
  private Map<String, DeviceErrorInfo> deviceErrors = new HashMap<>();

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_GENERAL_ERRORS = "general_errors";
  @SerializedName(SERIALIZED_NAME_GENERAL_ERRORS)
  private List<String> generalErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_RENDERED_APN_TEMPLATE = "rendered_apn_template";
  @SerializedName(SERIALIZED_NAME_RENDERED_APN_TEMPLATE)
  private String renderedApnTemplate;

  public static final String SERIALIZED_NAME_RENDERED_FIREBASE_TEMPLATE = "rendered_firebase_template";
  @SerializedName(SERIALIZED_NAME_RENDERED_FIREBASE_TEMPLATE)
  private String renderedFirebaseTemplate;

  public static final String SERIALIZED_NAME_RENDERED_MESSAGE = "rendered_message";
  @SerializedName(SERIALIZED_NAME_RENDERED_MESSAGE)
  private Map<String, String> renderedMessage = new HashMap<>();

  public static final String SERIALIZED_NAME_SKIP_DEVICES = "skip_devices";
  @SerializedName(SERIALIZED_NAME_SKIP_DEVICES)
  private Boolean skipDevices;

  public CheckPushResponse() {
  }

  public CheckPushResponse deviceErrors(Map<String, DeviceErrorInfo> deviceErrors) {
    this.deviceErrors = deviceErrors;
    return this;
  }

  public CheckPushResponse putDeviceErrorsItem(String key, DeviceErrorInfo deviceErrorsItem) {
    if (this.deviceErrors == null) {
      this.deviceErrors = new HashMap<>();
    }
    this.deviceErrors.put(key, deviceErrorsItem);
    return this;
  }

  /**
   * Object with device errors
   * @return deviceErrors
   */
  @javax.annotation.Nullable
  public Map<String, DeviceErrorInfo> getDeviceErrors() {
    return deviceErrors;
  }

  public void setDeviceErrors(Map<String, DeviceErrorInfo> deviceErrors) {
    this.deviceErrors = deviceErrors;
  }


  public CheckPushResponse duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Get duration
   * @return duration
   */
  @javax.annotation.Nonnull
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public CheckPushResponse generalErrors(List<String> generalErrors) {
    this.generalErrors = generalErrors;
    return this;
  }

  public CheckPushResponse addGeneralErrorsItem(String generalErrorsItem) {
    if (this.generalErrors == null) {
      this.generalErrors = new ArrayList<>();
    }
    this.generalErrors.add(generalErrorsItem);
    return this;
  }

  /**
   * List of general errors
   * @return generalErrors
   */
  @javax.annotation.Nullable
  public List<String> getGeneralErrors() {
    return generalErrors;
  }

  public void setGeneralErrors(List<String> generalErrors) {
    this.generalErrors = generalErrors;
  }


  public CheckPushResponse renderedApnTemplate(String renderedApnTemplate) {
    this.renderedApnTemplate = renderedApnTemplate;
    return this;
  }

  /**
   * Get renderedApnTemplate
   * @return renderedApnTemplate
   */
  @javax.annotation.Nullable
  public String getRenderedApnTemplate() {
    return renderedApnTemplate;
  }

  public void setRenderedApnTemplate(String renderedApnTemplate) {
    this.renderedApnTemplate = renderedApnTemplate;
  }


  public CheckPushResponse renderedFirebaseTemplate(String renderedFirebaseTemplate) {
    this.renderedFirebaseTemplate = renderedFirebaseTemplate;
    return this;
  }

  /**
   * Get renderedFirebaseTemplate
   * @return renderedFirebaseTemplate
   */
  @javax.annotation.Nullable
  public String getRenderedFirebaseTemplate() {
    return renderedFirebaseTemplate;
  }

  public void setRenderedFirebaseTemplate(String renderedFirebaseTemplate) {
    this.renderedFirebaseTemplate = renderedFirebaseTemplate;
  }


  public CheckPushResponse renderedMessage(Map<String, String> renderedMessage) {
    this.renderedMessage = renderedMessage;
    return this;
  }

  public CheckPushResponse putRenderedMessageItem(String key, String renderedMessageItem) {
    if (this.renderedMessage == null) {
      this.renderedMessage = new HashMap<>();
    }
    this.renderedMessage.put(key, renderedMessageItem);
    return this;
  }

  /**
   * Get renderedMessage
   * @return renderedMessage
   */
  @javax.annotation.Nullable
  public Map<String, String> getRenderedMessage() {
    return renderedMessage;
  }

  public void setRenderedMessage(Map<String, String> renderedMessage) {
    this.renderedMessage = renderedMessage;
  }


  public CheckPushResponse skipDevices(Boolean skipDevices) {
    this.skipDevices = skipDevices;
    return this;
  }

  /**
   * Don&#39;t require existing devices to render templates
   * @return skipDevices
   */
  @javax.annotation.Nullable
  public Boolean getSkipDevices() {
    return skipDevices;
  }

  public void setSkipDevices(Boolean skipDevices) {
    this.skipDevices = skipDevices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckPushResponse checkPushResponse = (CheckPushResponse) o;
    return Objects.equals(this.deviceErrors, checkPushResponse.deviceErrors) &&
        Objects.equals(this.duration, checkPushResponse.duration) &&
        Objects.equals(this.generalErrors, checkPushResponse.generalErrors) &&
        Objects.equals(this.renderedApnTemplate, checkPushResponse.renderedApnTemplate) &&
        Objects.equals(this.renderedFirebaseTemplate, checkPushResponse.renderedFirebaseTemplate) &&
        Objects.equals(this.renderedMessage, checkPushResponse.renderedMessage) &&
        Objects.equals(this.skipDevices, checkPushResponse.skipDevices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceErrors, duration, generalErrors, renderedApnTemplate, renderedFirebaseTemplate, renderedMessage, skipDevices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckPushResponse {\n");
    sb.append("    deviceErrors: ").append(toIndentedString(deviceErrors)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    generalErrors: ").append(toIndentedString(generalErrors)).append("\n");
    sb.append("    renderedApnTemplate: ").append(toIndentedString(renderedApnTemplate)).append("\n");
    sb.append("    renderedFirebaseTemplate: ").append(toIndentedString(renderedFirebaseTemplate)).append("\n");
    sb.append("    renderedMessage: ").append(toIndentedString(renderedMessage)).append("\n");
    sb.append("    skipDevices: ").append(toIndentedString(skipDevices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("device_errors");
    openapiFields.add("duration");
    openapiFields.add("general_errors");
    openapiFields.add("rendered_apn_template");
    openapiFields.add("rendered_firebase_template");
    openapiFields.add("rendered_message");
    openapiFields.add("skip_devices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("duration");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckPushResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckPushResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckPushResponse is not found in the empty JSON string", CheckPushResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckPushResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckPushResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckPushResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("general_errors") != null && !jsonObj.get("general_errors").isJsonNull() && !jsonObj.get("general_errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `general_errors` to be an array in the JSON string but got `%s`", jsonObj.get("general_errors").toString()));
      }
      if ((jsonObj.get("rendered_apn_template") != null && !jsonObj.get("rendered_apn_template").isJsonNull()) && !jsonObj.get("rendered_apn_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rendered_apn_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rendered_apn_template").toString()));
      }
      if ((jsonObj.get("rendered_firebase_template") != null && !jsonObj.get("rendered_firebase_template").isJsonNull()) && !jsonObj.get("rendered_firebase_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rendered_firebase_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rendered_firebase_template").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckPushResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckPushResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckPushResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckPushResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckPushResponse>() {
           @Override
           public void write(JsonWriter out, CheckPushResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckPushResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckPushResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckPushResponse
   * @throws IOException if the JSON string is invalid with respect to CheckPushResponse
   */
  public static CheckPushResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckPushResponse.class);
  }

  /**
   * Convert an instance of CheckPushResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

