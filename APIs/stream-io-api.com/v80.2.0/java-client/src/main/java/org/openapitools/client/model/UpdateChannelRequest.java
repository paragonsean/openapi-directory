/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChannelMemberRequest;
import org.openapitools.client.model.ChannelRequest;
import org.openapitools.client.model.MessageRequest;
import org.openapitools.client.model.UserObjectRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateChannelRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateChannelRequest {
  public static final String SERIALIZED_NAME_ACCEPT_INVITE = "accept_invite";
  @SerializedName(SERIALIZED_NAME_ACCEPT_INVITE)
  private Boolean acceptInvite;

  public static final String SERIALIZED_NAME_ADD_MEMBERS = "add_members";
  @SerializedName(SERIALIZED_NAME_ADD_MEMBERS)
  private List<ChannelMemberRequest> addMembers = new ArrayList<>();

  public static final String SERIALIZED_NAME_ADD_MODERATORS = "add_moderators";
  @SerializedName(SERIALIZED_NAME_ADD_MODERATORS)
  private List<String> addModerators = new ArrayList<>();

  public static final String SERIALIZED_NAME_ASSIGN_ROLES = "assign_roles";
  @SerializedName(SERIALIZED_NAME_ASSIGN_ROLES)
  private List<ChannelMemberRequest> assignRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_COOLDOWN = "cooldown";
  @SerializedName(SERIALIZED_NAME_COOLDOWN)
  private Integer cooldown;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private ChannelRequest data;

  public static final String SERIALIZED_NAME_DEMOTE_MODERATORS = "demote_moderators";
  @SerializedName(SERIALIZED_NAME_DEMOTE_MODERATORS)
  private List<String> demoteModerators = new ArrayList<>();

  public static final String SERIALIZED_NAME_HIDE_HISTORY = "hide_history";
  @SerializedName(SERIALIZED_NAME_HIDE_HISTORY)
  private Boolean hideHistory;

  public static final String SERIALIZED_NAME_INVITES = "invites";
  @SerializedName(SERIALIZED_NAME_INVITES)
  private List<ChannelMemberRequest> invites = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private MessageRequest message;

  public static final String SERIALIZED_NAME_REJECT_INVITE = "reject_invite";
  @SerializedName(SERIALIZED_NAME_REJECT_INVITE)
  private Boolean rejectInvite;

  public static final String SERIALIZED_NAME_REMOVE_MEMBERS = "remove_members";
  @SerializedName(SERIALIZED_NAME_REMOVE_MEMBERS)
  private List<String> removeMembers = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKIP_PUSH = "skip_push";
  @SerializedName(SERIALIZED_NAME_SKIP_PUSH)
  private Boolean skipPush;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private UserObjectRequest user;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public UpdateChannelRequest() {
  }

  public UpdateChannelRequest acceptInvite(Boolean acceptInvite) {
    this.acceptInvite = acceptInvite;
    return this;
  }

  /**
   * Set to &#x60;true&#x60; to accept the invite
   * @return acceptInvite
   */
  @javax.annotation.Nullable
  public Boolean getAcceptInvite() {
    return acceptInvite;
  }

  public void setAcceptInvite(Boolean acceptInvite) {
    this.acceptInvite = acceptInvite;
  }


  public UpdateChannelRequest addMembers(List<ChannelMemberRequest> addMembers) {
    this.addMembers = addMembers;
    return this;
  }

  public UpdateChannelRequest addAddMembersItem(ChannelMemberRequest addMembersItem) {
    if (this.addMembers == null) {
      this.addMembers = new ArrayList<>();
    }
    this.addMembers.add(addMembersItem);
    return this;
  }

  /**
   * List of user IDs to add to the channel
   * @return addMembers
   */
  @javax.annotation.Nullable
  public List<ChannelMemberRequest> getAddMembers() {
    return addMembers;
  }

  public void setAddMembers(List<ChannelMemberRequest> addMembers) {
    this.addMembers = addMembers;
  }


  public UpdateChannelRequest addModerators(List<String> addModerators) {
    this.addModerators = addModerators;
    return this;
  }

  public UpdateChannelRequest addAddModeratorsItem(String addModeratorsItem) {
    if (this.addModerators == null) {
      this.addModerators = new ArrayList<>();
    }
    this.addModerators.add(addModeratorsItem);
    return this;
  }

  /**
   * List of user IDs to make channel moderators
   * @return addModerators
   */
  @javax.annotation.Nonnull
  public List<String> getAddModerators() {
    return addModerators;
  }

  public void setAddModerators(List<String> addModerators) {
    this.addModerators = addModerators;
  }


  public UpdateChannelRequest assignRoles(List<ChannelMemberRequest> assignRoles) {
    this.assignRoles = assignRoles;
    return this;
  }

  public UpdateChannelRequest addAssignRolesItem(ChannelMemberRequest assignRolesItem) {
    if (this.assignRoles == null) {
      this.assignRoles = new ArrayList<>();
    }
    this.assignRoles.add(assignRolesItem);
    return this;
  }

  /**
   * List of channel member role assignments. If any specified user is not part of the channel, the request will fail
   * @return assignRoles
   */
  @javax.annotation.Nullable
  public List<ChannelMemberRequest> getAssignRoles() {
    return assignRoles;
  }

  public void setAssignRoles(List<ChannelMemberRequest> assignRoles) {
    this.assignRoles = assignRoles;
  }


  public UpdateChannelRequest cooldown(Integer cooldown) {
    this.cooldown = cooldown;
    return this;
  }

  /**
   * Sets cool down period for the channel in seconds
   * minimum: 0
   * maximum: 120
   * @return cooldown
   */
  @javax.annotation.Nullable
  public Integer getCooldown() {
    return cooldown;
  }

  public void setCooldown(Integer cooldown) {
    this.cooldown = cooldown;
  }


  public UpdateChannelRequest data(ChannelRequest data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public ChannelRequest getData() {
    return data;
  }

  public void setData(ChannelRequest data) {
    this.data = data;
  }


  public UpdateChannelRequest demoteModerators(List<String> demoteModerators) {
    this.demoteModerators = demoteModerators;
    return this;
  }

  public UpdateChannelRequest addDemoteModeratorsItem(String demoteModeratorsItem) {
    if (this.demoteModerators == null) {
      this.demoteModerators = new ArrayList<>();
    }
    this.demoteModerators.add(demoteModeratorsItem);
    return this;
  }

  /**
   * List of user IDs to take away moderators status from
   * @return demoteModerators
   */
  @javax.annotation.Nonnull
  public List<String> getDemoteModerators() {
    return demoteModerators;
  }

  public void setDemoteModerators(List<String> demoteModerators) {
    this.demoteModerators = demoteModerators;
  }


  public UpdateChannelRequest hideHistory(Boolean hideHistory) {
    this.hideHistory = hideHistory;
    return this;
  }

  /**
   * Set to &#x60;true&#x60; to hide channel&#39;s history when adding new members
   * @return hideHistory
   */
  @javax.annotation.Nullable
  public Boolean getHideHistory() {
    return hideHistory;
  }

  public void setHideHistory(Boolean hideHistory) {
    this.hideHistory = hideHistory;
  }


  public UpdateChannelRequest invites(List<ChannelMemberRequest> invites) {
    this.invites = invites;
    return this;
  }

  public UpdateChannelRequest addInvitesItem(ChannelMemberRequest invitesItem) {
    if (this.invites == null) {
      this.invites = new ArrayList<>();
    }
    this.invites.add(invitesItem);
    return this;
  }

  /**
   * List of user IDs to invite to the channel
   * @return invites
   */
  @javax.annotation.Nullable
  public List<ChannelMemberRequest> getInvites() {
    return invites;
  }

  public void setInvites(List<ChannelMemberRequest> invites) {
    this.invites = invites;
  }


  public UpdateChannelRequest message(MessageRequest message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public MessageRequest getMessage() {
    return message;
  }

  public void setMessage(MessageRequest message) {
    this.message = message;
  }


  public UpdateChannelRequest rejectInvite(Boolean rejectInvite) {
    this.rejectInvite = rejectInvite;
    return this;
  }

  /**
   * Set to &#x60;true&#x60; to reject the invite
   * @return rejectInvite
   */
  @javax.annotation.Nullable
  public Boolean getRejectInvite() {
    return rejectInvite;
  }

  public void setRejectInvite(Boolean rejectInvite) {
    this.rejectInvite = rejectInvite;
  }


  public UpdateChannelRequest removeMembers(List<String> removeMembers) {
    this.removeMembers = removeMembers;
    return this;
  }

  public UpdateChannelRequest addRemoveMembersItem(String removeMembersItem) {
    if (this.removeMembers == null) {
      this.removeMembers = new ArrayList<>();
    }
    this.removeMembers.add(removeMembersItem);
    return this;
  }

  /**
   * List of user IDs to remove from the channel
   * @return removeMembers
   */
  @javax.annotation.Nonnull
  public List<String> getRemoveMembers() {
    return removeMembers;
  }

  public void setRemoveMembers(List<String> removeMembers) {
    this.removeMembers = removeMembers;
  }


  public UpdateChannelRequest skipPush(Boolean skipPush) {
    this.skipPush = skipPush;
    return this;
  }

  /**
   * When &#x60;message&#x60; is set disables all push notifications for it
   * @return skipPush
   */
  @javax.annotation.Nullable
  public Boolean getSkipPush() {
    return skipPush;
  }

  public void setSkipPush(Boolean skipPush) {
    this.skipPush = skipPush;
  }


  public UpdateChannelRequest user(UserObjectRequest user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public UserObjectRequest getUser() {
    return user;
  }

  public void setUser(UserObjectRequest user) {
    this.user = user;
  }


  public UpdateChannelRequest userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateChannelRequest updateChannelRequest = (UpdateChannelRequest) o;
    return Objects.equals(this.acceptInvite, updateChannelRequest.acceptInvite) &&
        Objects.equals(this.addMembers, updateChannelRequest.addMembers) &&
        Objects.equals(this.addModerators, updateChannelRequest.addModerators) &&
        Objects.equals(this.assignRoles, updateChannelRequest.assignRoles) &&
        Objects.equals(this.cooldown, updateChannelRequest.cooldown) &&
        Objects.equals(this.data, updateChannelRequest.data) &&
        Objects.equals(this.demoteModerators, updateChannelRequest.demoteModerators) &&
        Objects.equals(this.hideHistory, updateChannelRequest.hideHistory) &&
        Objects.equals(this.invites, updateChannelRequest.invites) &&
        Objects.equals(this.message, updateChannelRequest.message) &&
        Objects.equals(this.rejectInvite, updateChannelRequest.rejectInvite) &&
        Objects.equals(this.removeMembers, updateChannelRequest.removeMembers) &&
        Objects.equals(this.skipPush, updateChannelRequest.skipPush) &&
        Objects.equals(this.user, updateChannelRequest.user) &&
        Objects.equals(this.userId, updateChannelRequest.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptInvite, addMembers, addModerators, assignRoles, cooldown, data, demoteModerators, hideHistory, invites, message, rejectInvite, removeMembers, skipPush, user, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateChannelRequest {\n");
    sb.append("    acceptInvite: ").append(toIndentedString(acceptInvite)).append("\n");
    sb.append("    addMembers: ").append(toIndentedString(addMembers)).append("\n");
    sb.append("    addModerators: ").append(toIndentedString(addModerators)).append("\n");
    sb.append("    assignRoles: ").append(toIndentedString(assignRoles)).append("\n");
    sb.append("    cooldown: ").append(toIndentedString(cooldown)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    demoteModerators: ").append(toIndentedString(demoteModerators)).append("\n");
    sb.append("    hideHistory: ").append(toIndentedString(hideHistory)).append("\n");
    sb.append("    invites: ").append(toIndentedString(invites)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    rejectInvite: ").append(toIndentedString(rejectInvite)).append("\n");
    sb.append("    removeMembers: ").append(toIndentedString(removeMembers)).append("\n");
    sb.append("    skipPush: ").append(toIndentedString(skipPush)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accept_invite");
    openapiFields.add("add_members");
    openapiFields.add("add_moderators");
    openapiFields.add("assign_roles");
    openapiFields.add("cooldown");
    openapiFields.add("data");
    openapiFields.add("demote_moderators");
    openapiFields.add("hide_history");
    openapiFields.add("invites");
    openapiFields.add("message");
    openapiFields.add("reject_invite");
    openapiFields.add("remove_members");
    openapiFields.add("skip_push");
    openapiFields.add("user");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("add_moderators");
    openapiRequiredFields.add("demote_moderators");
    openapiRequiredFields.add("remove_members");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateChannelRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateChannelRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateChannelRequest is not found in the empty JSON string", UpdateChannelRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateChannelRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateChannelRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateChannelRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("add_members") != null && !jsonObj.get("add_members").isJsonNull()) {
        JsonArray jsonArrayaddMembers = jsonObj.getAsJsonArray("add_members");
        if (jsonArrayaddMembers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("add_members").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `add_members` to be an array in the JSON string but got `%s`", jsonObj.get("add_members").toString()));
          }

          // validate the optional field `add_members` (array)
          for (int i = 0; i < jsonArrayaddMembers.size(); i++) {
            ChannelMemberRequest.validateJsonElement(jsonArrayaddMembers.get(i));
          };
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("add_moderators") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("add_moderators").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `add_moderators` to be an array in the JSON string but got `%s`", jsonObj.get("add_moderators").toString()));
      }
      if (jsonObj.get("assign_roles") != null && !jsonObj.get("assign_roles").isJsonNull()) {
        JsonArray jsonArrayassignRoles = jsonObj.getAsJsonArray("assign_roles");
        if (jsonArrayassignRoles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("assign_roles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `assign_roles` to be an array in the JSON string but got `%s`", jsonObj.get("assign_roles").toString()));
          }

          // validate the optional field `assign_roles` (array)
          for (int i = 0; i < jsonArrayassignRoles.size(); i++) {
            ChannelMemberRequest.validateJsonElement(jsonArrayassignRoles.get(i));
          };
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("demote_moderators") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("demote_moderators").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `demote_moderators` to be an array in the JSON string but got `%s`", jsonObj.get("demote_moderators").toString()));
      }
      if (jsonObj.get("invites") != null && !jsonObj.get("invites").isJsonNull()) {
        JsonArray jsonArrayinvites = jsonObj.getAsJsonArray("invites");
        if (jsonArrayinvites != null) {
          // ensure the json data is an array
          if (!jsonObj.get("invites").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `invites` to be an array in the JSON string but got `%s`", jsonObj.get("invites").toString()));
          }

          // validate the optional field `invites` (array)
          for (int i = 0; i < jsonArrayinvites.size(); i++) {
            ChannelMemberRequest.validateJsonElement(jsonArrayinvites.get(i));
          };
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("remove_members") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("remove_members").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `remove_members` to be an array in the JSON string but got `%s`", jsonObj.get("remove_members").toString()));
      }
      if ((jsonObj.get("user_id") != null && !jsonObj.get("user_id").isJsonNull()) && !jsonObj.get("user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateChannelRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateChannelRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateChannelRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateChannelRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateChannelRequest>() {
           @Override
           public void write(JsonWriter out, UpdateChannelRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateChannelRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateChannelRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateChannelRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateChannelRequest
   */
  public static UpdateChannelRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateChannelRequest.class);
  }

  /**
   * Convert an instance of UpdateChannelRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

