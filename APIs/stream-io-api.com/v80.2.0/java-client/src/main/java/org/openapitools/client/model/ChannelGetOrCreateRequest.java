/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChannelRequest;
import org.openapitools.client.model.MessagePaginationParamsRequest;
import org.openapitools.client.model.PaginationParamsRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ChannelGetOrCreateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ChannelGetOrCreateRequest {
  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CONNECTION_ID = "connection_id";
  @SerializedName(SERIALIZED_NAME_CONNECTION_ID)
  private String connectionId;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private ChannelRequest data;

  public static final String SERIALIZED_NAME_HIDE_FOR_CREATOR = "hide_for_creator";
  @SerializedName(SERIALIZED_NAME_HIDE_FOR_CREATOR)
  private Boolean hideForCreator;

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private PaginationParamsRequest members;

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  private MessagePaginationParamsRequest messages;

  public static final String SERIALIZED_NAME_PRESENCE = "presence";
  @SerializedName(SERIALIZED_NAME_PRESENCE)
  private Boolean presence;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private Boolean state;

  public static final String SERIALIZED_NAME_WATCH = "watch";
  @SerializedName(SERIALIZED_NAME_WATCH)
  private Boolean watch;

  public static final String SERIALIZED_NAME_WATCHERS = "watchers";
  @SerializedName(SERIALIZED_NAME_WATCHERS)
  private PaginationParamsRequest watchers;

  public ChannelGetOrCreateRequest() {
  }

  public ChannelGetOrCreateRequest clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * Get clientId
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public ChannelGetOrCreateRequest connectionId(String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

  /**
   * Get connectionId
   * @return connectionId
   */
  @javax.annotation.Nullable
  public String getConnectionId() {
    return connectionId;
  }

  public void setConnectionId(String connectionId) {
    this.connectionId = connectionId;
  }


  public ChannelGetOrCreateRequest data(ChannelRequest data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public ChannelRequest getData() {
    return data;
  }

  public void setData(ChannelRequest data) {
    this.data = data;
  }


  public ChannelGetOrCreateRequest hideForCreator(Boolean hideForCreator) {
    this.hideForCreator = hideForCreator;
    return this;
  }

  /**
   * Whether this channel will be hidden for the user who created the channel or not
   * @return hideForCreator
   */
  @javax.annotation.Nullable
  public Boolean getHideForCreator() {
    return hideForCreator;
  }

  public void setHideForCreator(Boolean hideForCreator) {
    this.hideForCreator = hideForCreator;
  }


  public ChannelGetOrCreateRequest members(PaginationParamsRequest members) {
    this.members = members;
    return this;
  }

  /**
   * Get members
   * @return members
   */
  @javax.annotation.Nullable
  public PaginationParamsRequest getMembers() {
    return members;
  }

  public void setMembers(PaginationParamsRequest members) {
    this.members = members;
  }


  public ChannelGetOrCreateRequest messages(MessagePaginationParamsRequest messages) {
    this.messages = messages;
    return this;
  }

  /**
   * Get messages
   * @return messages
   */
  @javax.annotation.Nullable
  public MessagePaginationParamsRequest getMessages() {
    return messages;
  }

  public void setMessages(MessagePaginationParamsRequest messages) {
    this.messages = messages;
  }


  public ChannelGetOrCreateRequest presence(Boolean presence) {
    this.presence = presence;
    return this;
  }

  /**
   * Fetch user presence info
   * @return presence
   */
  @javax.annotation.Nullable
  public Boolean getPresence() {
    return presence;
  }

  public void setPresence(Boolean presence) {
    this.presence = presence;
  }


  public ChannelGetOrCreateRequest state(Boolean state) {
    this.state = state;
    return this;
  }

  /**
   * Refresh channel state
   * @return state
   */
  @javax.annotation.Nullable
  public Boolean getState() {
    return state;
  }

  public void setState(Boolean state) {
    this.state = state;
  }


  public ChannelGetOrCreateRequest watch(Boolean watch) {
    this.watch = watch;
    return this;
  }

  /**
   * Start watching the channel
   * @return watch
   */
  @javax.annotation.Nullable
  public Boolean getWatch() {
    return watch;
  }

  public void setWatch(Boolean watch) {
    this.watch = watch;
  }


  public ChannelGetOrCreateRequest watchers(PaginationParamsRequest watchers) {
    this.watchers = watchers;
    return this;
  }

  /**
   * Get watchers
   * @return watchers
   */
  @javax.annotation.Nullable
  public PaginationParamsRequest getWatchers() {
    return watchers;
  }

  public void setWatchers(PaginationParamsRequest watchers) {
    this.watchers = watchers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelGetOrCreateRequest channelGetOrCreateRequest = (ChannelGetOrCreateRequest) o;
    return Objects.equals(this.clientId, channelGetOrCreateRequest.clientId) &&
        Objects.equals(this.connectionId, channelGetOrCreateRequest.connectionId) &&
        Objects.equals(this.data, channelGetOrCreateRequest.data) &&
        Objects.equals(this.hideForCreator, channelGetOrCreateRequest.hideForCreator) &&
        Objects.equals(this.members, channelGetOrCreateRequest.members) &&
        Objects.equals(this.messages, channelGetOrCreateRequest.messages) &&
        Objects.equals(this.presence, channelGetOrCreateRequest.presence) &&
        Objects.equals(this.state, channelGetOrCreateRequest.state) &&
        Objects.equals(this.watch, channelGetOrCreateRequest.watch) &&
        Objects.equals(this.watchers, channelGetOrCreateRequest.watchers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, connectionId, data, hideForCreator, members, messages, presence, state, watch, watchers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelGetOrCreateRequest {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    hideForCreator: ").append(toIndentedString(hideForCreator)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    presence: ").append(toIndentedString(presence)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    watch: ").append(toIndentedString(watch)).append("\n");
    sb.append("    watchers: ").append(toIndentedString(watchers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_id");
    openapiFields.add("connection_id");
    openapiFields.add("data");
    openapiFields.add("hide_for_creator");
    openapiFields.add("members");
    openapiFields.add("messages");
    openapiFields.add("presence");
    openapiFields.add("state");
    openapiFields.add("watch");
    openapiFields.add("watchers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ChannelGetOrCreateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ChannelGetOrCreateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelGetOrCreateRequest is not found in the empty JSON string", ChannelGetOrCreateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ChannelGetOrCreateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ChannelGetOrCreateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("client_id") != null && !jsonObj.get("client_id").isJsonNull()) && !jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if ((jsonObj.get("connection_id") != null && !jsonObj.get("connection_id").isJsonNull()) && !jsonObj.get("connection_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connection_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connection_id").toString()));
      }
      // validate the optional field `members`
      if (jsonObj.get("members") != null && !jsonObj.get("members").isJsonNull()) {
        PaginationParamsRequest.validateJsonElement(jsonObj.get("members"));
      }
      // validate the optional field `messages`
      if (jsonObj.get("messages") != null && !jsonObj.get("messages").isJsonNull()) {
        MessagePaginationParamsRequest.validateJsonElement(jsonObj.get("messages"));
      }
      // validate the optional field `watchers`
      if (jsonObj.get("watchers") != null && !jsonObj.get("watchers").isJsonNull()) {
        PaginationParamsRequest.validateJsonElement(jsonObj.get("watchers"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelGetOrCreateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelGetOrCreateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelGetOrCreateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelGetOrCreateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelGetOrCreateRequest>() {
           @Override
           public void write(JsonWriter out, ChannelGetOrCreateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelGetOrCreateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ChannelGetOrCreateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ChannelGetOrCreateRequest
   * @throws IOException if the JSON string is invalid with respect to ChannelGetOrCreateRequest
   */
  public static ChannelGetOrCreateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelGetOrCreateRequest.class);
  }

  /**
   * Convert an instance of ChannelGetOrCreateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

