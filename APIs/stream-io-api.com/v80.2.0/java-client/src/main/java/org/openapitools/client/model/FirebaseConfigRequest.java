/*
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FirebaseConfigRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:11.429997-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FirebaseConfigRequest {
  public static final String SERIALIZED_NAME_DISABLED = "Disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_APN_TEMPLATE = "apn_template";
  @SerializedName(SERIALIZED_NAME_APN_TEMPLATE)
  private String apnTemplate;

  public static final String SERIALIZED_NAME_CREDENTIALS_JSON = "credentials_json";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS_JSON)
  private String credentialsJson;

  public static final String SERIALIZED_NAME_DATA_TEMPLATE = "data_template";
  @SerializedName(SERIALIZED_NAME_DATA_TEMPLATE)
  private String dataTemplate;

  public static final String SERIALIZED_NAME_NOTIFICATION_TEMPLATE = "notification_template";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TEMPLATE)
  private String notificationTemplate;

  public static final String SERIALIZED_NAME_SERVER_KEY = "server_key";
  @SerializedName(SERIALIZED_NAME_SERVER_KEY)
  private String serverKey;

  public FirebaseConfigRequest() {
  }

  public FirebaseConfigRequest disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Get disabled
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public FirebaseConfigRequest apnTemplate(String apnTemplate) {
    this.apnTemplate = apnTemplate;
    return this;
  }

  /**
   * Get apnTemplate
   * @return apnTemplate
   */
  @javax.annotation.Nullable
  public String getApnTemplate() {
    return apnTemplate;
  }

  public void setApnTemplate(String apnTemplate) {
    this.apnTemplate = apnTemplate;
  }


  public FirebaseConfigRequest credentialsJson(String credentialsJson) {
    this.credentialsJson = credentialsJson;
    return this;
  }

  /**
   * Get credentialsJson
   * @return credentialsJson
   */
  @javax.annotation.Nullable
  public String getCredentialsJson() {
    return credentialsJson;
  }

  public void setCredentialsJson(String credentialsJson) {
    this.credentialsJson = credentialsJson;
  }


  public FirebaseConfigRequest dataTemplate(String dataTemplate) {
    this.dataTemplate = dataTemplate;
    return this;
  }

  /**
   * Get dataTemplate
   * @return dataTemplate
   */
  @javax.annotation.Nullable
  public String getDataTemplate() {
    return dataTemplate;
  }

  public void setDataTemplate(String dataTemplate) {
    this.dataTemplate = dataTemplate;
  }


  public FirebaseConfigRequest notificationTemplate(String notificationTemplate) {
    this.notificationTemplate = notificationTemplate;
    return this;
  }

  /**
   * Get notificationTemplate
   * @return notificationTemplate
   */
  @javax.annotation.Nullable
  public String getNotificationTemplate() {
    return notificationTemplate;
  }

  public void setNotificationTemplate(String notificationTemplate) {
    this.notificationTemplate = notificationTemplate;
  }


  public FirebaseConfigRequest serverKey(String serverKey) {
    this.serverKey = serverKey;
    return this;
  }

  /**
   * Get serverKey
   * @return serverKey
   */
  @javax.annotation.Nullable
  public String getServerKey() {
    return serverKey;
  }

  public void setServerKey(String serverKey) {
    this.serverKey = serverKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FirebaseConfigRequest firebaseConfigRequest = (FirebaseConfigRequest) o;
    return Objects.equals(this.disabled, firebaseConfigRequest.disabled) &&
        Objects.equals(this.apnTemplate, firebaseConfigRequest.apnTemplate) &&
        Objects.equals(this.credentialsJson, firebaseConfigRequest.credentialsJson) &&
        Objects.equals(this.dataTemplate, firebaseConfigRequest.dataTemplate) &&
        Objects.equals(this.notificationTemplate, firebaseConfigRequest.notificationTemplate) &&
        Objects.equals(this.serverKey, firebaseConfigRequest.serverKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disabled, apnTemplate, credentialsJson, dataTemplate, notificationTemplate, serverKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FirebaseConfigRequest {\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    apnTemplate: ").append(toIndentedString(apnTemplate)).append("\n");
    sb.append("    credentialsJson: ").append(toIndentedString(credentialsJson)).append("\n");
    sb.append("    dataTemplate: ").append(toIndentedString(dataTemplate)).append("\n");
    sb.append("    notificationTemplate: ").append(toIndentedString(notificationTemplate)).append("\n");
    sb.append("    serverKey: ").append(toIndentedString(serverKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Disabled");
    openapiFields.add("apn_template");
    openapiFields.add("credentials_json");
    openapiFields.add("data_template");
    openapiFields.add("notification_template");
    openapiFields.add("server_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FirebaseConfigRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FirebaseConfigRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FirebaseConfigRequest is not found in the empty JSON string", FirebaseConfigRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FirebaseConfigRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FirebaseConfigRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apn_template") != null && !jsonObj.get("apn_template").isJsonNull()) && !jsonObj.get("apn_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apn_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apn_template").toString()));
      }
      if ((jsonObj.get("credentials_json") != null && !jsonObj.get("credentials_json").isJsonNull()) && !jsonObj.get("credentials_json").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credentials_json` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credentials_json").toString()));
      }
      if ((jsonObj.get("data_template") != null && !jsonObj.get("data_template").isJsonNull()) && !jsonObj.get("data_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_template").toString()));
      }
      if ((jsonObj.get("notification_template") != null && !jsonObj.get("notification_template").isJsonNull()) && !jsonObj.get("notification_template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notification_template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notification_template").toString()));
      }
      if ((jsonObj.get("server_key") != null && !jsonObj.get("server_key").isJsonNull()) && !jsonObj.get("server_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FirebaseConfigRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FirebaseConfigRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FirebaseConfigRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FirebaseConfigRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<FirebaseConfigRequest>() {
           @Override
           public void write(JsonWriter out, FirebaseConfigRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FirebaseConfigRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FirebaseConfigRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FirebaseConfigRequest
   * @throws IOException if the JSON string is invalid with respect to FirebaseConfigRequest
   */
  public static FirebaseConfigRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FirebaseConfigRequest.class);
  }

  /**
   * Convert an instance of FirebaseConfigRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

