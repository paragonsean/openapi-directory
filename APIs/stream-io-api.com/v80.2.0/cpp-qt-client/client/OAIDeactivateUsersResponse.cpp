/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeactivateUsersResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeactivateUsersResponse::OAIDeactivateUsersResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeactivateUsersResponse::OAIDeactivateUsersResponse() {
    this->initializeModel();
}

OAIDeactivateUsersResponse::~OAIDeactivateUsersResponse() {}

void OAIDeactivateUsersResponse::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;
}

void OAIDeactivateUsersResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeactivateUsersResponse::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("task_id")]);
    m_task_id_isSet = !json[QString("task_id")].isNull() && m_task_id_isValid;
}

QString OAIDeactivateUsersResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeactivateUsersResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("task_id"), ::OpenAPI::toJsonValue(m_task_id));
    }
    return obj;
}

QString OAIDeactivateUsersResponse::getDuration() const {
    return m_duration;
}
void OAIDeactivateUsersResponse::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIDeactivateUsersResponse::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIDeactivateUsersResponse::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIDeactivateUsersResponse::getTaskId() const {
    return m_task_id;
}
void OAIDeactivateUsersResponse::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAIDeactivateUsersResponse::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAIDeactivateUsersResponse::is_task_id_Valid() const{
    return m_task_id_isValid;
}

bool OAIDeactivateUsersResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeactivateUsersResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_duration_isValid && m_task_id_isValid && true;
}

} // namespace OpenAPI
