/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryRecipientsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryRecipientsResponse::OAIQueryRecipientsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryRecipientsResponse::OAIQueryRecipientsResponse() {
    this->initializeModel();
}

OAIQueryRecipientsResponse::~OAIQueryRecipientsResponse() {}

void OAIQueryRecipientsResponse::initializeModel() {

    m_campaigns_isSet = false;
    m_campaigns_isValid = false;

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_recipients_isSet = false;
    m_recipients_isValid = false;

    m_segments_isSet = false;
    m_segments_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIQueryRecipientsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryRecipientsResponse::fromJsonObject(QJsonObject json) {

    m_campaigns_isValid = ::OpenAPI::fromJsonValue(m_campaigns, json[QString("campaigns")]);
    m_campaigns_isSet = !json[QString("campaigns")].isNull() && m_campaigns_isValid;

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_recipients_isValid = ::OpenAPI::fromJsonValue(m_recipients, json[QString("recipients")]);
    m_recipients_isSet = !json[QString("recipients")].isNull() && m_recipients_isValid;

    m_segments_isValid = ::OpenAPI::fromJsonValue(m_segments, json[QString("segments")]);
    m_segments_isSet = !json[QString("segments")].isNull() && m_segments_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIQueryRecipientsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryRecipientsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_campaigns.size() > 0) {
        obj.insert(QString("campaigns"), ::OpenAPI::toJsonValue(m_campaigns));
    }
    if (m_channels.size() > 0) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_recipients.size() > 0) {
        obj.insert(QString("recipients"), ::OpenAPI::toJsonValue(m_recipients));
    }
    if (m_segments.size() > 0) {
        obj.insert(QString("segments"), ::OpenAPI::toJsonValue(m_segments));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

QMap<QString, OAICampaign> OAIQueryRecipientsResponse::getCampaigns() const {
    return m_campaigns;
}
void OAIQueryRecipientsResponse::setCampaigns(const QMap<QString, OAICampaign> &campaigns) {
    m_campaigns = campaigns;
    m_campaigns_isSet = true;
}

bool OAIQueryRecipientsResponse::is_campaigns_Set() const{
    return m_campaigns_isSet;
}

bool OAIQueryRecipientsResponse::is_campaigns_Valid() const{
    return m_campaigns_isValid;
}

QMap<QString, OAIChannel> OAIQueryRecipientsResponse::getChannels() const {
    return m_channels;
}
void OAIQueryRecipientsResponse::setChannels(const QMap<QString, OAIChannel> &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIQueryRecipientsResponse::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIQueryRecipientsResponse::is_channels_Valid() const{
    return m_channels_isValid;
}

QString OAIQueryRecipientsResponse::getDuration() const {
    return m_duration;
}
void OAIQueryRecipientsResponse::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIQueryRecipientsResponse::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIQueryRecipientsResponse::is_duration_Valid() const{
    return m_duration_isValid;
}

QList<OAIRecipient> OAIQueryRecipientsResponse::getRecipients() const {
    return m_recipients;
}
void OAIQueryRecipientsResponse::setRecipients(const QList<OAIRecipient> &recipients) {
    m_recipients = recipients;
    m_recipients_isSet = true;
}

bool OAIQueryRecipientsResponse::is_recipients_Set() const{
    return m_recipients_isSet;
}

bool OAIQueryRecipientsResponse::is_recipients_Valid() const{
    return m_recipients_isValid;
}

QMap<QString, OAISegment> OAIQueryRecipientsResponse::getSegments() const {
    return m_segments;
}
void OAIQueryRecipientsResponse::setSegments(const QMap<QString, OAISegment> &segments) {
    m_segments = segments;
    m_segments_isSet = true;
}

bool OAIQueryRecipientsResponse::is_segments_Set() const{
    return m_segments_isSet;
}

bool OAIQueryRecipientsResponse::is_segments_Valid() const{
    return m_segments_isValid;
}

QMap<QString, OAIUserObject> OAIQueryRecipientsResponse::getUsers() const {
    return m_users;
}
void OAIQueryRecipientsResponse::setUsers(const QMap<QString, OAIUserObject> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIQueryRecipientsResponse::is_users_Set() const{
    return m_users_isSet;
}

bool OAIQueryRecipientsResponse::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIQueryRecipientsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campaigns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_segments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryRecipientsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_campaigns_isValid && m_channels_isValid && m_duration_isValid && m_recipients_isValid && m_segments_isValid && m_users_isValid && true;
}

} // namespace OpenAPI
