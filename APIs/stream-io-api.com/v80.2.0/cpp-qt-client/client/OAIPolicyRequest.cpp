/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyRequest::OAIPolicyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyRequest::OAIPolicyRequest() {
    this->initializeModel();
}

OAIPolicyRequest::~OAIPolicyRequest() {}

void OAIPolicyRequest::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;
}

void OAIPolicyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyRequest::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;
}

QString OAIPolicyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    return obj;
}

QString OAIPolicyRequest::getAction() const {
    return m_action;
}
void OAIPolicyRequest::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIPolicyRequest::is_action_Set() const{
    return m_action_isSet;
}

bool OAIPolicyRequest::is_action_Valid() const{
    return m_action_isValid;
}

QString OAIPolicyRequest::getName() const {
    return m_name;
}
void OAIPolicyRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPolicyRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPolicyRequest::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPolicyRequest::isOwner() const {
    return m_owner;
}
void OAIPolicyRequest::setOwner(const bool &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIPolicyRequest::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIPolicyRequest::is_owner_Valid() const{
    return m_owner_isValid;
}

qint32 OAIPolicyRequest::getPriority() const {
    return m_priority;
}
void OAIPolicyRequest::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIPolicyRequest::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIPolicyRequest::is_priority_Valid() const{
    return m_priority_isValid;
}

QList<QString> OAIPolicyRequest::getResources() const {
    return m_resources;
}
void OAIPolicyRequest::setResources(const QList<QString> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIPolicyRequest::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIPolicyRequest::is_resources_Valid() const{
    return m_resources_isValid;
}

QList<QString> OAIPolicyRequest::getRoles() const {
    return m_roles;
}
void OAIPolicyRequest::setRoles(const QList<QString> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIPolicyRequest::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIPolicyRequest::is_roles_Valid() const{
    return m_roles_isValid;
}

bool OAIPolicyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_priority_isValid && true;
}

} // namespace OpenAPI
