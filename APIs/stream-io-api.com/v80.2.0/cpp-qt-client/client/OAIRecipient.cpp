/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecipient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecipient::OAIRecipient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecipient::OAIRecipient() {
    this->initializeModel();
}

OAIRecipient::~OAIRecipient() {}

void OAIRecipient::initializeModel() {

    m_campaign_id_isSet = false;
    m_campaign_id_isValid = false;

    m_channel_cid_isSet = false;
    m_channel_cid_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_receiver_id_isSet = false;
    m_receiver_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIRecipient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecipient::fromJsonObject(QJsonObject json) {

    m_campaign_id_isValid = ::OpenAPI::fromJsonValue(m_campaign_id, json[QString("campaign_id")]);
    m_campaign_id_isSet = !json[QString("campaign_id")].isNull() && m_campaign_id_isValid;

    m_channel_cid_isValid = ::OpenAPI::fromJsonValue(m_channel_cid, json[QString("channel_cid")]);
    m_channel_cid_isSet = !json[QString("channel_cid")].isNull() && m_channel_cid_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("message_id")]);
    m_message_id_isSet = !json[QString("message_id")].isNull() && m_message_id_isValid;

    m_receiver_id_isValid = ::OpenAPI::fromJsonValue(m_receiver_id, json[QString("receiver_id")]);
    m_receiver_id_isSet = !json[QString("receiver_id")].isNull() && m_receiver_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIRecipient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecipient::asJsonObject() const {
    QJsonObject obj;
    if (m_campaign_id_isSet) {
        obj.insert(QString("campaign_id"), ::OpenAPI::toJsonValue(m_campaign_id));
    }
    if (m_channel_cid_isSet) {
        obj.insert(QString("channel_cid"), ::OpenAPI::toJsonValue(m_channel_cid));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("message_id"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_receiver_id_isSet) {
        obj.insert(QString("receiver_id"), ::OpenAPI::toJsonValue(m_receiver_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIRecipient::getCampaignId() const {
    return m_campaign_id;
}
void OAIRecipient::setCampaignId(const QString &campaign_id) {
    m_campaign_id = campaign_id;
    m_campaign_id_isSet = true;
}

bool OAIRecipient::is_campaign_id_Set() const{
    return m_campaign_id_isSet;
}

bool OAIRecipient::is_campaign_id_Valid() const{
    return m_campaign_id_isValid;
}

QString OAIRecipient::getChannelCid() const {
    return m_channel_cid;
}
void OAIRecipient::setChannelCid(const QString &channel_cid) {
    m_channel_cid = channel_cid;
    m_channel_cid_isSet = true;
}

bool OAIRecipient::is_channel_cid_Set() const{
    return m_channel_cid_isSet;
}

bool OAIRecipient::is_channel_cid_Valid() const{
    return m_channel_cid_isValid;
}

QDateTime OAIRecipient::getCreatedAt() const {
    return m_created_at;
}
void OAIRecipient::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIRecipient::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIRecipient::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIRecipient::getDetails() const {
    return m_details;
}
void OAIRecipient::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIRecipient::is_details_Set() const{
    return m_details_isSet;
}

bool OAIRecipient::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIRecipient::getMessageId() const {
    return m_message_id;
}
void OAIRecipient::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIRecipient::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIRecipient::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIRecipient::getReceiverId() const {
    return m_receiver_id;
}
void OAIRecipient::setReceiverId(const QString &receiver_id) {
    m_receiver_id = receiver_id;
    m_receiver_id_isSet = true;
}

bool OAIRecipient::is_receiver_id_Set() const{
    return m_receiver_id_isSet;
}

bool OAIRecipient::is_receiver_id_Valid() const{
    return m_receiver_id_isValid;
}

QString OAIRecipient::getStatus() const {
    return m_status;
}
void OAIRecipient::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRecipient::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRecipient::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIRecipient::getUpdatedAt() const {
    return m_updated_at;
}
void OAIRecipient::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIRecipient::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIRecipient::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIRecipient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_campaign_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_cid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecipient::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_campaign_id_isValid && m_channel_cid_isValid && m_created_at_isValid && m_details_isValid && m_message_id_isValid && m_receiver_id_isValid && m_status_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
