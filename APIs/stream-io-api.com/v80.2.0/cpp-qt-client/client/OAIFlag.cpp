/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlag::OAIFlag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlag::OAIFlag() {
    this->initializeModel();
}

OAIFlag::~OAIFlag() {}

void OAIFlag::initializeModel() {

    m_approved_at_isSet = false;
    m_approved_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_automod_isSet = false;
    m_created_by_automod_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_rejected_at_isSet = false;
    m_rejected_at_isValid = false;

    m_reviewed_at_isSet = false;
    m_reviewed_at_isValid = false;

    m_target_message_isSet = false;
    m_target_message_isValid = false;

    m_target_message_id_isSet = false;
    m_target_message_id_isValid = false;

    m_target_user_isSet = false;
    m_target_user_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIFlag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlag::fromJsonObject(QJsonObject json) {

    m_approved_at_isValid = ::OpenAPI::fromJsonValue(m_approved_at, json[QString("approved_at")]);
    m_approved_at_isSet = !json[QString("approved_at")].isNull() && m_approved_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_automod_isValid = ::OpenAPI::fromJsonValue(m_created_by_automod, json[QString("created_by_automod")]);
    m_created_by_automod_isSet = !json[QString("created_by_automod")].isNull() && m_created_by_automod_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_rejected_at_isValid = ::OpenAPI::fromJsonValue(m_rejected_at, json[QString("rejected_at")]);
    m_rejected_at_isSet = !json[QString("rejected_at")].isNull() && m_rejected_at_isValid;

    m_reviewed_at_isValid = ::OpenAPI::fromJsonValue(m_reviewed_at, json[QString("reviewed_at")]);
    m_reviewed_at_isSet = !json[QString("reviewed_at")].isNull() && m_reviewed_at_isValid;

    m_target_message_isValid = ::OpenAPI::fromJsonValue(m_target_message, json[QString("target_message")]);
    m_target_message_isSet = !json[QString("target_message")].isNull() && m_target_message_isValid;

    m_target_message_id_isValid = ::OpenAPI::fromJsonValue(m_target_message_id, json[QString("target_message_id")]);
    m_target_message_id_isSet = !json[QString("target_message_id")].isNull() && m_target_message_id_isValid;

    m_target_user_isValid = ::OpenAPI::fromJsonValue(m_target_user, json[QString("target_user")]);
    m_target_user_isSet = !json[QString("target_user")].isNull() && m_target_user_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIFlag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlag::asJsonObject() const {
    QJsonObject obj;
    if (m_approved_at_isSet) {
        obj.insert(QString("approved_at"), ::OpenAPI::toJsonValue(m_approved_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_automod_isSet) {
        obj.insert(QString("created_by_automod"), ::OpenAPI::toJsonValue(m_created_by_automod));
    }
    if (m_details.isSet()) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_rejected_at_isSet) {
        obj.insert(QString("rejected_at"), ::OpenAPI::toJsonValue(m_rejected_at));
    }
    if (m_reviewed_at_isSet) {
        obj.insert(QString("reviewed_at"), ::OpenAPI::toJsonValue(m_reviewed_at));
    }
    if (m_target_message.isSet()) {
        obj.insert(QString("target_message"), ::OpenAPI::toJsonValue(m_target_message));
    }
    if (m_target_message_id_isSet) {
        obj.insert(QString("target_message_id"), ::OpenAPI::toJsonValue(m_target_message_id));
    }
    if (m_target_user.isSet()) {
        obj.insert(QString("target_user"), ::OpenAPI::toJsonValue(m_target_user));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QDateTime OAIFlag::getApprovedAt() const {
    return m_approved_at;
}
void OAIFlag::setApprovedAt(const QDateTime &approved_at) {
    m_approved_at = approved_at;
    m_approved_at_isSet = true;
}

bool OAIFlag::is_approved_at_Set() const{
    return m_approved_at_isSet;
}

bool OAIFlag::is_approved_at_Valid() const{
    return m_approved_at_isValid;
}

QDateTime OAIFlag::getCreatedAt() const {
    return m_created_at;
}
void OAIFlag::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIFlag::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIFlag::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIFlag::isCreatedByAutomod() const {
    return m_created_by_automod;
}
void OAIFlag::setCreatedByAutomod(const bool &created_by_automod) {
    m_created_by_automod = created_by_automod;
    m_created_by_automod_isSet = true;
}

bool OAIFlag::is_created_by_automod_Set() const{
    return m_created_by_automod_isSet;
}

bool OAIFlag::is_created_by_automod_Valid() const{
    return m_created_by_automod_isValid;
}

OAIFlagDetails OAIFlag::getDetails() const {
    return m_details;
}
void OAIFlag::setDetails(const OAIFlagDetails &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIFlag::is_details_Set() const{
    return m_details_isSet;
}

bool OAIFlag::is_details_Valid() const{
    return m_details_isValid;
}

QDateTime OAIFlag::getRejectedAt() const {
    return m_rejected_at;
}
void OAIFlag::setRejectedAt(const QDateTime &rejected_at) {
    m_rejected_at = rejected_at;
    m_rejected_at_isSet = true;
}

bool OAIFlag::is_rejected_at_Set() const{
    return m_rejected_at_isSet;
}

bool OAIFlag::is_rejected_at_Valid() const{
    return m_rejected_at_isValid;
}

QDateTime OAIFlag::getReviewedAt() const {
    return m_reviewed_at;
}
void OAIFlag::setReviewedAt(const QDateTime &reviewed_at) {
    m_reviewed_at = reviewed_at;
    m_reviewed_at_isSet = true;
}

bool OAIFlag::is_reviewed_at_Set() const{
    return m_reviewed_at_isSet;
}

bool OAIFlag::is_reviewed_at_Valid() const{
    return m_reviewed_at_isValid;
}

OAIMessage OAIFlag::getTargetMessage() const {
    return m_target_message;
}
void OAIFlag::setTargetMessage(const OAIMessage &target_message) {
    m_target_message = target_message;
    m_target_message_isSet = true;
}

bool OAIFlag::is_target_message_Set() const{
    return m_target_message_isSet;
}

bool OAIFlag::is_target_message_Valid() const{
    return m_target_message_isValid;
}

QString OAIFlag::getTargetMessageId() const {
    return m_target_message_id;
}
void OAIFlag::setTargetMessageId(const QString &target_message_id) {
    m_target_message_id = target_message_id;
    m_target_message_id_isSet = true;
}

bool OAIFlag::is_target_message_id_Set() const{
    return m_target_message_id_isSet;
}

bool OAIFlag::is_target_message_id_Valid() const{
    return m_target_message_id_isValid;
}

OAIUserObject OAIFlag::getTargetUser() const {
    return m_target_user;
}
void OAIFlag::setTargetUser(const OAIUserObject &target_user) {
    m_target_user = target_user;
    m_target_user_isSet = true;
}

bool OAIFlag::is_target_user_Set() const{
    return m_target_user_isSet;
}

bool OAIFlag::is_target_user_Valid() const{
    return m_target_user_isValid;
}

QDateTime OAIFlag::getUpdatedAt() const {
    return m_updated_at;
}
void OAIFlag::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIFlag::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIFlag::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIUserObject OAIFlag::getUser() const {
    return m_user;
}
void OAIFlag::setUser(const OAIUserObject &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIFlag::is_user_Set() const{
    return m_user_isSet;
}

bool OAIFlag::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIFlag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approved_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_automod_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rejected_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reviewed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlag::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_created_by_automod_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
