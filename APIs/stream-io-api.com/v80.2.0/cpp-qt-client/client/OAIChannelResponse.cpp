/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelResponse::OAIChannelResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelResponse::OAIChannelResponse() {
    this->initializeModel();
}

OAIChannelResponse::~OAIChannelResponse() {}

void OAIChannelResponse::initializeModel() {

    m_auto_translation_enabled_isSet = false;
    m_auto_translation_enabled_isValid = false;

    m_auto_translation_language_isSet = false;
    m_auto_translation_language_isValid = false;

    m_cid_isSet = false;
    m_cid_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_cooldown_isSet = false;
    m_cooldown_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_frozen_isSet = false;
    m_frozen_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_hide_messages_before_isSet = false;
    m_hide_messages_before_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_message_at_isSet = false;
    m_last_message_at_isValid = false;

    m_member_count_isSet = false;
    m_member_count_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_mute_expires_at_isSet = false;
    m_mute_expires_at_isValid = false;

    m_muted_isSet = false;
    m_muted_isValid = false;

    m_own_capabilities_isSet = false;
    m_own_capabilities_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_truncated_at_isSet = false;
    m_truncated_at_isValid = false;

    m_truncated_by_isSet = false;
    m_truncated_by_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIChannelResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelResponse::fromJsonObject(QJsonObject json) {

    m_auto_translation_enabled_isValid = ::OpenAPI::fromJsonValue(m_auto_translation_enabled, json[QString("auto_translation_enabled")]);
    m_auto_translation_enabled_isSet = !json[QString("auto_translation_enabled")].isNull() && m_auto_translation_enabled_isValid;

    m_auto_translation_language_isValid = ::OpenAPI::fromJsonValue(m_auto_translation_language, json[QString("auto_translation_language")]);
    m_auto_translation_language_isSet = !json[QString("auto_translation_language")].isNull() && m_auto_translation_language_isValid;

    m_cid_isValid = ::OpenAPI::fromJsonValue(m_cid, json[QString("cid")]);
    m_cid_isSet = !json[QString("cid")].isNull() && m_cid_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_cooldown_isValid = ::OpenAPI::fromJsonValue(m_cooldown, json[QString("cooldown")]);
    m_cooldown_isSet = !json[QString("cooldown")].isNull() && m_cooldown_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("deleted_at")]);
    m_deleted_at_isSet = !json[QString("deleted_at")].isNull() && m_deleted_at_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_frozen_isValid = ::OpenAPI::fromJsonValue(m_frozen, json[QString("frozen")]);
    m_frozen_isSet = !json[QString("frozen")].isNull() && m_frozen_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_hide_messages_before_isValid = ::OpenAPI::fromJsonValue(m_hide_messages_before, json[QString("hide_messages_before")]);
    m_hide_messages_before_isSet = !json[QString("hide_messages_before")].isNull() && m_hide_messages_before_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_message_at_isValid = ::OpenAPI::fromJsonValue(m_last_message_at, json[QString("last_message_at")]);
    m_last_message_at_isSet = !json[QString("last_message_at")].isNull() && m_last_message_at_isValid;

    m_member_count_isValid = ::OpenAPI::fromJsonValue(m_member_count, json[QString("member_count")]);
    m_member_count_isSet = !json[QString("member_count")].isNull() && m_member_count_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_mute_expires_at_isValid = ::OpenAPI::fromJsonValue(m_mute_expires_at, json[QString("mute_expires_at")]);
    m_mute_expires_at_isSet = !json[QString("mute_expires_at")].isNull() && m_mute_expires_at_isValid;

    m_muted_isValid = ::OpenAPI::fromJsonValue(m_muted, json[QString("muted")]);
    m_muted_isSet = !json[QString("muted")].isNull() && m_muted_isValid;

    m_own_capabilities_isValid = ::OpenAPI::fromJsonValue(m_own_capabilities, json[QString("own_capabilities")]);
    m_own_capabilities_isSet = !json[QString("own_capabilities")].isNull() && m_own_capabilities_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_truncated_at_isValid = ::OpenAPI::fromJsonValue(m_truncated_at, json[QString("truncated_at")]);
    m_truncated_at_isSet = !json[QString("truncated_at")].isNull() && m_truncated_at_isValid;

    m_truncated_by_isValid = ::OpenAPI::fromJsonValue(m_truncated_by, json[QString("truncated_by")]);
    m_truncated_by_isSet = !json[QString("truncated_by")].isNull() && m_truncated_by_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIChannelResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_translation_enabled_isSet) {
        obj.insert(QString("auto_translation_enabled"), ::OpenAPI::toJsonValue(m_auto_translation_enabled));
    }
    if (m_auto_translation_language_isSet) {
        obj.insert(QString("auto_translation_language"), ::OpenAPI::toJsonValue(m_auto_translation_language));
    }
    if (m_cid_isSet) {
        obj.insert(QString("cid"), ::OpenAPI::toJsonValue(m_cid));
    }
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_cooldown_isSet) {
        obj.insert(QString("cooldown"), ::OpenAPI::toJsonValue(m_cooldown));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_deleted_at_isSet) {
        obj.insert(QString("deleted_at"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_frozen_isSet) {
        obj.insert(QString("frozen"), ::OpenAPI::toJsonValue(m_frozen));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_hide_messages_before_isSet) {
        obj.insert(QString("hide_messages_before"), ::OpenAPI::toJsonValue(m_hide_messages_before));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_message_at_isSet) {
        obj.insert(QString("last_message_at"), ::OpenAPI::toJsonValue(m_last_message_at));
    }
    if (m_member_count_isSet) {
        obj.insert(QString("member_count"), ::OpenAPI::toJsonValue(m_member_count));
    }
    if (m_members.size() > 0) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_mute_expires_at_isSet) {
        obj.insert(QString("mute_expires_at"), ::OpenAPI::toJsonValue(m_mute_expires_at));
    }
    if (m_muted_isSet) {
        obj.insert(QString("muted"), ::OpenAPI::toJsonValue(m_muted));
    }
    if (m_own_capabilities.size() > 0) {
        obj.insert(QString("own_capabilities"), ::OpenAPI::toJsonValue(m_own_capabilities));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_truncated_at_isSet) {
        obj.insert(QString("truncated_at"), ::OpenAPI::toJsonValue(m_truncated_at));
    }
    if (m_truncated_by.isSet()) {
        obj.insert(QString("truncated_by"), ::OpenAPI::toJsonValue(m_truncated_by));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

bool OAIChannelResponse::isAutoTranslationEnabled() const {
    return m_auto_translation_enabled;
}
void OAIChannelResponse::setAutoTranslationEnabled(const bool &auto_translation_enabled) {
    m_auto_translation_enabled = auto_translation_enabled;
    m_auto_translation_enabled_isSet = true;
}

bool OAIChannelResponse::is_auto_translation_enabled_Set() const{
    return m_auto_translation_enabled_isSet;
}

bool OAIChannelResponse::is_auto_translation_enabled_Valid() const{
    return m_auto_translation_enabled_isValid;
}

QString OAIChannelResponse::getAutoTranslationLanguage() const {
    return m_auto_translation_language;
}
void OAIChannelResponse::setAutoTranslationLanguage(const QString &auto_translation_language) {
    m_auto_translation_language = auto_translation_language;
    m_auto_translation_language_isSet = true;
}

bool OAIChannelResponse::is_auto_translation_language_Set() const{
    return m_auto_translation_language_isSet;
}

bool OAIChannelResponse::is_auto_translation_language_Valid() const{
    return m_auto_translation_language_isValid;
}

QString OAIChannelResponse::getCid() const {
    return m_cid;
}
void OAIChannelResponse::setCid(const QString &cid) {
    m_cid = cid;
    m_cid_isSet = true;
}

bool OAIChannelResponse::is_cid_Set() const{
    return m_cid_isSet;
}

bool OAIChannelResponse::is_cid_Valid() const{
    return m_cid_isValid;
}

OAIChannelConfigWithInfo OAIChannelResponse::getConfig() const {
    return m_config;
}
void OAIChannelResponse::setConfig(const OAIChannelConfigWithInfo &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIChannelResponse::is_config_Set() const{
    return m_config_isSet;
}

bool OAIChannelResponse::is_config_Valid() const{
    return m_config_isValid;
}

qint32 OAIChannelResponse::getCooldown() const {
    return m_cooldown;
}
void OAIChannelResponse::setCooldown(const qint32 &cooldown) {
    m_cooldown = cooldown;
    m_cooldown_isSet = true;
}

bool OAIChannelResponse::is_cooldown_Set() const{
    return m_cooldown_isSet;
}

bool OAIChannelResponse::is_cooldown_Valid() const{
    return m_cooldown_isValid;
}

QDateTime OAIChannelResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIChannelResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIChannelResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIChannelResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIUserObject OAIChannelResponse::getCreatedBy() const {
    return m_created_by;
}
void OAIChannelResponse::setCreatedBy(const OAIUserObject &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIChannelResponse::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIChannelResponse::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIChannelResponse::getDeletedAt() const {
    return m_deleted_at;
}
void OAIChannelResponse::setDeletedAt(const QDateTime &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAIChannelResponse::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAIChannelResponse::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

bool OAIChannelResponse::isDisabled() const {
    return m_disabled;
}
void OAIChannelResponse::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIChannelResponse::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIChannelResponse::is_disabled_Valid() const{
    return m_disabled_isValid;
}

bool OAIChannelResponse::isFrozen() const {
    return m_frozen;
}
void OAIChannelResponse::setFrozen(const bool &frozen) {
    m_frozen = frozen;
    m_frozen_isSet = true;
}

bool OAIChannelResponse::is_frozen_Set() const{
    return m_frozen_isSet;
}

bool OAIChannelResponse::is_frozen_Valid() const{
    return m_frozen_isValid;
}

bool OAIChannelResponse::isHidden() const {
    return m_hidden;
}
void OAIChannelResponse::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAIChannelResponse::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAIChannelResponse::is_hidden_Valid() const{
    return m_hidden_isValid;
}

QDateTime OAIChannelResponse::getHideMessagesBefore() const {
    return m_hide_messages_before;
}
void OAIChannelResponse::setHideMessagesBefore(const QDateTime &hide_messages_before) {
    m_hide_messages_before = hide_messages_before;
    m_hide_messages_before_isSet = true;
}

bool OAIChannelResponse::is_hide_messages_before_Set() const{
    return m_hide_messages_before_isSet;
}

bool OAIChannelResponse::is_hide_messages_before_Valid() const{
    return m_hide_messages_before_isValid;
}

QString OAIChannelResponse::getId() const {
    return m_id;
}
void OAIChannelResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChannelResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChannelResponse::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIChannelResponse::getLastMessageAt() const {
    return m_last_message_at;
}
void OAIChannelResponse::setLastMessageAt(const QDateTime &last_message_at) {
    m_last_message_at = last_message_at;
    m_last_message_at_isSet = true;
}

bool OAIChannelResponse::is_last_message_at_Set() const{
    return m_last_message_at_isSet;
}

bool OAIChannelResponse::is_last_message_at_Valid() const{
    return m_last_message_at_isValid;
}

qint32 OAIChannelResponse::getMemberCount() const {
    return m_member_count;
}
void OAIChannelResponse::setMemberCount(const qint32 &member_count) {
    m_member_count = member_count;
    m_member_count_isSet = true;
}

bool OAIChannelResponse::is_member_count_Set() const{
    return m_member_count_isSet;
}

bool OAIChannelResponse::is_member_count_Valid() const{
    return m_member_count_isValid;
}

QList<OAIChannelMember> OAIChannelResponse::getMembers() const {
    return m_members;
}
void OAIChannelResponse::setMembers(const QList<OAIChannelMember> &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIChannelResponse::is_members_Set() const{
    return m_members_isSet;
}

bool OAIChannelResponse::is_members_Valid() const{
    return m_members_isValid;
}

QDateTime OAIChannelResponse::getMuteExpiresAt() const {
    return m_mute_expires_at;
}
void OAIChannelResponse::setMuteExpiresAt(const QDateTime &mute_expires_at) {
    m_mute_expires_at = mute_expires_at;
    m_mute_expires_at_isSet = true;
}

bool OAIChannelResponse::is_mute_expires_at_Set() const{
    return m_mute_expires_at_isSet;
}

bool OAIChannelResponse::is_mute_expires_at_Valid() const{
    return m_mute_expires_at_isValid;
}

bool OAIChannelResponse::isMuted() const {
    return m_muted;
}
void OAIChannelResponse::setMuted(const bool &muted) {
    m_muted = muted;
    m_muted_isSet = true;
}

bool OAIChannelResponse::is_muted_Set() const{
    return m_muted_isSet;
}

bool OAIChannelResponse::is_muted_Valid() const{
    return m_muted_isValid;
}

QList<QString> OAIChannelResponse::getOwnCapabilities() const {
    return m_own_capabilities;
}
void OAIChannelResponse::setOwnCapabilities(const QList<QString> &own_capabilities) {
    m_own_capabilities = own_capabilities;
    m_own_capabilities_isSet = true;
}

bool OAIChannelResponse::is_own_capabilities_Set() const{
    return m_own_capabilities_isSet;
}

bool OAIChannelResponse::is_own_capabilities_Valid() const{
    return m_own_capabilities_isValid;
}

QString OAIChannelResponse::getTeam() const {
    return m_team;
}
void OAIChannelResponse::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIChannelResponse::is_team_Set() const{
    return m_team_isSet;
}

bool OAIChannelResponse::is_team_Valid() const{
    return m_team_isValid;
}

QDateTime OAIChannelResponse::getTruncatedAt() const {
    return m_truncated_at;
}
void OAIChannelResponse::setTruncatedAt(const QDateTime &truncated_at) {
    m_truncated_at = truncated_at;
    m_truncated_at_isSet = true;
}

bool OAIChannelResponse::is_truncated_at_Set() const{
    return m_truncated_at_isSet;
}

bool OAIChannelResponse::is_truncated_at_Valid() const{
    return m_truncated_at_isValid;
}

OAIUserObject OAIChannelResponse::getTruncatedBy() const {
    return m_truncated_by;
}
void OAIChannelResponse::setTruncatedBy(const OAIUserObject &truncated_by) {
    m_truncated_by = truncated_by;
    m_truncated_by_isSet = true;
}

bool OAIChannelResponse::is_truncated_by_Set() const{
    return m_truncated_by_isSet;
}

bool OAIChannelResponse::is_truncated_by_Valid() const{
    return m_truncated_by_isValid;
}

QString OAIChannelResponse::getType() const {
    return m_type;
}
void OAIChannelResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChannelResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChannelResponse::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIChannelResponse::getUpdatedAt() const {
    return m_updated_at;
}
void OAIChannelResponse::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIChannelResponse::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIChannelResponse::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIChannelResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_translation_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_translation_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cooldown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frozen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_messages_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_message_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mute_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_muted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_own_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truncated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truncated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cid_isValid && m_disabled_isValid && m_frozen_isValid && m_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
