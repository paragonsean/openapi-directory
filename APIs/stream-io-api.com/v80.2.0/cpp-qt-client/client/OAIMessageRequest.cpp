/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageRequest::OAIMessageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageRequest::OAIMessageRequest() {
    this->initializeModel();
}

OAIMessageRequest::~OAIMessageRequest() {}

void OAIMessageRequest::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_cid_isSet = false;
    m_cid_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mentioned_users_isSet = false;
    m_mentioned_users_isValid = false;

    m_mml_isSet = false;
    m_mml_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_pin_expires_isSet = false;
    m_pin_expires_isValid = false;

    m_pinned_isSet = false;
    m_pinned_isValid = false;

    m_pinned_at_isSet = false;
    m_pinned_at_isValid = false;

    m_pinned_by_isSet = false;
    m_pinned_by_isValid = false;

    m_quoted_message_id_isSet = false;
    m_quoted_message_id_isValid = false;

    m_reaction_scores_isSet = false;
    m_reaction_scores_isValid = false;

    m_show_in_channel_isSet = false;
    m_show_in_channel_isValid = false;

    m_silent_isSet = false;
    m_silent_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIMessageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageRequest::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_cid_isValid = ::OpenAPI::fromJsonValue(m_cid, json[QString("cid")]);
    m_cid_isSet = !json[QString("cid")].isNull() && m_cid_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mentioned_users_isValid = ::OpenAPI::fromJsonValue(m_mentioned_users, json[QString("mentioned_users")]);
    m_mentioned_users_isSet = !json[QString("mentioned_users")].isNull() && m_mentioned_users_isValid;

    m_mml_isValid = ::OpenAPI::fromJsonValue(m_mml, json[QString("mml")]);
    m_mml_isSet = !json[QString("mml")].isNull() && m_mml_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parent_id")]);
    m_parent_id_isSet = !json[QString("parent_id")].isNull() && m_parent_id_isValid;

    m_pin_expires_isValid = ::OpenAPI::fromJsonValue(m_pin_expires, json[QString("pin_expires")]);
    m_pin_expires_isSet = !json[QString("pin_expires")].isNull() && m_pin_expires_isValid;

    m_pinned_isValid = ::OpenAPI::fromJsonValue(m_pinned, json[QString("pinned")]);
    m_pinned_isSet = !json[QString("pinned")].isNull() && m_pinned_isValid;

    m_pinned_at_isValid = ::OpenAPI::fromJsonValue(m_pinned_at, json[QString("pinned_at")]);
    m_pinned_at_isSet = !json[QString("pinned_at")].isNull() && m_pinned_at_isValid;

    m_pinned_by_isValid = ::OpenAPI::fromJsonValue(m_pinned_by, json[QString("pinned_by")]);
    m_pinned_by_isSet = !json[QString("pinned_by")].isNull() && m_pinned_by_isValid;

    m_quoted_message_id_isValid = ::OpenAPI::fromJsonValue(m_quoted_message_id, json[QString("quoted_message_id")]);
    m_quoted_message_id_isSet = !json[QString("quoted_message_id")].isNull() && m_quoted_message_id_isValid;

    m_reaction_scores_isValid = ::OpenAPI::fromJsonValue(m_reaction_scores, json[QString("reaction_scores")]);
    m_reaction_scores_isSet = !json[QString("reaction_scores")].isNull() && m_reaction_scores_isValid;

    m_show_in_channel_isValid = ::OpenAPI::fromJsonValue(m_show_in_channel, json[QString("show_in_channel")]);
    m_show_in_channel_isSet = !json[QString("show_in_channel")].isNull() && m_show_in_channel_isValid;

    m_silent_isValid = ::OpenAPI::fromJsonValue(m_silent, json[QString("silent")]);
    m_silent_isSet = !json[QString("silent")].isNull() && m_silent_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIMessageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_cid.size() > 0) {
        obj.insert(QString("cid"), ::OpenAPI::toJsonValue(m_cid));
    }
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mentioned_users.size() > 0) {
        obj.insert(QString("mentioned_users"), ::OpenAPI::toJsonValue(m_mentioned_users));
    }
    if (m_mml_isSet) {
        obj.insert(QString("mml"), ::OpenAPI::toJsonValue(m_mml));
    }
    if (m_parent.size() > 0) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parent_id"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_pin_expires_isSet) {
        obj.insert(QString("pin_expires"), ::OpenAPI::toJsonValue(m_pin_expires));
    }
    if (m_pinned_isSet) {
        obj.insert(QString("pinned"), ::OpenAPI::toJsonValue(m_pinned));
    }
    if (m_pinned_at_isSet) {
        obj.insert(QString("pinned_at"), ::OpenAPI::toJsonValue(m_pinned_at));
    }
    if (m_pinned_by.size() > 0) {
        obj.insert(QString("pinned_by"), ::OpenAPI::toJsonValue(m_pinned_by));
    }
    if (m_quoted_message_id_isSet) {
        obj.insert(QString("quoted_message_id"), ::OpenAPI::toJsonValue(m_quoted_message_id));
    }
    if (m_reaction_scores.size() > 0) {
        obj.insert(QString("reaction_scores"), ::OpenAPI::toJsonValue(m_reaction_scores));
    }
    if (m_show_in_channel_isSet) {
        obj.insert(QString("show_in_channel"), ::OpenAPI::toJsonValue(m_show_in_channel));
    }
    if (m_silent_isSet) {
        obj.insert(QString("silent"), ::OpenAPI::toJsonValue(m_silent));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QList<OAIAttachmentRequest> OAIMessageRequest::getAttachments() const {
    return m_attachments;
}
void OAIMessageRequest::setAttachments(const QList<OAIAttachmentRequest> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIMessageRequest::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIMessageRequest::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QList<qint32> OAIMessageRequest::getCid() const {
    return m_cid;
}
void OAIMessageRequest::setCid(const QList<qint32> &cid) {
    m_cid = cid;
    m_cid_isSet = true;
}

bool OAIMessageRequest::is_cid_Set() const{
    return m_cid_isSet;
}

bool OAIMessageRequest::is_cid_Valid() const{
    return m_cid_isValid;
}

QString OAIMessageRequest::getHtml() const {
    return m_html;
}
void OAIMessageRequest::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIMessageRequest::is_html_Set() const{
    return m_html_isSet;
}

bool OAIMessageRequest::is_html_Valid() const{
    return m_html_isValid;
}

QString OAIMessageRequest::getId() const {
    return m_id;
}
void OAIMessageRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMessageRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMessageRequest::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIMessageRequest::getMentionedUsers() const {
    return m_mentioned_users;
}
void OAIMessageRequest::setMentionedUsers(const QList<QString> &mentioned_users) {
    m_mentioned_users = mentioned_users;
    m_mentioned_users_isSet = true;
}

bool OAIMessageRequest::is_mentioned_users_Set() const{
    return m_mentioned_users_isSet;
}

bool OAIMessageRequest::is_mentioned_users_Valid() const{
    return m_mentioned_users_isValid;
}

QString OAIMessageRequest::getMml() const {
    return m_mml;
}
void OAIMessageRequest::setMml(const QString &mml) {
    m_mml = mml;
    m_mml_isSet = true;
}

bool OAIMessageRequest::is_mml_Set() const{
    return m_mml_isSet;
}

bool OAIMessageRequest::is_mml_Valid() const{
    return m_mml_isValid;
}

QList<qint32> OAIMessageRequest::getParent() const {
    return m_parent;
}
void OAIMessageRequest::setParent(const QList<qint32> &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIMessageRequest::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIMessageRequest::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAIMessageRequest::getParentId() const {
    return m_parent_id;
}
void OAIMessageRequest::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIMessageRequest::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIMessageRequest::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QDateTime OAIMessageRequest::getPinExpires() const {
    return m_pin_expires;
}
void OAIMessageRequest::setPinExpires(const QDateTime &pin_expires) {
    m_pin_expires = pin_expires;
    m_pin_expires_isSet = true;
}

bool OAIMessageRequest::is_pin_expires_Set() const{
    return m_pin_expires_isSet;
}

bool OAIMessageRequest::is_pin_expires_Valid() const{
    return m_pin_expires_isValid;
}

bool OAIMessageRequest::isPinned() const {
    return m_pinned;
}
void OAIMessageRequest::setPinned(const bool &pinned) {
    m_pinned = pinned;
    m_pinned_isSet = true;
}

bool OAIMessageRequest::is_pinned_Set() const{
    return m_pinned_isSet;
}

bool OAIMessageRequest::is_pinned_Valid() const{
    return m_pinned_isValid;
}

QDateTime OAIMessageRequest::getPinnedAt() const {
    return m_pinned_at;
}
void OAIMessageRequest::setPinnedAt(const QDateTime &pinned_at) {
    m_pinned_at = pinned_at;
    m_pinned_at_isSet = true;
}

bool OAIMessageRequest::is_pinned_at_Set() const{
    return m_pinned_at_isSet;
}

bool OAIMessageRequest::is_pinned_at_Valid() const{
    return m_pinned_at_isValid;
}

QList<qint32> OAIMessageRequest::getPinnedBy() const {
    return m_pinned_by;
}
void OAIMessageRequest::setPinnedBy(const QList<qint32> &pinned_by) {
    m_pinned_by = pinned_by;
    m_pinned_by_isSet = true;
}

bool OAIMessageRequest::is_pinned_by_Set() const{
    return m_pinned_by_isSet;
}

bool OAIMessageRequest::is_pinned_by_Valid() const{
    return m_pinned_by_isValid;
}

QString OAIMessageRequest::getQuotedMessageId() const {
    return m_quoted_message_id;
}
void OAIMessageRequest::setQuotedMessageId(const QString &quoted_message_id) {
    m_quoted_message_id = quoted_message_id;
    m_quoted_message_id_isSet = true;
}

bool OAIMessageRequest::is_quoted_message_id_Set() const{
    return m_quoted_message_id_isSet;
}

bool OAIMessageRequest::is_quoted_message_id_Valid() const{
    return m_quoted_message_id_isValid;
}

QList<qint32> OAIMessageRequest::getReactionScores() const {
    return m_reaction_scores;
}
void OAIMessageRequest::setReactionScores(const QList<qint32> &reaction_scores) {
    m_reaction_scores = reaction_scores;
    m_reaction_scores_isSet = true;
}

bool OAIMessageRequest::is_reaction_scores_Set() const{
    return m_reaction_scores_isSet;
}

bool OAIMessageRequest::is_reaction_scores_Valid() const{
    return m_reaction_scores_isValid;
}

bool OAIMessageRequest::isShowInChannel() const {
    return m_show_in_channel;
}
void OAIMessageRequest::setShowInChannel(const bool &show_in_channel) {
    m_show_in_channel = show_in_channel;
    m_show_in_channel_isSet = true;
}

bool OAIMessageRequest::is_show_in_channel_Set() const{
    return m_show_in_channel_isSet;
}

bool OAIMessageRequest::is_show_in_channel_Valid() const{
    return m_show_in_channel_isValid;
}

bool OAIMessageRequest::isSilent() const {
    return m_silent;
}
void OAIMessageRequest::setSilent(const bool &silent) {
    m_silent = silent;
    m_silent_isSet = true;
}

bool OAIMessageRequest::is_silent_Set() const{
    return m_silent_isSet;
}

bool OAIMessageRequest::is_silent_Valid() const{
    return m_silent_isValid;
}

QString OAIMessageRequest::getText() const {
    return m_text;
}
void OAIMessageRequest::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIMessageRequest::is_text_Set() const{
    return m_text_isSet;
}

bool OAIMessageRequest::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIMessageRequest::getType() const {
    return m_type;
}
void OAIMessageRequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMessageRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMessageRequest::is_type_Valid() const{
    return m_type_isValid;
}

OAIUserObjectRequest OAIMessageRequest::getUser() const {
    return m_user;
}
void OAIMessageRequest::setUser(const OAIUserObjectRequest &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIMessageRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAIMessageRequest::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIMessageRequest::getUserId() const {
    return m_user_id;
}
void OAIMessageRequest::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIMessageRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIMessageRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIMessageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cid.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentioned_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quoted_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reaction_scores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_in_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_silent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attachments_isValid && true;
}

} // namespace OpenAPI
