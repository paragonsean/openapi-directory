/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteChannelsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteChannelsRequest::OAIDeleteChannelsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteChannelsRequest::OAIDeleteChannelsRequest() {
    this->initializeModel();
}

OAIDeleteChannelsRequest::~OAIDeleteChannelsRequest() {}

void OAIDeleteChannelsRequest::initializeModel() {

    m_cids_isSet = false;
    m_cids_isValid = false;

    m_hard_delete_isSet = false;
    m_hard_delete_isValid = false;
}

void OAIDeleteChannelsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteChannelsRequest::fromJsonObject(QJsonObject json) {

    m_cids_isValid = ::OpenAPI::fromJsonValue(m_cids, json[QString("cids")]);
    m_cids_isSet = !json[QString("cids")].isNull() && m_cids_isValid;

    m_hard_delete_isValid = ::OpenAPI::fromJsonValue(m_hard_delete, json[QString("hard_delete")]);
    m_hard_delete_isSet = !json[QString("hard_delete")].isNull() && m_hard_delete_isValid;
}

QString OAIDeleteChannelsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteChannelsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cids.size() > 0) {
        obj.insert(QString("cids"), ::OpenAPI::toJsonValue(m_cids));
    }
    if (m_hard_delete_isSet) {
        obj.insert(QString("hard_delete"), ::OpenAPI::toJsonValue(m_hard_delete));
    }
    return obj;
}

QList<QString> OAIDeleteChannelsRequest::getCids() const {
    return m_cids;
}
void OAIDeleteChannelsRequest::setCids(const QList<QString> &cids) {
    m_cids = cids;
    m_cids_isSet = true;
}

bool OAIDeleteChannelsRequest::is_cids_Set() const{
    return m_cids_isSet;
}

bool OAIDeleteChannelsRequest::is_cids_Valid() const{
    return m_cids_isValid;
}

bool OAIDeleteChannelsRequest::isHardDelete() const {
    return m_hard_delete;
}
void OAIDeleteChannelsRequest::setHardDelete(const bool &hard_delete) {
    m_hard_delete = hard_delete;
    m_hard_delete_isSet = true;
}

bool OAIDeleteChannelsRequest::is_hard_delete_Set() const{
    return m_hard_delete_isSet;
}

bool OAIDeleteChannelsRequest::is_hard_delete_Valid() const{
    return m_hard_delete_isValid;
}

bool OAIDeleteChannelsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hard_delete_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteChannelsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
