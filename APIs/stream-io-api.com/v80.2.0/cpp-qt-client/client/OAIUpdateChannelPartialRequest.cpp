/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateChannelPartialRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateChannelPartialRequest::OAIUpdateChannelPartialRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateChannelPartialRequest::OAIUpdateChannelPartialRequest() {
    this->initializeModel();
}

OAIUpdateChannelPartialRequest::~OAIUpdateChannelPartialRequest() {}

void OAIUpdateChannelPartialRequest::initializeModel() {

    m_r_set_isSet = false;
    m_r_set_isValid = false;

    m_unset_isSet = false;
    m_unset_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIUpdateChannelPartialRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateChannelPartialRequest::fromJsonObject(QJsonObject json) {

    m_r_set_isValid = ::OpenAPI::fromJsonValue(m_r_set, json[QString("set")]);
    m_r_set_isSet = !json[QString("set")].isNull() && m_r_set_isValid;

    m_unset_isValid = ::OpenAPI::fromJsonValue(m_unset, json[QString("unset")]);
    m_unset_isSet = !json[QString("unset")].isNull() && m_unset_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIUpdateChannelPartialRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateChannelPartialRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_r_set.size() > 0) {
        obj.insert(QString("set"), ::OpenAPI::toJsonValue(m_r_set));
    }
    if (m_unset.size() > 0) {
        obj.insert(QString("unset"), ::OpenAPI::toJsonValue(m_unset));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIUpdateChannelPartialRequest::getRSet() const {
    return m_r_set;
}
void OAIUpdateChannelPartialRequest::setRSet(const QMap<QString, QJsonValue> &r_set) {
    m_r_set = r_set;
    m_r_set_isSet = true;
}

bool OAIUpdateChannelPartialRequest::is_r_set_Set() const{
    return m_r_set_isSet;
}

bool OAIUpdateChannelPartialRequest::is_r_set_Valid() const{
    return m_r_set_isValid;
}

QList<QString> OAIUpdateChannelPartialRequest::getUnset() const {
    return m_unset;
}
void OAIUpdateChannelPartialRequest::setUnset(const QList<QString> &unset) {
    m_unset = unset;
    m_unset_isSet = true;
}

bool OAIUpdateChannelPartialRequest::is_unset_Set() const{
    return m_unset_isSet;
}

bool OAIUpdateChannelPartialRequest::is_unset_Valid() const{
    return m_unset_isValid;
}

OAIUserObjectRequest OAIUpdateChannelPartialRequest::getUser() const {
    return m_user;
}
void OAIUpdateChannelPartialRequest::setUser(const OAIUserObjectRequest &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIUpdateChannelPartialRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAIUpdateChannelPartialRequest::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIUpdateChannelPartialRequest::getUserId() const {
    return m_user_id;
}
void OAIUpdateChannelPartialRequest::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUpdateChannelPartialRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUpdateChannelPartialRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIUpdateChannelPartialRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_set.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unset.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateChannelPartialRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_r_set_isValid && m_unset_isValid && true;
}

} // namespace OpenAPI
