/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetManyMessagesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetManyMessagesResponse::OAIGetManyMessagesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetManyMessagesResponse::OAIGetManyMessagesResponse() {
    this->initializeModel();
}

OAIGetManyMessagesResponse::~OAIGetManyMessagesResponse() {}

void OAIGetManyMessagesResponse::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;
}

void OAIGetManyMessagesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetManyMessagesResponse::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;
}

QString OAIGetManyMessagesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetManyMessagesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    return obj;
}

QString OAIGetManyMessagesResponse::getDuration() const {
    return m_duration;
}
void OAIGetManyMessagesResponse::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIGetManyMessagesResponse::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIGetManyMessagesResponse::is_duration_Valid() const{
    return m_duration_isValid;
}

QList<OAIMessage> OAIGetManyMessagesResponse::getMessages() const {
    return m_messages;
}
void OAIGetManyMessagesResponse::setMessages(const QList<OAIMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIGetManyMessagesResponse::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIGetManyMessagesResponse::is_messages_Valid() const{
    return m_messages_isValid;
}

bool OAIGetManyMessagesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetManyMessagesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_duration_isValid && m_messages_isValid && true;
}

} // namespace OpenAPI
