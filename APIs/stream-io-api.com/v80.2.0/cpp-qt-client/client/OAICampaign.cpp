/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICampaign.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICampaign::OAICampaign(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICampaign::OAICampaign() {
    this->initializeModel();
}

OAICampaign::~OAICampaign() {}

void OAICampaign::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_channel_type_isSet = false;
    m_channel_type_isValid = false;

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_defaults_isSet = false;
    m_defaults_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_errored_messages_isSet = false;
    m_errored_messages_isValid = false;

    m_failed_at_isSet = false;
    m_failed_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resumed_at_isSet = false;
    m_resumed_at_isValid = false;

    m_scheduled_at_isSet = false;
    m_scheduled_at_isValid = false;

    m_scheduled_for_isSet = false;
    m_scheduled_for_isValid = false;

    m_segment_id_isSet = false;
    m_segment_id_isValid = false;

    m_sender_id_isSet = false;
    m_sender_id_isValid = false;

    m_sent_messages_isSet = false;
    m_sent_messages_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_stopped_at_isSet = false;
    m_stopped_at_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAICampaign::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICampaign::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_channel_type_isValid = ::OpenAPI::fromJsonValue(m_channel_type, json[QString("channel_type")]);
    m_channel_type_isSet = !json[QString("channel_type")].isNull() && m_channel_type_isValid;

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("completed_at")]);
    m_completed_at_isSet = !json[QString("completed_at")].isNull() && m_completed_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_defaults_isValid = ::OpenAPI::fromJsonValue(m_defaults, json[QString("defaults")]);
    m_defaults_isSet = !json[QString("defaults")].isNull() && m_defaults_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_errored_messages_isValid = ::OpenAPI::fromJsonValue(m_errored_messages, json[QString("errored_messages")]);
    m_errored_messages_isSet = !json[QString("errored_messages")].isNull() && m_errored_messages_isValid;

    m_failed_at_isValid = ::OpenAPI::fromJsonValue(m_failed_at, json[QString("failed_at")]);
    m_failed_at_isSet = !json[QString("failed_at")].isNull() && m_failed_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resumed_at_isValid = ::OpenAPI::fromJsonValue(m_resumed_at, json[QString("resumed_at")]);
    m_resumed_at_isSet = !json[QString("resumed_at")].isNull() && m_resumed_at_isValid;

    m_scheduled_at_isValid = ::OpenAPI::fromJsonValue(m_scheduled_at, json[QString("scheduled_at")]);
    m_scheduled_at_isSet = !json[QString("scheduled_at")].isNull() && m_scheduled_at_isValid;

    m_scheduled_for_isValid = ::OpenAPI::fromJsonValue(m_scheduled_for, json[QString("scheduled_for")]);
    m_scheduled_for_isSet = !json[QString("scheduled_for")].isNull() && m_scheduled_for_isValid;

    m_segment_id_isValid = ::OpenAPI::fromJsonValue(m_segment_id, json[QString("segment_id")]);
    m_segment_id_isSet = !json[QString("segment_id")].isNull() && m_segment_id_isValid;

    m_sender_id_isValid = ::OpenAPI::fromJsonValue(m_sender_id, json[QString("sender_id")]);
    m_sender_id_isSet = !json[QString("sender_id")].isNull() && m_sender_id_isValid;

    m_sent_messages_isValid = ::OpenAPI::fromJsonValue(m_sent_messages, json[QString("sent_messages")]);
    m_sent_messages_isSet = !json[QString("sent_messages")].isNull() && m_sent_messages_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_stopped_at_isValid = ::OpenAPI::fromJsonValue(m_stopped_at, json[QString("stopped_at")]);
    m_stopped_at_isSet = !json[QString("stopped_at")].isNull() && m_stopped_at_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("task_id")]);
    m_task_id_isSet = !json[QString("task_id")].isNull() && m_task_id_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAICampaign::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICampaign::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_channel_type_isSet) {
        obj.insert(QString("channel_type"), ::OpenAPI::toJsonValue(m_channel_type));
    }
    if (m_completed_at_isSet) {
        obj.insert(QString("completed_at"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_defaults.size() > 0) {
        obj.insert(QString("defaults"), ::OpenAPI::toJsonValue(m_defaults));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_errored_messages_isSet) {
        obj.insert(QString("errored_messages"), ::OpenAPI::toJsonValue(m_errored_messages));
    }
    if (m_failed_at_isSet) {
        obj.insert(QString("failed_at"), ::OpenAPI::toJsonValue(m_failed_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resumed_at_isSet) {
        obj.insert(QString("resumed_at"), ::OpenAPI::toJsonValue(m_resumed_at));
    }
    if (m_scheduled_at_isSet) {
        obj.insert(QString("scheduled_at"), ::OpenAPI::toJsonValue(m_scheduled_at));
    }
    if (m_scheduled_for_isSet) {
        obj.insert(QString("scheduled_for"), ::OpenAPI::toJsonValue(m_scheduled_for));
    }
    if (m_segment_id_isSet) {
        obj.insert(QString("segment_id"), ::OpenAPI::toJsonValue(m_segment_id));
    }
    if (m_sender_id_isSet) {
        obj.insert(QString("sender_id"), ::OpenAPI::toJsonValue(m_sender_id));
    }
    if (m_sent_messages_isSet) {
        obj.insert(QString("sent_messages"), ::OpenAPI::toJsonValue(m_sent_messages));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_stopped_at_isSet) {
        obj.insert(QString("stopped_at"), ::OpenAPI::toJsonValue(m_stopped_at));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("task_id"), ::OpenAPI::toJsonValue(m_task_id));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QList<OAIAttachment> OAICampaign::getAttachments() const {
    return m_attachments;
}
void OAICampaign::setAttachments(const QList<OAIAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAICampaign::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAICampaign::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAICampaign::getChannelType() const {
    return m_channel_type;
}
void OAICampaign::setChannelType(const QString &channel_type) {
    m_channel_type = channel_type;
    m_channel_type_isSet = true;
}

bool OAICampaign::is_channel_type_Set() const{
    return m_channel_type_isSet;
}

bool OAICampaign::is_channel_type_Valid() const{
    return m_channel_type_isValid;
}

QDateTime OAICampaign::getCompletedAt() const {
    return m_completed_at;
}
void OAICampaign::setCompletedAt(const QDateTime &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAICampaign::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAICampaign::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

QDateTime OAICampaign::getCreatedAt() const {
    return m_created_at;
}
void OAICampaign::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICampaign::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICampaign::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QMap<QString, QString> OAICampaign::getDefaults() const {
    return m_defaults;
}
void OAICampaign::setDefaults(const QMap<QString, QString> &defaults) {
    m_defaults = defaults;
    m_defaults_isSet = true;
}

bool OAICampaign::is_defaults_Set() const{
    return m_defaults_isSet;
}

bool OAICampaign::is_defaults_Valid() const{
    return m_defaults_isValid;
}

QString OAICampaign::getDescription() const {
    return m_description;
}
void OAICampaign::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICampaign::is_description_Set() const{
    return m_description_isSet;
}

bool OAICampaign::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICampaign::getDetails() const {
    return m_details;
}
void OAICampaign::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAICampaign::is_details_Set() const{
    return m_details_isSet;
}

bool OAICampaign::is_details_Valid() const{
    return m_details_isValid;
}

qint32 OAICampaign::getErroredMessages() const {
    return m_errored_messages;
}
void OAICampaign::setErroredMessages(const qint32 &errored_messages) {
    m_errored_messages = errored_messages;
    m_errored_messages_isSet = true;
}

bool OAICampaign::is_errored_messages_Set() const{
    return m_errored_messages_isSet;
}

bool OAICampaign::is_errored_messages_Valid() const{
    return m_errored_messages_isValid;
}

QDateTime OAICampaign::getFailedAt() const {
    return m_failed_at;
}
void OAICampaign::setFailedAt(const QDateTime &failed_at) {
    m_failed_at = failed_at;
    m_failed_at_isSet = true;
}

bool OAICampaign::is_failed_at_Set() const{
    return m_failed_at_isSet;
}

bool OAICampaign::is_failed_at_Valid() const{
    return m_failed_at_isValid;
}

QString OAICampaign::getId() const {
    return m_id;
}
void OAICampaign::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICampaign::is_id_Set() const{
    return m_id_isSet;
}

bool OAICampaign::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICampaign::getName() const {
    return m_name;
}
void OAICampaign::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICampaign::is_name_Set() const{
    return m_name_isSet;
}

bool OAICampaign::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAICampaign::getResumedAt() const {
    return m_resumed_at;
}
void OAICampaign::setResumedAt(const QDateTime &resumed_at) {
    m_resumed_at = resumed_at;
    m_resumed_at_isSet = true;
}

bool OAICampaign::is_resumed_at_Set() const{
    return m_resumed_at_isSet;
}

bool OAICampaign::is_resumed_at_Valid() const{
    return m_resumed_at_isValid;
}

QDateTime OAICampaign::getScheduledAt() const {
    return m_scheduled_at;
}
void OAICampaign::setScheduledAt(const QDateTime &scheduled_at) {
    m_scheduled_at = scheduled_at;
    m_scheduled_at_isSet = true;
}

bool OAICampaign::is_scheduled_at_Set() const{
    return m_scheduled_at_isSet;
}

bool OAICampaign::is_scheduled_at_Valid() const{
    return m_scheduled_at_isValid;
}

QDateTime OAICampaign::getScheduledFor() const {
    return m_scheduled_for;
}
void OAICampaign::setScheduledFor(const QDateTime &scheduled_for) {
    m_scheduled_for = scheduled_for;
    m_scheduled_for_isSet = true;
}

bool OAICampaign::is_scheduled_for_Set() const{
    return m_scheduled_for_isSet;
}

bool OAICampaign::is_scheduled_for_Valid() const{
    return m_scheduled_for_isValid;
}

QString OAICampaign::getSegmentId() const {
    return m_segment_id;
}
void OAICampaign::setSegmentId(const QString &segment_id) {
    m_segment_id = segment_id;
    m_segment_id_isSet = true;
}

bool OAICampaign::is_segment_id_Set() const{
    return m_segment_id_isSet;
}

bool OAICampaign::is_segment_id_Valid() const{
    return m_segment_id_isValid;
}

QString OAICampaign::getSenderId() const {
    return m_sender_id;
}
void OAICampaign::setSenderId(const QString &sender_id) {
    m_sender_id = sender_id;
    m_sender_id_isSet = true;
}

bool OAICampaign::is_sender_id_Set() const{
    return m_sender_id_isSet;
}

bool OAICampaign::is_sender_id_Valid() const{
    return m_sender_id_isValid;
}

qint32 OAICampaign::getSentMessages() const {
    return m_sent_messages;
}
void OAICampaign::setSentMessages(const qint32 &sent_messages) {
    m_sent_messages = sent_messages;
    m_sent_messages_isSet = true;
}

bool OAICampaign::is_sent_messages_Set() const{
    return m_sent_messages_isSet;
}

bool OAICampaign::is_sent_messages_Valid() const{
    return m_sent_messages_isValid;
}

QString OAICampaign::getStatus() const {
    return m_status;
}
void OAICampaign::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICampaign::is_status_Set() const{
    return m_status_isSet;
}

bool OAICampaign::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAICampaign::getStoppedAt() const {
    return m_stopped_at;
}
void OAICampaign::setStoppedAt(const QDateTime &stopped_at) {
    m_stopped_at = stopped_at;
    m_stopped_at_isSet = true;
}

bool OAICampaign::is_stopped_at_Set() const{
    return m_stopped_at_isSet;
}

bool OAICampaign::is_stopped_at_Valid() const{
    return m_stopped_at_isValid;
}

QString OAICampaign::getTaskId() const {
    return m_task_id;
}
void OAICampaign::setTaskId(const QString &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAICampaign::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAICampaign::is_task_id_Valid() const{
    return m_task_id_isValid;
}

QString OAICampaign::getText() const {
    return m_text;
}
void OAICampaign::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAICampaign::is_text_Set() const{
    return m_text_isSet;
}

bool OAICampaign::is_text_Valid() const{
    return m_text_isValid;
}

QDateTime OAICampaign::getUpdatedAt() const {
    return m_updated_at;
}
void OAICampaign::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICampaign::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICampaign::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAICampaign::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defaults.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errored_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resumed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_for_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stopped_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICampaign::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attachments_isValid && m_channel_type_isValid && m_created_at_isValid && m_defaults_isValid && m_description_isValid && m_id_isValid && m_name_isValid && m_segment_id_isValid && m_sender_id_isValid && m_text_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
