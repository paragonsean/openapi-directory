/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelMember.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelMember::OAIChannelMember(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelMember::OAIChannelMember() {
    this->initializeModel();
}

OAIChannelMember::~OAIChannelMember() {}

void OAIChannelMember::initializeModel() {

    m_ban_expires_isSet = false;
    m_ban_expires_isValid = false;

    m_banned_isSet = false;
    m_banned_isValid = false;

    m_channel_role_isSet = false;
    m_channel_role_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;

    m_invite_accepted_at_isSet = false;
    m_invite_accepted_at_isValid = false;

    m_invite_rejected_at_isSet = false;
    m_invite_rejected_at_isValid = false;

    m_invited_isSet = false;
    m_invited_isValid = false;

    m_is_moderator_isSet = false;
    m_is_moderator_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_shadow_banned_isSet = false;
    m_shadow_banned_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIChannelMember::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelMember::fromJsonObject(QJsonObject json) {

    m_ban_expires_isValid = ::OpenAPI::fromJsonValue(m_ban_expires, json[QString("ban_expires")]);
    m_ban_expires_isSet = !json[QString("ban_expires")].isNull() && m_ban_expires_isValid;

    m_banned_isValid = ::OpenAPI::fromJsonValue(m_banned, json[QString("banned")]);
    m_banned_isSet = !json[QString("banned")].isNull() && m_banned_isValid;

    m_channel_role_isValid = ::OpenAPI::fromJsonValue(m_channel_role, json[QString("channel_role")]);
    m_channel_role_isSet = !json[QString("channel_role")].isNull() && m_channel_role_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("deleted_at")]);
    m_deleted_at_isSet = !json[QString("deleted_at")].isNull() && m_deleted_at_isValid;

    m_invite_accepted_at_isValid = ::OpenAPI::fromJsonValue(m_invite_accepted_at, json[QString("invite_accepted_at")]);
    m_invite_accepted_at_isSet = !json[QString("invite_accepted_at")].isNull() && m_invite_accepted_at_isValid;

    m_invite_rejected_at_isValid = ::OpenAPI::fromJsonValue(m_invite_rejected_at, json[QString("invite_rejected_at")]);
    m_invite_rejected_at_isSet = !json[QString("invite_rejected_at")].isNull() && m_invite_rejected_at_isValid;

    m_invited_isValid = ::OpenAPI::fromJsonValue(m_invited, json[QString("invited")]);
    m_invited_isSet = !json[QString("invited")].isNull() && m_invited_isValid;

    m_is_moderator_isValid = ::OpenAPI::fromJsonValue(m_is_moderator, json[QString("is_moderator")]);
    m_is_moderator_isSet = !json[QString("is_moderator")].isNull() && m_is_moderator_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_shadow_banned_isValid = ::OpenAPI::fromJsonValue(m_shadow_banned, json[QString("shadow_banned")]);
    m_shadow_banned_isSet = !json[QString("shadow_banned")].isNull() && m_shadow_banned_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIChannelMember::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelMember::asJsonObject() const {
    QJsonObject obj;
    if (m_ban_expires_isSet) {
        obj.insert(QString("ban_expires"), ::OpenAPI::toJsonValue(m_ban_expires));
    }
    if (m_banned_isSet) {
        obj.insert(QString("banned"), ::OpenAPI::toJsonValue(m_banned));
    }
    if (m_channel_role_isSet) {
        obj.insert(QString("channel_role"), ::OpenAPI::toJsonValue(m_channel_role));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deleted_at_isSet) {
        obj.insert(QString("deleted_at"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    if (m_invite_accepted_at_isSet) {
        obj.insert(QString("invite_accepted_at"), ::OpenAPI::toJsonValue(m_invite_accepted_at));
    }
    if (m_invite_rejected_at_isSet) {
        obj.insert(QString("invite_rejected_at"), ::OpenAPI::toJsonValue(m_invite_rejected_at));
    }
    if (m_invited_isSet) {
        obj.insert(QString("invited"), ::OpenAPI::toJsonValue(m_invited));
    }
    if (m_is_moderator_isSet) {
        obj.insert(QString("is_moderator"), ::OpenAPI::toJsonValue(m_is_moderator));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_shadow_banned_isSet) {
        obj.insert(QString("shadow_banned"), ::OpenAPI::toJsonValue(m_shadow_banned));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QDateTime OAIChannelMember::getBanExpires() const {
    return m_ban_expires;
}
void OAIChannelMember::setBanExpires(const QDateTime &ban_expires) {
    m_ban_expires = ban_expires;
    m_ban_expires_isSet = true;
}

bool OAIChannelMember::is_ban_expires_Set() const{
    return m_ban_expires_isSet;
}

bool OAIChannelMember::is_ban_expires_Valid() const{
    return m_ban_expires_isValid;
}

bool OAIChannelMember::isBanned() const {
    return m_banned;
}
void OAIChannelMember::setBanned(const bool &banned) {
    m_banned = banned;
    m_banned_isSet = true;
}

bool OAIChannelMember::is_banned_Set() const{
    return m_banned_isSet;
}

bool OAIChannelMember::is_banned_Valid() const{
    return m_banned_isValid;
}

QString OAIChannelMember::getChannelRole() const {
    return m_channel_role;
}
void OAIChannelMember::setChannelRole(const QString &channel_role) {
    m_channel_role = channel_role;
    m_channel_role_isSet = true;
}

bool OAIChannelMember::is_channel_role_Set() const{
    return m_channel_role_isSet;
}

bool OAIChannelMember::is_channel_role_Valid() const{
    return m_channel_role_isValid;
}

QDateTime OAIChannelMember::getCreatedAt() const {
    return m_created_at;
}
void OAIChannelMember::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIChannelMember::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIChannelMember::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIChannelMember::getDeletedAt() const {
    return m_deleted_at;
}
void OAIChannelMember::setDeletedAt(const QDateTime &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAIChannelMember::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAIChannelMember::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

QDateTime OAIChannelMember::getInviteAcceptedAt() const {
    return m_invite_accepted_at;
}
void OAIChannelMember::setInviteAcceptedAt(const QDateTime &invite_accepted_at) {
    m_invite_accepted_at = invite_accepted_at;
    m_invite_accepted_at_isSet = true;
}

bool OAIChannelMember::is_invite_accepted_at_Set() const{
    return m_invite_accepted_at_isSet;
}

bool OAIChannelMember::is_invite_accepted_at_Valid() const{
    return m_invite_accepted_at_isValid;
}

QDateTime OAIChannelMember::getInviteRejectedAt() const {
    return m_invite_rejected_at;
}
void OAIChannelMember::setInviteRejectedAt(const QDateTime &invite_rejected_at) {
    m_invite_rejected_at = invite_rejected_at;
    m_invite_rejected_at_isSet = true;
}

bool OAIChannelMember::is_invite_rejected_at_Set() const{
    return m_invite_rejected_at_isSet;
}

bool OAIChannelMember::is_invite_rejected_at_Valid() const{
    return m_invite_rejected_at_isValid;
}

bool OAIChannelMember::isInvited() const {
    return m_invited;
}
void OAIChannelMember::setInvited(const bool &invited) {
    m_invited = invited;
    m_invited_isSet = true;
}

bool OAIChannelMember::is_invited_Set() const{
    return m_invited_isSet;
}

bool OAIChannelMember::is_invited_Valid() const{
    return m_invited_isValid;
}

bool OAIChannelMember::isIsModerator() const {
    return m_is_moderator;
}
void OAIChannelMember::setIsModerator(const bool &is_moderator) {
    m_is_moderator = is_moderator;
    m_is_moderator_isSet = true;
}

bool OAIChannelMember::is_is_moderator_Set() const{
    return m_is_moderator_isSet;
}

bool OAIChannelMember::is_is_moderator_Valid() const{
    return m_is_moderator_isValid;
}

QString OAIChannelMember::getRole() const {
    return m_role;
}
void OAIChannelMember::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIChannelMember::is_role_Set() const{
    return m_role_isSet;
}

bool OAIChannelMember::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIChannelMember::isShadowBanned() const {
    return m_shadow_banned;
}
void OAIChannelMember::setShadowBanned(const bool &shadow_banned) {
    m_shadow_banned = shadow_banned;
    m_shadow_banned_isSet = true;
}

bool OAIChannelMember::is_shadow_banned_Set() const{
    return m_shadow_banned_isSet;
}

bool OAIChannelMember::is_shadow_banned_Valid() const{
    return m_shadow_banned_isValid;
}

QDateTime OAIChannelMember::getUpdatedAt() const {
    return m_updated_at;
}
void OAIChannelMember::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIChannelMember::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIChannelMember::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIUserObject OAIChannelMember::getUser() const {
    return m_user;
}
void OAIChannelMember::setUser(const OAIUserObject &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIChannelMember::is_user_Set() const{
    return m_user_isSet;
}

bool OAIChannelMember::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIChannelMember::getUserId() const {
    return m_user_id;
}
void OAIChannelMember::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIChannelMember::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIChannelMember::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIChannelMember::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ban_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_banned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invite_accepted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invite_rejected_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_moderator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_banned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelMember::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_banned_isValid && m_channel_role_isValid && m_created_at_isValid && m_shadow_banned_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
