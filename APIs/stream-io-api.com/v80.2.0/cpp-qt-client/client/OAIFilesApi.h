/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFilesApi_H
#define OAI_OAIFilesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAIFileDeleteResponse.h"
#include "OAIFileUploadResponse.h"
#include "OAIImageSizeRequest.h"
#include "OAIImageUploadResponse.h"
#include "OAIOnlyUserIDRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFilesApi : public QObject {
    Q_OBJECT

public:
    OAIFilesApi(const int timeOut = 0);
    ~OAIFilesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  url QString [optional]
    */
    virtual void deleteFile(const QString &type, const QString &id, const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  url QString [optional]
    */
    virtual void deleteImage(const QString &type, const QString &id, const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  file QString [optional]
    * @param[in]  user OAIOnlyUserIDRequest [optional]
    */
    virtual void uploadFile(const QString &type, const QString &id, const ::OpenAPI::OptionalParam<QString> &file = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIOnlyUserIDRequest> &user = ::OpenAPI::OptionalParam<OAIOnlyUserIDRequest>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  file QString [optional]
    * @param[in]  upload_sizes QList<OAIImageSizeRequest> [optional]
    * @param[in]  user OAIOnlyUserIDRequest [optional]
    */
    virtual void uploadImage(const QString &type, const QString &id, const ::OpenAPI::OptionalParam<QString> &file = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIImageSizeRequest>> &upload_sizes = ::OpenAPI::OptionalParam<QList<OAIImageSizeRequest>>(), const ::OpenAPI::OptionalParam<OAIOnlyUserIDRequest> &user = ::OpenAPI::OptionalParam<OAIOnlyUserIDRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteFileCallback(OAIHttpRequestWorker *worker);
    void deleteImageCallback(OAIHttpRequestWorker *worker);
    void uploadFileCallback(OAIHttpRequestWorker *worker);
    void uploadImageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteFileSignal(OAIFileDeleteResponse summary);
    void deleteImageSignal(OAIFileDeleteResponse summary);
    void uploadFileSignal(OAIFileUploadResponse summary);
    void uploadImageSignal(OAIImageUploadResponse summary);


    void deleteFileSignalFull(OAIHttpRequestWorker *worker, OAIFileDeleteResponse summary);
    void deleteImageSignalFull(OAIHttpRequestWorker *worker, OAIFileDeleteResponse summary);
    void uploadFileSignalFull(OAIHttpRequestWorker *worker, OAIFileUploadResponse summary);
    void uploadImageSignalFull(OAIHttpRequestWorker *worker, OAIImageUploadResponse summary);

    Q_DECL_DEPRECATED_X("Use deleteFileSignalError() instead")
    void deleteFileSignalE(OAIFileDeleteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFileSignalError(OAIFileDeleteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImageSignalError() instead")
    void deleteImageSignalE(OAIFileDeleteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImageSignalError(OAIFileDeleteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFileSignalError() instead")
    void uploadFileSignalE(OAIFileUploadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileSignalError(OAIFileUploadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadImageSignalError() instead")
    void uploadImageSignalE(OAIImageUploadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadImageSignalError(OAIImageUploadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteFileSignalErrorFull() instead")
    void deleteFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImageSignalErrorFull() instead")
    void deleteImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFileSignalErrorFull() instead")
    void uploadFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadImageSignalErrorFull() instead")
    void uploadImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
