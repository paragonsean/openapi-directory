/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICampaignsApi_H
#define OAI_OAICampaignsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAICreateCampaignRequest.h"
#include "OAICreateCampaignResponse.h"
#include "OAICreateSegmentRequest.h"
#include "OAICreateSegmentResponse.h"
#include "OAIDeleteCampaignResponse.h"
#include "OAIDeleteSegmentResponse.h"
#include "OAIQueryCampaignsRequest.h"
#include "OAIQueryCampaignsResponse.h"
#include "OAIQueryRecipientsRequest.h"
#include "OAIQueryRecipientsResponse.h"
#include "OAIQuerySegmentsRequest.h"
#include "OAIQuerySegmentsResponse.h"
#include "OAIResumeCampaignResponse.h"
#include "OAIScheduleCampaignRequest.h"
#include "OAIScheduleCampaignResponse.h"
#include "OAIStopCampaignResponse.h"
#include "OAITestCampaignRequest.h"
#include "OAITestCampaignResponse.h"
#include "OAIUpdateCampaignRequest.h"
#include "OAIUpdateCampaignResponse.h"
#include "OAIUpdateSegmentRequest.h"
#include "OAIUpdateSegmentResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICampaignsApi : public QObject {
    Q_OBJECT

public:
    OAICampaignsApi(const int timeOut = 0);
    ~OAICampaignsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_campaign_request OAICreateCampaignRequest [required]
    */
    virtual void createCampaign(const OAICreateCampaignRequest &oai_create_campaign_request);

    /**
    * @param[in]  oai_create_segment_request OAICreateSegmentRequest [required]
    */
    virtual void createSegment(const OAICreateSegmentRequest &oai_create_segment_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  recipients bool [optional]
    */
    virtual void deleteCampaign(const QString &id, const ::OpenAPI::OptionalParam<bool> &recipients = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteSegment(const QString &id);

    /**
    * @param[in]  payload OAIQueryCampaignsRequest [optional]
    */
    virtual void queryCampaigns(const ::OpenAPI::OptionalParam<OAIQueryCampaignsRequest> &payload = ::OpenAPI::OptionalParam<OAIQueryCampaignsRequest>());

    /**
    * @param[in]  payload OAIQueryRecipientsRequest [optional]
    */
    virtual void queryRecipients(const ::OpenAPI::OptionalParam<OAIQueryRecipientsRequest> &payload = ::OpenAPI::OptionalParam<OAIQueryRecipientsRequest>());

    /**
    * @param[in]  payload OAIQuerySegmentsRequest [optional]
    */
    virtual void querySegments(const ::OpenAPI::OptionalParam<OAIQuerySegmentsRequest> &payload = ::OpenAPI::OptionalParam<OAIQuerySegmentsRequest>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void resumeCampaign(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_schedule_campaign_request OAIScheduleCampaignRequest [required]
    */
    virtual void scheduleCampaign(const QString &id, const OAIScheduleCampaignRequest &oai_schedule_campaign_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void stopCampaign(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_test_campaign_request OAITestCampaignRequest [required]
    */
    virtual void testCampaign(const QString &id, const OAITestCampaignRequest &oai_test_campaign_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_campaign_request OAIUpdateCampaignRequest [required]
    */
    virtual void updateCampaign(const QString &id, const OAIUpdateCampaignRequest &oai_update_campaign_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_segment_request OAIUpdateSegmentRequest [required]
    */
    virtual void updateSegment(const QString &id, const OAIUpdateSegmentRequest &oai_update_segment_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createCampaignCallback(OAIHttpRequestWorker *worker);
    void createSegmentCallback(OAIHttpRequestWorker *worker);
    void deleteCampaignCallback(OAIHttpRequestWorker *worker);
    void deleteSegmentCallback(OAIHttpRequestWorker *worker);
    void queryCampaignsCallback(OAIHttpRequestWorker *worker);
    void queryRecipientsCallback(OAIHttpRequestWorker *worker);
    void querySegmentsCallback(OAIHttpRequestWorker *worker);
    void resumeCampaignCallback(OAIHttpRequestWorker *worker);
    void scheduleCampaignCallback(OAIHttpRequestWorker *worker);
    void stopCampaignCallback(OAIHttpRequestWorker *worker);
    void testCampaignCallback(OAIHttpRequestWorker *worker);
    void updateCampaignCallback(OAIHttpRequestWorker *worker);
    void updateSegmentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createCampaignSignal(OAICreateCampaignResponse summary);
    void createSegmentSignal(OAICreateSegmentResponse summary);
    void deleteCampaignSignal(OAIDeleteCampaignResponse summary);
    void deleteSegmentSignal(OAIDeleteSegmentResponse summary);
    void queryCampaignsSignal(OAIQueryCampaignsResponse summary);
    void queryRecipientsSignal(OAIQueryRecipientsResponse summary);
    void querySegmentsSignal(OAIQuerySegmentsResponse summary);
    void resumeCampaignSignal(OAIResumeCampaignResponse summary);
    void scheduleCampaignSignal(OAIScheduleCampaignResponse summary);
    void stopCampaignSignal(OAIStopCampaignResponse summary);
    void testCampaignSignal(OAITestCampaignResponse summary);
    void updateCampaignSignal(OAIUpdateCampaignResponse summary);
    void updateSegmentSignal(OAIUpdateSegmentResponse summary);


    void createCampaignSignalFull(OAIHttpRequestWorker *worker, OAICreateCampaignResponse summary);
    void createSegmentSignalFull(OAIHttpRequestWorker *worker, OAICreateSegmentResponse summary);
    void deleteCampaignSignalFull(OAIHttpRequestWorker *worker, OAIDeleteCampaignResponse summary);
    void deleteSegmentSignalFull(OAIHttpRequestWorker *worker, OAIDeleteSegmentResponse summary);
    void queryCampaignsSignalFull(OAIHttpRequestWorker *worker, OAIQueryCampaignsResponse summary);
    void queryRecipientsSignalFull(OAIHttpRequestWorker *worker, OAIQueryRecipientsResponse summary);
    void querySegmentsSignalFull(OAIHttpRequestWorker *worker, OAIQuerySegmentsResponse summary);
    void resumeCampaignSignalFull(OAIHttpRequestWorker *worker, OAIResumeCampaignResponse summary);
    void scheduleCampaignSignalFull(OAIHttpRequestWorker *worker, OAIScheduleCampaignResponse summary);
    void stopCampaignSignalFull(OAIHttpRequestWorker *worker, OAIStopCampaignResponse summary);
    void testCampaignSignalFull(OAIHttpRequestWorker *worker, OAITestCampaignResponse summary);
    void updateCampaignSignalFull(OAIHttpRequestWorker *worker, OAIUpdateCampaignResponse summary);
    void updateSegmentSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSegmentResponse summary);

    Q_DECL_DEPRECATED_X("Use createCampaignSignalError() instead")
    void createCampaignSignalE(OAICreateCampaignResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCampaignSignalError(OAICreateCampaignResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSegmentSignalError() instead")
    void createSegmentSignalE(OAICreateSegmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSegmentSignalError(OAICreateSegmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCampaignSignalError() instead")
    void deleteCampaignSignalE(OAIDeleteCampaignResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCampaignSignalError(OAIDeleteCampaignResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSegmentSignalError() instead")
    void deleteSegmentSignalE(OAIDeleteSegmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSegmentSignalError(OAIDeleteSegmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryCampaignsSignalError() instead")
    void queryCampaignsSignalE(OAIQueryCampaignsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryCampaignsSignalError(OAIQueryCampaignsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryRecipientsSignalError() instead")
    void queryRecipientsSignalE(OAIQueryRecipientsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryRecipientsSignalError(OAIQueryRecipientsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use querySegmentsSignalError() instead")
    void querySegmentsSignalE(OAIQuerySegmentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void querySegmentsSignalError(OAIQuerySegmentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resumeCampaignSignalError() instead")
    void resumeCampaignSignalE(OAIResumeCampaignResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resumeCampaignSignalError(OAIResumeCampaignResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleCampaignSignalError() instead")
    void scheduleCampaignSignalE(OAIScheduleCampaignResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleCampaignSignalError(OAIScheduleCampaignResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopCampaignSignalError() instead")
    void stopCampaignSignalE(OAIStopCampaignResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopCampaignSignalError(OAIStopCampaignResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testCampaignSignalError() instead")
    void testCampaignSignalE(OAITestCampaignResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void testCampaignSignalError(OAITestCampaignResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCampaignSignalError() instead")
    void updateCampaignSignalE(OAIUpdateCampaignResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCampaignSignalError(OAIUpdateCampaignResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSegmentSignalError() instead")
    void updateSegmentSignalE(OAIUpdateSegmentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSegmentSignalError(OAIUpdateSegmentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createCampaignSignalErrorFull() instead")
    void createCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSegmentSignalErrorFull() instead")
    void createSegmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSegmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCampaignSignalErrorFull() instead")
    void deleteCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSegmentSignalErrorFull() instead")
    void deleteSegmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSegmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryCampaignsSignalErrorFull() instead")
    void queryCampaignsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryCampaignsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryRecipientsSignalErrorFull() instead")
    void queryRecipientsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryRecipientsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use querySegmentsSignalErrorFull() instead")
    void querySegmentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void querySegmentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resumeCampaignSignalErrorFull() instead")
    void resumeCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resumeCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleCampaignSignalErrorFull() instead")
    void scheduleCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopCampaignSignalErrorFull() instead")
    void stopCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use testCampaignSignalErrorFull() instead")
    void testCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void testCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCampaignSignalErrorFull() instead")
    void updateCampaignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCampaignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSegmentSignalErrorFull() instead")
    void updateSegmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSegmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
