/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageRequest_1.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageRequest_1::OAIMessageRequest_1(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageRequest_1::OAIMessageRequest_1() {
    this->initializeModel();
}

OAIMessageRequest_1::~OAIMessageRequest_1() {}

void OAIMessageRequest_1::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_before_message_send_failed_isSet = false;
    m_before_message_send_failed_isValid = false;

    m_cid_isSet = false;
    m_cid_isValid = false;

    m_command_isSet = false;
    m_command_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_i18n_isSet = false;
    m_i18n_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_labels_isSet = false;
    m_image_labels_isValid = false;

    m_latest_reactions_isSet = false;
    m_latest_reactions_isValid = false;

    m_mentioned_users_isSet = false;
    m_mentioned_users_isValid = false;

    m_mml_isSet = false;
    m_mml_isValid = false;

    m_own_reactions_isSet = false;
    m_own_reactions_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_pin_expires_isSet = false;
    m_pin_expires_isValid = false;

    m_pinned_isSet = false;
    m_pinned_isValid = false;

    m_pinned_at_isSet = false;
    m_pinned_at_isValid = false;

    m_pinned_by_isSet = false;
    m_pinned_by_isValid = false;

    m_quoted_message_isSet = false;
    m_quoted_message_isValid = false;

    m_quoted_message_id_isSet = false;
    m_quoted_message_id_isValid = false;

    m_reaction_counts_isSet = false;
    m_reaction_counts_isValid = false;

    m_reaction_scores_isSet = false;
    m_reaction_scores_isValid = false;

    m_reply_count_isSet = false;
    m_reply_count_isValid = false;

    m_shadowed_isSet = false;
    m_shadowed_isValid = false;

    m_show_in_channel_isSet = false;
    m_show_in_channel_isValid = false;

    m_silent_isSet = false;
    m_silent_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_thread_participants_isSet = false;
    m_thread_participants_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIMessageRequest_1::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageRequest_1::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_before_message_send_failed_isValid = ::OpenAPI::fromJsonValue(m_before_message_send_failed, json[QString("before_message_send_failed")]);
    m_before_message_send_failed_isSet = !json[QString("before_message_send_failed")].isNull() && m_before_message_send_failed_isValid;

    m_cid_isValid = ::OpenAPI::fromJsonValue(m_cid, json[QString("cid")]);
    m_cid_isSet = !json[QString("cid")].isNull() && m_cid_isValid;

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("command")]);
    m_command_isSet = !json[QString("command")].isNull() && m_command_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("deleted_at")]);
    m_deleted_at_isSet = !json[QString("deleted_at")].isNull() && m_deleted_at_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_i18n_isValid = ::OpenAPI::fromJsonValue(m_i18n, json[QString("i18n")]);
    m_i18n_isSet = !json[QString("i18n")].isNull() && m_i18n_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    if(json["image_labels"].isObject()){
        auto varmap = json["image_labels"].toObject().toVariantMap();
        m_image_labels_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_image_labels_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_image_labels_isSet &= !jval.isNull() && m_image_labels_isValid;
                m_image_labels.insert(m_image_labels.end(), val, item);
            }
        }
    }

    m_latest_reactions_isValid = ::OpenAPI::fromJsonValue(m_latest_reactions, json[QString("latest_reactions")]);
    m_latest_reactions_isSet = !json[QString("latest_reactions")].isNull() && m_latest_reactions_isValid;

    m_mentioned_users_isValid = ::OpenAPI::fromJsonValue(m_mentioned_users, json[QString("mentioned_users")]);
    m_mentioned_users_isSet = !json[QString("mentioned_users")].isNull() && m_mentioned_users_isValid;

    m_mml_isValid = ::OpenAPI::fromJsonValue(m_mml, json[QString("mml")]);
    m_mml_isSet = !json[QString("mml")].isNull() && m_mml_isValid;

    m_own_reactions_isValid = ::OpenAPI::fromJsonValue(m_own_reactions, json[QString("own_reactions")]);
    m_own_reactions_isSet = !json[QString("own_reactions")].isNull() && m_own_reactions_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parent_id")]);
    m_parent_id_isSet = !json[QString("parent_id")].isNull() && m_parent_id_isValid;

    m_pin_expires_isValid = ::OpenAPI::fromJsonValue(m_pin_expires, json[QString("pin_expires")]);
    m_pin_expires_isSet = !json[QString("pin_expires")].isNull() && m_pin_expires_isValid;

    m_pinned_isValid = ::OpenAPI::fromJsonValue(m_pinned, json[QString("pinned")]);
    m_pinned_isSet = !json[QString("pinned")].isNull() && m_pinned_isValid;

    m_pinned_at_isValid = ::OpenAPI::fromJsonValue(m_pinned_at, json[QString("pinned_at")]);
    m_pinned_at_isSet = !json[QString("pinned_at")].isNull() && m_pinned_at_isValid;

    m_pinned_by_isValid = ::OpenAPI::fromJsonValue(m_pinned_by, json[QString("pinned_by")]);
    m_pinned_by_isSet = !json[QString("pinned_by")].isNull() && m_pinned_by_isValid;

    m_quoted_message_isValid = ::OpenAPI::fromJsonValue(m_quoted_message, json[QString("quoted_message")]);
    m_quoted_message_isSet = !json[QString("quoted_message")].isNull() && m_quoted_message_isValid;

    m_quoted_message_id_isValid = ::OpenAPI::fromJsonValue(m_quoted_message_id, json[QString("quoted_message_id")]);
    m_quoted_message_id_isSet = !json[QString("quoted_message_id")].isNull() && m_quoted_message_id_isValid;

    m_reaction_counts_isValid = ::OpenAPI::fromJsonValue(m_reaction_counts, json[QString("reaction_counts")]);
    m_reaction_counts_isSet = !json[QString("reaction_counts")].isNull() && m_reaction_counts_isValid;

    m_reaction_scores_isValid = ::OpenAPI::fromJsonValue(m_reaction_scores, json[QString("reaction_scores")]);
    m_reaction_scores_isSet = !json[QString("reaction_scores")].isNull() && m_reaction_scores_isValid;

    m_reply_count_isValid = ::OpenAPI::fromJsonValue(m_reply_count, json[QString("reply_count")]);
    m_reply_count_isSet = !json[QString("reply_count")].isNull() && m_reply_count_isValid;

    m_shadowed_isValid = ::OpenAPI::fromJsonValue(m_shadowed, json[QString("shadowed")]);
    m_shadowed_isSet = !json[QString("shadowed")].isNull() && m_shadowed_isValid;

    m_show_in_channel_isValid = ::OpenAPI::fromJsonValue(m_show_in_channel, json[QString("show_in_channel")]);
    m_show_in_channel_isSet = !json[QString("show_in_channel")].isNull() && m_show_in_channel_isValid;

    m_silent_isValid = ::OpenAPI::fromJsonValue(m_silent, json[QString("silent")]);
    m_silent_isSet = !json[QString("silent")].isNull() && m_silent_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_thread_participants_isValid = ::OpenAPI::fromJsonValue(m_thread_participants, json[QString("thread_participants")]);
    m_thread_participants_isSet = !json[QString("thread_participants")].isNull() && m_thread_participants_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIMessageRequest_1::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageRequest_1::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_before_message_send_failed_isSet) {
        obj.insert(QString("before_message_send_failed"), ::OpenAPI::toJsonValue(m_before_message_send_failed));
    }
    if (m_cid_isSet) {
        obj.insert(QString("cid"), ::OpenAPI::toJsonValue(m_cid));
    }
    if (m_command_isSet) {
        obj.insert(QString("command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deleted_at_isSet) {
        obj.insert(QString("deleted_at"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_i18n.size() > 0) {
        obj.insert(QString("i18n"), ::OpenAPI::toJsonValue(m_i18n));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_labels.size() > 0) {
        
        obj.insert(QString("image_labels"), toJsonValue(m_image_labels));
    }
    if (m_latest_reactions.size() > 0) {
        obj.insert(QString("latest_reactions"), ::OpenAPI::toJsonValue(m_latest_reactions));
    }
    if (m_mentioned_users.size() > 0) {
        obj.insert(QString("mentioned_users"), ::OpenAPI::toJsonValue(m_mentioned_users));
    }
    if (m_mml_isSet) {
        obj.insert(QString("mml"), ::OpenAPI::toJsonValue(m_mml));
    }
    if (m_own_reactions.size() > 0) {
        obj.insert(QString("own_reactions"), ::OpenAPI::toJsonValue(m_own_reactions));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parent_id"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_pin_expires_isSet) {
        obj.insert(QString("pin_expires"), ::OpenAPI::toJsonValue(m_pin_expires));
    }
    if (m_pinned_isSet) {
        obj.insert(QString("pinned"), ::OpenAPI::toJsonValue(m_pinned));
    }
    if (m_pinned_at_isSet) {
        obj.insert(QString("pinned_at"), ::OpenAPI::toJsonValue(m_pinned_at));
    }
    if (m_pinned_by.isSet()) {
        obj.insert(QString("pinned_by"), ::OpenAPI::toJsonValue(m_pinned_by));
    }
    if (m_quoted_message.isSet()) {
        obj.insert(QString("quoted_message"), ::OpenAPI::toJsonValue(m_quoted_message));
    }
    if (m_quoted_message_id_isSet) {
        obj.insert(QString("quoted_message_id"), ::OpenAPI::toJsonValue(m_quoted_message_id));
    }
    if (m_reaction_counts.size() > 0) {
        obj.insert(QString("reaction_counts"), ::OpenAPI::toJsonValue(m_reaction_counts));
    }
    if (m_reaction_scores.size() > 0) {
        obj.insert(QString("reaction_scores"), ::OpenAPI::toJsonValue(m_reaction_scores));
    }
    if (m_reply_count_isSet) {
        obj.insert(QString("reply_count"), ::OpenAPI::toJsonValue(m_reply_count));
    }
    if (m_shadowed_isSet) {
        obj.insert(QString("shadowed"), ::OpenAPI::toJsonValue(m_shadowed));
    }
    if (m_show_in_channel_isSet) {
        obj.insert(QString("show_in_channel"), ::OpenAPI::toJsonValue(m_show_in_channel));
    }
    if (m_silent_isSet) {
        obj.insert(QString("silent"), ::OpenAPI::toJsonValue(m_silent));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_thread_participants.size() > 0) {
        obj.insert(QString("thread_participants"), ::OpenAPI::toJsonValue(m_thread_participants));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QList<OAIAttachmentRequest> OAIMessageRequest_1::getAttachments() const {
    return m_attachments;
}
void OAIMessageRequest_1::setAttachments(const QList<OAIAttachmentRequest> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIMessageRequest_1::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIMessageRequest_1::is_attachments_Valid() const{
    return m_attachments_isValid;
}

bool OAIMessageRequest_1::isBeforeMessageSendFailed() const {
    return m_before_message_send_failed;
}
void OAIMessageRequest_1::setBeforeMessageSendFailed(const bool &before_message_send_failed) {
    m_before_message_send_failed = before_message_send_failed;
    m_before_message_send_failed_isSet = true;
}

bool OAIMessageRequest_1::is_before_message_send_failed_Set() const{
    return m_before_message_send_failed_isSet;
}

bool OAIMessageRequest_1::is_before_message_send_failed_Valid() const{
    return m_before_message_send_failed_isValid;
}

QString OAIMessageRequest_1::getCid() const {
    return m_cid;
}
void OAIMessageRequest_1::setCid(const QString &cid) {
    m_cid = cid;
    m_cid_isSet = true;
}

bool OAIMessageRequest_1::is_cid_Set() const{
    return m_cid_isSet;
}

bool OAIMessageRequest_1::is_cid_Valid() const{
    return m_cid_isValid;
}

QString OAIMessageRequest_1::getCommand() const {
    return m_command;
}
void OAIMessageRequest_1::setCommand(const QString &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIMessageRequest_1::is_command_Set() const{
    return m_command_isSet;
}

bool OAIMessageRequest_1::is_command_Valid() const{
    return m_command_isValid;
}

QDateTime OAIMessageRequest_1::getCreatedAt() const {
    return m_created_at;
}
void OAIMessageRequest_1::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIMessageRequest_1::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIMessageRequest_1::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIMessageRequest_1::getDeletedAt() const {
    return m_deleted_at;
}
void OAIMessageRequest_1::setDeletedAt(const QDateTime &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAIMessageRequest_1::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAIMessageRequest_1::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

QString OAIMessageRequest_1::getHtml() const {
    return m_html;
}
void OAIMessageRequest_1::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAIMessageRequest_1::is_html_Set() const{
    return m_html_isSet;
}

bool OAIMessageRequest_1::is_html_Valid() const{
    return m_html_isValid;
}

QMap<QString, QString> OAIMessageRequest_1::getI18n() const {
    return m_i18n;
}
void OAIMessageRequest_1::setI18n(const QMap<QString, QString> &i18n) {
    m_i18n = i18n;
    m_i18n_isSet = true;
}

bool OAIMessageRequest_1::is_i18n_Set() const{
    return m_i18n_isSet;
}

bool OAIMessageRequest_1::is_i18n_Valid() const{
    return m_i18n_isValid;
}

QString OAIMessageRequest_1::getId() const {
    return m_id;
}
void OAIMessageRequest_1::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMessageRequest_1::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMessageRequest_1::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, QList<QString>> OAIMessageRequest_1::getImageLabels() const {
    return m_image_labels;
}
void OAIMessageRequest_1::setImageLabels(const QMap<QString, QList<QString>> &image_labels) {
    m_image_labels = image_labels;
    m_image_labels_isSet = true;
}

bool OAIMessageRequest_1::is_image_labels_Set() const{
    return m_image_labels_isSet;
}

bool OAIMessageRequest_1::is_image_labels_Valid() const{
    return m_image_labels_isValid;
}

QList<OAIReactionRequest> OAIMessageRequest_1::getLatestReactions() const {
    return m_latest_reactions;
}
void OAIMessageRequest_1::setLatestReactions(const QList<OAIReactionRequest> &latest_reactions) {
    m_latest_reactions = latest_reactions;
    m_latest_reactions_isSet = true;
}

bool OAIMessageRequest_1::is_latest_reactions_Set() const{
    return m_latest_reactions_isSet;
}

bool OAIMessageRequest_1::is_latest_reactions_Valid() const{
    return m_latest_reactions_isValid;
}

QList<OAIUserObjectRequest> OAIMessageRequest_1::getMentionedUsers() const {
    return m_mentioned_users;
}
void OAIMessageRequest_1::setMentionedUsers(const QList<OAIUserObjectRequest> &mentioned_users) {
    m_mentioned_users = mentioned_users;
    m_mentioned_users_isSet = true;
}

bool OAIMessageRequest_1::is_mentioned_users_Set() const{
    return m_mentioned_users_isSet;
}

bool OAIMessageRequest_1::is_mentioned_users_Valid() const{
    return m_mentioned_users_isValid;
}

QString OAIMessageRequest_1::getMml() const {
    return m_mml;
}
void OAIMessageRequest_1::setMml(const QString &mml) {
    m_mml = mml;
    m_mml_isSet = true;
}

bool OAIMessageRequest_1::is_mml_Set() const{
    return m_mml_isSet;
}

bool OAIMessageRequest_1::is_mml_Valid() const{
    return m_mml_isValid;
}

QList<OAIReactionRequest> OAIMessageRequest_1::getOwnReactions() const {
    return m_own_reactions;
}
void OAIMessageRequest_1::setOwnReactions(const QList<OAIReactionRequest> &own_reactions) {
    m_own_reactions = own_reactions;
    m_own_reactions_isSet = true;
}

bool OAIMessageRequest_1::is_own_reactions_Set() const{
    return m_own_reactions_isSet;
}

bool OAIMessageRequest_1::is_own_reactions_Valid() const{
    return m_own_reactions_isValid;
}

QString OAIMessageRequest_1::getParentId() const {
    return m_parent_id;
}
void OAIMessageRequest_1::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIMessageRequest_1::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIMessageRequest_1::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

QDateTime OAIMessageRequest_1::getPinExpires() const {
    return m_pin_expires;
}
void OAIMessageRequest_1::setPinExpires(const QDateTime &pin_expires) {
    m_pin_expires = pin_expires;
    m_pin_expires_isSet = true;
}

bool OAIMessageRequest_1::is_pin_expires_Set() const{
    return m_pin_expires_isSet;
}

bool OAIMessageRequest_1::is_pin_expires_Valid() const{
    return m_pin_expires_isValid;
}

bool OAIMessageRequest_1::isPinned() const {
    return m_pinned;
}
void OAIMessageRequest_1::setPinned(const bool &pinned) {
    m_pinned = pinned;
    m_pinned_isSet = true;
}

bool OAIMessageRequest_1::is_pinned_Set() const{
    return m_pinned_isSet;
}

bool OAIMessageRequest_1::is_pinned_Valid() const{
    return m_pinned_isValid;
}

QDateTime OAIMessageRequest_1::getPinnedAt() const {
    return m_pinned_at;
}
void OAIMessageRequest_1::setPinnedAt(const QDateTime &pinned_at) {
    m_pinned_at = pinned_at;
    m_pinned_at_isSet = true;
}

bool OAIMessageRequest_1::is_pinned_at_Set() const{
    return m_pinned_at_isSet;
}

bool OAIMessageRequest_1::is_pinned_at_Valid() const{
    return m_pinned_at_isValid;
}

OAIUserObjectRequest OAIMessageRequest_1::getPinnedBy() const {
    return m_pinned_by;
}
void OAIMessageRequest_1::setPinnedBy(const OAIUserObjectRequest &pinned_by) {
    m_pinned_by = pinned_by;
    m_pinned_by_isSet = true;
}

bool OAIMessageRequest_1::is_pinned_by_Set() const{
    return m_pinned_by_isSet;
}

bool OAIMessageRequest_1::is_pinned_by_Valid() const{
    return m_pinned_by_isValid;
}

OAIMessageRequest_1 OAIMessageRequest_1::getQuotedMessage() const {
    return m_quoted_message;
}
void OAIMessageRequest_1::setQuotedMessage(const OAIMessageRequest_1 &quoted_message) {
    m_quoted_message = quoted_message;
    m_quoted_message_isSet = true;
}

bool OAIMessageRequest_1::is_quoted_message_Set() const{
    return m_quoted_message_isSet;
}

bool OAIMessageRequest_1::is_quoted_message_Valid() const{
    return m_quoted_message_isValid;
}

QString OAIMessageRequest_1::getQuotedMessageId() const {
    return m_quoted_message_id;
}
void OAIMessageRequest_1::setQuotedMessageId(const QString &quoted_message_id) {
    m_quoted_message_id = quoted_message_id;
    m_quoted_message_id_isSet = true;
}

bool OAIMessageRequest_1::is_quoted_message_id_Set() const{
    return m_quoted_message_id_isSet;
}

bool OAIMessageRequest_1::is_quoted_message_id_Valid() const{
    return m_quoted_message_id_isValid;
}

QMap<QString, qint32> OAIMessageRequest_1::getReactionCounts() const {
    return m_reaction_counts;
}
void OAIMessageRequest_1::setReactionCounts(const QMap<QString, qint32> &reaction_counts) {
    m_reaction_counts = reaction_counts;
    m_reaction_counts_isSet = true;
}

bool OAIMessageRequest_1::is_reaction_counts_Set() const{
    return m_reaction_counts_isSet;
}

bool OAIMessageRequest_1::is_reaction_counts_Valid() const{
    return m_reaction_counts_isValid;
}

QMap<QString, qint32> OAIMessageRequest_1::getReactionScores() const {
    return m_reaction_scores;
}
void OAIMessageRequest_1::setReactionScores(const QMap<QString, qint32> &reaction_scores) {
    m_reaction_scores = reaction_scores;
    m_reaction_scores_isSet = true;
}

bool OAIMessageRequest_1::is_reaction_scores_Set() const{
    return m_reaction_scores_isSet;
}

bool OAIMessageRequest_1::is_reaction_scores_Valid() const{
    return m_reaction_scores_isValid;
}

qint32 OAIMessageRequest_1::getReplyCount() const {
    return m_reply_count;
}
void OAIMessageRequest_1::setReplyCount(const qint32 &reply_count) {
    m_reply_count = reply_count;
    m_reply_count_isSet = true;
}

bool OAIMessageRequest_1::is_reply_count_Set() const{
    return m_reply_count_isSet;
}

bool OAIMessageRequest_1::is_reply_count_Valid() const{
    return m_reply_count_isValid;
}

bool OAIMessageRequest_1::isShadowed() const {
    return m_shadowed;
}
void OAIMessageRequest_1::setShadowed(const bool &shadowed) {
    m_shadowed = shadowed;
    m_shadowed_isSet = true;
}

bool OAIMessageRequest_1::is_shadowed_Set() const{
    return m_shadowed_isSet;
}

bool OAIMessageRequest_1::is_shadowed_Valid() const{
    return m_shadowed_isValid;
}

bool OAIMessageRequest_1::isShowInChannel() const {
    return m_show_in_channel;
}
void OAIMessageRequest_1::setShowInChannel(const bool &show_in_channel) {
    m_show_in_channel = show_in_channel;
    m_show_in_channel_isSet = true;
}

bool OAIMessageRequest_1::is_show_in_channel_Set() const{
    return m_show_in_channel_isSet;
}

bool OAIMessageRequest_1::is_show_in_channel_Valid() const{
    return m_show_in_channel_isValid;
}

bool OAIMessageRequest_1::isSilent() const {
    return m_silent;
}
void OAIMessageRequest_1::setSilent(const bool &silent) {
    m_silent = silent;
    m_silent_isSet = true;
}

bool OAIMessageRequest_1::is_silent_Set() const{
    return m_silent_isSet;
}

bool OAIMessageRequest_1::is_silent_Valid() const{
    return m_silent_isValid;
}

QString OAIMessageRequest_1::getText() const {
    return m_text;
}
void OAIMessageRequest_1::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIMessageRequest_1::is_text_Set() const{
    return m_text_isSet;
}

bool OAIMessageRequest_1::is_text_Valid() const{
    return m_text_isValid;
}

QList<OAIUserObjectRequest> OAIMessageRequest_1::getThreadParticipants() const {
    return m_thread_participants;
}
void OAIMessageRequest_1::setThreadParticipants(const QList<OAIUserObjectRequest> &thread_participants) {
    m_thread_participants = thread_participants;
    m_thread_participants_isSet = true;
}

bool OAIMessageRequest_1::is_thread_participants_Set() const{
    return m_thread_participants_isSet;
}

bool OAIMessageRequest_1::is_thread_participants_Valid() const{
    return m_thread_participants_isValid;
}

QString OAIMessageRequest_1::getType() const {
    return m_type;
}
void OAIMessageRequest_1::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMessageRequest_1::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMessageRequest_1::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIMessageRequest_1::getUpdatedAt() const {
    return m_updated_at;
}
void OAIMessageRequest_1::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIMessageRequest_1::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIMessageRequest_1::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIUserObjectRequest OAIMessageRequest_1::getUser() const {
    return m_user;
}
void OAIMessageRequest_1::setUser(const OAIUserObjectRequest &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIMessageRequest_1::is_user_Set() const{
    return m_user_isSet;
}

bool OAIMessageRequest_1::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIMessageRequest_1::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_before_message_send_failed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_command_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_i18n.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_reactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentioned_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_own_reactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quoted_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quoted_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reaction_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reaction_scores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_in_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_silent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thread_participants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageRequest_1::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mml_isValid && m_text_isValid && true;
}

} // namespace OpenAPI
