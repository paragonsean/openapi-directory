/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaginationParamsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaginationParamsRequest::OAIPaginationParamsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaginationParamsRequest::OAIPaginationParamsRequest() {
    this->initializeModel();
}

OAIPaginationParamsRequest::~OAIPaginationParamsRequest() {}

void OAIPaginationParamsRequest::initializeModel() {

    m_id_gt_isSet = false;
    m_id_gt_isValid = false;

    m_id_gte_isSet = false;
    m_id_gte_isValid = false;

    m_id_lt_isSet = false;
    m_id_lt_isValid = false;

    m_id_lte_isSet = false;
    m_id_lte_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;
}

void OAIPaginationParamsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaginationParamsRequest::fromJsonObject(QJsonObject json) {

    m_id_gt_isValid = ::OpenAPI::fromJsonValue(m_id_gt, json[QString("id_gt")]);
    m_id_gt_isSet = !json[QString("id_gt")].isNull() && m_id_gt_isValid;

    m_id_gte_isValid = ::OpenAPI::fromJsonValue(m_id_gte, json[QString("id_gte")]);
    m_id_gte_isSet = !json[QString("id_gte")].isNull() && m_id_gte_isValid;

    m_id_lt_isValid = ::OpenAPI::fromJsonValue(m_id_lt, json[QString("id_lt")]);
    m_id_lt_isSet = !json[QString("id_lt")].isNull() && m_id_lt_isValid;

    m_id_lte_isValid = ::OpenAPI::fromJsonValue(m_id_lte, json[QString("id_lte")]);
    m_id_lte_isSet = !json[QString("id_lte")].isNull() && m_id_lte_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;
}

QString OAIPaginationParamsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaginationParamsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_id_gt_isSet) {
        obj.insert(QString("id_gt"), ::OpenAPI::toJsonValue(m_id_gt));
    }
    if (m_id_gte_isSet) {
        obj.insert(QString("id_gte"), ::OpenAPI::toJsonValue(m_id_gte));
    }
    if (m_id_lt_isSet) {
        obj.insert(QString("id_lt"), ::OpenAPI::toJsonValue(m_id_lt));
    }
    if (m_id_lte_isSet) {
        obj.insert(QString("id_lte"), ::OpenAPI::toJsonValue(m_id_lte));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    return obj;
}

qint32 OAIPaginationParamsRequest::getIdGt() const {
    return m_id_gt;
}
void OAIPaginationParamsRequest::setIdGt(const qint32 &id_gt) {
    m_id_gt = id_gt;
    m_id_gt_isSet = true;
}

bool OAIPaginationParamsRequest::is_id_gt_Set() const{
    return m_id_gt_isSet;
}

bool OAIPaginationParamsRequest::is_id_gt_Valid() const{
    return m_id_gt_isValid;
}

qint32 OAIPaginationParamsRequest::getIdGte() const {
    return m_id_gte;
}
void OAIPaginationParamsRequest::setIdGte(const qint32 &id_gte) {
    m_id_gte = id_gte;
    m_id_gte_isSet = true;
}

bool OAIPaginationParamsRequest::is_id_gte_Set() const{
    return m_id_gte_isSet;
}

bool OAIPaginationParamsRequest::is_id_gte_Valid() const{
    return m_id_gte_isValid;
}

qint32 OAIPaginationParamsRequest::getIdLt() const {
    return m_id_lt;
}
void OAIPaginationParamsRequest::setIdLt(const qint32 &id_lt) {
    m_id_lt = id_lt;
    m_id_lt_isSet = true;
}

bool OAIPaginationParamsRequest::is_id_lt_Set() const{
    return m_id_lt_isSet;
}

bool OAIPaginationParamsRequest::is_id_lt_Valid() const{
    return m_id_lt_isValid;
}

qint32 OAIPaginationParamsRequest::getIdLte() const {
    return m_id_lte;
}
void OAIPaginationParamsRequest::setIdLte(const qint32 &id_lte) {
    m_id_lte = id_lte;
    m_id_lte_isSet = true;
}

bool OAIPaginationParamsRequest::is_id_lte_Set() const{
    return m_id_lte_isSet;
}

bool OAIPaginationParamsRequest::is_id_lte_Valid() const{
    return m_id_lte_isValid;
}

qint32 OAIPaginationParamsRequest::getLimit() const {
    return m_limit;
}
void OAIPaginationParamsRequest::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIPaginationParamsRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIPaginationParamsRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

qint32 OAIPaginationParamsRequest::getOffset() const {
    return m_offset;
}
void OAIPaginationParamsRequest::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIPaginationParamsRequest::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIPaginationParamsRequest::is_offset_Valid() const{
    return m_offset_isValid;
}

bool OAIPaginationParamsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_gt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_gte_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_lt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_lte_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaginationParamsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
