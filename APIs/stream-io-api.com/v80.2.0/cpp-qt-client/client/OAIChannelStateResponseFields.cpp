/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelStateResponseFields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelStateResponseFields::OAIChannelStateResponseFields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelStateResponseFields::OAIChannelStateResponseFields() {
    this->initializeModel();
}

OAIChannelStateResponseFields::~OAIChannelStateResponseFields() {}

void OAIChannelStateResponseFields::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_hidden_isSet = false;
    m_hidden_isValid = false;

    m_hide_messages_before_isSet = false;
    m_hide_messages_before_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_membership_isSet = false;
    m_membership_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_pending_messages_isSet = false;
    m_pending_messages_isValid = false;

    m_pinned_messages_isSet = false;
    m_pinned_messages_isValid = false;

    m_read_isSet = false;
    m_read_isValid = false;

    m_watcher_count_isSet = false;
    m_watcher_count_isValid = false;

    m_watchers_isSet = false;
    m_watchers_isValid = false;
}

void OAIChannelStateResponseFields::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelStateResponseFields::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_hidden_isValid = ::OpenAPI::fromJsonValue(m_hidden, json[QString("hidden")]);
    m_hidden_isSet = !json[QString("hidden")].isNull() && m_hidden_isValid;

    m_hide_messages_before_isValid = ::OpenAPI::fromJsonValue(m_hide_messages_before, json[QString("hide_messages_before")]);
    m_hide_messages_before_isSet = !json[QString("hide_messages_before")].isNull() && m_hide_messages_before_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_membership_isValid = ::OpenAPI::fromJsonValue(m_membership, json[QString("membership")]);
    m_membership_isSet = !json[QString("membership")].isNull() && m_membership_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_pending_messages_isValid = ::OpenAPI::fromJsonValue(m_pending_messages, json[QString("pending_messages")]);
    m_pending_messages_isSet = !json[QString("pending_messages")].isNull() && m_pending_messages_isValid;

    m_pinned_messages_isValid = ::OpenAPI::fromJsonValue(m_pinned_messages, json[QString("pinned_messages")]);
    m_pinned_messages_isSet = !json[QString("pinned_messages")].isNull() && m_pinned_messages_isValid;

    m_read_isValid = ::OpenAPI::fromJsonValue(m_read, json[QString("read")]);
    m_read_isSet = !json[QString("read")].isNull() && m_read_isValid;

    m_watcher_count_isValid = ::OpenAPI::fromJsonValue(m_watcher_count, json[QString("watcher_count")]);
    m_watcher_count_isSet = !json[QString("watcher_count")].isNull() && m_watcher_count_isValid;

    m_watchers_isValid = ::OpenAPI::fromJsonValue(m_watchers, json[QString("watchers")]);
    m_watchers_isSet = !json[QString("watchers")].isNull() && m_watchers_isValid;
}

QString OAIChannelStateResponseFields::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelStateResponseFields::asJsonObject() const {
    QJsonObject obj;
    if (m_channel.isSet()) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_hidden_isSet) {
        obj.insert(QString("hidden"), ::OpenAPI::toJsonValue(m_hidden));
    }
    if (m_hide_messages_before_isSet) {
        obj.insert(QString("hide_messages_before"), ::OpenAPI::toJsonValue(m_hide_messages_before));
    }
    if (m_members.size() > 0) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_membership.isSet()) {
        obj.insert(QString("membership"), ::OpenAPI::toJsonValue(m_membership));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_pending_messages.size() > 0) {
        obj.insert(QString("pending_messages"), ::OpenAPI::toJsonValue(m_pending_messages));
    }
    if (m_pinned_messages.size() > 0) {
        obj.insert(QString("pinned_messages"), ::OpenAPI::toJsonValue(m_pinned_messages));
    }
    if (m_read.size() > 0) {
        obj.insert(QString("read"), ::OpenAPI::toJsonValue(m_read));
    }
    if (m_watcher_count_isSet) {
        obj.insert(QString("watcher_count"), ::OpenAPI::toJsonValue(m_watcher_count));
    }
    if (m_watchers.size() > 0) {
        obj.insert(QString("watchers"), ::OpenAPI::toJsonValue(m_watchers));
    }
    return obj;
}

OAIChannelResponse OAIChannelStateResponseFields::getChannel() const {
    return m_channel;
}
void OAIChannelStateResponseFields::setChannel(const OAIChannelResponse &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIChannelStateResponseFields::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIChannelStateResponseFields::is_channel_Valid() const{
    return m_channel_isValid;
}

bool OAIChannelStateResponseFields::isHidden() const {
    return m_hidden;
}
void OAIChannelStateResponseFields::setHidden(const bool &hidden) {
    m_hidden = hidden;
    m_hidden_isSet = true;
}

bool OAIChannelStateResponseFields::is_hidden_Set() const{
    return m_hidden_isSet;
}

bool OAIChannelStateResponseFields::is_hidden_Valid() const{
    return m_hidden_isValid;
}

QDateTime OAIChannelStateResponseFields::getHideMessagesBefore() const {
    return m_hide_messages_before;
}
void OAIChannelStateResponseFields::setHideMessagesBefore(const QDateTime &hide_messages_before) {
    m_hide_messages_before = hide_messages_before;
    m_hide_messages_before_isSet = true;
}

bool OAIChannelStateResponseFields::is_hide_messages_before_Set() const{
    return m_hide_messages_before_isSet;
}

bool OAIChannelStateResponseFields::is_hide_messages_before_Valid() const{
    return m_hide_messages_before_isValid;
}

QList<OAIChannelMember> OAIChannelStateResponseFields::getMembers() const {
    return m_members;
}
void OAIChannelStateResponseFields::setMembers(const QList<OAIChannelMember> &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIChannelStateResponseFields::is_members_Set() const{
    return m_members_isSet;
}

bool OAIChannelStateResponseFields::is_members_Valid() const{
    return m_members_isValid;
}

OAIChannelMember OAIChannelStateResponseFields::getMembership() const {
    return m_membership;
}
void OAIChannelStateResponseFields::setMembership(const OAIChannelMember &membership) {
    m_membership = membership;
    m_membership_isSet = true;
}

bool OAIChannelStateResponseFields::is_membership_Set() const{
    return m_membership_isSet;
}

bool OAIChannelStateResponseFields::is_membership_Valid() const{
    return m_membership_isValid;
}

QList<OAIMessage> OAIChannelStateResponseFields::getMessages() const {
    return m_messages;
}
void OAIChannelStateResponseFields::setMessages(const QList<OAIMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIChannelStateResponseFields::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIChannelStateResponseFields::is_messages_Valid() const{
    return m_messages_isValid;
}

QList<OAIPendingMessage> OAIChannelStateResponseFields::getPendingMessages() const {
    return m_pending_messages;
}
void OAIChannelStateResponseFields::setPendingMessages(const QList<OAIPendingMessage> &pending_messages) {
    m_pending_messages = pending_messages;
    m_pending_messages_isSet = true;
}

bool OAIChannelStateResponseFields::is_pending_messages_Set() const{
    return m_pending_messages_isSet;
}

bool OAIChannelStateResponseFields::is_pending_messages_Valid() const{
    return m_pending_messages_isValid;
}

QList<OAIMessage> OAIChannelStateResponseFields::getPinnedMessages() const {
    return m_pinned_messages;
}
void OAIChannelStateResponseFields::setPinnedMessages(const QList<OAIMessage> &pinned_messages) {
    m_pinned_messages = pinned_messages;
    m_pinned_messages_isSet = true;
}

bool OAIChannelStateResponseFields::is_pinned_messages_Set() const{
    return m_pinned_messages_isSet;
}

bool OAIChannelStateResponseFields::is_pinned_messages_Valid() const{
    return m_pinned_messages_isValid;
}

QList<OAIRead> OAIChannelStateResponseFields::getRead() const {
    return m_read;
}
void OAIChannelStateResponseFields::setRead(const QList<OAIRead> &read) {
    m_read = read;
    m_read_isSet = true;
}

bool OAIChannelStateResponseFields::is_read_Set() const{
    return m_read_isSet;
}

bool OAIChannelStateResponseFields::is_read_Valid() const{
    return m_read_isValid;
}

qint32 OAIChannelStateResponseFields::getWatcherCount() const {
    return m_watcher_count;
}
void OAIChannelStateResponseFields::setWatcherCount(const qint32 &watcher_count) {
    m_watcher_count = watcher_count;
    m_watcher_count_isSet = true;
}

bool OAIChannelStateResponseFields::is_watcher_count_Set() const{
    return m_watcher_count_isSet;
}

bool OAIChannelStateResponseFields::is_watcher_count_Valid() const{
    return m_watcher_count_isValid;
}

QList<OAIUserObject> OAIChannelStateResponseFields::getWatchers() const {
    return m_watchers;
}
void OAIChannelStateResponseFields::setWatchers(const QList<OAIUserObject> &watchers) {
    m_watchers = watchers;
    m_watchers_isSet = true;
}

bool OAIChannelStateResponseFields::is_watchers_Set() const{
    return m_watchers_isSet;
}

bool OAIChannelStateResponseFields::is_watchers_Valid() const{
    return m_watchers_isValid;
}

bool OAIChannelStateResponseFields::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_messages_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_read.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_watcher_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watchers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelStateResponseFields::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_members_isValid && m_messages_isValid && m_pinned_messages_isValid && true;
}

} // namespace OpenAPI
