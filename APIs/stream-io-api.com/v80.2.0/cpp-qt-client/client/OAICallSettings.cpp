/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICallSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICallSettings::OAICallSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICallSettings::OAICallSettings() {
    this->initializeModel();
}

OAICallSettings::~OAICallSettings() {}

void OAICallSettings::initializeModel() {

    m_audio_isSet = false;
    m_audio_isValid = false;

    m_backstage_isSet = false;
    m_backstage_isValid = false;

    m_broadcasting_isSet = false;
    m_broadcasting_isValid = false;

    m_geofencing_isSet = false;
    m_geofencing_isValid = false;

    m_recording_isSet = false;
    m_recording_isValid = false;

    m_ring_isSet = false;
    m_ring_isValid = false;

    m_screensharing_isSet = false;
    m_screensharing_isValid = false;

    m_transcription_isSet = false;
    m_transcription_isValid = false;

    m_video_isSet = false;
    m_video_isValid = false;
}

void OAICallSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICallSettings::fromJsonObject(QJsonObject json) {

    m_audio_isValid = ::OpenAPI::fromJsonValue(m_audio, json[QString("audio")]);
    m_audio_isSet = !json[QString("audio")].isNull() && m_audio_isValid;

    m_backstage_isValid = ::OpenAPI::fromJsonValue(m_backstage, json[QString("backstage")]);
    m_backstage_isSet = !json[QString("backstage")].isNull() && m_backstage_isValid;

    m_broadcasting_isValid = ::OpenAPI::fromJsonValue(m_broadcasting, json[QString("broadcasting")]);
    m_broadcasting_isSet = !json[QString("broadcasting")].isNull() && m_broadcasting_isValid;

    m_geofencing_isValid = ::OpenAPI::fromJsonValue(m_geofencing, json[QString("geofencing")]);
    m_geofencing_isSet = !json[QString("geofencing")].isNull() && m_geofencing_isValid;

    m_recording_isValid = ::OpenAPI::fromJsonValue(m_recording, json[QString("recording")]);
    m_recording_isSet = !json[QString("recording")].isNull() && m_recording_isValid;

    m_ring_isValid = ::OpenAPI::fromJsonValue(m_ring, json[QString("ring")]);
    m_ring_isSet = !json[QString("ring")].isNull() && m_ring_isValid;

    m_screensharing_isValid = ::OpenAPI::fromJsonValue(m_screensharing, json[QString("screensharing")]);
    m_screensharing_isSet = !json[QString("screensharing")].isNull() && m_screensharing_isValid;

    m_transcription_isValid = ::OpenAPI::fromJsonValue(m_transcription, json[QString("transcription")]);
    m_transcription_isSet = !json[QString("transcription")].isNull() && m_transcription_isValid;

    m_video_isValid = ::OpenAPI::fromJsonValue(m_video, json[QString("video")]);
    m_video_isSet = !json[QString("video")].isNull() && m_video_isValid;
}

QString OAICallSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICallSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_audio.isSet()) {
        obj.insert(QString("audio"), ::OpenAPI::toJsonValue(m_audio));
    }
    if (m_backstage.isSet()) {
        obj.insert(QString("backstage"), ::OpenAPI::toJsonValue(m_backstage));
    }
    if (m_broadcasting.isSet()) {
        obj.insert(QString("broadcasting"), ::OpenAPI::toJsonValue(m_broadcasting));
    }
    if (m_geofencing.isSet()) {
        obj.insert(QString("geofencing"), ::OpenAPI::toJsonValue(m_geofencing));
    }
    if (m_recording.isSet()) {
        obj.insert(QString("recording"), ::OpenAPI::toJsonValue(m_recording));
    }
    if (m_ring.isSet()) {
        obj.insert(QString("ring"), ::OpenAPI::toJsonValue(m_ring));
    }
    if (m_screensharing.isSet()) {
        obj.insert(QString("screensharing"), ::OpenAPI::toJsonValue(m_screensharing));
    }
    if (m_transcription.isSet()) {
        obj.insert(QString("transcription"), ::OpenAPI::toJsonValue(m_transcription));
    }
    if (m_video.isSet()) {
        obj.insert(QString("video"), ::OpenAPI::toJsonValue(m_video));
    }
    return obj;
}

OAIAudioSettings OAICallSettings::getAudio() const {
    return m_audio;
}
void OAICallSettings::setAudio(const OAIAudioSettings &audio) {
    m_audio = audio;
    m_audio_isSet = true;
}

bool OAICallSettings::is_audio_Set() const{
    return m_audio_isSet;
}

bool OAICallSettings::is_audio_Valid() const{
    return m_audio_isValid;
}

OAIBackstageSettings OAICallSettings::getBackstage() const {
    return m_backstage;
}
void OAICallSettings::setBackstage(const OAIBackstageSettings &backstage) {
    m_backstage = backstage;
    m_backstage_isSet = true;
}

bool OAICallSettings::is_backstage_Set() const{
    return m_backstage_isSet;
}

bool OAICallSettings::is_backstage_Valid() const{
    return m_backstage_isValid;
}

OAIBroadcastSettings OAICallSettings::getBroadcasting() const {
    return m_broadcasting;
}
void OAICallSettings::setBroadcasting(const OAIBroadcastSettings &broadcasting) {
    m_broadcasting = broadcasting;
    m_broadcasting_isSet = true;
}

bool OAICallSettings::is_broadcasting_Set() const{
    return m_broadcasting_isSet;
}

bool OAICallSettings::is_broadcasting_Valid() const{
    return m_broadcasting_isValid;
}

OAIGeofenceSettings OAICallSettings::getGeofencing() const {
    return m_geofencing;
}
void OAICallSettings::setGeofencing(const OAIGeofenceSettings &geofencing) {
    m_geofencing = geofencing;
    m_geofencing_isSet = true;
}

bool OAICallSettings::is_geofencing_Set() const{
    return m_geofencing_isSet;
}

bool OAICallSettings::is_geofencing_Valid() const{
    return m_geofencing_isValid;
}

OAIRecordSettings OAICallSettings::getRecording() const {
    return m_recording;
}
void OAICallSettings::setRecording(const OAIRecordSettings &recording) {
    m_recording = recording;
    m_recording_isSet = true;
}

bool OAICallSettings::is_recording_Set() const{
    return m_recording_isSet;
}

bool OAICallSettings::is_recording_Valid() const{
    return m_recording_isValid;
}

OAIRingSettings OAICallSettings::getRing() const {
    return m_ring;
}
void OAICallSettings::setRing(const OAIRingSettings &ring) {
    m_ring = ring;
    m_ring_isSet = true;
}

bool OAICallSettings::is_ring_Set() const{
    return m_ring_isSet;
}

bool OAICallSettings::is_ring_Valid() const{
    return m_ring_isValid;
}

OAIScreensharingSettings OAICallSettings::getScreensharing() const {
    return m_screensharing;
}
void OAICallSettings::setScreensharing(const OAIScreensharingSettings &screensharing) {
    m_screensharing = screensharing;
    m_screensharing_isSet = true;
}

bool OAICallSettings::is_screensharing_Set() const{
    return m_screensharing_isSet;
}

bool OAICallSettings::is_screensharing_Valid() const{
    return m_screensharing_isValid;
}

OAITranscriptionSettings OAICallSettings::getTranscription() const {
    return m_transcription;
}
void OAICallSettings::setTranscription(const OAITranscriptionSettings &transcription) {
    m_transcription = transcription;
    m_transcription_isSet = true;
}

bool OAICallSettings::is_transcription_Set() const{
    return m_transcription_isSet;
}

bool OAICallSettings::is_transcription_Valid() const{
    return m_transcription_isValid;
}

OAIVideoSettings OAICallSettings::getVideo() const {
    return m_video;
}
void OAICallSettings::setVideo(const OAIVideoSettings &video) {
    m_video = video;
    m_video_isSet = true;
}

bool OAICallSettings::is_video_Set() const{
    return m_video_isSet;
}

bool OAICallSettings::is_video_Valid() const{
    return m_video_isValid;
}

bool OAICallSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backstage.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_broadcasting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geofencing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recording.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ring.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_screensharing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transcription.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICallSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
