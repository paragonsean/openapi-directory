/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAIBanRequest.h"
#include "OAIConnectRequest.h"
#include "OAIDeactivateUserRequest.h"
#include "OAIDeactivateUserResponse.h"
#include "OAIDeactivateUsersRequest.h"
#include "OAIDeactivateUsersResponse.h"
#include "OAIDeleteUserResponse.h"
#include "OAIDeleteUsersRequest.h"
#include "OAIDeleteUsersResponse.h"
#include "OAIExportUserResponse.h"
#include "OAIExportUsersRequest.h"
#include "OAIExportUsersResponse.h"
#include "OAIFlagRequest.h"
#include "OAIFlagResponse.h"
#include "OAIGuestRequest.h"
#include "OAIGuestResponse.h"
#include "OAIMuteUserRequest.h"
#include "OAIMuteUserResponse.h"
#include "OAIQueryBannedUsersRequest.h"
#include "OAIQueryBannedUsersResponse.h"
#include "OAIQueryUsersRequest.h"
#include "OAIReactivateUserRequest.h"
#include "OAIReactivateUserResponse.h"
#include "OAIReactivateUsersRequest.h"
#include "OAIReactivateUsersResponse.h"
#include "OAIResponse.h"
#include "OAIRestoreUsersRequest.h"
#include "OAIUnmuteResponse.h"
#include "OAIUnmuteUserRequest.h"
#include "OAIUpdateUserPartialRequest.h"
#include "OAIUpdateUsersRequest.h"
#include "OAIUpdateUsersResponse.h"
#include "OAIUsersResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_ban_request OAIBanRequest [required]
    */
    virtual void ban(const OAIBanRequest &oai_ban_request);

    /**
    * @param[in]  json OAIConnectRequest [optional]
    */
    virtual void connect(const ::OpenAPI::OptionalParam<OAIConnectRequest> &json = ::OpenAPI::OptionalParam<OAIConnectRequest>());

    /**
    * @param[in]  oai_guest_request OAIGuestRequest [required]
    */
    virtual void createGuest(const OAIGuestRequest &oai_guest_request);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_deactivate_user_request OAIDeactivateUserRequest [required]
    */
    virtual void deactivateUser(const QString &user_id, const OAIDeactivateUserRequest &oai_deactivate_user_request);

    /**
    * @param[in]  oai_deactivate_users_request OAIDeactivateUsersRequest [required]
    */
    virtual void deactivateUsers(const OAIDeactivateUsersRequest &oai_deactivate_users_request);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  mark_messages_deleted bool [optional]
    * @param[in]  hard_delete bool [optional]
    * @param[in]  delete_conversation_channels bool [optional]
    */
    virtual void deleteUser(const QString &user_id, const ::OpenAPI::OptionalParam<bool> &mark_messages_deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &hard_delete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &delete_conversation_channels = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_delete_users_request OAIDeleteUsersRequest [required]
    */
    virtual void deleteUsers(const OAIDeleteUsersRequest &oai_delete_users_request);

    /**
    * @param[in]  oai_export_users_request OAIExportUsersRequest [required]
    */
    virtual void exportUser(const OAIExportUsersRequest &oai_export_users_request);

    /**
    * @param[in]  oai_flag_request OAIFlagRequest [required]
    */
    virtual void flag(const OAIFlagRequest &oai_flag_request);

    /**
    * @param[in]  json OAIConnectRequest [optional]
    * @param[in]  connection_id QString [optional]
    */
    virtual void longPoll(const ::OpenAPI::OptionalParam<OAIConnectRequest> &json = ::OpenAPI::OptionalParam<OAIConnectRequest>(), const ::OpenAPI::OptionalParam<QString> &connection_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_mute_user_request OAIMuteUserRequest [required]
    */
    virtual void muteUser(const OAIMuteUserRequest &oai_mute_user_request);

    /**
    * @param[in]  payload OAIQueryBannedUsersRequest [optional]
    */
    virtual void queryBannedUsers(const ::OpenAPI::OptionalParam<OAIQueryBannedUsersRequest> &payload = ::OpenAPI::OptionalParam<OAIQueryBannedUsersRequest>());

    /**
    * @param[in]  payload OAIQueryUsersRequest [optional]
    */
    virtual void queryUsers(const ::OpenAPI::OptionalParam<OAIQueryUsersRequest> &payload = ::OpenAPI::OptionalParam<OAIQueryUsersRequest>());

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_reactivate_user_request OAIReactivateUserRequest [required]
    */
    virtual void reactivateUser(const QString &user_id, const OAIReactivateUserRequest &oai_reactivate_user_request);

    /**
    * @param[in]  oai_reactivate_users_request OAIReactivateUsersRequest [required]
    */
    virtual void reactivateUsers(const OAIReactivateUsersRequest &oai_reactivate_users_request);

    /**
    * @param[in]  oai_restore_users_request OAIRestoreUsersRequest [required]
    */
    virtual void restoreUsers(const OAIRestoreUsersRequest &oai_restore_users_request);

    /**
    * @param[in]  target_user_id QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  id QString [optional]
    */
    virtual void unban(const ::OpenAPI::OptionalParam<QString> &target_user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_flag_request OAIFlagRequest [required]
    */
    virtual void unflag(const OAIFlagRequest &oai_flag_request);

    /**
    * @param[in]  oai_unmute_user_request OAIUnmuteUserRequest [required]
    */
    virtual void unmuteUser(const OAIUnmuteUserRequest &oai_unmute_user_request);

    /**
    * @param[in]  oai_update_users_request OAIUpdateUsersRequest [required]
    */
    virtual void updateUsers(const OAIUpdateUsersRequest &oai_update_users_request);

    /**
    * @param[in]  oai_update_user_partial_request OAIUpdateUserPartialRequest [required]
    */
    virtual void updateUsersPartial(const OAIUpdateUserPartialRequest &oai_update_user_partial_request);

    /**
    * @param[in]  user_id QString [required]
    */
    virtual void usersUserIdExportGet(const QString &user_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void banCallback(OAIHttpRequestWorker *worker);
    void connectCallback(OAIHttpRequestWorker *worker);
    void createGuestCallback(OAIHttpRequestWorker *worker);
    void deactivateUserCallback(OAIHttpRequestWorker *worker);
    void deactivateUsersCallback(OAIHttpRequestWorker *worker);
    void deleteUserCallback(OAIHttpRequestWorker *worker);
    void deleteUsersCallback(OAIHttpRequestWorker *worker);
    void exportUserCallback(OAIHttpRequestWorker *worker);
    void flagCallback(OAIHttpRequestWorker *worker);
    void longPollCallback(OAIHttpRequestWorker *worker);
    void muteUserCallback(OAIHttpRequestWorker *worker);
    void queryBannedUsersCallback(OAIHttpRequestWorker *worker);
    void queryUsersCallback(OAIHttpRequestWorker *worker);
    void reactivateUserCallback(OAIHttpRequestWorker *worker);
    void reactivateUsersCallback(OAIHttpRequestWorker *worker);
    void restoreUsersCallback(OAIHttpRequestWorker *worker);
    void unbanCallback(OAIHttpRequestWorker *worker);
    void unflagCallback(OAIHttpRequestWorker *worker);
    void unmuteUserCallback(OAIHttpRequestWorker *worker);
    void updateUsersCallback(OAIHttpRequestWorker *worker);
    void updateUsersPartialCallback(OAIHttpRequestWorker *worker);
    void usersUserIdExportGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void banSignal(OAIResponse summary);
    void connectSignal();
    void createGuestSignal(OAIGuestResponse summary);
    void deactivateUserSignal(OAIDeactivateUserResponse summary);
    void deactivateUsersSignal(OAIDeactivateUsersResponse summary);
    void deleteUserSignal(OAIDeleteUserResponse summary);
    void deleteUsersSignal(OAIDeleteUsersResponse summary);
    void exportUserSignal(OAIExportUsersResponse summary);
    void flagSignal(OAIFlagResponse summary);
    void longPollSignal();
    void muteUserSignal(OAIMuteUserResponse summary);
    void queryBannedUsersSignal(OAIQueryBannedUsersResponse summary);
    void queryUsersSignal(OAIUsersResponse summary);
    void reactivateUserSignal(OAIReactivateUserResponse summary);
    void reactivateUsersSignal(OAIReactivateUsersResponse summary);
    void restoreUsersSignal(OAIResponse summary);
    void unbanSignal(OAIResponse summary);
    void unflagSignal(OAIFlagResponse summary);
    void unmuteUserSignal(OAIUnmuteResponse summary);
    void updateUsersSignal(OAIUpdateUsersResponse summary);
    void updateUsersPartialSignal(OAIUpdateUsersResponse summary);
    void usersUserIdExportGetSignal(OAIExportUserResponse summary);


    void banSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void connectSignalFull(OAIHttpRequestWorker *worker);
    void createGuestSignalFull(OAIHttpRequestWorker *worker, OAIGuestResponse summary);
    void deactivateUserSignalFull(OAIHttpRequestWorker *worker, OAIDeactivateUserResponse summary);
    void deactivateUsersSignalFull(OAIHttpRequestWorker *worker, OAIDeactivateUsersResponse summary);
    void deleteUserSignalFull(OAIHttpRequestWorker *worker, OAIDeleteUserResponse summary);
    void deleteUsersSignalFull(OAIHttpRequestWorker *worker, OAIDeleteUsersResponse summary);
    void exportUserSignalFull(OAIHttpRequestWorker *worker, OAIExportUsersResponse summary);
    void flagSignalFull(OAIHttpRequestWorker *worker, OAIFlagResponse summary);
    void longPollSignalFull(OAIHttpRequestWorker *worker);
    void muteUserSignalFull(OAIHttpRequestWorker *worker, OAIMuteUserResponse summary);
    void queryBannedUsersSignalFull(OAIHttpRequestWorker *worker, OAIQueryBannedUsersResponse summary);
    void queryUsersSignalFull(OAIHttpRequestWorker *worker, OAIUsersResponse summary);
    void reactivateUserSignalFull(OAIHttpRequestWorker *worker, OAIReactivateUserResponse summary);
    void reactivateUsersSignalFull(OAIHttpRequestWorker *worker, OAIReactivateUsersResponse summary);
    void restoreUsersSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void unbanSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void unflagSignalFull(OAIHttpRequestWorker *worker, OAIFlagResponse summary);
    void unmuteUserSignalFull(OAIHttpRequestWorker *worker, OAIUnmuteResponse summary);
    void updateUsersSignalFull(OAIHttpRequestWorker *worker, OAIUpdateUsersResponse summary);
    void updateUsersPartialSignalFull(OAIHttpRequestWorker *worker, OAIUpdateUsersResponse summary);
    void usersUserIdExportGetSignalFull(OAIHttpRequestWorker *worker, OAIExportUserResponse summary);

    Q_DECL_DEPRECATED_X("Use banSignalError() instead")
    void banSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void banSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectSignalError() instead")
    void connectSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void connectSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGuestSignalError() instead")
    void createGuestSignalE(OAIGuestResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGuestSignalError(OAIGuestResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deactivateUserSignalError() instead")
    void deactivateUserSignalE(OAIDeactivateUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateUserSignalError(OAIDeactivateUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deactivateUsersSignalError() instead")
    void deactivateUsersSignalE(OAIDeactivateUsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateUsersSignalError(OAIDeactivateUsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserSignalError() instead")
    void deleteUserSignalE(OAIDeleteUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalError(OAIDeleteUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUsersSignalError() instead")
    void deleteUsersSignalE(OAIDeleteUsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUsersSignalError(OAIDeleteUsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportUserSignalError() instead")
    void exportUserSignalE(OAIExportUsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportUserSignalError(OAIExportUsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flagSignalError() instead")
    void flagSignalE(OAIFlagResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void flagSignalError(OAIFlagResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use longPollSignalError() instead")
    void longPollSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void longPollSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use muteUserSignalError() instead")
    void muteUserSignalE(OAIMuteUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void muteUserSignalError(OAIMuteUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryBannedUsersSignalError() instead")
    void queryBannedUsersSignalE(OAIQueryBannedUsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryBannedUsersSignalError(OAIQueryBannedUsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryUsersSignalError() instead")
    void queryUsersSignalE(OAIUsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryUsersSignalError(OAIUsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactivateUserSignalError() instead")
    void reactivateUserSignalE(OAIReactivateUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactivateUserSignalError(OAIReactivateUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactivateUsersSignalError() instead")
    void reactivateUsersSignalE(OAIReactivateUsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactivateUsersSignalError(OAIReactivateUsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreUsersSignalError() instead")
    void restoreUsersSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreUsersSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unbanSignalError() instead")
    void unbanSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unbanSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unflagSignalError() instead")
    void unflagSignalE(OAIFlagResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unflagSignalError(OAIFlagResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unmuteUserSignalError() instead")
    void unmuteUserSignalE(OAIUnmuteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unmuteUserSignalError(OAIUnmuteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUsersSignalError() instead")
    void updateUsersSignalE(OAIUpdateUsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUsersSignalError(OAIUpdateUsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUsersPartialSignalError() instead")
    void updateUsersPartialSignalE(OAIUpdateUsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUsersPartialSignalError(OAIUpdateUsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdExportGetSignalError() instead")
    void usersUserIdExportGetSignalE(OAIExportUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdExportGetSignalError(OAIExportUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use banSignalErrorFull() instead")
    void banSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void banSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use connectSignalErrorFull() instead")
    void connectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void connectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGuestSignalErrorFull() instead")
    void createGuestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGuestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deactivateUserSignalErrorFull() instead")
    void deactivateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deactivateUsersSignalErrorFull() instead")
    void deactivateUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserSignalErrorFull() instead")
    void deleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUsersSignalErrorFull() instead")
    void deleteUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportUserSignalErrorFull() instead")
    void exportUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flagSignalErrorFull() instead")
    void flagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use longPollSignalErrorFull() instead")
    void longPollSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void longPollSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use muteUserSignalErrorFull() instead")
    void muteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void muteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryBannedUsersSignalErrorFull() instead")
    void queryBannedUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryBannedUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryUsersSignalErrorFull() instead")
    void queryUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactivateUserSignalErrorFull() instead")
    void reactivateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactivateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactivateUsersSignalErrorFull() instead")
    void reactivateUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactivateUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restoreUsersSignalErrorFull() instead")
    void restoreUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restoreUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unbanSignalErrorFull() instead")
    void unbanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unbanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unflagSignalErrorFull() instead")
    void unflagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unflagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unmuteUserSignalErrorFull() instead")
    void unmuteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unmuteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUsersSignalErrorFull() instead")
    void updateUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUsersPartialSignalErrorFull() instead")
    void updateUsersPartialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUsersPartialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersUserIdExportGetSignalErrorFull() instead")
    void usersUserIdExportGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersUserIdExportGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
