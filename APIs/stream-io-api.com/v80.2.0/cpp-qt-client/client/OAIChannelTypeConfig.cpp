/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelTypeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelTypeConfig::OAIChannelTypeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelTypeConfig::OAIChannelTypeConfig() {
    this->initializeModel();
}

OAIChannelTypeConfig::~OAIChannelTypeConfig() {}

void OAIChannelTypeConfig::initializeModel() {

    m_automod_isSet = false;
    m_automod_isValid = false;

    m_automod_behavior_isSet = false;
    m_automod_behavior_isValid = false;

    m_automod_thresholds_isSet = false;
    m_automod_thresholds_isValid = false;

    m_blocklist_isSet = false;
    m_blocklist_isValid = false;

    m_blocklist_behavior_isSet = false;
    m_blocklist_behavior_isValid = false;

    m_commands_isSet = false;
    m_commands_isValid = false;

    m_connect_events_isSet = false;
    m_connect_events_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_custom_events_isSet = false;
    m_custom_events_isValid = false;

    m_grants_isSet = false;
    m_grants_isValid = false;

    m_max_message_length_isSet = false;
    m_max_message_length_isValid = false;

    m_message_retention_isSet = false;
    m_message_retention_isValid = false;

    m_mutes_isSet = false;
    m_mutes_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_push_notifications_isSet = false;
    m_push_notifications_isValid = false;

    m_quotes_isSet = false;
    m_quotes_isValid = false;

    m_reactions_isSet = false;
    m_reactions_isValid = false;

    m_read_events_isSet = false;
    m_read_events_isValid = false;

    m_reminders_isSet = false;
    m_reminders_isValid = false;

    m_replies_isSet = false;
    m_replies_isValid = false;

    m_search_isSet = false;
    m_search_isValid = false;

    m_typing_events_isSet = false;
    m_typing_events_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_uploads_isSet = false;
    m_uploads_isValid = false;

    m_url_enrichment_isSet = false;
    m_url_enrichment_isValid = false;
}

void OAIChannelTypeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelTypeConfig::fromJsonObject(QJsonObject json) {

    m_automod_isValid = ::OpenAPI::fromJsonValue(m_automod, json[QString("automod")]);
    m_automod_isSet = !json[QString("automod")].isNull() && m_automod_isValid;

    m_automod_behavior_isValid = ::OpenAPI::fromJsonValue(m_automod_behavior, json[QString("automod_behavior")]);
    m_automod_behavior_isSet = !json[QString("automod_behavior")].isNull() && m_automod_behavior_isValid;

    m_automod_thresholds_isValid = ::OpenAPI::fromJsonValue(m_automod_thresholds, json[QString("automod_thresholds")]);
    m_automod_thresholds_isSet = !json[QString("automod_thresholds")].isNull() && m_automod_thresholds_isValid;

    m_blocklist_isValid = ::OpenAPI::fromJsonValue(m_blocklist, json[QString("blocklist")]);
    m_blocklist_isSet = !json[QString("blocklist")].isNull() && m_blocklist_isValid;

    m_blocklist_behavior_isValid = ::OpenAPI::fromJsonValue(m_blocklist_behavior, json[QString("blocklist_behavior")]);
    m_blocklist_behavior_isSet = !json[QString("blocklist_behavior")].isNull() && m_blocklist_behavior_isValid;

    m_commands_isValid = ::OpenAPI::fromJsonValue(m_commands, json[QString("commands")]);
    m_commands_isSet = !json[QString("commands")].isNull() && m_commands_isValid;

    m_connect_events_isValid = ::OpenAPI::fromJsonValue(m_connect_events, json[QString("connect_events")]);
    m_connect_events_isSet = !json[QString("connect_events")].isNull() && m_connect_events_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_custom_events_isValid = ::OpenAPI::fromJsonValue(m_custom_events, json[QString("custom_events")]);
    m_custom_events_isSet = !json[QString("custom_events")].isNull() && m_custom_events_isValid;

    if(json["grants"].isObject()){
        auto varmap = json["grants"].toObject().toVariantMap();
        m_grants_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_grants_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_grants_isSet &= !jval.isNull() && m_grants_isValid;
                m_grants.insert(m_grants.end(), val, item);
            }
        }
    }

    m_max_message_length_isValid = ::OpenAPI::fromJsonValue(m_max_message_length, json[QString("max_message_length")]);
    m_max_message_length_isSet = !json[QString("max_message_length")].isNull() && m_max_message_length_isValid;

    m_message_retention_isValid = ::OpenAPI::fromJsonValue(m_message_retention, json[QString("message_retention")]);
    m_message_retention_isSet = !json[QString("message_retention")].isNull() && m_message_retention_isValid;

    m_mutes_isValid = ::OpenAPI::fromJsonValue(m_mutes, json[QString("mutes")]);
    m_mutes_isSet = !json[QString("mutes")].isNull() && m_mutes_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_push_notifications_isValid = ::OpenAPI::fromJsonValue(m_push_notifications, json[QString("push_notifications")]);
    m_push_notifications_isSet = !json[QString("push_notifications")].isNull() && m_push_notifications_isValid;

    m_quotes_isValid = ::OpenAPI::fromJsonValue(m_quotes, json[QString("quotes")]);
    m_quotes_isSet = !json[QString("quotes")].isNull() && m_quotes_isValid;

    m_reactions_isValid = ::OpenAPI::fromJsonValue(m_reactions, json[QString("reactions")]);
    m_reactions_isSet = !json[QString("reactions")].isNull() && m_reactions_isValid;

    m_read_events_isValid = ::OpenAPI::fromJsonValue(m_read_events, json[QString("read_events")]);
    m_read_events_isSet = !json[QString("read_events")].isNull() && m_read_events_isValid;

    m_reminders_isValid = ::OpenAPI::fromJsonValue(m_reminders, json[QString("reminders")]);
    m_reminders_isSet = !json[QString("reminders")].isNull() && m_reminders_isValid;

    m_replies_isValid = ::OpenAPI::fromJsonValue(m_replies, json[QString("replies")]);
    m_replies_isSet = !json[QString("replies")].isNull() && m_replies_isValid;

    m_search_isValid = ::OpenAPI::fromJsonValue(m_search, json[QString("search")]);
    m_search_isSet = !json[QString("search")].isNull() && m_search_isValid;

    m_typing_events_isValid = ::OpenAPI::fromJsonValue(m_typing_events, json[QString("typing_events")]);
    m_typing_events_isSet = !json[QString("typing_events")].isNull() && m_typing_events_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_uploads_isValid = ::OpenAPI::fromJsonValue(m_uploads, json[QString("uploads")]);
    m_uploads_isSet = !json[QString("uploads")].isNull() && m_uploads_isValid;

    m_url_enrichment_isValid = ::OpenAPI::fromJsonValue(m_url_enrichment, json[QString("url_enrichment")]);
    m_url_enrichment_isSet = !json[QString("url_enrichment")].isNull() && m_url_enrichment_isValid;
}

QString OAIChannelTypeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelTypeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_automod_isSet) {
        obj.insert(QString("automod"), ::OpenAPI::toJsonValue(m_automod));
    }
    if (m_automod_behavior_isSet) {
        obj.insert(QString("automod_behavior"), ::OpenAPI::toJsonValue(m_automod_behavior));
    }
    if (m_automod_thresholds.isSet()) {
        obj.insert(QString("automod_thresholds"), ::OpenAPI::toJsonValue(m_automod_thresholds));
    }
    if (m_blocklist_isSet) {
        obj.insert(QString("blocklist"), ::OpenAPI::toJsonValue(m_blocklist));
    }
    if (m_blocklist_behavior_isSet) {
        obj.insert(QString("blocklist_behavior"), ::OpenAPI::toJsonValue(m_blocklist_behavior));
    }
    if (m_commands.size() > 0) {
        obj.insert(QString("commands"), ::OpenAPI::toJsonValue(m_commands));
    }
    if (m_connect_events_isSet) {
        obj.insert(QString("connect_events"), ::OpenAPI::toJsonValue(m_connect_events));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_custom_events_isSet) {
        obj.insert(QString("custom_events"), ::OpenAPI::toJsonValue(m_custom_events));
    }
    if (m_grants.size() > 0) {
        
        obj.insert(QString("grants"), toJsonValue(m_grants));
    }
    if (m_max_message_length_isSet) {
        obj.insert(QString("max_message_length"), ::OpenAPI::toJsonValue(m_max_message_length));
    }
    if (m_message_retention_isSet) {
        obj.insert(QString("message_retention"), ::OpenAPI::toJsonValue(m_message_retention));
    }
    if (m_mutes_isSet) {
        obj.insert(QString("mutes"), ::OpenAPI::toJsonValue(m_mutes));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_push_notifications_isSet) {
        obj.insert(QString("push_notifications"), ::OpenAPI::toJsonValue(m_push_notifications));
    }
    if (m_quotes_isSet) {
        obj.insert(QString("quotes"), ::OpenAPI::toJsonValue(m_quotes));
    }
    if (m_reactions_isSet) {
        obj.insert(QString("reactions"), ::OpenAPI::toJsonValue(m_reactions));
    }
    if (m_read_events_isSet) {
        obj.insert(QString("read_events"), ::OpenAPI::toJsonValue(m_read_events));
    }
    if (m_reminders_isSet) {
        obj.insert(QString("reminders"), ::OpenAPI::toJsonValue(m_reminders));
    }
    if (m_replies_isSet) {
        obj.insert(QString("replies"), ::OpenAPI::toJsonValue(m_replies));
    }
    if (m_search_isSet) {
        obj.insert(QString("search"), ::OpenAPI::toJsonValue(m_search));
    }
    if (m_typing_events_isSet) {
        obj.insert(QString("typing_events"), ::OpenAPI::toJsonValue(m_typing_events));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_uploads_isSet) {
        obj.insert(QString("uploads"), ::OpenAPI::toJsonValue(m_uploads));
    }
    if (m_url_enrichment_isSet) {
        obj.insert(QString("url_enrichment"), ::OpenAPI::toJsonValue(m_url_enrichment));
    }
    return obj;
}

QString OAIChannelTypeConfig::getAutomod() const {
    return m_automod;
}
void OAIChannelTypeConfig::setAutomod(const QString &automod) {
    m_automod = automod;
    m_automod_isSet = true;
}

bool OAIChannelTypeConfig::is_automod_Set() const{
    return m_automod_isSet;
}

bool OAIChannelTypeConfig::is_automod_Valid() const{
    return m_automod_isValid;
}

QString OAIChannelTypeConfig::getAutomodBehavior() const {
    return m_automod_behavior;
}
void OAIChannelTypeConfig::setAutomodBehavior(const QString &automod_behavior) {
    m_automod_behavior = automod_behavior;
    m_automod_behavior_isSet = true;
}

bool OAIChannelTypeConfig::is_automod_behavior_Set() const{
    return m_automod_behavior_isSet;
}

bool OAIChannelTypeConfig::is_automod_behavior_Valid() const{
    return m_automod_behavior_isValid;
}

OAIThresholds OAIChannelTypeConfig::getAutomodThresholds() const {
    return m_automod_thresholds;
}
void OAIChannelTypeConfig::setAutomodThresholds(const OAIThresholds &automod_thresholds) {
    m_automod_thresholds = automod_thresholds;
    m_automod_thresholds_isSet = true;
}

bool OAIChannelTypeConfig::is_automod_thresholds_Set() const{
    return m_automod_thresholds_isSet;
}

bool OAIChannelTypeConfig::is_automod_thresholds_Valid() const{
    return m_automod_thresholds_isValid;
}

QString OAIChannelTypeConfig::getBlocklist() const {
    return m_blocklist;
}
void OAIChannelTypeConfig::setBlocklist(const QString &blocklist) {
    m_blocklist = blocklist;
    m_blocklist_isSet = true;
}

bool OAIChannelTypeConfig::is_blocklist_Set() const{
    return m_blocklist_isSet;
}

bool OAIChannelTypeConfig::is_blocklist_Valid() const{
    return m_blocklist_isValid;
}

QString OAIChannelTypeConfig::getBlocklistBehavior() const {
    return m_blocklist_behavior;
}
void OAIChannelTypeConfig::setBlocklistBehavior(const QString &blocklist_behavior) {
    m_blocklist_behavior = blocklist_behavior;
    m_blocklist_behavior_isSet = true;
}

bool OAIChannelTypeConfig::is_blocklist_behavior_Set() const{
    return m_blocklist_behavior_isSet;
}

bool OAIChannelTypeConfig::is_blocklist_behavior_Valid() const{
    return m_blocklist_behavior_isValid;
}

QList<OAICommand> OAIChannelTypeConfig::getCommands() const {
    return m_commands;
}
void OAIChannelTypeConfig::setCommands(const QList<OAICommand> &commands) {
    m_commands = commands;
    m_commands_isSet = true;
}

bool OAIChannelTypeConfig::is_commands_Set() const{
    return m_commands_isSet;
}

bool OAIChannelTypeConfig::is_commands_Valid() const{
    return m_commands_isValid;
}

bool OAIChannelTypeConfig::isConnectEvents() const {
    return m_connect_events;
}
void OAIChannelTypeConfig::setConnectEvents(const bool &connect_events) {
    m_connect_events = connect_events;
    m_connect_events_isSet = true;
}

bool OAIChannelTypeConfig::is_connect_events_Set() const{
    return m_connect_events_isSet;
}

bool OAIChannelTypeConfig::is_connect_events_Valid() const{
    return m_connect_events_isValid;
}

QDateTime OAIChannelTypeConfig::getCreatedAt() const {
    return m_created_at;
}
void OAIChannelTypeConfig::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIChannelTypeConfig::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIChannelTypeConfig::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIChannelTypeConfig::isCustomEvents() const {
    return m_custom_events;
}
void OAIChannelTypeConfig::setCustomEvents(const bool &custom_events) {
    m_custom_events = custom_events;
    m_custom_events_isSet = true;
}

bool OAIChannelTypeConfig::is_custom_events_Set() const{
    return m_custom_events_isSet;
}

bool OAIChannelTypeConfig::is_custom_events_Valid() const{
    return m_custom_events_isValid;
}

QMap<QString, QList<QString>> OAIChannelTypeConfig::getGrants() const {
    return m_grants;
}
void OAIChannelTypeConfig::setGrants(const QMap<QString, QList<QString>> &grants) {
    m_grants = grants;
    m_grants_isSet = true;
}

bool OAIChannelTypeConfig::is_grants_Set() const{
    return m_grants_isSet;
}

bool OAIChannelTypeConfig::is_grants_Valid() const{
    return m_grants_isValid;
}

qint32 OAIChannelTypeConfig::getMaxMessageLength() const {
    return m_max_message_length;
}
void OAIChannelTypeConfig::setMaxMessageLength(const qint32 &max_message_length) {
    m_max_message_length = max_message_length;
    m_max_message_length_isSet = true;
}

bool OAIChannelTypeConfig::is_max_message_length_Set() const{
    return m_max_message_length_isSet;
}

bool OAIChannelTypeConfig::is_max_message_length_Valid() const{
    return m_max_message_length_isValid;
}

QString OAIChannelTypeConfig::getMessageRetention() const {
    return m_message_retention;
}
void OAIChannelTypeConfig::setMessageRetention(const QString &message_retention) {
    m_message_retention = message_retention;
    m_message_retention_isSet = true;
}

bool OAIChannelTypeConfig::is_message_retention_Set() const{
    return m_message_retention_isSet;
}

bool OAIChannelTypeConfig::is_message_retention_Valid() const{
    return m_message_retention_isValid;
}

bool OAIChannelTypeConfig::isMutes() const {
    return m_mutes;
}
void OAIChannelTypeConfig::setMutes(const bool &mutes) {
    m_mutes = mutes;
    m_mutes_isSet = true;
}

bool OAIChannelTypeConfig::is_mutes_Set() const{
    return m_mutes_isSet;
}

bool OAIChannelTypeConfig::is_mutes_Valid() const{
    return m_mutes_isValid;
}

QString OAIChannelTypeConfig::getName() const {
    return m_name;
}
void OAIChannelTypeConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIChannelTypeConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIChannelTypeConfig::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPolicyRequest_1> OAIChannelTypeConfig::getPermissions() const {
    return m_permissions;
}
void OAIChannelTypeConfig::setPermissions(const QList<OAIPolicyRequest_1> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIChannelTypeConfig::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIChannelTypeConfig::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAIChannelTypeConfig::isPushNotifications() const {
    return m_push_notifications;
}
void OAIChannelTypeConfig::setPushNotifications(const bool &push_notifications) {
    m_push_notifications = push_notifications;
    m_push_notifications_isSet = true;
}

bool OAIChannelTypeConfig::is_push_notifications_Set() const{
    return m_push_notifications_isSet;
}

bool OAIChannelTypeConfig::is_push_notifications_Valid() const{
    return m_push_notifications_isValid;
}

bool OAIChannelTypeConfig::isQuotes() const {
    return m_quotes;
}
void OAIChannelTypeConfig::setQuotes(const bool &quotes) {
    m_quotes = quotes;
    m_quotes_isSet = true;
}

bool OAIChannelTypeConfig::is_quotes_Set() const{
    return m_quotes_isSet;
}

bool OAIChannelTypeConfig::is_quotes_Valid() const{
    return m_quotes_isValid;
}

bool OAIChannelTypeConfig::isReactions() const {
    return m_reactions;
}
void OAIChannelTypeConfig::setReactions(const bool &reactions) {
    m_reactions = reactions;
    m_reactions_isSet = true;
}

bool OAIChannelTypeConfig::is_reactions_Set() const{
    return m_reactions_isSet;
}

bool OAIChannelTypeConfig::is_reactions_Valid() const{
    return m_reactions_isValid;
}

bool OAIChannelTypeConfig::isReadEvents() const {
    return m_read_events;
}
void OAIChannelTypeConfig::setReadEvents(const bool &read_events) {
    m_read_events = read_events;
    m_read_events_isSet = true;
}

bool OAIChannelTypeConfig::is_read_events_Set() const{
    return m_read_events_isSet;
}

bool OAIChannelTypeConfig::is_read_events_Valid() const{
    return m_read_events_isValid;
}

bool OAIChannelTypeConfig::isReminders() const {
    return m_reminders;
}
void OAIChannelTypeConfig::setReminders(const bool &reminders) {
    m_reminders = reminders;
    m_reminders_isSet = true;
}

bool OAIChannelTypeConfig::is_reminders_Set() const{
    return m_reminders_isSet;
}

bool OAIChannelTypeConfig::is_reminders_Valid() const{
    return m_reminders_isValid;
}

bool OAIChannelTypeConfig::isReplies() const {
    return m_replies;
}
void OAIChannelTypeConfig::setReplies(const bool &replies) {
    m_replies = replies;
    m_replies_isSet = true;
}

bool OAIChannelTypeConfig::is_replies_Set() const{
    return m_replies_isSet;
}

bool OAIChannelTypeConfig::is_replies_Valid() const{
    return m_replies_isValid;
}

bool OAIChannelTypeConfig::isSearch() const {
    return m_search;
}
void OAIChannelTypeConfig::setSearch(const bool &search) {
    m_search = search;
    m_search_isSet = true;
}

bool OAIChannelTypeConfig::is_search_Set() const{
    return m_search_isSet;
}

bool OAIChannelTypeConfig::is_search_Valid() const{
    return m_search_isValid;
}

bool OAIChannelTypeConfig::isTypingEvents() const {
    return m_typing_events;
}
void OAIChannelTypeConfig::setTypingEvents(const bool &typing_events) {
    m_typing_events = typing_events;
    m_typing_events_isSet = true;
}

bool OAIChannelTypeConfig::is_typing_events_Set() const{
    return m_typing_events_isSet;
}

bool OAIChannelTypeConfig::is_typing_events_Valid() const{
    return m_typing_events_isValid;
}

QDateTime OAIChannelTypeConfig::getUpdatedAt() const {
    return m_updated_at;
}
void OAIChannelTypeConfig::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIChannelTypeConfig::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIChannelTypeConfig::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIChannelTypeConfig::isUploads() const {
    return m_uploads;
}
void OAIChannelTypeConfig::setUploads(const bool &uploads) {
    m_uploads = uploads;
    m_uploads_isSet = true;
}

bool OAIChannelTypeConfig::is_uploads_Set() const{
    return m_uploads_isSet;
}

bool OAIChannelTypeConfig::is_uploads_Valid() const{
    return m_uploads_isValid;
}

bool OAIChannelTypeConfig::isUrlEnrichment() const {
    return m_url_enrichment;
}
void OAIChannelTypeConfig::setUrlEnrichment(const bool &url_enrichment) {
    m_url_enrichment = url_enrichment;
    m_url_enrichment_isSet = true;
}

bool OAIChannelTypeConfig::is_url_enrichment_Set() const{
    return m_url_enrichment_isSet;
}

bool OAIChannelTypeConfig::is_url_enrichment_Valid() const{
    return m_url_enrichment_isValid;
}

bool OAIChannelTypeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automod_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automod_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automod_thresholds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocklist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocklist_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_connect_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_message_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_retention_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_notifications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quotes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reactions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reminders_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_typing_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_enrichment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelTypeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_automod_isValid && m_automod_behavior_isValid && m_commands_isValid && m_connect_events_isValid && m_created_at_isValid && m_custom_events_isValid && m_grants_isValid && m_max_message_length_isValid && m_message_retention_isValid && m_mutes_isValid && m_name_isValid && m_permissions_isValid && m_push_notifications_isValid && m_quotes_isValid && m_reactions_isValid && m_read_events_isValid && m_reminders_isValid && m_replies_isValid && m_search_isValid && m_typing_events_isValid && m_updated_at_isValid && m_uploads_isValid && m_url_enrichment_isValid && true;
}

} // namespace OpenAPI
