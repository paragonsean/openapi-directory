/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationMarkUnreadEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationMarkUnreadEvent::OAINotificationMarkUnreadEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationMarkUnreadEvent::OAINotificationMarkUnreadEvent() {
    this->initializeModel();
}

OAINotificationMarkUnreadEvent::~OAINotificationMarkUnreadEvent() {}

void OAINotificationMarkUnreadEvent::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_channel_type_isSet = false;
    m_channel_type_isValid = false;

    m_cid_isSet = false;
    m_cid_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_first_unread_message_id_isSet = false;
    m_first_unread_message_id_isValid = false;

    m_last_read_at_isSet = false;
    m_last_read_at_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_total_unread_count_isSet = false;
    m_total_unread_count_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_unread_channels_isSet = false;
    m_unread_channels_isValid = false;

    m_unread_count_isSet = false;
    m_unread_count_isValid = false;

    m_unread_messages_isSet = false;
    m_unread_messages_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAINotificationMarkUnreadEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationMarkUnreadEvent::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channel_id")]);
    m_channel_id_isSet = !json[QString("channel_id")].isNull() && m_channel_id_isValid;

    m_channel_type_isValid = ::OpenAPI::fromJsonValue(m_channel_type, json[QString("channel_type")]);
    m_channel_type_isSet = !json[QString("channel_type")].isNull() && m_channel_type_isValid;

    m_cid_isValid = ::OpenAPI::fromJsonValue(m_cid, json[QString("cid")]);
    m_cid_isSet = !json[QString("cid")].isNull() && m_cid_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_first_unread_message_id_isValid = ::OpenAPI::fromJsonValue(m_first_unread_message_id, json[QString("first_unread_message_id")]);
    m_first_unread_message_id_isSet = !json[QString("first_unread_message_id")].isNull() && m_first_unread_message_id_isValid;

    m_last_read_at_isValid = ::OpenAPI::fromJsonValue(m_last_read_at, json[QString("last_read_at")]);
    m_last_read_at_isSet = !json[QString("last_read_at")].isNull() && m_last_read_at_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_total_unread_count_isValid = ::OpenAPI::fromJsonValue(m_total_unread_count, json[QString("total_unread_count")]);
    m_total_unread_count_isSet = !json[QString("total_unread_count")].isNull() && m_total_unread_count_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_unread_channels_isValid = ::OpenAPI::fromJsonValue(m_unread_channels, json[QString("unread_channels")]);
    m_unread_channels_isSet = !json[QString("unread_channels")].isNull() && m_unread_channels_isValid;

    m_unread_count_isValid = ::OpenAPI::fromJsonValue(m_unread_count, json[QString("unread_count")]);
    m_unread_count_isSet = !json[QString("unread_count")].isNull() && m_unread_count_isValid;

    m_unread_messages_isValid = ::OpenAPI::fromJsonValue(m_unread_messages, json[QString("unread_messages")]);
    m_unread_messages_isSet = !json[QString("unread_messages")].isNull() && m_unread_messages_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAINotificationMarkUnreadEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationMarkUnreadEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_channel.isSet()) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_channel_id_isSet) {
        obj.insert(QString("channel_id"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_channel_type_isSet) {
        obj.insert(QString("channel_type"), ::OpenAPI::toJsonValue(m_channel_type));
    }
    if (m_cid_isSet) {
        obj.insert(QString("cid"), ::OpenAPI::toJsonValue(m_cid));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_first_unread_message_id_isSet) {
        obj.insert(QString("first_unread_message_id"), ::OpenAPI::toJsonValue(m_first_unread_message_id));
    }
    if (m_last_read_at_isSet) {
        obj.insert(QString("last_read_at"), ::OpenAPI::toJsonValue(m_last_read_at));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_total_unread_count_isSet) {
        obj.insert(QString("total_unread_count"), ::OpenAPI::toJsonValue(m_total_unread_count));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_unread_channels_isSet) {
        obj.insert(QString("unread_channels"), ::OpenAPI::toJsonValue(m_unread_channels));
    }
    if (m_unread_count_isSet) {
        obj.insert(QString("unread_count"), ::OpenAPI::toJsonValue(m_unread_count));
    }
    if (m_unread_messages_isSet) {
        obj.insert(QString("unread_messages"), ::OpenAPI::toJsonValue(m_unread_messages));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIChannelResponse OAINotificationMarkUnreadEvent::getChannel() const {
    return m_channel;
}
void OAINotificationMarkUnreadEvent::setChannel(const OAIChannelResponse &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAINotificationMarkUnreadEvent::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAINotificationMarkUnreadEvent::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAINotificationMarkUnreadEvent::getChannelId() const {
    return m_channel_id;
}
void OAINotificationMarkUnreadEvent::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAINotificationMarkUnreadEvent::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAINotificationMarkUnreadEvent::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAINotificationMarkUnreadEvent::getChannelType() const {
    return m_channel_type;
}
void OAINotificationMarkUnreadEvent::setChannelType(const QString &channel_type) {
    m_channel_type = channel_type;
    m_channel_type_isSet = true;
}

bool OAINotificationMarkUnreadEvent::is_channel_type_Set() const{
    return m_channel_type_isSet;
}

bool OAINotificationMarkUnreadEvent::is_channel_type_Valid() const{
    return m_channel_type_isValid;
}

QString OAINotificationMarkUnreadEvent::getCid() const {
    return m_cid;
}
void OAINotificationMarkUnreadEvent::setCid(const QString &cid) {
    m_cid = cid;
    m_cid_isSet = true;
}

bool OAINotificationMarkUnreadEvent::is_cid_Set() const{
    return m_cid_isSet;
}

bool OAINotificationMarkUnreadEvent::is_cid_Valid() const{
    return m_cid_isValid;
}

QDateTime OAINotificationMarkUnreadEvent::getCreatedAt() const {
    return m_created_at;
}
void OAINotificationMarkUnreadEvent::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAINotificationMarkUnreadEvent::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAINotificationMarkUnreadEvent::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAINotificationMarkUnreadEvent::getFirstUnreadMessageId() const {
    return m_first_unread_message_id;
}
void OAINotificationMarkUnreadEvent::setFirstUnreadMessageId(const QString &first_unread_message_id) {
    m_first_unread_message_id = first_unread_message_id;
    m_first_unread_message_id_isSet = true;
}

bool OAINotificationMarkUnreadEvent::is_first_unread_message_id_Set() const{
    return m_first_unread_message_id_isSet;
}

bool OAINotificationMarkUnreadEvent::is_first_unread_message_id_Valid() const{
    return m_first_unread_message_id_isValid;
}

QDateTime OAINotificationMarkUnreadEvent::getLastReadAt() const {
    return m_last_read_at;
}
void OAINotificationMarkUnreadEvent::setLastReadAt(const QDateTime &last_read_at) {
    m_last_read_at = last_read_at;
    m_last_read_at_isSet = true;
}

bool OAINotificationMarkUnreadEvent::is_last_read_at_Set() const{
    return m_last_read_at_isSet;
}

bool OAINotificationMarkUnreadEvent::is_last_read_at_Valid() const{
    return m_last_read_at_isValid;
}

QString OAINotificationMarkUnreadEvent::getTeam() const {
    return m_team;
}
void OAINotificationMarkUnreadEvent::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAINotificationMarkUnreadEvent::is_team_Set() const{
    return m_team_isSet;
}

bool OAINotificationMarkUnreadEvent::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAINotificationMarkUnreadEvent::getTotalUnreadCount() const {
    return m_total_unread_count;
}
void OAINotificationMarkUnreadEvent::setTotalUnreadCount(const qint32 &total_unread_count) {
    m_total_unread_count = total_unread_count;
    m_total_unread_count_isSet = true;
}

bool OAINotificationMarkUnreadEvent::is_total_unread_count_Set() const{
    return m_total_unread_count_isSet;
}

bool OAINotificationMarkUnreadEvent::is_total_unread_count_Valid() const{
    return m_total_unread_count_isValid;
}

QString OAINotificationMarkUnreadEvent::getType() const {
    return m_type;
}
void OAINotificationMarkUnreadEvent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINotificationMarkUnreadEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAINotificationMarkUnreadEvent::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAINotificationMarkUnreadEvent::getUnreadChannels() const {
    return m_unread_channels;
}
void OAINotificationMarkUnreadEvent::setUnreadChannels(const qint32 &unread_channels) {
    m_unread_channels = unread_channels;
    m_unread_channels_isSet = true;
}

bool OAINotificationMarkUnreadEvent::is_unread_channels_Set() const{
    return m_unread_channels_isSet;
}

bool OAINotificationMarkUnreadEvent::is_unread_channels_Valid() const{
    return m_unread_channels_isValid;
}

qint32 OAINotificationMarkUnreadEvent::getUnreadCount() const {
    return m_unread_count;
}
void OAINotificationMarkUnreadEvent::setUnreadCount(const qint32 &unread_count) {
    m_unread_count = unread_count;
    m_unread_count_isSet = true;
}

bool OAINotificationMarkUnreadEvent::is_unread_count_Set() const{
    return m_unread_count_isSet;
}

bool OAINotificationMarkUnreadEvent::is_unread_count_Valid() const{
    return m_unread_count_isValid;
}

qint32 OAINotificationMarkUnreadEvent::getUnreadMessages() const {
    return m_unread_messages;
}
void OAINotificationMarkUnreadEvent::setUnreadMessages(const qint32 &unread_messages) {
    m_unread_messages = unread_messages;
    m_unread_messages_isSet = true;
}

bool OAINotificationMarkUnreadEvent::is_unread_messages_Set() const{
    return m_unread_messages_isSet;
}

bool OAINotificationMarkUnreadEvent::is_unread_messages_Valid() const{
    return m_unread_messages_isValid;
}

OAIUserObject OAINotificationMarkUnreadEvent::getUser() const {
    return m_user;
}
void OAINotificationMarkUnreadEvent::setUser(const OAIUserObject &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAINotificationMarkUnreadEvent::is_user_Set() const{
    return m_user_isSet;
}

bool OAINotificationMarkUnreadEvent::is_user_Valid() const{
    return m_user_isValid;
}

bool OAINotificationMarkUnreadEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_unread_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_read_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_unread_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationMarkUnreadEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_id_isValid && m_channel_type_isValid && m_cid_isValid && m_created_at_isValid && m_first_unread_message_id_isValid && m_last_read_at_isValid && m_total_unread_count_isValid && m_type_isValid && m_unread_channels_isValid && m_unread_count_isValid && m_unread_messages_isValid && true;
}

} // namespace OpenAPI
