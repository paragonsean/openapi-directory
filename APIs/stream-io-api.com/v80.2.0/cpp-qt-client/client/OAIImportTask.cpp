/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportTask::OAIImportTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportTask::OAIImportTask() {
    this->initializeModel();
}

OAIImportTask::~OAIImportTask() {}

void OAIImportTask::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_history_isSet = false;
    m_history_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIImportTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportTask::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_history_isValid = ::OpenAPI::fromJsonValue(m_history, json[QString("history")]);
    m_history_isSet = !json[QString("history")].isNull() && m_history_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIImportTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportTask::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_history.size() > 0) {
        obj.insert(QString("history"), ::OpenAPI::toJsonValue(m_history));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAIImportTask::getCreatedAt() const {
    return m_created_at;
}
void OAIImportTask::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIImportTask::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIImportTask::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<OAIImportTaskHistory> OAIImportTask::getHistory() const {
    return m_history;
}
void OAIImportTask::setHistory(const QList<OAIImportTaskHistory> &history) {
    m_history = history;
    m_history_isSet = true;
}

bool OAIImportTask::is_history_Set() const{
    return m_history_isSet;
}

bool OAIImportTask::is_history_Valid() const{
    return m_history_isValid;
}

QString OAIImportTask::getId() const {
    return m_id;
}
void OAIImportTask::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImportTask::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImportTask::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIImportTask::getMode() const {
    return m_mode;
}
void OAIImportTask::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIImportTask::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIImportTask::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIImportTask::getPath() const {
    return m_path;
}
void OAIImportTask::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIImportTask::is_path_Set() const{
    return m_path_isSet;
}

bool OAIImportTask::is_path_Valid() const{
    return m_path_isValid;
}

QJsonValue OAIImportTask::getResult() const {
    return m_result;
}
void OAIImportTask::setResult(const QJsonValue &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIImportTask::is_result_Set() const{
    return m_result_isSet;
}

bool OAIImportTask::is_result_Valid() const{
    return m_result_isValid;
}

qint64 OAIImportTask::getSize() const {
    return m_size;
}
void OAIImportTask::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIImportTask::is_size_Set() const{
    return m_size_isSet;
}

bool OAIImportTask::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIImportTask::getState() const {
    return m_state;
}
void OAIImportTask::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIImportTask::is_state_Set() const{
    return m_state_isSet;
}

bool OAIImportTask::is_state_Valid() const{
    return m_state_isValid;
}

QDateTime OAIImportTask::getUpdatedAt() const {
    return m_updated_at;
}
void OAIImportTask::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIImportTask::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIImportTask::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIImportTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_history_isValid && m_id_isValid && m_mode_isValid && m_path_isValid && m_state_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
