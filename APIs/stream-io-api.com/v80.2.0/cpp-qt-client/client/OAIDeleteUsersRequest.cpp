/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteUsersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteUsersRequest::OAIDeleteUsersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteUsersRequest::OAIDeleteUsersRequest() {
    this->initializeModel();
}

OAIDeleteUsersRequest::~OAIDeleteUsersRequest() {}

void OAIDeleteUsersRequest::initializeModel() {

    m_conversations_isSet = false;
    m_conversations_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_new_channel_owner_id_isSet = false;
    m_new_channel_owner_id_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_ids_isSet = false;
    m_user_ids_isValid = false;
}

void OAIDeleteUsersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteUsersRequest::fromJsonObject(QJsonObject json) {

    m_conversations_isValid = ::OpenAPI::fromJsonValue(m_conversations, json[QString("conversations")]);
    m_conversations_isSet = !json[QString("conversations")].isNull() && m_conversations_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_new_channel_owner_id_isValid = ::OpenAPI::fromJsonValue(m_new_channel_owner_id, json[QString("new_channel_owner_id")]);
    m_new_channel_owner_id_isSet = !json[QString("new_channel_owner_id")].isNull() && m_new_channel_owner_id_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_ids_isValid = ::OpenAPI::fromJsonValue(m_user_ids, json[QString("user_ids")]);
    m_user_ids_isSet = !json[QString("user_ids")].isNull() && m_user_ids_isValid;
}

QString OAIDeleteUsersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteUsersRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_conversations_isSet) {
        obj.insert(QString("conversations"), ::OpenAPI::toJsonValue(m_conversations));
    }
    if (m_messages_isSet) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_new_channel_owner_id_isSet) {
        obj.insert(QString("new_channel_owner_id"), ::OpenAPI::toJsonValue(m_new_channel_owner_id));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_ids.size() > 0) {
        obj.insert(QString("user_ids"), ::OpenAPI::toJsonValue(m_user_ids));
    }
    return obj;
}

QString OAIDeleteUsersRequest::getConversations() const {
    return m_conversations;
}
void OAIDeleteUsersRequest::setConversations(const QString &conversations) {
    m_conversations = conversations;
    m_conversations_isSet = true;
}

bool OAIDeleteUsersRequest::is_conversations_Set() const{
    return m_conversations_isSet;
}

bool OAIDeleteUsersRequest::is_conversations_Valid() const{
    return m_conversations_isValid;
}

QString OAIDeleteUsersRequest::getMessages() const {
    return m_messages;
}
void OAIDeleteUsersRequest::setMessages(const QString &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIDeleteUsersRequest::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIDeleteUsersRequest::is_messages_Valid() const{
    return m_messages_isValid;
}

QString OAIDeleteUsersRequest::getNewChannelOwnerId() const {
    return m_new_channel_owner_id;
}
void OAIDeleteUsersRequest::setNewChannelOwnerId(const QString &new_channel_owner_id) {
    m_new_channel_owner_id = new_channel_owner_id;
    m_new_channel_owner_id_isSet = true;
}

bool OAIDeleteUsersRequest::is_new_channel_owner_id_Set() const{
    return m_new_channel_owner_id_isSet;
}

bool OAIDeleteUsersRequest::is_new_channel_owner_id_Valid() const{
    return m_new_channel_owner_id_isValid;
}

QString OAIDeleteUsersRequest::getUser() const {
    return m_user;
}
void OAIDeleteUsersRequest::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIDeleteUsersRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAIDeleteUsersRequest::is_user_Valid() const{
    return m_user_isValid;
}

QList<QString> OAIDeleteUsersRequest::getUserIds() const {
    return m_user_ids;
}
void OAIDeleteUsersRequest::setUserIds(const QList<QString> &user_ids) {
    m_user_ids = user_ids;
    m_user_ids_isSet = true;
}

bool OAIDeleteUsersRequest::is_user_ids_Set() const{
    return m_user_ids_isSet;
}

bool OAIDeleteUsersRequest::is_user_ids_Valid() const{
    return m_user_ids_isValid;
}

bool OAIDeleteUsersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conversations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_channel_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteUsersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_ids_isValid && true;
}

} // namespace OpenAPI
