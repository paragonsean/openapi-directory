/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestCampaignResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestCampaignResponse::OAITestCampaignResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestCampaignResponse::OAITestCampaignResponse() {
    this->initializeModel();
}

OAITestCampaignResponse::~OAITestCampaignResponse() {}

void OAITestCampaignResponse::initializeModel() {

    m_details_isSet = false;
    m_details_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAITestCampaignResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestCampaignResponse::fromJsonObject(QJsonObject json) {

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAITestCampaignResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestCampaignResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAITestCampaignResponse::getDetails() const {
    return m_details;
}
void OAITestCampaignResponse::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAITestCampaignResponse::is_details_Set() const{
    return m_details_isSet;
}

bool OAITestCampaignResponse::is_details_Valid() const{
    return m_details_isValid;
}

QString OAITestCampaignResponse::getDuration() const {
    return m_duration;
}
void OAITestCampaignResponse::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAITestCampaignResponse::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAITestCampaignResponse::is_duration_Valid() const{
    return m_duration_isValid;
}

QMap<QString, QString> OAITestCampaignResponse::getResults() const {
    return m_results;
}
void OAITestCampaignResponse::setResults(const QMap<QString, QString> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAITestCampaignResponse::is_results_Set() const{
    return m_results_isSet;
}

bool OAITestCampaignResponse::is_results_Valid() const{
    return m_results_isValid;
}

QString OAITestCampaignResponse::getStatus() const {
    return m_status;
}
void OAITestCampaignResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITestCampaignResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAITestCampaignResponse::is_status_Valid() const{
    return m_status_isValid;
}

bool OAITestCampaignResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestCampaignResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_duration_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
