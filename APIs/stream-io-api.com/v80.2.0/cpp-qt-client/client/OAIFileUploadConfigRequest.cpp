/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileUploadConfigRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileUploadConfigRequest::OAIFileUploadConfigRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileUploadConfigRequest::OAIFileUploadConfigRequest() {
    this->initializeModel();
}

OAIFileUploadConfigRequest::~OAIFileUploadConfigRequest() {}

void OAIFileUploadConfigRequest::initializeModel() {

    m_allowed_file_extensions_isSet = false;
    m_allowed_file_extensions_isValid = false;

    m_allowed_mime_types_isSet = false;
    m_allowed_mime_types_isValid = false;

    m_blocked_file_extensions_isSet = false;
    m_blocked_file_extensions_isValid = false;

    m_blocked_mime_types_isSet = false;
    m_blocked_mime_types_isValid = false;
}

void OAIFileUploadConfigRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileUploadConfigRequest::fromJsonObject(QJsonObject json) {

    m_allowed_file_extensions_isValid = ::OpenAPI::fromJsonValue(m_allowed_file_extensions, json[QString("allowed_file_extensions")]);
    m_allowed_file_extensions_isSet = !json[QString("allowed_file_extensions")].isNull() && m_allowed_file_extensions_isValid;

    m_allowed_mime_types_isValid = ::OpenAPI::fromJsonValue(m_allowed_mime_types, json[QString("allowed_mime_types")]);
    m_allowed_mime_types_isSet = !json[QString("allowed_mime_types")].isNull() && m_allowed_mime_types_isValid;

    m_blocked_file_extensions_isValid = ::OpenAPI::fromJsonValue(m_blocked_file_extensions, json[QString("blocked_file_extensions")]);
    m_blocked_file_extensions_isSet = !json[QString("blocked_file_extensions")].isNull() && m_blocked_file_extensions_isValid;

    m_blocked_mime_types_isValid = ::OpenAPI::fromJsonValue(m_blocked_mime_types, json[QString("blocked_mime_types")]);
    m_blocked_mime_types_isSet = !json[QString("blocked_mime_types")].isNull() && m_blocked_mime_types_isValid;
}

QString OAIFileUploadConfigRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileUploadConfigRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_file_extensions.size() > 0) {
        obj.insert(QString("allowed_file_extensions"), ::OpenAPI::toJsonValue(m_allowed_file_extensions));
    }
    if (m_allowed_mime_types.size() > 0) {
        obj.insert(QString("allowed_mime_types"), ::OpenAPI::toJsonValue(m_allowed_mime_types));
    }
    if (m_blocked_file_extensions.size() > 0) {
        obj.insert(QString("blocked_file_extensions"), ::OpenAPI::toJsonValue(m_blocked_file_extensions));
    }
    if (m_blocked_mime_types.size() > 0) {
        obj.insert(QString("blocked_mime_types"), ::OpenAPI::toJsonValue(m_blocked_mime_types));
    }
    return obj;
}

QList<QString> OAIFileUploadConfigRequest::getAllowedFileExtensions() const {
    return m_allowed_file_extensions;
}
void OAIFileUploadConfigRequest::setAllowedFileExtensions(const QList<QString> &allowed_file_extensions) {
    m_allowed_file_extensions = allowed_file_extensions;
    m_allowed_file_extensions_isSet = true;
}

bool OAIFileUploadConfigRequest::is_allowed_file_extensions_Set() const{
    return m_allowed_file_extensions_isSet;
}

bool OAIFileUploadConfigRequest::is_allowed_file_extensions_Valid() const{
    return m_allowed_file_extensions_isValid;
}

QList<QString> OAIFileUploadConfigRequest::getAllowedMimeTypes() const {
    return m_allowed_mime_types;
}
void OAIFileUploadConfigRequest::setAllowedMimeTypes(const QList<QString> &allowed_mime_types) {
    m_allowed_mime_types = allowed_mime_types;
    m_allowed_mime_types_isSet = true;
}

bool OAIFileUploadConfigRequest::is_allowed_mime_types_Set() const{
    return m_allowed_mime_types_isSet;
}

bool OAIFileUploadConfigRequest::is_allowed_mime_types_Valid() const{
    return m_allowed_mime_types_isValid;
}

QList<QString> OAIFileUploadConfigRequest::getBlockedFileExtensions() const {
    return m_blocked_file_extensions;
}
void OAIFileUploadConfigRequest::setBlockedFileExtensions(const QList<QString> &blocked_file_extensions) {
    m_blocked_file_extensions = blocked_file_extensions;
    m_blocked_file_extensions_isSet = true;
}

bool OAIFileUploadConfigRequest::is_blocked_file_extensions_Set() const{
    return m_blocked_file_extensions_isSet;
}

bool OAIFileUploadConfigRequest::is_blocked_file_extensions_Valid() const{
    return m_blocked_file_extensions_isValid;
}

QList<QString> OAIFileUploadConfigRequest::getBlockedMimeTypes() const {
    return m_blocked_mime_types;
}
void OAIFileUploadConfigRequest::setBlockedMimeTypes(const QList<QString> &blocked_mime_types) {
    m_blocked_mime_types = blocked_mime_types;
    m_blocked_mime_types_isSet = true;
}

bool OAIFileUploadConfigRequest::is_blocked_mime_types_Set() const{
    return m_blocked_mime_types_isSet;
}

bool OAIFileUploadConfigRequest::is_blocked_mime_types_Valid() const{
    return m_blocked_mime_types_isValid;
}

bool OAIFileUploadConfigRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_file_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_mime_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_file_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_mime_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileUploadConfigRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
