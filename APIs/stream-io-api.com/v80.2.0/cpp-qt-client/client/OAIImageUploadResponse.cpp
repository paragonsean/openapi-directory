/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageUploadResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageUploadResponse::OAIImageUploadResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageUploadResponse::OAIImageUploadResponse() {
    this->initializeModel();
}

OAIImageUploadResponse::~OAIImageUploadResponse() {}

void OAIImageUploadResponse::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_file_isSet = false;
    m_file_isValid = false;

    m_thumb_url_isSet = false;
    m_thumb_url_isValid = false;

    m_upload_sizes_isSet = false;
    m_upload_sizes_isValid = false;
}

void OAIImageUploadResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageUploadResponse::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_file_isValid = ::OpenAPI::fromJsonValue(m_file, json[QString("file")]);
    m_file_isSet = !json[QString("file")].isNull() && m_file_isValid;

    m_thumb_url_isValid = ::OpenAPI::fromJsonValue(m_thumb_url, json[QString("thumb_url")]);
    m_thumb_url_isSet = !json[QString("thumb_url")].isNull() && m_thumb_url_isValid;

    m_upload_sizes_isValid = ::OpenAPI::fromJsonValue(m_upload_sizes, json[QString("upload_sizes")]);
    m_upload_sizes_isSet = !json[QString("upload_sizes")].isNull() && m_upload_sizes_isValid;
}

QString OAIImageUploadResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageUploadResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_file_isSet) {
        obj.insert(QString("file"), ::OpenAPI::toJsonValue(m_file));
    }
    if (m_thumb_url_isSet) {
        obj.insert(QString("thumb_url"), ::OpenAPI::toJsonValue(m_thumb_url));
    }
    if (m_upload_sizes.size() > 0) {
        obj.insert(QString("upload_sizes"), ::OpenAPI::toJsonValue(m_upload_sizes));
    }
    return obj;
}

QString OAIImageUploadResponse::getDuration() const {
    return m_duration;
}
void OAIImageUploadResponse::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIImageUploadResponse::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIImageUploadResponse::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAIImageUploadResponse::getFile() const {
    return m_file;
}
void OAIImageUploadResponse::setFile(const QString &file) {
    m_file = file;
    m_file_isSet = true;
}

bool OAIImageUploadResponse::is_file_Set() const{
    return m_file_isSet;
}

bool OAIImageUploadResponse::is_file_Valid() const{
    return m_file_isValid;
}

QString OAIImageUploadResponse::getThumbUrl() const {
    return m_thumb_url;
}
void OAIImageUploadResponse::setThumbUrl(const QString &thumb_url) {
    m_thumb_url = thumb_url;
    m_thumb_url_isSet = true;
}

bool OAIImageUploadResponse::is_thumb_url_Set() const{
    return m_thumb_url_isSet;
}

bool OAIImageUploadResponse::is_thumb_url_Valid() const{
    return m_thumb_url_isValid;
}

QList<OAIImageSize> OAIImageUploadResponse::getUploadSizes() const {
    return m_upload_sizes;
}
void OAIImageUploadResponse::setUploadSizes(const QList<OAIImageSize> &upload_sizes) {
    m_upload_sizes = upload_sizes;
    m_upload_sizes_isSet = true;
}

bool OAIImageUploadResponse::is_upload_sizes_Set() const{
    return m_upload_sizes_isSet;
}

bool OAIImageUploadResponse::is_upload_sizes_Valid() const{
    return m_upload_sizes_isValid;
}

bool OAIImageUploadResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_sizes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageUploadResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_duration_isValid && true;
}

} // namespace OpenAPI
