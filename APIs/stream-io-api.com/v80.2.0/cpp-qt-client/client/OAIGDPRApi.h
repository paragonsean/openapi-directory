/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGDPRApi_H
#define OAI_OAIGDPRApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAIDeactivateUserRequest.h"
#include "OAIDeactivateUserResponse.h"
#include "OAIDeactivateUsersRequest.h"
#include "OAIDeactivateUsersResponse.h"
#include "OAIDeleteChannelsRequest.h"
#include "OAIDeleteChannelsResponse.h"
#include "OAIDeleteUserResponse.h"
#include "OAIDeleteUsersRequest.h"
#include "OAIDeleteUsersResponse.h"
#include "OAIReactivateUserRequest.h"
#include "OAIReactivateUserResponse.h"
#include "OAIReactivateUsersRequest.h"
#include "OAIReactivateUsersResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGDPRApi : public QObject {
    Q_OBJECT

public:
    OAIGDPRApi(const int timeOut = 0);
    ~OAIGDPRApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_deactivate_user_request OAIDeactivateUserRequest [required]
    */
    virtual void deactivateUser(const QString &user_id, const OAIDeactivateUserRequest &oai_deactivate_user_request);

    /**
    * @param[in]  oai_deactivate_users_request OAIDeactivateUsersRequest [required]
    */
    virtual void deactivateUsers(const OAIDeactivateUsersRequest &oai_deactivate_users_request);

    /**
    * @param[in]  oai_delete_channels_request OAIDeleteChannelsRequest [required]
    */
    virtual void deleteChannels(const OAIDeleteChannelsRequest &oai_delete_channels_request);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  mark_messages_deleted bool [optional]
    * @param[in]  hard_delete bool [optional]
    * @param[in]  delete_conversation_channels bool [optional]
    */
    virtual void deleteUser(const QString &user_id, const ::OpenAPI::OptionalParam<bool> &mark_messages_deleted = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &hard_delete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &delete_conversation_channels = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_delete_users_request OAIDeleteUsersRequest [required]
    */
    virtual void deleteUsers(const OAIDeleteUsersRequest &oai_delete_users_request);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  oai_reactivate_user_request OAIReactivateUserRequest [required]
    */
    virtual void reactivateUser(const QString &user_id, const OAIReactivateUserRequest &oai_reactivate_user_request);

    /**
    * @param[in]  oai_reactivate_users_request OAIReactivateUsersRequest [required]
    */
    virtual void reactivateUsers(const OAIReactivateUsersRequest &oai_reactivate_users_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deactivateUserCallback(OAIHttpRequestWorker *worker);
    void deactivateUsersCallback(OAIHttpRequestWorker *worker);
    void deleteChannelsCallback(OAIHttpRequestWorker *worker);
    void deleteUserCallback(OAIHttpRequestWorker *worker);
    void deleteUsersCallback(OAIHttpRequestWorker *worker);
    void reactivateUserCallback(OAIHttpRequestWorker *worker);
    void reactivateUsersCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deactivateUserSignal(OAIDeactivateUserResponse summary);
    void deactivateUsersSignal(OAIDeactivateUsersResponse summary);
    void deleteChannelsSignal(OAIDeleteChannelsResponse summary);
    void deleteUserSignal(OAIDeleteUserResponse summary);
    void deleteUsersSignal(OAIDeleteUsersResponse summary);
    void reactivateUserSignal(OAIReactivateUserResponse summary);
    void reactivateUsersSignal(OAIReactivateUsersResponse summary);


    void deactivateUserSignalFull(OAIHttpRequestWorker *worker, OAIDeactivateUserResponse summary);
    void deactivateUsersSignalFull(OAIHttpRequestWorker *worker, OAIDeactivateUsersResponse summary);
    void deleteChannelsSignalFull(OAIHttpRequestWorker *worker, OAIDeleteChannelsResponse summary);
    void deleteUserSignalFull(OAIHttpRequestWorker *worker, OAIDeleteUserResponse summary);
    void deleteUsersSignalFull(OAIHttpRequestWorker *worker, OAIDeleteUsersResponse summary);
    void reactivateUserSignalFull(OAIHttpRequestWorker *worker, OAIReactivateUserResponse summary);
    void reactivateUsersSignalFull(OAIHttpRequestWorker *worker, OAIReactivateUsersResponse summary);

    Q_DECL_DEPRECATED_X("Use deactivateUserSignalError() instead")
    void deactivateUserSignalE(OAIDeactivateUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateUserSignalError(OAIDeactivateUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deactivateUsersSignalError() instead")
    void deactivateUsersSignalE(OAIDeactivateUsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateUsersSignalError(OAIDeactivateUsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelsSignalError() instead")
    void deleteChannelsSignalE(OAIDeleteChannelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelsSignalError(OAIDeleteChannelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserSignalError() instead")
    void deleteUserSignalE(OAIDeleteUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalError(OAIDeleteUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUsersSignalError() instead")
    void deleteUsersSignalE(OAIDeleteUsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUsersSignalError(OAIDeleteUsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactivateUserSignalError() instead")
    void reactivateUserSignalE(OAIReactivateUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactivateUserSignalError(OAIReactivateUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactivateUsersSignalError() instead")
    void reactivateUsersSignalE(OAIReactivateUsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reactivateUsersSignalError(OAIReactivateUsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deactivateUserSignalErrorFull() instead")
    void deactivateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deactivateUsersSignalErrorFull() instead")
    void deactivateUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deactivateUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelsSignalErrorFull() instead")
    void deleteChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserSignalErrorFull() instead")
    void deleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUsersSignalErrorFull() instead")
    void deleteUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactivateUserSignalErrorFull() instead")
    void reactivateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactivateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reactivateUsersSignalErrorFull() instead")
    void reactivateUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reactivateUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
