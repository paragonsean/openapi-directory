/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryMembersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryMembersRequest::OAIQueryMembersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryMembersRequest::OAIQueryMembersRequest() {
    this->initializeModel();
}

OAIQueryMembersRequest::~OAIQueryMembersRequest() {}

void OAIQueryMembersRequest::initializeModel() {

    m_created_at_after_isSet = false;
    m_created_at_after_isValid = false;

    m_created_at_after_or_equal_isSet = false;
    m_created_at_after_or_equal_isValid = false;

    m_created_at_before_isSet = false;
    m_created_at_before_isValid = false;

    m_created_at_before_or_equal_isSet = false;
    m_created_at_before_or_equal_isValid = false;

    m_filter_conditions_isSet = false;
    m_filter_conditions_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_id_gt_isSet = false;
    m_user_id_gt_isValid = false;

    m_user_id_gte_isSet = false;
    m_user_id_gte_isValid = false;

    m_user_id_lt_isSet = false;
    m_user_id_lt_isValid = false;

    m_user_id_lte_isSet = false;
    m_user_id_lte_isValid = false;
}

void OAIQueryMembersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryMembersRequest::fromJsonObject(QJsonObject json) {

    m_created_at_after_isValid = ::OpenAPI::fromJsonValue(m_created_at_after, json[QString("created_at_after")]);
    m_created_at_after_isSet = !json[QString("created_at_after")].isNull() && m_created_at_after_isValid;

    m_created_at_after_or_equal_isValid = ::OpenAPI::fromJsonValue(m_created_at_after_or_equal, json[QString("created_at_after_or_equal")]);
    m_created_at_after_or_equal_isSet = !json[QString("created_at_after_or_equal")].isNull() && m_created_at_after_or_equal_isValid;

    m_created_at_before_isValid = ::OpenAPI::fromJsonValue(m_created_at_before, json[QString("created_at_before")]);
    m_created_at_before_isSet = !json[QString("created_at_before")].isNull() && m_created_at_before_isValid;

    m_created_at_before_or_equal_isValid = ::OpenAPI::fromJsonValue(m_created_at_before_or_equal, json[QString("created_at_before_or_equal")]);
    m_created_at_before_or_equal_isSet = !json[QString("created_at_before_or_equal")].isNull() && m_created_at_before_or_equal_isValid;

    m_filter_conditions_isValid = ::OpenAPI::fromJsonValue(m_filter_conditions, json[QString("filter_conditions")]);
    m_filter_conditions_isSet = !json[QString("filter_conditions")].isNull() && m_filter_conditions_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_user_id_gt_isValid = ::OpenAPI::fromJsonValue(m_user_id_gt, json[QString("user_id_gt")]);
    m_user_id_gt_isSet = !json[QString("user_id_gt")].isNull() && m_user_id_gt_isValid;

    m_user_id_gte_isValid = ::OpenAPI::fromJsonValue(m_user_id_gte, json[QString("user_id_gte")]);
    m_user_id_gte_isSet = !json[QString("user_id_gte")].isNull() && m_user_id_gte_isValid;

    m_user_id_lt_isValid = ::OpenAPI::fromJsonValue(m_user_id_lt, json[QString("user_id_lt")]);
    m_user_id_lt_isSet = !json[QString("user_id_lt")].isNull() && m_user_id_lt_isValid;

    m_user_id_lte_isValid = ::OpenAPI::fromJsonValue(m_user_id_lte, json[QString("user_id_lte")]);
    m_user_id_lte_isSet = !json[QString("user_id_lte")].isNull() && m_user_id_lte_isValid;
}

QString OAIQueryMembersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryMembersRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_after_isSet) {
        obj.insert(QString("created_at_after"), ::OpenAPI::toJsonValue(m_created_at_after));
    }
    if (m_created_at_after_or_equal_isSet) {
        obj.insert(QString("created_at_after_or_equal"), ::OpenAPI::toJsonValue(m_created_at_after_or_equal));
    }
    if (m_created_at_before_isSet) {
        obj.insert(QString("created_at_before"), ::OpenAPI::toJsonValue(m_created_at_before));
    }
    if (m_created_at_before_or_equal_isSet) {
        obj.insert(QString("created_at_before_or_equal"), ::OpenAPI::toJsonValue(m_created_at_before_or_equal));
    }
    if (m_filter_conditions.size() > 0) {
        obj.insert(QString("filter_conditions"), ::OpenAPI::toJsonValue(m_filter_conditions));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_members.size() > 0) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_sort.size() > 0) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_id_gt_isSet) {
        obj.insert(QString("user_id_gt"), ::OpenAPI::toJsonValue(m_user_id_gt));
    }
    if (m_user_id_gte_isSet) {
        obj.insert(QString("user_id_gte"), ::OpenAPI::toJsonValue(m_user_id_gte));
    }
    if (m_user_id_lt_isSet) {
        obj.insert(QString("user_id_lt"), ::OpenAPI::toJsonValue(m_user_id_lt));
    }
    if (m_user_id_lte_isSet) {
        obj.insert(QString("user_id_lte"), ::OpenAPI::toJsonValue(m_user_id_lte));
    }
    return obj;
}

QDateTime OAIQueryMembersRequest::getCreatedAtAfter() const {
    return m_created_at_after;
}
void OAIQueryMembersRequest::setCreatedAtAfter(const QDateTime &created_at_after) {
    m_created_at_after = created_at_after;
    m_created_at_after_isSet = true;
}

bool OAIQueryMembersRequest::is_created_at_after_Set() const{
    return m_created_at_after_isSet;
}

bool OAIQueryMembersRequest::is_created_at_after_Valid() const{
    return m_created_at_after_isValid;
}

QDateTime OAIQueryMembersRequest::getCreatedAtAfterOrEqual() const {
    return m_created_at_after_or_equal;
}
void OAIQueryMembersRequest::setCreatedAtAfterOrEqual(const QDateTime &created_at_after_or_equal) {
    m_created_at_after_or_equal = created_at_after_or_equal;
    m_created_at_after_or_equal_isSet = true;
}

bool OAIQueryMembersRequest::is_created_at_after_or_equal_Set() const{
    return m_created_at_after_or_equal_isSet;
}

bool OAIQueryMembersRequest::is_created_at_after_or_equal_Valid() const{
    return m_created_at_after_or_equal_isValid;
}

QDateTime OAIQueryMembersRequest::getCreatedAtBefore() const {
    return m_created_at_before;
}
void OAIQueryMembersRequest::setCreatedAtBefore(const QDateTime &created_at_before) {
    m_created_at_before = created_at_before;
    m_created_at_before_isSet = true;
}

bool OAIQueryMembersRequest::is_created_at_before_Set() const{
    return m_created_at_before_isSet;
}

bool OAIQueryMembersRequest::is_created_at_before_Valid() const{
    return m_created_at_before_isValid;
}

QDateTime OAIQueryMembersRequest::getCreatedAtBeforeOrEqual() const {
    return m_created_at_before_or_equal;
}
void OAIQueryMembersRequest::setCreatedAtBeforeOrEqual(const QDateTime &created_at_before_or_equal) {
    m_created_at_before_or_equal = created_at_before_or_equal;
    m_created_at_before_or_equal_isSet = true;
}

bool OAIQueryMembersRequest::is_created_at_before_or_equal_Set() const{
    return m_created_at_before_or_equal_isSet;
}

bool OAIQueryMembersRequest::is_created_at_before_or_equal_Valid() const{
    return m_created_at_before_or_equal_isValid;
}

QMap<QString, QJsonValue> OAIQueryMembersRequest::getFilterConditions() const {
    return m_filter_conditions;
}
void OAIQueryMembersRequest::setFilterConditions(const QMap<QString, QJsonValue> &filter_conditions) {
    m_filter_conditions = filter_conditions;
    m_filter_conditions_isSet = true;
}

bool OAIQueryMembersRequest::is_filter_conditions_Set() const{
    return m_filter_conditions_isSet;
}

bool OAIQueryMembersRequest::is_filter_conditions_Valid() const{
    return m_filter_conditions_isValid;
}

QString OAIQueryMembersRequest::getId() const {
    return m_id;
}
void OAIQueryMembersRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIQueryMembersRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIQueryMembersRequest::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIQueryMembersRequest::getLimit() const {
    return m_limit;
}
void OAIQueryMembersRequest::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIQueryMembersRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIQueryMembersRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

QList<OAIChannelMember> OAIQueryMembersRequest::getMembers() const {
    return m_members;
}
void OAIQueryMembersRequest::setMembers(const QList<OAIChannelMember> &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIQueryMembersRequest::is_members_Set() const{
    return m_members_isSet;
}

bool OAIQueryMembersRequest::is_members_Valid() const{
    return m_members_isValid;
}

qint32 OAIQueryMembersRequest::getOffset() const {
    return m_offset;
}
void OAIQueryMembersRequest::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIQueryMembersRequest::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIQueryMembersRequest::is_offset_Valid() const{
    return m_offset_isValid;
}

QList<OAISortParam> OAIQueryMembersRequest::getSort() const {
    return m_sort;
}
void OAIQueryMembersRequest::setSort(const QList<OAISortParam> &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIQueryMembersRequest::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIQueryMembersRequest::is_sort_Valid() const{
    return m_sort_isValid;
}

QString OAIQueryMembersRequest::getType() const {
    return m_type;
}
void OAIQueryMembersRequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIQueryMembersRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIQueryMembersRequest::is_type_Valid() const{
    return m_type_isValid;
}

OAIUserObject OAIQueryMembersRequest::getUser() const {
    return m_user;
}
void OAIQueryMembersRequest::setUser(const OAIUserObject &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIQueryMembersRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAIQueryMembersRequest::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIQueryMembersRequest::getUserId() const {
    return m_user_id;
}
void OAIQueryMembersRequest::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIQueryMembersRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIQueryMembersRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIQueryMembersRequest::getUserIdGt() const {
    return m_user_id_gt;
}
void OAIQueryMembersRequest::setUserIdGt(const QString &user_id_gt) {
    m_user_id_gt = user_id_gt;
    m_user_id_gt_isSet = true;
}

bool OAIQueryMembersRequest::is_user_id_gt_Set() const{
    return m_user_id_gt_isSet;
}

bool OAIQueryMembersRequest::is_user_id_gt_Valid() const{
    return m_user_id_gt_isValid;
}

QString OAIQueryMembersRequest::getUserIdGte() const {
    return m_user_id_gte;
}
void OAIQueryMembersRequest::setUserIdGte(const QString &user_id_gte) {
    m_user_id_gte = user_id_gte;
    m_user_id_gte_isSet = true;
}

bool OAIQueryMembersRequest::is_user_id_gte_Set() const{
    return m_user_id_gte_isSet;
}

bool OAIQueryMembersRequest::is_user_id_gte_Valid() const{
    return m_user_id_gte_isValid;
}

QString OAIQueryMembersRequest::getUserIdLt() const {
    return m_user_id_lt;
}
void OAIQueryMembersRequest::setUserIdLt(const QString &user_id_lt) {
    m_user_id_lt = user_id_lt;
    m_user_id_lt_isSet = true;
}

bool OAIQueryMembersRequest::is_user_id_lt_Set() const{
    return m_user_id_lt_isSet;
}

bool OAIQueryMembersRequest::is_user_id_lt_Valid() const{
    return m_user_id_lt_isValid;
}

QString OAIQueryMembersRequest::getUserIdLte() const {
    return m_user_id_lte;
}
void OAIQueryMembersRequest::setUserIdLte(const QString &user_id_lte) {
    m_user_id_lte = user_id_lte;
    m_user_id_lte_isSet = true;
}

bool OAIQueryMembersRequest::is_user_id_lte_Set() const{
    return m_user_id_lte_isSet;
}

bool OAIQueryMembersRequest::is_user_id_lte_Valid() const{
    return m_user_id_lte_isValid;
}

bool OAIQueryMembersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_after_or_equal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_before_or_equal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_gt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_gte_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_lt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_lte_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryMembersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_conditions_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
