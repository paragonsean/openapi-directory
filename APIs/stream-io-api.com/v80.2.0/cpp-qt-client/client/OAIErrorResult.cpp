/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorResult::OAIErrorResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorResult::OAIErrorResult() {
    this->initializeModel();
}

OAIErrorResult::~OAIErrorResult() {}

void OAIErrorResult::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_stacktrace_isSet = false;
    m_stacktrace_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIErrorResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIErrorResult::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_stacktrace_isValid = ::OpenAPI::fromJsonValue(m_stacktrace, json[QString("stacktrace")]);
    m_stacktrace_isSet = !json[QString("stacktrace")].isNull() && m_stacktrace_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIErrorResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIErrorResult::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_stacktrace_isSet) {
        obj.insert(QString("stacktrace"), ::OpenAPI::toJsonValue(m_stacktrace));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QJsonValue OAIErrorResult::getDescription() const {
    return m_description;
}
void OAIErrorResult::setDescription(const QJsonValue &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIErrorResult::is_description_Set() const{
    return m_description_isSet;
}

bool OAIErrorResult::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIErrorResult::getStacktrace() const {
    return m_stacktrace;
}
void OAIErrorResult::setStacktrace(const QString &stacktrace) {
    m_stacktrace = stacktrace;
    m_stacktrace_isSet = true;
}

bool OAIErrorResult::is_stacktrace_Set() const{
    return m_stacktrace_isSet;
}

bool OAIErrorResult::is_stacktrace_Valid() const{
    return m_stacktrace_isValid;
}

QString OAIErrorResult::getType() const {
    return m_type;
}
void OAIErrorResult::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIErrorResult::is_type_Set() const{
    return m_type_isSet;
}

bool OAIErrorResult::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIErrorResult::getVersion() const {
    return m_version;
}
void OAIErrorResult::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIErrorResult::is_version_Set() const{
    return m_version_isSet;
}

bool OAIErrorResult::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIErrorResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stacktrace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIErrorResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
