/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectRequest::OAIConnectRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectRequest::OAIConnectRequest() {
    this->initializeModel();
}

OAIConnectRequest::~OAIConnectRequest() {}

void OAIConnectRequest::initializeModel() {

    m_device_isSet = false;
    m_device_isValid = false;

    m_user_details_isSet = false;
    m_user_details_isValid = false;
}

void OAIConnectRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectRequest::fromJsonObject(QJsonObject json) {

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("device")]);
    m_device_isSet = !json[QString("device")].isNull() && m_device_isValid;

    m_user_details_isValid = ::OpenAPI::fromJsonValue(m_user_details, json[QString("user_details")]);
    m_user_details_isSet = !json[QString("user_details")].isNull() && m_user_details_isValid;
}

QString OAIConnectRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_device.isSet()) {
        obj.insert(QString("device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_user_details.isSet()) {
        obj.insert(QString("user_details"), ::OpenAPI::toJsonValue(m_user_details));
    }
    return obj;
}

OAIDeviceFields OAIConnectRequest::getDevice() const {
    return m_device;
}
void OAIConnectRequest::setDevice(const OAIDeviceFields &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIConnectRequest::is_device_Set() const{
    return m_device_isSet;
}

bool OAIConnectRequest::is_device_Valid() const{
    return m_device_isValid;
}

OAIUserObject OAIConnectRequest::getUserDetails() const {
    return m_user_details;
}
void OAIConnectRequest::setUserDetails(const OAIUserObject &user_details) {
    m_user_details = user_details;
    m_user_details_isSet = true;
}

bool OAIConnectRequest::is_user_details_Set() const{
    return m_user_details_isSet;
}

bool OAIConnectRequest::is_user_details_Valid() const{
    return m_user_details_isValid;
}

bool OAIConnectRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_details_isValid && true;
}

} // namespace OpenAPI
