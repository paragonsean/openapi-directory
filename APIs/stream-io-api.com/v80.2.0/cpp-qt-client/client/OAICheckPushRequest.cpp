/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckPushRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckPushRequest::OAICheckPushRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckPushRequest::OAICheckPushRequest() {
    this->initializeModel();
}

OAICheckPushRequest::~OAICheckPushRequest() {}

void OAICheckPushRequest::initializeModel() {

    m_apn_template_isSet = false;
    m_apn_template_isValid = false;

    m_firebase_data_template_isSet = false;
    m_firebase_data_template_isValid = false;

    m_firebase_template_isSet = false;
    m_firebase_template_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_push_provider_name_isSet = false;
    m_push_provider_name_isValid = false;

    m_push_provider_type_isSet = false;
    m_push_provider_type_isValid = false;

    m_skip_devices_isSet = false;
    m_skip_devices_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAICheckPushRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckPushRequest::fromJsonObject(QJsonObject json) {

    m_apn_template_isValid = ::OpenAPI::fromJsonValue(m_apn_template, json[QString("apn_template")]);
    m_apn_template_isSet = !json[QString("apn_template")].isNull() && m_apn_template_isValid;

    m_firebase_data_template_isValid = ::OpenAPI::fromJsonValue(m_firebase_data_template, json[QString("firebase_data_template")]);
    m_firebase_data_template_isSet = !json[QString("firebase_data_template")].isNull() && m_firebase_data_template_isValid;

    m_firebase_template_isValid = ::OpenAPI::fromJsonValue(m_firebase_template, json[QString("firebase_template")]);
    m_firebase_template_isSet = !json[QString("firebase_template")].isNull() && m_firebase_template_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("message_id")]);
    m_message_id_isSet = !json[QString("message_id")].isNull() && m_message_id_isValid;

    m_push_provider_name_isValid = ::OpenAPI::fromJsonValue(m_push_provider_name, json[QString("push_provider_name")]);
    m_push_provider_name_isSet = !json[QString("push_provider_name")].isNull() && m_push_provider_name_isValid;

    m_push_provider_type_isValid = ::OpenAPI::fromJsonValue(m_push_provider_type, json[QString("push_provider_type")]);
    m_push_provider_type_isSet = !json[QString("push_provider_type")].isNull() && m_push_provider_type_isValid;

    m_skip_devices_isValid = ::OpenAPI::fromJsonValue(m_skip_devices, json[QString("skip_devices")]);
    m_skip_devices_isSet = !json[QString("skip_devices")].isNull() && m_skip_devices_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAICheckPushRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckPushRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_apn_template_isSet) {
        obj.insert(QString("apn_template"), ::OpenAPI::toJsonValue(m_apn_template));
    }
    if (m_firebase_data_template_isSet) {
        obj.insert(QString("firebase_data_template"), ::OpenAPI::toJsonValue(m_firebase_data_template));
    }
    if (m_firebase_template_isSet) {
        obj.insert(QString("firebase_template"), ::OpenAPI::toJsonValue(m_firebase_template));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("message_id"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_push_provider_name_isSet) {
        obj.insert(QString("push_provider_name"), ::OpenAPI::toJsonValue(m_push_provider_name));
    }
    if (m_push_provider_type_isSet) {
        obj.insert(QString("push_provider_type"), ::OpenAPI::toJsonValue(m_push_provider_type));
    }
    if (m_skip_devices_isSet) {
        obj.insert(QString("skip_devices"), ::OpenAPI::toJsonValue(m_skip_devices));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAICheckPushRequest::getApnTemplate() const {
    return m_apn_template;
}
void OAICheckPushRequest::setApnTemplate(const QString &apn_template) {
    m_apn_template = apn_template;
    m_apn_template_isSet = true;
}

bool OAICheckPushRequest::is_apn_template_Set() const{
    return m_apn_template_isSet;
}

bool OAICheckPushRequest::is_apn_template_Valid() const{
    return m_apn_template_isValid;
}

QString OAICheckPushRequest::getFirebaseDataTemplate() const {
    return m_firebase_data_template;
}
void OAICheckPushRequest::setFirebaseDataTemplate(const QString &firebase_data_template) {
    m_firebase_data_template = firebase_data_template;
    m_firebase_data_template_isSet = true;
}

bool OAICheckPushRequest::is_firebase_data_template_Set() const{
    return m_firebase_data_template_isSet;
}

bool OAICheckPushRequest::is_firebase_data_template_Valid() const{
    return m_firebase_data_template_isValid;
}

QString OAICheckPushRequest::getFirebaseTemplate() const {
    return m_firebase_template;
}
void OAICheckPushRequest::setFirebaseTemplate(const QString &firebase_template) {
    m_firebase_template = firebase_template;
    m_firebase_template_isSet = true;
}

bool OAICheckPushRequest::is_firebase_template_Set() const{
    return m_firebase_template_isSet;
}

bool OAICheckPushRequest::is_firebase_template_Valid() const{
    return m_firebase_template_isValid;
}

QString OAICheckPushRequest::getMessageId() const {
    return m_message_id;
}
void OAICheckPushRequest::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAICheckPushRequest::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAICheckPushRequest::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAICheckPushRequest::getPushProviderName() const {
    return m_push_provider_name;
}
void OAICheckPushRequest::setPushProviderName(const QString &push_provider_name) {
    m_push_provider_name = push_provider_name;
    m_push_provider_name_isSet = true;
}

bool OAICheckPushRequest::is_push_provider_name_Set() const{
    return m_push_provider_name_isSet;
}

bool OAICheckPushRequest::is_push_provider_name_Valid() const{
    return m_push_provider_name_isValid;
}

QString OAICheckPushRequest::getPushProviderType() const {
    return m_push_provider_type;
}
void OAICheckPushRequest::setPushProviderType(const QString &push_provider_type) {
    m_push_provider_type = push_provider_type;
    m_push_provider_type_isSet = true;
}

bool OAICheckPushRequest::is_push_provider_type_Set() const{
    return m_push_provider_type_isSet;
}

bool OAICheckPushRequest::is_push_provider_type_Valid() const{
    return m_push_provider_type_isValid;
}

bool OAICheckPushRequest::isSkipDevices() const {
    return m_skip_devices;
}
void OAICheckPushRequest::setSkipDevices(const bool &skip_devices) {
    m_skip_devices = skip_devices;
    m_skip_devices_isSet = true;
}

bool OAICheckPushRequest::is_skip_devices_Set() const{
    return m_skip_devices_isSet;
}

bool OAICheckPushRequest::is_skip_devices_Valid() const{
    return m_skip_devices_isValid;
}

OAIUserObjectRequest OAICheckPushRequest::getUser() const {
    return m_user;
}
void OAICheckPushRequest::setUser(const OAIUserObjectRequest &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAICheckPushRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAICheckPushRequest::is_user_Valid() const{
    return m_user_isValid;
}

QString OAICheckPushRequest::getUserId() const {
    return m_user_id;
}
void OAICheckPushRequest::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAICheckPushRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAICheckPushRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAICheckPushRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apn_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firebase_data_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firebase_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_provider_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_devices_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckPushRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
