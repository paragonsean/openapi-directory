/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportChannelsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportChannelsRequest::OAIExportChannelsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportChannelsRequest::OAIExportChannelsRequest() {
    this->initializeModel();
}

OAIExportChannelsRequest::~OAIExportChannelsRequest() {}

void OAIExportChannelsRequest::initializeModel() {

    m_channels_isSet = false;
    m_channels_isValid = false;

    m_clear_deleted_message_text_isSet = false;
    m_clear_deleted_message_text_isValid = false;

    m_export_users_isSet = false;
    m_export_users_isValid = false;

    m_include_truncated_messages_isSet = false;
    m_include_truncated_messages_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIExportChannelsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportChannelsRequest::fromJsonObject(QJsonObject json) {

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;

    m_clear_deleted_message_text_isValid = ::OpenAPI::fromJsonValue(m_clear_deleted_message_text, json[QString("clear_deleted_message_text")]);
    m_clear_deleted_message_text_isSet = !json[QString("clear_deleted_message_text")].isNull() && m_clear_deleted_message_text_isValid;

    m_export_users_isValid = ::OpenAPI::fromJsonValue(m_export_users, json[QString("export_users")]);
    m_export_users_isSet = !json[QString("export_users")].isNull() && m_export_users_isValid;

    m_include_truncated_messages_isValid = ::OpenAPI::fromJsonValue(m_include_truncated_messages, json[QString("include_truncated_messages")]);
    m_include_truncated_messages_isSet = !json[QString("include_truncated_messages")].isNull() && m_include_truncated_messages_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIExportChannelsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportChannelsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_channels.size() > 0) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    if (m_clear_deleted_message_text_isSet) {
        obj.insert(QString("clear_deleted_message_text"), ::OpenAPI::toJsonValue(m_clear_deleted_message_text));
    }
    if (m_export_users_isSet) {
        obj.insert(QString("export_users"), ::OpenAPI::toJsonValue(m_export_users));
    }
    if (m_include_truncated_messages_isSet) {
        obj.insert(QString("include_truncated_messages"), ::OpenAPI::toJsonValue(m_include_truncated_messages));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QList<OAIChannelExportRequest> OAIExportChannelsRequest::getChannels() const {
    return m_channels;
}
void OAIExportChannelsRequest::setChannels(const QList<OAIChannelExportRequest> &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIExportChannelsRequest::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIExportChannelsRequest::is_channels_Valid() const{
    return m_channels_isValid;
}

bool OAIExportChannelsRequest::isClearDeletedMessageText() const {
    return m_clear_deleted_message_text;
}
void OAIExportChannelsRequest::setClearDeletedMessageText(const bool &clear_deleted_message_text) {
    m_clear_deleted_message_text = clear_deleted_message_text;
    m_clear_deleted_message_text_isSet = true;
}

bool OAIExportChannelsRequest::is_clear_deleted_message_text_Set() const{
    return m_clear_deleted_message_text_isSet;
}

bool OAIExportChannelsRequest::is_clear_deleted_message_text_Valid() const{
    return m_clear_deleted_message_text_isValid;
}

bool OAIExportChannelsRequest::isExportUsers() const {
    return m_export_users;
}
void OAIExportChannelsRequest::setExportUsers(const bool &export_users) {
    m_export_users = export_users;
    m_export_users_isSet = true;
}

bool OAIExportChannelsRequest::is_export_users_Set() const{
    return m_export_users_isSet;
}

bool OAIExportChannelsRequest::is_export_users_Valid() const{
    return m_export_users_isValid;
}

bool OAIExportChannelsRequest::isIncludeTruncatedMessages() const {
    return m_include_truncated_messages;
}
void OAIExportChannelsRequest::setIncludeTruncatedMessages(const bool &include_truncated_messages) {
    m_include_truncated_messages = include_truncated_messages;
    m_include_truncated_messages_isSet = true;
}

bool OAIExportChannelsRequest::is_include_truncated_messages_Set() const{
    return m_include_truncated_messages_isSet;
}

bool OAIExportChannelsRequest::is_include_truncated_messages_Valid() const{
    return m_include_truncated_messages_isValid;
}

QString OAIExportChannelsRequest::getVersion() const {
    return m_version;
}
void OAIExportChannelsRequest::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIExportChannelsRequest::is_version_Set() const{
    return m_version_isSet;
}

bool OAIExportChannelsRequest::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIExportChannelsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_clear_deleted_message_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_truncated_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportChannelsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
