/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelMuteRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelMuteRequest::OAIChannelMuteRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelMuteRequest::OAIChannelMuteRequest() {
    this->initializeModel();
}

OAIChannelMuteRequest::~OAIChannelMuteRequest() {}

void OAIChannelMuteRequest::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_expires_isSet = false;
    m_expires_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIChannelMuteRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelMuteRequest::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_expires_isValid = ::OpenAPI::fromJsonValue(m_expires, json[QString("expires")]);
    m_expires_isSet = !json[QString("expires")].isNull() && m_expires_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIChannelMuteRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelMuteRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_channel.isSet()) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_expires_isSet) {
        obj.insert(QString("expires"), ::OpenAPI::toJsonValue(m_expires));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIChannelResponseRequest OAIChannelMuteRequest::getChannel() const {
    return m_channel;
}
void OAIChannelMuteRequest::setChannel(const OAIChannelResponseRequest &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIChannelMuteRequest::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIChannelMuteRequest::is_channel_Valid() const{
    return m_channel_isValid;
}

QDateTime OAIChannelMuteRequest::getCreatedAt() const {
    return m_created_at;
}
void OAIChannelMuteRequest::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIChannelMuteRequest::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIChannelMuteRequest::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIChannelMuteRequest::getExpires() const {
    return m_expires;
}
void OAIChannelMuteRequest::setExpires(const QDateTime &expires) {
    m_expires = expires;
    m_expires_isSet = true;
}

bool OAIChannelMuteRequest::is_expires_Set() const{
    return m_expires_isSet;
}

bool OAIChannelMuteRequest::is_expires_Valid() const{
    return m_expires_isValid;
}

QDateTime OAIChannelMuteRequest::getUpdatedAt() const {
    return m_updated_at;
}
void OAIChannelMuteRequest::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIChannelMuteRequest::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIChannelMuteRequest::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIUserObjectRequest OAIChannelMuteRequest::getUser() const {
    return m_user;
}
void OAIChannelMuteRequest::setUser(const OAIUserObjectRequest &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIChannelMuteRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAIChannelMuteRequest::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIChannelMuteRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelMuteRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
