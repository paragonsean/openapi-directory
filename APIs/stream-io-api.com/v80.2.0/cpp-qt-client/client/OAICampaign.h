/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICampaign.h
 *
 * 
 */

#ifndef OAICampaign_H
#define OAICampaign_H

#include <QJsonObject>

#include "OAIAttachment.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICampaign : public OAIObject {
public:
    OAICampaign();
    OAICampaign(QString json);
    ~OAICampaign() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAttachment> getAttachments() const;
    void setAttachments(const QList<OAIAttachment> &attachments);
    bool is_attachments_Set() const;
    bool is_attachments_Valid() const;

    QString getChannelType() const;
    void setChannelType(const QString &channel_type);
    bool is_channel_type_Set() const;
    bool is_channel_type_Valid() const;

    QDateTime getCompletedAt() const;
    void setCompletedAt(const QDateTime &completed_at);
    bool is_completed_at_Set() const;
    bool is_completed_at_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QMap<QString, QString> getDefaults() const;
    void setDefaults(const QMap<QString, QString> &defaults);
    bool is_defaults_Set() const;
    bool is_defaults_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getDetails() const;
    void setDetails(const QString &details);
    bool is_details_Set() const;
    bool is_details_Valid() const;

    qint32 getErroredMessages() const;
    void setErroredMessages(const qint32 &errored_messages);
    bool is_errored_messages_Set() const;
    bool is_errored_messages_Valid() const;

    QDateTime getFailedAt() const;
    void setFailedAt(const QDateTime &failed_at);
    bool is_failed_at_Set() const;
    bool is_failed_at_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QDateTime getResumedAt() const;
    void setResumedAt(const QDateTime &resumed_at);
    bool is_resumed_at_Set() const;
    bool is_resumed_at_Valid() const;

    QDateTime getScheduledAt() const;
    void setScheduledAt(const QDateTime &scheduled_at);
    bool is_scheduled_at_Set() const;
    bool is_scheduled_at_Valid() const;

    QDateTime getScheduledFor() const;
    void setScheduledFor(const QDateTime &scheduled_for);
    bool is_scheduled_for_Set() const;
    bool is_scheduled_for_Valid() const;

    QString getSegmentId() const;
    void setSegmentId(const QString &segment_id);
    bool is_segment_id_Set() const;
    bool is_segment_id_Valid() const;

    QString getSenderId() const;
    void setSenderId(const QString &sender_id);
    bool is_sender_id_Set() const;
    bool is_sender_id_Valid() const;

    qint32 getSentMessages() const;
    void setSentMessages(const qint32 &sent_messages);
    bool is_sent_messages_Set() const;
    bool is_sent_messages_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QDateTime getStoppedAt() const;
    void setStoppedAt(const QDateTime &stopped_at);
    bool is_stopped_at_Set() const;
    bool is_stopped_at_Valid() const;

    QString getTaskId() const;
    void setTaskId(const QString &task_id);
    bool is_task_id_Set() const;
    bool is_task_id_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAttachment> m_attachments;
    bool m_attachments_isSet;
    bool m_attachments_isValid;

    QString m_channel_type;
    bool m_channel_type_isSet;
    bool m_channel_type_isValid;

    QDateTime m_completed_at;
    bool m_completed_at_isSet;
    bool m_completed_at_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QMap<QString, QString> m_defaults;
    bool m_defaults_isSet;
    bool m_defaults_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_details;
    bool m_details_isSet;
    bool m_details_isValid;

    qint32 m_errored_messages;
    bool m_errored_messages_isSet;
    bool m_errored_messages_isValid;

    QDateTime m_failed_at;
    bool m_failed_at_isSet;
    bool m_failed_at_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QDateTime m_resumed_at;
    bool m_resumed_at_isSet;
    bool m_resumed_at_isValid;

    QDateTime m_scheduled_at;
    bool m_scheduled_at_isSet;
    bool m_scheduled_at_isValid;

    QDateTime m_scheduled_for;
    bool m_scheduled_for_isSet;
    bool m_scheduled_for_isValid;

    QString m_segment_id;
    bool m_segment_id_isSet;
    bool m_segment_id_isValid;

    QString m_sender_id;
    bool m_sender_id_isSet;
    bool m_sender_id_isValid;

    qint32 m_sent_messages;
    bool m_sent_messages_isSet;
    bool m_sent_messages_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QDateTime m_stopped_at;
    bool m_stopped_at_isSet;
    bool m_stopped_at_isValid;

    QString m_task_id;
    bool m_task_id_isSet;
    bool m_task_id_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICampaign)

#endif // OAICampaign_H
