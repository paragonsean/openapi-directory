/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMuteUserResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMuteUserResponse::OAIMuteUserResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMuteUserResponse::OAIMuteUserResponse() {
    this->initializeModel();
}

OAIMuteUserResponse::~OAIMuteUserResponse() {}

void OAIMuteUserResponse::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_mute_isSet = false;
    m_mute_isValid = false;

    m_mutes_isSet = false;
    m_mutes_isValid = false;

    m_own_user_isSet = false;
    m_own_user_isValid = false;
}

void OAIMuteUserResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMuteUserResponse::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_mute_isValid = ::OpenAPI::fromJsonValue(m_mute, json[QString("mute")]);
    m_mute_isSet = !json[QString("mute")].isNull() && m_mute_isValid;

    m_mutes_isValid = ::OpenAPI::fromJsonValue(m_mutes, json[QString("mutes")]);
    m_mutes_isSet = !json[QString("mutes")].isNull() && m_mutes_isValid;

    m_own_user_isValid = ::OpenAPI::fromJsonValue(m_own_user, json[QString("own_user")]);
    m_own_user_isSet = !json[QString("own_user")].isNull() && m_own_user_isValid;
}

QString OAIMuteUserResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMuteUserResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_mute.isSet()) {
        obj.insert(QString("mute"), ::OpenAPI::toJsonValue(m_mute));
    }
    if (m_mutes.size() > 0) {
        obj.insert(QString("mutes"), ::OpenAPI::toJsonValue(m_mutes));
    }
    if (m_own_user.isSet()) {
        obj.insert(QString("own_user"), ::OpenAPI::toJsonValue(m_own_user));
    }
    return obj;
}

QString OAIMuteUserResponse::getDuration() const {
    return m_duration;
}
void OAIMuteUserResponse::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIMuteUserResponse::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIMuteUserResponse::is_duration_Valid() const{
    return m_duration_isValid;
}

OAIUserMute OAIMuteUserResponse::getMute() const {
    return m_mute;
}
void OAIMuteUserResponse::setMute(const OAIUserMute &mute) {
    m_mute = mute;
    m_mute_isSet = true;
}

bool OAIMuteUserResponse::is_mute_Set() const{
    return m_mute_isSet;
}

bool OAIMuteUserResponse::is_mute_Valid() const{
    return m_mute_isValid;
}

QList<OAIUserMute> OAIMuteUserResponse::getMutes() const {
    return m_mutes;
}
void OAIMuteUserResponse::setMutes(const QList<OAIUserMute> &mutes) {
    m_mutes = mutes;
    m_mutes_isSet = true;
}

bool OAIMuteUserResponse::is_mutes_Set() const{
    return m_mutes_isSet;
}

bool OAIMuteUserResponse::is_mutes_Valid() const{
    return m_mutes_isValid;
}

OAIOwnUser OAIMuteUserResponse::getOwnUser() const {
    return m_own_user;
}
void OAIMuteUserResponse::setOwnUser(const OAIOwnUser &own_user) {
    m_own_user = own_user;
    m_own_user_isSet = true;
}

bool OAIMuteUserResponse::is_own_user_Set() const{
    return m_own_user_isSet;
}

bool OAIMuteUserResponse::is_own_user_Valid() const{
    return m_own_user_isValid;
}

bool OAIMuteUserResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mute.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mutes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_own_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMuteUserResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_duration_isValid && true;
}

} // namespace OpenAPI
