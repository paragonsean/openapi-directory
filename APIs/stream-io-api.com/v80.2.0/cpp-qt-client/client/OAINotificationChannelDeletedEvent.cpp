/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationChannelDeletedEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationChannelDeletedEvent::OAINotificationChannelDeletedEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationChannelDeletedEvent::OAINotificationChannelDeletedEvent() {
    this->initializeModel();
}

OAINotificationChannelDeletedEvent::~OAINotificationChannelDeletedEvent() {}

void OAINotificationChannelDeletedEvent::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_channel_type_isSet = false;
    m_channel_type_isValid = false;

    m_cid_isSet = false;
    m_cid_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAINotificationChannelDeletedEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationChannelDeletedEvent::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channel_id")]);
    m_channel_id_isSet = !json[QString("channel_id")].isNull() && m_channel_id_isValid;

    m_channel_type_isValid = ::OpenAPI::fromJsonValue(m_channel_type, json[QString("channel_type")]);
    m_channel_type_isSet = !json[QString("channel_type")].isNull() && m_channel_type_isValid;

    m_cid_isValid = ::OpenAPI::fromJsonValue(m_cid, json[QString("cid")]);
    m_cid_isSet = !json[QString("cid")].isNull() && m_cid_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAINotificationChannelDeletedEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationChannelDeletedEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_channel.isSet()) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_channel_id_isSet) {
        obj.insert(QString("channel_id"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_channel_type_isSet) {
        obj.insert(QString("channel_type"), ::OpenAPI::toJsonValue(m_channel_type));
    }
    if (m_cid_isSet) {
        obj.insert(QString("cid"), ::OpenAPI::toJsonValue(m_cid));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIChannelResponse OAINotificationChannelDeletedEvent::getChannel() const {
    return m_channel;
}
void OAINotificationChannelDeletedEvent::setChannel(const OAIChannelResponse &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAINotificationChannelDeletedEvent::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAINotificationChannelDeletedEvent::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAINotificationChannelDeletedEvent::getChannelId() const {
    return m_channel_id;
}
void OAINotificationChannelDeletedEvent::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAINotificationChannelDeletedEvent::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAINotificationChannelDeletedEvent::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAINotificationChannelDeletedEvent::getChannelType() const {
    return m_channel_type;
}
void OAINotificationChannelDeletedEvent::setChannelType(const QString &channel_type) {
    m_channel_type = channel_type;
    m_channel_type_isSet = true;
}

bool OAINotificationChannelDeletedEvent::is_channel_type_Set() const{
    return m_channel_type_isSet;
}

bool OAINotificationChannelDeletedEvent::is_channel_type_Valid() const{
    return m_channel_type_isValid;
}

QString OAINotificationChannelDeletedEvent::getCid() const {
    return m_cid;
}
void OAINotificationChannelDeletedEvent::setCid(const QString &cid) {
    m_cid = cid;
    m_cid_isSet = true;
}

bool OAINotificationChannelDeletedEvent::is_cid_Set() const{
    return m_cid_isSet;
}

bool OAINotificationChannelDeletedEvent::is_cid_Valid() const{
    return m_cid_isValid;
}

QDateTime OAINotificationChannelDeletedEvent::getCreatedAt() const {
    return m_created_at;
}
void OAINotificationChannelDeletedEvent::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAINotificationChannelDeletedEvent::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAINotificationChannelDeletedEvent::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAINotificationChannelDeletedEvent::getTeam() const {
    return m_team;
}
void OAINotificationChannelDeletedEvent::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAINotificationChannelDeletedEvent::is_team_Set() const{
    return m_team_isSet;
}

bool OAINotificationChannelDeletedEvent::is_team_Valid() const{
    return m_team_isValid;
}

QString OAINotificationChannelDeletedEvent::getType() const {
    return m_type;
}
void OAINotificationChannelDeletedEvent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINotificationChannelDeletedEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAINotificationChannelDeletedEvent::is_type_Valid() const{
    return m_type_isValid;
}

bool OAINotificationChannelDeletedEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationChannelDeletedEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_channel_id_isValid && m_channel_type_isValid && m_cid_isValid && m_created_at_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
