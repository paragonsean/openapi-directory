/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermission::OAIPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermission::OAIPermission() {
    this->initializeModel();
}

OAIPermission::~OAIPermission() {}

void OAIPermission::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_condition_isSet = false;
    m_condition_isValid = false;

    m_custom_isSet = false;
    m_custom_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_same_team_isSet = false;
    m_same_team_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIPermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermission::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_condition_isValid = ::OpenAPI::fromJsonValue(m_condition, json[QString("condition")]);
    m_condition_isSet = !json[QString("condition")].isNull() && m_condition_isValid;

    m_custom_isValid = ::OpenAPI::fromJsonValue(m_custom, json[QString("custom")]);
    m_custom_isSet = !json[QString("custom")].isNull() && m_custom_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_same_team_isValid = ::OpenAPI::fromJsonValue(m_same_team, json[QString("same_team")]);
    m_same_team_isSet = !json[QString("same_team")].isNull() && m_same_team_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIPermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermission::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_condition.size() > 0) {
        obj.insert(QString("condition"), ::OpenAPI::toJsonValue(m_condition));
    }
    if (m_custom_isSet) {
        obj.insert(QString("custom"), ::OpenAPI::toJsonValue(m_custom));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_same_team_isSet) {
        obj.insert(QString("same_team"), ::OpenAPI::toJsonValue(m_same_team));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIPermission::getAction() const {
    return m_action;
}
void OAIPermission::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIPermission::is_action_Set() const{
    return m_action_isSet;
}

bool OAIPermission::is_action_Valid() const{
    return m_action_isValid;
}

QMap<QString, QJsonValue> OAIPermission::getCondition() const {
    return m_condition;
}
void OAIPermission::setCondition(const QMap<QString, QJsonValue> &condition) {
    m_condition = condition;
    m_condition_isSet = true;
}

bool OAIPermission::is_condition_Set() const{
    return m_condition_isSet;
}

bool OAIPermission::is_condition_Valid() const{
    return m_condition_isValid;
}

bool OAIPermission::isCustom() const {
    return m_custom;
}
void OAIPermission::setCustom(const bool &custom) {
    m_custom = custom;
    m_custom_isSet = true;
}

bool OAIPermission::is_custom_Set() const{
    return m_custom_isSet;
}

bool OAIPermission::is_custom_Valid() const{
    return m_custom_isValid;
}

QString OAIPermission::getDescription() const {
    return m_description;
}
void OAIPermission::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPermission::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPermission::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPermission::getId() const {
    return m_id;
}
void OAIPermission::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPermission::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPermission::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPermission::getLevel() const {
    return m_level;
}
void OAIPermission::setLevel(const QString &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIPermission::is_level_Set() const{
    return m_level_isSet;
}

bool OAIPermission::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIPermission::getName() const {
    return m_name;
}
void OAIPermission::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPermission::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPermission::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIPermission::isOwner() const {
    return m_owner;
}
void OAIPermission::setOwner(const bool &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIPermission::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIPermission::is_owner_Valid() const{
    return m_owner_isValid;
}

bool OAIPermission::isSameTeam() const {
    return m_same_team;
}
void OAIPermission::setSameTeam(const bool &same_team) {
    m_same_team = same_team;
    m_same_team_isSet = true;
}

bool OAIPermission::is_same_team_Set() const{
    return m_same_team_isSet;
}

bool OAIPermission::is_same_team_Valid() const{
    return m_same_team_isValid;
}

QList<QString> OAIPermission::getTags() const {
    return m_tags;
}
void OAIPermission::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPermission::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPermission::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIPermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_condition.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_same_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_custom_isValid && m_description_isValid && m_id_isValid && m_level_isValid && m_name_isValid && m_owner_isValid && m_same_team_isValid && m_tags_isValid && true;
}

} // namespace OpenAPI
