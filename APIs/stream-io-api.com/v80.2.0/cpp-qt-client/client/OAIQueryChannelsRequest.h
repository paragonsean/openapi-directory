/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQueryChannelsRequest.h
 *
 * 
 */

#ifndef OAIQueryChannelsRequest_H
#define OAIQueryChannelsRequest_H

#include <QJsonObject>

#include "OAISortParamRequest.h"
#include "OAIUserObjectRequest.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISortParamRequest;

class OAIQueryChannelsRequest : public OAIObject {
public:
    OAIQueryChannelsRequest();
    OAIQueryChannelsRequest(QString json);
    ~OAIQueryChannelsRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClientId() const;
    void setClientId(const QString &client_id);
    bool is_client_id_Set() const;
    bool is_client_id_Valid() const;

    QString getConnectionId() const;
    void setConnectionId(const QString &connection_id);
    bool is_connection_id_Set() const;
    bool is_connection_id_Valid() const;

    QMap<QString, QJsonValue> getFilterConditions() const;
    void setFilterConditions(const QMap<QString, QJsonValue> &filter_conditions);
    bool is_filter_conditions_Set() const;
    bool is_filter_conditions_Valid() const;

    qint32 getLimit() const;
    void setLimit(const qint32 &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    qint32 getMemberLimit() const;
    void setMemberLimit(const qint32 &member_limit);
    bool is_member_limit_Set() const;
    bool is_member_limit_Valid() const;

    qint32 getMessageLimit() const;
    void setMessageLimit(const qint32 &message_limit);
    bool is_message_limit_Set() const;
    bool is_message_limit_Valid() const;

    qint32 getOffset() const;
    void setOffset(const qint32 &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    bool isPresence() const;
    void setPresence(const bool &presence);
    bool is_presence_Set() const;
    bool is_presence_Valid() const;

    QList<OAISortParamRequest> getSort() const;
    void setSort(const QList<OAISortParamRequest> &sort);
    bool is_sort_Set() const;
    bool is_sort_Valid() const;

    bool isState() const;
    void setState(const bool &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAIUserObjectRequest getUser() const;
    void setUser(const OAIUserObjectRequest &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    bool isWatch() const;
    void setWatch(const bool &watch);
    bool is_watch_Set() const;
    bool is_watch_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_client_id;
    bool m_client_id_isSet;
    bool m_client_id_isValid;

    QString m_connection_id;
    bool m_connection_id_isSet;
    bool m_connection_id_isValid;

    QMap<QString, QJsonValue> m_filter_conditions;
    bool m_filter_conditions_isSet;
    bool m_filter_conditions_isValid;

    qint32 m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    qint32 m_member_limit;
    bool m_member_limit_isSet;
    bool m_member_limit_isValid;

    qint32 m_message_limit;
    bool m_message_limit_isSet;
    bool m_message_limit_isValid;

    qint32 m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    bool m_presence;
    bool m_presence_isSet;
    bool m_presence_isValid;

    QList<OAISortParamRequest> m_sort;
    bool m_sort_isSet;
    bool m_sort_isValid;

    bool m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAIUserObjectRequest m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    bool m_watch;
    bool m_watch_isSet;
    bool m_watch_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQueryChannelsRequest)

#endif // OAIQueryChannelsRequest_H
