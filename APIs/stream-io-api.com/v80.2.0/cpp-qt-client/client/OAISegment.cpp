/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISegment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISegment::OAISegment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISegment::OAISegment() {
    this->initializeModel();
}

OAISegment::~OAISegment() {}

void OAISegment::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_in_use_isSet = false;
    m_in_use_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAISegment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISegment::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_in_use_isValid = ::OpenAPI::fromJsonValue(m_in_use, json[QString("in_use")]);
    m_in_use_isSet = !json[QString("in_use")].isNull() && m_in_use_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAISegment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISegment::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_filter.size() > 0) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_in_use_isSet) {
        obj.insert(QString("in_use"), ::OpenAPI::toJsonValue(m_in_use));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAISegment::getCreatedAt() const {
    return m_created_at;
}
void OAISegment::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAISegment::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAISegment::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAISegment::getDescription() const {
    return m_description;
}
void OAISegment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISegment::is_description_Set() const{
    return m_description_isSet;
}

bool OAISegment::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QJsonValue> OAISegment::getFilter() const {
    return m_filter;
}
void OAISegment::setFilter(const QMap<QString, QJsonValue> &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAISegment::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAISegment::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAISegment::getId() const {
    return m_id;
}
void OAISegment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISegment::is_id_Set() const{
    return m_id_isSet;
}

bool OAISegment::is_id_Valid() const{
    return m_id_isValid;
}

bool OAISegment::isInUse() const {
    return m_in_use;
}
void OAISegment::setInUse(const bool &in_use) {
    m_in_use = in_use;
    m_in_use_isSet = true;
}

bool OAISegment::is_in_use_Set() const{
    return m_in_use_isSet;
}

bool OAISegment::is_in_use_Valid() const{
    return m_in_use_isValid;
}

QString OAISegment::getName() const {
    return m_name;
}
void OAISegment::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISegment::is_name_Set() const{
    return m_name_isSet;
}

bool OAISegment::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAISegment::getSize() const {
    return m_size;
}
void OAISegment::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAISegment::is_size_Set() const{
    return m_size_isSet;
}

bool OAISegment::is_size_Valid() const{
    return m_size_isValid;
}

QString OAISegment::getStatus() const {
    return m_status;
}
void OAISegment::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISegment::is_status_Set() const{
    return m_status_isSet;
}

bool OAISegment::is_status_Valid() const{
    return m_status_isValid;
}

QString OAISegment::getType() const {
    return m_type;
}
void OAISegment::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISegment::is_type_Set() const{
    return m_type_isSet;
}

bool OAISegment::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAISegment::getUpdatedAt() const {
    return m_updated_at;
}
void OAISegment::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAISegment::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAISegment::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAISegment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISegment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_description_isValid && m_filter_isValid && m_id_isValid && m_in_use_isValid && m_name_isValid && m_size_isValid && m_status_isValid && m_type_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
