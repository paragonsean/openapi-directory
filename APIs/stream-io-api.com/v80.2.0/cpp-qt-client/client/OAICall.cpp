/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICall.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICall::OAICall(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICall::OAICall() {
    this->initializeModel();
}

OAICall::~OAICall() {}

void OAICall::initializeModel() {

    m_agora_isSet = false;
    m_agora_isValid = false;

    m_hms_isSet = false;
    m_hms_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICall::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICall::fromJsonObject(QJsonObject json) {

    m_agora_isValid = ::OpenAPI::fromJsonValue(m_agora, json[QString("agora")]);
    m_agora_isSet = !json[QString("agora")].isNull() && m_agora_isValid;

    m_hms_isValid = ::OpenAPI::fromJsonValue(m_hms, json[QString("hms")]);
    m_hms_isSet = !json[QString("hms")].isNull() && m_hms_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICall::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICall::asJsonObject() const {
    QJsonObject obj;
    if (m_agora.isSet()) {
        obj.insert(QString("agora"), ::OpenAPI::toJsonValue(m_agora));
    }
    if (m_hms.isSet()) {
        obj.insert(QString("hms"), ::OpenAPI::toJsonValue(m_hms));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIAgoraCall OAICall::getAgora() const {
    return m_agora;
}
void OAICall::setAgora(const OAIAgoraCall &agora) {
    m_agora = agora;
    m_agora_isSet = true;
}

bool OAICall::is_agora_Set() const{
    return m_agora_isSet;
}

bool OAICall::is_agora_Valid() const{
    return m_agora_isValid;
}

OAIHMSCall OAICall::getHms() const {
    return m_hms;
}
void OAICall::setHms(const OAIHMSCall &hms) {
    m_hms = hms;
    m_hms_isSet = true;
}

bool OAICall::is_hms_Set() const{
    return m_hms_isSet;
}

bool OAICall::is_hms_Valid() const{
    return m_hms_isValid;
}

QString OAICall::getId() const {
    return m_id;
}
void OAICall::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICall::is_id_Set() const{
    return m_id_isSet;
}

bool OAICall::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICall::getProvider() const {
    return m_provider;
}
void OAICall::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAICall::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAICall::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAICall::getType() const {
    return m_type;
}
void OAICall::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICall::is_type_Set() const{
    return m_type_isSet;
}

bool OAICall::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICall::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agora.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hms.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICall::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_provider_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
