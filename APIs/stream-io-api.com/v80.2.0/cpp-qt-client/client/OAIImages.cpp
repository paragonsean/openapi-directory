/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImages.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImages::OAIImages(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImages::OAIImages() {
    this->initializeModel();
}

OAIImages::~OAIImages() {}

void OAIImages::initializeModel() {

    m_fixed_height_isSet = false;
    m_fixed_height_isValid = false;

    m_fixed_height_downsampled_isSet = false;
    m_fixed_height_downsampled_isValid = false;

    m_fixed_height_still_isSet = false;
    m_fixed_height_still_isValid = false;

    m_fixed_width_isSet = false;
    m_fixed_width_isValid = false;

    m_fixed_width_downsampled_isSet = false;
    m_fixed_width_downsampled_isValid = false;

    m_fixed_width_still_isSet = false;
    m_fixed_width_still_isValid = false;

    m_original_isSet = false;
    m_original_isValid = false;
}

void OAIImages::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImages::fromJsonObject(QJsonObject json) {

    m_fixed_height_isValid = ::OpenAPI::fromJsonValue(m_fixed_height, json[QString("fixed_height")]);
    m_fixed_height_isSet = !json[QString("fixed_height")].isNull() && m_fixed_height_isValid;

    m_fixed_height_downsampled_isValid = ::OpenAPI::fromJsonValue(m_fixed_height_downsampled, json[QString("fixed_height_downsampled")]);
    m_fixed_height_downsampled_isSet = !json[QString("fixed_height_downsampled")].isNull() && m_fixed_height_downsampled_isValid;

    m_fixed_height_still_isValid = ::OpenAPI::fromJsonValue(m_fixed_height_still, json[QString("fixed_height_still")]);
    m_fixed_height_still_isSet = !json[QString("fixed_height_still")].isNull() && m_fixed_height_still_isValid;

    m_fixed_width_isValid = ::OpenAPI::fromJsonValue(m_fixed_width, json[QString("fixed_width")]);
    m_fixed_width_isSet = !json[QString("fixed_width")].isNull() && m_fixed_width_isValid;

    m_fixed_width_downsampled_isValid = ::OpenAPI::fromJsonValue(m_fixed_width_downsampled, json[QString("fixed_width_downsampled")]);
    m_fixed_width_downsampled_isSet = !json[QString("fixed_width_downsampled")].isNull() && m_fixed_width_downsampled_isValid;

    m_fixed_width_still_isValid = ::OpenAPI::fromJsonValue(m_fixed_width_still, json[QString("fixed_width_still")]);
    m_fixed_width_still_isSet = !json[QString("fixed_width_still")].isNull() && m_fixed_width_still_isValid;

    m_original_isValid = ::OpenAPI::fromJsonValue(m_original, json[QString("original")]);
    m_original_isSet = !json[QString("original")].isNull() && m_original_isValid;
}

QString OAIImages::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImages::asJsonObject() const {
    QJsonObject obj;
    if (m_fixed_height.isSet()) {
        obj.insert(QString("fixed_height"), ::OpenAPI::toJsonValue(m_fixed_height));
    }
    if (m_fixed_height_downsampled.isSet()) {
        obj.insert(QString("fixed_height_downsampled"), ::OpenAPI::toJsonValue(m_fixed_height_downsampled));
    }
    if (m_fixed_height_still.isSet()) {
        obj.insert(QString("fixed_height_still"), ::OpenAPI::toJsonValue(m_fixed_height_still));
    }
    if (m_fixed_width.isSet()) {
        obj.insert(QString("fixed_width"), ::OpenAPI::toJsonValue(m_fixed_width));
    }
    if (m_fixed_width_downsampled.isSet()) {
        obj.insert(QString("fixed_width_downsampled"), ::OpenAPI::toJsonValue(m_fixed_width_downsampled));
    }
    if (m_fixed_width_still.isSet()) {
        obj.insert(QString("fixed_width_still"), ::OpenAPI::toJsonValue(m_fixed_width_still));
    }
    if (m_original.isSet()) {
        obj.insert(QString("original"), ::OpenAPI::toJsonValue(m_original));
    }
    return obj;
}

OAIImageData OAIImages::getFixedHeight() const {
    return m_fixed_height;
}
void OAIImages::setFixedHeight(const OAIImageData &fixed_height) {
    m_fixed_height = fixed_height;
    m_fixed_height_isSet = true;
}

bool OAIImages::is_fixed_height_Set() const{
    return m_fixed_height_isSet;
}

bool OAIImages::is_fixed_height_Valid() const{
    return m_fixed_height_isValid;
}

OAIImageData OAIImages::getFixedHeightDownsampled() const {
    return m_fixed_height_downsampled;
}
void OAIImages::setFixedHeightDownsampled(const OAIImageData &fixed_height_downsampled) {
    m_fixed_height_downsampled = fixed_height_downsampled;
    m_fixed_height_downsampled_isSet = true;
}

bool OAIImages::is_fixed_height_downsampled_Set() const{
    return m_fixed_height_downsampled_isSet;
}

bool OAIImages::is_fixed_height_downsampled_Valid() const{
    return m_fixed_height_downsampled_isValid;
}

OAIImageData OAIImages::getFixedHeightStill() const {
    return m_fixed_height_still;
}
void OAIImages::setFixedHeightStill(const OAIImageData &fixed_height_still) {
    m_fixed_height_still = fixed_height_still;
    m_fixed_height_still_isSet = true;
}

bool OAIImages::is_fixed_height_still_Set() const{
    return m_fixed_height_still_isSet;
}

bool OAIImages::is_fixed_height_still_Valid() const{
    return m_fixed_height_still_isValid;
}

OAIImageData OAIImages::getFixedWidth() const {
    return m_fixed_width;
}
void OAIImages::setFixedWidth(const OAIImageData &fixed_width) {
    m_fixed_width = fixed_width;
    m_fixed_width_isSet = true;
}

bool OAIImages::is_fixed_width_Set() const{
    return m_fixed_width_isSet;
}

bool OAIImages::is_fixed_width_Valid() const{
    return m_fixed_width_isValid;
}

OAIImageData OAIImages::getFixedWidthDownsampled() const {
    return m_fixed_width_downsampled;
}
void OAIImages::setFixedWidthDownsampled(const OAIImageData &fixed_width_downsampled) {
    m_fixed_width_downsampled = fixed_width_downsampled;
    m_fixed_width_downsampled_isSet = true;
}

bool OAIImages::is_fixed_width_downsampled_Set() const{
    return m_fixed_width_downsampled_isSet;
}

bool OAIImages::is_fixed_width_downsampled_Valid() const{
    return m_fixed_width_downsampled_isValid;
}

OAIImageData OAIImages::getFixedWidthStill() const {
    return m_fixed_width_still;
}
void OAIImages::setFixedWidthStill(const OAIImageData &fixed_width_still) {
    m_fixed_width_still = fixed_width_still;
    m_fixed_width_still_isSet = true;
}

bool OAIImages::is_fixed_width_still_Set() const{
    return m_fixed_width_still_isSet;
}

bool OAIImages::is_fixed_width_still_Valid() const{
    return m_fixed_width_still_isValid;
}

OAIImageData OAIImages::getOriginal() const {
    return m_original;
}
void OAIImages::setOriginal(const OAIImageData &original) {
    m_original = original;
    m_original_isSet = true;
}

bool OAIImages::is_original_Set() const{
    return m_original_isSet;
}

bool OAIImages::is_original_Valid() const{
    return m_original_isValid;
}

bool OAIImages::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fixed_height.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_height_downsampled.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_height_still.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_width.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_width_downsampled.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_width_still.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImages::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_fixed_height_isValid && m_fixed_height_downsampled_isValid && m_fixed_height_still_isValid && m_fixed_width_isValid && m_fixed_width_downsampled_isValid && m_fixed_width_still_isValid && m_original_isValid && true;
}

} // namespace OpenAPI
