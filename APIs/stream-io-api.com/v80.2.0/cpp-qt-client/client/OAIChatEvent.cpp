/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChatEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChatEvent::OAIChatEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChatEvent::OAIChatEvent() {
    this->initializeModel();
}

OAIChatEvent::~OAIChatEvent() {}

void OAIChatEvent::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_channel_type_isSet = false;
    m_channel_type_isValid = false;

    m_cid_isSet = false;
    m_cid_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_clear_history_isSet = false;
    m_clear_history_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_me_isSet = false;
    m_me_isValid = false;

    m_member_isSet = false;
    m_member_isValid = false;

    m_hard_delete_isSet = false;
    m_hard_delete_isValid = false;

    m_thread_participants_isSet = false;
    m_thread_participants_isValid = false;

    m_flag_isSet = false;
    m_flag_isValid = false;

    m_watcher_count_isSet = false;
    m_watcher_count_isValid = false;

    m_last_read_message_id_isSet = false;
    m_last_read_message_id_isValid = false;

    m_total_unread_count_isSet = false;
    m_total_unread_count_isValid = false;

    m_unread_channels_isSet = false;
    m_unread_channels_isValid = false;

    m_unread_count_isSet = false;
    m_unread_count_isValid = false;

    m_first_unread_message_id_isSet = false;
    m_first_unread_message_id_isValid = false;

    m_last_read_at_isSet = false;
    m_last_read_at_isValid = false;

    m_unread_messages_isSet = false;
    m_unread_messages_isValid = false;

    m_reaction_isSet = false;
    m_reaction_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_expiration_isSet = false;
    m_expiration_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_shadow_isSet = false;
    m_shadow_isValid = false;

    m_delete_conversation_channels_isSet = false;
    m_delete_conversation_channels_isValid = false;

    m_mark_messages_deleted_isSet = false;
    m_mark_messages_deleted_isValid = false;

    m_target_user_isSet = false;
    m_target_user_isValid = false;

    m_target_users_isSet = false;
    m_target_users_isValid = false;

    m_channels_isSet = false;
    m_channels_isValid = false;
}

void OAIChatEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChatEvent::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channel_id")]);
    m_channel_id_isSet = !json[QString("channel_id")].isNull() && m_channel_id_isValid;

    m_channel_type_isValid = ::OpenAPI::fromJsonValue(m_channel_type, json[QString("channel_type")]);
    m_channel_type_isSet = !json[QString("channel_type")].isNull() && m_channel_type_isValid;

    m_cid_isValid = ::OpenAPI::fromJsonValue(m_cid, json[QString("cid")]);
    m_cid_isSet = !json[QString("cid")].isNull() && m_cid_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_clear_history_isValid = ::OpenAPI::fromJsonValue(m_clear_history, json[QString("clear_history")]);
    m_clear_history_isSet = !json[QString("clear_history")].isNull() && m_clear_history_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_me_isValid = ::OpenAPI::fromJsonValue(m_me, json[QString("me")]);
    m_me_isSet = !json[QString("me")].isNull() && m_me_isValid;

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("member")]);
    m_member_isSet = !json[QString("member")].isNull() && m_member_isValid;

    m_hard_delete_isValid = ::OpenAPI::fromJsonValue(m_hard_delete, json[QString("hard_delete")]);
    m_hard_delete_isSet = !json[QString("hard_delete")].isNull() && m_hard_delete_isValid;

    m_thread_participants_isValid = ::OpenAPI::fromJsonValue(m_thread_participants, json[QString("thread_participants")]);
    m_thread_participants_isSet = !json[QString("thread_participants")].isNull() && m_thread_participants_isValid;

    m_flag_isValid = ::OpenAPI::fromJsonValue(m_flag, json[QString("flag")]);
    m_flag_isSet = !json[QString("flag")].isNull() && m_flag_isValid;

    m_watcher_count_isValid = ::OpenAPI::fromJsonValue(m_watcher_count, json[QString("watcher_count")]);
    m_watcher_count_isSet = !json[QString("watcher_count")].isNull() && m_watcher_count_isValid;

    m_last_read_message_id_isValid = ::OpenAPI::fromJsonValue(m_last_read_message_id, json[QString("last_read_message_id")]);
    m_last_read_message_id_isSet = !json[QString("last_read_message_id")].isNull() && m_last_read_message_id_isValid;

    m_total_unread_count_isValid = ::OpenAPI::fromJsonValue(m_total_unread_count, json[QString("total_unread_count")]);
    m_total_unread_count_isSet = !json[QString("total_unread_count")].isNull() && m_total_unread_count_isValid;

    m_unread_channels_isValid = ::OpenAPI::fromJsonValue(m_unread_channels, json[QString("unread_channels")]);
    m_unread_channels_isSet = !json[QString("unread_channels")].isNull() && m_unread_channels_isValid;

    m_unread_count_isValid = ::OpenAPI::fromJsonValue(m_unread_count, json[QString("unread_count")]);
    m_unread_count_isSet = !json[QString("unread_count")].isNull() && m_unread_count_isValid;

    m_first_unread_message_id_isValid = ::OpenAPI::fromJsonValue(m_first_unread_message_id, json[QString("first_unread_message_id")]);
    m_first_unread_message_id_isSet = !json[QString("first_unread_message_id")].isNull() && m_first_unread_message_id_isValid;

    m_last_read_at_isValid = ::OpenAPI::fromJsonValue(m_last_read_at, json[QString("last_read_at")]);
    m_last_read_at_isSet = !json[QString("last_read_at")].isNull() && m_last_read_at_isValid;

    m_unread_messages_isValid = ::OpenAPI::fromJsonValue(m_unread_messages, json[QString("unread_messages")]);
    m_unread_messages_isSet = !json[QString("unread_messages")].isNull() && m_unread_messages_isValid;

    m_reaction_isValid = ::OpenAPI::fromJsonValue(m_reaction, json[QString("reaction")]);
    m_reaction_isSet = !json[QString("reaction")].isNull() && m_reaction_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parent_id")]);
    m_parent_id_isSet = !json[QString("parent_id")].isNull() && m_parent_id_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_expiration_isValid = ::OpenAPI::fromJsonValue(m_expiration, json[QString("expiration")]);
    m_expiration_isSet = !json[QString("expiration")].isNull() && m_expiration_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_shadow_isValid = ::OpenAPI::fromJsonValue(m_shadow, json[QString("shadow")]);
    m_shadow_isSet = !json[QString("shadow")].isNull() && m_shadow_isValid;

    m_delete_conversation_channels_isValid = ::OpenAPI::fromJsonValue(m_delete_conversation_channels, json[QString("delete_conversation_channels")]);
    m_delete_conversation_channels_isSet = !json[QString("delete_conversation_channels")].isNull() && m_delete_conversation_channels_isValid;

    m_mark_messages_deleted_isValid = ::OpenAPI::fromJsonValue(m_mark_messages_deleted, json[QString("mark_messages_deleted")]);
    m_mark_messages_deleted_isSet = !json[QString("mark_messages_deleted")].isNull() && m_mark_messages_deleted_isValid;

    m_target_user_isValid = ::OpenAPI::fromJsonValue(m_target_user, json[QString("target_user")]);
    m_target_user_isSet = !json[QString("target_user")].isNull() && m_target_user_isValid;

    m_target_users_isValid = ::OpenAPI::fromJsonValue(m_target_users, json[QString("target_users")]);
    m_target_users_isSet = !json[QString("target_users")].isNull() && m_target_users_isValid;

    m_channels_isValid = ::OpenAPI::fromJsonValue(m_channels, json[QString("channels")]);
    m_channels_isSet = !json[QString("channels")].isNull() && m_channels_isValid;
}

QString OAIChatEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChatEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_channel.isSet()) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_channel_id_isSet) {
        obj.insert(QString("channel_id"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_channel_type_isSet) {
        obj.insert(QString("channel_type"), ::OpenAPI::toJsonValue(m_channel_type));
    }
    if (m_cid_isSet) {
        obj.insert(QString("cid"), ::OpenAPI::toJsonValue(m_cid));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_clear_history_isSet) {
        obj.insert(QString("clear_history"), ::OpenAPI::toJsonValue(m_clear_history));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_me.isSet()) {
        obj.insert(QString("me"), ::OpenAPI::toJsonValue(m_me));
    }
    if (m_member.isSet()) {
        obj.insert(QString("member"), ::OpenAPI::toJsonValue(m_member));
    }
    if (m_hard_delete_isSet) {
        obj.insert(QString("hard_delete"), ::OpenAPI::toJsonValue(m_hard_delete));
    }
    if (m_thread_participants.size() > 0) {
        obj.insert(QString("thread_participants"), ::OpenAPI::toJsonValue(m_thread_participants));
    }
    if (m_flag.isSet()) {
        obj.insert(QString("flag"), ::OpenAPI::toJsonValue(m_flag));
    }
    if (m_watcher_count_isSet) {
        obj.insert(QString("watcher_count"), ::OpenAPI::toJsonValue(m_watcher_count));
    }
    if (m_last_read_message_id_isSet) {
        obj.insert(QString("last_read_message_id"), ::OpenAPI::toJsonValue(m_last_read_message_id));
    }
    if (m_total_unread_count_isSet) {
        obj.insert(QString("total_unread_count"), ::OpenAPI::toJsonValue(m_total_unread_count));
    }
    if (m_unread_channels_isSet) {
        obj.insert(QString("unread_channels"), ::OpenAPI::toJsonValue(m_unread_channels));
    }
    if (m_unread_count_isSet) {
        obj.insert(QString("unread_count"), ::OpenAPI::toJsonValue(m_unread_count));
    }
    if (m_first_unread_message_id_isSet) {
        obj.insert(QString("first_unread_message_id"), ::OpenAPI::toJsonValue(m_first_unread_message_id));
    }
    if (m_last_read_at_isSet) {
        obj.insert(QString("last_read_at"), ::OpenAPI::toJsonValue(m_last_read_at));
    }
    if (m_unread_messages_isSet) {
        obj.insert(QString("unread_messages"), ::OpenAPI::toJsonValue(m_unread_messages));
    }
    if (m_reaction.isSet()) {
        obj.insert(QString("reaction"), ::OpenAPI::toJsonValue(m_reaction));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parent_id"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_expiration_isSet) {
        obj.insert(QString("expiration"), ::OpenAPI::toJsonValue(m_expiration));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_shadow_isSet) {
        obj.insert(QString("shadow"), ::OpenAPI::toJsonValue(m_shadow));
    }
    if (m_delete_conversation_channels_isSet) {
        obj.insert(QString("delete_conversation_channels"), ::OpenAPI::toJsonValue(m_delete_conversation_channels));
    }
    if (m_mark_messages_deleted_isSet) {
        obj.insert(QString("mark_messages_deleted"), ::OpenAPI::toJsonValue(m_mark_messages_deleted));
    }
    if (m_target_user_isSet) {
        obj.insert(QString("target_user"), ::OpenAPI::toJsonValue(m_target_user));
    }
    if (m_target_users.size() > 0) {
        obj.insert(QString("target_users"), ::OpenAPI::toJsonValue(m_target_users));
    }
    if (m_channels.size() > 0) {
        obj.insert(QString("channels"), ::OpenAPI::toJsonValue(m_channels));
    }
    return obj;
}

QDateTime OAIChatEvent::getCreatedAt() const {
    return m_created_at;
}
void OAIChatEvent::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIChatEvent::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIChatEvent::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIChatEvent::getType() const {
    return m_type;
}
void OAIChatEvent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChatEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChatEvent::is_type_Valid() const{
    return m_type_isValid;
}

OAIChannelResponse OAIChatEvent::getChannel() const {
    return m_channel;
}
void OAIChatEvent::setChannel(const OAIChannelResponse &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIChatEvent::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIChatEvent::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIChatEvent::getChannelId() const {
    return m_channel_id;
}
void OAIChatEvent::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIChatEvent::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIChatEvent::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAIChatEvent::getChannelType() const {
    return m_channel_type;
}
void OAIChatEvent::setChannelType(const QString &channel_type) {
    m_channel_type = channel_type;
    m_channel_type_isSet = true;
}

bool OAIChatEvent::is_channel_type_Set() const{
    return m_channel_type_isSet;
}

bool OAIChatEvent::is_channel_type_Valid() const{
    return m_channel_type_isValid;
}

QString OAIChatEvent::getCid() const {
    return m_cid;
}
void OAIChatEvent::setCid(const QString &cid) {
    m_cid = cid;
    m_cid_isSet = true;
}

bool OAIChatEvent::is_cid_Set() const{
    return m_cid_isSet;
}

bool OAIChatEvent::is_cid_Valid() const{
    return m_cid_isValid;
}

QString OAIChatEvent::getTeam() const {
    return m_team;
}
void OAIChatEvent::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIChatEvent::is_team_Set() const{
    return m_team_isSet;
}

bool OAIChatEvent::is_team_Valid() const{
    return m_team_isValid;
}

bool OAIChatEvent::isClearHistory() const {
    return m_clear_history;
}
void OAIChatEvent::setClearHistory(const bool &clear_history) {
    m_clear_history = clear_history;
    m_clear_history_isSet = true;
}

bool OAIChatEvent::is_clear_history_Set() const{
    return m_clear_history_isSet;
}

bool OAIChatEvent::is_clear_history_Valid() const{
    return m_clear_history_isValid;
}

OAIUserObject OAIChatEvent::getUser() const {
    return m_user;
}
void OAIChatEvent::setUser(const OAIUserObject &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIChatEvent::is_user_Set() const{
    return m_user_isSet;
}

bool OAIChatEvent::is_user_Valid() const{
    return m_user_isValid;
}

OAIMessage OAIChatEvent::getMessage() const {
    return m_message;
}
void OAIChatEvent::setMessage(const OAIMessage &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIChatEvent::is_message_Set() const{
    return m_message_isSet;
}

bool OAIChatEvent::is_message_Valid() const{
    return m_message_isValid;
}

OAIOwnUser OAIChatEvent::getMe() const {
    return m_me;
}
void OAIChatEvent::setMe(const OAIOwnUser &me) {
    m_me = me;
    m_me_isSet = true;
}

bool OAIChatEvent::is_me_Set() const{
    return m_me_isSet;
}

bool OAIChatEvent::is_me_Valid() const{
    return m_me_isValid;
}

OAIChannelMember OAIChatEvent::getMember() const {
    return m_member;
}
void OAIChatEvent::setMember(const OAIChannelMember &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAIChatEvent::is_member_Set() const{
    return m_member_isSet;
}

bool OAIChatEvent::is_member_Valid() const{
    return m_member_isValid;
}

bool OAIChatEvent::isHardDelete() const {
    return m_hard_delete;
}
void OAIChatEvent::setHardDelete(const bool &hard_delete) {
    m_hard_delete = hard_delete;
    m_hard_delete_isSet = true;
}

bool OAIChatEvent::is_hard_delete_Set() const{
    return m_hard_delete_isSet;
}

bool OAIChatEvent::is_hard_delete_Valid() const{
    return m_hard_delete_isValid;
}

QList<OAIUserObject> OAIChatEvent::getThreadParticipants() const {
    return m_thread_participants;
}
void OAIChatEvent::setThreadParticipants(const QList<OAIUserObject> &thread_participants) {
    m_thread_participants = thread_participants;
    m_thread_participants_isSet = true;
}

bool OAIChatEvent::is_thread_participants_Set() const{
    return m_thread_participants_isSet;
}

bool OAIChatEvent::is_thread_participants_Valid() const{
    return m_thread_participants_isValid;
}

OAIFlag OAIChatEvent::getFlag() const {
    return m_flag;
}
void OAIChatEvent::setFlag(const OAIFlag &flag) {
    m_flag = flag;
    m_flag_isSet = true;
}

bool OAIChatEvent::is_flag_Set() const{
    return m_flag_isSet;
}

bool OAIChatEvent::is_flag_Valid() const{
    return m_flag_isValid;
}

qint32 OAIChatEvent::getWatcherCount() const {
    return m_watcher_count;
}
void OAIChatEvent::setWatcherCount(const qint32 &watcher_count) {
    m_watcher_count = watcher_count;
    m_watcher_count_isSet = true;
}

bool OAIChatEvent::is_watcher_count_Set() const{
    return m_watcher_count_isSet;
}

bool OAIChatEvent::is_watcher_count_Valid() const{
    return m_watcher_count_isValid;
}

QString OAIChatEvent::getLastReadMessageId() const {
    return m_last_read_message_id;
}
void OAIChatEvent::setLastReadMessageId(const QString &last_read_message_id) {
    m_last_read_message_id = last_read_message_id;
    m_last_read_message_id_isSet = true;
}

bool OAIChatEvent::is_last_read_message_id_Set() const{
    return m_last_read_message_id_isSet;
}

bool OAIChatEvent::is_last_read_message_id_Valid() const{
    return m_last_read_message_id_isValid;
}

qint32 OAIChatEvent::getTotalUnreadCount() const {
    return m_total_unread_count;
}
void OAIChatEvent::setTotalUnreadCount(const qint32 &total_unread_count) {
    m_total_unread_count = total_unread_count;
    m_total_unread_count_isSet = true;
}

bool OAIChatEvent::is_total_unread_count_Set() const{
    return m_total_unread_count_isSet;
}

bool OAIChatEvent::is_total_unread_count_Valid() const{
    return m_total_unread_count_isValid;
}

qint32 OAIChatEvent::getUnreadChannels() const {
    return m_unread_channels;
}
void OAIChatEvent::setUnreadChannels(const qint32 &unread_channels) {
    m_unread_channels = unread_channels;
    m_unread_channels_isSet = true;
}

bool OAIChatEvent::is_unread_channels_Set() const{
    return m_unread_channels_isSet;
}

bool OAIChatEvent::is_unread_channels_Valid() const{
    return m_unread_channels_isValid;
}

qint32 OAIChatEvent::getUnreadCount() const {
    return m_unread_count;
}
void OAIChatEvent::setUnreadCount(const qint32 &unread_count) {
    m_unread_count = unread_count;
    m_unread_count_isSet = true;
}

bool OAIChatEvent::is_unread_count_Set() const{
    return m_unread_count_isSet;
}

bool OAIChatEvent::is_unread_count_Valid() const{
    return m_unread_count_isValid;
}

QString OAIChatEvent::getFirstUnreadMessageId() const {
    return m_first_unread_message_id;
}
void OAIChatEvent::setFirstUnreadMessageId(const QString &first_unread_message_id) {
    m_first_unread_message_id = first_unread_message_id;
    m_first_unread_message_id_isSet = true;
}

bool OAIChatEvent::is_first_unread_message_id_Set() const{
    return m_first_unread_message_id_isSet;
}

bool OAIChatEvent::is_first_unread_message_id_Valid() const{
    return m_first_unread_message_id_isValid;
}

QDateTime OAIChatEvent::getLastReadAt() const {
    return m_last_read_at;
}
void OAIChatEvent::setLastReadAt(const QDateTime &last_read_at) {
    m_last_read_at = last_read_at;
    m_last_read_at_isSet = true;
}

bool OAIChatEvent::is_last_read_at_Set() const{
    return m_last_read_at_isSet;
}

bool OAIChatEvent::is_last_read_at_Valid() const{
    return m_last_read_at_isValid;
}

qint32 OAIChatEvent::getUnreadMessages() const {
    return m_unread_messages;
}
void OAIChatEvent::setUnreadMessages(const qint32 &unread_messages) {
    m_unread_messages = unread_messages;
    m_unread_messages_isSet = true;
}

bool OAIChatEvent::is_unread_messages_Set() const{
    return m_unread_messages_isSet;
}

bool OAIChatEvent::is_unread_messages_Valid() const{
    return m_unread_messages_isValid;
}

OAIReaction OAIChatEvent::getReaction() const {
    return m_reaction;
}
void OAIChatEvent::setReaction(const OAIReaction &reaction) {
    m_reaction = reaction;
    m_reaction_isSet = true;
}

bool OAIChatEvent::is_reaction_Set() const{
    return m_reaction_isSet;
}

bool OAIChatEvent::is_reaction_Valid() const{
    return m_reaction_isValid;
}

QString OAIChatEvent::getParentId() const {
    return m_parent_id;
}
void OAIChatEvent::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIChatEvent::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIChatEvent::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

OAIUserObject OAIChatEvent::getCreatedBy() const {
    return m_created_by;
}
void OAIChatEvent::setCreatedBy(const OAIUserObject &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIChatEvent::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIChatEvent::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIChatEvent::getExpiration() const {
    return m_expiration;
}
void OAIChatEvent::setExpiration(const QDateTime &expiration) {
    m_expiration = expiration;
    m_expiration_isSet = true;
}

bool OAIChatEvent::is_expiration_Set() const{
    return m_expiration_isSet;
}

bool OAIChatEvent::is_expiration_Valid() const{
    return m_expiration_isValid;
}

QString OAIChatEvent::getReason() const {
    return m_reason;
}
void OAIChatEvent::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIChatEvent::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIChatEvent::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIChatEvent::isShadow() const {
    return m_shadow;
}
void OAIChatEvent::setShadow(const bool &shadow) {
    m_shadow = shadow;
    m_shadow_isSet = true;
}

bool OAIChatEvent::is_shadow_Set() const{
    return m_shadow_isSet;
}

bool OAIChatEvent::is_shadow_Valid() const{
    return m_shadow_isValid;
}

bool OAIChatEvent::isDeleteConversationChannels() const {
    return m_delete_conversation_channels;
}
void OAIChatEvent::setDeleteConversationChannels(const bool &delete_conversation_channels) {
    m_delete_conversation_channels = delete_conversation_channels;
    m_delete_conversation_channels_isSet = true;
}

bool OAIChatEvent::is_delete_conversation_channels_Set() const{
    return m_delete_conversation_channels_isSet;
}

bool OAIChatEvent::is_delete_conversation_channels_Valid() const{
    return m_delete_conversation_channels_isValid;
}

bool OAIChatEvent::isMarkMessagesDeleted() const {
    return m_mark_messages_deleted;
}
void OAIChatEvent::setMarkMessagesDeleted(const bool &mark_messages_deleted) {
    m_mark_messages_deleted = mark_messages_deleted;
    m_mark_messages_deleted_isSet = true;
}

bool OAIChatEvent::is_mark_messages_deleted_Set() const{
    return m_mark_messages_deleted_isSet;
}

bool OAIChatEvent::is_mark_messages_deleted_Valid() const{
    return m_mark_messages_deleted_isValid;
}

QString OAIChatEvent::getTargetUser() const {
    return m_target_user;
}
void OAIChatEvent::setTargetUser(const QString &target_user) {
    m_target_user = target_user;
    m_target_user_isSet = true;
}

bool OAIChatEvent::is_target_user_Set() const{
    return m_target_user_isSet;
}

bool OAIChatEvent::is_target_user_Valid() const{
    return m_target_user_isValid;
}

QList<QString> OAIChatEvent::getTargetUsers() const {
    return m_target_users;
}
void OAIChatEvent::setTargetUsers(const QList<QString> &target_users) {
    m_target_users = target_users;
    m_target_users_isSet = true;
}

bool OAIChatEvent::is_target_users_Set() const{
    return m_target_users_isSet;
}

bool OAIChatEvent::is_target_users_Valid() const{
    return m_target_users_isValid;
}

QMap<QString, OAIChannelMessages> OAIChatEvent::getChannels() const {
    return m_channels;
}
void OAIChatEvent::setChannels(const QMap<QString, OAIChannelMessages> &channels) {
    m_channels = channels;
    m_channels_isSet = true;
}

bool OAIChatEvent::is_channels_Set() const{
    return m_channels_isSet;
}

bool OAIChatEvent::is_channels_Valid() const{
    return m_channels_isValid;
}

bool OAIChatEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clear_history_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_me.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hard_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thread_participants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_flag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_watcher_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_read_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_unread_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_unread_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_read_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_conversation_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_messages_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChatEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_type_isValid && m_channel_id_isValid && m_channel_type_isValid && m_cid_isValid && m_clear_history_isValid && m_message_isValid && m_me_isValid && m_hard_delete_isValid && m_watcher_count_isValid && m_total_unread_count_isValid && m_unread_channels_isValid && m_unread_count_isValid && m_first_unread_message_id_isValid && m_last_read_at_isValid && m_unread_messages_isValid && m_reaction_isValid && m_created_by_isValid && m_shadow_isValid && m_delete_conversation_channels_isValid && m_mark_messages_deleted_isValid && m_channels_isValid && true;
}

} // namespace OpenAPI
