/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryCampaignsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryCampaignsRequest::OAIQueryCampaignsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryCampaignsRequest::OAIQueryCampaignsRequest() {
    this->initializeModel();
}

OAIQueryCampaignsRequest::~OAIQueryCampaignsRequest() {}

void OAIQueryCampaignsRequest::initializeModel() {

    m_filter_conditions_isSet = false;
    m_filter_conditions_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;
}

void OAIQueryCampaignsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryCampaignsRequest::fromJsonObject(QJsonObject json) {

    m_filter_conditions_isValid = ::OpenAPI::fromJsonValue(m_filter_conditions, json[QString("filter_conditions")]);
    m_filter_conditions_isSet = !json[QString("filter_conditions")].isNull() && m_filter_conditions_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;
}

QString OAIQueryCampaignsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryCampaignsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_conditions.size() > 0) {
        obj.insert(QString("filter_conditions"), ::OpenAPI::toJsonValue(m_filter_conditions));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_sort.isSet()) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIQueryCampaignsRequest::getFilterConditions() const {
    return m_filter_conditions;
}
void OAIQueryCampaignsRequest::setFilterConditions(const QMap<QString, QJsonValue> &filter_conditions) {
    m_filter_conditions = filter_conditions;
    m_filter_conditions_isSet = true;
}

bool OAIQueryCampaignsRequest::is_filter_conditions_Set() const{
    return m_filter_conditions_isSet;
}

bool OAIQueryCampaignsRequest::is_filter_conditions_Valid() const{
    return m_filter_conditions_isValid;
}

qint32 OAIQueryCampaignsRequest::getLimit() const {
    return m_limit;
}
void OAIQueryCampaignsRequest::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIQueryCampaignsRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIQueryCampaignsRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

OAICampaignSort OAIQueryCampaignsRequest::getSort() const {
    return m_sort;
}
void OAIQueryCampaignsRequest::setSort(const OAICampaignSort &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIQueryCampaignsRequest::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIQueryCampaignsRequest::is_sort_Valid() const{
    return m_sort_isValid;
}

bool OAIQueryCampaignsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryCampaignsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_conditions_isValid && true;
}

} // namespace OpenAPI
