/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPIError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPIError::OAIAPIError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPIError::OAIAPIError() {
    this->initializeModel();
}

OAIAPIError::~OAIAPIError() {}

void OAIAPIError::initializeModel() {

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_exception_fields_isSet = false;
    m_exception_fields_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_more_info_isSet = false;
    m_more_info_isValid = false;
}

void OAIAPIError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPIError::fromJsonObject(QJsonObject json) {

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("StatusCode")]);
    m_status_code_isSet = !json[QString("StatusCode")].isNull() && m_status_code_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_exception_fields_isValid = ::OpenAPI::fromJsonValue(m_exception_fields, json[QString("exception_fields")]);
    m_exception_fields_isSet = !json[QString("exception_fields")].isNull() && m_exception_fields_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_more_info_isValid = ::OpenAPI::fromJsonValue(m_more_info, json[QString("more_info")]);
    m_more_info_isSet = !json[QString("more_info")].isNull() && m_more_info_isValid;
}

QString OAIAPIError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPIError::asJsonObject() const {
    QJsonObject obj;
    if (m_status_code_isSet) {
        obj.insert(QString("StatusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_exception_fields.size() > 0) {
        obj.insert(QString("exception_fields"), ::OpenAPI::toJsonValue(m_exception_fields));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_more_info_isSet) {
        obj.insert(QString("more_info"), ::OpenAPI::toJsonValue(m_more_info));
    }
    return obj;
}

qint32 OAIAPIError::getStatusCode() const {
    return m_status_code;
}
void OAIAPIError::setStatusCode(const qint32 &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIAPIError::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIAPIError::is_status_code_Valid() const{
    return m_status_code_isValid;
}

qint32 OAIAPIError::getCode() const {
    return m_code;
}
void OAIAPIError::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIAPIError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIAPIError::is_code_Valid() const{
    return m_code_isValid;
}

QList<qint32> OAIAPIError::getDetails() const {
    return m_details;
}
void OAIAPIError::setDetails(const QList<qint32> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIAPIError::is_details_Set() const{
    return m_details_isSet;
}

bool OAIAPIError::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIAPIError::getDuration() const {
    return m_duration;
}
void OAIAPIError::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIAPIError::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIAPIError::is_duration_Valid() const{
    return m_duration_isValid;
}

QMap<QString, QString> OAIAPIError::getExceptionFields() const {
    return m_exception_fields;
}
void OAIAPIError::setExceptionFields(const QMap<QString, QString> &exception_fields) {
    m_exception_fields = exception_fields;
    m_exception_fields_isSet = true;
}

bool OAIAPIError::is_exception_fields_Set() const{
    return m_exception_fields_isSet;
}

bool OAIAPIError::is_exception_fields_Valid() const{
    return m_exception_fields_isValid;
}

QString OAIAPIError::getMessage() const {
    return m_message;
}
void OAIAPIError::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIAPIError::is_message_Set() const{
    return m_message_isSet;
}

bool OAIAPIError::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIAPIError::getMoreInfo() const {
    return m_more_info;
}
void OAIAPIError::setMoreInfo(const QString &more_info) {
    m_more_info = more_info;
    m_more_info_isSet = true;
}

bool OAIAPIError::is_more_info_Set() const{
    return m_more_info_isSet;
}

bool OAIAPIError::is_more_info_Valid() const{
    return m_more_info_isValid;
}

bool OAIAPIError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exception_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_more_info_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPIError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_code_isValid && m_code_isValid && m_details_isValid && m_duration_isValid && m_message_isValid && m_more_info_isValid && true;
}

} // namespace OpenAPI
