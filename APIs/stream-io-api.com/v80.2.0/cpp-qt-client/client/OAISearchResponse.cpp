/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchResponse::OAISearchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchResponse::OAISearchResponse() {
    this->initializeModel();
}

OAISearchResponse::~OAISearchResponse() {}

void OAISearchResponse::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_next_isSet = false;
    m_next_isValid = false;

    m_previous_isSet = false;
    m_previous_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_results_warning_isSet = false;
    m_results_warning_isValid = false;
}

void OAISearchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchResponse::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_next_isValid = ::OpenAPI::fromJsonValue(m_next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_previous_isValid = ::OpenAPI::fromJsonValue(m_previous, json[QString("previous")]);
    m_previous_isSet = !json[QString("previous")].isNull() && m_previous_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_results_warning_isValid = ::OpenAPI::fromJsonValue(m_results_warning, json[QString("results_warning")]);
    m_results_warning_isSet = !json[QString("results_warning")].isNull() && m_results_warning_isValid;
}

QString OAISearchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_next_isSet) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(m_next));
    }
    if (m_previous_isSet) {
        obj.insert(QString("previous"), ::OpenAPI::toJsonValue(m_previous));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_results_warning.isSet()) {
        obj.insert(QString("results_warning"), ::OpenAPI::toJsonValue(m_results_warning));
    }
    return obj;
}

QString OAISearchResponse::getDuration() const {
    return m_duration;
}
void OAISearchResponse::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAISearchResponse::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAISearchResponse::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAISearchResponse::getNext() const {
    return m_next;
}
void OAISearchResponse::setNext(const QString &next) {
    m_next = next;
    m_next_isSet = true;
}

bool OAISearchResponse::is_next_Set() const{
    return m_next_isSet;
}

bool OAISearchResponse::is_next_Valid() const{
    return m_next_isValid;
}

QString OAISearchResponse::getPrevious() const {
    return m_previous;
}
void OAISearchResponse::setPrevious(const QString &previous) {
    m_previous = previous;
    m_previous_isSet = true;
}

bool OAISearchResponse::is_previous_Set() const{
    return m_previous_isSet;
}

bool OAISearchResponse::is_previous_Valid() const{
    return m_previous_isValid;
}

QList<OAISearchResult> OAISearchResponse::getResults() const {
    return m_results;
}
void OAISearchResponse::setResults(const QList<OAISearchResult> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAISearchResponse::is_results_Set() const{
    return m_results_isSet;
}

bool OAISearchResponse::is_results_Valid() const{
    return m_results_isValid;
}

OAISearchWarning OAISearchResponse::getResultsWarning() const {
    return m_results_warning;
}
void OAISearchResponse::setResultsWarning(const OAISearchWarning &results_warning) {
    m_results_warning = results_warning;
    m_results_warning_isSet = true;
}

bool OAISearchResponse::is_results_warning_Set() const{
    return m_results_warning_isSet;
}

bool OAISearchResponse::is_results_warning_Valid() const{
    return m_results_warning_isValid;
}

bool OAISearchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_results_warning.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_duration_isValid && m_results_isValid && true;
}

} // namespace OpenAPI
