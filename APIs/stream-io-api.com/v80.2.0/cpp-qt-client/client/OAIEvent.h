/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEvent.h
 *
 * Represents an BaseEvent that happened in Stream Chat
 */

#ifndef OAIEvent_H
#define OAIEvent_H

#include <QJsonObject>

#include "OAIChannelMember.h"
#include "OAIChannelResponse.h"
#include "OAIMessage.h"
#include "OAIModerationResponse.h"
#include "OAIOwnUser.h"
#include "OAIReaction.h"
#include "OAIUserObject.h"
#include <QDateTime>
#include <QJsonValue>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIModerationResponse;
class OAIChannelMember;

class OAIEvent : public OAIObject {
public:
    OAIEvent();
    OAIEvent(QString json);
    ~OAIEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAutomoderation() const;
    void setAutomoderation(const bool &automoderation);
    bool is_automoderation_Set() const;
    bool is_automoderation_Valid() const;

    OAIModerationResponse getAutomoderationScores() const;
    void setAutomoderationScores(const OAIModerationResponse &automoderation_scores);
    bool is_automoderation_scores_Set() const;
    bool is_automoderation_scores_Valid() const;

    OAIChannelResponse getChannel() const;
    void setChannel(const OAIChannelResponse &channel);
    bool is_channel_Set() const;
    bool is_channel_Valid() const;

    QString getChannelId() const;
    void setChannelId(const QString &channel_id);
    bool is_channel_id_Set() const;
    bool is_channel_id_Valid() const;

    QString getChannelType() const;
    void setChannelType(const QString &channel_type);
    bool is_channel_type_Set() const;
    bool is_channel_type_Valid() const;

    QString getCid() const;
    void setCid(const QString &cid);
    bool is_cid_Set() const;
    bool is_cid_Valid() const;

    QString getConnectionId() const;
    void setConnectionId(const QString &connection_id);
    bool is_connection_id_Set() const;
    bool is_connection_id_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    OAIUserObject getCreatedBy() const;
    void setCreatedBy(const OAIUserObject &created_by);
    bool is_created_by_Set() const;
    bool is_created_by_Valid() const;

    OAIOwnUser getMe() const;
    void setMe(const OAIOwnUser &me);
    bool is_me_Set() const;
    bool is_me_Valid() const;

    OAIChannelMember getMember() const;
    void setMember(const OAIChannelMember &member);
    bool is_member_Set() const;
    bool is_member_Valid() const;

    OAIMessage getMessage() const;
    void setMessage(const OAIMessage &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    QString getParentId() const;
    void setParentId(const QString &parent_id);
    bool is_parent_id_Set() const;
    bool is_parent_id_Valid() const;

    OAIReaction getReaction() const;
    void setReaction(const OAIReaction &reaction);
    bool is_reaction_Set() const;
    bool is_reaction_Valid() const;

    QString getReason() const;
    void setReason(const QString &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIUserObject getUser() const;
    void setUser(const OAIUserObject &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    qint32 getWatcherCount() const;
    void setWatcherCount(const qint32 &watcher_count);
    bool is_watcher_count_Set() const;
    bool is_watcher_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_automoderation;
    bool m_automoderation_isSet;
    bool m_automoderation_isValid;

    OAIModerationResponse m_automoderation_scores;
    bool m_automoderation_scores_isSet;
    bool m_automoderation_scores_isValid;

    OAIChannelResponse m_channel;
    bool m_channel_isSet;
    bool m_channel_isValid;

    QString m_channel_id;
    bool m_channel_id_isSet;
    bool m_channel_id_isValid;

    QString m_channel_type;
    bool m_channel_type_isSet;
    bool m_channel_type_isValid;

    QString m_cid;
    bool m_cid_isSet;
    bool m_cid_isValid;

    QString m_connection_id;
    bool m_connection_id_isSet;
    bool m_connection_id_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    OAIUserObject m_created_by;
    bool m_created_by_isSet;
    bool m_created_by_isValid;

    OAIOwnUser m_me;
    bool m_me_isSet;
    bool m_me_isValid;

    OAIChannelMember m_member;
    bool m_member_isSet;
    bool m_member_isValid;

    OAIMessage m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    QString m_parent_id;
    bool m_parent_id_isSet;
    bool m_parent_id_isValid;

    OAIReaction m_reaction;
    bool m_reaction_isSet;
    bool m_reaction_isValid;

    QString m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIUserObject m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    qint32 m_watcher_count;
    bool m_watcher_count_isSet;
    bool m_watcher_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEvent)

#endif // OAIEvent_H
