/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICallSettings.h
 *
 * 
 */

#ifndef OAICallSettings_H
#define OAICallSettings_H

#include <QJsonObject>

#include "OAIAudioSettings.h"
#include "OAIBackstageSettings.h"
#include "OAIBroadcastSettings.h"
#include "OAIGeofenceSettings.h"
#include "OAIRecordSettings.h"
#include "OAIRingSettings.h"
#include "OAIScreensharingSettings.h"
#include "OAITranscriptionSettings.h"
#include "OAIVideoSettings.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAudioSettings;
class OAIBackstageSettings;
class OAIBroadcastSettings;
class OAIGeofenceSettings;
class OAIRecordSettings;
class OAIRingSettings;
class OAIScreensharingSettings;
class OAITranscriptionSettings;
class OAIVideoSettings;

class OAICallSettings : public OAIObject {
public:
    OAICallSettings();
    OAICallSettings(QString json);
    ~OAICallSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAudioSettings getAudio() const;
    void setAudio(const OAIAudioSettings &audio);
    bool is_audio_Set() const;
    bool is_audio_Valid() const;

    OAIBackstageSettings getBackstage() const;
    void setBackstage(const OAIBackstageSettings &backstage);
    bool is_backstage_Set() const;
    bool is_backstage_Valid() const;

    OAIBroadcastSettings getBroadcasting() const;
    void setBroadcasting(const OAIBroadcastSettings &broadcasting);
    bool is_broadcasting_Set() const;
    bool is_broadcasting_Valid() const;

    OAIGeofenceSettings getGeofencing() const;
    void setGeofencing(const OAIGeofenceSettings &geofencing);
    bool is_geofencing_Set() const;
    bool is_geofencing_Valid() const;

    OAIRecordSettings getRecording() const;
    void setRecording(const OAIRecordSettings &recording);
    bool is_recording_Set() const;
    bool is_recording_Valid() const;

    OAIRingSettings getRing() const;
    void setRing(const OAIRingSettings &ring);
    bool is_ring_Set() const;
    bool is_ring_Valid() const;

    OAIScreensharingSettings getScreensharing() const;
    void setScreensharing(const OAIScreensharingSettings &screensharing);
    bool is_screensharing_Set() const;
    bool is_screensharing_Valid() const;

    OAITranscriptionSettings getTranscription() const;
    void setTranscription(const OAITranscriptionSettings &transcription);
    bool is_transcription_Set() const;
    bool is_transcription_Valid() const;

    OAIVideoSettings getVideo() const;
    void setVideo(const OAIVideoSettings &video);
    bool is_video_Set() const;
    bool is_video_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAudioSettings m_audio;
    bool m_audio_isSet;
    bool m_audio_isValid;

    OAIBackstageSettings m_backstage;
    bool m_backstage_isSet;
    bool m_backstage_isValid;

    OAIBroadcastSettings m_broadcasting;
    bool m_broadcasting_isSet;
    bool m_broadcasting_isValid;

    OAIGeofenceSettings m_geofencing;
    bool m_geofencing_isSet;
    bool m_geofencing_isValid;

    OAIRecordSettings m_recording;
    bool m_recording_isSet;
    bool m_recording_isValid;

    OAIRingSettings m_ring;
    bool m_ring_isSet;
    bool m_ring_isValid;

    OAIScreensharingSettings m_screensharing;
    bool m_screensharing_isSet;
    bool m_screensharing_isValid;

    OAITranscriptionSettings m_transcription;
    bool m_transcription_isSet;
    bool m_transcription_isValid;

    OAIVideoSettings m_video;
    bool m_video_isSet;
    bool m_video_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICallSettings)

#endif // OAICallSettings_H
