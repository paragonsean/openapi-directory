/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateChannelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateChannelRequest::OAIUpdateChannelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateChannelRequest::OAIUpdateChannelRequest() {
    this->initializeModel();
}

OAIUpdateChannelRequest::~OAIUpdateChannelRequest() {}

void OAIUpdateChannelRequest::initializeModel() {

    m_accept_invite_isSet = false;
    m_accept_invite_isValid = false;

    m_add_members_isSet = false;
    m_add_members_isValid = false;

    m_add_moderators_isSet = false;
    m_add_moderators_isValid = false;

    m_assign_roles_isSet = false;
    m_assign_roles_isValid = false;

    m_cooldown_isSet = false;
    m_cooldown_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_demote_moderators_isSet = false;
    m_demote_moderators_isValid = false;

    m_hide_history_isSet = false;
    m_hide_history_isValid = false;

    m_invites_isSet = false;
    m_invites_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_reject_invite_isSet = false;
    m_reject_invite_isValid = false;

    m_remove_members_isSet = false;
    m_remove_members_isValid = false;

    m_skip_push_isSet = false;
    m_skip_push_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIUpdateChannelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateChannelRequest::fromJsonObject(QJsonObject json) {

    m_accept_invite_isValid = ::OpenAPI::fromJsonValue(m_accept_invite, json[QString("accept_invite")]);
    m_accept_invite_isSet = !json[QString("accept_invite")].isNull() && m_accept_invite_isValid;

    m_add_members_isValid = ::OpenAPI::fromJsonValue(m_add_members, json[QString("add_members")]);
    m_add_members_isSet = !json[QString("add_members")].isNull() && m_add_members_isValid;

    m_add_moderators_isValid = ::OpenAPI::fromJsonValue(m_add_moderators, json[QString("add_moderators")]);
    m_add_moderators_isSet = !json[QString("add_moderators")].isNull() && m_add_moderators_isValid;

    m_assign_roles_isValid = ::OpenAPI::fromJsonValue(m_assign_roles, json[QString("assign_roles")]);
    m_assign_roles_isSet = !json[QString("assign_roles")].isNull() && m_assign_roles_isValid;

    m_cooldown_isValid = ::OpenAPI::fromJsonValue(m_cooldown, json[QString("cooldown")]);
    m_cooldown_isSet = !json[QString("cooldown")].isNull() && m_cooldown_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_demote_moderators_isValid = ::OpenAPI::fromJsonValue(m_demote_moderators, json[QString("demote_moderators")]);
    m_demote_moderators_isSet = !json[QString("demote_moderators")].isNull() && m_demote_moderators_isValid;

    m_hide_history_isValid = ::OpenAPI::fromJsonValue(m_hide_history, json[QString("hide_history")]);
    m_hide_history_isSet = !json[QString("hide_history")].isNull() && m_hide_history_isValid;

    m_invites_isValid = ::OpenAPI::fromJsonValue(m_invites, json[QString("invites")]);
    m_invites_isSet = !json[QString("invites")].isNull() && m_invites_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_reject_invite_isValid = ::OpenAPI::fromJsonValue(m_reject_invite, json[QString("reject_invite")]);
    m_reject_invite_isSet = !json[QString("reject_invite")].isNull() && m_reject_invite_isValid;

    m_remove_members_isValid = ::OpenAPI::fromJsonValue(m_remove_members, json[QString("remove_members")]);
    m_remove_members_isSet = !json[QString("remove_members")].isNull() && m_remove_members_isValid;

    m_skip_push_isValid = ::OpenAPI::fromJsonValue(m_skip_push, json[QString("skip_push")]);
    m_skip_push_isSet = !json[QString("skip_push")].isNull() && m_skip_push_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIUpdateChannelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateChannelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_invite_isSet) {
        obj.insert(QString("accept_invite"), ::OpenAPI::toJsonValue(m_accept_invite));
    }
    if (m_add_members.size() > 0) {
        obj.insert(QString("add_members"), ::OpenAPI::toJsonValue(m_add_members));
    }
    if (m_add_moderators.size() > 0) {
        obj.insert(QString("add_moderators"), ::OpenAPI::toJsonValue(m_add_moderators));
    }
    if (m_assign_roles.size() > 0) {
        obj.insert(QString("assign_roles"), ::OpenAPI::toJsonValue(m_assign_roles));
    }
    if (m_cooldown_isSet) {
        obj.insert(QString("cooldown"), ::OpenAPI::toJsonValue(m_cooldown));
    }
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_demote_moderators.size() > 0) {
        obj.insert(QString("demote_moderators"), ::OpenAPI::toJsonValue(m_demote_moderators));
    }
    if (m_hide_history_isSet) {
        obj.insert(QString("hide_history"), ::OpenAPI::toJsonValue(m_hide_history));
    }
    if (m_invites.size() > 0) {
        obj.insert(QString("invites"), ::OpenAPI::toJsonValue(m_invites));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_reject_invite_isSet) {
        obj.insert(QString("reject_invite"), ::OpenAPI::toJsonValue(m_reject_invite));
    }
    if (m_remove_members.size() > 0) {
        obj.insert(QString("remove_members"), ::OpenAPI::toJsonValue(m_remove_members));
    }
    if (m_skip_push_isSet) {
        obj.insert(QString("skip_push"), ::OpenAPI::toJsonValue(m_skip_push));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

bool OAIUpdateChannelRequest::isAcceptInvite() const {
    return m_accept_invite;
}
void OAIUpdateChannelRequest::setAcceptInvite(const bool &accept_invite) {
    m_accept_invite = accept_invite;
    m_accept_invite_isSet = true;
}

bool OAIUpdateChannelRequest::is_accept_invite_Set() const{
    return m_accept_invite_isSet;
}

bool OAIUpdateChannelRequest::is_accept_invite_Valid() const{
    return m_accept_invite_isValid;
}

QList<OAIChannelMemberRequest> OAIUpdateChannelRequest::getAddMembers() const {
    return m_add_members;
}
void OAIUpdateChannelRequest::setAddMembers(const QList<OAIChannelMemberRequest> &add_members) {
    m_add_members = add_members;
    m_add_members_isSet = true;
}

bool OAIUpdateChannelRequest::is_add_members_Set() const{
    return m_add_members_isSet;
}

bool OAIUpdateChannelRequest::is_add_members_Valid() const{
    return m_add_members_isValid;
}

QList<QString> OAIUpdateChannelRequest::getAddModerators() const {
    return m_add_moderators;
}
void OAIUpdateChannelRequest::setAddModerators(const QList<QString> &add_moderators) {
    m_add_moderators = add_moderators;
    m_add_moderators_isSet = true;
}

bool OAIUpdateChannelRequest::is_add_moderators_Set() const{
    return m_add_moderators_isSet;
}

bool OAIUpdateChannelRequest::is_add_moderators_Valid() const{
    return m_add_moderators_isValid;
}

QList<OAIChannelMemberRequest> OAIUpdateChannelRequest::getAssignRoles() const {
    return m_assign_roles;
}
void OAIUpdateChannelRequest::setAssignRoles(const QList<OAIChannelMemberRequest> &assign_roles) {
    m_assign_roles = assign_roles;
    m_assign_roles_isSet = true;
}

bool OAIUpdateChannelRequest::is_assign_roles_Set() const{
    return m_assign_roles_isSet;
}

bool OAIUpdateChannelRequest::is_assign_roles_Valid() const{
    return m_assign_roles_isValid;
}

qint32 OAIUpdateChannelRequest::getCooldown() const {
    return m_cooldown;
}
void OAIUpdateChannelRequest::setCooldown(const qint32 &cooldown) {
    m_cooldown = cooldown;
    m_cooldown_isSet = true;
}

bool OAIUpdateChannelRequest::is_cooldown_Set() const{
    return m_cooldown_isSet;
}

bool OAIUpdateChannelRequest::is_cooldown_Valid() const{
    return m_cooldown_isValid;
}

OAIChannelRequest OAIUpdateChannelRequest::getData() const {
    return m_data;
}
void OAIUpdateChannelRequest::setData(const OAIChannelRequest &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIUpdateChannelRequest::is_data_Set() const{
    return m_data_isSet;
}

bool OAIUpdateChannelRequest::is_data_Valid() const{
    return m_data_isValid;
}

QList<QString> OAIUpdateChannelRequest::getDemoteModerators() const {
    return m_demote_moderators;
}
void OAIUpdateChannelRequest::setDemoteModerators(const QList<QString> &demote_moderators) {
    m_demote_moderators = demote_moderators;
    m_demote_moderators_isSet = true;
}

bool OAIUpdateChannelRequest::is_demote_moderators_Set() const{
    return m_demote_moderators_isSet;
}

bool OAIUpdateChannelRequest::is_demote_moderators_Valid() const{
    return m_demote_moderators_isValid;
}

bool OAIUpdateChannelRequest::isHideHistory() const {
    return m_hide_history;
}
void OAIUpdateChannelRequest::setHideHistory(const bool &hide_history) {
    m_hide_history = hide_history;
    m_hide_history_isSet = true;
}

bool OAIUpdateChannelRequest::is_hide_history_Set() const{
    return m_hide_history_isSet;
}

bool OAIUpdateChannelRequest::is_hide_history_Valid() const{
    return m_hide_history_isValid;
}

QList<OAIChannelMemberRequest> OAIUpdateChannelRequest::getInvites() const {
    return m_invites;
}
void OAIUpdateChannelRequest::setInvites(const QList<OAIChannelMemberRequest> &invites) {
    m_invites = invites;
    m_invites_isSet = true;
}

bool OAIUpdateChannelRequest::is_invites_Set() const{
    return m_invites_isSet;
}

bool OAIUpdateChannelRequest::is_invites_Valid() const{
    return m_invites_isValid;
}

OAIMessageRequest OAIUpdateChannelRequest::getMessage() const {
    return m_message;
}
void OAIUpdateChannelRequest::setMessage(const OAIMessageRequest &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIUpdateChannelRequest::is_message_Set() const{
    return m_message_isSet;
}

bool OAIUpdateChannelRequest::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIUpdateChannelRequest::isRejectInvite() const {
    return m_reject_invite;
}
void OAIUpdateChannelRequest::setRejectInvite(const bool &reject_invite) {
    m_reject_invite = reject_invite;
    m_reject_invite_isSet = true;
}

bool OAIUpdateChannelRequest::is_reject_invite_Set() const{
    return m_reject_invite_isSet;
}

bool OAIUpdateChannelRequest::is_reject_invite_Valid() const{
    return m_reject_invite_isValid;
}

QList<QString> OAIUpdateChannelRequest::getRemoveMembers() const {
    return m_remove_members;
}
void OAIUpdateChannelRequest::setRemoveMembers(const QList<QString> &remove_members) {
    m_remove_members = remove_members;
    m_remove_members_isSet = true;
}

bool OAIUpdateChannelRequest::is_remove_members_Set() const{
    return m_remove_members_isSet;
}

bool OAIUpdateChannelRequest::is_remove_members_Valid() const{
    return m_remove_members_isValid;
}

bool OAIUpdateChannelRequest::isSkipPush() const {
    return m_skip_push;
}
void OAIUpdateChannelRequest::setSkipPush(const bool &skip_push) {
    m_skip_push = skip_push;
    m_skip_push_isSet = true;
}

bool OAIUpdateChannelRequest::is_skip_push_Set() const{
    return m_skip_push_isSet;
}

bool OAIUpdateChannelRequest::is_skip_push_Valid() const{
    return m_skip_push_isValid;
}

OAIUserObjectRequest OAIUpdateChannelRequest::getUser() const {
    return m_user;
}
void OAIUpdateChannelRequest::setUser(const OAIUserObjectRequest &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIUpdateChannelRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAIUpdateChannelRequest::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIUpdateChannelRequest::getUserId() const {
    return m_user_id;
}
void OAIUpdateChannelRequest::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUpdateChannelRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUpdateChannelRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIUpdateChannelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_invite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_moderators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_assign_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cooldown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_demote_moderators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_history_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invites.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reject_invite_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remove_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_push_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateChannelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_add_moderators_isValid && m_demote_moderators_isValid && m_remove_members_isValid && true;
}

} // namespace OpenAPI
