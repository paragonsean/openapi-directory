/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBanRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBanRequest::OAIBanRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBanRequest::OAIBanRequest() {
    this->initializeModel();
}

OAIBanRequest::~OAIBanRequest() {}

void OAIBanRequest::initializeModel() {

    m_banned_by_isSet = false;
    m_banned_by_isValid = false;

    m_banned_by_id_isSet = false;
    m_banned_by_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_ban_isSet = false;
    m_ip_ban_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_shadow_isSet = false;
    m_shadow_isValid = false;

    m_target_user_id_isSet = false;
    m_target_user_id_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIBanRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBanRequest::fromJsonObject(QJsonObject json) {

    m_banned_by_isValid = ::OpenAPI::fromJsonValue(m_banned_by, json[QString("banned_by")]);
    m_banned_by_isSet = !json[QString("banned_by")].isNull() && m_banned_by_isValid;

    m_banned_by_id_isValid = ::OpenAPI::fromJsonValue(m_banned_by_id, json[QString("banned_by_id")]);
    m_banned_by_id_isSet = !json[QString("banned_by_id")].isNull() && m_banned_by_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_ban_isValid = ::OpenAPI::fromJsonValue(m_ip_ban, json[QString("ip_ban")]);
    m_ip_ban_isSet = !json[QString("ip_ban")].isNull() && m_ip_ban_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_shadow_isValid = ::OpenAPI::fromJsonValue(m_shadow, json[QString("shadow")]);
    m_shadow_isSet = !json[QString("shadow")].isNull() && m_shadow_isValid;

    m_target_user_id_isValid = ::OpenAPI::fromJsonValue(m_target_user_id, json[QString("target_user_id")]);
    m_target_user_id_isSet = !json[QString("target_user_id")].isNull() && m_target_user_id_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIBanRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBanRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_banned_by.isSet()) {
        obj.insert(QString("banned_by"), ::OpenAPI::toJsonValue(m_banned_by));
    }
    if (m_banned_by_id_isSet) {
        obj.insert(QString("banned_by_id"), ::OpenAPI::toJsonValue(m_banned_by_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_ban_isSet) {
        obj.insert(QString("ip_ban"), ::OpenAPI::toJsonValue(m_ip_ban));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_shadow_isSet) {
        obj.insert(QString("shadow"), ::OpenAPI::toJsonValue(m_shadow));
    }
    if (m_target_user_id_isSet) {
        obj.insert(QString("target_user_id"), ::OpenAPI::toJsonValue(m_target_user_id));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

OAIUserObjectRequest OAIBanRequest::getBannedBy() const {
    return m_banned_by;
}
void OAIBanRequest::setBannedBy(const OAIUserObjectRequest &banned_by) {
    m_banned_by = banned_by;
    m_banned_by_isSet = true;
}

bool OAIBanRequest::is_banned_by_Set() const{
    return m_banned_by_isSet;
}

bool OAIBanRequest::is_banned_by_Valid() const{
    return m_banned_by_isValid;
}

QString OAIBanRequest::getBannedById() const {
    return m_banned_by_id;
}
void OAIBanRequest::setBannedById(const QString &banned_by_id) {
    m_banned_by_id = banned_by_id;
    m_banned_by_id_isSet = true;
}

bool OAIBanRequest::is_banned_by_id_Set() const{
    return m_banned_by_id_isSet;
}

bool OAIBanRequest::is_banned_by_id_Valid() const{
    return m_banned_by_id_isValid;
}

QString OAIBanRequest::getId() const {
    return m_id;
}
void OAIBanRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBanRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBanRequest::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIBanRequest::isIpBan() const {
    return m_ip_ban;
}
void OAIBanRequest::setIpBan(const bool &ip_ban) {
    m_ip_ban = ip_ban;
    m_ip_ban_isSet = true;
}

bool OAIBanRequest::is_ip_ban_Set() const{
    return m_ip_ban_isSet;
}

bool OAIBanRequest::is_ip_ban_Valid() const{
    return m_ip_ban_isValid;
}

QString OAIBanRequest::getReason() const {
    return m_reason;
}
void OAIBanRequest::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIBanRequest::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIBanRequest::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIBanRequest::isShadow() const {
    return m_shadow;
}
void OAIBanRequest::setShadow(const bool &shadow) {
    m_shadow = shadow;
    m_shadow_isSet = true;
}

bool OAIBanRequest::is_shadow_Set() const{
    return m_shadow_isSet;
}

bool OAIBanRequest::is_shadow_Valid() const{
    return m_shadow_isValid;
}

QString OAIBanRequest::getTargetUserId() const {
    return m_target_user_id;
}
void OAIBanRequest::setTargetUserId(const QString &target_user_id) {
    m_target_user_id = target_user_id;
    m_target_user_id_isSet = true;
}

bool OAIBanRequest::is_target_user_id_Set() const{
    return m_target_user_id_isSet;
}

bool OAIBanRequest::is_target_user_id_Valid() const{
    return m_target_user_id_isValid;
}

qint32 OAIBanRequest::getTimeout() const {
    return m_timeout;
}
void OAIBanRequest::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIBanRequest::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIBanRequest::is_timeout_Valid() const{
    return m_timeout_isValid;
}

QString OAIBanRequest::getType() const {
    return m_type;
}
void OAIBanRequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBanRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBanRequest::is_type_Valid() const{
    return m_type_isValid;
}

OAIUserObjectRequest OAIBanRequest::getUser() const {
    return m_user;
}
void OAIBanRequest::setUser(const OAIUserObjectRequest &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIBanRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAIBanRequest::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIBanRequest::getUserId() const {
    return m_user_id;
}
void OAIBanRequest::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIBanRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIBanRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIBanRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_banned_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_banned_by_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_ban_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shadow_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBanRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_user_id_isValid && true;
}

} // namespace OpenAPI
