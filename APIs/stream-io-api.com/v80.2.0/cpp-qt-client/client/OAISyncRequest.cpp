/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISyncRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISyncRequest::OAISyncRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISyncRequest::OAISyncRequest() {
    this->initializeModel();
}

OAISyncRequest::~OAISyncRequest() {}

void OAISyncRequest::initializeModel() {

    m_channel_cids_isSet = false;
    m_channel_cids_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_connection_id_isSet = false;
    m_connection_id_isValid = false;

    m_last_sync_at_isSet = false;
    m_last_sync_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_watch_isSet = false;
    m_watch_isValid = false;

    m_with_inaccessible_cids_isSet = false;
    m_with_inaccessible_cids_isValid = false;
}

void OAISyncRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISyncRequest::fromJsonObject(QJsonObject json) {

    m_channel_cids_isValid = ::OpenAPI::fromJsonValue(m_channel_cids, json[QString("channel_cids")]);
    m_channel_cids_isSet = !json[QString("channel_cids")].isNull() && m_channel_cids_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_connection_id_isValid = ::OpenAPI::fromJsonValue(m_connection_id, json[QString("connection_id")]);
    m_connection_id_isSet = !json[QString("connection_id")].isNull() && m_connection_id_isValid;

    m_last_sync_at_isValid = ::OpenAPI::fromJsonValue(m_last_sync_at, json[QString("last_sync_at")]);
    m_last_sync_at_isSet = !json[QString("last_sync_at")].isNull() && m_last_sync_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_watch_isValid = ::OpenAPI::fromJsonValue(m_watch, json[QString("watch")]);
    m_watch_isSet = !json[QString("watch")].isNull() && m_watch_isValid;

    m_with_inaccessible_cids_isValid = ::OpenAPI::fromJsonValue(m_with_inaccessible_cids, json[QString("with_inaccessible_cids")]);
    m_with_inaccessible_cids_isSet = !json[QString("with_inaccessible_cids")].isNull() && m_with_inaccessible_cids_isValid;
}

QString OAISyncRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISyncRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_cids.size() > 0) {
        obj.insert(QString("channel_cids"), ::OpenAPI::toJsonValue(m_channel_cids));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_connection_id_isSet) {
        obj.insert(QString("connection_id"), ::OpenAPI::toJsonValue(m_connection_id));
    }
    if (m_last_sync_at_isSet) {
        obj.insert(QString("last_sync_at"), ::OpenAPI::toJsonValue(m_last_sync_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_watch_isSet) {
        obj.insert(QString("watch"), ::OpenAPI::toJsonValue(m_watch));
    }
    if (m_with_inaccessible_cids_isSet) {
        obj.insert(QString("with_inaccessible_cids"), ::OpenAPI::toJsonValue(m_with_inaccessible_cids));
    }
    return obj;
}

QList<QString> OAISyncRequest::getChannelCids() const {
    return m_channel_cids;
}
void OAISyncRequest::setChannelCids(const QList<QString> &channel_cids) {
    m_channel_cids = channel_cids;
    m_channel_cids_isSet = true;
}

bool OAISyncRequest::is_channel_cids_Set() const{
    return m_channel_cids_isSet;
}

bool OAISyncRequest::is_channel_cids_Valid() const{
    return m_channel_cids_isValid;
}

QString OAISyncRequest::getClientId() const {
    return m_client_id;
}
void OAISyncRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAISyncRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAISyncRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAISyncRequest::getConnectionId() const {
    return m_connection_id;
}
void OAISyncRequest::setConnectionId(const QString &connection_id) {
    m_connection_id = connection_id;
    m_connection_id_isSet = true;
}

bool OAISyncRequest::is_connection_id_Set() const{
    return m_connection_id_isSet;
}

bool OAISyncRequest::is_connection_id_Valid() const{
    return m_connection_id_isValid;
}

QDateTime OAISyncRequest::getLastSyncAt() const {
    return m_last_sync_at;
}
void OAISyncRequest::setLastSyncAt(const QDateTime &last_sync_at) {
    m_last_sync_at = last_sync_at;
    m_last_sync_at_isSet = true;
}

bool OAISyncRequest::is_last_sync_at_Set() const{
    return m_last_sync_at_isSet;
}

bool OAISyncRequest::is_last_sync_at_Valid() const{
    return m_last_sync_at_isValid;
}

OAIUserObjectRequest OAISyncRequest::getUser() const {
    return m_user;
}
void OAISyncRequest::setUser(const OAIUserObjectRequest &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAISyncRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAISyncRequest::is_user_Valid() const{
    return m_user_isValid;
}

QString OAISyncRequest::getUserId() const {
    return m_user_id;
}
void OAISyncRequest::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAISyncRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAISyncRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAISyncRequest::isWatch() const {
    return m_watch;
}
void OAISyncRequest::setWatch(const bool &watch) {
    m_watch = watch;
    m_watch_isSet = true;
}

bool OAISyncRequest::is_watch_Set() const{
    return m_watch_isSet;
}

bool OAISyncRequest::is_watch_Valid() const{
    return m_watch_isValid;
}

bool OAISyncRequest::isWithInaccessibleCids() const {
    return m_with_inaccessible_cids;
}
void OAISyncRequest::setWithInaccessibleCids(const bool &with_inaccessible_cids) {
    m_with_inaccessible_cids = with_inaccessible_cids;
    m_with_inaccessible_cids_isSet = true;
}

bool OAISyncRequest::is_with_inaccessible_cids_Set() const{
    return m_with_inaccessible_cids_isSet;
}

bool OAISyncRequest::is_with_inaccessible_cids_Valid() const{
    return m_with_inaccessible_cids_isValid;
}

bool OAISyncRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_cids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sync_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_with_inaccessible_cids_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISyncRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_last_sync_at_isValid && true;
}

} // namespace OpenAPI
