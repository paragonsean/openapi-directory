/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendMessageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendMessageRequest::OAISendMessageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendMessageRequest::OAISendMessageRequest() {
    this->initializeModel();
}

OAISendMessageRequest::~OAISendMessageRequest() {}

void OAISendMessageRequest::initializeModel() {

    m_force_moderation_isSet = false;
    m_force_moderation_isValid = false;

    m_is_pending_message_isSet = false;
    m_is_pending_message_isValid = false;

    m_keep_channel_hidden_isSet = false;
    m_keep_channel_hidden_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_pending_message_metadata_isSet = false;
    m_pending_message_metadata_isValid = false;

    m_skip_enrich_url_isSet = false;
    m_skip_enrich_url_isValid = false;

    m_skip_push_isSet = false;
    m_skip_push_isValid = false;
}

void OAISendMessageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendMessageRequest::fromJsonObject(QJsonObject json) {

    m_force_moderation_isValid = ::OpenAPI::fromJsonValue(m_force_moderation, json[QString("force_moderation")]);
    m_force_moderation_isSet = !json[QString("force_moderation")].isNull() && m_force_moderation_isValid;

    m_is_pending_message_isValid = ::OpenAPI::fromJsonValue(m_is_pending_message, json[QString("is_pending_message")]);
    m_is_pending_message_isSet = !json[QString("is_pending_message")].isNull() && m_is_pending_message_isValid;

    m_keep_channel_hidden_isValid = ::OpenAPI::fromJsonValue(m_keep_channel_hidden, json[QString("keep_channel_hidden")]);
    m_keep_channel_hidden_isSet = !json[QString("keep_channel_hidden")].isNull() && m_keep_channel_hidden_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_pending_message_metadata_isValid = ::OpenAPI::fromJsonValue(m_pending_message_metadata, json[QString("pending_message_metadata")]);
    m_pending_message_metadata_isSet = !json[QString("pending_message_metadata")].isNull() && m_pending_message_metadata_isValid;

    m_skip_enrich_url_isValid = ::OpenAPI::fromJsonValue(m_skip_enrich_url, json[QString("skip_enrich_url")]);
    m_skip_enrich_url_isSet = !json[QString("skip_enrich_url")].isNull() && m_skip_enrich_url_isValid;

    m_skip_push_isValid = ::OpenAPI::fromJsonValue(m_skip_push, json[QString("skip_push")]);
    m_skip_push_isSet = !json[QString("skip_push")].isNull() && m_skip_push_isValid;
}

QString OAISendMessageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendMessageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_force_moderation_isSet) {
        obj.insert(QString("force_moderation"), ::OpenAPI::toJsonValue(m_force_moderation));
    }
    if (m_is_pending_message_isSet) {
        obj.insert(QString("is_pending_message"), ::OpenAPI::toJsonValue(m_is_pending_message));
    }
    if (m_keep_channel_hidden_isSet) {
        obj.insert(QString("keep_channel_hidden"), ::OpenAPI::toJsonValue(m_keep_channel_hidden));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_pending_message_metadata.size() > 0) {
        obj.insert(QString("pending_message_metadata"), ::OpenAPI::toJsonValue(m_pending_message_metadata));
    }
    if (m_skip_enrich_url_isSet) {
        obj.insert(QString("skip_enrich_url"), ::OpenAPI::toJsonValue(m_skip_enrich_url));
    }
    if (m_skip_push_isSet) {
        obj.insert(QString("skip_push"), ::OpenAPI::toJsonValue(m_skip_push));
    }
    return obj;
}

bool OAISendMessageRequest::isForceModeration() const {
    return m_force_moderation;
}
void OAISendMessageRequest::setForceModeration(const bool &force_moderation) {
    m_force_moderation = force_moderation;
    m_force_moderation_isSet = true;
}

bool OAISendMessageRequest::is_force_moderation_Set() const{
    return m_force_moderation_isSet;
}

bool OAISendMessageRequest::is_force_moderation_Valid() const{
    return m_force_moderation_isValid;
}

bool OAISendMessageRequest::isIsPendingMessage() const {
    return m_is_pending_message;
}
void OAISendMessageRequest::setIsPendingMessage(const bool &is_pending_message) {
    m_is_pending_message = is_pending_message;
    m_is_pending_message_isSet = true;
}

bool OAISendMessageRequest::is_is_pending_message_Set() const{
    return m_is_pending_message_isSet;
}

bool OAISendMessageRequest::is_is_pending_message_Valid() const{
    return m_is_pending_message_isValid;
}

bool OAISendMessageRequest::isKeepChannelHidden() const {
    return m_keep_channel_hidden;
}
void OAISendMessageRequest::setKeepChannelHidden(const bool &keep_channel_hidden) {
    m_keep_channel_hidden = keep_channel_hidden;
    m_keep_channel_hidden_isSet = true;
}

bool OAISendMessageRequest::is_keep_channel_hidden_Set() const{
    return m_keep_channel_hidden_isSet;
}

bool OAISendMessageRequest::is_keep_channel_hidden_Valid() const{
    return m_keep_channel_hidden_isValid;
}

OAIMessageRequest OAISendMessageRequest::getMessage() const {
    return m_message;
}
void OAISendMessageRequest::setMessage(const OAIMessageRequest &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAISendMessageRequest::is_message_Set() const{
    return m_message_isSet;
}

bool OAISendMessageRequest::is_message_Valid() const{
    return m_message_isValid;
}

QMap<QString, QString> OAISendMessageRequest::getPendingMessageMetadata() const {
    return m_pending_message_metadata;
}
void OAISendMessageRequest::setPendingMessageMetadata(const QMap<QString, QString> &pending_message_metadata) {
    m_pending_message_metadata = pending_message_metadata;
    m_pending_message_metadata_isSet = true;
}

bool OAISendMessageRequest::is_pending_message_metadata_Set() const{
    return m_pending_message_metadata_isSet;
}

bool OAISendMessageRequest::is_pending_message_metadata_Valid() const{
    return m_pending_message_metadata_isValid;
}

bool OAISendMessageRequest::isSkipEnrichUrl() const {
    return m_skip_enrich_url;
}
void OAISendMessageRequest::setSkipEnrichUrl(const bool &skip_enrich_url) {
    m_skip_enrich_url = skip_enrich_url;
    m_skip_enrich_url_isSet = true;
}

bool OAISendMessageRequest::is_skip_enrich_url_Set() const{
    return m_skip_enrich_url_isSet;
}

bool OAISendMessageRequest::is_skip_enrich_url_Valid() const{
    return m_skip_enrich_url_isValid;
}

bool OAISendMessageRequest::isSkipPush() const {
    return m_skip_push;
}
void OAISendMessageRequest::setSkipPush(const bool &skip_push) {
    m_skip_push = skip_push;
    m_skip_push_isSet = true;
}

bool OAISendMessageRequest::is_skip_push_Set() const{
    return m_skip_push_isSet;
}

bool OAISendMessageRequest::is_skip_push_Valid() const{
    return m_skip_push_isValid;
}

bool OAISendMessageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_force_moderation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_pending_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_channel_hidden_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_message_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_enrich_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_push_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendMessageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && true;
}

} // namespace OpenAPI
