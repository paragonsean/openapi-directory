/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUserObjectRequest.h
 *
 * Represents chat user
 */

#ifndef OAIUserObjectRequest_H
#define OAIUserObjectRequest_H

#include <QJsonObject>

#include "OAIPushNotificationSettingsRequest.h"
#include <QDateTime>
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPushNotificationSettingsRequest;

class OAIUserObjectRequest : public OAIObject {
public:
    OAIUserObjectRequest();
    OAIUserObjectRequest(QString json);
    ~OAIUserObjectRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getBanExpires() const;
    void setBanExpires(const QDateTime &ban_expires);
    bool is_ban_expires_Set() const;
    bool is_ban_expires_Valid() const;

    bool isBanned() const;
    void setBanned(const bool &banned);
    bool is_banned_Set() const;
    bool is_banned_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isInvisible() const;
    void setInvisible(const bool &invisible);
    bool is_invisible_Set() const;
    bool is_invisible_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    OAIPushNotificationSettingsRequest getPushNotifications() const;
    void setPushNotifications(const OAIPushNotificationSettingsRequest &push_notifications);
    bool is_push_notifications_Set() const;
    bool is_push_notifications_Valid() const;

    QDateTime getRevokeTokensIssuedBefore() const;
    void setRevokeTokensIssuedBefore(const QDateTime &revoke_tokens_issued_before);
    bool is_revoke_tokens_issued_before_Set() const;
    bool is_revoke_tokens_issued_before_Valid() const;

    QString getRole() const;
    void setRole(const QString &role);
    bool is_role_Set() const;
    bool is_role_Valid() const;

    QList<QString> getTeams() const;
    void setTeams(const QList<QString> &teams);
    bool is_teams_Set() const;
    bool is_teams_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_ban_expires;
    bool m_ban_expires_isSet;
    bool m_ban_expires_isValid;

    bool m_banned;
    bool m_banned_isSet;
    bool m_banned_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_invisible;
    bool m_invisible_isSet;
    bool m_invisible_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    OAIPushNotificationSettingsRequest m_push_notifications;
    bool m_push_notifications_isSet;
    bool m_push_notifications_isValid;

    QDateTime m_revoke_tokens_issued_before;
    bool m_revoke_tokens_issued_before_isSet;
    bool m_revoke_tokens_issued_before_isValid;

    QString m_role;
    bool m_role_isSet;
    bool m_role_isValid;

    QList<QString> m_teams;
    bool m_teams_isSet;
    bool m_teams_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUserObjectRequest)

#endif // OAIUserObjectRequest_H
