/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvent::OAIEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvent::OAIEvent() {
    this->initializeModel();
}

OAIEvent::~OAIEvent() {}

void OAIEvent::initializeModel() {

    m_automoderation_isSet = false;
    m_automoderation_isValid = false;

    m_automoderation_scores_isSet = false;
    m_automoderation_scores_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_channel_id_isSet = false;
    m_channel_id_isValid = false;

    m_channel_type_isSet = false;
    m_channel_type_isValid = false;

    m_cid_isSet = false;
    m_cid_isValid = false;

    m_connection_id_isSet = false;
    m_connection_id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_me_isSet = false;
    m_me_isValid = false;

    m_member_isSet = false;
    m_member_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_reaction_isSet = false;
    m_reaction_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_watcher_count_isSet = false;
    m_watcher_count_isValid = false;
}

void OAIEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvent::fromJsonObject(QJsonObject json) {

    m_automoderation_isValid = ::OpenAPI::fromJsonValue(m_automoderation, json[QString("automoderation")]);
    m_automoderation_isSet = !json[QString("automoderation")].isNull() && m_automoderation_isValid;

    m_automoderation_scores_isValid = ::OpenAPI::fromJsonValue(m_automoderation_scores, json[QString("automoderation_scores")]);
    m_automoderation_scores_isSet = !json[QString("automoderation_scores")].isNull() && m_automoderation_scores_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_channel_id_isValid = ::OpenAPI::fromJsonValue(m_channel_id, json[QString("channel_id")]);
    m_channel_id_isSet = !json[QString("channel_id")].isNull() && m_channel_id_isValid;

    m_channel_type_isValid = ::OpenAPI::fromJsonValue(m_channel_type, json[QString("channel_type")]);
    m_channel_type_isSet = !json[QString("channel_type")].isNull() && m_channel_type_isValid;

    m_cid_isValid = ::OpenAPI::fromJsonValue(m_cid, json[QString("cid")]);
    m_cid_isSet = !json[QString("cid")].isNull() && m_cid_isValid;

    m_connection_id_isValid = ::OpenAPI::fromJsonValue(m_connection_id, json[QString("connection_id")]);
    m_connection_id_isSet = !json[QString("connection_id")].isNull() && m_connection_id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_me_isValid = ::OpenAPI::fromJsonValue(m_me, json[QString("me")]);
    m_me_isSet = !json[QString("me")].isNull() && m_me_isValid;

    m_member_isValid = ::OpenAPI::fromJsonValue(m_member, json[QString("member")]);
    m_member_isSet = !json[QString("member")].isNull() && m_member_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parent_id")]);
    m_parent_id_isSet = !json[QString("parent_id")].isNull() && m_parent_id_isValid;

    m_reaction_isValid = ::OpenAPI::fromJsonValue(m_reaction, json[QString("reaction")]);
    m_reaction_isSet = !json[QString("reaction")].isNull() && m_reaction_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_watcher_count_isValid = ::OpenAPI::fromJsonValue(m_watcher_count, json[QString("watcher_count")]);
    m_watcher_count_isSet = !json[QString("watcher_count")].isNull() && m_watcher_count_isValid;
}

QString OAIEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_automoderation_isSet) {
        obj.insert(QString("automoderation"), ::OpenAPI::toJsonValue(m_automoderation));
    }
    if (m_automoderation_scores.isSet()) {
        obj.insert(QString("automoderation_scores"), ::OpenAPI::toJsonValue(m_automoderation_scores));
    }
    if (m_channel.isSet()) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_channel_id_isSet) {
        obj.insert(QString("channel_id"), ::OpenAPI::toJsonValue(m_channel_id));
    }
    if (m_channel_type_isSet) {
        obj.insert(QString("channel_type"), ::OpenAPI::toJsonValue(m_channel_type));
    }
    if (m_cid_isSet) {
        obj.insert(QString("cid"), ::OpenAPI::toJsonValue(m_cid));
    }
    if (m_connection_id_isSet) {
        obj.insert(QString("connection_id"), ::OpenAPI::toJsonValue(m_connection_id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_me.isSet()) {
        obj.insert(QString("me"), ::OpenAPI::toJsonValue(m_me));
    }
    if (m_member.isSet()) {
        obj.insert(QString("member"), ::OpenAPI::toJsonValue(m_member));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parent_id"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_reaction.isSet()) {
        obj.insert(QString("reaction"), ::OpenAPI::toJsonValue(m_reaction));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_watcher_count_isSet) {
        obj.insert(QString("watcher_count"), ::OpenAPI::toJsonValue(m_watcher_count));
    }
    return obj;
}

bool OAIEvent::isAutomoderation() const {
    return m_automoderation;
}
void OAIEvent::setAutomoderation(const bool &automoderation) {
    m_automoderation = automoderation;
    m_automoderation_isSet = true;
}

bool OAIEvent::is_automoderation_Set() const{
    return m_automoderation_isSet;
}

bool OAIEvent::is_automoderation_Valid() const{
    return m_automoderation_isValid;
}

OAIModerationResponse OAIEvent::getAutomoderationScores() const {
    return m_automoderation_scores;
}
void OAIEvent::setAutomoderationScores(const OAIModerationResponse &automoderation_scores) {
    m_automoderation_scores = automoderation_scores;
    m_automoderation_scores_isSet = true;
}

bool OAIEvent::is_automoderation_scores_Set() const{
    return m_automoderation_scores_isSet;
}

bool OAIEvent::is_automoderation_scores_Valid() const{
    return m_automoderation_scores_isValid;
}

OAIChannelResponse OAIEvent::getChannel() const {
    return m_channel;
}
void OAIEvent::setChannel(const OAIChannelResponse &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIEvent::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIEvent::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIEvent::getChannelId() const {
    return m_channel_id;
}
void OAIEvent::setChannelId(const QString &channel_id) {
    m_channel_id = channel_id;
    m_channel_id_isSet = true;
}

bool OAIEvent::is_channel_id_Set() const{
    return m_channel_id_isSet;
}

bool OAIEvent::is_channel_id_Valid() const{
    return m_channel_id_isValid;
}

QString OAIEvent::getChannelType() const {
    return m_channel_type;
}
void OAIEvent::setChannelType(const QString &channel_type) {
    m_channel_type = channel_type;
    m_channel_type_isSet = true;
}

bool OAIEvent::is_channel_type_Set() const{
    return m_channel_type_isSet;
}

bool OAIEvent::is_channel_type_Valid() const{
    return m_channel_type_isValid;
}

QString OAIEvent::getCid() const {
    return m_cid;
}
void OAIEvent::setCid(const QString &cid) {
    m_cid = cid;
    m_cid_isSet = true;
}

bool OAIEvent::is_cid_Set() const{
    return m_cid_isSet;
}

bool OAIEvent::is_cid_Valid() const{
    return m_cid_isValid;
}

QString OAIEvent::getConnectionId() const {
    return m_connection_id;
}
void OAIEvent::setConnectionId(const QString &connection_id) {
    m_connection_id = connection_id;
    m_connection_id_isSet = true;
}

bool OAIEvent::is_connection_id_Set() const{
    return m_connection_id_isSet;
}

bool OAIEvent::is_connection_id_Valid() const{
    return m_connection_id_isValid;
}

QDateTime OAIEvent::getCreatedAt() const {
    return m_created_at;
}
void OAIEvent::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIEvent::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIEvent::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIUserObject OAIEvent::getCreatedBy() const {
    return m_created_by;
}
void OAIEvent::setCreatedBy(const OAIUserObject &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIEvent::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIEvent::is_created_by_Valid() const{
    return m_created_by_isValid;
}

OAIOwnUser OAIEvent::getMe() const {
    return m_me;
}
void OAIEvent::setMe(const OAIOwnUser &me) {
    m_me = me;
    m_me_isSet = true;
}

bool OAIEvent::is_me_Set() const{
    return m_me_isSet;
}

bool OAIEvent::is_me_Valid() const{
    return m_me_isValid;
}

OAIChannelMember OAIEvent::getMember() const {
    return m_member;
}
void OAIEvent::setMember(const OAIChannelMember &member) {
    m_member = member;
    m_member_isSet = true;
}

bool OAIEvent::is_member_Set() const{
    return m_member_isSet;
}

bool OAIEvent::is_member_Valid() const{
    return m_member_isValid;
}

OAIMessage OAIEvent::getMessage() const {
    return m_message;
}
void OAIEvent::setMessage(const OAIMessage &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIEvent::is_message_Set() const{
    return m_message_isSet;
}

bool OAIEvent::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIEvent::getParentId() const {
    return m_parent_id;
}
void OAIEvent::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIEvent::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIEvent::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

OAIReaction OAIEvent::getReaction() const {
    return m_reaction;
}
void OAIEvent::setReaction(const OAIReaction &reaction) {
    m_reaction = reaction;
    m_reaction_isSet = true;
}

bool OAIEvent::is_reaction_Set() const{
    return m_reaction_isSet;
}

bool OAIEvent::is_reaction_Valid() const{
    return m_reaction_isValid;
}

QString OAIEvent::getReason() const {
    return m_reason;
}
void OAIEvent::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIEvent::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIEvent::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIEvent::getTeam() const {
    return m_team;
}
void OAIEvent::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIEvent::is_team_Set() const{
    return m_team_isSet;
}

bool OAIEvent::is_team_Valid() const{
    return m_team_isValid;
}

QString OAIEvent::getType() const {
    return m_type;
}
void OAIEvent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAIEvent::is_type_Valid() const{
    return m_type_isValid;
}

OAIUserObject OAIEvent::getUser() const {
    return m_user;
}
void OAIEvent::setUser(const OAIUserObject &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIEvent::is_user_Set() const{
    return m_user_isSet;
}

bool OAIEvent::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIEvent::getUserId() const {
    return m_user_id;
}
void OAIEvent::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIEvent::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIEvent::is_user_id_Valid() const{
    return m_user_id_isValid;
}

qint32 OAIEvent::getWatcherCount() const {
    return m_watcher_count;
}
void OAIEvent::setWatcherCount(const qint32 &watcher_count) {
    m_watcher_count = watcher_count;
    m_watcher_count_isSet = true;
}

bool OAIEvent::is_watcher_count_Set() const{
    return m_watcher_count_isSet;
}

bool OAIEvent::is_watcher_count_Valid() const{
    return m_watcher_count_isValid;
}

bool OAIEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automoderation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_automoderation_scores.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_me.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_member.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watcher_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
