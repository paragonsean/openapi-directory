/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRead.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRead::OAIRead(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRead::OAIRead() {
    this->initializeModel();
}

OAIRead::~OAIRead() {}

void OAIRead::initializeModel() {

    m_last_read_isSet = false;
    m_last_read_isValid = false;

    m_last_read_message_id_isSet = false;
    m_last_read_message_id_isValid = false;

    m_unread_messages_isSet = false;
    m_unread_messages_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIRead::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRead::fromJsonObject(QJsonObject json) {

    m_last_read_isValid = ::OpenAPI::fromJsonValue(m_last_read, json[QString("last_read")]);
    m_last_read_isSet = !json[QString("last_read")].isNull() && m_last_read_isValid;

    m_last_read_message_id_isValid = ::OpenAPI::fromJsonValue(m_last_read_message_id, json[QString("last_read_message_id")]);
    m_last_read_message_id_isSet = !json[QString("last_read_message_id")].isNull() && m_last_read_message_id_isValid;

    m_unread_messages_isValid = ::OpenAPI::fromJsonValue(m_unread_messages, json[QString("unread_messages")]);
    m_unread_messages_isSet = !json[QString("unread_messages")].isNull() && m_unread_messages_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIRead::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRead::asJsonObject() const {
    QJsonObject obj;
    if (m_last_read_isSet) {
        obj.insert(QString("last_read"), ::OpenAPI::toJsonValue(m_last_read));
    }
    if (m_last_read_message_id_isSet) {
        obj.insert(QString("last_read_message_id"), ::OpenAPI::toJsonValue(m_last_read_message_id));
    }
    if (m_unread_messages_isSet) {
        obj.insert(QString("unread_messages"), ::OpenAPI::toJsonValue(m_unread_messages));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QDateTime OAIRead::getLastRead() const {
    return m_last_read;
}
void OAIRead::setLastRead(const QDateTime &last_read) {
    m_last_read = last_read;
    m_last_read_isSet = true;
}

bool OAIRead::is_last_read_Set() const{
    return m_last_read_isSet;
}

bool OAIRead::is_last_read_Valid() const{
    return m_last_read_isValid;
}

QString OAIRead::getLastReadMessageId() const {
    return m_last_read_message_id;
}
void OAIRead::setLastReadMessageId(const QString &last_read_message_id) {
    m_last_read_message_id = last_read_message_id;
    m_last_read_message_id_isSet = true;
}

bool OAIRead::is_last_read_message_id_Set() const{
    return m_last_read_message_id_isSet;
}

bool OAIRead::is_last_read_message_id_Valid() const{
    return m_last_read_message_id_isValid;
}

qint32 OAIRead::getUnreadMessages() const {
    return m_unread_messages;
}
void OAIRead::setUnreadMessages(const qint32 &unread_messages) {
    m_unread_messages = unread_messages;
    m_unread_messages_isSet = true;
}

bool OAIRead::is_unread_messages_Set() const{
    return m_unread_messages_isSet;
}

bool OAIRead::is_unread_messages_Valid() const{
    return m_unread_messages_isValid;
}

OAIUserObject OAIRead::getUser() const {
    return m_user;
}
void OAIRead::setUser(const OAIUserObject &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIRead::is_user_Set() const{
    return m_user_isSet;
}

bool OAIRead::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIRead::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_read_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRead::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_last_read_isValid && m_last_read_message_id_isValid && m_unread_messages_isValid && true;
}

} // namespace OpenAPI
