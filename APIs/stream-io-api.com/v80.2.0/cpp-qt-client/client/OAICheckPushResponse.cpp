/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckPushResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckPushResponse::OAICheckPushResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckPushResponse::OAICheckPushResponse() {
    this->initializeModel();
}

OAICheckPushResponse::~OAICheckPushResponse() {}

void OAICheckPushResponse::initializeModel() {

    m_device_errors_isSet = false;
    m_device_errors_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_general_errors_isSet = false;
    m_general_errors_isValid = false;

    m_rendered_apn_template_isSet = false;
    m_rendered_apn_template_isValid = false;

    m_rendered_firebase_template_isSet = false;
    m_rendered_firebase_template_isValid = false;

    m_rendered_message_isSet = false;
    m_rendered_message_isValid = false;

    m_skip_devices_isSet = false;
    m_skip_devices_isValid = false;
}

void OAICheckPushResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckPushResponse::fromJsonObject(QJsonObject json) {

    m_device_errors_isValid = ::OpenAPI::fromJsonValue(m_device_errors, json[QString("device_errors")]);
    m_device_errors_isSet = !json[QString("device_errors")].isNull() && m_device_errors_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_general_errors_isValid = ::OpenAPI::fromJsonValue(m_general_errors, json[QString("general_errors")]);
    m_general_errors_isSet = !json[QString("general_errors")].isNull() && m_general_errors_isValid;

    m_rendered_apn_template_isValid = ::OpenAPI::fromJsonValue(m_rendered_apn_template, json[QString("rendered_apn_template")]);
    m_rendered_apn_template_isSet = !json[QString("rendered_apn_template")].isNull() && m_rendered_apn_template_isValid;

    m_rendered_firebase_template_isValid = ::OpenAPI::fromJsonValue(m_rendered_firebase_template, json[QString("rendered_firebase_template")]);
    m_rendered_firebase_template_isSet = !json[QString("rendered_firebase_template")].isNull() && m_rendered_firebase_template_isValid;

    m_rendered_message_isValid = ::OpenAPI::fromJsonValue(m_rendered_message, json[QString("rendered_message")]);
    m_rendered_message_isSet = !json[QString("rendered_message")].isNull() && m_rendered_message_isValid;

    m_skip_devices_isValid = ::OpenAPI::fromJsonValue(m_skip_devices, json[QString("skip_devices")]);
    m_skip_devices_isSet = !json[QString("skip_devices")].isNull() && m_skip_devices_isValid;
}

QString OAICheckPushResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckPushResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_device_errors.size() > 0) {
        obj.insert(QString("device_errors"), ::OpenAPI::toJsonValue(m_device_errors));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_general_errors.size() > 0) {
        obj.insert(QString("general_errors"), ::OpenAPI::toJsonValue(m_general_errors));
    }
    if (m_rendered_apn_template_isSet) {
        obj.insert(QString("rendered_apn_template"), ::OpenAPI::toJsonValue(m_rendered_apn_template));
    }
    if (m_rendered_firebase_template_isSet) {
        obj.insert(QString("rendered_firebase_template"), ::OpenAPI::toJsonValue(m_rendered_firebase_template));
    }
    if (m_rendered_message.size() > 0) {
        obj.insert(QString("rendered_message"), ::OpenAPI::toJsonValue(m_rendered_message));
    }
    if (m_skip_devices_isSet) {
        obj.insert(QString("skip_devices"), ::OpenAPI::toJsonValue(m_skip_devices));
    }
    return obj;
}

QMap<QString, OAIDeviceErrorInfo> OAICheckPushResponse::getDeviceErrors() const {
    return m_device_errors;
}
void OAICheckPushResponse::setDeviceErrors(const QMap<QString, OAIDeviceErrorInfo> &device_errors) {
    m_device_errors = device_errors;
    m_device_errors_isSet = true;
}

bool OAICheckPushResponse::is_device_errors_Set() const{
    return m_device_errors_isSet;
}

bool OAICheckPushResponse::is_device_errors_Valid() const{
    return m_device_errors_isValid;
}

QString OAICheckPushResponse::getDuration() const {
    return m_duration;
}
void OAICheckPushResponse::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAICheckPushResponse::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAICheckPushResponse::is_duration_Valid() const{
    return m_duration_isValid;
}

QList<QString> OAICheckPushResponse::getGeneralErrors() const {
    return m_general_errors;
}
void OAICheckPushResponse::setGeneralErrors(const QList<QString> &general_errors) {
    m_general_errors = general_errors;
    m_general_errors_isSet = true;
}

bool OAICheckPushResponse::is_general_errors_Set() const{
    return m_general_errors_isSet;
}

bool OAICheckPushResponse::is_general_errors_Valid() const{
    return m_general_errors_isValid;
}

QString OAICheckPushResponse::getRenderedApnTemplate() const {
    return m_rendered_apn_template;
}
void OAICheckPushResponse::setRenderedApnTemplate(const QString &rendered_apn_template) {
    m_rendered_apn_template = rendered_apn_template;
    m_rendered_apn_template_isSet = true;
}

bool OAICheckPushResponse::is_rendered_apn_template_Set() const{
    return m_rendered_apn_template_isSet;
}

bool OAICheckPushResponse::is_rendered_apn_template_Valid() const{
    return m_rendered_apn_template_isValid;
}

QString OAICheckPushResponse::getRenderedFirebaseTemplate() const {
    return m_rendered_firebase_template;
}
void OAICheckPushResponse::setRenderedFirebaseTemplate(const QString &rendered_firebase_template) {
    m_rendered_firebase_template = rendered_firebase_template;
    m_rendered_firebase_template_isSet = true;
}

bool OAICheckPushResponse::is_rendered_firebase_template_Set() const{
    return m_rendered_firebase_template_isSet;
}

bool OAICheckPushResponse::is_rendered_firebase_template_Valid() const{
    return m_rendered_firebase_template_isValid;
}

QMap<QString, QString> OAICheckPushResponse::getRenderedMessage() const {
    return m_rendered_message;
}
void OAICheckPushResponse::setRenderedMessage(const QMap<QString, QString> &rendered_message) {
    m_rendered_message = rendered_message;
    m_rendered_message_isSet = true;
}

bool OAICheckPushResponse::is_rendered_message_Set() const{
    return m_rendered_message_isSet;
}

bool OAICheckPushResponse::is_rendered_message_Valid() const{
    return m_rendered_message_isValid;
}

bool OAICheckPushResponse::isSkipDevices() const {
    return m_skip_devices;
}
void OAICheckPushResponse::setSkipDevices(const bool &skip_devices) {
    m_skip_devices = skip_devices;
    m_skip_devices_isSet = true;
}

bool OAICheckPushResponse::is_skip_devices_Set() const{
    return m_skip_devices_isSet;
}

bool OAICheckPushResponse::is_skip_devices_Valid() const{
    return m_skip_devices_isValid;
}

bool OAICheckPushResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_general_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rendered_apn_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rendered_firebase_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rendered_message.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_devices_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckPushResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_duration_isValid && true;
}

} // namespace OpenAPI
