/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelRequest::OAIChannelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelRequest::OAIChannelRequest() {
    this->initializeModel();
}

OAIChannelRequest::~OAIChannelRequest() {}

void OAIChannelRequest::initializeModel() {

    m_auto_translation_enabled_isSet = false;
    m_auto_translation_enabled_isValid = false;

    m_auto_translation_language_isSet = false;
    m_auto_translation_language_isValid = false;

    m_config_overrides_isSet = false;
    m_config_overrides_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_frozen_isSet = false;
    m_frozen_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_own_capabilities_isSet = false;
    m_own_capabilities_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_truncated_at_isSet = false;
    m_truncated_at_isValid = false;

    m_truncated_by_isSet = false;
    m_truncated_by_isValid = false;

    m_truncated_by_id_isSet = false;
    m_truncated_by_id_isValid = false;
}

void OAIChannelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelRequest::fromJsonObject(QJsonObject json) {

    m_auto_translation_enabled_isValid = ::OpenAPI::fromJsonValue(m_auto_translation_enabled, json[QString("auto_translation_enabled")]);
    m_auto_translation_enabled_isSet = !json[QString("auto_translation_enabled")].isNull() && m_auto_translation_enabled_isValid;

    m_auto_translation_language_isValid = ::OpenAPI::fromJsonValue(m_auto_translation_language, json[QString("auto_translation_language")]);
    m_auto_translation_language_isSet = !json[QString("auto_translation_language")].isNull() && m_auto_translation_language_isValid;

    m_config_overrides_isValid = ::OpenAPI::fromJsonValue(m_config_overrides, json[QString("config_overrides")]);
    m_config_overrides_isSet = !json[QString("config_overrides")].isNull() && m_config_overrides_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_frozen_isValid = ::OpenAPI::fromJsonValue(m_frozen, json[QString("frozen")]);
    m_frozen_isSet = !json[QString("frozen")].isNull() && m_frozen_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_own_capabilities_isValid = ::OpenAPI::fromJsonValue(m_own_capabilities, json[QString("own_capabilities")]);
    m_own_capabilities_isSet = !json[QString("own_capabilities")].isNull() && m_own_capabilities_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_truncated_at_isValid = ::OpenAPI::fromJsonValue(m_truncated_at, json[QString("truncated_at")]);
    m_truncated_at_isSet = !json[QString("truncated_at")].isNull() && m_truncated_at_isValid;

    m_truncated_by_isValid = ::OpenAPI::fromJsonValue(m_truncated_by, json[QString("truncated_by")]);
    m_truncated_by_isSet = !json[QString("truncated_by")].isNull() && m_truncated_by_isValid;

    m_truncated_by_id_isValid = ::OpenAPI::fromJsonValue(m_truncated_by_id, json[QString("truncated_by_id")]);
    m_truncated_by_id_isSet = !json[QString("truncated_by_id")].isNull() && m_truncated_by_id_isValid;
}

QString OAIChannelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_translation_enabled_isSet) {
        obj.insert(QString("auto_translation_enabled"), ::OpenAPI::toJsonValue(m_auto_translation_enabled));
    }
    if (m_auto_translation_language_isSet) {
        obj.insert(QString("auto_translation_language"), ::OpenAPI::toJsonValue(m_auto_translation_language));
    }
    if (m_config_overrides.isSet()) {
        obj.insert(QString("config_overrides"), ::OpenAPI::toJsonValue(m_config_overrides));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_frozen_isSet) {
        obj.insert(QString("frozen"), ::OpenAPI::toJsonValue(m_frozen));
    }
    if (m_members.size() > 0) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_own_capabilities.size() > 0) {
        obj.insert(QString("own_capabilities"), ::OpenAPI::toJsonValue(m_own_capabilities));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_truncated_at.size() > 0) {
        obj.insert(QString("truncated_at"), ::OpenAPI::toJsonValue(m_truncated_at));
    }
    if (m_truncated_by.size() > 0) {
        obj.insert(QString("truncated_by"), ::OpenAPI::toJsonValue(m_truncated_by));
    }
    if (m_truncated_by_id_isSet) {
        obj.insert(QString("truncated_by_id"), ::OpenAPI::toJsonValue(m_truncated_by_id));
    }
    return obj;
}

bool OAIChannelRequest::isAutoTranslationEnabled() const {
    return m_auto_translation_enabled;
}
void OAIChannelRequest::setAutoTranslationEnabled(const bool &auto_translation_enabled) {
    m_auto_translation_enabled = auto_translation_enabled;
    m_auto_translation_enabled_isSet = true;
}

bool OAIChannelRequest::is_auto_translation_enabled_Set() const{
    return m_auto_translation_enabled_isSet;
}

bool OAIChannelRequest::is_auto_translation_enabled_Valid() const{
    return m_auto_translation_enabled_isValid;
}

QString OAIChannelRequest::getAutoTranslationLanguage() const {
    return m_auto_translation_language;
}
void OAIChannelRequest::setAutoTranslationLanguage(const QString &auto_translation_language) {
    m_auto_translation_language = auto_translation_language;
    m_auto_translation_language_isSet = true;
}

bool OAIChannelRequest::is_auto_translation_language_Set() const{
    return m_auto_translation_language_isSet;
}

bool OAIChannelRequest::is_auto_translation_language_Valid() const{
    return m_auto_translation_language_isValid;
}

OAIChannelConfigRequest OAIChannelRequest::getConfigOverrides() const {
    return m_config_overrides;
}
void OAIChannelRequest::setConfigOverrides(const OAIChannelConfigRequest &config_overrides) {
    m_config_overrides = config_overrides;
    m_config_overrides_isSet = true;
}

bool OAIChannelRequest::is_config_overrides_Set() const{
    return m_config_overrides_isSet;
}

bool OAIChannelRequest::is_config_overrides_Valid() const{
    return m_config_overrides_isValid;
}

OAIUserObjectRequest OAIChannelRequest::getCreatedBy() const {
    return m_created_by;
}
void OAIChannelRequest::setCreatedBy(const OAIUserObjectRequest &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIChannelRequest::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIChannelRequest::is_created_by_Valid() const{
    return m_created_by_isValid;
}

bool OAIChannelRequest::isDisabled() const {
    return m_disabled;
}
void OAIChannelRequest::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIChannelRequest::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIChannelRequest::is_disabled_Valid() const{
    return m_disabled_isValid;
}

bool OAIChannelRequest::isFrozen() const {
    return m_frozen;
}
void OAIChannelRequest::setFrozen(const bool &frozen) {
    m_frozen = frozen;
    m_frozen_isSet = true;
}

bool OAIChannelRequest::is_frozen_Set() const{
    return m_frozen_isSet;
}

bool OAIChannelRequest::is_frozen_Valid() const{
    return m_frozen_isValid;
}

QList<OAIChannelMemberRequest> OAIChannelRequest::getMembers() const {
    return m_members;
}
void OAIChannelRequest::setMembers(const QList<OAIChannelMemberRequest> &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIChannelRequest::is_members_Set() const{
    return m_members_isSet;
}

bool OAIChannelRequest::is_members_Valid() const{
    return m_members_isValid;
}

QList<qint32> OAIChannelRequest::getOwnCapabilities() const {
    return m_own_capabilities;
}
void OAIChannelRequest::setOwnCapabilities(const QList<qint32> &own_capabilities) {
    m_own_capabilities = own_capabilities;
    m_own_capabilities_isSet = true;
}

bool OAIChannelRequest::is_own_capabilities_Set() const{
    return m_own_capabilities_isSet;
}

bool OAIChannelRequest::is_own_capabilities_Valid() const{
    return m_own_capabilities_isValid;
}

QString OAIChannelRequest::getTeam() const {
    return m_team;
}
void OAIChannelRequest::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIChannelRequest::is_team_Set() const{
    return m_team_isSet;
}

bool OAIChannelRequest::is_team_Valid() const{
    return m_team_isValid;
}

QList<qint32> OAIChannelRequest::getTruncatedAt() const {
    return m_truncated_at;
}
void OAIChannelRequest::setTruncatedAt(const QList<qint32> &truncated_at) {
    m_truncated_at = truncated_at;
    m_truncated_at_isSet = true;
}

bool OAIChannelRequest::is_truncated_at_Set() const{
    return m_truncated_at_isSet;
}

bool OAIChannelRequest::is_truncated_at_Valid() const{
    return m_truncated_at_isValid;
}

QList<qint32> OAIChannelRequest::getTruncatedBy() const {
    return m_truncated_by;
}
void OAIChannelRequest::setTruncatedBy(const QList<qint32> &truncated_by) {
    m_truncated_by = truncated_by;
    m_truncated_by_isSet = true;
}

bool OAIChannelRequest::is_truncated_by_Set() const{
    return m_truncated_by_isSet;
}

bool OAIChannelRequest::is_truncated_by_Valid() const{
    return m_truncated_by_isValid;
}

QString OAIChannelRequest::getTruncatedById() const {
    return m_truncated_by_id;
}
void OAIChannelRequest::setTruncatedById(const QString &truncated_by_id) {
    m_truncated_by_id = truncated_by_id;
    m_truncated_by_id_isSet = true;
}

bool OAIChannelRequest::is_truncated_by_id_Set() const{
    return m_truncated_by_id_isSet;
}

bool OAIChannelRequest::is_truncated_by_id_Valid() const{
    return m_truncated_by_id_isValid;
}

bool OAIChannelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_translation_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_translation_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frozen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_own_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truncated_at.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_truncated_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_truncated_by_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
