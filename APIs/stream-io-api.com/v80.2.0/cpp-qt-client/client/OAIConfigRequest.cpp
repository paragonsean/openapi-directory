/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigRequest::OAIConfigRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigRequest::OAIConfigRequest() {
    this->initializeModel();
}

OAIConfigRequest::~OAIConfigRequest() {}

void OAIConfigRequest::initializeModel() {

    m_app_certificate_isSet = false;
    m_app_certificate_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_default_role_isSet = false;
    m_default_role_isValid = false;

    m_role_map_isSet = false;
    m_role_map_isValid = false;
}

void OAIConfigRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigRequest::fromJsonObject(QJsonObject json) {

    m_app_certificate_isValid = ::OpenAPI::fromJsonValue(m_app_certificate, json[QString("app_certificate")]);
    m_app_certificate_isSet = !json[QString("app_certificate")].isNull() && m_app_certificate_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("app_id")]);
    m_app_id_isSet = !json[QString("app_id")].isNull() && m_app_id_isValid;

    m_default_role_isValid = ::OpenAPI::fromJsonValue(m_default_role, json[QString("default_role")]);
    m_default_role_isSet = !json[QString("default_role")].isNull() && m_default_role_isValid;

    m_role_map_isValid = ::OpenAPI::fromJsonValue(m_role_map, json[QString("role_map")]);
    m_role_map_isSet = !json[QString("role_map")].isNull() && m_role_map_isValid;
}

QString OAIConfigRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_certificate_isSet) {
        obj.insert(QString("app_certificate"), ::OpenAPI::toJsonValue(m_app_certificate));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("app_id"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_default_role_isSet) {
        obj.insert(QString("default_role"), ::OpenAPI::toJsonValue(m_default_role));
    }
    if (m_role_map.size() > 0) {
        obj.insert(QString("role_map"), ::OpenAPI::toJsonValue(m_role_map));
    }
    return obj;
}

QString OAIConfigRequest::getAppCertificate() const {
    return m_app_certificate;
}
void OAIConfigRequest::setAppCertificate(const QString &app_certificate) {
    m_app_certificate = app_certificate;
    m_app_certificate_isSet = true;
}

bool OAIConfigRequest::is_app_certificate_Set() const{
    return m_app_certificate_isSet;
}

bool OAIConfigRequest::is_app_certificate_Valid() const{
    return m_app_certificate_isValid;
}

QString OAIConfigRequest::getAppId() const {
    return m_app_id;
}
void OAIConfigRequest::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIConfigRequest::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIConfigRequest::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIConfigRequest::getDefaultRole() const {
    return m_default_role;
}
void OAIConfigRequest::setDefaultRole(const QString &default_role) {
    m_default_role = default_role;
    m_default_role_isSet = true;
}

bool OAIConfigRequest::is_default_role_Set() const{
    return m_default_role_isSet;
}

bool OAIConfigRequest::is_default_role_Valid() const{
    return m_default_role_isValid;
}

QMap<QString, QString> OAIConfigRequest::getRoleMap() const {
    return m_role_map;
}
void OAIConfigRequest::setRoleMap(const QMap<QString, QString> &role_map) {
    m_role_map = role_map;
    m_role_map_isSet = true;
}

bool OAIConfigRequest::is_role_map_Set() const{
    return m_role_map_isSet;
}

bool OAIConfigRequest::is_role_map_Valid() const{
    return m_role_map_isValid;
}

bool OAIConfigRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_certificate_isValid && m_app_id_isValid && true;
}

} // namespace OpenAPI
