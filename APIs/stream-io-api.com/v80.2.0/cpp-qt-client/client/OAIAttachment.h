/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAttachment.h
 *
 * 
 */

#ifndef OAIAttachment_H
#define OAIAttachment_H

#include <QJsonObject>

#include "OAIAction.h"
#include "OAIField.h"
#include "OAIImages.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAction;
class OAIField;
class OAIImages;

class OAIAttachment : public OAIObject {
public:
    OAIAttachment();
    OAIAttachment(QString json);
    ~OAIAttachment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAction> getActions() const;
    void setActions(const QList<OAIAction> &actions);
    bool is_actions_Set() const;
    bool is_actions_Valid() const;

    QString getAssetUrl() const;
    void setAssetUrl(const QString &asset_url);
    bool is_asset_url_Set() const;
    bool is_asset_url_Valid() const;

    QString getAuthorIcon() const;
    void setAuthorIcon(const QString &author_icon);
    bool is_author_icon_Set() const;
    bool is_author_icon_Valid() const;

    QString getAuthorLink() const;
    void setAuthorLink(const QString &author_link);
    bool is_author_link_Set() const;
    bool is_author_link_Valid() const;

    QString getAuthorName() const;
    void setAuthorName(const QString &author_name);
    bool is_author_name_Set() const;
    bool is_author_name_Valid() const;

    QString getColor() const;
    void setColor(const QString &color);
    bool is_color_Set() const;
    bool is_color_Valid() const;

    QString getFallback() const;
    void setFallback(const QString &fallback);
    bool is_fallback_Set() const;
    bool is_fallback_Valid() const;

    QList<OAIField> getFields() const;
    void setFields(const QList<OAIField> &fields);
    bool is_fields_Set() const;
    bool is_fields_Valid() const;

    QString getFooter() const;
    void setFooter(const QString &footer);
    bool is_footer_Set() const;
    bool is_footer_Valid() const;

    QString getFooterIcon() const;
    void setFooterIcon(const QString &footer_icon);
    bool is_footer_icon_Set() const;
    bool is_footer_icon_Valid() const;

    OAIImages getGiphy() const;
    void setGiphy(const OAIImages &giphy);
    bool is_giphy_Set() const;
    bool is_giphy_Valid() const;

    QString getImageUrl() const;
    void setImageUrl(const QString &image_url);
    bool is_image_url_Set() const;
    bool is_image_url_Valid() const;

    QString getOgScrapeUrl() const;
    void setOgScrapeUrl(const QString &og_scrape_url);
    bool is_og_scrape_url_Set() const;
    bool is_og_scrape_url_Valid() const;

    qint32 getOriginalHeight() const;
    void setOriginalHeight(const qint32 &original_height);
    bool is_original_height_Set() const;
    bool is_original_height_Valid() const;

    qint32 getOriginalWidth() const;
    void setOriginalWidth(const qint32 &original_width);
    bool is_original_width_Set() const;
    bool is_original_width_Valid() const;

    QString getPretext() const;
    void setPretext(const QString &pretext);
    bool is_pretext_Set() const;
    bool is_pretext_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    QString getThumbUrl() const;
    void setThumbUrl(const QString &thumb_url);
    bool is_thumb_url_Set() const;
    bool is_thumb_url_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getTitleLink() const;
    void setTitleLink(const QString &title_link);
    bool is_title_link_Set() const;
    bool is_title_link_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAction> m_actions;
    bool m_actions_isSet;
    bool m_actions_isValid;

    QString m_asset_url;
    bool m_asset_url_isSet;
    bool m_asset_url_isValid;

    QString m_author_icon;
    bool m_author_icon_isSet;
    bool m_author_icon_isValid;

    QString m_author_link;
    bool m_author_link_isSet;
    bool m_author_link_isValid;

    QString m_author_name;
    bool m_author_name_isSet;
    bool m_author_name_isValid;

    QString m_color;
    bool m_color_isSet;
    bool m_color_isValid;

    QString m_fallback;
    bool m_fallback_isSet;
    bool m_fallback_isValid;

    QList<OAIField> m_fields;
    bool m_fields_isSet;
    bool m_fields_isValid;

    QString m_footer;
    bool m_footer_isSet;
    bool m_footer_isValid;

    QString m_footer_icon;
    bool m_footer_icon_isSet;
    bool m_footer_icon_isValid;

    OAIImages m_giphy;
    bool m_giphy_isSet;
    bool m_giphy_isValid;

    QString m_image_url;
    bool m_image_url_isSet;
    bool m_image_url_isValid;

    QString m_og_scrape_url;
    bool m_og_scrape_url_isSet;
    bool m_og_scrape_url_isValid;

    qint32 m_original_height;
    bool m_original_height_isSet;
    bool m_original_height_isValid;

    qint32 m_original_width;
    bool m_original_width_isSet;
    bool m_original_width_isValid;

    QString m_pretext;
    bool m_pretext_isSet;
    bool m_pretext_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;

    QString m_thumb_url;
    bool m_thumb_url_isSet;
    bool m_thumb_url_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_title_link;
    bool m_title_link_isSet;
    bool m_title_link_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAttachment)

#endif // OAIAttachment_H
