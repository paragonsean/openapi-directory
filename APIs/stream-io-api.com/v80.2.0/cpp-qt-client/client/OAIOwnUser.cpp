/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOwnUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOwnUser::OAIOwnUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOwnUser::OAIOwnUser() {
    this->initializeModel();
}

OAIOwnUser::~OAIOwnUser() {}

void OAIOwnUser::initializeModel() {

    m_banned_isSet = false;
    m_banned_isValid = false;

    m_channel_mutes_isSet = false;
    m_channel_mutes_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deactivated_at_isSet = false;
    m_deactivated_at_isValid = false;

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;

    m_devices_isSet = false;
    m_devices_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invisible_isSet = false;
    m_invisible_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_last_active_isSet = false;
    m_last_active_isValid = false;

    m_latest_hidden_channels_isSet = false;
    m_latest_hidden_channels_isValid = false;

    m_mutes_isSet = false;
    m_mutes_isValid = false;

    m_online_isSet = false;
    m_online_isValid = false;

    m_push_notifications_isSet = false;
    m_push_notifications_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_teams_isSet = false;
    m_teams_isValid = false;

    m_total_unread_count_isSet = false;
    m_total_unread_count_isValid = false;

    m_unread_channels_isSet = false;
    m_unread_channels_isValid = false;

    m_unread_count_isSet = false;
    m_unread_count_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIOwnUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOwnUser::fromJsonObject(QJsonObject json) {

    m_banned_isValid = ::OpenAPI::fromJsonValue(m_banned, json[QString("banned")]);
    m_banned_isSet = !json[QString("banned")].isNull() && m_banned_isValid;

    m_channel_mutes_isValid = ::OpenAPI::fromJsonValue(m_channel_mutes, json[QString("channel_mutes")]);
    m_channel_mutes_isSet = !json[QString("channel_mutes")].isNull() && m_channel_mutes_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_deactivated_at_isValid = ::OpenAPI::fromJsonValue(m_deactivated_at, json[QString("deactivated_at")]);
    m_deactivated_at_isSet = !json[QString("deactivated_at")].isNull() && m_deactivated_at_isValid;

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("deleted_at")]);
    m_deleted_at_isSet = !json[QString("deleted_at")].isNull() && m_deleted_at_isValid;

    m_devices_isValid = ::OpenAPI::fromJsonValue(m_devices, json[QString("devices")]);
    m_devices_isSet = !json[QString("devices")].isNull() && m_devices_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_invisible_isValid = ::OpenAPI::fromJsonValue(m_invisible, json[QString("invisible")]);
    m_invisible_isSet = !json[QString("invisible")].isNull() && m_invisible_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_last_active_isValid = ::OpenAPI::fromJsonValue(m_last_active, json[QString("last_active")]);
    m_last_active_isSet = !json[QString("last_active")].isNull() && m_last_active_isValid;

    m_latest_hidden_channels_isValid = ::OpenAPI::fromJsonValue(m_latest_hidden_channels, json[QString("latest_hidden_channels")]);
    m_latest_hidden_channels_isSet = !json[QString("latest_hidden_channels")].isNull() && m_latest_hidden_channels_isValid;

    m_mutes_isValid = ::OpenAPI::fromJsonValue(m_mutes, json[QString("mutes")]);
    m_mutes_isSet = !json[QString("mutes")].isNull() && m_mutes_isValid;

    m_online_isValid = ::OpenAPI::fromJsonValue(m_online, json[QString("online")]);
    m_online_isSet = !json[QString("online")].isNull() && m_online_isValid;

    m_push_notifications_isValid = ::OpenAPI::fromJsonValue(m_push_notifications, json[QString("push_notifications")]);
    m_push_notifications_isSet = !json[QString("push_notifications")].isNull() && m_push_notifications_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_teams_isValid = ::OpenAPI::fromJsonValue(m_teams, json[QString("teams")]);
    m_teams_isSet = !json[QString("teams")].isNull() && m_teams_isValid;

    m_total_unread_count_isValid = ::OpenAPI::fromJsonValue(m_total_unread_count, json[QString("total_unread_count")]);
    m_total_unread_count_isSet = !json[QString("total_unread_count")].isNull() && m_total_unread_count_isValid;

    m_unread_channels_isValid = ::OpenAPI::fromJsonValue(m_unread_channels, json[QString("unread_channels")]);
    m_unread_channels_isSet = !json[QString("unread_channels")].isNull() && m_unread_channels_isValid;

    m_unread_count_isValid = ::OpenAPI::fromJsonValue(m_unread_count, json[QString("unread_count")]);
    m_unread_count_isSet = !json[QString("unread_count")].isNull() && m_unread_count_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIOwnUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOwnUser::asJsonObject() const {
    QJsonObject obj;
    if (m_banned_isSet) {
        obj.insert(QString("banned"), ::OpenAPI::toJsonValue(m_banned));
    }
    if (m_channel_mutes.size() > 0) {
        obj.insert(QString("channel_mutes"), ::OpenAPI::toJsonValue(m_channel_mutes));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deactivated_at_isSet) {
        obj.insert(QString("deactivated_at"), ::OpenAPI::toJsonValue(m_deactivated_at));
    }
    if (m_deleted_at_isSet) {
        obj.insert(QString("deleted_at"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    if (m_devices.size() > 0) {
        obj.insert(QString("devices"), ::OpenAPI::toJsonValue(m_devices));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invisible_isSet) {
        obj.insert(QString("invisible"), ::OpenAPI::toJsonValue(m_invisible));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_last_active_isSet) {
        obj.insert(QString("last_active"), ::OpenAPI::toJsonValue(m_last_active));
    }
    if (m_latest_hidden_channels.size() > 0) {
        obj.insert(QString("latest_hidden_channels"), ::OpenAPI::toJsonValue(m_latest_hidden_channels));
    }
    if (m_mutes.size() > 0) {
        obj.insert(QString("mutes"), ::OpenAPI::toJsonValue(m_mutes));
    }
    if (m_online_isSet) {
        obj.insert(QString("online"), ::OpenAPI::toJsonValue(m_online));
    }
    if (m_push_notifications.isSet()) {
        obj.insert(QString("push_notifications"), ::OpenAPI::toJsonValue(m_push_notifications));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_teams.size() > 0) {
        obj.insert(QString("teams"), ::OpenAPI::toJsonValue(m_teams));
    }
    if (m_total_unread_count_isSet) {
        obj.insert(QString("total_unread_count"), ::OpenAPI::toJsonValue(m_total_unread_count));
    }
    if (m_unread_channels_isSet) {
        obj.insert(QString("unread_channels"), ::OpenAPI::toJsonValue(m_unread_channels));
    }
    if (m_unread_count_isSet) {
        obj.insert(QString("unread_count"), ::OpenAPI::toJsonValue(m_unread_count));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

bool OAIOwnUser::isBanned() const {
    return m_banned;
}
void OAIOwnUser::setBanned(const bool &banned) {
    m_banned = banned;
    m_banned_isSet = true;
}

bool OAIOwnUser::is_banned_Set() const{
    return m_banned_isSet;
}

bool OAIOwnUser::is_banned_Valid() const{
    return m_banned_isValid;
}

QList<OAIChannelMute> OAIOwnUser::getChannelMutes() const {
    return m_channel_mutes;
}
void OAIOwnUser::setChannelMutes(const QList<OAIChannelMute> &channel_mutes) {
    m_channel_mutes = channel_mutes;
    m_channel_mutes_isSet = true;
}

bool OAIOwnUser::is_channel_mutes_Set() const{
    return m_channel_mutes_isSet;
}

bool OAIOwnUser::is_channel_mutes_Valid() const{
    return m_channel_mutes_isValid;
}

QDateTime OAIOwnUser::getCreatedAt() const {
    return m_created_at;
}
void OAIOwnUser::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIOwnUser::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIOwnUser::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAIOwnUser::getDeactivatedAt() const {
    return m_deactivated_at;
}
void OAIOwnUser::setDeactivatedAt(const QDateTime &deactivated_at) {
    m_deactivated_at = deactivated_at;
    m_deactivated_at_isSet = true;
}

bool OAIOwnUser::is_deactivated_at_Set() const{
    return m_deactivated_at_isSet;
}

bool OAIOwnUser::is_deactivated_at_Valid() const{
    return m_deactivated_at_isValid;
}

QDateTime OAIOwnUser::getDeletedAt() const {
    return m_deleted_at;
}
void OAIOwnUser::setDeletedAt(const QDateTime &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAIOwnUser::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAIOwnUser::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

QList<OAIDevice> OAIOwnUser::getDevices() const {
    return m_devices;
}
void OAIOwnUser::setDevices(const QList<OAIDevice> &devices) {
    m_devices = devices;
    m_devices_isSet = true;
}

bool OAIOwnUser::is_devices_Set() const{
    return m_devices_isSet;
}

bool OAIOwnUser::is_devices_Valid() const{
    return m_devices_isValid;
}

QString OAIOwnUser::getId() const {
    return m_id;
}
void OAIOwnUser::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOwnUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOwnUser::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIOwnUser::isInvisible() const {
    return m_invisible;
}
void OAIOwnUser::setInvisible(const bool &invisible) {
    m_invisible = invisible;
    m_invisible_isSet = true;
}

bool OAIOwnUser::is_invisible_Set() const{
    return m_invisible_isSet;
}

bool OAIOwnUser::is_invisible_Valid() const{
    return m_invisible_isValid;
}

QString OAIOwnUser::getLanguage() const {
    return m_language;
}
void OAIOwnUser::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIOwnUser::is_language_Set() const{
    return m_language_isSet;
}

bool OAIOwnUser::is_language_Valid() const{
    return m_language_isValid;
}

QDateTime OAIOwnUser::getLastActive() const {
    return m_last_active;
}
void OAIOwnUser::setLastActive(const QDateTime &last_active) {
    m_last_active = last_active;
    m_last_active_isSet = true;
}

bool OAIOwnUser::is_last_active_Set() const{
    return m_last_active_isSet;
}

bool OAIOwnUser::is_last_active_Valid() const{
    return m_last_active_isValid;
}

QList<QString> OAIOwnUser::getLatestHiddenChannels() const {
    return m_latest_hidden_channels;
}
void OAIOwnUser::setLatestHiddenChannels(const QList<QString> &latest_hidden_channels) {
    m_latest_hidden_channels = latest_hidden_channels;
    m_latest_hidden_channels_isSet = true;
}

bool OAIOwnUser::is_latest_hidden_channels_Set() const{
    return m_latest_hidden_channels_isSet;
}

bool OAIOwnUser::is_latest_hidden_channels_Valid() const{
    return m_latest_hidden_channels_isValid;
}

QList<OAIUserMute> OAIOwnUser::getMutes() const {
    return m_mutes;
}
void OAIOwnUser::setMutes(const QList<OAIUserMute> &mutes) {
    m_mutes = mutes;
    m_mutes_isSet = true;
}

bool OAIOwnUser::is_mutes_Set() const{
    return m_mutes_isSet;
}

bool OAIOwnUser::is_mutes_Valid() const{
    return m_mutes_isValid;
}

bool OAIOwnUser::isOnline() const {
    return m_online;
}
void OAIOwnUser::setOnline(const bool &online) {
    m_online = online;
    m_online_isSet = true;
}

bool OAIOwnUser::is_online_Set() const{
    return m_online_isSet;
}

bool OAIOwnUser::is_online_Valid() const{
    return m_online_isValid;
}

OAIPushNotificationSettings OAIOwnUser::getPushNotifications() const {
    return m_push_notifications;
}
void OAIOwnUser::setPushNotifications(const OAIPushNotificationSettings &push_notifications) {
    m_push_notifications = push_notifications;
    m_push_notifications_isSet = true;
}

bool OAIOwnUser::is_push_notifications_Set() const{
    return m_push_notifications_isSet;
}

bool OAIOwnUser::is_push_notifications_Valid() const{
    return m_push_notifications_isValid;
}

QString OAIOwnUser::getRole() const {
    return m_role;
}
void OAIOwnUser::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIOwnUser::is_role_Set() const{
    return m_role_isSet;
}

bool OAIOwnUser::is_role_Valid() const{
    return m_role_isValid;
}

QList<QString> OAIOwnUser::getTeams() const {
    return m_teams;
}
void OAIOwnUser::setTeams(const QList<QString> &teams) {
    m_teams = teams;
    m_teams_isSet = true;
}

bool OAIOwnUser::is_teams_Set() const{
    return m_teams_isSet;
}

bool OAIOwnUser::is_teams_Valid() const{
    return m_teams_isValid;
}

qint32 OAIOwnUser::getTotalUnreadCount() const {
    return m_total_unread_count;
}
void OAIOwnUser::setTotalUnreadCount(const qint32 &total_unread_count) {
    m_total_unread_count = total_unread_count;
    m_total_unread_count_isSet = true;
}

bool OAIOwnUser::is_total_unread_count_Set() const{
    return m_total_unread_count_isSet;
}

bool OAIOwnUser::is_total_unread_count_Valid() const{
    return m_total_unread_count_isValid;
}

qint32 OAIOwnUser::getUnreadChannels() const {
    return m_unread_channels;
}
void OAIOwnUser::setUnreadChannels(const qint32 &unread_channels) {
    m_unread_channels = unread_channels;
    m_unread_channels_isSet = true;
}

bool OAIOwnUser::is_unread_channels_Set() const{
    return m_unread_channels_isSet;
}

bool OAIOwnUser::is_unread_channels_Valid() const{
    return m_unread_channels_isValid;
}

qint32 OAIOwnUser::getUnreadCount() const {
    return m_unread_count;
}
void OAIOwnUser::setUnreadCount(const qint32 &unread_count) {
    m_unread_count = unread_count;
    m_unread_count_isSet = true;
}

bool OAIOwnUser::is_unread_count_Set() const{
    return m_unread_count_isSet;
}

bool OAIOwnUser::is_unread_count_Valid() const{
    return m_unread_count_isValid;
}

QDateTime OAIOwnUser::getUpdatedAt() const {
    return m_updated_at;
}
void OAIOwnUser::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIOwnUser::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIOwnUser::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIOwnUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_banned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_mutes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deactivated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_devices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invisible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest_hidden_channels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mutes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_notifications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teams.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_unread_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unread_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOwnUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_banned_isValid && m_channel_mutes_isValid && m_created_at_isValid && m_devices_isValid && m_id_isValid && m_language_isValid && m_mutes_isValid && m_online_isValid && m_role_isValid && m_total_unread_count_isValid && m_unread_channels_isValid && m_unread_count_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
