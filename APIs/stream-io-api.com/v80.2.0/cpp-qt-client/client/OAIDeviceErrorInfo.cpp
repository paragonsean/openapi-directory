/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceErrorInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceErrorInfo::OAIDeviceErrorInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceErrorInfo::OAIDeviceErrorInfo() {
    this->initializeModel();
}

OAIDeviceErrorInfo::~OAIDeviceErrorInfo() {}

void OAIDeviceErrorInfo::initializeModel() {

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_provider_name_isSet = false;
    m_provider_name_isValid = false;
}

void OAIDeviceErrorInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceErrorInfo::fromJsonObject(QJsonObject json) {

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("error_message")]);
    m_error_message_isSet = !json[QString("error_message")].isNull() && m_error_message_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_provider_name_isValid = ::OpenAPI::fromJsonValue(m_provider_name, json[QString("provider_name")]);
    m_provider_name_isSet = !json[QString("provider_name")].isNull() && m_provider_name_isValid;
}

QString OAIDeviceErrorInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceErrorInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_error_message_isSet) {
        obj.insert(QString("error_message"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_provider_name_isSet) {
        obj.insert(QString("provider_name"), ::OpenAPI::toJsonValue(m_provider_name));
    }
    return obj;
}

QString OAIDeviceErrorInfo::getErrorMessage() const {
    return m_error_message;
}
void OAIDeviceErrorInfo::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIDeviceErrorInfo::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIDeviceErrorInfo::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIDeviceErrorInfo::getProvider() const {
    return m_provider;
}
void OAIDeviceErrorInfo::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIDeviceErrorInfo::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIDeviceErrorInfo::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIDeviceErrorInfo::getProviderName() const {
    return m_provider_name;
}
void OAIDeviceErrorInfo::setProviderName(const QString &provider_name) {
    m_provider_name = provider_name;
    m_provider_name_isSet = true;
}

bool OAIDeviceErrorInfo::is_provider_name_Set() const{
    return m_provider_name_isSet;
}

bool OAIDeviceErrorInfo::is_provider_name_Valid() const{
    return m_provider_name_isValid;
}

bool OAIDeviceErrorInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceErrorInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_error_message_isValid && m_provider_isValid && m_provider_name_isValid && true;
}

} // namespace OpenAPI
