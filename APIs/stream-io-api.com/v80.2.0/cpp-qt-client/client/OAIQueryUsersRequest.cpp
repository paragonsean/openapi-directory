/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryUsersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryUsersRequest::OAIQueryUsersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryUsersRequest::OAIQueryUsersRequest() {
    this->initializeModel();
}

OAIQueryUsersRequest::~OAIQueryUsersRequest() {}

void OAIQueryUsersRequest::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_connection_id_isSet = false;
    m_connection_id_isValid = false;

    m_filter_conditions_isSet = false;
    m_filter_conditions_isValid = false;

    m_id_gt_isSet = false;
    m_id_gt_isValid = false;

    m_id_gte_isSet = false;
    m_id_gte_isValid = false;

    m_id_lt_isSet = false;
    m_id_lt_isValid = false;

    m_id_lte_isSet = false;
    m_id_lte_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_presence_isSet = false;
    m_presence_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIQueryUsersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryUsersRequest::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_connection_id_isValid = ::OpenAPI::fromJsonValue(m_connection_id, json[QString("connection_id")]);
    m_connection_id_isSet = !json[QString("connection_id")].isNull() && m_connection_id_isValid;

    m_filter_conditions_isValid = ::OpenAPI::fromJsonValue(m_filter_conditions, json[QString("filter_conditions")]);
    m_filter_conditions_isSet = !json[QString("filter_conditions")].isNull() && m_filter_conditions_isValid;

    m_id_gt_isValid = ::OpenAPI::fromJsonValue(m_id_gt, json[QString("id_gt")]);
    m_id_gt_isSet = !json[QString("id_gt")].isNull() && m_id_gt_isValid;

    m_id_gte_isValid = ::OpenAPI::fromJsonValue(m_id_gte, json[QString("id_gte")]);
    m_id_gte_isSet = !json[QString("id_gte")].isNull() && m_id_gte_isValid;

    m_id_lt_isValid = ::OpenAPI::fromJsonValue(m_id_lt, json[QString("id_lt")]);
    m_id_lt_isSet = !json[QString("id_lt")].isNull() && m_id_lt_isValid;

    m_id_lte_isValid = ::OpenAPI::fromJsonValue(m_id_lte, json[QString("id_lte")]);
    m_id_lte_isSet = !json[QString("id_lte")].isNull() && m_id_lte_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_presence_isValid = ::OpenAPI::fromJsonValue(m_presence, json[QString("presence")]);
    m_presence_isSet = !json[QString("presence")].isNull() && m_presence_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIQueryUsersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryUsersRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_connection_id_isSet) {
        obj.insert(QString("connection_id"), ::OpenAPI::toJsonValue(m_connection_id));
    }
    if (m_filter_conditions.size() > 0) {
        obj.insert(QString("filter_conditions"), ::OpenAPI::toJsonValue(m_filter_conditions));
    }
    if (m_id_gt_isSet) {
        obj.insert(QString("id_gt"), ::OpenAPI::toJsonValue(m_id_gt));
    }
    if (m_id_gte_isSet) {
        obj.insert(QString("id_gte"), ::OpenAPI::toJsonValue(m_id_gte));
    }
    if (m_id_lt_isSet) {
        obj.insert(QString("id_lt"), ::OpenAPI::toJsonValue(m_id_lt));
    }
    if (m_id_lte_isSet) {
        obj.insert(QString("id_lte"), ::OpenAPI::toJsonValue(m_id_lte));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_presence_isSet) {
        obj.insert(QString("presence"), ::OpenAPI::toJsonValue(m_presence));
    }
    if (m_sort.size() > 0) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIQueryUsersRequest::getClientId() const {
    return m_client_id;
}
void OAIQueryUsersRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIQueryUsersRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIQueryUsersRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIQueryUsersRequest::getConnectionId() const {
    return m_connection_id;
}
void OAIQueryUsersRequest::setConnectionId(const QString &connection_id) {
    m_connection_id = connection_id;
    m_connection_id_isSet = true;
}

bool OAIQueryUsersRequest::is_connection_id_Set() const{
    return m_connection_id_isSet;
}

bool OAIQueryUsersRequest::is_connection_id_Valid() const{
    return m_connection_id_isValid;
}

QMap<QString, QJsonValue> OAIQueryUsersRequest::getFilterConditions() const {
    return m_filter_conditions;
}
void OAIQueryUsersRequest::setFilterConditions(const QMap<QString, QJsonValue> &filter_conditions) {
    m_filter_conditions = filter_conditions;
    m_filter_conditions_isSet = true;
}

bool OAIQueryUsersRequest::is_filter_conditions_Set() const{
    return m_filter_conditions_isSet;
}

bool OAIQueryUsersRequest::is_filter_conditions_Valid() const{
    return m_filter_conditions_isValid;
}

QString OAIQueryUsersRequest::getIdGt() const {
    return m_id_gt;
}
void OAIQueryUsersRequest::setIdGt(const QString &id_gt) {
    m_id_gt = id_gt;
    m_id_gt_isSet = true;
}

bool OAIQueryUsersRequest::is_id_gt_Set() const{
    return m_id_gt_isSet;
}

bool OAIQueryUsersRequest::is_id_gt_Valid() const{
    return m_id_gt_isValid;
}

QString OAIQueryUsersRequest::getIdGte() const {
    return m_id_gte;
}
void OAIQueryUsersRequest::setIdGte(const QString &id_gte) {
    m_id_gte = id_gte;
    m_id_gte_isSet = true;
}

bool OAIQueryUsersRequest::is_id_gte_Set() const{
    return m_id_gte_isSet;
}

bool OAIQueryUsersRequest::is_id_gte_Valid() const{
    return m_id_gte_isValid;
}

QString OAIQueryUsersRequest::getIdLt() const {
    return m_id_lt;
}
void OAIQueryUsersRequest::setIdLt(const QString &id_lt) {
    m_id_lt = id_lt;
    m_id_lt_isSet = true;
}

bool OAIQueryUsersRequest::is_id_lt_Set() const{
    return m_id_lt_isSet;
}

bool OAIQueryUsersRequest::is_id_lt_Valid() const{
    return m_id_lt_isValid;
}

QString OAIQueryUsersRequest::getIdLte() const {
    return m_id_lte;
}
void OAIQueryUsersRequest::setIdLte(const QString &id_lte) {
    m_id_lte = id_lte;
    m_id_lte_isSet = true;
}

bool OAIQueryUsersRequest::is_id_lte_Set() const{
    return m_id_lte_isSet;
}

bool OAIQueryUsersRequest::is_id_lte_Valid() const{
    return m_id_lte_isValid;
}

qint32 OAIQueryUsersRequest::getLimit() const {
    return m_limit;
}
void OAIQueryUsersRequest::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIQueryUsersRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIQueryUsersRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

qint32 OAIQueryUsersRequest::getOffset() const {
    return m_offset;
}
void OAIQueryUsersRequest::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIQueryUsersRequest::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIQueryUsersRequest::is_offset_Valid() const{
    return m_offset_isValid;
}

bool OAIQueryUsersRequest::isPresence() const {
    return m_presence;
}
void OAIQueryUsersRequest::setPresence(const bool &presence) {
    m_presence = presence;
    m_presence_isSet = true;
}

bool OAIQueryUsersRequest::is_presence_Set() const{
    return m_presence_isSet;
}

bool OAIQueryUsersRequest::is_presence_Valid() const{
    return m_presence_isValid;
}

QList<OAISortParam> OAIQueryUsersRequest::getSort() const {
    return m_sort;
}
void OAIQueryUsersRequest::setSort(const QList<OAISortParam> &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIQueryUsersRequest::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIQueryUsersRequest::is_sort_Valid() const{
    return m_sort_isValid;
}

OAIUserObject OAIQueryUsersRequest::getUser() const {
    return m_user;
}
void OAIQueryUsersRequest::setUser(const OAIUserObject &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIQueryUsersRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAIQueryUsersRequest::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIQueryUsersRequest::getUserId() const {
    return m_user_id;
}
void OAIQueryUsersRequest::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIQueryUsersRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIQueryUsersRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIQueryUsersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_gt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_gte_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_lt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_lte_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_presence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryUsersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_conditions_isValid && m_sort_isValid && true;
}

} // namespace OpenAPI
