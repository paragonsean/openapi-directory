/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchRequest::OAISearchRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchRequest::OAISearchRequest() {
    this->initializeModel();
}

OAISearchRequest::~OAISearchRequest() {}

void OAISearchRequest::initializeModel() {

    m_filter_conditions_isSet = false;
    m_filter_conditions_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_message_filter_conditions_isSet = false;
    m_message_filter_conditions_isValid = false;

    m_next_isSet = false;
    m_next_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;
}

void OAISearchRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchRequest::fromJsonObject(QJsonObject json) {

    m_filter_conditions_isValid = ::OpenAPI::fromJsonValue(m_filter_conditions, json[QString("filter_conditions")]);
    m_filter_conditions_isSet = !json[QString("filter_conditions")].isNull() && m_filter_conditions_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_message_filter_conditions_isValid = ::OpenAPI::fromJsonValue(m_message_filter_conditions, json[QString("message_filter_conditions")]);
    m_message_filter_conditions_isSet = !json[QString("message_filter_conditions")].isNull() && m_message_filter_conditions_isValid;

    m_next_isValid = ::OpenAPI::fromJsonValue(m_next, json[QString("next")]);
    m_next_isSet = !json[QString("next")].isNull() && m_next_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;
}

QString OAISearchRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_conditions.size() > 0) {
        obj.insert(QString("filter_conditions"), ::OpenAPI::toJsonValue(m_filter_conditions));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_message_filter_conditions.size() > 0) {
        obj.insert(QString("message_filter_conditions"), ::OpenAPI::toJsonValue(m_message_filter_conditions));
    }
    if (m_next_isSet) {
        obj.insert(QString("next"), ::OpenAPI::toJsonValue(m_next));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_sort.size() > 0) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    return obj;
}

QMap<QString, QJsonValue> OAISearchRequest::getFilterConditions() const {
    return m_filter_conditions;
}
void OAISearchRequest::setFilterConditions(const QMap<QString, QJsonValue> &filter_conditions) {
    m_filter_conditions = filter_conditions;
    m_filter_conditions_isSet = true;
}

bool OAISearchRequest::is_filter_conditions_Set() const{
    return m_filter_conditions_isSet;
}

bool OAISearchRequest::is_filter_conditions_Valid() const{
    return m_filter_conditions_isValid;
}

qint32 OAISearchRequest::getLimit() const {
    return m_limit;
}
void OAISearchRequest::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAISearchRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAISearchRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

QMap<QString, QJsonValue> OAISearchRequest::getMessageFilterConditions() const {
    return m_message_filter_conditions;
}
void OAISearchRequest::setMessageFilterConditions(const QMap<QString, QJsonValue> &message_filter_conditions) {
    m_message_filter_conditions = message_filter_conditions;
    m_message_filter_conditions_isSet = true;
}

bool OAISearchRequest::is_message_filter_conditions_Set() const{
    return m_message_filter_conditions_isSet;
}

bool OAISearchRequest::is_message_filter_conditions_Valid() const{
    return m_message_filter_conditions_isValid;
}

QString OAISearchRequest::getNext() const {
    return m_next;
}
void OAISearchRequest::setNext(const QString &next) {
    m_next = next;
    m_next_isSet = true;
}

bool OAISearchRequest::is_next_Set() const{
    return m_next_isSet;
}

bool OAISearchRequest::is_next_Valid() const{
    return m_next_isValid;
}

qint32 OAISearchRequest::getOffset() const {
    return m_offset;
}
void OAISearchRequest::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAISearchRequest::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAISearchRequest::is_offset_Valid() const{
    return m_offset_isValid;
}

QString OAISearchRequest::getQuery() const {
    return m_query;
}
void OAISearchRequest::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAISearchRequest::is_query_Set() const{
    return m_query_isSet;
}

bool OAISearchRequest::is_query_Valid() const{
    return m_query_isValid;
}

QList<OAISortParam> OAISearchRequest::getSort() const {
    return m_sort;
}
void OAISearchRequest::setSort(const QList<OAISortParam> &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAISearchRequest::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAISearchRequest::is_sort_Valid() const{
    return m_sort_isValid;
}

bool OAISearchRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_filter_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filter_conditions_isValid && true;
}

} // namespace OpenAPI
