/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMessagesApi_H
#define OAI_OAIMessagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAIFileDeleteResponse.h"
#include "OAIFileUploadResponse.h"
#include "OAIFlagRequest.h"
#include "OAIFlagResponse.h"
#include "OAIGetManyMessagesResponse.h"
#include "OAIGetOGResponse.h"
#include "OAIGetReactionsResponse.h"
#include "OAIGetRepliesResponse.h"
#include "OAIImageSizeRequest.h"
#include "OAIImageUploadResponse.h"
#include "OAIMarkChannelsReadRequest.h"
#include "OAIMarkReadRequest.h"
#include "OAIMarkReadResponse.h"
#include "OAIMarkUnreadRequest.h"
#include "OAIMessageActionRequest.h"
#include "OAIMessageResponse.h"
#include "OAIMessageWithPendingMetadataResponse.h"
#include "OAIOnlyUserIDRequest.h"
#include "OAIQueryMessageFlagsRequest.h"
#include "OAIQueryMessageFlagsResponse.h"
#include "OAIReactionRemovalResponse.h"
#include "OAIReactionResponse.h"
#include "OAIResponse.h"
#include "OAISearchRequest.h"
#include "OAISearchResponse.h"
#include "OAISendMessageRequest.h"
#include "OAISendReactionRequest.h"
#include "OAITranslateMessageRequest.h"
#include "OAIUpdateMessagePartialRequest.h"
#include "OAIUpdateMessageRequest.h"
#include <QDateTime>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMessagesApi : public QObject {
    Q_OBJECT

public:
    OAIMessagesApi(const int timeOut = 0);
    ~OAIMessagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  url QString [optional]
    */
    virtual void deleteFile(const QString &type, const QString &id, const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  url QString [optional]
    */
    virtual void deleteImage(const QString &type, const QString &id, const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  hard bool [optional]
    */
    virtual void deleteMessage(const QString &id, const ::OpenAPI::OptionalParam<bool> &hard = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  type QString [required]
    * @param[in]  user_id QString [optional]
    */
    virtual void deleteReaction(const QString &id, const QString &type, const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_flag_request OAIFlagRequest [required]
    */
    virtual void flag(const OAIFlagRequest &oai_flag_request);

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  ids QList<QString> [optional]
    */
    virtual void getManyMessages(const QString &type, const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getMessage(const QString &id);

    /**
    * @param[in]  url QString [optional]
    */
    virtual void getOG(const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    */
    virtual void getReactions(const QString &id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  parent_id QString [required]
    * @param[in]  id_gte QString [optional]
    * @param[in]  id_gt QString [optional]
    * @param[in]  id_lte QString [optional]
    * @param[in]  id_lt QString [optional]
    * @param[in]  created_at_after_or_equal QDateTime [optional]
    * @param[in]  created_at_after QDateTime [optional]
    * @param[in]  created_at_before_or_equal QDateTime [optional]
    * @param[in]  created_at_before QDateTime [optional]
    * @param[in]  id_around QString [optional]
    * @param[in]  created_at_around QDateTime [optional]
    */
    virtual void getReplies(const QString &parent_id, const ::OpenAPI::OptionalParam<QString> &id_gte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id_gt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id_lte = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id_lt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after_or_equal = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before_or_equal = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &id_around = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &created_at_around = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  oai_mark_channels_read_request OAIMarkChannelsReadRequest [required]
    */
    virtual void markChannelsRead(const OAIMarkChannelsReadRequest &oai_mark_channels_read_request);

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_mark_read_request OAIMarkReadRequest [required]
    */
    virtual void markRead(const QString &type, const QString &id, const OAIMarkReadRequest &oai_mark_read_request);

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_mark_unread_request OAIMarkUnreadRequest [required]
    */
    virtual void markUnread(const QString &type, const QString &id, const OAIMarkUnreadRequest &oai_mark_unread_request);

    /**
    * @param[in]  payload OAIQueryMessageFlagsRequest [optional]
    */
    virtual void queryMessageFlags(const ::OpenAPI::OptionalParam<OAIQueryMessageFlagsRequest> &payload = ::OpenAPI::OptionalParam<OAIQueryMessageFlagsRequest>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_message_action_request OAIMessageActionRequest [required]
    */
    virtual void runMessageAction(const QString &id, const OAIMessageActionRequest &oai_message_action_request);

    /**
    * @param[in]  payload OAISearchRequest [optional]
    */
    virtual void search(const ::OpenAPI::OptionalParam<OAISearchRequest> &payload = ::OpenAPI::OptionalParam<OAISearchRequest>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_send_message_request OAISendMessageRequest [required]
    */
    virtual void sendMessage(const QString &type, const QString &id, const OAISendMessageRequest &oai_send_message_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_send_reaction_request OAISendReactionRequest [required]
    */
    virtual void sendReaction(const QString &id, const OAISendReactionRequest &oai_send_reaction_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_translate_message_request OAITranslateMessageRequest [required]
    */
    virtual void translateMessage(const QString &id, const OAITranslateMessageRequest &oai_translate_message_request);

    /**
    * @param[in]  oai_flag_request OAIFlagRequest [required]
    */
    virtual void unflag(const OAIFlagRequest &oai_flag_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_message_request OAIUpdateMessageRequest [required]
    */
    virtual void updateMessage(const QString &id, const OAIUpdateMessageRequest &oai_update_message_request);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_update_message_partial_request OAIUpdateMessagePartialRequest [required]
    */
    virtual void updateMessagePartial(const QString &id, const OAIUpdateMessagePartialRequest &oai_update_message_partial_request);

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  file QString [optional]
    * @param[in]  user OAIOnlyUserIDRequest [optional]
    */
    virtual void uploadFile(const QString &type, const QString &id, const ::OpenAPI::OptionalParam<QString> &file = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIOnlyUserIDRequest> &user = ::OpenAPI::OptionalParam<OAIOnlyUserIDRequest>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  file QString [optional]
    * @param[in]  upload_sizes QList<OAIImageSizeRequest> [optional]
    * @param[in]  user OAIOnlyUserIDRequest [optional]
    */
    virtual void uploadImage(const QString &type, const QString &id, const ::OpenAPI::OptionalParam<QString> &file = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIImageSizeRequest>> &upload_sizes = ::OpenAPI::OptionalParam<QList<OAIImageSizeRequest>>(), const ::OpenAPI::OptionalParam<OAIOnlyUserIDRequest> &user = ::OpenAPI::OptionalParam<OAIOnlyUserIDRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteFileCallback(OAIHttpRequestWorker *worker);
    void deleteImageCallback(OAIHttpRequestWorker *worker);
    void deleteMessageCallback(OAIHttpRequestWorker *worker);
    void deleteReactionCallback(OAIHttpRequestWorker *worker);
    void flagCallback(OAIHttpRequestWorker *worker);
    void getManyMessagesCallback(OAIHttpRequestWorker *worker);
    void getMessageCallback(OAIHttpRequestWorker *worker);
    void getOGCallback(OAIHttpRequestWorker *worker);
    void getReactionsCallback(OAIHttpRequestWorker *worker);
    void getRepliesCallback(OAIHttpRequestWorker *worker);
    void markChannelsReadCallback(OAIHttpRequestWorker *worker);
    void markReadCallback(OAIHttpRequestWorker *worker);
    void markUnreadCallback(OAIHttpRequestWorker *worker);
    void queryMessageFlagsCallback(OAIHttpRequestWorker *worker);
    void runMessageActionCallback(OAIHttpRequestWorker *worker);
    void searchCallback(OAIHttpRequestWorker *worker);
    void sendMessageCallback(OAIHttpRequestWorker *worker);
    void sendReactionCallback(OAIHttpRequestWorker *worker);
    void translateMessageCallback(OAIHttpRequestWorker *worker);
    void unflagCallback(OAIHttpRequestWorker *worker);
    void updateMessageCallback(OAIHttpRequestWorker *worker);
    void updateMessagePartialCallback(OAIHttpRequestWorker *worker);
    void uploadFileCallback(OAIHttpRequestWorker *worker);
    void uploadImageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteFileSignal(OAIFileDeleteResponse summary);
    void deleteImageSignal(OAIFileDeleteResponse summary);
    void deleteMessageSignal(OAIMessageResponse summary);
    void deleteReactionSignal(OAIReactionRemovalResponse summary);
    void flagSignal(OAIFlagResponse summary);
    void getManyMessagesSignal(OAIGetManyMessagesResponse summary);
    void getMessageSignal(OAIMessageWithPendingMetadataResponse summary);
    void getOGSignal(OAIGetOGResponse summary);
    void getReactionsSignal(OAIGetReactionsResponse summary);
    void getRepliesSignal(OAIGetRepliesResponse summary);
    void markChannelsReadSignal(OAIMarkReadResponse summary);
    void markReadSignal(OAIMarkReadResponse summary);
    void markUnreadSignal(OAIResponse summary);
    void queryMessageFlagsSignal(OAIQueryMessageFlagsResponse summary);
    void runMessageActionSignal(OAIMessageResponse summary);
    void searchSignal(OAISearchResponse summary);
    void sendMessageSignal(OAIMessageWithPendingMetadataResponse summary);
    void sendReactionSignal(OAIReactionResponse summary);
    void translateMessageSignal(OAIMessageResponse summary);
    void unflagSignal(OAIFlagResponse summary);
    void updateMessageSignal(OAIMessageResponse summary);
    void updateMessagePartialSignal(OAIMessageResponse summary);
    void uploadFileSignal(OAIFileUploadResponse summary);
    void uploadImageSignal(OAIImageUploadResponse summary);


    void deleteFileSignalFull(OAIHttpRequestWorker *worker, OAIFileDeleteResponse summary);
    void deleteImageSignalFull(OAIHttpRequestWorker *worker, OAIFileDeleteResponse summary);
    void deleteMessageSignalFull(OAIHttpRequestWorker *worker, OAIMessageResponse summary);
    void deleteReactionSignalFull(OAIHttpRequestWorker *worker, OAIReactionRemovalResponse summary);
    void flagSignalFull(OAIHttpRequestWorker *worker, OAIFlagResponse summary);
    void getManyMessagesSignalFull(OAIHttpRequestWorker *worker, OAIGetManyMessagesResponse summary);
    void getMessageSignalFull(OAIHttpRequestWorker *worker, OAIMessageWithPendingMetadataResponse summary);
    void getOGSignalFull(OAIHttpRequestWorker *worker, OAIGetOGResponse summary);
    void getReactionsSignalFull(OAIHttpRequestWorker *worker, OAIGetReactionsResponse summary);
    void getRepliesSignalFull(OAIHttpRequestWorker *worker, OAIGetRepliesResponse summary);
    void markChannelsReadSignalFull(OAIHttpRequestWorker *worker, OAIMarkReadResponse summary);
    void markReadSignalFull(OAIHttpRequestWorker *worker, OAIMarkReadResponse summary);
    void markUnreadSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void queryMessageFlagsSignalFull(OAIHttpRequestWorker *worker, OAIQueryMessageFlagsResponse summary);
    void runMessageActionSignalFull(OAIHttpRequestWorker *worker, OAIMessageResponse summary);
    void searchSignalFull(OAIHttpRequestWorker *worker, OAISearchResponse summary);
    void sendMessageSignalFull(OAIHttpRequestWorker *worker, OAIMessageWithPendingMetadataResponse summary);
    void sendReactionSignalFull(OAIHttpRequestWorker *worker, OAIReactionResponse summary);
    void translateMessageSignalFull(OAIHttpRequestWorker *worker, OAIMessageResponse summary);
    void unflagSignalFull(OAIHttpRequestWorker *worker, OAIFlagResponse summary);
    void updateMessageSignalFull(OAIHttpRequestWorker *worker, OAIMessageResponse summary);
    void updateMessagePartialSignalFull(OAIHttpRequestWorker *worker, OAIMessageResponse summary);
    void uploadFileSignalFull(OAIHttpRequestWorker *worker, OAIFileUploadResponse summary);
    void uploadImageSignalFull(OAIHttpRequestWorker *worker, OAIImageUploadResponse summary);

    Q_DECL_DEPRECATED_X("Use deleteFileSignalError() instead")
    void deleteFileSignalE(OAIFileDeleteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFileSignalError(OAIFileDeleteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImageSignalError() instead")
    void deleteImageSignalE(OAIFileDeleteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImageSignalError(OAIFileDeleteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMessageSignalError() instead")
    void deleteMessageSignalE(OAIMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMessageSignalError(OAIMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteReactionSignalError() instead")
    void deleteReactionSignalE(OAIReactionRemovalResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReactionSignalError(OAIReactionRemovalResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flagSignalError() instead")
    void flagSignalE(OAIFlagResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void flagSignalError(OAIFlagResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getManyMessagesSignalError() instead")
    void getManyMessagesSignalE(OAIGetManyMessagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getManyMessagesSignalError(OAIGetManyMessagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMessageSignalError() instead")
    void getMessageSignalE(OAIMessageWithPendingMetadataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMessageSignalError(OAIMessageWithPendingMetadataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOGSignalError() instead")
    void getOGSignalE(OAIGetOGResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOGSignalError(OAIGetOGResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReactionsSignalError() instead")
    void getReactionsSignalE(OAIGetReactionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getReactionsSignalError(OAIGetReactionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepliesSignalError() instead")
    void getRepliesSignalE(OAIGetRepliesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepliesSignalError(OAIGetRepliesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markChannelsReadSignalError() instead")
    void markChannelsReadSignalE(OAIMarkReadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void markChannelsReadSignalError(OAIMarkReadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markReadSignalError() instead")
    void markReadSignalE(OAIMarkReadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void markReadSignalError(OAIMarkReadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markUnreadSignalError() instead")
    void markUnreadSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void markUnreadSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryMessageFlagsSignalError() instead")
    void queryMessageFlagsSignalE(OAIQueryMessageFlagsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryMessageFlagsSignalError(OAIQueryMessageFlagsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runMessageActionSignalError() instead")
    void runMessageActionSignalE(OAIMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void runMessageActionSignalError(OAIMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSignalError() instead")
    void searchSignalE(OAISearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSignalError(OAISearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendMessageSignalError() instead")
    void sendMessageSignalE(OAIMessageWithPendingMetadataResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMessageSignalError(OAIMessageWithPendingMetadataResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendReactionSignalError() instead")
    void sendReactionSignalE(OAIReactionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendReactionSignalError(OAIReactionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateMessageSignalError() instead")
    void translateMessageSignalE(OAIMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void translateMessageSignalError(OAIMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unflagSignalError() instead")
    void unflagSignalE(OAIFlagResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unflagSignalError(OAIFlagResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMessageSignalError() instead")
    void updateMessageSignalE(OAIMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMessageSignalError(OAIMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMessagePartialSignalError() instead")
    void updateMessagePartialSignalE(OAIMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMessagePartialSignalError(OAIMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFileSignalError() instead")
    void uploadFileSignalE(OAIFileUploadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileSignalError(OAIFileUploadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadImageSignalError() instead")
    void uploadImageSignalE(OAIImageUploadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadImageSignalError(OAIImageUploadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteFileSignalErrorFull() instead")
    void deleteFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImageSignalErrorFull() instead")
    void deleteImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMessageSignalErrorFull() instead")
    void deleteMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteReactionSignalErrorFull() instead")
    void deleteReactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteReactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flagSignalErrorFull() instead")
    void flagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getManyMessagesSignalErrorFull() instead")
    void getManyMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getManyMessagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMessageSignalErrorFull() instead")
    void getMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOGSignalErrorFull() instead")
    void getOGSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOGSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getReactionsSignalErrorFull() instead")
    void getReactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getReactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepliesSignalErrorFull() instead")
    void getRepliesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepliesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markChannelsReadSignalErrorFull() instead")
    void markChannelsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void markChannelsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markReadSignalErrorFull() instead")
    void markReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void markReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markUnreadSignalErrorFull() instead")
    void markUnreadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void markUnreadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryMessageFlagsSignalErrorFull() instead")
    void queryMessageFlagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryMessageFlagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use runMessageActionSignalErrorFull() instead")
    void runMessageActionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void runMessageActionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSignalErrorFull() instead")
    void searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendMessageSignalErrorFull() instead")
    void sendMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendReactionSignalErrorFull() instead")
    void sendReactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendReactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use translateMessageSignalErrorFull() instead")
    void translateMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void translateMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unflagSignalErrorFull() instead")
    void unflagSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unflagSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMessageSignalErrorFull() instead")
    void updateMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMessagePartialSignalErrorFull() instead")
    void updateMessagePartialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMessagePartialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadFileSignalErrorFull() instead")
    void uploadFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadImageSignalErrorFull() instead")
    void uploadImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
