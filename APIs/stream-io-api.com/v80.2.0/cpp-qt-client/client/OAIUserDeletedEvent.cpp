/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserDeletedEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserDeletedEvent::OAIUserDeletedEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserDeletedEvent::OAIUserDeletedEvent() {
    this->initializeModel();
}

OAIUserDeletedEvent::~OAIUserDeletedEvent() {}

void OAIUserDeletedEvent::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_delete_conversation_channels_isSet = false;
    m_delete_conversation_channels_isValid = false;

    m_hard_delete_isSet = false;
    m_hard_delete_isValid = false;

    m_mark_messages_deleted_isSet = false;
    m_mark_messages_deleted_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIUserDeletedEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserDeletedEvent::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_delete_conversation_channels_isValid = ::OpenAPI::fromJsonValue(m_delete_conversation_channels, json[QString("delete_conversation_channels")]);
    m_delete_conversation_channels_isSet = !json[QString("delete_conversation_channels")].isNull() && m_delete_conversation_channels_isValid;

    m_hard_delete_isValid = ::OpenAPI::fromJsonValue(m_hard_delete, json[QString("hard_delete")]);
    m_hard_delete_isSet = !json[QString("hard_delete")].isNull() && m_hard_delete_isValid;

    m_mark_messages_deleted_isValid = ::OpenAPI::fromJsonValue(m_mark_messages_deleted, json[QString("mark_messages_deleted")]);
    m_mark_messages_deleted_isSet = !json[QString("mark_messages_deleted")].isNull() && m_mark_messages_deleted_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIUserDeletedEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserDeletedEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_delete_conversation_channels_isSet) {
        obj.insert(QString("delete_conversation_channels"), ::OpenAPI::toJsonValue(m_delete_conversation_channels));
    }
    if (m_hard_delete_isSet) {
        obj.insert(QString("hard_delete"), ::OpenAPI::toJsonValue(m_hard_delete));
    }
    if (m_mark_messages_deleted_isSet) {
        obj.insert(QString("mark_messages_deleted"), ::OpenAPI::toJsonValue(m_mark_messages_deleted));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QDateTime OAIUserDeletedEvent::getCreatedAt() const {
    return m_created_at;
}
void OAIUserDeletedEvent::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUserDeletedEvent::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUserDeletedEvent::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIUserDeletedEvent::isDeleteConversationChannels() const {
    return m_delete_conversation_channels;
}
void OAIUserDeletedEvent::setDeleteConversationChannels(const bool &delete_conversation_channels) {
    m_delete_conversation_channels = delete_conversation_channels;
    m_delete_conversation_channels_isSet = true;
}

bool OAIUserDeletedEvent::is_delete_conversation_channels_Set() const{
    return m_delete_conversation_channels_isSet;
}

bool OAIUserDeletedEvent::is_delete_conversation_channels_Valid() const{
    return m_delete_conversation_channels_isValid;
}

bool OAIUserDeletedEvent::isHardDelete() const {
    return m_hard_delete;
}
void OAIUserDeletedEvent::setHardDelete(const bool &hard_delete) {
    m_hard_delete = hard_delete;
    m_hard_delete_isSet = true;
}

bool OAIUserDeletedEvent::is_hard_delete_Set() const{
    return m_hard_delete_isSet;
}

bool OAIUserDeletedEvent::is_hard_delete_Valid() const{
    return m_hard_delete_isValid;
}

bool OAIUserDeletedEvent::isMarkMessagesDeleted() const {
    return m_mark_messages_deleted;
}
void OAIUserDeletedEvent::setMarkMessagesDeleted(const bool &mark_messages_deleted) {
    m_mark_messages_deleted = mark_messages_deleted;
    m_mark_messages_deleted_isSet = true;
}

bool OAIUserDeletedEvent::is_mark_messages_deleted_Set() const{
    return m_mark_messages_deleted_isSet;
}

bool OAIUserDeletedEvent::is_mark_messages_deleted_Valid() const{
    return m_mark_messages_deleted_isValid;
}

QString OAIUserDeletedEvent::getType() const {
    return m_type;
}
void OAIUserDeletedEvent::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUserDeletedEvent::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUserDeletedEvent::is_type_Valid() const{
    return m_type_isValid;
}

OAIUserObject OAIUserDeletedEvent::getUser() const {
    return m_user;
}
void OAIUserDeletedEvent::setUser(const OAIUserObject &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIUserDeletedEvent::is_user_Set() const{
    return m_user_isSet;
}

bool OAIUserDeletedEvent::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIUserDeletedEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_conversation_channels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hard_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mark_messages_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserDeletedEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_delete_conversation_channels_isValid && m_hard_delete_isValid && m_mark_messages_deleted_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
