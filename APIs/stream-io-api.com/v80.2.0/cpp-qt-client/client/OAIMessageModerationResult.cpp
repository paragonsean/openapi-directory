/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageModerationResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageModerationResult::OAIMessageModerationResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageModerationResult::OAIMessageModerationResult() {
    this->initializeModel();
}

OAIMessageModerationResult::~OAIMessageModerationResult() {}

void OAIMessageModerationResult::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_ai_moderation_response_isSet = false;
    m_ai_moderation_response_isValid = false;

    m_blocked_word_isSet = false;
    m_blocked_word_isValid = false;

    m_blocklist_name_isSet = false;
    m_blocklist_name_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_moderated_by_isSet = false;
    m_moderated_by_isValid = false;

    m_moderation_thresholds_isSet = false;
    m_moderation_thresholds_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_bad_karma_isSet = false;
    m_user_bad_karma_isValid = false;

    m_user_karma_isSet = false;
    m_user_karma_isValid = false;
}

void OAIMessageModerationResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageModerationResult::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_ai_moderation_response_isValid = ::OpenAPI::fromJsonValue(m_ai_moderation_response, json[QString("ai_moderation_response")]);
    m_ai_moderation_response_isSet = !json[QString("ai_moderation_response")].isNull() && m_ai_moderation_response_isValid;

    m_blocked_word_isValid = ::OpenAPI::fromJsonValue(m_blocked_word, json[QString("blocked_word")]);
    m_blocked_word_isSet = !json[QString("blocked_word")].isNull() && m_blocked_word_isValid;

    m_blocklist_name_isValid = ::OpenAPI::fromJsonValue(m_blocklist_name, json[QString("blocklist_name")]);
    m_blocklist_name_isSet = !json[QString("blocklist_name")].isNull() && m_blocklist_name_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("message_id")]);
    m_message_id_isSet = !json[QString("message_id")].isNull() && m_message_id_isValid;

    m_moderated_by_isValid = ::OpenAPI::fromJsonValue(m_moderated_by, json[QString("moderated_by")]);
    m_moderated_by_isSet = !json[QString("moderated_by")].isNull() && m_moderated_by_isValid;

    m_moderation_thresholds_isValid = ::OpenAPI::fromJsonValue(m_moderation_thresholds, json[QString("moderation_thresholds")]);
    m_moderation_thresholds_isSet = !json[QString("moderation_thresholds")].isNull() && m_moderation_thresholds_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_bad_karma_isValid = ::OpenAPI::fromJsonValue(m_user_bad_karma, json[QString("user_bad_karma")]);
    m_user_bad_karma_isSet = !json[QString("user_bad_karma")].isNull() && m_user_bad_karma_isValid;

    m_user_karma_isValid = ::OpenAPI::fromJsonValue(m_user_karma, json[QString("user_karma")]);
    m_user_karma_isSet = !json[QString("user_karma")].isNull() && m_user_karma_isValid;
}

QString OAIMessageModerationResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageModerationResult::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_ai_moderation_response.isSet()) {
        obj.insert(QString("ai_moderation_response"), ::OpenAPI::toJsonValue(m_ai_moderation_response));
    }
    if (m_blocked_word_isSet) {
        obj.insert(QString("blocked_word"), ::OpenAPI::toJsonValue(m_blocked_word));
    }
    if (m_blocklist_name_isSet) {
        obj.insert(QString("blocklist_name"), ::OpenAPI::toJsonValue(m_blocklist_name));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("message_id"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_moderated_by_isSet) {
        obj.insert(QString("moderated_by"), ::OpenAPI::toJsonValue(m_moderated_by));
    }
    if (m_moderation_thresholds.isSet()) {
        obj.insert(QString("moderation_thresholds"), ::OpenAPI::toJsonValue(m_moderation_thresholds));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user_bad_karma_isSet) {
        obj.insert(QString("user_bad_karma"), ::OpenAPI::toJsonValue(m_user_bad_karma));
    }
    if (m_user_karma_isSet) {
        obj.insert(QString("user_karma"), ::OpenAPI::toJsonValue(m_user_karma));
    }
    return obj;
}

QString OAIMessageModerationResult::getAction() const {
    return m_action;
}
void OAIMessageModerationResult::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIMessageModerationResult::is_action_Set() const{
    return m_action_isSet;
}

bool OAIMessageModerationResult::is_action_Valid() const{
    return m_action_isValid;
}

OAIModerationResponse OAIMessageModerationResult::getAiModerationResponse() const {
    return m_ai_moderation_response;
}
void OAIMessageModerationResult::setAiModerationResponse(const OAIModerationResponse &ai_moderation_response) {
    m_ai_moderation_response = ai_moderation_response;
    m_ai_moderation_response_isSet = true;
}

bool OAIMessageModerationResult::is_ai_moderation_response_Set() const{
    return m_ai_moderation_response_isSet;
}

bool OAIMessageModerationResult::is_ai_moderation_response_Valid() const{
    return m_ai_moderation_response_isValid;
}

QString OAIMessageModerationResult::getBlockedWord() const {
    return m_blocked_word;
}
void OAIMessageModerationResult::setBlockedWord(const QString &blocked_word) {
    m_blocked_word = blocked_word;
    m_blocked_word_isSet = true;
}

bool OAIMessageModerationResult::is_blocked_word_Set() const{
    return m_blocked_word_isSet;
}

bool OAIMessageModerationResult::is_blocked_word_Valid() const{
    return m_blocked_word_isValid;
}

QString OAIMessageModerationResult::getBlocklistName() const {
    return m_blocklist_name;
}
void OAIMessageModerationResult::setBlocklistName(const QString &blocklist_name) {
    m_blocklist_name = blocklist_name;
    m_blocklist_name_isSet = true;
}

bool OAIMessageModerationResult::is_blocklist_name_Set() const{
    return m_blocklist_name_isSet;
}

bool OAIMessageModerationResult::is_blocklist_name_Valid() const{
    return m_blocklist_name_isValid;
}

QDateTime OAIMessageModerationResult::getCreatedAt() const {
    return m_created_at;
}
void OAIMessageModerationResult::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIMessageModerationResult::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIMessageModerationResult::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIMessageModerationResult::getMessageId() const {
    return m_message_id;
}
void OAIMessageModerationResult::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIMessageModerationResult::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIMessageModerationResult::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIMessageModerationResult::getModeratedBy() const {
    return m_moderated_by;
}
void OAIMessageModerationResult::setModeratedBy(const QString &moderated_by) {
    m_moderated_by = moderated_by;
    m_moderated_by_isSet = true;
}

bool OAIMessageModerationResult::is_moderated_by_Set() const{
    return m_moderated_by_isSet;
}

bool OAIMessageModerationResult::is_moderated_by_Valid() const{
    return m_moderated_by_isValid;
}

OAIThresholds OAIMessageModerationResult::getModerationThresholds() const {
    return m_moderation_thresholds;
}
void OAIMessageModerationResult::setModerationThresholds(const OAIThresholds &moderation_thresholds) {
    m_moderation_thresholds = moderation_thresholds;
    m_moderation_thresholds_isSet = true;
}

bool OAIMessageModerationResult::is_moderation_thresholds_Set() const{
    return m_moderation_thresholds_isSet;
}

bool OAIMessageModerationResult::is_moderation_thresholds_Valid() const{
    return m_moderation_thresholds_isValid;
}

QDateTime OAIMessageModerationResult::getUpdatedAt() const {
    return m_updated_at;
}
void OAIMessageModerationResult::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIMessageModerationResult::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIMessageModerationResult::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIMessageModerationResult::isUserBadKarma() const {
    return m_user_bad_karma;
}
void OAIMessageModerationResult::setUserBadKarma(const bool &user_bad_karma) {
    m_user_bad_karma = user_bad_karma;
    m_user_bad_karma_isSet = true;
}

bool OAIMessageModerationResult::is_user_bad_karma_Set() const{
    return m_user_bad_karma_isSet;
}

bool OAIMessageModerationResult::is_user_bad_karma_Valid() const{
    return m_user_bad_karma_isValid;
}

float OAIMessageModerationResult::getUserKarma() const {
    return m_user_karma;
}
void OAIMessageModerationResult::setUserKarma(const float &user_karma) {
    m_user_karma = user_karma;
    m_user_karma_isSet = true;
}

bool OAIMessageModerationResult::is_user_karma_Set() const{
    return m_user_karma_isSet;
}

bool OAIMessageModerationResult::is_user_karma_Valid() const{
    return m_user_karma_isValid;
}

bool OAIMessageModerationResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ai_moderation_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_word_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocklist_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moderated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moderation_thresholds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_bad_karma_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_karma_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageModerationResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_created_at_isValid && m_message_id_isValid && m_updated_at_isValid && m_user_bad_karma_isValid && m_user_karma_isValid && true;
}

} // namespace OpenAPI
