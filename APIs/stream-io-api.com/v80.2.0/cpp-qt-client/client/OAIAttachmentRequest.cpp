/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttachmentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttachmentRequest::OAIAttachmentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttachmentRequest::OAIAttachmentRequest() {
    this->initializeModel();
}

OAIAttachmentRequest::~OAIAttachmentRequest() {}

void OAIAttachmentRequest::initializeModel() {

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_asset_url_isSet = false;
    m_asset_url_isValid = false;

    m_author_icon_isSet = false;
    m_author_icon_isValid = false;

    m_author_link_isSet = false;
    m_author_link_isValid = false;

    m_author_name_isSet = false;
    m_author_name_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_fallback_isSet = false;
    m_fallback_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_footer_isSet = false;
    m_footer_isValid = false;

    m_footer_icon_isSet = false;
    m_footer_icon_isValid = false;

    m_giphy_isSet = false;
    m_giphy_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_og_scrape_url_isSet = false;
    m_og_scrape_url_isValid = false;

    m_original_height_isSet = false;
    m_original_height_isValid = false;

    m_original_width_isSet = false;
    m_original_width_isValid = false;

    m_pretext_isSet = false;
    m_pretext_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_thumb_url_isSet = false;
    m_thumb_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_title_link_isSet = false;
    m_title_link_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAttachmentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttachmentRequest::fromJsonObject(QJsonObject json) {

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_asset_url_isValid = ::OpenAPI::fromJsonValue(m_asset_url, json[QString("asset_url")]);
    m_asset_url_isSet = !json[QString("asset_url")].isNull() && m_asset_url_isValid;

    m_author_icon_isValid = ::OpenAPI::fromJsonValue(m_author_icon, json[QString("author_icon")]);
    m_author_icon_isSet = !json[QString("author_icon")].isNull() && m_author_icon_isValid;

    m_author_link_isValid = ::OpenAPI::fromJsonValue(m_author_link, json[QString("author_link")]);
    m_author_link_isSet = !json[QString("author_link")].isNull() && m_author_link_isValid;

    m_author_name_isValid = ::OpenAPI::fromJsonValue(m_author_name, json[QString("author_name")]);
    m_author_name_isSet = !json[QString("author_name")].isNull() && m_author_name_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_fallback_isValid = ::OpenAPI::fromJsonValue(m_fallback, json[QString("fallback")]);
    m_fallback_isSet = !json[QString("fallback")].isNull() && m_fallback_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_footer_isValid = ::OpenAPI::fromJsonValue(m_footer, json[QString("footer")]);
    m_footer_isSet = !json[QString("footer")].isNull() && m_footer_isValid;

    m_footer_icon_isValid = ::OpenAPI::fromJsonValue(m_footer_icon, json[QString("footer_icon")]);
    m_footer_icon_isSet = !json[QString("footer_icon")].isNull() && m_footer_icon_isValid;

    m_giphy_isValid = ::OpenAPI::fromJsonValue(m_giphy, json[QString("giphy")]);
    m_giphy_isSet = !json[QString("giphy")].isNull() && m_giphy_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;

    m_og_scrape_url_isValid = ::OpenAPI::fromJsonValue(m_og_scrape_url, json[QString("og_scrape_url")]);
    m_og_scrape_url_isSet = !json[QString("og_scrape_url")].isNull() && m_og_scrape_url_isValid;

    m_original_height_isValid = ::OpenAPI::fromJsonValue(m_original_height, json[QString("original_height")]);
    m_original_height_isSet = !json[QString("original_height")].isNull() && m_original_height_isValid;

    m_original_width_isValid = ::OpenAPI::fromJsonValue(m_original_width, json[QString("original_width")]);
    m_original_width_isSet = !json[QString("original_width")].isNull() && m_original_width_isValid;

    m_pretext_isValid = ::OpenAPI::fromJsonValue(m_pretext, json[QString("pretext")]);
    m_pretext_isSet = !json[QString("pretext")].isNull() && m_pretext_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_thumb_url_isValid = ::OpenAPI::fromJsonValue(m_thumb_url, json[QString("thumb_url")]);
    m_thumb_url_isSet = !json[QString("thumb_url")].isNull() && m_thumb_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_title_link_isValid = ::OpenAPI::fromJsonValue(m_title_link, json[QString("title_link")]);
    m_title_link_isSet = !json[QString("title_link")].isNull() && m_title_link_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAttachmentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttachmentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_asset_url_isSet) {
        obj.insert(QString("asset_url"), ::OpenAPI::toJsonValue(m_asset_url));
    }
    if (m_author_icon_isSet) {
        obj.insert(QString("author_icon"), ::OpenAPI::toJsonValue(m_author_icon));
    }
    if (m_author_link_isSet) {
        obj.insert(QString("author_link"), ::OpenAPI::toJsonValue(m_author_link));
    }
    if (m_author_name_isSet) {
        obj.insert(QString("author_name"), ::OpenAPI::toJsonValue(m_author_name));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_fallback_isSet) {
        obj.insert(QString("fallback"), ::OpenAPI::toJsonValue(m_fallback));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_footer_isSet) {
        obj.insert(QString("footer"), ::OpenAPI::toJsonValue(m_footer));
    }
    if (m_footer_icon_isSet) {
        obj.insert(QString("footer_icon"), ::OpenAPI::toJsonValue(m_footer_icon));
    }
    if (m_giphy.isSet()) {
        obj.insert(QString("giphy"), ::OpenAPI::toJsonValue(m_giphy));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_og_scrape_url_isSet) {
        obj.insert(QString("og_scrape_url"), ::OpenAPI::toJsonValue(m_og_scrape_url));
    }
    if (m_original_height_isSet) {
        obj.insert(QString("original_height"), ::OpenAPI::toJsonValue(m_original_height));
    }
    if (m_original_width_isSet) {
        obj.insert(QString("original_width"), ::OpenAPI::toJsonValue(m_original_width));
    }
    if (m_pretext_isSet) {
        obj.insert(QString("pretext"), ::OpenAPI::toJsonValue(m_pretext));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_thumb_url_isSet) {
        obj.insert(QString("thumb_url"), ::OpenAPI::toJsonValue(m_thumb_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_title_link_isSet) {
        obj.insert(QString("title_link"), ::OpenAPI::toJsonValue(m_title_link));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIActionRequest> OAIAttachmentRequest::getActions() const {
    return m_actions;
}
void OAIAttachmentRequest::setActions(const QList<OAIActionRequest> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIAttachmentRequest::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIAttachmentRequest::is_actions_Valid() const{
    return m_actions_isValid;
}

QString OAIAttachmentRequest::getAssetUrl() const {
    return m_asset_url;
}
void OAIAttachmentRequest::setAssetUrl(const QString &asset_url) {
    m_asset_url = asset_url;
    m_asset_url_isSet = true;
}

bool OAIAttachmentRequest::is_asset_url_Set() const{
    return m_asset_url_isSet;
}

bool OAIAttachmentRequest::is_asset_url_Valid() const{
    return m_asset_url_isValid;
}

QString OAIAttachmentRequest::getAuthorIcon() const {
    return m_author_icon;
}
void OAIAttachmentRequest::setAuthorIcon(const QString &author_icon) {
    m_author_icon = author_icon;
    m_author_icon_isSet = true;
}

bool OAIAttachmentRequest::is_author_icon_Set() const{
    return m_author_icon_isSet;
}

bool OAIAttachmentRequest::is_author_icon_Valid() const{
    return m_author_icon_isValid;
}

QString OAIAttachmentRequest::getAuthorLink() const {
    return m_author_link;
}
void OAIAttachmentRequest::setAuthorLink(const QString &author_link) {
    m_author_link = author_link;
    m_author_link_isSet = true;
}

bool OAIAttachmentRequest::is_author_link_Set() const{
    return m_author_link_isSet;
}

bool OAIAttachmentRequest::is_author_link_Valid() const{
    return m_author_link_isValid;
}

QString OAIAttachmentRequest::getAuthorName() const {
    return m_author_name;
}
void OAIAttachmentRequest::setAuthorName(const QString &author_name) {
    m_author_name = author_name;
    m_author_name_isSet = true;
}

bool OAIAttachmentRequest::is_author_name_Set() const{
    return m_author_name_isSet;
}

bool OAIAttachmentRequest::is_author_name_Valid() const{
    return m_author_name_isValid;
}

QString OAIAttachmentRequest::getColor() const {
    return m_color;
}
void OAIAttachmentRequest::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIAttachmentRequest::is_color_Set() const{
    return m_color_isSet;
}

bool OAIAttachmentRequest::is_color_Valid() const{
    return m_color_isValid;
}

QString OAIAttachmentRequest::getFallback() const {
    return m_fallback;
}
void OAIAttachmentRequest::setFallback(const QString &fallback) {
    m_fallback = fallback;
    m_fallback_isSet = true;
}

bool OAIAttachmentRequest::is_fallback_Set() const{
    return m_fallback_isSet;
}

bool OAIAttachmentRequest::is_fallback_Valid() const{
    return m_fallback_isValid;
}

QList<OAIFieldRequest> OAIAttachmentRequest::getFields() const {
    return m_fields;
}
void OAIAttachmentRequest::setFields(const QList<OAIFieldRequest> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIAttachmentRequest::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIAttachmentRequest::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAIAttachmentRequest::getFooter() const {
    return m_footer;
}
void OAIAttachmentRequest::setFooter(const QString &footer) {
    m_footer = footer;
    m_footer_isSet = true;
}

bool OAIAttachmentRequest::is_footer_Set() const{
    return m_footer_isSet;
}

bool OAIAttachmentRequest::is_footer_Valid() const{
    return m_footer_isValid;
}

QString OAIAttachmentRequest::getFooterIcon() const {
    return m_footer_icon;
}
void OAIAttachmentRequest::setFooterIcon(const QString &footer_icon) {
    m_footer_icon = footer_icon;
    m_footer_icon_isSet = true;
}

bool OAIAttachmentRequest::is_footer_icon_Set() const{
    return m_footer_icon_isSet;
}

bool OAIAttachmentRequest::is_footer_icon_Valid() const{
    return m_footer_icon_isValid;
}

OAIImagesRequest OAIAttachmentRequest::getGiphy() const {
    return m_giphy;
}
void OAIAttachmentRequest::setGiphy(const OAIImagesRequest &giphy) {
    m_giphy = giphy;
    m_giphy_isSet = true;
}

bool OAIAttachmentRequest::is_giphy_Set() const{
    return m_giphy_isSet;
}

bool OAIAttachmentRequest::is_giphy_Valid() const{
    return m_giphy_isValid;
}

QString OAIAttachmentRequest::getImageUrl() const {
    return m_image_url;
}
void OAIAttachmentRequest::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIAttachmentRequest::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIAttachmentRequest::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAIAttachmentRequest::getOgScrapeUrl() const {
    return m_og_scrape_url;
}
void OAIAttachmentRequest::setOgScrapeUrl(const QString &og_scrape_url) {
    m_og_scrape_url = og_scrape_url;
    m_og_scrape_url_isSet = true;
}

bool OAIAttachmentRequest::is_og_scrape_url_Set() const{
    return m_og_scrape_url_isSet;
}

bool OAIAttachmentRequest::is_og_scrape_url_Valid() const{
    return m_og_scrape_url_isValid;
}

qint32 OAIAttachmentRequest::getOriginalHeight() const {
    return m_original_height;
}
void OAIAttachmentRequest::setOriginalHeight(const qint32 &original_height) {
    m_original_height = original_height;
    m_original_height_isSet = true;
}

bool OAIAttachmentRequest::is_original_height_Set() const{
    return m_original_height_isSet;
}

bool OAIAttachmentRequest::is_original_height_Valid() const{
    return m_original_height_isValid;
}

qint32 OAIAttachmentRequest::getOriginalWidth() const {
    return m_original_width;
}
void OAIAttachmentRequest::setOriginalWidth(const qint32 &original_width) {
    m_original_width = original_width;
    m_original_width_isSet = true;
}

bool OAIAttachmentRequest::is_original_width_Set() const{
    return m_original_width_isSet;
}

bool OAIAttachmentRequest::is_original_width_Valid() const{
    return m_original_width_isValid;
}

QString OAIAttachmentRequest::getPretext() const {
    return m_pretext;
}
void OAIAttachmentRequest::setPretext(const QString &pretext) {
    m_pretext = pretext;
    m_pretext_isSet = true;
}

bool OAIAttachmentRequest::is_pretext_Set() const{
    return m_pretext_isSet;
}

bool OAIAttachmentRequest::is_pretext_Valid() const{
    return m_pretext_isValid;
}

QString OAIAttachmentRequest::getText() const {
    return m_text;
}
void OAIAttachmentRequest::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIAttachmentRequest::is_text_Set() const{
    return m_text_isSet;
}

bool OAIAttachmentRequest::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIAttachmentRequest::getThumbUrl() const {
    return m_thumb_url;
}
void OAIAttachmentRequest::setThumbUrl(const QString &thumb_url) {
    m_thumb_url = thumb_url;
    m_thumb_url_isSet = true;
}

bool OAIAttachmentRequest::is_thumb_url_Set() const{
    return m_thumb_url_isSet;
}

bool OAIAttachmentRequest::is_thumb_url_Valid() const{
    return m_thumb_url_isValid;
}

QString OAIAttachmentRequest::getTitle() const {
    return m_title;
}
void OAIAttachmentRequest::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAttachmentRequest::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAttachmentRequest::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIAttachmentRequest::getTitleLink() const {
    return m_title_link;
}
void OAIAttachmentRequest::setTitleLink(const QString &title_link) {
    m_title_link = title_link;
    m_title_link_isSet = true;
}

bool OAIAttachmentRequest::is_title_link_Set() const{
    return m_title_link_isSet;
}

bool OAIAttachmentRequest::is_title_link_Valid() const{
    return m_title_link_isValid;
}

QString OAIAttachmentRequest::getType() const {
    return m_type;
}
void OAIAttachmentRequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAttachmentRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAttachmentRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAttachmentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fallback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_footer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_footer_icon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_giphy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_og_scrape_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pretext_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttachmentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
