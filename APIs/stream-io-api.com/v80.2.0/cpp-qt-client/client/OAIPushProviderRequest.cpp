/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPushProviderRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPushProviderRequest::OAIPushProviderRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPushProviderRequest::OAIPushProviderRequest() {
    this->initializeModel();
}

OAIPushProviderRequest::~OAIPushProviderRequest() {}

void OAIPushProviderRequest::initializeModel() {

    m_apn_auth_key_isSet = false;
    m_apn_auth_key_isValid = false;

    m_apn_auth_type_isSet = false;
    m_apn_auth_type_isValid = false;

    m_apn_development_isSet = false;
    m_apn_development_isValid = false;

    m_apn_host_isSet = false;
    m_apn_host_isValid = false;

    m_apn_key_id_isSet = false;
    m_apn_key_id_isValid = false;

    m_apn_notification_template_isSet = false;
    m_apn_notification_template_isValid = false;

    m_apn_p12_cert_isSet = false;
    m_apn_p12_cert_isValid = false;

    m_apn_team_id_isSet = false;
    m_apn_team_id_isValid = false;

    m_apn_topic_isSet = false;
    m_apn_topic_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disabled_at_isSet = false;
    m_disabled_at_isValid = false;

    m_disabled_reason_isSet = false;
    m_disabled_reason_isValid = false;

    m_firebase_apn_template_isSet = false;
    m_firebase_apn_template_isValid = false;

    m_firebase_credentials_isSet = false;
    m_firebase_credentials_isValid = false;

    m_firebase_data_template_isSet = false;
    m_firebase_data_template_isValid = false;

    m_firebase_notification_template_isSet = false;
    m_firebase_notification_template_isValid = false;

    m_firebase_server_key_isSet = false;
    m_firebase_server_key_isValid = false;

    m_huawei_app_id_isSet = false;
    m_huawei_app_id_isValid = false;

    m_huawei_app_secret_isSet = false;
    m_huawei_app_secret_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_xiaomi_app_secret_isSet = false;
    m_xiaomi_app_secret_isValid = false;

    m_xiaomi_package_name_isSet = false;
    m_xiaomi_package_name_isValid = false;
}

void OAIPushProviderRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPushProviderRequest::fromJsonObject(QJsonObject json) {

    m_apn_auth_key_isValid = ::OpenAPI::fromJsonValue(m_apn_auth_key, json[QString("apn_auth_key")]);
    m_apn_auth_key_isSet = !json[QString("apn_auth_key")].isNull() && m_apn_auth_key_isValid;

    m_apn_auth_type_isValid = ::OpenAPI::fromJsonValue(m_apn_auth_type, json[QString("apn_auth_type")]);
    m_apn_auth_type_isSet = !json[QString("apn_auth_type")].isNull() && m_apn_auth_type_isValid;

    m_apn_development_isValid = ::OpenAPI::fromJsonValue(m_apn_development, json[QString("apn_development")]);
    m_apn_development_isSet = !json[QString("apn_development")].isNull() && m_apn_development_isValid;

    m_apn_host_isValid = ::OpenAPI::fromJsonValue(m_apn_host, json[QString("apn_host")]);
    m_apn_host_isSet = !json[QString("apn_host")].isNull() && m_apn_host_isValid;

    m_apn_key_id_isValid = ::OpenAPI::fromJsonValue(m_apn_key_id, json[QString("apn_key_id")]);
    m_apn_key_id_isSet = !json[QString("apn_key_id")].isNull() && m_apn_key_id_isValid;

    m_apn_notification_template_isValid = ::OpenAPI::fromJsonValue(m_apn_notification_template, json[QString("apn_notification_template")]);
    m_apn_notification_template_isSet = !json[QString("apn_notification_template")].isNull() && m_apn_notification_template_isValid;

    m_apn_p12_cert_isValid = ::OpenAPI::fromJsonValue(m_apn_p12_cert, json[QString("apn_p12_cert")]);
    m_apn_p12_cert_isSet = !json[QString("apn_p12_cert")].isNull() && m_apn_p12_cert_isValid;

    m_apn_team_id_isValid = ::OpenAPI::fromJsonValue(m_apn_team_id, json[QString("apn_team_id")]);
    m_apn_team_id_isSet = !json[QString("apn_team_id")].isNull() && m_apn_team_id_isValid;

    m_apn_topic_isValid = ::OpenAPI::fromJsonValue(m_apn_topic, json[QString("apn_topic")]);
    m_apn_topic_isSet = !json[QString("apn_topic")].isNull() && m_apn_topic_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disabled_at_isValid = ::OpenAPI::fromJsonValue(m_disabled_at, json[QString("disabled_at")]);
    m_disabled_at_isSet = !json[QString("disabled_at")].isNull() && m_disabled_at_isValid;

    m_disabled_reason_isValid = ::OpenAPI::fromJsonValue(m_disabled_reason, json[QString("disabled_reason")]);
    m_disabled_reason_isSet = !json[QString("disabled_reason")].isNull() && m_disabled_reason_isValid;

    m_firebase_apn_template_isValid = ::OpenAPI::fromJsonValue(m_firebase_apn_template, json[QString("firebase_apn_template")]);
    m_firebase_apn_template_isSet = !json[QString("firebase_apn_template")].isNull() && m_firebase_apn_template_isValid;

    m_firebase_credentials_isValid = ::OpenAPI::fromJsonValue(m_firebase_credentials, json[QString("firebase_credentials")]);
    m_firebase_credentials_isSet = !json[QString("firebase_credentials")].isNull() && m_firebase_credentials_isValid;

    m_firebase_data_template_isValid = ::OpenAPI::fromJsonValue(m_firebase_data_template, json[QString("firebase_data_template")]);
    m_firebase_data_template_isSet = !json[QString("firebase_data_template")].isNull() && m_firebase_data_template_isValid;

    m_firebase_notification_template_isValid = ::OpenAPI::fromJsonValue(m_firebase_notification_template, json[QString("firebase_notification_template")]);
    m_firebase_notification_template_isSet = !json[QString("firebase_notification_template")].isNull() && m_firebase_notification_template_isValid;

    m_firebase_server_key_isValid = ::OpenAPI::fromJsonValue(m_firebase_server_key, json[QString("firebase_server_key")]);
    m_firebase_server_key_isSet = !json[QString("firebase_server_key")].isNull() && m_firebase_server_key_isValid;

    m_huawei_app_id_isValid = ::OpenAPI::fromJsonValue(m_huawei_app_id, json[QString("huawei_app_id")]);
    m_huawei_app_id_isSet = !json[QString("huawei_app_id")].isNull() && m_huawei_app_id_isValid;

    m_huawei_app_secret_isValid = ::OpenAPI::fromJsonValue(m_huawei_app_secret, json[QString("huawei_app_secret")]);
    m_huawei_app_secret_isSet = !json[QString("huawei_app_secret")].isNull() && m_huawei_app_secret_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_xiaomi_app_secret_isValid = ::OpenAPI::fromJsonValue(m_xiaomi_app_secret, json[QString("xiaomi_app_secret")]);
    m_xiaomi_app_secret_isSet = !json[QString("xiaomi_app_secret")].isNull() && m_xiaomi_app_secret_isValid;

    m_xiaomi_package_name_isValid = ::OpenAPI::fromJsonValue(m_xiaomi_package_name, json[QString("xiaomi_package_name")]);
    m_xiaomi_package_name_isSet = !json[QString("xiaomi_package_name")].isNull() && m_xiaomi_package_name_isValid;
}

QString OAIPushProviderRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPushProviderRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_apn_auth_key_isSet) {
        obj.insert(QString("apn_auth_key"), ::OpenAPI::toJsonValue(m_apn_auth_key));
    }
    if (m_apn_auth_type_isSet) {
        obj.insert(QString("apn_auth_type"), ::OpenAPI::toJsonValue(m_apn_auth_type));
    }
    if (m_apn_development_isSet) {
        obj.insert(QString("apn_development"), ::OpenAPI::toJsonValue(m_apn_development));
    }
    if (m_apn_host_isSet) {
        obj.insert(QString("apn_host"), ::OpenAPI::toJsonValue(m_apn_host));
    }
    if (m_apn_key_id_isSet) {
        obj.insert(QString("apn_key_id"), ::OpenAPI::toJsonValue(m_apn_key_id));
    }
    if (m_apn_notification_template_isSet) {
        obj.insert(QString("apn_notification_template"), ::OpenAPI::toJsonValue(m_apn_notification_template));
    }
    if (m_apn_p12_cert_isSet) {
        obj.insert(QString("apn_p12_cert"), ::OpenAPI::toJsonValue(m_apn_p12_cert));
    }
    if (m_apn_team_id_isSet) {
        obj.insert(QString("apn_team_id"), ::OpenAPI::toJsonValue(m_apn_team_id));
    }
    if (m_apn_topic_isSet) {
        obj.insert(QString("apn_topic"), ::OpenAPI::toJsonValue(m_apn_topic));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disabled_at_isSet) {
        obj.insert(QString("disabled_at"), ::OpenAPI::toJsonValue(m_disabled_at));
    }
    if (m_disabled_reason_isSet) {
        obj.insert(QString("disabled_reason"), ::OpenAPI::toJsonValue(m_disabled_reason));
    }
    if (m_firebase_apn_template_isSet) {
        obj.insert(QString("firebase_apn_template"), ::OpenAPI::toJsonValue(m_firebase_apn_template));
    }
    if (m_firebase_credentials_isSet) {
        obj.insert(QString("firebase_credentials"), ::OpenAPI::toJsonValue(m_firebase_credentials));
    }
    if (m_firebase_data_template_isSet) {
        obj.insert(QString("firebase_data_template"), ::OpenAPI::toJsonValue(m_firebase_data_template));
    }
    if (m_firebase_notification_template_isSet) {
        obj.insert(QString("firebase_notification_template"), ::OpenAPI::toJsonValue(m_firebase_notification_template));
    }
    if (m_firebase_server_key_isSet) {
        obj.insert(QString("firebase_server_key"), ::OpenAPI::toJsonValue(m_firebase_server_key));
    }
    if (m_huawei_app_id_isSet) {
        obj.insert(QString("huawei_app_id"), ::OpenAPI::toJsonValue(m_huawei_app_id));
    }
    if (m_huawei_app_secret_isSet) {
        obj.insert(QString("huawei_app_secret"), ::OpenAPI::toJsonValue(m_huawei_app_secret));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_xiaomi_app_secret_isSet) {
        obj.insert(QString("xiaomi_app_secret"), ::OpenAPI::toJsonValue(m_xiaomi_app_secret));
    }
    if (m_xiaomi_package_name_isSet) {
        obj.insert(QString("xiaomi_package_name"), ::OpenAPI::toJsonValue(m_xiaomi_package_name));
    }
    return obj;
}

QString OAIPushProviderRequest::getApnAuthKey() const {
    return m_apn_auth_key;
}
void OAIPushProviderRequest::setApnAuthKey(const QString &apn_auth_key) {
    m_apn_auth_key = apn_auth_key;
    m_apn_auth_key_isSet = true;
}

bool OAIPushProviderRequest::is_apn_auth_key_Set() const{
    return m_apn_auth_key_isSet;
}

bool OAIPushProviderRequest::is_apn_auth_key_Valid() const{
    return m_apn_auth_key_isValid;
}

QString OAIPushProviderRequest::getApnAuthType() const {
    return m_apn_auth_type;
}
void OAIPushProviderRequest::setApnAuthType(const QString &apn_auth_type) {
    m_apn_auth_type = apn_auth_type;
    m_apn_auth_type_isSet = true;
}

bool OAIPushProviderRequest::is_apn_auth_type_Set() const{
    return m_apn_auth_type_isSet;
}

bool OAIPushProviderRequest::is_apn_auth_type_Valid() const{
    return m_apn_auth_type_isValid;
}

bool OAIPushProviderRequest::isApnDevelopment() const {
    return m_apn_development;
}
void OAIPushProviderRequest::setApnDevelopment(const bool &apn_development) {
    m_apn_development = apn_development;
    m_apn_development_isSet = true;
}

bool OAIPushProviderRequest::is_apn_development_Set() const{
    return m_apn_development_isSet;
}

bool OAIPushProviderRequest::is_apn_development_Valid() const{
    return m_apn_development_isValid;
}

QString OAIPushProviderRequest::getApnHost() const {
    return m_apn_host;
}
void OAIPushProviderRequest::setApnHost(const QString &apn_host) {
    m_apn_host = apn_host;
    m_apn_host_isSet = true;
}

bool OAIPushProviderRequest::is_apn_host_Set() const{
    return m_apn_host_isSet;
}

bool OAIPushProviderRequest::is_apn_host_Valid() const{
    return m_apn_host_isValid;
}

QString OAIPushProviderRequest::getApnKeyId() const {
    return m_apn_key_id;
}
void OAIPushProviderRequest::setApnKeyId(const QString &apn_key_id) {
    m_apn_key_id = apn_key_id;
    m_apn_key_id_isSet = true;
}

bool OAIPushProviderRequest::is_apn_key_id_Set() const{
    return m_apn_key_id_isSet;
}

bool OAIPushProviderRequest::is_apn_key_id_Valid() const{
    return m_apn_key_id_isValid;
}

QString OAIPushProviderRequest::getApnNotificationTemplate() const {
    return m_apn_notification_template;
}
void OAIPushProviderRequest::setApnNotificationTemplate(const QString &apn_notification_template) {
    m_apn_notification_template = apn_notification_template;
    m_apn_notification_template_isSet = true;
}

bool OAIPushProviderRequest::is_apn_notification_template_Set() const{
    return m_apn_notification_template_isSet;
}

bool OAIPushProviderRequest::is_apn_notification_template_Valid() const{
    return m_apn_notification_template_isValid;
}

QString OAIPushProviderRequest::getApnP12Cert() const {
    return m_apn_p12_cert;
}
void OAIPushProviderRequest::setApnP12Cert(const QString &apn_p12_cert) {
    m_apn_p12_cert = apn_p12_cert;
    m_apn_p12_cert_isSet = true;
}

bool OAIPushProviderRequest::is_apn_p12_cert_Set() const{
    return m_apn_p12_cert_isSet;
}

bool OAIPushProviderRequest::is_apn_p12_cert_Valid() const{
    return m_apn_p12_cert_isValid;
}

QString OAIPushProviderRequest::getApnTeamId() const {
    return m_apn_team_id;
}
void OAIPushProviderRequest::setApnTeamId(const QString &apn_team_id) {
    m_apn_team_id = apn_team_id;
    m_apn_team_id_isSet = true;
}

bool OAIPushProviderRequest::is_apn_team_id_Set() const{
    return m_apn_team_id_isSet;
}

bool OAIPushProviderRequest::is_apn_team_id_Valid() const{
    return m_apn_team_id_isValid;
}

QString OAIPushProviderRequest::getApnTopic() const {
    return m_apn_topic;
}
void OAIPushProviderRequest::setApnTopic(const QString &apn_topic) {
    m_apn_topic = apn_topic;
    m_apn_topic_isSet = true;
}

bool OAIPushProviderRequest::is_apn_topic_Set() const{
    return m_apn_topic_isSet;
}

bool OAIPushProviderRequest::is_apn_topic_Valid() const{
    return m_apn_topic_isValid;
}

QDateTime OAIPushProviderRequest::getCreatedAt() const {
    return m_created_at;
}
void OAIPushProviderRequest::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPushProviderRequest::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPushProviderRequest::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIPushProviderRequest::getDescription() const {
    return m_description;
}
void OAIPushProviderRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPushProviderRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPushProviderRequest::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAIPushProviderRequest::getDisabledAt() const {
    return m_disabled_at;
}
void OAIPushProviderRequest::setDisabledAt(const QDateTime &disabled_at) {
    m_disabled_at = disabled_at;
    m_disabled_at_isSet = true;
}

bool OAIPushProviderRequest::is_disabled_at_Set() const{
    return m_disabled_at_isSet;
}

bool OAIPushProviderRequest::is_disabled_at_Valid() const{
    return m_disabled_at_isValid;
}

QString OAIPushProviderRequest::getDisabledReason() const {
    return m_disabled_reason;
}
void OAIPushProviderRequest::setDisabledReason(const QString &disabled_reason) {
    m_disabled_reason = disabled_reason;
    m_disabled_reason_isSet = true;
}

bool OAIPushProviderRequest::is_disabled_reason_Set() const{
    return m_disabled_reason_isSet;
}

bool OAIPushProviderRequest::is_disabled_reason_Valid() const{
    return m_disabled_reason_isValid;
}

QString OAIPushProviderRequest::getFirebaseApnTemplate() const {
    return m_firebase_apn_template;
}
void OAIPushProviderRequest::setFirebaseApnTemplate(const QString &firebase_apn_template) {
    m_firebase_apn_template = firebase_apn_template;
    m_firebase_apn_template_isSet = true;
}

bool OAIPushProviderRequest::is_firebase_apn_template_Set() const{
    return m_firebase_apn_template_isSet;
}

bool OAIPushProviderRequest::is_firebase_apn_template_Valid() const{
    return m_firebase_apn_template_isValid;
}

QString OAIPushProviderRequest::getFirebaseCredentials() const {
    return m_firebase_credentials;
}
void OAIPushProviderRequest::setFirebaseCredentials(const QString &firebase_credentials) {
    m_firebase_credentials = firebase_credentials;
    m_firebase_credentials_isSet = true;
}

bool OAIPushProviderRequest::is_firebase_credentials_Set() const{
    return m_firebase_credentials_isSet;
}

bool OAIPushProviderRequest::is_firebase_credentials_Valid() const{
    return m_firebase_credentials_isValid;
}

QString OAIPushProviderRequest::getFirebaseDataTemplate() const {
    return m_firebase_data_template;
}
void OAIPushProviderRequest::setFirebaseDataTemplate(const QString &firebase_data_template) {
    m_firebase_data_template = firebase_data_template;
    m_firebase_data_template_isSet = true;
}

bool OAIPushProviderRequest::is_firebase_data_template_Set() const{
    return m_firebase_data_template_isSet;
}

bool OAIPushProviderRequest::is_firebase_data_template_Valid() const{
    return m_firebase_data_template_isValid;
}

QString OAIPushProviderRequest::getFirebaseNotificationTemplate() const {
    return m_firebase_notification_template;
}
void OAIPushProviderRequest::setFirebaseNotificationTemplate(const QString &firebase_notification_template) {
    m_firebase_notification_template = firebase_notification_template;
    m_firebase_notification_template_isSet = true;
}

bool OAIPushProviderRequest::is_firebase_notification_template_Set() const{
    return m_firebase_notification_template_isSet;
}

bool OAIPushProviderRequest::is_firebase_notification_template_Valid() const{
    return m_firebase_notification_template_isValid;
}

QString OAIPushProviderRequest::getFirebaseServerKey() const {
    return m_firebase_server_key;
}
void OAIPushProviderRequest::setFirebaseServerKey(const QString &firebase_server_key) {
    m_firebase_server_key = firebase_server_key;
    m_firebase_server_key_isSet = true;
}

bool OAIPushProviderRequest::is_firebase_server_key_Set() const{
    return m_firebase_server_key_isSet;
}

bool OAIPushProviderRequest::is_firebase_server_key_Valid() const{
    return m_firebase_server_key_isValid;
}

QString OAIPushProviderRequest::getHuaweiAppId() const {
    return m_huawei_app_id;
}
void OAIPushProviderRequest::setHuaweiAppId(const QString &huawei_app_id) {
    m_huawei_app_id = huawei_app_id;
    m_huawei_app_id_isSet = true;
}

bool OAIPushProviderRequest::is_huawei_app_id_Set() const{
    return m_huawei_app_id_isSet;
}

bool OAIPushProviderRequest::is_huawei_app_id_Valid() const{
    return m_huawei_app_id_isValid;
}

QString OAIPushProviderRequest::getHuaweiAppSecret() const {
    return m_huawei_app_secret;
}
void OAIPushProviderRequest::setHuaweiAppSecret(const QString &huawei_app_secret) {
    m_huawei_app_secret = huawei_app_secret;
    m_huawei_app_secret_isSet = true;
}

bool OAIPushProviderRequest::is_huawei_app_secret_Set() const{
    return m_huawei_app_secret_isSet;
}

bool OAIPushProviderRequest::is_huawei_app_secret_Valid() const{
    return m_huawei_app_secret_isValid;
}

QString OAIPushProviderRequest::getName() const {
    return m_name;
}
void OAIPushProviderRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPushProviderRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPushProviderRequest::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIPushProviderRequest::getType() const {
    return m_type;
}
void OAIPushProviderRequest::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPushProviderRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPushProviderRequest::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIPushProviderRequest::getUpdatedAt() const {
    return m_updated_at;
}
void OAIPushProviderRequest::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIPushProviderRequest::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIPushProviderRequest::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QString OAIPushProviderRequest::getXiaomiAppSecret() const {
    return m_xiaomi_app_secret;
}
void OAIPushProviderRequest::setXiaomiAppSecret(const QString &xiaomi_app_secret) {
    m_xiaomi_app_secret = xiaomi_app_secret;
    m_xiaomi_app_secret_isSet = true;
}

bool OAIPushProviderRequest::is_xiaomi_app_secret_Set() const{
    return m_xiaomi_app_secret_isSet;
}

bool OAIPushProviderRequest::is_xiaomi_app_secret_Valid() const{
    return m_xiaomi_app_secret_isValid;
}

QString OAIPushProviderRequest::getXiaomiPackageName() const {
    return m_xiaomi_package_name;
}
void OAIPushProviderRequest::setXiaomiPackageName(const QString &xiaomi_package_name) {
    m_xiaomi_package_name = xiaomi_package_name;
    m_xiaomi_package_name_isSet = true;
}

bool OAIPushProviderRequest::is_xiaomi_package_name_Set() const{
    return m_xiaomi_package_name_isSet;
}

bool OAIPushProviderRequest::is_xiaomi_package_name_Valid() const{
    return m_xiaomi_package_name_isValid;
}

bool OAIPushProviderRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apn_auth_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apn_auth_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apn_development_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apn_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apn_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apn_notification_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apn_p12_cert_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apn_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apn_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firebase_apn_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firebase_credentials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firebase_data_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firebase_notification_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firebase_server_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_huawei_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_huawei_app_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xiaomi_app_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xiaomi_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPushProviderRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
