/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOwnUserRequest.h
 *
 * 
 */

#ifndef OAIOwnUserRequest_H
#define OAIOwnUserRequest_H

#include <QJsonObject>

#include "OAIChannelMuteRequest.h"
#include "OAIDeviceRequest.h"
#include "OAIPushNotificationSettingsRequest.h"
#include "OAIUserMuteRequest.h"
#include <QDateTime>
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIChannelMuteRequest;
class OAIDeviceRequest;
class OAIUserMuteRequest;
class OAIPushNotificationSettingsRequest;

class OAIOwnUserRequest : public OAIObject {
public:
    OAIOwnUserRequest();
    OAIOwnUserRequest(QString json);
    ~OAIOwnUserRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isBanned() const;
    void setBanned(const bool &banned);
    bool is_banned_Set() const;
    bool is_banned_Valid() const;

    QList<OAIChannelMuteRequest> getChannelMutes() const;
    void setChannelMutes(const QList<OAIChannelMuteRequest> &channel_mutes);
    bool is_channel_mutes_Set() const;
    bool is_channel_mutes_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QDateTime getDeactivatedAt() const;
    void setDeactivatedAt(const QDateTime &deactivated_at);
    bool is_deactivated_at_Set() const;
    bool is_deactivated_at_Valid() const;

    QDateTime getDeletedAt() const;
    void setDeletedAt(const QDateTime &deleted_at);
    bool is_deleted_at_Set() const;
    bool is_deleted_at_Valid() const;

    QList<OAIDeviceRequest> getDevices() const;
    void setDevices(const QList<OAIDeviceRequest> &devices);
    bool is_devices_Set() const;
    bool is_devices_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isInvisible() const;
    void setInvisible(const bool &invisible);
    bool is_invisible_Set() const;
    bool is_invisible_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    QDateTime getLastActive() const;
    void setLastActive(const QDateTime &last_active);
    bool is_last_active_Set() const;
    bool is_last_active_Valid() const;

    QList<QString> getLatestHiddenChannels() const;
    void setLatestHiddenChannels(const QList<QString> &latest_hidden_channels);
    bool is_latest_hidden_channels_Set() const;
    bool is_latest_hidden_channels_Valid() const;

    QList<OAIUserMuteRequest> getMutes() const;
    void setMutes(const QList<OAIUserMuteRequest> &mutes);
    bool is_mutes_Set() const;
    bool is_mutes_Valid() const;

    bool isOnline() const;
    void setOnline(const bool &online);
    bool is_online_Set() const;
    bool is_online_Valid() const;

    OAIPushNotificationSettingsRequest getPushNotifications() const;
    void setPushNotifications(const OAIPushNotificationSettingsRequest &push_notifications);
    bool is_push_notifications_Set() const;
    bool is_push_notifications_Valid() const;

    QString getRole() const;
    void setRole(const QString &role);
    bool is_role_Set() const;
    bool is_role_Valid() const;

    QList<QString> getTeams() const;
    void setTeams(const QList<QString> &teams);
    bool is_teams_Set() const;
    bool is_teams_Valid() const;

    qint32 getTotalUnreadCount() const;
    void setTotalUnreadCount(const qint32 &total_unread_count);
    bool is_total_unread_count_Set() const;
    bool is_total_unread_count_Valid() const;

    qint32 getUnreadChannels() const;
    void setUnreadChannels(const qint32 &unread_channels);
    bool is_unread_channels_Set() const;
    bool is_unread_channels_Valid() const;

    qint32 getUnreadCount() const;
    void setUnreadCount(const qint32 &unread_count);
    bool is_unread_count_Set() const;
    bool is_unread_count_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_banned;
    bool m_banned_isSet;
    bool m_banned_isValid;

    QList<OAIChannelMuteRequest> m_channel_mutes;
    bool m_channel_mutes_isSet;
    bool m_channel_mutes_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QDateTime m_deactivated_at;
    bool m_deactivated_at_isSet;
    bool m_deactivated_at_isValid;

    QDateTime m_deleted_at;
    bool m_deleted_at_isSet;
    bool m_deleted_at_isValid;

    QList<OAIDeviceRequest> m_devices;
    bool m_devices_isSet;
    bool m_devices_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_invisible;
    bool m_invisible_isSet;
    bool m_invisible_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    QDateTime m_last_active;
    bool m_last_active_isSet;
    bool m_last_active_isValid;

    QList<QString> m_latest_hidden_channels;
    bool m_latest_hidden_channels_isSet;
    bool m_latest_hidden_channels_isValid;

    QList<OAIUserMuteRequest> m_mutes;
    bool m_mutes_isSet;
    bool m_mutes_isValid;

    bool m_online;
    bool m_online_isSet;
    bool m_online_isValid;

    OAIPushNotificationSettingsRequest m_push_notifications;
    bool m_push_notifications_isSet;
    bool m_push_notifications_isValid;

    QString m_role;
    bool m_role_isSet;
    bool m_role_isValid;

    QList<QString> m_teams;
    bool m_teams_isSet;
    bool m_teams_isValid;

    qint32 m_total_unread_count;
    bool m_total_unread_count_isSet;
    bool m_total_unread_count_isValid;

    qint32 m_unread_channels;
    bool m_unread_channels_isSet;
    bool m_unread_channels_isValid;

    qint32 m_unread_count;
    bool m_unread_count_isSet;
    bool m_unread_count_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOwnUserRequest)

#endif // OAIOwnUserRequest_H
