/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnmuteUserRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnmuteUserRequest::OAIUnmuteUserRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnmuteUserRequest::OAIUnmuteUserRequest() {
    this->initializeModel();
}

OAIUnmuteUserRequest::~OAIUnmuteUserRequest() {}

void OAIUnmuteUserRequest::initializeModel() {

    m_target_id_isSet = false;
    m_target_id_isValid = false;

    m_target_ids_isSet = false;
    m_target_ids_isValid = false;

    m_timeout_isSet = false;
    m_timeout_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIUnmuteUserRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUnmuteUserRequest::fromJsonObject(QJsonObject json) {

    m_target_id_isValid = ::OpenAPI::fromJsonValue(m_target_id, json[QString("target_id")]);
    m_target_id_isSet = !json[QString("target_id")].isNull() && m_target_id_isValid;

    m_target_ids_isValid = ::OpenAPI::fromJsonValue(m_target_ids, json[QString("target_ids")]);
    m_target_ids_isSet = !json[QString("target_ids")].isNull() && m_target_ids_isValid;

    m_timeout_isValid = ::OpenAPI::fromJsonValue(m_timeout, json[QString("timeout")]);
    m_timeout_isSet = !json[QString("timeout")].isNull() && m_timeout_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIUnmuteUserRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUnmuteUserRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_target_id_isSet) {
        obj.insert(QString("target_id"), ::OpenAPI::toJsonValue(m_target_id));
    }
    if (m_target_ids.size() > 0) {
        obj.insert(QString("target_ids"), ::OpenAPI::toJsonValue(m_target_ids));
    }
    if (m_timeout_isSet) {
        obj.insert(QString("timeout"), ::OpenAPI::toJsonValue(m_timeout));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIUnmuteUserRequest::getTargetId() const {
    return m_target_id;
}
void OAIUnmuteUserRequest::setTargetId(const QString &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAIUnmuteUserRequest::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAIUnmuteUserRequest::is_target_id_Valid() const{
    return m_target_id_isValid;
}

QList<QString> OAIUnmuteUserRequest::getTargetIds() const {
    return m_target_ids;
}
void OAIUnmuteUserRequest::setTargetIds(const QList<QString> &target_ids) {
    m_target_ids = target_ids;
    m_target_ids_isSet = true;
}

bool OAIUnmuteUserRequest::is_target_ids_Set() const{
    return m_target_ids_isSet;
}

bool OAIUnmuteUserRequest::is_target_ids_Valid() const{
    return m_target_ids_isValid;
}

qint32 OAIUnmuteUserRequest::getTimeout() const {
    return m_timeout;
}
void OAIUnmuteUserRequest::setTimeout(const qint32 &timeout) {
    m_timeout = timeout;
    m_timeout_isSet = true;
}

bool OAIUnmuteUserRequest::is_timeout_Set() const{
    return m_timeout_isSet;
}

bool OAIUnmuteUserRequest::is_timeout_Valid() const{
    return m_timeout_isValid;
}

OAIUserObjectRequest OAIUnmuteUserRequest::getUser() const {
    return m_user;
}
void OAIUnmuteUserRequest::setUser(const OAIUserObjectRequest &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIUnmuteUserRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAIUnmuteUserRequest::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIUnmuteUserRequest::getUserId() const {
    return m_user_id;
}
void OAIUnmuteUserRequest::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUnmuteUserRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUnmuteUserRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIUnmuteUserRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUnmuteUserRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_target_id_isValid && m_target_ids_isValid && true;
}

} // namespace OpenAPI
