/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelConfigRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelConfigRequest::OAIChannelConfigRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelConfigRequest::OAIChannelConfigRequest() {
    this->initializeModel();
}

OAIChannelConfigRequest::~OAIChannelConfigRequest() {}

void OAIChannelConfigRequest::initializeModel() {

    m_blocklist_isSet = false;
    m_blocklist_isValid = false;

    m_blocklist_behavior_isSet = false;
    m_blocklist_behavior_isValid = false;

    m_commands_isSet = false;
    m_commands_isValid = false;

    m_grants_isSet = false;
    m_grants_isValid = false;

    m_max_message_length_isSet = false;
    m_max_message_length_isValid = false;

    m_quotes_isSet = false;
    m_quotes_isValid = false;

    m_reactions_isSet = false;
    m_reactions_isValid = false;

    m_replies_isSet = false;
    m_replies_isValid = false;

    m_typing_events_isSet = false;
    m_typing_events_isValid = false;

    m_uploads_isSet = false;
    m_uploads_isValid = false;

    m_url_enrichment_isSet = false;
    m_url_enrichment_isValid = false;
}

void OAIChannelConfigRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelConfigRequest::fromJsonObject(QJsonObject json) {

    m_blocklist_isValid = ::OpenAPI::fromJsonValue(m_blocklist, json[QString("blocklist")]);
    m_blocklist_isSet = !json[QString("blocklist")].isNull() && m_blocklist_isValid;

    m_blocklist_behavior_isValid = ::OpenAPI::fromJsonValue(m_blocklist_behavior, json[QString("blocklist_behavior")]);
    m_blocklist_behavior_isSet = !json[QString("blocklist_behavior")].isNull() && m_blocklist_behavior_isValid;

    m_commands_isValid = ::OpenAPI::fromJsonValue(m_commands, json[QString("commands")]);
    m_commands_isSet = !json[QString("commands")].isNull() && m_commands_isValid;

    if(json["grants"].isObject()){
        auto varmap = json["grants"].toObject().toVariantMap();
        m_grants_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_grants_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_grants_isSet &= !jval.isNull() && m_grants_isValid;
                m_grants.insert(m_grants.end(), val, item);
            }
        }
    }

    m_max_message_length_isValid = ::OpenAPI::fromJsonValue(m_max_message_length, json[QString("max_message_length")]);
    m_max_message_length_isSet = !json[QString("max_message_length")].isNull() && m_max_message_length_isValid;

    m_quotes_isValid = ::OpenAPI::fromJsonValue(m_quotes, json[QString("quotes")]);
    m_quotes_isSet = !json[QString("quotes")].isNull() && m_quotes_isValid;

    m_reactions_isValid = ::OpenAPI::fromJsonValue(m_reactions, json[QString("reactions")]);
    m_reactions_isSet = !json[QString("reactions")].isNull() && m_reactions_isValid;

    m_replies_isValid = ::OpenAPI::fromJsonValue(m_replies, json[QString("replies")]);
    m_replies_isSet = !json[QString("replies")].isNull() && m_replies_isValid;

    m_typing_events_isValid = ::OpenAPI::fromJsonValue(m_typing_events, json[QString("typing_events")]);
    m_typing_events_isSet = !json[QString("typing_events")].isNull() && m_typing_events_isValid;

    m_uploads_isValid = ::OpenAPI::fromJsonValue(m_uploads, json[QString("uploads")]);
    m_uploads_isSet = !json[QString("uploads")].isNull() && m_uploads_isValid;

    m_url_enrichment_isValid = ::OpenAPI::fromJsonValue(m_url_enrichment, json[QString("url_enrichment")]);
    m_url_enrichment_isSet = !json[QString("url_enrichment")].isNull() && m_url_enrichment_isValid;
}

QString OAIChannelConfigRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelConfigRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_blocklist_isSet) {
        obj.insert(QString("blocklist"), ::OpenAPI::toJsonValue(m_blocklist));
    }
    if (m_blocklist_behavior_isSet) {
        obj.insert(QString("blocklist_behavior"), ::OpenAPI::toJsonValue(m_blocklist_behavior));
    }
    if (m_commands.size() > 0) {
        obj.insert(QString("commands"), ::OpenAPI::toJsonValue(m_commands));
    }
    if (m_grants.size() > 0) {
        
        obj.insert(QString("grants"), toJsonValue(m_grants));
    }
    if (m_max_message_length_isSet) {
        obj.insert(QString("max_message_length"), ::OpenAPI::toJsonValue(m_max_message_length));
    }
    if (m_quotes_isSet) {
        obj.insert(QString("quotes"), ::OpenAPI::toJsonValue(m_quotes));
    }
    if (m_reactions_isSet) {
        obj.insert(QString("reactions"), ::OpenAPI::toJsonValue(m_reactions));
    }
    if (m_replies_isSet) {
        obj.insert(QString("replies"), ::OpenAPI::toJsonValue(m_replies));
    }
    if (m_typing_events_isSet) {
        obj.insert(QString("typing_events"), ::OpenAPI::toJsonValue(m_typing_events));
    }
    if (m_uploads_isSet) {
        obj.insert(QString("uploads"), ::OpenAPI::toJsonValue(m_uploads));
    }
    if (m_url_enrichment_isSet) {
        obj.insert(QString("url_enrichment"), ::OpenAPI::toJsonValue(m_url_enrichment));
    }
    return obj;
}

QString OAIChannelConfigRequest::getBlocklist() const {
    return m_blocklist;
}
void OAIChannelConfigRequest::setBlocklist(const QString &blocklist) {
    m_blocklist = blocklist;
    m_blocklist_isSet = true;
}

bool OAIChannelConfigRequest::is_blocklist_Set() const{
    return m_blocklist_isSet;
}

bool OAIChannelConfigRequest::is_blocklist_Valid() const{
    return m_blocklist_isValid;
}

QString OAIChannelConfigRequest::getBlocklistBehavior() const {
    return m_blocklist_behavior;
}
void OAIChannelConfigRequest::setBlocklistBehavior(const QString &blocklist_behavior) {
    m_blocklist_behavior = blocklist_behavior;
    m_blocklist_behavior_isSet = true;
}

bool OAIChannelConfigRequest::is_blocklist_behavior_Set() const{
    return m_blocklist_behavior_isSet;
}

bool OAIChannelConfigRequest::is_blocklist_behavior_Valid() const{
    return m_blocklist_behavior_isValid;
}

QList<QString> OAIChannelConfigRequest::getCommands() const {
    return m_commands;
}
void OAIChannelConfigRequest::setCommands(const QList<QString> &commands) {
    m_commands = commands;
    m_commands_isSet = true;
}

bool OAIChannelConfigRequest::is_commands_Set() const{
    return m_commands_isSet;
}

bool OAIChannelConfigRequest::is_commands_Valid() const{
    return m_commands_isValid;
}

QMap<QString, QList<QString>> OAIChannelConfigRequest::getGrants() const {
    return m_grants;
}
void OAIChannelConfigRequest::setGrants(const QMap<QString, QList<QString>> &grants) {
    m_grants = grants;
    m_grants_isSet = true;
}

bool OAIChannelConfigRequest::is_grants_Set() const{
    return m_grants_isSet;
}

bool OAIChannelConfigRequest::is_grants_Valid() const{
    return m_grants_isValid;
}

qint32 OAIChannelConfigRequest::getMaxMessageLength() const {
    return m_max_message_length;
}
void OAIChannelConfigRequest::setMaxMessageLength(const qint32 &max_message_length) {
    m_max_message_length = max_message_length;
    m_max_message_length_isSet = true;
}

bool OAIChannelConfigRequest::is_max_message_length_Set() const{
    return m_max_message_length_isSet;
}

bool OAIChannelConfigRequest::is_max_message_length_Valid() const{
    return m_max_message_length_isValid;
}

bool OAIChannelConfigRequest::isQuotes() const {
    return m_quotes;
}
void OAIChannelConfigRequest::setQuotes(const bool &quotes) {
    m_quotes = quotes;
    m_quotes_isSet = true;
}

bool OAIChannelConfigRequest::is_quotes_Set() const{
    return m_quotes_isSet;
}

bool OAIChannelConfigRequest::is_quotes_Valid() const{
    return m_quotes_isValid;
}

bool OAIChannelConfigRequest::isReactions() const {
    return m_reactions;
}
void OAIChannelConfigRequest::setReactions(const bool &reactions) {
    m_reactions = reactions;
    m_reactions_isSet = true;
}

bool OAIChannelConfigRequest::is_reactions_Set() const{
    return m_reactions_isSet;
}

bool OAIChannelConfigRequest::is_reactions_Valid() const{
    return m_reactions_isValid;
}

bool OAIChannelConfigRequest::isReplies() const {
    return m_replies;
}
void OAIChannelConfigRequest::setReplies(const bool &replies) {
    m_replies = replies;
    m_replies_isSet = true;
}

bool OAIChannelConfigRequest::is_replies_Set() const{
    return m_replies_isSet;
}

bool OAIChannelConfigRequest::is_replies_Valid() const{
    return m_replies_isValid;
}

bool OAIChannelConfigRequest::isTypingEvents() const {
    return m_typing_events;
}
void OAIChannelConfigRequest::setTypingEvents(const bool &typing_events) {
    m_typing_events = typing_events;
    m_typing_events_isSet = true;
}

bool OAIChannelConfigRequest::is_typing_events_Set() const{
    return m_typing_events_isSet;
}

bool OAIChannelConfigRequest::is_typing_events_Valid() const{
    return m_typing_events_isValid;
}

bool OAIChannelConfigRequest::isUploads() const {
    return m_uploads;
}
void OAIChannelConfigRequest::setUploads(const bool &uploads) {
    m_uploads = uploads;
    m_uploads_isSet = true;
}

bool OAIChannelConfigRequest::is_uploads_Set() const{
    return m_uploads_isSet;
}

bool OAIChannelConfigRequest::is_uploads_Valid() const{
    return m_uploads_isValid;
}

bool OAIChannelConfigRequest::isUrlEnrichment() const {
    return m_url_enrichment;
}
void OAIChannelConfigRequest::setUrlEnrichment(const bool &url_enrichment) {
    m_url_enrichment = url_enrichment;
    m_url_enrichment_isSet = true;
}

bool OAIChannelConfigRequest::is_url_enrichment_Set() const{
    return m_url_enrichment_isSet;
}

bool OAIChannelConfigRequest::is_url_enrichment_Valid() const{
    return m_url_enrichment_isValid;
}

bool OAIChannelConfigRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blocklist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocklist_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_grants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_message_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quotes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reactions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_typing_events_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploads_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_enrichment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelConfigRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
