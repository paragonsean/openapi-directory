/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApp::OAIApp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApp::OAIApp() {
    this->initializeModel();
}

OAIApp::~OAIApp() {}

void OAIApp::initializeModel() {

    m_agora_options_isSet = false;
    m_agora_options_isValid = false;

    m_async_url_enrich_enabled_isSet = false;
    m_async_url_enrich_enabled_isValid = false;

    m_auto_translation_enabled_isSet = false;
    m_auto_translation_enabled_isValid = false;

    m_before_message_send_hook_url_isSet = false;
    m_before_message_send_hook_url_isValid = false;

    m_call_types_isSet = false;
    m_call_types_isValid = false;

    m_campaign_enabled_isSet = false;
    m_campaign_enabled_isValid = false;

    m_cdn_expiration_seconds_isSet = false;
    m_cdn_expiration_seconds_isValid = false;

    m_channel_configs_isSet = false;
    m_channel_configs_isValid = false;

    m_custom_action_handler_url_isSet = false;
    m_custom_action_handler_url_isValid = false;

    m_disable_auth_checks_isSet = false;
    m_disable_auth_checks_isValid = false;

    m_disable_permissions_checks_isSet = false;
    m_disable_permissions_checks_isValid = false;

    m_enforce_unique_usernames_isSet = false;
    m_enforce_unique_usernames_isValid = false;

    m_file_upload_config_isSet = false;
    m_file_upload_config_isValid = false;

    m_grants_isSet = false;
    m_grants_isValid = false;

    m_hms_options_isSet = false;
    m_hms_options_isValid = false;

    m_image_moderation_enabled_isSet = false;
    m_image_moderation_enabled_isValid = false;

    m_image_moderation_labels_isSet = false;
    m_image_moderation_labels_isValid = false;

    m_image_upload_config_isSet = false;
    m_image_upload_config_isValid = false;

    m_multi_tenant_enabled_isSet = false;
    m_multi_tenant_enabled_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_permission_version_isSet = false;
    m_permission_version_isValid = false;

    m_policies_isSet = false;
    m_policies_isValid = false;

    m_push_notifications_isSet = false;
    m_push_notifications_isValid = false;

    m_reminders_interval_isSet = false;
    m_reminders_interval_isValid = false;

    m_revoke_tokens_issued_before_isSet = false;
    m_revoke_tokens_issued_before_isValid = false;

    m_search_backend_isSet = false;
    m_search_backend_isValid = false;

    m_sqs_key_isSet = false;
    m_sqs_key_isValid = false;

    m_sqs_secret_isSet = false;
    m_sqs_secret_isValid = false;

    m_sqs_url_isSet = false;
    m_sqs_url_isValid = false;

    m_suspended_isSet = false;
    m_suspended_isValid = false;

    m_suspended_explanation_isSet = false;
    m_suspended_explanation_isValid = false;

    m_user_search_disallowed_roles_isSet = false;
    m_user_search_disallowed_roles_isValid = false;

    m_video_provider_isSet = false;
    m_video_provider_isValid = false;

    m_webhook_events_isSet = false;
    m_webhook_events_isValid = false;

    m_webhook_url_isSet = false;
    m_webhook_url_isValid = false;
}

void OAIApp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApp::fromJsonObject(QJsonObject json) {

    m_agora_options_isValid = ::OpenAPI::fromJsonValue(m_agora_options, json[QString("agora_options")]);
    m_agora_options_isSet = !json[QString("agora_options")].isNull() && m_agora_options_isValid;

    m_async_url_enrich_enabled_isValid = ::OpenAPI::fromJsonValue(m_async_url_enrich_enabled, json[QString("async_url_enrich_enabled")]);
    m_async_url_enrich_enabled_isSet = !json[QString("async_url_enrich_enabled")].isNull() && m_async_url_enrich_enabled_isValid;

    m_auto_translation_enabled_isValid = ::OpenAPI::fromJsonValue(m_auto_translation_enabled, json[QString("auto_translation_enabled")]);
    m_auto_translation_enabled_isSet = !json[QString("auto_translation_enabled")].isNull() && m_auto_translation_enabled_isValid;

    m_before_message_send_hook_url_isValid = ::OpenAPI::fromJsonValue(m_before_message_send_hook_url, json[QString("before_message_send_hook_url")]);
    m_before_message_send_hook_url_isSet = !json[QString("before_message_send_hook_url")].isNull() && m_before_message_send_hook_url_isValid;

    m_call_types_isValid = ::OpenAPI::fromJsonValue(m_call_types, json[QString("call_types")]);
    m_call_types_isSet = !json[QString("call_types")].isNull() && m_call_types_isValid;

    m_campaign_enabled_isValid = ::OpenAPI::fromJsonValue(m_campaign_enabled, json[QString("campaign_enabled")]);
    m_campaign_enabled_isSet = !json[QString("campaign_enabled")].isNull() && m_campaign_enabled_isValid;

    m_cdn_expiration_seconds_isValid = ::OpenAPI::fromJsonValue(m_cdn_expiration_seconds, json[QString("cdn_expiration_seconds")]);
    m_cdn_expiration_seconds_isSet = !json[QString("cdn_expiration_seconds")].isNull() && m_cdn_expiration_seconds_isValid;

    m_channel_configs_isValid = ::OpenAPI::fromJsonValue(m_channel_configs, json[QString("channel_configs")]);
    m_channel_configs_isSet = !json[QString("channel_configs")].isNull() && m_channel_configs_isValid;

    m_custom_action_handler_url_isValid = ::OpenAPI::fromJsonValue(m_custom_action_handler_url, json[QString("custom_action_handler_url")]);
    m_custom_action_handler_url_isSet = !json[QString("custom_action_handler_url")].isNull() && m_custom_action_handler_url_isValid;

    m_disable_auth_checks_isValid = ::OpenAPI::fromJsonValue(m_disable_auth_checks, json[QString("disable_auth_checks")]);
    m_disable_auth_checks_isSet = !json[QString("disable_auth_checks")].isNull() && m_disable_auth_checks_isValid;

    m_disable_permissions_checks_isValid = ::OpenAPI::fromJsonValue(m_disable_permissions_checks, json[QString("disable_permissions_checks")]);
    m_disable_permissions_checks_isSet = !json[QString("disable_permissions_checks")].isNull() && m_disable_permissions_checks_isValid;

    m_enforce_unique_usernames_isValid = ::OpenAPI::fromJsonValue(m_enforce_unique_usernames, json[QString("enforce_unique_usernames")]);
    m_enforce_unique_usernames_isSet = !json[QString("enforce_unique_usernames")].isNull() && m_enforce_unique_usernames_isValid;

    m_file_upload_config_isValid = ::OpenAPI::fromJsonValue(m_file_upload_config, json[QString("file_upload_config")]);
    m_file_upload_config_isSet = !json[QString("file_upload_config")].isNull() && m_file_upload_config_isValid;

    if(json["grants"].isObject()){
        auto varmap = json["grants"].toObject().toVariantMap();
        m_grants_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_grants_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_grants_isSet &= !jval.isNull() && m_grants_isValid;
                m_grants.insert(m_grants.end(), val, item);
            }
        }
    }

    m_hms_options_isValid = ::OpenAPI::fromJsonValue(m_hms_options, json[QString("hms_options")]);
    m_hms_options_isSet = !json[QString("hms_options")].isNull() && m_hms_options_isValid;

    m_image_moderation_enabled_isValid = ::OpenAPI::fromJsonValue(m_image_moderation_enabled, json[QString("image_moderation_enabled")]);
    m_image_moderation_enabled_isSet = !json[QString("image_moderation_enabled")].isNull() && m_image_moderation_enabled_isValid;

    m_image_moderation_labels_isValid = ::OpenAPI::fromJsonValue(m_image_moderation_labels, json[QString("image_moderation_labels")]);
    m_image_moderation_labels_isSet = !json[QString("image_moderation_labels")].isNull() && m_image_moderation_labels_isValid;

    m_image_upload_config_isValid = ::OpenAPI::fromJsonValue(m_image_upload_config, json[QString("image_upload_config")]);
    m_image_upload_config_isSet = !json[QString("image_upload_config")].isNull() && m_image_upload_config_isValid;

    m_multi_tenant_enabled_isValid = ::OpenAPI::fromJsonValue(m_multi_tenant_enabled, json[QString("multi_tenant_enabled")]);
    m_multi_tenant_enabled_isSet = !json[QString("multi_tenant_enabled")].isNull() && m_multi_tenant_enabled_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_permission_version_isValid = ::OpenAPI::fromJsonValue(m_permission_version, json[QString("permission_version")]);
    m_permission_version_isSet = !json[QString("permission_version")].isNull() && m_permission_version_isValid;

    if(json["policies"].isObject()){
        auto varmap = json["policies"].toObject().toVariantMap();
        m_policies_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<OAIPolicy> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_policies_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_policies_isSet &= !jval.isNull() && m_policies_isValid;
                m_policies.insert(m_policies.end(), val, item);
            }
        }
    }

    m_push_notifications_isValid = ::OpenAPI::fromJsonValue(m_push_notifications, json[QString("push_notifications")]);
    m_push_notifications_isSet = !json[QString("push_notifications")].isNull() && m_push_notifications_isValid;

    m_reminders_interval_isValid = ::OpenAPI::fromJsonValue(m_reminders_interval, json[QString("reminders_interval")]);
    m_reminders_interval_isSet = !json[QString("reminders_interval")].isNull() && m_reminders_interval_isValid;

    m_revoke_tokens_issued_before_isValid = ::OpenAPI::fromJsonValue(m_revoke_tokens_issued_before, json[QString("revoke_tokens_issued_before")]);
    m_revoke_tokens_issued_before_isSet = !json[QString("revoke_tokens_issued_before")].isNull() && m_revoke_tokens_issued_before_isValid;

    m_search_backend_isValid = ::OpenAPI::fromJsonValue(m_search_backend, json[QString("search_backend")]);
    m_search_backend_isSet = !json[QString("search_backend")].isNull() && m_search_backend_isValid;

    m_sqs_key_isValid = ::OpenAPI::fromJsonValue(m_sqs_key, json[QString("sqs_key")]);
    m_sqs_key_isSet = !json[QString("sqs_key")].isNull() && m_sqs_key_isValid;

    m_sqs_secret_isValid = ::OpenAPI::fromJsonValue(m_sqs_secret, json[QString("sqs_secret")]);
    m_sqs_secret_isSet = !json[QString("sqs_secret")].isNull() && m_sqs_secret_isValid;

    m_sqs_url_isValid = ::OpenAPI::fromJsonValue(m_sqs_url, json[QString("sqs_url")]);
    m_sqs_url_isSet = !json[QString("sqs_url")].isNull() && m_sqs_url_isValid;

    m_suspended_isValid = ::OpenAPI::fromJsonValue(m_suspended, json[QString("suspended")]);
    m_suspended_isSet = !json[QString("suspended")].isNull() && m_suspended_isValid;

    m_suspended_explanation_isValid = ::OpenAPI::fromJsonValue(m_suspended_explanation, json[QString("suspended_explanation")]);
    m_suspended_explanation_isSet = !json[QString("suspended_explanation")].isNull() && m_suspended_explanation_isValid;

    m_user_search_disallowed_roles_isValid = ::OpenAPI::fromJsonValue(m_user_search_disallowed_roles, json[QString("user_search_disallowed_roles")]);
    m_user_search_disallowed_roles_isSet = !json[QString("user_search_disallowed_roles")].isNull() && m_user_search_disallowed_roles_isValid;

    m_video_provider_isValid = ::OpenAPI::fromJsonValue(m_video_provider, json[QString("video_provider")]);
    m_video_provider_isSet = !json[QString("video_provider")].isNull() && m_video_provider_isValid;

    m_webhook_events_isValid = ::OpenAPI::fromJsonValue(m_webhook_events, json[QString("webhook_events")]);
    m_webhook_events_isSet = !json[QString("webhook_events")].isNull() && m_webhook_events_isValid;

    m_webhook_url_isValid = ::OpenAPI::fromJsonValue(m_webhook_url, json[QString("webhook_url")]);
    m_webhook_url_isSet = !json[QString("webhook_url")].isNull() && m_webhook_url_isValid;
}

QString OAIApp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApp::asJsonObject() const {
    QJsonObject obj;
    if (m_agora_options.isSet()) {
        obj.insert(QString("agora_options"), ::OpenAPI::toJsonValue(m_agora_options));
    }
    if (m_async_url_enrich_enabled_isSet) {
        obj.insert(QString("async_url_enrich_enabled"), ::OpenAPI::toJsonValue(m_async_url_enrich_enabled));
    }
    if (m_auto_translation_enabled_isSet) {
        obj.insert(QString("auto_translation_enabled"), ::OpenAPI::toJsonValue(m_auto_translation_enabled));
    }
    if (m_before_message_send_hook_url_isSet) {
        obj.insert(QString("before_message_send_hook_url"), ::OpenAPI::toJsonValue(m_before_message_send_hook_url));
    }
    if (m_call_types.size() > 0) {
        obj.insert(QString("call_types"), ::OpenAPI::toJsonValue(m_call_types));
    }
    if (m_campaign_enabled_isSet) {
        obj.insert(QString("campaign_enabled"), ::OpenAPI::toJsonValue(m_campaign_enabled));
    }
    if (m_cdn_expiration_seconds_isSet) {
        obj.insert(QString("cdn_expiration_seconds"), ::OpenAPI::toJsonValue(m_cdn_expiration_seconds));
    }
    if (m_channel_configs.size() > 0) {
        obj.insert(QString("channel_configs"), ::OpenAPI::toJsonValue(m_channel_configs));
    }
    if (m_custom_action_handler_url_isSet) {
        obj.insert(QString("custom_action_handler_url"), ::OpenAPI::toJsonValue(m_custom_action_handler_url));
    }
    if (m_disable_auth_checks_isSet) {
        obj.insert(QString("disable_auth_checks"), ::OpenAPI::toJsonValue(m_disable_auth_checks));
    }
    if (m_disable_permissions_checks_isSet) {
        obj.insert(QString("disable_permissions_checks"), ::OpenAPI::toJsonValue(m_disable_permissions_checks));
    }
    if (m_enforce_unique_usernames_isSet) {
        obj.insert(QString("enforce_unique_usernames"), ::OpenAPI::toJsonValue(m_enforce_unique_usernames));
    }
    if (m_file_upload_config.isSet()) {
        obj.insert(QString("file_upload_config"), ::OpenAPI::toJsonValue(m_file_upload_config));
    }
    if (m_grants.size() > 0) {
        
        obj.insert(QString("grants"), toJsonValue(m_grants));
    }
    if (m_hms_options.isSet()) {
        obj.insert(QString("hms_options"), ::OpenAPI::toJsonValue(m_hms_options));
    }
    if (m_image_moderation_enabled_isSet) {
        obj.insert(QString("image_moderation_enabled"), ::OpenAPI::toJsonValue(m_image_moderation_enabled));
    }
    if (m_image_moderation_labels.size() > 0) {
        obj.insert(QString("image_moderation_labels"), ::OpenAPI::toJsonValue(m_image_moderation_labels));
    }
    if (m_image_upload_config.isSet()) {
        obj.insert(QString("image_upload_config"), ::OpenAPI::toJsonValue(m_image_upload_config));
    }
    if (m_multi_tenant_enabled_isSet) {
        obj.insert(QString("multi_tenant_enabled"), ::OpenAPI::toJsonValue(m_multi_tenant_enabled));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_permission_version_isSet) {
        obj.insert(QString("permission_version"), ::OpenAPI::toJsonValue(m_permission_version));
    }
    if (m_policies.size() > 0) {
        
        obj.insert(QString("policies"), toJsonValue(m_policies));
    }
    if (m_push_notifications.isSet()) {
        obj.insert(QString("push_notifications"), ::OpenAPI::toJsonValue(m_push_notifications));
    }
    if (m_reminders_interval_isSet) {
        obj.insert(QString("reminders_interval"), ::OpenAPI::toJsonValue(m_reminders_interval));
    }
    if (m_revoke_tokens_issued_before_isSet) {
        obj.insert(QString("revoke_tokens_issued_before"), ::OpenAPI::toJsonValue(m_revoke_tokens_issued_before));
    }
    if (m_search_backend_isSet) {
        obj.insert(QString("search_backend"), ::OpenAPI::toJsonValue(m_search_backend));
    }
    if (m_sqs_key_isSet) {
        obj.insert(QString("sqs_key"), ::OpenAPI::toJsonValue(m_sqs_key));
    }
    if (m_sqs_secret_isSet) {
        obj.insert(QString("sqs_secret"), ::OpenAPI::toJsonValue(m_sqs_secret));
    }
    if (m_sqs_url_isSet) {
        obj.insert(QString("sqs_url"), ::OpenAPI::toJsonValue(m_sqs_url));
    }
    if (m_suspended_isSet) {
        obj.insert(QString("suspended"), ::OpenAPI::toJsonValue(m_suspended));
    }
    if (m_suspended_explanation_isSet) {
        obj.insert(QString("suspended_explanation"), ::OpenAPI::toJsonValue(m_suspended_explanation));
    }
    if (m_user_search_disallowed_roles.size() > 0) {
        obj.insert(QString("user_search_disallowed_roles"), ::OpenAPI::toJsonValue(m_user_search_disallowed_roles));
    }
    if (m_video_provider_isSet) {
        obj.insert(QString("video_provider"), ::OpenAPI::toJsonValue(m_video_provider));
    }
    if (m_webhook_events.size() > 0) {
        obj.insert(QString("webhook_events"), ::OpenAPI::toJsonValue(m_webhook_events));
    }
    if (m_webhook_url_isSet) {
        obj.insert(QString("webhook_url"), ::OpenAPI::toJsonValue(m_webhook_url));
    }
    return obj;
}

OAIConfig OAIApp::getAgoraOptions() const {
    return m_agora_options;
}
void OAIApp::setAgoraOptions(const OAIConfig &agora_options) {
    m_agora_options = agora_options;
    m_agora_options_isSet = true;
}

bool OAIApp::is_agora_options_Set() const{
    return m_agora_options_isSet;
}

bool OAIApp::is_agora_options_Valid() const{
    return m_agora_options_isValid;
}

bool OAIApp::isAsyncUrlEnrichEnabled() const {
    return m_async_url_enrich_enabled;
}
void OAIApp::setAsyncUrlEnrichEnabled(const bool &async_url_enrich_enabled) {
    m_async_url_enrich_enabled = async_url_enrich_enabled;
    m_async_url_enrich_enabled_isSet = true;
}

bool OAIApp::is_async_url_enrich_enabled_Set() const{
    return m_async_url_enrich_enabled_isSet;
}

bool OAIApp::is_async_url_enrich_enabled_Valid() const{
    return m_async_url_enrich_enabled_isValid;
}

bool OAIApp::isAutoTranslationEnabled() const {
    return m_auto_translation_enabled;
}
void OAIApp::setAutoTranslationEnabled(const bool &auto_translation_enabled) {
    m_auto_translation_enabled = auto_translation_enabled;
    m_auto_translation_enabled_isSet = true;
}

bool OAIApp::is_auto_translation_enabled_Set() const{
    return m_auto_translation_enabled_isSet;
}

bool OAIApp::is_auto_translation_enabled_Valid() const{
    return m_auto_translation_enabled_isValid;
}

QString OAIApp::getBeforeMessageSendHookUrl() const {
    return m_before_message_send_hook_url;
}
void OAIApp::setBeforeMessageSendHookUrl(const QString &before_message_send_hook_url) {
    m_before_message_send_hook_url = before_message_send_hook_url;
    m_before_message_send_hook_url_isSet = true;
}

bool OAIApp::is_before_message_send_hook_url_Set() const{
    return m_before_message_send_hook_url_isSet;
}

bool OAIApp::is_before_message_send_hook_url_Valid() const{
    return m_before_message_send_hook_url_isValid;
}

QMap<QString, OAICallType> OAIApp::getCallTypes() const {
    return m_call_types;
}
void OAIApp::setCallTypes(const QMap<QString, OAICallType> &call_types) {
    m_call_types = call_types;
    m_call_types_isSet = true;
}

bool OAIApp::is_call_types_Set() const{
    return m_call_types_isSet;
}

bool OAIApp::is_call_types_Valid() const{
    return m_call_types_isValid;
}

bool OAIApp::isCampaignEnabled() const {
    return m_campaign_enabled;
}
void OAIApp::setCampaignEnabled(const bool &campaign_enabled) {
    m_campaign_enabled = campaign_enabled;
    m_campaign_enabled_isSet = true;
}

bool OAIApp::is_campaign_enabled_Set() const{
    return m_campaign_enabled_isSet;
}

bool OAIApp::is_campaign_enabled_Valid() const{
    return m_campaign_enabled_isValid;
}

qint32 OAIApp::getCdnExpirationSeconds() const {
    return m_cdn_expiration_seconds;
}
void OAIApp::setCdnExpirationSeconds(const qint32 &cdn_expiration_seconds) {
    m_cdn_expiration_seconds = cdn_expiration_seconds;
    m_cdn_expiration_seconds_isSet = true;
}

bool OAIApp::is_cdn_expiration_seconds_Set() const{
    return m_cdn_expiration_seconds_isSet;
}

bool OAIApp::is_cdn_expiration_seconds_Valid() const{
    return m_cdn_expiration_seconds_isValid;
}

QMap<QString, OAIChannelConfig> OAIApp::getChannelConfigs() const {
    return m_channel_configs;
}
void OAIApp::setChannelConfigs(const QMap<QString, OAIChannelConfig> &channel_configs) {
    m_channel_configs = channel_configs;
    m_channel_configs_isSet = true;
}

bool OAIApp::is_channel_configs_Set() const{
    return m_channel_configs_isSet;
}

bool OAIApp::is_channel_configs_Valid() const{
    return m_channel_configs_isValid;
}

QString OAIApp::getCustomActionHandlerUrl() const {
    return m_custom_action_handler_url;
}
void OAIApp::setCustomActionHandlerUrl(const QString &custom_action_handler_url) {
    m_custom_action_handler_url = custom_action_handler_url;
    m_custom_action_handler_url_isSet = true;
}

bool OAIApp::is_custom_action_handler_url_Set() const{
    return m_custom_action_handler_url_isSet;
}

bool OAIApp::is_custom_action_handler_url_Valid() const{
    return m_custom_action_handler_url_isValid;
}

bool OAIApp::isDisableAuthChecks() const {
    return m_disable_auth_checks;
}
void OAIApp::setDisableAuthChecks(const bool &disable_auth_checks) {
    m_disable_auth_checks = disable_auth_checks;
    m_disable_auth_checks_isSet = true;
}

bool OAIApp::is_disable_auth_checks_Set() const{
    return m_disable_auth_checks_isSet;
}

bool OAIApp::is_disable_auth_checks_Valid() const{
    return m_disable_auth_checks_isValid;
}

bool OAIApp::isDisablePermissionsChecks() const {
    return m_disable_permissions_checks;
}
void OAIApp::setDisablePermissionsChecks(const bool &disable_permissions_checks) {
    m_disable_permissions_checks = disable_permissions_checks;
    m_disable_permissions_checks_isSet = true;
}

bool OAIApp::is_disable_permissions_checks_Set() const{
    return m_disable_permissions_checks_isSet;
}

bool OAIApp::is_disable_permissions_checks_Valid() const{
    return m_disable_permissions_checks_isValid;
}

QString OAIApp::getEnforceUniqueUsernames() const {
    return m_enforce_unique_usernames;
}
void OAIApp::setEnforceUniqueUsernames(const QString &enforce_unique_usernames) {
    m_enforce_unique_usernames = enforce_unique_usernames;
    m_enforce_unique_usernames_isSet = true;
}

bool OAIApp::is_enforce_unique_usernames_Set() const{
    return m_enforce_unique_usernames_isSet;
}

bool OAIApp::is_enforce_unique_usernames_Valid() const{
    return m_enforce_unique_usernames_isValid;
}

OAIFileUploadConfig OAIApp::getFileUploadConfig() const {
    return m_file_upload_config;
}
void OAIApp::setFileUploadConfig(const OAIFileUploadConfig &file_upload_config) {
    m_file_upload_config = file_upload_config;
    m_file_upload_config_isSet = true;
}

bool OAIApp::is_file_upload_config_Set() const{
    return m_file_upload_config_isSet;
}

bool OAIApp::is_file_upload_config_Valid() const{
    return m_file_upload_config_isValid;
}

QMap<QString, QList<QString>> OAIApp::getGrants() const {
    return m_grants;
}
void OAIApp::setGrants(const QMap<QString, QList<QString>> &grants) {
    m_grants = grants;
    m_grants_isSet = true;
}

bool OAIApp::is_grants_Set() const{
    return m_grants_isSet;
}

bool OAIApp::is_grants_Valid() const{
    return m_grants_isValid;
}

OAIConfig OAIApp::getHmsOptions() const {
    return m_hms_options;
}
void OAIApp::setHmsOptions(const OAIConfig &hms_options) {
    m_hms_options = hms_options;
    m_hms_options_isSet = true;
}

bool OAIApp::is_hms_options_Set() const{
    return m_hms_options_isSet;
}

bool OAIApp::is_hms_options_Valid() const{
    return m_hms_options_isValid;
}

bool OAIApp::isImageModerationEnabled() const {
    return m_image_moderation_enabled;
}
void OAIApp::setImageModerationEnabled(const bool &image_moderation_enabled) {
    m_image_moderation_enabled = image_moderation_enabled;
    m_image_moderation_enabled_isSet = true;
}

bool OAIApp::is_image_moderation_enabled_Set() const{
    return m_image_moderation_enabled_isSet;
}

bool OAIApp::is_image_moderation_enabled_Valid() const{
    return m_image_moderation_enabled_isValid;
}

QList<QString> OAIApp::getImageModerationLabels() const {
    return m_image_moderation_labels;
}
void OAIApp::setImageModerationLabels(const QList<QString> &image_moderation_labels) {
    m_image_moderation_labels = image_moderation_labels;
    m_image_moderation_labels_isSet = true;
}

bool OAIApp::is_image_moderation_labels_Set() const{
    return m_image_moderation_labels_isSet;
}

bool OAIApp::is_image_moderation_labels_Valid() const{
    return m_image_moderation_labels_isValid;
}

OAIFileUploadConfig OAIApp::getImageUploadConfig() const {
    return m_image_upload_config;
}
void OAIApp::setImageUploadConfig(const OAIFileUploadConfig &image_upload_config) {
    m_image_upload_config = image_upload_config;
    m_image_upload_config_isSet = true;
}

bool OAIApp::is_image_upload_config_Set() const{
    return m_image_upload_config_isSet;
}

bool OAIApp::is_image_upload_config_Valid() const{
    return m_image_upload_config_isValid;
}

bool OAIApp::isMultiTenantEnabled() const {
    return m_multi_tenant_enabled;
}
void OAIApp::setMultiTenantEnabled(const bool &multi_tenant_enabled) {
    m_multi_tenant_enabled = multi_tenant_enabled;
    m_multi_tenant_enabled_isSet = true;
}

bool OAIApp::is_multi_tenant_enabled_Set() const{
    return m_multi_tenant_enabled_isSet;
}

bool OAIApp::is_multi_tenant_enabled_Valid() const{
    return m_multi_tenant_enabled_isValid;
}

QString OAIApp::getName() const {
    return m_name;
}
void OAIApp::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApp::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApp::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIApp::getOrganization() const {
    return m_organization;
}
void OAIApp::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIApp::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIApp::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIApp::getPermissionVersion() const {
    return m_permission_version;
}
void OAIApp::setPermissionVersion(const QString &permission_version) {
    m_permission_version = permission_version;
    m_permission_version_isSet = true;
}

bool OAIApp::is_permission_version_Set() const{
    return m_permission_version_isSet;
}

bool OAIApp::is_permission_version_Valid() const{
    return m_permission_version_isValid;
}

QMap<QString, QList<OAIPolicy>> OAIApp::getPolicies() const {
    return m_policies;
}
void OAIApp::setPolicies(const QMap<QString, QList<OAIPolicy>> &policies) {
    m_policies = policies;
    m_policies_isSet = true;
}

bool OAIApp::is_policies_Set() const{
    return m_policies_isSet;
}

bool OAIApp::is_policies_Valid() const{
    return m_policies_isValid;
}

OAIPushNotificationFields OAIApp::getPushNotifications() const {
    return m_push_notifications;
}
void OAIApp::setPushNotifications(const OAIPushNotificationFields &push_notifications) {
    m_push_notifications = push_notifications;
    m_push_notifications_isSet = true;
}

bool OAIApp::is_push_notifications_Set() const{
    return m_push_notifications_isSet;
}

bool OAIApp::is_push_notifications_Valid() const{
    return m_push_notifications_isValid;
}

qint32 OAIApp::getRemindersInterval() const {
    return m_reminders_interval;
}
void OAIApp::setRemindersInterval(const qint32 &reminders_interval) {
    m_reminders_interval = reminders_interval;
    m_reminders_interval_isSet = true;
}

bool OAIApp::is_reminders_interval_Set() const{
    return m_reminders_interval_isSet;
}

bool OAIApp::is_reminders_interval_Valid() const{
    return m_reminders_interval_isValid;
}

QDateTime OAIApp::getRevokeTokensIssuedBefore() const {
    return m_revoke_tokens_issued_before;
}
void OAIApp::setRevokeTokensIssuedBefore(const QDateTime &revoke_tokens_issued_before) {
    m_revoke_tokens_issued_before = revoke_tokens_issued_before;
    m_revoke_tokens_issued_before_isSet = true;
}

bool OAIApp::is_revoke_tokens_issued_before_Set() const{
    return m_revoke_tokens_issued_before_isSet;
}

bool OAIApp::is_revoke_tokens_issued_before_Valid() const{
    return m_revoke_tokens_issued_before_isValid;
}

QString OAIApp::getSearchBackend() const {
    return m_search_backend;
}
void OAIApp::setSearchBackend(const QString &search_backend) {
    m_search_backend = search_backend;
    m_search_backend_isSet = true;
}

bool OAIApp::is_search_backend_Set() const{
    return m_search_backend_isSet;
}

bool OAIApp::is_search_backend_Valid() const{
    return m_search_backend_isValid;
}

QString OAIApp::getSqsKey() const {
    return m_sqs_key;
}
void OAIApp::setSqsKey(const QString &sqs_key) {
    m_sqs_key = sqs_key;
    m_sqs_key_isSet = true;
}

bool OAIApp::is_sqs_key_Set() const{
    return m_sqs_key_isSet;
}

bool OAIApp::is_sqs_key_Valid() const{
    return m_sqs_key_isValid;
}

QString OAIApp::getSqsSecret() const {
    return m_sqs_secret;
}
void OAIApp::setSqsSecret(const QString &sqs_secret) {
    m_sqs_secret = sqs_secret;
    m_sqs_secret_isSet = true;
}

bool OAIApp::is_sqs_secret_Set() const{
    return m_sqs_secret_isSet;
}

bool OAIApp::is_sqs_secret_Valid() const{
    return m_sqs_secret_isValid;
}

QString OAIApp::getSqsUrl() const {
    return m_sqs_url;
}
void OAIApp::setSqsUrl(const QString &sqs_url) {
    m_sqs_url = sqs_url;
    m_sqs_url_isSet = true;
}

bool OAIApp::is_sqs_url_Set() const{
    return m_sqs_url_isSet;
}

bool OAIApp::is_sqs_url_Valid() const{
    return m_sqs_url_isValid;
}

bool OAIApp::isSuspended() const {
    return m_suspended;
}
void OAIApp::setSuspended(const bool &suspended) {
    m_suspended = suspended;
    m_suspended_isSet = true;
}

bool OAIApp::is_suspended_Set() const{
    return m_suspended_isSet;
}

bool OAIApp::is_suspended_Valid() const{
    return m_suspended_isValid;
}

QString OAIApp::getSuspendedExplanation() const {
    return m_suspended_explanation;
}
void OAIApp::setSuspendedExplanation(const QString &suspended_explanation) {
    m_suspended_explanation = suspended_explanation;
    m_suspended_explanation_isSet = true;
}

bool OAIApp::is_suspended_explanation_Set() const{
    return m_suspended_explanation_isSet;
}

bool OAIApp::is_suspended_explanation_Valid() const{
    return m_suspended_explanation_isValid;
}

QList<QString> OAIApp::getUserSearchDisallowedRoles() const {
    return m_user_search_disallowed_roles;
}
void OAIApp::setUserSearchDisallowedRoles(const QList<QString> &user_search_disallowed_roles) {
    m_user_search_disallowed_roles = user_search_disallowed_roles;
    m_user_search_disallowed_roles_isSet = true;
}

bool OAIApp::is_user_search_disallowed_roles_Set() const{
    return m_user_search_disallowed_roles_isSet;
}

bool OAIApp::is_user_search_disallowed_roles_Valid() const{
    return m_user_search_disallowed_roles_isValid;
}

QString OAIApp::getVideoProvider() const {
    return m_video_provider;
}
void OAIApp::setVideoProvider(const QString &video_provider) {
    m_video_provider = video_provider;
    m_video_provider_isSet = true;
}

bool OAIApp::is_video_provider_Set() const{
    return m_video_provider_isSet;
}

bool OAIApp::is_video_provider_Valid() const{
    return m_video_provider_isValid;
}

QList<QString> OAIApp::getWebhookEvents() const {
    return m_webhook_events;
}
void OAIApp::setWebhookEvents(const QList<QString> &webhook_events) {
    m_webhook_events = webhook_events;
    m_webhook_events_isSet = true;
}

bool OAIApp::is_webhook_events_Set() const{
    return m_webhook_events_isSet;
}

bool OAIApp::is_webhook_events_Valid() const{
    return m_webhook_events_isValid;
}

QString OAIApp::getWebhookUrl() const {
    return m_webhook_url;
}
void OAIApp::setWebhookUrl(const QString &webhook_url) {
    m_webhook_url = webhook_url;
    m_webhook_url_isSet = true;
}

bool OAIApp::is_webhook_url_Set() const{
    return m_webhook_url_isSet;
}

bool OAIApp::is_webhook_url_Valid() const{
    return m_webhook_url_isValid;
}

bool OAIApp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agora_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_async_url_enrich_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_translation_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_before_message_send_hook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_call_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_campaign_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cdn_expiration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_action_handler_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_auth_checks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_permissions_checks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforce_unique_usernames_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_upload_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_grants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hms_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_moderation_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_moderation_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_upload_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_tenant_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_notifications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reminders_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revoke_tokens_issued_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_backend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqs_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqs_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqs_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspended_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspended_explanation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_search_disallowed_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApp::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_async_url_enrich_enabled_isValid && m_call_types_isValid && m_campaign_enabled_isValid && m_cdn_expiration_seconds_isValid && m_channel_configs_isValid && m_custom_action_handler_url_isValid && m_disable_auth_checks_isValid && m_disable_permissions_checks_isValid && m_enforce_unique_usernames_isValid && m_file_upload_config_isValid && m_grants_isValid && m_image_moderation_enabled_isValid && m_image_upload_config_isValid && m_multi_tenant_enabled_isValid && m_name_isValid && m_organization_isValid && m_permission_version_isValid && m_policies_isValid && m_push_notifications_isValid && m_reminders_interval_isValid && m_search_backend_isValid && m_sqs_key_isValid && m_sqs_secret_isValid && m_sqs_url_isValid && m_suspended_isValid && m_suspended_explanation_isValid && m_user_search_disallowed_roles_isValid && m_video_provider_isValid && m_webhook_events_isValid && m_webhook_url_isValid && true;
}

} // namespace OpenAPI
