/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelGetOrCreateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelGetOrCreateRequest::OAIChannelGetOrCreateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelGetOrCreateRequest::OAIChannelGetOrCreateRequest() {
    this->initializeModel();
}

OAIChannelGetOrCreateRequest::~OAIChannelGetOrCreateRequest() {}

void OAIChannelGetOrCreateRequest::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_connection_id_isSet = false;
    m_connection_id_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_hide_for_creator_isSet = false;
    m_hide_for_creator_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;

    m_presence_isSet = false;
    m_presence_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_watch_isSet = false;
    m_watch_isValid = false;

    m_watchers_isSet = false;
    m_watchers_isValid = false;
}

void OAIChannelGetOrCreateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelGetOrCreateRequest::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_connection_id_isValid = ::OpenAPI::fromJsonValue(m_connection_id, json[QString("connection_id")]);
    m_connection_id_isSet = !json[QString("connection_id")].isNull() && m_connection_id_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_hide_for_creator_isValid = ::OpenAPI::fromJsonValue(m_hide_for_creator, json[QString("hide_for_creator")]);
    m_hide_for_creator_isSet = !json[QString("hide_for_creator")].isNull() && m_hide_for_creator_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;

    m_presence_isValid = ::OpenAPI::fromJsonValue(m_presence, json[QString("presence")]);
    m_presence_isSet = !json[QString("presence")].isNull() && m_presence_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_watch_isValid = ::OpenAPI::fromJsonValue(m_watch, json[QString("watch")]);
    m_watch_isSet = !json[QString("watch")].isNull() && m_watch_isValid;

    m_watchers_isValid = ::OpenAPI::fromJsonValue(m_watchers, json[QString("watchers")]);
    m_watchers_isSet = !json[QString("watchers")].isNull() && m_watchers_isValid;
}

QString OAIChannelGetOrCreateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelGetOrCreateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_connection_id_isSet) {
        obj.insert(QString("connection_id"), ::OpenAPI::toJsonValue(m_connection_id));
    }
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_hide_for_creator_isSet) {
        obj.insert(QString("hide_for_creator"), ::OpenAPI::toJsonValue(m_hide_for_creator));
    }
    if (m_members.isSet()) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_messages.isSet()) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    if (m_presence_isSet) {
        obj.insert(QString("presence"), ::OpenAPI::toJsonValue(m_presence));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_watch_isSet) {
        obj.insert(QString("watch"), ::OpenAPI::toJsonValue(m_watch));
    }
    if (m_watchers.isSet()) {
        obj.insert(QString("watchers"), ::OpenAPI::toJsonValue(m_watchers));
    }
    return obj;
}

QString OAIChannelGetOrCreateRequest::getClientId() const {
    return m_client_id;
}
void OAIChannelGetOrCreateRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIChannelGetOrCreateRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIChannelGetOrCreateRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIChannelGetOrCreateRequest::getConnectionId() const {
    return m_connection_id;
}
void OAIChannelGetOrCreateRequest::setConnectionId(const QString &connection_id) {
    m_connection_id = connection_id;
    m_connection_id_isSet = true;
}

bool OAIChannelGetOrCreateRequest::is_connection_id_Set() const{
    return m_connection_id_isSet;
}

bool OAIChannelGetOrCreateRequest::is_connection_id_Valid() const{
    return m_connection_id_isValid;
}

OAIChannelRequest OAIChannelGetOrCreateRequest::getData() const {
    return m_data;
}
void OAIChannelGetOrCreateRequest::setData(const OAIChannelRequest &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIChannelGetOrCreateRequest::is_data_Set() const{
    return m_data_isSet;
}

bool OAIChannelGetOrCreateRequest::is_data_Valid() const{
    return m_data_isValid;
}

bool OAIChannelGetOrCreateRequest::isHideForCreator() const {
    return m_hide_for_creator;
}
void OAIChannelGetOrCreateRequest::setHideForCreator(const bool &hide_for_creator) {
    m_hide_for_creator = hide_for_creator;
    m_hide_for_creator_isSet = true;
}

bool OAIChannelGetOrCreateRequest::is_hide_for_creator_Set() const{
    return m_hide_for_creator_isSet;
}

bool OAIChannelGetOrCreateRequest::is_hide_for_creator_Valid() const{
    return m_hide_for_creator_isValid;
}

OAIPaginationParamsRequest OAIChannelGetOrCreateRequest::getMembers() const {
    return m_members;
}
void OAIChannelGetOrCreateRequest::setMembers(const OAIPaginationParamsRequest &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIChannelGetOrCreateRequest::is_members_Set() const{
    return m_members_isSet;
}

bool OAIChannelGetOrCreateRequest::is_members_Valid() const{
    return m_members_isValid;
}

OAIMessagePaginationParamsRequest OAIChannelGetOrCreateRequest::getMessages() const {
    return m_messages;
}
void OAIChannelGetOrCreateRequest::setMessages(const OAIMessagePaginationParamsRequest &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIChannelGetOrCreateRequest::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIChannelGetOrCreateRequest::is_messages_Valid() const{
    return m_messages_isValid;
}

bool OAIChannelGetOrCreateRequest::isPresence() const {
    return m_presence;
}
void OAIChannelGetOrCreateRequest::setPresence(const bool &presence) {
    m_presence = presence;
    m_presence_isSet = true;
}

bool OAIChannelGetOrCreateRequest::is_presence_Set() const{
    return m_presence_isSet;
}

bool OAIChannelGetOrCreateRequest::is_presence_Valid() const{
    return m_presence_isValid;
}

bool OAIChannelGetOrCreateRequest::isState() const {
    return m_state;
}
void OAIChannelGetOrCreateRequest::setState(const bool &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIChannelGetOrCreateRequest::is_state_Set() const{
    return m_state_isSet;
}

bool OAIChannelGetOrCreateRequest::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIChannelGetOrCreateRequest::isWatch() const {
    return m_watch;
}
void OAIChannelGetOrCreateRequest::setWatch(const bool &watch) {
    m_watch = watch;
    m_watch_isSet = true;
}

bool OAIChannelGetOrCreateRequest::is_watch_Set() const{
    return m_watch_isSet;
}

bool OAIChannelGetOrCreateRequest::is_watch_Valid() const{
    return m_watch_isValid;
}

OAIPaginationParamsRequest OAIChannelGetOrCreateRequest::getWatchers() const {
    return m_watchers;
}
void OAIChannelGetOrCreateRequest::setWatchers(const OAIPaginationParamsRequest &watchers) {
    m_watchers = watchers;
    m_watchers_isSet = true;
}

bool OAIChannelGetOrCreateRequest::is_watchers_Set() const{
    return m_watchers_isSet;
}

bool OAIChannelGetOrCreateRequest::is_watchers_Valid() const{
    return m_watchers_isValid;
}

bool OAIChannelGetOrCreateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hide_for_creator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_presence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watchers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelGetOrCreateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
