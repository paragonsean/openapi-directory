/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChannelTypesApi_H
#define OAI_OAIChannelTypesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAICreateChannelTypeRequest.h"
#include "OAICreateChannelTypeResponse.h"
#include "OAIListChannelTypesResponse.h"
#include "OAIResponse.h"
#include "OAIUpdateChannelTypeRequest.h"
#include "OAIUpdateChannelTypeResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChannelTypesApi : public QObject {
    Q_OBJECT

public:
    OAIChannelTypesApi(const int timeOut = 0);
    ~OAIChannelTypesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_channel_type_request OAICreateChannelTypeRequest [required]
    */
    virtual void createChannelType(const OAICreateChannelTypeRequest &oai_create_channel_type_request);

    /**
    * @param[in]  name QString [required]
    */
    virtual void deleteChannelType(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void getChannelType(const QString &name);


    virtual void listChannelTypes();

    /**
    * @param[in]  name QString [required]
    * @param[in]  oai_update_channel_type_request OAIUpdateChannelTypeRequest [required]
    */
    virtual void updateChannelType(const QString &name, const OAIUpdateChannelTypeRequest &oai_update_channel_type_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createChannelTypeCallback(OAIHttpRequestWorker *worker);
    void deleteChannelTypeCallback(OAIHttpRequestWorker *worker);
    void getChannelTypeCallback(OAIHttpRequestWorker *worker);
    void listChannelTypesCallback(OAIHttpRequestWorker *worker);
    void updateChannelTypeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createChannelTypeSignal(OAICreateChannelTypeResponse summary);
    void deleteChannelTypeSignal(OAIResponse summary);
    void getChannelTypeSignal(OAIResponse summary);
    void listChannelTypesSignal(OAIListChannelTypesResponse summary);
    void updateChannelTypeSignal(OAIUpdateChannelTypeResponse summary);


    void createChannelTypeSignalFull(OAIHttpRequestWorker *worker, OAICreateChannelTypeResponse summary);
    void deleteChannelTypeSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void getChannelTypeSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void listChannelTypesSignalFull(OAIHttpRequestWorker *worker, OAIListChannelTypesResponse summary);
    void updateChannelTypeSignalFull(OAIHttpRequestWorker *worker, OAIUpdateChannelTypeResponse summary);

    Q_DECL_DEPRECATED_X("Use createChannelTypeSignalError() instead")
    void createChannelTypeSignalE(OAICreateChannelTypeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createChannelTypeSignalError(OAICreateChannelTypeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelTypeSignalError() instead")
    void deleteChannelTypeSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelTypeSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelTypeSignalError() instead")
    void getChannelTypeSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelTypeSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelTypesSignalError() instead")
    void listChannelTypesSignalE(OAIListChannelTypesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelTypesSignalError(OAIListChannelTypesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChannelTypeSignalError() instead")
    void updateChannelTypeSignalE(OAIUpdateChannelTypeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChannelTypeSignalError(OAIUpdateChannelTypeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createChannelTypeSignalErrorFull() instead")
    void createChannelTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createChannelTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelTypeSignalErrorFull() instead")
    void deleteChannelTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelTypeSignalErrorFull() instead")
    void getChannelTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelTypesSignalErrorFull() instead")
    void listChannelTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChannelTypeSignalErrorFull() instead")
    void updateChannelTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChannelTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
