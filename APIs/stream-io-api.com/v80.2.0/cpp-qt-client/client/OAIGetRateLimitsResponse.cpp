/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRateLimitsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRateLimitsResponse::OAIGetRateLimitsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRateLimitsResponse::OAIGetRateLimitsResponse() {
    this->initializeModel();
}

OAIGetRateLimitsResponse::~OAIGetRateLimitsResponse() {}

void OAIGetRateLimitsResponse::initializeModel() {

    m_android_isSet = false;
    m_android_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_ios_isSet = false;
    m_ios_isValid = false;

    m_server_side_isSet = false;
    m_server_side_isValid = false;

    m_web_isSet = false;
    m_web_isValid = false;
}

void OAIGetRateLimitsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRateLimitsResponse::fromJsonObject(QJsonObject json) {

    m_android_isValid = ::OpenAPI::fromJsonValue(m_android, json[QString("android")]);
    m_android_isSet = !json[QString("android")].isNull() && m_android_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_ios_isValid = ::OpenAPI::fromJsonValue(m_ios, json[QString("ios")]);
    m_ios_isSet = !json[QString("ios")].isNull() && m_ios_isValid;

    m_server_side_isValid = ::OpenAPI::fromJsonValue(m_server_side, json[QString("server_side")]);
    m_server_side_isSet = !json[QString("server_side")].isNull() && m_server_side_isValid;

    m_web_isValid = ::OpenAPI::fromJsonValue(m_web, json[QString("web")]);
    m_web_isSet = !json[QString("web")].isNull() && m_web_isValid;
}

QString OAIGetRateLimitsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRateLimitsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_android.size() > 0) {
        obj.insert(QString("android"), ::OpenAPI::toJsonValue(m_android));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_ios.size() > 0) {
        obj.insert(QString("ios"), ::OpenAPI::toJsonValue(m_ios));
    }
    if (m_server_side.size() > 0) {
        obj.insert(QString("server_side"), ::OpenAPI::toJsonValue(m_server_side));
    }
    if (m_web.size() > 0) {
        obj.insert(QString("web"), ::OpenAPI::toJsonValue(m_web));
    }
    return obj;
}

QMap<QString, OAILimitInfo> OAIGetRateLimitsResponse::getAndroid() const {
    return m_android;
}
void OAIGetRateLimitsResponse::setAndroid(const QMap<QString, OAILimitInfo> &android) {
    m_android = android;
    m_android_isSet = true;
}

bool OAIGetRateLimitsResponse::is_android_Set() const{
    return m_android_isSet;
}

bool OAIGetRateLimitsResponse::is_android_Valid() const{
    return m_android_isValid;
}

QString OAIGetRateLimitsResponse::getDuration() const {
    return m_duration;
}
void OAIGetRateLimitsResponse::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIGetRateLimitsResponse::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIGetRateLimitsResponse::is_duration_Valid() const{
    return m_duration_isValid;
}

QMap<QString, OAILimitInfo> OAIGetRateLimitsResponse::getIos() const {
    return m_ios;
}
void OAIGetRateLimitsResponse::setIos(const QMap<QString, OAILimitInfo> &ios) {
    m_ios = ios;
    m_ios_isSet = true;
}

bool OAIGetRateLimitsResponse::is_ios_Set() const{
    return m_ios_isSet;
}

bool OAIGetRateLimitsResponse::is_ios_Valid() const{
    return m_ios_isValid;
}

QMap<QString, OAILimitInfo> OAIGetRateLimitsResponse::getServerSide() const {
    return m_server_side;
}
void OAIGetRateLimitsResponse::setServerSide(const QMap<QString, OAILimitInfo> &server_side) {
    m_server_side = server_side;
    m_server_side_isSet = true;
}

bool OAIGetRateLimitsResponse::is_server_side_Set() const{
    return m_server_side_isSet;
}

bool OAIGetRateLimitsResponse::is_server_side_Valid() const{
    return m_server_side_isValid;
}

QMap<QString, OAILimitInfo> OAIGetRateLimitsResponse::getWeb() const {
    return m_web;
}
void OAIGetRateLimitsResponse::setWeb(const QMap<QString, OAILimitInfo> &web) {
    m_web = web;
    m_web_isSet = true;
}

bool OAIGetRateLimitsResponse::is_web_Set() const{
    return m_web_isSet;
}

bool OAIGetRateLimitsResponse::is_web_Valid() const{
    return m_web_isValid;
}

bool OAIGetRateLimitsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_android.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ios.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_side.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRateLimitsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_duration_isValid && true;
}

} // namespace OpenAPI
