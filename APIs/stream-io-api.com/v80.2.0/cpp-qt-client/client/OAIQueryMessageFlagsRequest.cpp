/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryMessageFlagsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryMessageFlagsRequest::OAIQueryMessageFlagsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryMessageFlagsRequest::OAIQueryMessageFlagsRequest() {
    this->initializeModel();
}

OAIQueryMessageFlagsRequest::~OAIQueryMessageFlagsRequest() {}

void OAIQueryMessageFlagsRequest::initializeModel() {

    m_filter_conditions_isSet = false;
    m_filter_conditions_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIQueryMessageFlagsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryMessageFlagsRequest::fromJsonObject(QJsonObject json) {

    m_filter_conditions_isValid = ::OpenAPI::fromJsonValue(m_filter_conditions, json[QString("filter_conditions")]);
    m_filter_conditions_isSet = !json[QString("filter_conditions")].isNull() && m_filter_conditions_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIQueryMessageFlagsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryMessageFlagsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_conditions.size() > 0) {
        obj.insert(QString("filter_conditions"), ::OpenAPI::toJsonValue(m_filter_conditions));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIQueryMessageFlagsRequest::getFilterConditions() const {
    return m_filter_conditions;
}
void OAIQueryMessageFlagsRequest::setFilterConditions(const QMap<QString, QJsonValue> &filter_conditions) {
    m_filter_conditions = filter_conditions;
    m_filter_conditions_isSet = true;
}

bool OAIQueryMessageFlagsRequest::is_filter_conditions_Set() const{
    return m_filter_conditions_isSet;
}

bool OAIQueryMessageFlagsRequest::is_filter_conditions_Valid() const{
    return m_filter_conditions_isValid;
}

qint32 OAIQueryMessageFlagsRequest::getLimit() const {
    return m_limit;
}
void OAIQueryMessageFlagsRequest::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIQueryMessageFlagsRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIQueryMessageFlagsRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

qint32 OAIQueryMessageFlagsRequest::getOffset() const {
    return m_offset;
}
void OAIQueryMessageFlagsRequest::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIQueryMessageFlagsRequest::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIQueryMessageFlagsRequest::is_offset_Valid() const{
    return m_offset_isValid;
}

OAIUserObject OAIQueryMessageFlagsRequest::getUser() const {
    return m_user;
}
void OAIQueryMessageFlagsRequest::setUser(const OAIUserObject &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIQueryMessageFlagsRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAIQueryMessageFlagsRequest::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIQueryMessageFlagsRequest::getUserId() const {
    return m_user_id;
}
void OAIQueryMessageFlagsRequest::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIQueryMessageFlagsRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIQueryMessageFlagsRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIQueryMessageFlagsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryMessageFlagsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
