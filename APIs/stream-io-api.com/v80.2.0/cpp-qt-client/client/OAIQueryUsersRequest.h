/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIQueryUsersRequest.h
 *
 * 
 */

#ifndef OAIQueryUsersRequest_H
#define OAIQueryUsersRequest_H

#include <QJsonObject>

#include "OAISortParam.h"
#include "OAIUserObject.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISortParam;

class OAIQueryUsersRequest : public OAIObject {
public:
    OAIQueryUsersRequest();
    OAIQueryUsersRequest(QString json);
    ~OAIQueryUsersRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getClientId() const;
    void setClientId(const QString &client_id);
    bool is_client_id_Set() const;
    bool is_client_id_Valid() const;

    QString getConnectionId() const;
    void setConnectionId(const QString &connection_id);
    bool is_connection_id_Set() const;
    bool is_connection_id_Valid() const;

    QMap<QString, QJsonValue> getFilterConditions() const;
    void setFilterConditions(const QMap<QString, QJsonValue> &filter_conditions);
    bool is_filter_conditions_Set() const;
    bool is_filter_conditions_Valid() const;

    QString getIdGt() const;
    void setIdGt(const QString &id_gt);
    bool is_id_gt_Set() const;
    bool is_id_gt_Valid() const;

    QString getIdGte() const;
    void setIdGte(const QString &id_gte);
    bool is_id_gte_Set() const;
    bool is_id_gte_Valid() const;

    QString getIdLt() const;
    void setIdLt(const QString &id_lt);
    bool is_id_lt_Set() const;
    bool is_id_lt_Valid() const;

    QString getIdLte() const;
    void setIdLte(const QString &id_lte);
    bool is_id_lte_Set() const;
    bool is_id_lte_Valid() const;

    qint32 getLimit() const;
    void setLimit(const qint32 &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    qint32 getOffset() const;
    void setOffset(const qint32 &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    bool isPresence() const;
    void setPresence(const bool &presence);
    bool is_presence_Set() const;
    bool is_presence_Valid() const;

    QList<OAISortParam> getSort() const;
    void setSort(const QList<OAISortParam> &sort);
    bool is_sort_Set() const;
    bool is_sort_Valid() const;

    OAIUserObject getUser() const;
    void setUser(const OAIUserObject &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_client_id;
    bool m_client_id_isSet;
    bool m_client_id_isValid;

    QString m_connection_id;
    bool m_connection_id_isSet;
    bool m_connection_id_isValid;

    QMap<QString, QJsonValue> m_filter_conditions;
    bool m_filter_conditions_isSet;
    bool m_filter_conditions_isValid;

    QString m_id_gt;
    bool m_id_gt_isSet;
    bool m_id_gt_isValid;

    QString m_id_gte;
    bool m_id_gte_isSet;
    bool m_id_gte_isValid;

    QString m_id_lt;
    bool m_id_lt_isSet;
    bool m_id_lt_isValid;

    QString m_id_lte;
    bool m_id_lte_isSet;
    bool m_id_lte_isValid;

    qint32 m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    qint32 m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    bool m_presence;
    bool m_presence_isSet;
    bool m_presence_isValid;

    QList<OAISortParam> m_sort;
    bool m_sort_isSet;
    bool m_sort_isValid;

    OAIUserObject m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIQueryUsersRequest)

#endif // OAIQueryUsersRequest_H
