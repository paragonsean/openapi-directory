/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPushNotificationFields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPushNotificationFields::OAIPushNotificationFields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPushNotificationFields::OAIPushNotificationFields() {
    this->initializeModel();
}

OAIPushNotificationFields::~OAIPushNotificationFields() {}

void OAIPushNotificationFields::initializeModel() {

    m_apn_isSet = false;
    m_apn_isValid = false;

    m_firebase_isSet = false;
    m_firebase_isValid = false;

    m_huawei_isSet = false;
    m_huawei_isValid = false;

    m_offline_only_isSet = false;
    m_offline_only_isValid = false;

    m_providers_isSet = false;
    m_providers_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_xiaomi_isSet = false;
    m_xiaomi_isValid = false;
}

void OAIPushNotificationFields::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPushNotificationFields::fromJsonObject(QJsonObject json) {

    m_apn_isValid = ::OpenAPI::fromJsonValue(m_apn, json[QString("apn")]);
    m_apn_isSet = !json[QString("apn")].isNull() && m_apn_isValid;

    m_firebase_isValid = ::OpenAPI::fromJsonValue(m_firebase, json[QString("firebase")]);
    m_firebase_isSet = !json[QString("firebase")].isNull() && m_firebase_isValid;

    m_huawei_isValid = ::OpenAPI::fromJsonValue(m_huawei, json[QString("huawei")]);
    m_huawei_isSet = !json[QString("huawei")].isNull() && m_huawei_isValid;

    m_offline_only_isValid = ::OpenAPI::fromJsonValue(m_offline_only, json[QString("offline_only")]);
    m_offline_only_isSet = !json[QString("offline_only")].isNull() && m_offline_only_isValid;

    m_providers_isValid = ::OpenAPI::fromJsonValue(m_providers, json[QString("providers")]);
    m_providers_isSet = !json[QString("providers")].isNull() && m_providers_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_xiaomi_isValid = ::OpenAPI::fromJsonValue(m_xiaomi, json[QString("xiaomi")]);
    m_xiaomi_isSet = !json[QString("xiaomi")].isNull() && m_xiaomi_isValid;
}

QString OAIPushNotificationFields::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPushNotificationFields::asJsonObject() const {
    QJsonObject obj;
    if (m_apn.isSet()) {
        obj.insert(QString("apn"), ::OpenAPI::toJsonValue(m_apn));
    }
    if (m_firebase.isSet()) {
        obj.insert(QString("firebase"), ::OpenAPI::toJsonValue(m_firebase));
    }
    if (m_huawei.isSet()) {
        obj.insert(QString("huawei"), ::OpenAPI::toJsonValue(m_huawei));
    }
    if (m_offline_only_isSet) {
        obj.insert(QString("offline_only"), ::OpenAPI::toJsonValue(m_offline_only));
    }
    if (m_providers.size() > 0) {
        obj.insert(QString("providers"), ::OpenAPI::toJsonValue(m_providers));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_xiaomi.isSet()) {
        obj.insert(QString("xiaomi"), ::OpenAPI::toJsonValue(m_xiaomi));
    }
    return obj;
}

OAIAPNConfigFields OAIPushNotificationFields::getApn() const {
    return m_apn;
}
void OAIPushNotificationFields::setApn(const OAIAPNConfigFields &apn) {
    m_apn = apn;
    m_apn_isSet = true;
}

bool OAIPushNotificationFields::is_apn_Set() const{
    return m_apn_isSet;
}

bool OAIPushNotificationFields::is_apn_Valid() const{
    return m_apn_isValid;
}

OAIFirebaseConfigFields OAIPushNotificationFields::getFirebase() const {
    return m_firebase;
}
void OAIPushNotificationFields::setFirebase(const OAIFirebaseConfigFields &firebase) {
    m_firebase = firebase;
    m_firebase_isSet = true;
}

bool OAIPushNotificationFields::is_firebase_Set() const{
    return m_firebase_isSet;
}

bool OAIPushNotificationFields::is_firebase_Valid() const{
    return m_firebase_isValid;
}

OAIHuaweiConfigFields OAIPushNotificationFields::getHuawei() const {
    return m_huawei;
}
void OAIPushNotificationFields::setHuawei(const OAIHuaweiConfigFields &huawei) {
    m_huawei = huawei;
    m_huawei_isSet = true;
}

bool OAIPushNotificationFields::is_huawei_Set() const{
    return m_huawei_isSet;
}

bool OAIPushNotificationFields::is_huawei_Valid() const{
    return m_huawei_isValid;
}

bool OAIPushNotificationFields::isOfflineOnly() const {
    return m_offline_only;
}
void OAIPushNotificationFields::setOfflineOnly(const bool &offline_only) {
    m_offline_only = offline_only;
    m_offline_only_isSet = true;
}

bool OAIPushNotificationFields::is_offline_only_Set() const{
    return m_offline_only_isSet;
}

bool OAIPushNotificationFields::is_offline_only_Valid() const{
    return m_offline_only_isValid;
}

QList<OAIPushProvider> OAIPushNotificationFields::getProviders() const {
    return m_providers;
}
void OAIPushNotificationFields::setProviders(const QList<OAIPushProvider> &providers) {
    m_providers = providers;
    m_providers_isSet = true;
}

bool OAIPushNotificationFields::is_providers_Set() const{
    return m_providers_isSet;
}

bool OAIPushNotificationFields::is_providers_Valid() const{
    return m_providers_isValid;
}

QString OAIPushNotificationFields::getVersion() const {
    return m_version;
}
void OAIPushNotificationFields::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPushNotificationFields::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPushNotificationFields::is_version_Valid() const{
    return m_version_isValid;
}

OAIXiaomiConfigFields OAIPushNotificationFields::getXiaomi() const {
    return m_xiaomi;
}
void OAIPushNotificationFields::setXiaomi(const OAIXiaomiConfigFields &xiaomi) {
    m_xiaomi = xiaomi;
    m_xiaomi_isSet = true;
}

bool OAIPushNotificationFields::is_xiaomi_Set() const{
    return m_xiaomi_isSet;
}

bool OAIPushNotificationFields::is_xiaomi_Valid() const{
    return m_xiaomi_isValid;
}

bool OAIPushNotificationFields::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apn.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_firebase.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_huawei.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_providers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xiaomi.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPushNotificationFields::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_apn_isValid && m_firebase_isValid && m_huawei_isValid && m_offline_only_isValid && m_version_isValid && m_xiaomi_isValid && true;
}

} // namespace OpenAPI
