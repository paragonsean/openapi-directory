/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchWarning.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchWarning::OAISearchWarning(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchWarning::OAISearchWarning() {
    this->initializeModel();
}

OAISearchWarning::~OAISearchWarning() {}

void OAISearchWarning::initializeModel() {

    m_channel_search_cids_isSet = false;
    m_channel_search_cids_isValid = false;

    m_channel_search_count_isSet = false;
    m_channel_search_count_isValid = false;

    m_warning_code_isSet = false;
    m_warning_code_isValid = false;

    m_warning_description_isSet = false;
    m_warning_description_isValid = false;
}

void OAISearchWarning::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchWarning::fromJsonObject(QJsonObject json) {

    m_channel_search_cids_isValid = ::OpenAPI::fromJsonValue(m_channel_search_cids, json[QString("channel_search_cids")]);
    m_channel_search_cids_isSet = !json[QString("channel_search_cids")].isNull() && m_channel_search_cids_isValid;

    m_channel_search_count_isValid = ::OpenAPI::fromJsonValue(m_channel_search_count, json[QString("channel_search_count")]);
    m_channel_search_count_isSet = !json[QString("channel_search_count")].isNull() && m_channel_search_count_isValid;

    m_warning_code_isValid = ::OpenAPI::fromJsonValue(m_warning_code, json[QString("warning_code")]);
    m_warning_code_isSet = !json[QString("warning_code")].isNull() && m_warning_code_isValid;

    m_warning_description_isValid = ::OpenAPI::fromJsonValue(m_warning_description, json[QString("warning_description")]);
    m_warning_description_isSet = !json[QString("warning_description")].isNull() && m_warning_description_isValid;
}

QString OAISearchWarning::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchWarning::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_search_cids.size() > 0) {
        obj.insert(QString("channel_search_cids"), ::OpenAPI::toJsonValue(m_channel_search_cids));
    }
    if (m_channel_search_count_isSet) {
        obj.insert(QString("channel_search_count"), ::OpenAPI::toJsonValue(m_channel_search_count));
    }
    if (m_warning_code_isSet) {
        obj.insert(QString("warning_code"), ::OpenAPI::toJsonValue(m_warning_code));
    }
    if (m_warning_description_isSet) {
        obj.insert(QString("warning_description"), ::OpenAPI::toJsonValue(m_warning_description));
    }
    return obj;
}

QList<QString> OAISearchWarning::getChannelSearchCids() const {
    return m_channel_search_cids;
}
void OAISearchWarning::setChannelSearchCids(const QList<QString> &channel_search_cids) {
    m_channel_search_cids = channel_search_cids;
    m_channel_search_cids_isSet = true;
}

bool OAISearchWarning::is_channel_search_cids_Set() const{
    return m_channel_search_cids_isSet;
}

bool OAISearchWarning::is_channel_search_cids_Valid() const{
    return m_channel_search_cids_isValid;
}

qint32 OAISearchWarning::getChannelSearchCount() const {
    return m_channel_search_count;
}
void OAISearchWarning::setChannelSearchCount(const qint32 &channel_search_count) {
    m_channel_search_count = channel_search_count;
    m_channel_search_count_isSet = true;
}

bool OAISearchWarning::is_channel_search_count_Set() const{
    return m_channel_search_count_isSet;
}

bool OAISearchWarning::is_channel_search_count_Valid() const{
    return m_channel_search_count_isValid;
}

qint32 OAISearchWarning::getWarningCode() const {
    return m_warning_code;
}
void OAISearchWarning::setWarningCode(const qint32 &warning_code) {
    m_warning_code = warning_code;
    m_warning_code_isSet = true;
}

bool OAISearchWarning::is_warning_code_Set() const{
    return m_warning_code_isSet;
}

bool OAISearchWarning::is_warning_code_Valid() const{
    return m_warning_code_isValid;
}

QString OAISearchWarning::getWarningDescription() const {
    return m_warning_description;
}
void OAISearchWarning::setWarningDescription(const QString &warning_description) {
    m_warning_description = warning_description;
    m_warning_description_isSet = true;
}

bool OAISearchWarning::is_warning_description_Set() const{
    return m_warning_description_isSet;
}

bool OAISearchWarning::is_warning_description_Valid() const{
    return m_warning_description_isValid;
}

bool OAISearchWarning::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_search_cids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_search_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchWarning::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_warning_code_isValid && m_warning_description_isValid && true;
}

} // namespace OpenAPI
