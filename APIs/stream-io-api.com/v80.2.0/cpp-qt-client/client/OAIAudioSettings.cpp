/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioSettings::OAIAudioSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioSettings::OAIAudioSettings() {
    this->initializeModel();
}

OAIAudioSettings::~OAIAudioSettings() {}

void OAIAudioSettings::initializeModel() {

    m_access_request_enabled_isSet = false;
    m_access_request_enabled_isValid = false;

    m_opus_dtx_enabled_isSet = false;
    m_opus_dtx_enabled_isValid = false;

    m_redundant_coding_enabled_isSet = false;
    m_redundant_coding_enabled_isValid = false;
}

void OAIAudioSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioSettings::fromJsonObject(QJsonObject json) {

    m_access_request_enabled_isValid = ::OpenAPI::fromJsonValue(m_access_request_enabled, json[QString("access_request_enabled")]);
    m_access_request_enabled_isSet = !json[QString("access_request_enabled")].isNull() && m_access_request_enabled_isValid;

    m_opus_dtx_enabled_isValid = ::OpenAPI::fromJsonValue(m_opus_dtx_enabled, json[QString("opus_dtx_enabled")]);
    m_opus_dtx_enabled_isSet = !json[QString("opus_dtx_enabled")].isNull() && m_opus_dtx_enabled_isValid;

    m_redundant_coding_enabled_isValid = ::OpenAPI::fromJsonValue(m_redundant_coding_enabled, json[QString("redundant_coding_enabled")]);
    m_redundant_coding_enabled_isSet = !json[QString("redundant_coding_enabled")].isNull() && m_redundant_coding_enabled_isValid;
}

QString OAIAudioSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_access_request_enabled_isSet) {
        obj.insert(QString("access_request_enabled"), ::OpenAPI::toJsonValue(m_access_request_enabled));
    }
    if (m_opus_dtx_enabled_isSet) {
        obj.insert(QString("opus_dtx_enabled"), ::OpenAPI::toJsonValue(m_opus_dtx_enabled));
    }
    if (m_redundant_coding_enabled_isSet) {
        obj.insert(QString("redundant_coding_enabled"), ::OpenAPI::toJsonValue(m_redundant_coding_enabled));
    }
    return obj;
}

bool OAIAudioSettings::isAccessRequestEnabled() const {
    return m_access_request_enabled;
}
void OAIAudioSettings::setAccessRequestEnabled(const bool &access_request_enabled) {
    m_access_request_enabled = access_request_enabled;
    m_access_request_enabled_isSet = true;
}

bool OAIAudioSettings::is_access_request_enabled_Set() const{
    return m_access_request_enabled_isSet;
}

bool OAIAudioSettings::is_access_request_enabled_Valid() const{
    return m_access_request_enabled_isValid;
}

bool OAIAudioSettings::isOpusDtxEnabled() const {
    return m_opus_dtx_enabled;
}
void OAIAudioSettings::setOpusDtxEnabled(const bool &opus_dtx_enabled) {
    m_opus_dtx_enabled = opus_dtx_enabled;
    m_opus_dtx_enabled_isSet = true;
}

bool OAIAudioSettings::is_opus_dtx_enabled_Set() const{
    return m_opus_dtx_enabled_isSet;
}

bool OAIAudioSettings::is_opus_dtx_enabled_Valid() const{
    return m_opus_dtx_enabled_isValid;
}

bool OAIAudioSettings::isRedundantCodingEnabled() const {
    return m_redundant_coding_enabled;
}
void OAIAudioSettings::setRedundantCodingEnabled(const bool &redundant_coding_enabled) {
    m_redundant_coding_enabled = redundant_coding_enabled;
    m_redundant_coding_enabled_isSet = true;
}

bool OAIAudioSettings::is_redundant_coding_enabled_Set() const{
    return m_redundant_coding_enabled_isSet;
}

bool OAIAudioSettings::is_redundant_coding_enabled_Valid() const{
    return m_redundant_coding_enabled_isValid;
}

bool OAIAudioSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_request_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opus_dtx_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redundant_coding_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_request_enabled_isValid && m_opus_dtx_enabled_isValid && m_redundant_coding_enabled_isValid && true;
}

} // namespace OpenAPI
