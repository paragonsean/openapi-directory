/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCallRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCallRequest::OAICreateCallRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCallRequest::OAICreateCallRequest() {
    this->initializeModel();
}

OAICreateCallRequest::~OAICreateCallRequest() {}

void OAICreateCallRequest::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAICreateCallRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCallRequest::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAICreateCallRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCallRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAICreateCallRequest::getId() const {
    return m_id;
}
void OAICreateCallRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateCallRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateCallRequest::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, QJsonValue> OAICreateCallRequest::getOptions() const {
    return m_options;
}
void OAICreateCallRequest::setOptions(const QMap<QString, QJsonValue> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAICreateCallRequest::is_options_Set() const{
    return m_options_isSet;
}

bool OAICreateCallRequest::is_options_Valid() const{
    return m_options_isValid;
}

QString OAICreateCallRequest::getType() const {
    return m_type;
}
void OAICreateCallRequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateCallRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateCallRequest::is_type_Valid() const{
    return m_type_isValid;
}

OAIUserObjectRequest OAICreateCallRequest::getUser() const {
    return m_user;
}
void OAICreateCallRequest::setUser(const OAIUserObjectRequest &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAICreateCallRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAICreateCallRequest::is_user_Valid() const{
    return m_user_isValid;
}

QString OAICreateCallRequest::getUserId() const {
    return m_user_id;
}
void OAICreateCallRequest::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAICreateCallRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAICreateCallRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAICreateCallRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCallRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
