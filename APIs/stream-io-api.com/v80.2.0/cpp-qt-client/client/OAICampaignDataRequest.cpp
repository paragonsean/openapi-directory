/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICampaignDataRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICampaignDataRequest::OAICampaignDataRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICampaignDataRequest::OAICampaignDataRequest() {
    this->initializeModel();
}

OAICampaignDataRequest::~OAICampaignDataRequest() {}

void OAICampaignDataRequest::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_channel_type_isSet = false;
    m_channel_type_isValid = false;

    m_defaults_isSet = false;
    m_defaults_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_segment_id_isSet = false;
    m_segment_id_isValid = false;

    m_sender_id_isSet = false;
    m_sender_id_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAICampaignDataRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICampaignDataRequest::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_channel_type_isValid = ::OpenAPI::fromJsonValue(m_channel_type, json[QString("channel_type")]);
    m_channel_type_isSet = !json[QString("channel_type")].isNull() && m_channel_type_isValid;

    m_defaults_isValid = ::OpenAPI::fromJsonValue(m_defaults, json[QString("defaults")]);
    m_defaults_isSet = !json[QString("defaults")].isNull() && m_defaults_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_segment_id_isValid = ::OpenAPI::fromJsonValue(m_segment_id, json[QString("segment_id")]);
    m_segment_id_isSet = !json[QString("segment_id")].isNull() && m_segment_id_isValid;

    m_sender_id_isValid = ::OpenAPI::fromJsonValue(m_sender_id, json[QString("sender_id")]);
    m_sender_id_isSet = !json[QString("sender_id")].isNull() && m_sender_id_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAICampaignDataRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICampaignDataRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_channel_type_isSet) {
        obj.insert(QString("channel_type"), ::OpenAPI::toJsonValue(m_channel_type));
    }
    if (m_defaults.size() > 0) {
        obj.insert(QString("defaults"), ::OpenAPI::toJsonValue(m_defaults));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_segment_id_isSet) {
        obj.insert(QString("segment_id"), ::OpenAPI::toJsonValue(m_segment_id));
    }
    if (m_sender_id_isSet) {
        obj.insert(QString("sender_id"), ::OpenAPI::toJsonValue(m_sender_id));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QList<OAIAttachmentRequest> OAICampaignDataRequest::getAttachments() const {
    return m_attachments;
}
void OAICampaignDataRequest::setAttachments(const QList<OAIAttachmentRequest> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAICampaignDataRequest::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAICampaignDataRequest::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAICampaignDataRequest::getChannelType() const {
    return m_channel_type;
}
void OAICampaignDataRequest::setChannelType(const QString &channel_type) {
    m_channel_type = channel_type;
    m_channel_type_isSet = true;
}

bool OAICampaignDataRequest::is_channel_type_Set() const{
    return m_channel_type_isSet;
}

bool OAICampaignDataRequest::is_channel_type_Valid() const{
    return m_channel_type_isValid;
}

QMap<QString, QString> OAICampaignDataRequest::getDefaults() const {
    return m_defaults;
}
void OAICampaignDataRequest::setDefaults(const QMap<QString, QString> &defaults) {
    m_defaults = defaults;
    m_defaults_isSet = true;
}

bool OAICampaignDataRequest::is_defaults_Set() const{
    return m_defaults_isSet;
}

bool OAICampaignDataRequest::is_defaults_Valid() const{
    return m_defaults_isValid;
}

QString OAICampaignDataRequest::getDescription() const {
    return m_description;
}
void OAICampaignDataRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICampaignDataRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICampaignDataRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICampaignDataRequest::getName() const {
    return m_name;
}
void OAICampaignDataRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICampaignDataRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICampaignDataRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICampaignDataRequest::getSegmentId() const {
    return m_segment_id;
}
void OAICampaignDataRequest::setSegmentId(const QString &segment_id) {
    m_segment_id = segment_id;
    m_segment_id_isSet = true;
}

bool OAICampaignDataRequest::is_segment_id_Set() const{
    return m_segment_id_isSet;
}

bool OAICampaignDataRequest::is_segment_id_Valid() const{
    return m_segment_id_isValid;
}

QString OAICampaignDataRequest::getSenderId() const {
    return m_sender_id;
}
void OAICampaignDataRequest::setSenderId(const QString &sender_id) {
    m_sender_id = sender_id;
    m_sender_id_isSet = true;
}

bool OAICampaignDataRequest::is_sender_id_Set() const{
    return m_sender_id_isSet;
}

bool OAICampaignDataRequest::is_sender_id_Valid() const{
    return m_sender_id_isValid;
}

QString OAICampaignDataRequest::getText() const {
    return m_text;
}
void OAICampaignDataRequest::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAICampaignDataRequest::is_text_Set() const{
    return m_text_isSet;
}

bool OAICampaignDataRequest::is_text_Valid() const{
    return m_text_isValid;
}

bool OAICampaignDataRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_defaults.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_segment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICampaignDataRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_segment_id_isValid && m_sender_id_isValid && m_text_isValid && true;
}

} // namespace OpenAPI
