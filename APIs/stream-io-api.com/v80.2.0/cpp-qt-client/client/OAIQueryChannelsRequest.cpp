/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryChannelsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryChannelsRequest::OAIQueryChannelsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryChannelsRequest::OAIQueryChannelsRequest() {
    this->initializeModel();
}

OAIQueryChannelsRequest::~OAIQueryChannelsRequest() {}

void OAIQueryChannelsRequest::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_connection_id_isSet = false;
    m_connection_id_isValid = false;

    m_filter_conditions_isSet = false;
    m_filter_conditions_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_member_limit_isSet = false;
    m_member_limit_isValid = false;

    m_message_limit_isSet = false;
    m_message_limit_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_presence_isSet = false;
    m_presence_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_watch_isSet = false;
    m_watch_isValid = false;
}

void OAIQueryChannelsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryChannelsRequest::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_connection_id_isValid = ::OpenAPI::fromJsonValue(m_connection_id, json[QString("connection_id")]);
    m_connection_id_isSet = !json[QString("connection_id")].isNull() && m_connection_id_isValid;

    m_filter_conditions_isValid = ::OpenAPI::fromJsonValue(m_filter_conditions, json[QString("filter_conditions")]);
    m_filter_conditions_isSet = !json[QString("filter_conditions")].isNull() && m_filter_conditions_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_member_limit_isValid = ::OpenAPI::fromJsonValue(m_member_limit, json[QString("member_limit")]);
    m_member_limit_isSet = !json[QString("member_limit")].isNull() && m_member_limit_isValid;

    m_message_limit_isValid = ::OpenAPI::fromJsonValue(m_message_limit, json[QString("message_limit")]);
    m_message_limit_isSet = !json[QString("message_limit")].isNull() && m_message_limit_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_presence_isValid = ::OpenAPI::fromJsonValue(m_presence, json[QString("presence")]);
    m_presence_isSet = !json[QString("presence")].isNull() && m_presence_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_watch_isValid = ::OpenAPI::fromJsonValue(m_watch, json[QString("watch")]);
    m_watch_isSet = !json[QString("watch")].isNull() && m_watch_isValid;
}

QString OAIQueryChannelsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryChannelsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_connection_id_isSet) {
        obj.insert(QString("connection_id"), ::OpenAPI::toJsonValue(m_connection_id));
    }
    if (m_filter_conditions.size() > 0) {
        obj.insert(QString("filter_conditions"), ::OpenAPI::toJsonValue(m_filter_conditions));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_member_limit_isSet) {
        obj.insert(QString("member_limit"), ::OpenAPI::toJsonValue(m_member_limit));
    }
    if (m_message_limit_isSet) {
        obj.insert(QString("message_limit"), ::OpenAPI::toJsonValue(m_message_limit));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_presence_isSet) {
        obj.insert(QString("presence"), ::OpenAPI::toJsonValue(m_presence));
    }
    if (m_sort.size() > 0) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_watch_isSet) {
        obj.insert(QString("watch"), ::OpenAPI::toJsonValue(m_watch));
    }
    return obj;
}

QString OAIQueryChannelsRequest::getClientId() const {
    return m_client_id;
}
void OAIQueryChannelsRequest::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIQueryChannelsRequest::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIQueryChannelsRequest::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIQueryChannelsRequest::getConnectionId() const {
    return m_connection_id;
}
void OAIQueryChannelsRequest::setConnectionId(const QString &connection_id) {
    m_connection_id = connection_id;
    m_connection_id_isSet = true;
}

bool OAIQueryChannelsRequest::is_connection_id_Set() const{
    return m_connection_id_isSet;
}

bool OAIQueryChannelsRequest::is_connection_id_Valid() const{
    return m_connection_id_isValid;
}

QMap<QString, QJsonValue> OAIQueryChannelsRequest::getFilterConditions() const {
    return m_filter_conditions;
}
void OAIQueryChannelsRequest::setFilterConditions(const QMap<QString, QJsonValue> &filter_conditions) {
    m_filter_conditions = filter_conditions;
    m_filter_conditions_isSet = true;
}

bool OAIQueryChannelsRequest::is_filter_conditions_Set() const{
    return m_filter_conditions_isSet;
}

bool OAIQueryChannelsRequest::is_filter_conditions_Valid() const{
    return m_filter_conditions_isValid;
}

qint32 OAIQueryChannelsRequest::getLimit() const {
    return m_limit;
}
void OAIQueryChannelsRequest::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIQueryChannelsRequest::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIQueryChannelsRequest::is_limit_Valid() const{
    return m_limit_isValid;
}

qint32 OAIQueryChannelsRequest::getMemberLimit() const {
    return m_member_limit;
}
void OAIQueryChannelsRequest::setMemberLimit(const qint32 &member_limit) {
    m_member_limit = member_limit;
    m_member_limit_isSet = true;
}

bool OAIQueryChannelsRequest::is_member_limit_Set() const{
    return m_member_limit_isSet;
}

bool OAIQueryChannelsRequest::is_member_limit_Valid() const{
    return m_member_limit_isValid;
}

qint32 OAIQueryChannelsRequest::getMessageLimit() const {
    return m_message_limit;
}
void OAIQueryChannelsRequest::setMessageLimit(const qint32 &message_limit) {
    m_message_limit = message_limit;
    m_message_limit_isSet = true;
}

bool OAIQueryChannelsRequest::is_message_limit_Set() const{
    return m_message_limit_isSet;
}

bool OAIQueryChannelsRequest::is_message_limit_Valid() const{
    return m_message_limit_isValid;
}

qint32 OAIQueryChannelsRequest::getOffset() const {
    return m_offset;
}
void OAIQueryChannelsRequest::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIQueryChannelsRequest::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIQueryChannelsRequest::is_offset_Valid() const{
    return m_offset_isValid;
}

bool OAIQueryChannelsRequest::isPresence() const {
    return m_presence;
}
void OAIQueryChannelsRequest::setPresence(const bool &presence) {
    m_presence = presence;
    m_presence_isSet = true;
}

bool OAIQueryChannelsRequest::is_presence_Set() const{
    return m_presence_isSet;
}

bool OAIQueryChannelsRequest::is_presence_Valid() const{
    return m_presence_isValid;
}

QList<OAISortParamRequest> OAIQueryChannelsRequest::getSort() const {
    return m_sort;
}
void OAIQueryChannelsRequest::setSort(const QList<OAISortParamRequest> &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIQueryChannelsRequest::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIQueryChannelsRequest::is_sort_Valid() const{
    return m_sort_isValid;
}

bool OAIQueryChannelsRequest::isState() const {
    return m_state;
}
void OAIQueryChannelsRequest::setState(const bool &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIQueryChannelsRequest::is_state_Set() const{
    return m_state_isSet;
}

bool OAIQueryChannelsRequest::is_state_Valid() const{
    return m_state_isValid;
}

OAIUserObjectRequest OAIQueryChannelsRequest::getUser() const {
    return m_user;
}
void OAIQueryChannelsRequest::setUser(const OAIUserObjectRequest &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIQueryChannelsRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAIQueryChannelsRequest::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIQueryChannelsRequest::getUserId() const {
    return m_user_id;
}
void OAIQueryChannelsRequest::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIQueryChannelsRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIQueryChannelsRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIQueryChannelsRequest::isWatch() const {
    return m_watch;
}
void OAIQueryChannelsRequest::setWatch(const bool &watch) {
    m_watch = watch;
    m_watch_isSet = true;
}

bool OAIQueryChannelsRequest::is_watch_Set() const{
    return m_watch_isSet;
}

bool OAIQueryChannelsRequest::is_watch_Valid() const{
    return m_watch_isValid;
}

bool OAIQueryChannelsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_conditions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_presence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_watch_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryChannelsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sort_isValid && true;
}

} // namespace OpenAPI
