/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITruncateChannelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITruncateChannelRequest::OAITruncateChannelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITruncateChannelRequest::OAITruncateChannelRequest() {
    this->initializeModel();
}

OAITruncateChannelRequest::~OAITruncateChannelRequest() {}

void OAITruncateChannelRequest::initializeModel() {

    m_hard_delete_isSet = false;
    m_hard_delete_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_skip_push_isSet = false;
    m_skip_push_isValid = false;

    m_truncated_at_isSet = false;
    m_truncated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAITruncateChannelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITruncateChannelRequest::fromJsonObject(QJsonObject json) {

    m_hard_delete_isValid = ::OpenAPI::fromJsonValue(m_hard_delete, json[QString("hard_delete")]);
    m_hard_delete_isSet = !json[QString("hard_delete")].isNull() && m_hard_delete_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_skip_push_isValid = ::OpenAPI::fromJsonValue(m_skip_push, json[QString("skip_push")]);
    m_skip_push_isSet = !json[QString("skip_push")].isNull() && m_skip_push_isValid;

    m_truncated_at_isValid = ::OpenAPI::fromJsonValue(m_truncated_at, json[QString("truncated_at")]);
    m_truncated_at_isSet = !json[QString("truncated_at")].isNull() && m_truncated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAITruncateChannelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITruncateChannelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_hard_delete_isSet) {
        obj.insert(QString("hard_delete"), ::OpenAPI::toJsonValue(m_hard_delete));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_skip_push_isSet) {
        obj.insert(QString("skip_push"), ::OpenAPI::toJsonValue(m_skip_push));
    }
    if (m_truncated_at_isSet) {
        obj.insert(QString("truncated_at"), ::OpenAPI::toJsonValue(m_truncated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

bool OAITruncateChannelRequest::isHardDelete() const {
    return m_hard_delete;
}
void OAITruncateChannelRequest::setHardDelete(const bool &hard_delete) {
    m_hard_delete = hard_delete;
    m_hard_delete_isSet = true;
}

bool OAITruncateChannelRequest::is_hard_delete_Set() const{
    return m_hard_delete_isSet;
}

bool OAITruncateChannelRequest::is_hard_delete_Valid() const{
    return m_hard_delete_isValid;
}

OAIMessageRequest OAITruncateChannelRequest::getMessage() const {
    return m_message;
}
void OAITruncateChannelRequest::setMessage(const OAIMessageRequest &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAITruncateChannelRequest::is_message_Set() const{
    return m_message_isSet;
}

bool OAITruncateChannelRequest::is_message_Valid() const{
    return m_message_isValid;
}

bool OAITruncateChannelRequest::isSkipPush() const {
    return m_skip_push;
}
void OAITruncateChannelRequest::setSkipPush(const bool &skip_push) {
    m_skip_push = skip_push;
    m_skip_push_isSet = true;
}

bool OAITruncateChannelRequest::is_skip_push_Set() const{
    return m_skip_push_isSet;
}

bool OAITruncateChannelRequest::is_skip_push_Valid() const{
    return m_skip_push_isValid;
}

QDateTime OAITruncateChannelRequest::getTruncatedAt() const {
    return m_truncated_at;
}
void OAITruncateChannelRequest::setTruncatedAt(const QDateTime &truncated_at) {
    m_truncated_at = truncated_at;
    m_truncated_at_isSet = true;
}

bool OAITruncateChannelRequest::is_truncated_at_Set() const{
    return m_truncated_at_isSet;
}

bool OAITruncateChannelRequest::is_truncated_at_Valid() const{
    return m_truncated_at_isValid;
}

OAIUserObjectRequest OAITruncateChannelRequest::getUser() const {
    return m_user;
}
void OAITruncateChannelRequest::setUser(const OAIUserObjectRequest &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAITruncateChannelRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAITruncateChannelRequest::is_user_Valid() const{
    return m_user_isValid;
}

QString OAITruncateChannelRequest::getUserId() const {
    return m_user_id;
}
void OAITruncateChannelRequest::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAITruncateChannelRequest::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAITruncateChannelRequest::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAITruncateChannelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hard_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_push_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truncated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITruncateChannelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
