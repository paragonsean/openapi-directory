/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannelMessages.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannelMessages::OAIChannelMessages(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannelMessages::OAIChannelMessages() {
    this->initializeModel();
}

OAIChannelMessages::~OAIChannelMessages() {}

void OAIChannelMessages::initializeModel() {

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_messages_isSet = false;
    m_messages_isValid = false;
}

void OAIChannelMessages::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannelMessages::fromJsonObject(QJsonObject json) {

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_messages_isValid = ::OpenAPI::fromJsonValue(m_messages, json[QString("messages")]);
    m_messages_isSet = !json[QString("messages")].isNull() && m_messages_isValid;
}

QString OAIChannelMessages::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannelMessages::asJsonObject() const {
    QJsonObject obj;
    if (m_channel.isSet()) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_messages.size() > 0) {
        obj.insert(QString("messages"), ::OpenAPI::toJsonValue(m_messages));
    }
    return obj;
}

OAIChannelResponse OAIChannelMessages::getChannel() const {
    return m_channel;
}
void OAIChannelMessages::setChannel(const OAIChannelResponse &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIChannelMessages::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIChannelMessages::is_channel_Valid() const{
    return m_channel_isValid;
}

QList<OAIMessage> OAIChannelMessages::getMessages() const {
    return m_messages;
}
void OAIChannelMessages::setMessages(const QList<OAIMessage> &messages) {
    m_messages = messages;
    m_messages_isSet = true;
}

bool OAIChannelMessages::is_messages_Set() const{
    return m_messages_isSet;
}

bool OAIChannelMessages::is_messages_Valid() const{
    return m_messages_isValid;
}

bool OAIChannelMessages::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_messages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannelMessages::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_messages_isValid && true;
}

} // namespace OpenAPI
