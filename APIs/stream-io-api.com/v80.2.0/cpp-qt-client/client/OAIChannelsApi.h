/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChannelsApi_H
#define OAI_OAIChannelsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAIChannelGetOrCreateRequest.h"
#include "OAIChannelStateResponse.h"
#include "OAIChannelStopWatchingRequest.h"
#include "OAIChannelsResponse.h"
#include "OAIDeleteChannelResponse.h"
#include "OAIDeleteChannelsRequest.h"
#include "OAIDeleteChannelsResponse.h"
#include "OAIExportChannelsRequest.h"
#include "OAIExportChannelsResponse.h"
#include "OAIGetExportChannelsStatusResponse.h"
#include "OAIHideChannelRequest.h"
#include "OAIHideChannelResponse.h"
#include "OAIMarkChannelsReadRequest.h"
#include "OAIMarkReadRequest.h"
#include "OAIMarkReadResponse.h"
#include "OAIMarkUnreadRequest.h"
#include "OAIMembersResponse.h"
#include "OAIMuteChannelRequest.h"
#include "OAIMuteChannelResponse.h"
#include "OAIQueryChannelsRequest.h"
#include "OAIQueryMembersRequest.h"
#include "OAIResponse.h"
#include "OAISearchRequest.h"
#include "OAISearchResponse.h"
#include "OAIShowChannelRequest.h"
#include "OAIShowChannelResponse.h"
#include "OAIStopWatchingResponse.h"
#include "OAISyncRequest.h"
#include "OAISyncResponse.h"
#include "OAITruncateChannelRequest.h"
#include "OAITruncateChannelResponse.h"
#include "OAIUnmuteChannelRequest.h"
#include "OAIUnmuteResponse.h"
#include "OAIUpdateChannelPartialRequest.h"
#include "OAIUpdateChannelPartialResponse.h"
#include "OAIUpdateChannelRequest.h"
#include "OAIUpdateChannelResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChannelsApi : public QObject {
    Q_OBJECT

public:
    OAIChannelsApi(const int timeOut = 0);
    ~OAIChannelsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  hard_delete bool [optional]
    */
    virtual void deleteChannel(const QString &type, const QString &id, const ::OpenAPI::OptionalParam<bool> &hard_delete = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_delete_channels_request OAIDeleteChannelsRequest [required]
    */
    virtual void deleteChannels(const OAIDeleteChannelsRequest &oai_delete_channels_request);

    /**
    * @param[in]  oai_export_channels_request OAIExportChannelsRequest [required]
    */
    virtual void exportChannels(const OAIExportChannelsRequest &oai_export_channels_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getExportChannelsStatus(const QString &id);

    /**
    * @param[in]  type QString [required]
    * @param[in]  oai_channel_get_or_create_request OAIChannelGetOrCreateRequest [required]
    * @param[in]  client_id QString [optional]
    * @param[in]  connection_id QString [optional]
    */
    virtual void getOrCreateChannelType1(const QString &type, const OAIChannelGetOrCreateRequest &oai_channel_get_or_create_request, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &connection_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_channel_get_or_create_request OAIChannelGetOrCreateRequest [required]
    * @param[in]  client_id QString [optional]
    * @param[in]  connection_id QString [optional]
    */
    virtual void getOrCreateChannelTypeId0(const QString &type, const QString &id, const OAIChannelGetOrCreateRequest &oai_channel_get_or_create_request, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &connection_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_hide_channel_request OAIHideChannelRequest [required]
    */
    virtual void hideChannel(const QString &type, const QString &id, const OAIHideChannelRequest &oai_hide_channel_request);

    /**
    * @param[in]  oai_mark_channels_read_request OAIMarkChannelsReadRequest [required]
    */
    virtual void markChannelsRead(const OAIMarkChannelsReadRequest &oai_mark_channels_read_request);

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_mark_read_request OAIMarkReadRequest [required]
    */
    virtual void markRead(const QString &type, const QString &id, const OAIMarkReadRequest &oai_mark_read_request);

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_mark_unread_request OAIMarkUnreadRequest [required]
    */
    virtual void markUnread(const QString &type, const QString &id, const OAIMarkUnreadRequest &oai_mark_unread_request);

    /**
    * @param[in]  oai_mute_channel_request OAIMuteChannelRequest [required]
    */
    virtual void muteChannel(const OAIMuteChannelRequest &oai_mute_channel_request);

    /**
    * @param[in]  oai_query_channels_request OAIQueryChannelsRequest [required]
    * @param[in]  client_id QString [optional]
    * @param[in]  connection_id QString [optional]
    */
    virtual void queryChannels(const OAIQueryChannelsRequest &oai_query_channels_request, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &connection_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  payload OAIQueryMembersRequest [optional]
    */
    virtual void queryMembers(const ::OpenAPI::OptionalParam<OAIQueryMembersRequest> &payload = ::OpenAPI::OptionalParam<OAIQueryMembersRequest>());

    /**
    * @param[in]  payload OAISearchRequest [optional]
    */
    virtual void search(const ::OpenAPI::OptionalParam<OAISearchRequest> &payload = ::OpenAPI::OptionalParam<OAISearchRequest>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_show_channel_request OAIShowChannelRequest [required]
    */
    virtual void showChannel(const QString &type, const QString &id, const OAIShowChannelRequest &oai_show_channel_request);

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_channel_stop_watching_request OAIChannelStopWatchingRequest [required]
    * @param[in]  client_id QString [optional]
    * @param[in]  connection_id QString [optional]
    */
    virtual void stopWatchingChannel(const QString &type, const QString &id, const OAIChannelStopWatchingRequest &oai_channel_stop_watching_request, const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &connection_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_sync_request OAISyncRequest [required]
    * @param[in]  with_inaccessible_cids bool [optional]
    * @param[in]  watch bool [optional]
    * @param[in]  client_id QString [optional]
    * @param[in]  connection_id QString [optional]
    */
    virtual void sync(const OAISyncRequest &oai_sync_request, const ::OpenAPI::OptionalParam<bool> &with_inaccessible_cids = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &watch = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &connection_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_truncate_channel_request OAITruncateChannelRequest [required]
    */
    virtual void truncateChannel(const QString &type, const QString &id, const OAITruncateChannelRequest &oai_truncate_channel_request);

    /**
    * @param[in]  oai_unmute_channel_request OAIUnmuteChannelRequest [required]
    */
    virtual void unmuteChannel(const OAIUnmuteChannelRequest &oai_unmute_channel_request);

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_update_channel_request OAIUpdateChannelRequest [required]
    */
    virtual void updateChannel(const QString &type, const QString &id, const OAIUpdateChannelRequest &oai_update_channel_request);

    /**
    * @param[in]  type QString [required]
    * @param[in]  id QString [required]
    * @param[in]  oai_update_channel_partial_request OAIUpdateChannelPartialRequest [required]
    */
    virtual void updateChannelPartial(const QString &type, const QString &id, const OAIUpdateChannelPartialRequest &oai_update_channel_partial_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteChannelCallback(OAIHttpRequestWorker *worker);
    void deleteChannelsCallback(OAIHttpRequestWorker *worker);
    void exportChannelsCallback(OAIHttpRequestWorker *worker);
    void getExportChannelsStatusCallback(OAIHttpRequestWorker *worker);
    void getOrCreateChannelType1Callback(OAIHttpRequestWorker *worker);
    void getOrCreateChannelTypeId0Callback(OAIHttpRequestWorker *worker);
    void hideChannelCallback(OAIHttpRequestWorker *worker);
    void markChannelsReadCallback(OAIHttpRequestWorker *worker);
    void markReadCallback(OAIHttpRequestWorker *worker);
    void markUnreadCallback(OAIHttpRequestWorker *worker);
    void muteChannelCallback(OAIHttpRequestWorker *worker);
    void queryChannelsCallback(OAIHttpRequestWorker *worker);
    void queryMembersCallback(OAIHttpRequestWorker *worker);
    void searchCallback(OAIHttpRequestWorker *worker);
    void showChannelCallback(OAIHttpRequestWorker *worker);
    void stopWatchingChannelCallback(OAIHttpRequestWorker *worker);
    void syncCallback(OAIHttpRequestWorker *worker);
    void truncateChannelCallback(OAIHttpRequestWorker *worker);
    void unmuteChannelCallback(OAIHttpRequestWorker *worker);
    void updateChannelCallback(OAIHttpRequestWorker *worker);
    void updateChannelPartialCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteChannelSignal(OAIDeleteChannelResponse summary);
    void deleteChannelsSignal(OAIDeleteChannelsResponse summary);
    void exportChannelsSignal(OAIExportChannelsResponse summary);
    void getExportChannelsStatusSignal(OAIGetExportChannelsStatusResponse summary);
    void getOrCreateChannelType1Signal(OAIChannelStateResponse summary);
    void getOrCreateChannelTypeId0Signal(OAIChannelStateResponse summary);
    void hideChannelSignal(OAIHideChannelResponse summary);
    void markChannelsReadSignal(OAIMarkReadResponse summary);
    void markReadSignal(OAIMarkReadResponse summary);
    void markUnreadSignal(OAIResponse summary);
    void muteChannelSignal(OAIMuteChannelResponse summary);
    void queryChannelsSignal(OAIChannelsResponse summary);
    void queryMembersSignal(OAIMembersResponse summary);
    void searchSignal(OAISearchResponse summary);
    void showChannelSignal(OAIShowChannelResponse summary);
    void stopWatchingChannelSignal(OAIStopWatchingResponse summary);
    void syncSignal(OAISyncResponse summary);
    void truncateChannelSignal(OAITruncateChannelResponse summary);
    void unmuteChannelSignal(OAIUnmuteResponse summary);
    void updateChannelSignal(OAIUpdateChannelResponse summary);
    void updateChannelPartialSignal(OAIUpdateChannelPartialResponse summary);


    void deleteChannelSignalFull(OAIHttpRequestWorker *worker, OAIDeleteChannelResponse summary);
    void deleteChannelsSignalFull(OAIHttpRequestWorker *worker, OAIDeleteChannelsResponse summary);
    void exportChannelsSignalFull(OAIHttpRequestWorker *worker, OAIExportChannelsResponse summary);
    void getExportChannelsStatusSignalFull(OAIHttpRequestWorker *worker, OAIGetExportChannelsStatusResponse summary);
    void getOrCreateChannelType1SignalFull(OAIHttpRequestWorker *worker, OAIChannelStateResponse summary);
    void getOrCreateChannelTypeId0SignalFull(OAIHttpRequestWorker *worker, OAIChannelStateResponse summary);
    void hideChannelSignalFull(OAIHttpRequestWorker *worker, OAIHideChannelResponse summary);
    void markChannelsReadSignalFull(OAIHttpRequestWorker *worker, OAIMarkReadResponse summary);
    void markReadSignalFull(OAIHttpRequestWorker *worker, OAIMarkReadResponse summary);
    void markUnreadSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void muteChannelSignalFull(OAIHttpRequestWorker *worker, OAIMuteChannelResponse summary);
    void queryChannelsSignalFull(OAIHttpRequestWorker *worker, OAIChannelsResponse summary);
    void queryMembersSignalFull(OAIHttpRequestWorker *worker, OAIMembersResponse summary);
    void searchSignalFull(OAIHttpRequestWorker *worker, OAISearchResponse summary);
    void showChannelSignalFull(OAIHttpRequestWorker *worker, OAIShowChannelResponse summary);
    void stopWatchingChannelSignalFull(OAIHttpRequestWorker *worker, OAIStopWatchingResponse summary);
    void syncSignalFull(OAIHttpRequestWorker *worker, OAISyncResponse summary);
    void truncateChannelSignalFull(OAIHttpRequestWorker *worker, OAITruncateChannelResponse summary);
    void unmuteChannelSignalFull(OAIHttpRequestWorker *worker, OAIUnmuteResponse summary);
    void updateChannelSignalFull(OAIHttpRequestWorker *worker, OAIUpdateChannelResponse summary);
    void updateChannelPartialSignalFull(OAIHttpRequestWorker *worker, OAIUpdateChannelPartialResponse summary);

    Q_DECL_DEPRECATED_X("Use deleteChannelSignalError() instead")
    void deleteChannelSignalE(OAIDeleteChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelSignalError(OAIDeleteChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelsSignalError() instead")
    void deleteChannelsSignalE(OAIDeleteChannelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelsSignalError(OAIDeleteChannelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportChannelsSignalError() instead")
    void exportChannelsSignalE(OAIExportChannelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportChannelsSignalError(OAIExportChannelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExportChannelsStatusSignalError() instead")
    void getExportChannelsStatusSignalE(OAIGetExportChannelsStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getExportChannelsStatusSignalError(OAIGetExportChannelsStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrCreateChannelType1SignalError() instead")
    void getOrCreateChannelType1SignalE(OAIChannelStateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrCreateChannelType1SignalError(OAIChannelStateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrCreateChannelTypeId0SignalError() instead")
    void getOrCreateChannelTypeId0SignalE(OAIChannelStateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrCreateChannelTypeId0SignalError(OAIChannelStateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hideChannelSignalError() instead")
    void hideChannelSignalE(OAIHideChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hideChannelSignalError(OAIHideChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markChannelsReadSignalError() instead")
    void markChannelsReadSignalE(OAIMarkReadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void markChannelsReadSignalError(OAIMarkReadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markReadSignalError() instead")
    void markReadSignalE(OAIMarkReadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void markReadSignalError(OAIMarkReadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markUnreadSignalError() instead")
    void markUnreadSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void markUnreadSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use muteChannelSignalError() instead")
    void muteChannelSignalE(OAIMuteChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void muteChannelSignalError(OAIMuteChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryChannelsSignalError() instead")
    void queryChannelsSignalE(OAIChannelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryChannelsSignalError(OAIChannelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryMembersSignalError() instead")
    void queryMembersSignalE(OAIMembersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void queryMembersSignalError(OAIMembersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSignalError() instead")
    void searchSignalE(OAISearchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSignalError(OAISearchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showChannelSignalError() instead")
    void showChannelSignalE(OAIShowChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void showChannelSignalError(OAIShowChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopWatchingChannelSignalError() instead")
    void stopWatchingChannelSignalE(OAIStopWatchingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopWatchingChannelSignalError(OAIStopWatchingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncSignalError() instead")
    void syncSignalE(OAISyncResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void syncSignalError(OAISyncResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use truncateChannelSignalError() instead")
    void truncateChannelSignalE(OAITruncateChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void truncateChannelSignalError(OAITruncateChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unmuteChannelSignalError() instead")
    void unmuteChannelSignalE(OAIUnmuteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unmuteChannelSignalError(OAIUnmuteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChannelSignalError() instead")
    void updateChannelSignalE(OAIUpdateChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChannelSignalError(OAIUpdateChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChannelPartialSignalError() instead")
    void updateChannelPartialSignalE(OAIUpdateChannelPartialResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChannelPartialSignalError(OAIUpdateChannelPartialResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteChannelSignalErrorFull() instead")
    void deleteChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelsSignalErrorFull() instead")
    void deleteChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportChannelsSignalErrorFull() instead")
    void exportChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getExportChannelsStatusSignalErrorFull() instead")
    void getExportChannelsStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getExportChannelsStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrCreateChannelType1SignalErrorFull() instead")
    void getOrCreateChannelType1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrCreateChannelType1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrCreateChannelTypeId0SignalErrorFull() instead")
    void getOrCreateChannelTypeId0SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrCreateChannelTypeId0SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hideChannelSignalErrorFull() instead")
    void hideChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hideChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markChannelsReadSignalErrorFull() instead")
    void markChannelsReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void markChannelsReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markReadSignalErrorFull() instead")
    void markReadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void markReadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use markUnreadSignalErrorFull() instead")
    void markUnreadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void markUnreadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use muteChannelSignalErrorFull() instead")
    void muteChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void muteChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryChannelsSignalErrorFull() instead")
    void queryChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use queryMembersSignalErrorFull() instead")
    void queryMembersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void queryMembersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSignalErrorFull() instead")
    void searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use showChannelSignalErrorFull() instead")
    void showChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void showChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopWatchingChannelSignalErrorFull() instead")
    void stopWatchingChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopWatchingChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use syncSignalErrorFull() instead")
    void syncSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void syncSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use truncateChannelSignalErrorFull() instead")
    void truncateChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void truncateChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unmuteChannelSignalErrorFull() instead")
    void unmuteChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unmuteChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChannelSignalErrorFull() instead")
    void updateChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChannelPartialSignalErrorFull() instead")
    void updateChannelPartialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChannelPartialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
