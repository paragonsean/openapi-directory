/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendReactionRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendReactionRequest::OAISendReactionRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendReactionRequest::OAISendReactionRequest() {
    this->initializeModel();
}

OAISendReactionRequest::~OAISendReactionRequest() {}

void OAISendReactionRequest::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_enforce_unique_isSet = false;
    m_enforce_unique_isValid = false;

    m_reaction_isSet = false;
    m_reaction_isValid = false;

    m_skip_push_isSet = false;
    m_skip_push_isValid = false;
}

void OAISendReactionRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendReactionRequest::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("ID")]);
    m_id_isSet = !json[QString("ID")].isNull() && m_id_isValid;

    m_enforce_unique_isValid = ::OpenAPI::fromJsonValue(m_enforce_unique, json[QString("enforce_unique")]);
    m_enforce_unique_isSet = !json[QString("enforce_unique")].isNull() && m_enforce_unique_isValid;

    m_reaction_isValid = ::OpenAPI::fromJsonValue(m_reaction, json[QString("reaction")]);
    m_reaction_isSet = !json[QString("reaction")].isNull() && m_reaction_isValid;

    m_skip_push_isValid = ::OpenAPI::fromJsonValue(m_skip_push, json[QString("skip_push")]);
    m_skip_push_isSet = !json[QString("skip_push")].isNull() && m_skip_push_isValid;
}

QString OAISendReactionRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendReactionRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("ID"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_enforce_unique_isSet) {
        obj.insert(QString("enforce_unique"), ::OpenAPI::toJsonValue(m_enforce_unique));
    }
    if (m_reaction.isSet()) {
        obj.insert(QString("reaction"), ::OpenAPI::toJsonValue(m_reaction));
    }
    if (m_skip_push_isSet) {
        obj.insert(QString("skip_push"), ::OpenAPI::toJsonValue(m_skip_push));
    }
    return obj;
}

QString OAISendReactionRequest::getId() const {
    return m_id;
}
void OAISendReactionRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISendReactionRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAISendReactionRequest::is_id_Valid() const{
    return m_id_isValid;
}

bool OAISendReactionRequest::isEnforceUnique() const {
    return m_enforce_unique;
}
void OAISendReactionRequest::setEnforceUnique(const bool &enforce_unique) {
    m_enforce_unique = enforce_unique;
    m_enforce_unique_isSet = true;
}

bool OAISendReactionRequest::is_enforce_unique_Set() const{
    return m_enforce_unique_isSet;
}

bool OAISendReactionRequest::is_enforce_unique_Valid() const{
    return m_enforce_unique_isValid;
}

OAIReactionRequest OAISendReactionRequest::getReaction() const {
    return m_reaction;
}
void OAISendReactionRequest::setReaction(const OAIReactionRequest &reaction) {
    m_reaction = reaction;
    m_reaction_isSet = true;
}

bool OAISendReactionRequest::is_reaction_Set() const{
    return m_reaction_isSet;
}

bool OAISendReactionRequest::is_reaction_Valid() const{
    return m_reaction_isValid;
}

bool OAISendReactionRequest::isSkipPush() const {
    return m_skip_push;
}
void OAISendReactionRequest::setSkipPush(const bool &skip_push) {
    m_skip_push = skip_push;
    m_skip_push_isSet = true;
}

bool OAISendReactionRequest::is_skip_push_Set() const{
    return m_skip_push_isSet;
}

bool OAISendReactionRequest::is_skip_push_Valid() const{
    return m_skip_push_isValid;
}

bool OAISendReactionRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforce_unique_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_push_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendReactionRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_reaction_isValid && true;
}

} // namespace OpenAPI
