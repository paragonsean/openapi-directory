/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISearchRequest.h
 *
 * 
 */

#ifndef OAISearchRequest_H
#define OAISearchRequest_H

#include <QJsonObject>

#include "OAISortParam.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISortParam;

class OAISearchRequest : public OAIObject {
public:
    OAISearchRequest();
    OAISearchRequest(QString json);
    ~OAISearchRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QJsonValue> getFilterConditions() const;
    void setFilterConditions(const QMap<QString, QJsonValue> &filter_conditions);
    bool is_filter_conditions_Set() const;
    bool is_filter_conditions_Valid() const;

    qint32 getLimit() const;
    void setLimit(const qint32 &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    QMap<QString, QJsonValue> getMessageFilterConditions() const;
    void setMessageFilterConditions(const QMap<QString, QJsonValue> &message_filter_conditions);
    bool is_message_filter_conditions_Set() const;
    bool is_message_filter_conditions_Valid() const;

    QString getNext() const;
    void setNext(const QString &next);
    bool is_next_Set() const;
    bool is_next_Valid() const;

    qint32 getOffset() const;
    void setOffset(const qint32 &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    QString getQuery() const;
    void setQuery(const QString &query);
    bool is_query_Set() const;
    bool is_query_Valid() const;

    QList<OAISortParam> getSort() const;
    void setSort(const QList<OAISortParam> &sort);
    bool is_sort_Set() const;
    bool is_sort_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QJsonValue> m_filter_conditions;
    bool m_filter_conditions_isSet;
    bool m_filter_conditions_isValid;

    qint32 m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    QMap<QString, QJsonValue> m_message_filter_conditions;
    bool m_message_filter_conditions_isSet;
    bool m_message_filter_conditions_isValid;

    QString m_next;
    bool m_next_isSet;
    bool m_next_isValid;

    qint32 m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    QString m_query;
    bool m_query_isSet;
    bool m_query_isValid;

    QList<OAISortParam> m_sort;
    bool m_sort_isSet;
    bool m_sort_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISearchRequest)

#endif // OAISearchRequest_H
