/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISyncResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISyncResponse::OAISyncResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISyncResponse::OAISyncResponse() {
    this->initializeModel();
}

OAISyncResponse::~OAISyncResponse() {}

void OAISyncResponse::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_events_isSet = false;
    m_events_isValid = false;

    m_inaccessible_cids_isSet = false;
    m_inaccessible_cids_isValid = false;
}

void OAISyncResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISyncResponse::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_inaccessible_cids_isValid = ::OpenAPI::fromJsonValue(m_inaccessible_cids, json[QString("inaccessible_cids")]);
    m_inaccessible_cids_isSet = !json[QString("inaccessible_cids")].isNull() && m_inaccessible_cids_isValid;
}

QString OAISyncResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISyncResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_inaccessible_cids.size() > 0) {
        obj.insert(QString("inaccessible_cids"), ::OpenAPI::toJsonValue(m_inaccessible_cids));
    }
    return obj;
}

QString OAISyncResponse::getDuration() const {
    return m_duration;
}
void OAISyncResponse::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAISyncResponse::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAISyncResponse::is_duration_Valid() const{
    return m_duration_isValid;
}

QList<OAIEvent> OAISyncResponse::getEvents() const {
    return m_events;
}
void OAISyncResponse::setEvents(const QList<OAIEvent> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAISyncResponse::is_events_Set() const{
    return m_events_isSet;
}

bool OAISyncResponse::is_events_Valid() const{
    return m_events_isValid;
}

QList<QString> OAISyncResponse::getInaccessibleCids() const {
    return m_inaccessible_cids;
}
void OAISyncResponse::setInaccessibleCids(const QList<QString> &inaccessible_cids) {
    m_inaccessible_cids = inaccessible_cids;
    m_inaccessible_cids_isSet = true;
}

bool OAISyncResponse::is_inaccessible_cids_Set() const{
    return m_inaccessible_cids_isSet;
}

bool OAISyncResponse::is_inaccessible_cids_Valid() const{
    return m_inaccessible_cids_isValid;
}

bool OAISyncResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inaccessible_cids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISyncResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_duration_isValid && m_events_isValid && true;
}

} // namespace OpenAPI
