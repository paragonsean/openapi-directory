/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPNConfigRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAPNConfigRequest::OAIAPNConfigRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAPNConfigRequest::OAIAPNConfigRequest() {
    this->initializeModel();
}

OAIAPNConfigRequest::~OAIAPNConfigRequest() {}

void OAIAPNConfigRequest::initializeModel() {

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_auth_key_isSet = false;
    m_auth_key_isValid = false;

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_bundle_id_isSet = false;
    m_bundle_id_isValid = false;

    m_development_isSet = false;
    m_development_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_key_id_isSet = false;
    m_key_id_isValid = false;

    m_notification_template_isSet = false;
    m_notification_template_isValid = false;

    m_p12_cert_isSet = false;
    m_p12_cert_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;
}

void OAIAPNConfigRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAPNConfigRequest::fromJsonObject(QJsonObject json) {

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("Disabled")]);
    m_disabled_isSet = !json[QString("Disabled")].isNull() && m_disabled_isValid;

    m_auth_key_isValid = ::OpenAPI::fromJsonValue(m_auth_key, json[QString("auth_key")]);
    m_auth_key_isSet = !json[QString("auth_key")].isNull() && m_auth_key_isValid;

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("auth_type")]);
    m_auth_type_isSet = !json[QString("auth_type")].isNull() && m_auth_type_isValid;

    m_bundle_id_isValid = ::OpenAPI::fromJsonValue(m_bundle_id, json[QString("bundle_id")]);
    m_bundle_id_isSet = !json[QString("bundle_id")].isNull() && m_bundle_id_isValid;

    m_development_isValid = ::OpenAPI::fromJsonValue(m_development, json[QString("development")]);
    m_development_isSet = !json[QString("development")].isNull() && m_development_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_key_id_isValid = ::OpenAPI::fromJsonValue(m_key_id, json[QString("key_id")]);
    m_key_id_isSet = !json[QString("key_id")].isNull() && m_key_id_isValid;

    m_notification_template_isValid = ::OpenAPI::fromJsonValue(m_notification_template, json[QString("notification_template")]);
    m_notification_template_isSet = !json[QString("notification_template")].isNull() && m_notification_template_isValid;

    m_p12_cert_isValid = ::OpenAPI::fromJsonValue(m_p12_cert, json[QString("p12_cert")]);
    m_p12_cert_isSet = !json[QString("p12_cert")].isNull() && m_p12_cert_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("team_id")]);
    m_team_id_isSet = !json[QString("team_id")].isNull() && m_team_id_isValid;
}

QString OAIAPNConfigRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAPNConfigRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_disabled_isSet) {
        obj.insert(QString("Disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_auth_key_isSet) {
        obj.insert(QString("auth_key"), ::OpenAPI::toJsonValue(m_auth_key));
    }
    if (m_auth_type_isSet) {
        obj.insert(QString("auth_type"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_bundle_id_isSet) {
        obj.insert(QString("bundle_id"), ::OpenAPI::toJsonValue(m_bundle_id));
    }
    if (m_development_isSet) {
        obj.insert(QString("development"), ::OpenAPI::toJsonValue(m_development));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_key_id_isSet) {
        obj.insert(QString("key_id"), ::OpenAPI::toJsonValue(m_key_id));
    }
    if (m_notification_template_isSet) {
        obj.insert(QString("notification_template"), ::OpenAPI::toJsonValue(m_notification_template));
    }
    if (m_p12_cert_isSet) {
        obj.insert(QString("p12_cert"), ::OpenAPI::toJsonValue(m_p12_cert));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("team_id"), ::OpenAPI::toJsonValue(m_team_id));
    }
    return obj;
}

bool OAIAPNConfigRequest::isDisabled() const {
    return m_disabled;
}
void OAIAPNConfigRequest::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIAPNConfigRequest::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIAPNConfigRequest::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAIAPNConfigRequest::getAuthKey() const {
    return m_auth_key;
}
void OAIAPNConfigRequest::setAuthKey(const QString &auth_key) {
    m_auth_key = auth_key;
    m_auth_key_isSet = true;
}

bool OAIAPNConfigRequest::is_auth_key_Set() const{
    return m_auth_key_isSet;
}

bool OAIAPNConfigRequest::is_auth_key_Valid() const{
    return m_auth_key_isValid;
}

QString OAIAPNConfigRequest::getAuthType() const {
    return m_auth_type;
}
void OAIAPNConfigRequest::setAuthType(const QString &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAIAPNConfigRequest::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAIAPNConfigRequest::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

QString OAIAPNConfigRequest::getBundleId() const {
    return m_bundle_id;
}
void OAIAPNConfigRequest::setBundleId(const QString &bundle_id) {
    m_bundle_id = bundle_id;
    m_bundle_id_isSet = true;
}

bool OAIAPNConfigRequest::is_bundle_id_Set() const{
    return m_bundle_id_isSet;
}

bool OAIAPNConfigRequest::is_bundle_id_Valid() const{
    return m_bundle_id_isValid;
}

bool OAIAPNConfigRequest::isDevelopment() const {
    return m_development;
}
void OAIAPNConfigRequest::setDevelopment(const bool &development) {
    m_development = development;
    m_development_isSet = true;
}

bool OAIAPNConfigRequest::is_development_Set() const{
    return m_development_isSet;
}

bool OAIAPNConfigRequest::is_development_Valid() const{
    return m_development_isValid;
}

QString OAIAPNConfigRequest::getHost() const {
    return m_host;
}
void OAIAPNConfigRequest::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIAPNConfigRequest::is_host_Set() const{
    return m_host_isSet;
}

bool OAIAPNConfigRequest::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIAPNConfigRequest::getKeyId() const {
    return m_key_id;
}
void OAIAPNConfigRequest::setKeyId(const QString &key_id) {
    m_key_id = key_id;
    m_key_id_isSet = true;
}

bool OAIAPNConfigRequest::is_key_id_Set() const{
    return m_key_id_isSet;
}

bool OAIAPNConfigRequest::is_key_id_Valid() const{
    return m_key_id_isValid;
}

QString OAIAPNConfigRequest::getNotificationTemplate() const {
    return m_notification_template;
}
void OAIAPNConfigRequest::setNotificationTemplate(const QString &notification_template) {
    m_notification_template = notification_template;
    m_notification_template_isSet = true;
}

bool OAIAPNConfigRequest::is_notification_template_Set() const{
    return m_notification_template_isSet;
}

bool OAIAPNConfigRequest::is_notification_template_Valid() const{
    return m_notification_template_isValid;
}

QString OAIAPNConfigRequest::getP12Cert() const {
    return m_p12_cert;
}
void OAIAPNConfigRequest::setP12Cert(const QString &p12_cert) {
    m_p12_cert = p12_cert;
    m_p12_cert_isSet = true;
}

bool OAIAPNConfigRequest::is_p12_cert_Set() const{
    return m_p12_cert_isSet;
}

bool OAIAPNConfigRequest::is_p12_cert_Valid() const{
    return m_p12_cert_isValid;
}

QString OAIAPNConfigRequest::getTeamId() const {
    return m_team_id;
}
void OAIAPNConfigRequest::setTeamId(const QString &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAIAPNConfigRequest::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAIAPNConfigRequest::is_team_id_Valid() const{
    return m_team_id_isValid;
}

bool OAIAPNConfigRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bundle_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_development_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_p12_cert_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAPNConfigRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
