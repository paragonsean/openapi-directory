/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChannel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChannel::OAIChannel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChannel::OAIChannel() {
    this->initializeModel();
}

OAIChannel::~OAIChannel() {}

void OAIChannel::initializeModel() {

    m_auto_translation_enabled_isSet = false;
    m_auto_translation_enabled_isValid = false;

    m_auto_translation_language_isSet = false;
    m_auto_translation_language_isValid = false;

    m_cid_isSet = false;
    m_cid_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_config_overrides_isSet = false;
    m_config_overrides_isValid = false;

    m_cooldown_isSet = false;
    m_cooldown_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_deleted_at_isSet = false;
    m_deleted_at_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_frozen_isSet = false;
    m_frozen_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_invites_isSet = false;
    m_invites_isValid = false;

    m_last_message_at_isSet = false;
    m_last_message_at_isValid = false;

    m_member_count_isSet = false;
    m_member_count_isValid = false;

    m_members_isSet = false;
    m_members_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_truncated_by_isSet = false;
    m_truncated_by_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIChannel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChannel::fromJsonObject(QJsonObject json) {

    m_auto_translation_enabled_isValid = ::OpenAPI::fromJsonValue(m_auto_translation_enabled, json[QString("auto_translation_enabled")]);
    m_auto_translation_enabled_isSet = !json[QString("auto_translation_enabled")].isNull() && m_auto_translation_enabled_isValid;

    m_auto_translation_language_isValid = ::OpenAPI::fromJsonValue(m_auto_translation_language, json[QString("auto_translation_language")]);
    m_auto_translation_language_isSet = !json[QString("auto_translation_language")].isNull() && m_auto_translation_language_isValid;

    m_cid_isValid = ::OpenAPI::fromJsonValue(m_cid, json[QString("cid")]);
    m_cid_isSet = !json[QString("cid")].isNull() && m_cid_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_config_overrides_isValid = ::OpenAPI::fromJsonValue(m_config_overrides, json[QString("config_overrides")]);
    m_config_overrides_isSet = !json[QString("config_overrides")].isNull() && m_config_overrides_isValid;

    m_cooldown_isValid = ::OpenAPI::fromJsonValue(m_cooldown, json[QString("cooldown")]);
    m_cooldown_isSet = !json[QString("cooldown")].isNull() && m_cooldown_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("created_by")]);
    m_created_by_isSet = !json[QString("created_by")].isNull() && m_created_by_isValid;

    m_deleted_at_isValid = ::OpenAPI::fromJsonValue(m_deleted_at, json[QString("deleted_at")]);
    m_deleted_at_isSet = !json[QString("deleted_at")].isNull() && m_deleted_at_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_frozen_isValid = ::OpenAPI::fromJsonValue(m_frozen, json[QString("frozen")]);
    m_frozen_isSet = !json[QString("frozen")].isNull() && m_frozen_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_invites_isValid = ::OpenAPI::fromJsonValue(m_invites, json[QString("invites")]);
    m_invites_isSet = !json[QString("invites")].isNull() && m_invites_isValid;

    m_last_message_at_isValid = ::OpenAPI::fromJsonValue(m_last_message_at, json[QString("last_message_at")]);
    m_last_message_at_isSet = !json[QString("last_message_at")].isNull() && m_last_message_at_isValid;

    m_member_count_isValid = ::OpenAPI::fromJsonValue(m_member_count, json[QString("member_count")]);
    m_member_count_isSet = !json[QString("member_count")].isNull() && m_member_count_isValid;

    m_members_isValid = ::OpenAPI::fromJsonValue(m_members, json[QString("members")]);
    m_members_isSet = !json[QString("members")].isNull() && m_members_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("team")]);
    m_team_isSet = !json[QString("team")].isNull() && m_team_isValid;

    m_truncated_by_isValid = ::OpenAPI::fromJsonValue(m_truncated_by, json[QString("truncated_by")]);
    m_truncated_by_isSet = !json[QString("truncated_by")].isNull() && m_truncated_by_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIChannel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChannel::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_translation_enabled_isSet) {
        obj.insert(QString("auto_translation_enabled"), ::OpenAPI::toJsonValue(m_auto_translation_enabled));
    }
    if (m_auto_translation_language_isSet) {
        obj.insert(QString("auto_translation_language"), ::OpenAPI::toJsonValue(m_auto_translation_language));
    }
    if (m_cid_isSet) {
        obj.insert(QString("cid"), ::OpenAPI::toJsonValue(m_cid));
    }
    if (m_config.isSet()) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_config_overrides.isSet()) {
        obj.insert(QString("config_overrides"), ::OpenAPI::toJsonValue(m_config_overrides));
    }
    if (m_cooldown_isSet) {
        obj.insert(QString("cooldown"), ::OpenAPI::toJsonValue(m_cooldown));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by.isSet()) {
        obj.insert(QString("created_by"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_deleted_at_isSet) {
        obj.insert(QString("deleted_at"), ::OpenAPI::toJsonValue(m_deleted_at));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_frozen_isSet) {
        obj.insert(QString("frozen"), ::OpenAPI::toJsonValue(m_frozen));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_invites.size() > 0) {
        obj.insert(QString("invites"), ::OpenAPI::toJsonValue(m_invites));
    }
    if (m_last_message_at_isSet) {
        obj.insert(QString("last_message_at"), ::OpenAPI::toJsonValue(m_last_message_at));
    }
    if (m_member_count_isSet) {
        obj.insert(QString("member_count"), ::OpenAPI::toJsonValue(m_member_count));
    }
    if (m_members.size() > 0) {
        obj.insert(QString("members"), ::OpenAPI::toJsonValue(m_members));
    }
    if (m_team_isSet) {
        obj.insert(QString("team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_truncated_by.isSet()) {
        obj.insert(QString("truncated_by"), ::OpenAPI::toJsonValue(m_truncated_by));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

bool OAIChannel::isAutoTranslationEnabled() const {
    return m_auto_translation_enabled;
}
void OAIChannel::setAutoTranslationEnabled(const bool &auto_translation_enabled) {
    m_auto_translation_enabled = auto_translation_enabled;
    m_auto_translation_enabled_isSet = true;
}

bool OAIChannel::is_auto_translation_enabled_Set() const{
    return m_auto_translation_enabled_isSet;
}

bool OAIChannel::is_auto_translation_enabled_Valid() const{
    return m_auto_translation_enabled_isValid;
}

QString OAIChannel::getAutoTranslationLanguage() const {
    return m_auto_translation_language;
}
void OAIChannel::setAutoTranslationLanguage(const QString &auto_translation_language) {
    m_auto_translation_language = auto_translation_language;
    m_auto_translation_language_isSet = true;
}

bool OAIChannel::is_auto_translation_language_Set() const{
    return m_auto_translation_language_isSet;
}

bool OAIChannel::is_auto_translation_language_Valid() const{
    return m_auto_translation_language_isValid;
}

QString OAIChannel::getCid() const {
    return m_cid;
}
void OAIChannel::setCid(const QString &cid) {
    m_cid = cid;
    m_cid_isSet = true;
}

bool OAIChannel::is_cid_Set() const{
    return m_cid_isSet;
}

bool OAIChannel::is_cid_Valid() const{
    return m_cid_isValid;
}

OAIChannelConfig OAIChannel::getConfig() const {
    return m_config;
}
void OAIChannel::setConfig(const OAIChannelConfig &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIChannel::is_config_Set() const{
    return m_config_isSet;
}

bool OAIChannel::is_config_Valid() const{
    return m_config_isValid;
}

OAIChannelConfig OAIChannel::getConfigOverrides() const {
    return m_config_overrides;
}
void OAIChannel::setConfigOverrides(const OAIChannelConfig &config_overrides) {
    m_config_overrides = config_overrides;
    m_config_overrides_isSet = true;
}

bool OAIChannel::is_config_overrides_Set() const{
    return m_config_overrides_isSet;
}

bool OAIChannel::is_config_overrides_Valid() const{
    return m_config_overrides_isValid;
}

qint32 OAIChannel::getCooldown() const {
    return m_cooldown;
}
void OAIChannel::setCooldown(const qint32 &cooldown) {
    m_cooldown = cooldown;
    m_cooldown_isSet = true;
}

bool OAIChannel::is_cooldown_Set() const{
    return m_cooldown_isSet;
}

bool OAIChannel::is_cooldown_Valid() const{
    return m_cooldown_isValid;
}

QDateTime OAIChannel::getCreatedAt() const {
    return m_created_at;
}
void OAIChannel::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIChannel::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIChannel::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIUserObject OAIChannel::getCreatedBy() const {
    return m_created_by;
}
void OAIChannel::setCreatedBy(const OAIUserObject &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIChannel::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIChannel::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIChannel::getDeletedAt() const {
    return m_deleted_at;
}
void OAIChannel::setDeletedAt(const QDateTime &deleted_at) {
    m_deleted_at = deleted_at;
    m_deleted_at_isSet = true;
}

bool OAIChannel::is_deleted_at_Set() const{
    return m_deleted_at_isSet;
}

bool OAIChannel::is_deleted_at_Valid() const{
    return m_deleted_at_isValid;
}

bool OAIChannel::isDisabled() const {
    return m_disabled;
}
void OAIChannel::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIChannel::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIChannel::is_disabled_Valid() const{
    return m_disabled_isValid;
}

bool OAIChannel::isFrozen() const {
    return m_frozen;
}
void OAIChannel::setFrozen(const bool &frozen) {
    m_frozen = frozen;
    m_frozen_isSet = true;
}

bool OAIChannel::is_frozen_Set() const{
    return m_frozen_isSet;
}

bool OAIChannel::is_frozen_Valid() const{
    return m_frozen_isValid;
}

QString OAIChannel::getId() const {
    return m_id;
}
void OAIChannel::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIChannel::is_id_Set() const{
    return m_id_isSet;
}

bool OAIChannel::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIChannelMember> OAIChannel::getInvites() const {
    return m_invites;
}
void OAIChannel::setInvites(const QList<OAIChannelMember> &invites) {
    m_invites = invites;
    m_invites_isSet = true;
}

bool OAIChannel::is_invites_Set() const{
    return m_invites_isSet;
}

bool OAIChannel::is_invites_Valid() const{
    return m_invites_isValid;
}

QDateTime OAIChannel::getLastMessageAt() const {
    return m_last_message_at;
}
void OAIChannel::setLastMessageAt(const QDateTime &last_message_at) {
    m_last_message_at = last_message_at;
    m_last_message_at_isSet = true;
}

bool OAIChannel::is_last_message_at_Set() const{
    return m_last_message_at_isSet;
}

bool OAIChannel::is_last_message_at_Valid() const{
    return m_last_message_at_isValid;
}

qint32 OAIChannel::getMemberCount() const {
    return m_member_count;
}
void OAIChannel::setMemberCount(const qint32 &member_count) {
    m_member_count = member_count;
    m_member_count_isSet = true;
}

bool OAIChannel::is_member_count_Set() const{
    return m_member_count_isSet;
}

bool OAIChannel::is_member_count_Valid() const{
    return m_member_count_isValid;
}

QList<OAIChannelMember> OAIChannel::getMembers() const {
    return m_members;
}
void OAIChannel::setMembers(const QList<OAIChannelMember> &members) {
    m_members = members;
    m_members_isSet = true;
}

bool OAIChannel::is_members_Set() const{
    return m_members_isSet;
}

bool OAIChannel::is_members_Valid() const{
    return m_members_isValid;
}

QString OAIChannel::getTeam() const {
    return m_team;
}
void OAIChannel::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIChannel::is_team_Set() const{
    return m_team_isSet;
}

bool OAIChannel::is_team_Valid() const{
    return m_team_isValid;
}

OAIUserObject OAIChannel::getTruncatedBy() const {
    return m_truncated_by;
}
void OAIChannel::setTruncatedBy(const OAIUserObject &truncated_by) {
    m_truncated_by = truncated_by;
    m_truncated_by_isSet = true;
}

bool OAIChannel::is_truncated_by_Set() const{
    return m_truncated_by_isSet;
}

bool OAIChannel::is_truncated_by_Valid() const{
    return m_truncated_by_isValid;
}

QString OAIChannel::getType() const {
    return m_type;
}
void OAIChannel::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIChannel::is_type_Set() const{
    return m_type_isSet;
}

bool OAIChannel::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIChannel::getUpdatedAt() const {
    return m_updated_at;
}
void OAIChannel::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIChannel::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIChannel::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIChannel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_translation_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_translation_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_overrides.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cooldown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frozen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invites.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_message_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_truncated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChannel::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_translation_language_isValid && m_cid_isValid && m_created_at_isValid && m_disabled_isValid && m_frozen_isValid && m_id_isValid && m_type_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
