/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFirebaseConfigRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFirebaseConfigRequest::OAIFirebaseConfigRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFirebaseConfigRequest::OAIFirebaseConfigRequest() {
    this->initializeModel();
}

OAIFirebaseConfigRequest::~OAIFirebaseConfigRequest() {}

void OAIFirebaseConfigRequest::initializeModel() {

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_apn_template_isSet = false;
    m_apn_template_isValid = false;

    m_credentials_json_isSet = false;
    m_credentials_json_isValid = false;

    m_data_template_isSet = false;
    m_data_template_isValid = false;

    m_notification_template_isSet = false;
    m_notification_template_isValid = false;

    m_server_key_isSet = false;
    m_server_key_isValid = false;
}

void OAIFirebaseConfigRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFirebaseConfigRequest::fromJsonObject(QJsonObject json) {

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("Disabled")]);
    m_disabled_isSet = !json[QString("Disabled")].isNull() && m_disabled_isValid;

    m_apn_template_isValid = ::OpenAPI::fromJsonValue(m_apn_template, json[QString("apn_template")]);
    m_apn_template_isSet = !json[QString("apn_template")].isNull() && m_apn_template_isValid;

    m_credentials_json_isValid = ::OpenAPI::fromJsonValue(m_credentials_json, json[QString("credentials_json")]);
    m_credentials_json_isSet = !json[QString("credentials_json")].isNull() && m_credentials_json_isValid;

    m_data_template_isValid = ::OpenAPI::fromJsonValue(m_data_template, json[QString("data_template")]);
    m_data_template_isSet = !json[QString("data_template")].isNull() && m_data_template_isValid;

    m_notification_template_isValid = ::OpenAPI::fromJsonValue(m_notification_template, json[QString("notification_template")]);
    m_notification_template_isSet = !json[QString("notification_template")].isNull() && m_notification_template_isValid;

    m_server_key_isValid = ::OpenAPI::fromJsonValue(m_server_key, json[QString("server_key")]);
    m_server_key_isSet = !json[QString("server_key")].isNull() && m_server_key_isValid;
}

QString OAIFirebaseConfigRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFirebaseConfigRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_disabled_isSet) {
        obj.insert(QString("Disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_apn_template_isSet) {
        obj.insert(QString("apn_template"), ::OpenAPI::toJsonValue(m_apn_template));
    }
    if (m_credentials_json_isSet) {
        obj.insert(QString("credentials_json"), ::OpenAPI::toJsonValue(m_credentials_json));
    }
    if (m_data_template_isSet) {
        obj.insert(QString("data_template"), ::OpenAPI::toJsonValue(m_data_template));
    }
    if (m_notification_template_isSet) {
        obj.insert(QString("notification_template"), ::OpenAPI::toJsonValue(m_notification_template));
    }
    if (m_server_key_isSet) {
        obj.insert(QString("server_key"), ::OpenAPI::toJsonValue(m_server_key));
    }
    return obj;
}

bool OAIFirebaseConfigRequest::isDisabled() const {
    return m_disabled;
}
void OAIFirebaseConfigRequest::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIFirebaseConfigRequest::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIFirebaseConfigRequest::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAIFirebaseConfigRequest::getApnTemplate() const {
    return m_apn_template;
}
void OAIFirebaseConfigRequest::setApnTemplate(const QString &apn_template) {
    m_apn_template = apn_template;
    m_apn_template_isSet = true;
}

bool OAIFirebaseConfigRequest::is_apn_template_Set() const{
    return m_apn_template_isSet;
}

bool OAIFirebaseConfigRequest::is_apn_template_Valid() const{
    return m_apn_template_isValid;
}

QString OAIFirebaseConfigRequest::getCredentialsJson() const {
    return m_credentials_json;
}
void OAIFirebaseConfigRequest::setCredentialsJson(const QString &credentials_json) {
    m_credentials_json = credentials_json;
    m_credentials_json_isSet = true;
}

bool OAIFirebaseConfigRequest::is_credentials_json_Set() const{
    return m_credentials_json_isSet;
}

bool OAIFirebaseConfigRequest::is_credentials_json_Valid() const{
    return m_credentials_json_isValid;
}

QString OAIFirebaseConfigRequest::getDataTemplate() const {
    return m_data_template;
}
void OAIFirebaseConfigRequest::setDataTemplate(const QString &data_template) {
    m_data_template = data_template;
    m_data_template_isSet = true;
}

bool OAIFirebaseConfigRequest::is_data_template_Set() const{
    return m_data_template_isSet;
}

bool OAIFirebaseConfigRequest::is_data_template_Valid() const{
    return m_data_template_isValid;
}

QString OAIFirebaseConfigRequest::getNotificationTemplate() const {
    return m_notification_template;
}
void OAIFirebaseConfigRequest::setNotificationTemplate(const QString &notification_template) {
    m_notification_template = notification_template;
    m_notification_template_isSet = true;
}

bool OAIFirebaseConfigRequest::is_notification_template_Set() const{
    return m_notification_template_isSet;
}

bool OAIFirebaseConfigRequest::is_notification_template_Valid() const{
    return m_notification_template_isValid;
}

QString OAIFirebaseConfigRequest::getServerKey() const {
    return m_server_key;
}
void OAIFirebaseConfigRequest::setServerKey(const QString &server_key) {
    m_server_key = server_key;
    m_server_key_isSet = true;
}

bool OAIFirebaseConfigRequest::is_server_key_Set() const{
    return m_server_key_isSet;
}

bool OAIFirebaseConfigRequest::is_server_key_Valid() const{
    return m_server_key_isValid;
}

bool OAIFirebaseConfigRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apn_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials_json_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFirebaseConfigRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
