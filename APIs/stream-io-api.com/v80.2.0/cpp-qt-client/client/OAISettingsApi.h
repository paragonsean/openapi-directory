/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISettingsApi_H
#define OAI_OAISettingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAICheckPushRequest.h"
#include "OAICheckPushResponse.h"
#include "OAICheckSQSRequest.h"
#include "OAICheckSQSResponse.h"
#include "OAICreateBlockListRequest.h"
#include "OAICreateChannelTypeRequest.h"
#include "OAICreateChannelTypeResponse.h"
#include "OAIGetApplicationResponse.h"
#include "OAIGetBlockListResponse.h"
#include "OAIGetRateLimitsResponse.h"
#include "OAIListBlockListResponse.h"
#include "OAIListChannelTypesResponse.h"
#include "OAIListPushProvidersResponse.h"
#include "OAIResponse.h"
#include "OAIUpdateAppRequest.h"
#include "OAIUpdateBlockListRequest.h"
#include "OAIUpdateChannelTypeRequest.h"
#include "OAIUpdateChannelTypeResponse.h"
#include "OAIUpsertPushProviderRequest.h"
#include "OAIUpsertPushProviderResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISettingsApi : public QObject {
    Q_OBJECT

public:
    OAISettingsApi(const int timeOut = 0);
    ~OAISettingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_check_push_request OAICheckPushRequest [required]
    */
    virtual void checkPush(const OAICheckPushRequest &oai_check_push_request);

    /**
    * @param[in]  oai_check_sqs_request OAICheckSQSRequest [required]
    */
    virtual void checkSQS(const OAICheckSQSRequest &oai_check_sqs_request);

    /**
    * @param[in]  oai_create_block_list_request OAICreateBlockListRequest [required]
    */
    virtual void createBlockList(const OAICreateBlockListRequest &oai_create_block_list_request);

    /**
    * @param[in]  oai_create_channel_type_request OAICreateChannelTypeRequest [required]
    */
    virtual void createChannelType(const OAICreateChannelTypeRequest &oai_create_channel_type_request);

    /**
    * @param[in]  name QString [required]
    */
    virtual void deleteBlockList(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void deleteChannelType(const QString &name);

    /**
    * @param[in]  type QString [required]
    * @param[in]  name QString [required]
    */
    virtual void deletePushProvider(const QString &type, const QString &name);


    virtual void getApp();

    /**
    * @param[in]  name QString [required]
    */
    virtual void getBlockList(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void getChannelType(const QString &name);

    /**
    * @param[in]  server_side bool [optional]
    * @param[in]  android bool [optional]
    * @param[in]  ios bool [optional]
    * @param[in]  web bool [optional]
    * @param[in]  endpoints QString [optional]
    */
    virtual void getRateLimits(const ::OpenAPI::OptionalParam<bool> &server_side = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &android = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &ios = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &web = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &endpoints = ::OpenAPI::OptionalParam<QString>());


    virtual void listBlockLists();


    virtual void listChannelTypes();


    virtual void listPushProviders();

    /**
    * @param[in]  oai_update_app_request OAIUpdateAppRequest [required]
    */
    virtual void updateApp(const OAIUpdateAppRequest &oai_update_app_request);

    /**
    * @param[in]  name QString [required]
    * @param[in]  oai_update_block_list_request OAIUpdateBlockListRequest [required]
    */
    virtual void updateBlockList(const QString &name, const OAIUpdateBlockListRequest &oai_update_block_list_request);

    /**
    * @param[in]  name QString [required]
    * @param[in]  oai_update_channel_type_request OAIUpdateChannelTypeRequest [required]
    */
    virtual void updateChannelType(const QString &name, const OAIUpdateChannelTypeRequest &oai_update_channel_type_request);

    /**
    * @param[in]  oai_upsert_push_provider_request OAIUpsertPushProviderRequest [required]
    */
    virtual void upsertPushProvider(const OAIUpsertPushProviderRequest &oai_upsert_push_provider_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void checkPushCallback(OAIHttpRequestWorker *worker);
    void checkSQSCallback(OAIHttpRequestWorker *worker);
    void createBlockListCallback(OAIHttpRequestWorker *worker);
    void createChannelTypeCallback(OAIHttpRequestWorker *worker);
    void deleteBlockListCallback(OAIHttpRequestWorker *worker);
    void deleteChannelTypeCallback(OAIHttpRequestWorker *worker);
    void deletePushProviderCallback(OAIHttpRequestWorker *worker);
    void getAppCallback(OAIHttpRequestWorker *worker);
    void getBlockListCallback(OAIHttpRequestWorker *worker);
    void getChannelTypeCallback(OAIHttpRequestWorker *worker);
    void getRateLimitsCallback(OAIHttpRequestWorker *worker);
    void listBlockListsCallback(OAIHttpRequestWorker *worker);
    void listChannelTypesCallback(OAIHttpRequestWorker *worker);
    void listPushProvidersCallback(OAIHttpRequestWorker *worker);
    void updateAppCallback(OAIHttpRequestWorker *worker);
    void updateBlockListCallback(OAIHttpRequestWorker *worker);
    void updateChannelTypeCallback(OAIHttpRequestWorker *worker);
    void upsertPushProviderCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void checkPushSignal(OAICheckPushResponse summary);
    void checkSQSSignal(OAICheckSQSResponse summary);
    void createBlockListSignal(OAIResponse summary);
    void createChannelTypeSignal(OAICreateChannelTypeResponse summary);
    void deleteBlockListSignal(OAIResponse summary);
    void deleteChannelTypeSignal(OAIResponse summary);
    void deletePushProviderSignal(OAIResponse summary);
    void getAppSignal(OAIGetApplicationResponse summary);
    void getBlockListSignal(OAIGetBlockListResponse summary);
    void getChannelTypeSignal(OAIResponse summary);
    void getRateLimitsSignal(OAIGetRateLimitsResponse summary);
    void listBlockListsSignal(OAIListBlockListResponse summary);
    void listChannelTypesSignal(OAIListChannelTypesResponse summary);
    void listPushProvidersSignal(OAIListPushProvidersResponse summary);
    void updateAppSignal(OAIResponse summary);
    void updateBlockListSignal(OAIResponse summary);
    void updateChannelTypeSignal(OAIUpdateChannelTypeResponse summary);
    void upsertPushProviderSignal(OAIUpsertPushProviderResponse summary);


    void checkPushSignalFull(OAIHttpRequestWorker *worker, OAICheckPushResponse summary);
    void checkSQSSignalFull(OAIHttpRequestWorker *worker, OAICheckSQSResponse summary);
    void createBlockListSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void createChannelTypeSignalFull(OAIHttpRequestWorker *worker, OAICreateChannelTypeResponse summary);
    void deleteBlockListSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void deleteChannelTypeSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void deletePushProviderSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void getAppSignalFull(OAIHttpRequestWorker *worker, OAIGetApplicationResponse summary);
    void getBlockListSignalFull(OAIHttpRequestWorker *worker, OAIGetBlockListResponse summary);
    void getChannelTypeSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void getRateLimitsSignalFull(OAIHttpRequestWorker *worker, OAIGetRateLimitsResponse summary);
    void listBlockListsSignalFull(OAIHttpRequestWorker *worker, OAIListBlockListResponse summary);
    void listChannelTypesSignalFull(OAIHttpRequestWorker *worker, OAIListChannelTypesResponse summary);
    void listPushProvidersSignalFull(OAIHttpRequestWorker *worker, OAIListPushProvidersResponse summary);
    void updateAppSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void updateBlockListSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void updateChannelTypeSignalFull(OAIHttpRequestWorker *worker, OAIUpdateChannelTypeResponse summary);
    void upsertPushProviderSignalFull(OAIHttpRequestWorker *worker, OAIUpsertPushProviderResponse summary);

    Q_DECL_DEPRECATED_X("Use checkPushSignalError() instead")
    void checkPushSignalE(OAICheckPushResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkPushSignalError(OAICheckPushResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkSQSSignalError() instead")
    void checkSQSSignalE(OAICheckSQSResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void checkSQSSignalError(OAICheckSQSResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBlockListSignalError() instead")
    void createBlockListSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBlockListSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createChannelTypeSignalError() instead")
    void createChannelTypeSignalE(OAICreateChannelTypeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createChannelTypeSignalError(OAICreateChannelTypeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBlockListSignalError() instead")
    void deleteBlockListSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBlockListSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelTypeSignalError() instead")
    void deleteChannelTypeSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelTypeSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePushProviderSignalError() instead")
    void deletePushProviderSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePushProviderSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppSignalError() instead")
    void getAppSignalE(OAIGetApplicationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppSignalError(OAIGetApplicationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBlockListSignalError() instead")
    void getBlockListSignalE(OAIGetBlockListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBlockListSignalError(OAIGetBlockListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelTypeSignalError() instead")
    void getChannelTypeSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelTypeSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRateLimitsSignalError() instead")
    void getRateLimitsSignalE(OAIGetRateLimitsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRateLimitsSignalError(OAIGetRateLimitsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBlockListsSignalError() instead")
    void listBlockListsSignalE(OAIListBlockListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listBlockListsSignalError(OAIListBlockListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelTypesSignalError() instead")
    void listChannelTypesSignalE(OAIListChannelTypesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelTypesSignalError(OAIListChannelTypesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPushProvidersSignalError() instead")
    void listPushProvidersSignalE(OAIListPushProvidersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPushProvidersSignalError(OAIListPushProvidersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAppSignalError() instead")
    void updateAppSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAppSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBlockListSignalError() instead")
    void updateBlockListSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBlockListSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChannelTypeSignalError() instead")
    void updateChannelTypeSignalE(OAIUpdateChannelTypeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChannelTypeSignalError(OAIUpdateChannelTypeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upsertPushProviderSignalError() instead")
    void upsertPushProviderSignalE(OAIUpsertPushProviderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void upsertPushProviderSignalError(OAIUpsertPushProviderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use checkPushSignalErrorFull() instead")
    void checkPushSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkPushSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use checkSQSSignalErrorFull() instead")
    void checkSQSSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void checkSQSSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBlockListSignalErrorFull() instead")
    void createBlockListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBlockListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createChannelTypeSignalErrorFull() instead")
    void createChannelTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createChannelTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBlockListSignalErrorFull() instead")
    void deleteBlockListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBlockListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelTypeSignalErrorFull() instead")
    void deleteChannelTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePushProviderSignalErrorFull() instead")
    void deletePushProviderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePushProviderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppSignalErrorFull() instead")
    void getAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBlockListSignalErrorFull() instead")
    void getBlockListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBlockListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelTypeSignalErrorFull() instead")
    void getChannelTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRateLimitsSignalErrorFull() instead")
    void getRateLimitsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRateLimitsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBlockListsSignalErrorFull() instead")
    void listBlockListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listBlockListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelTypesSignalErrorFull() instead")
    void listChannelTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPushProvidersSignalErrorFull() instead")
    void listPushProvidersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPushProvidersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAppSignalErrorFull() instead")
    void updateAppSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAppSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBlockListSignalErrorFull() instead")
    void updateBlockListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBlockListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChannelTypeSignalErrorFull() instead")
    void updateChannelTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChannelTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use upsertPushProviderSignalErrorFull() instead")
    void upsertPushProviderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void upsertPushProviderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
