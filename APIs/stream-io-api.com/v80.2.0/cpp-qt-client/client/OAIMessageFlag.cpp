/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageFlag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageFlag::OAIMessageFlag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageFlag::OAIMessageFlag() {
    this->initializeModel();
}

OAIMessageFlag::~OAIMessageFlag() {}

void OAIMessageFlag::initializeModel() {

    m_approved_at_isSet = false;
    m_approved_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_created_by_automod_isSet = false;
    m_created_by_automod_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_moderation_result_isSet = false;
    m_moderation_result_isValid = false;

    m_rejected_at_isSet = false;
    m_rejected_at_isValid = false;

    m_reviewed_at_isSet = false;
    m_reviewed_at_isValid = false;

    m_reviewed_by_isSet = false;
    m_reviewed_by_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIMessageFlag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageFlag::fromJsonObject(QJsonObject json) {

    m_approved_at_isValid = ::OpenAPI::fromJsonValue(m_approved_at, json[QString("approved_at")]);
    m_approved_at_isSet = !json[QString("approved_at")].isNull() && m_approved_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_created_by_automod_isValid = ::OpenAPI::fromJsonValue(m_created_by_automod, json[QString("created_by_automod")]);
    m_created_by_automod_isSet = !json[QString("created_by_automod")].isNull() && m_created_by_automod_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_moderation_result_isValid = ::OpenAPI::fromJsonValue(m_moderation_result, json[QString("moderation_result")]);
    m_moderation_result_isSet = !json[QString("moderation_result")].isNull() && m_moderation_result_isValid;

    m_rejected_at_isValid = ::OpenAPI::fromJsonValue(m_rejected_at, json[QString("rejected_at")]);
    m_rejected_at_isSet = !json[QString("rejected_at")].isNull() && m_rejected_at_isValid;

    m_reviewed_at_isValid = ::OpenAPI::fromJsonValue(m_reviewed_at, json[QString("reviewed_at")]);
    m_reviewed_at_isSet = !json[QString("reviewed_at")].isNull() && m_reviewed_at_isValid;

    m_reviewed_by_isValid = ::OpenAPI::fromJsonValue(m_reviewed_by, json[QString("reviewed_by")]);
    m_reviewed_by_isSet = !json[QString("reviewed_by")].isNull() && m_reviewed_by_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIMessageFlag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageFlag::asJsonObject() const {
    QJsonObject obj;
    if (m_approved_at_isSet) {
        obj.insert(QString("approved_at"), ::OpenAPI::toJsonValue(m_approved_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_created_by_automod_isSet) {
        obj.insert(QString("created_by_automod"), ::OpenAPI::toJsonValue(m_created_by_automod));
    }
    if (m_message.isSet()) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_moderation_result.isSet()) {
        obj.insert(QString("moderation_result"), ::OpenAPI::toJsonValue(m_moderation_result));
    }
    if (m_rejected_at_isSet) {
        obj.insert(QString("rejected_at"), ::OpenAPI::toJsonValue(m_rejected_at));
    }
    if (m_reviewed_at_isSet) {
        obj.insert(QString("reviewed_at"), ::OpenAPI::toJsonValue(m_reviewed_at));
    }
    if (m_reviewed_by.isSet()) {
        obj.insert(QString("reviewed_by"), ::OpenAPI::toJsonValue(m_reviewed_by));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QDateTime OAIMessageFlag::getApprovedAt() const {
    return m_approved_at;
}
void OAIMessageFlag::setApprovedAt(const QDateTime &approved_at) {
    m_approved_at = approved_at;
    m_approved_at_isSet = true;
}

bool OAIMessageFlag::is_approved_at_Set() const{
    return m_approved_at_isSet;
}

bool OAIMessageFlag::is_approved_at_Valid() const{
    return m_approved_at_isValid;
}

QDateTime OAIMessageFlag::getCreatedAt() const {
    return m_created_at;
}
void OAIMessageFlag::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIMessageFlag::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIMessageFlag::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIMessageFlag::isCreatedByAutomod() const {
    return m_created_by_automod;
}
void OAIMessageFlag::setCreatedByAutomod(const bool &created_by_automod) {
    m_created_by_automod = created_by_automod;
    m_created_by_automod_isSet = true;
}

bool OAIMessageFlag::is_created_by_automod_Set() const{
    return m_created_by_automod_isSet;
}

bool OAIMessageFlag::is_created_by_automod_Valid() const{
    return m_created_by_automod_isValid;
}

OAIMessage OAIMessageFlag::getMessage() const {
    return m_message;
}
void OAIMessageFlag::setMessage(const OAIMessage &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIMessageFlag::is_message_Set() const{
    return m_message_isSet;
}

bool OAIMessageFlag::is_message_Valid() const{
    return m_message_isValid;
}

OAIMessageModerationResult OAIMessageFlag::getModerationResult() const {
    return m_moderation_result;
}
void OAIMessageFlag::setModerationResult(const OAIMessageModerationResult &moderation_result) {
    m_moderation_result = moderation_result;
    m_moderation_result_isSet = true;
}

bool OAIMessageFlag::is_moderation_result_Set() const{
    return m_moderation_result_isSet;
}

bool OAIMessageFlag::is_moderation_result_Valid() const{
    return m_moderation_result_isValid;
}

QDateTime OAIMessageFlag::getRejectedAt() const {
    return m_rejected_at;
}
void OAIMessageFlag::setRejectedAt(const QDateTime &rejected_at) {
    m_rejected_at = rejected_at;
    m_rejected_at_isSet = true;
}

bool OAIMessageFlag::is_rejected_at_Set() const{
    return m_rejected_at_isSet;
}

bool OAIMessageFlag::is_rejected_at_Valid() const{
    return m_rejected_at_isValid;
}

QDateTime OAIMessageFlag::getReviewedAt() const {
    return m_reviewed_at;
}
void OAIMessageFlag::setReviewedAt(const QDateTime &reviewed_at) {
    m_reviewed_at = reviewed_at;
    m_reviewed_at_isSet = true;
}

bool OAIMessageFlag::is_reviewed_at_Set() const{
    return m_reviewed_at_isSet;
}

bool OAIMessageFlag::is_reviewed_at_Valid() const{
    return m_reviewed_at_isValid;
}

OAIUserObject OAIMessageFlag::getReviewedBy() const {
    return m_reviewed_by;
}
void OAIMessageFlag::setReviewedBy(const OAIUserObject &reviewed_by) {
    m_reviewed_by = reviewed_by;
    m_reviewed_by_isSet = true;
}

bool OAIMessageFlag::is_reviewed_by_Set() const{
    return m_reviewed_by_isSet;
}

bool OAIMessageFlag::is_reviewed_by_Valid() const{
    return m_reviewed_by_isValid;
}

QDateTime OAIMessageFlag::getUpdatedAt() const {
    return m_updated_at;
}
void OAIMessageFlag::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIMessageFlag::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIMessageFlag::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

OAIUserObject OAIMessageFlag::getUser() const {
    return m_user;
}
void OAIMessageFlag::setUser(const OAIUserObject &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIMessageFlag::is_user_Set() const{
    return m_user_isSet;
}

bool OAIMessageFlag::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIMessageFlag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approved_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_automod_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_moderation_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rejected_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reviewed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reviewed_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageFlag::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_created_by_automod_isValid && m_updated_at_isValid && true;
}

} // namespace OpenAPI
