/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIChatEvent.h
 *
 * The discriminator object for all websocket events, you should use this to map event payloads to their own type
 */

#ifndef OAIChatEvent_H
#define OAIChatEvent_H

#include <QJsonObject>

#include "OAIAnyEvent.h"
#include "OAIChannelCreatedEvent.h"
#include "OAIChannelDeletedEvent.h"
#include "OAIChannelFrozenEvent.h"
#include "OAIChannelHiddenEvent.h"
#include "OAIChannelKickedEvent.h"
#include "OAIChannelMember.h"
#include "OAIChannelMessages.h"
#include "OAIChannelMutedEvent.h"
#include "OAIChannelResponse.h"
#include "OAIChannelTruncatedEvent.h"
#include "OAIChannelUnFrozenEvent.h"
#include "OAIChannelUnmutedEvent.h"
#include "OAIChannelUpdatedEvent.h"
#include "OAIChannelVisibleEvent.h"
#include "OAIFlag.h"
#include "OAIHealthCheckEvent.h"
#include "OAIMemberAddedEvent.h"
#include "OAIMemberRemovedEvent.h"
#include "OAIMemberUpdatedEvent.h"
#include "OAIMessage.h"
#include "OAIMessageDeletedEvent.h"
#include "OAIMessageFlaggedEvent.h"
#include "OAIMessageNewEvent.h"
#include "OAIMessageReadEvent.h"
#include "OAIMessageUnblockedEvent.h"
#include "OAIMessageUpdatedEvent.h"
#include "OAINotificationAddedToChannelEvent.h"
#include "OAINotificationChannelDeletedEvent.h"
#include "OAINotificationChannelMutesUpdatedEvent.h"
#include "OAINotificationChannelTruncatedEvent.h"
#include "OAINotificationInviteAcceptedEvent.h"
#include "OAINotificationInviteRejectedEvent.h"
#include "OAINotificationInvitedEvent.h"
#include "OAINotificationMarkReadEvent.h"
#include "OAINotificationMarkUnreadEvent.h"
#include "OAINotificationMutesUpdatedEvent.h"
#include "OAINotificationNewMessageEvent.h"
#include "OAINotificationRemovedFromChannelEvent.h"
#include "OAIOwnUser.h"
#include "OAIReaction.h"
#include "OAIReactionDeletedEvent.h"
#include "OAIReactionNewEvent.h"
#include "OAIReactionUpdatedEvent.h"
#include "OAITypingStartEvent.h"
#include "OAITypingStopEvent.h"
#include "OAIUserBannedEvent.h"
#include "OAIUserDeactivatedEvent.h"
#include "OAIUserDeletedEvent.h"
#include "OAIUserFlaggedEvent.h"
#include "OAIUserMutedEvent.h"
#include "OAIUserObject.h"
#include "OAIUserPresenceChangedEvent.h"
#include "OAIUserReactivatedEvent.h"
#include "OAIUserUnbannedEvent.h"
#include "OAIUserUnmutedEvent.h"
#include "OAIUserUnreadReminderEvent.h"
#include "OAIUserUpdatedEvent.h"
#include "OAIUserWatchingStartEvent.h"
#include "OAIUserWatchingStopEvent.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIChannelMember;
class OAIFlag;
class OAIChannelMessages;

class OAIChatEvent : public OAIObject {
public:
    OAIChatEvent();
    OAIChatEvent(QString json);
    ~OAIChatEvent() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    OAIChannelResponse getChannel() const;
    void setChannel(const OAIChannelResponse &channel);
    bool is_channel_Set() const;
    bool is_channel_Valid() const;

    QString getChannelId() const;
    void setChannelId(const QString &channel_id);
    bool is_channel_id_Set() const;
    bool is_channel_id_Valid() const;

    QString getChannelType() const;
    void setChannelType(const QString &channel_type);
    bool is_channel_type_Set() const;
    bool is_channel_type_Valid() const;

    QString getCid() const;
    void setCid(const QString &cid);
    bool is_cid_Set() const;
    bool is_cid_Valid() const;

    QString getTeam() const;
    void setTeam(const QString &team);
    bool is_team_Set() const;
    bool is_team_Valid() const;

    bool isClearHistory() const;
    void setClearHistory(const bool &clear_history);
    bool is_clear_history_Set() const;
    bool is_clear_history_Valid() const;

    OAIUserObject getUser() const;
    void setUser(const OAIUserObject &user);
    bool is_user_Set() const;
    bool is_user_Valid() const;

    OAIMessage getMessage() const;
    void setMessage(const OAIMessage &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    OAIOwnUser getMe() const;
    void setMe(const OAIOwnUser &me);
    bool is_me_Set() const;
    bool is_me_Valid() const;

    OAIChannelMember getMember() const;
    void setMember(const OAIChannelMember &member);
    bool is_member_Set() const;
    bool is_member_Valid() const;

    bool isHardDelete() const;
    void setHardDelete(const bool &hard_delete);
    bool is_hard_delete_Set() const;
    bool is_hard_delete_Valid() const;

    QList<OAIUserObject> getThreadParticipants() const;
    void setThreadParticipants(const QList<OAIUserObject> &thread_participants);
    bool is_thread_participants_Set() const;
    bool is_thread_participants_Valid() const;

    OAIFlag getFlag() const;
    void setFlag(const OAIFlag &flag);
    bool is_flag_Set() const;
    bool is_flag_Valid() const;

    qint32 getWatcherCount() const;
    void setWatcherCount(const qint32 &watcher_count);
    bool is_watcher_count_Set() const;
    bool is_watcher_count_Valid() const;

    QString getLastReadMessageId() const;
    void setLastReadMessageId(const QString &last_read_message_id);
    bool is_last_read_message_id_Set() const;
    bool is_last_read_message_id_Valid() const;

    qint32 getTotalUnreadCount() const;
    void setTotalUnreadCount(const qint32 &total_unread_count);
    bool is_total_unread_count_Set() const;
    bool is_total_unread_count_Valid() const;

    qint32 getUnreadChannels() const;
    void setUnreadChannels(const qint32 &unread_channels);
    bool is_unread_channels_Set() const;
    bool is_unread_channels_Valid() const;

    qint32 getUnreadCount() const;
    void setUnreadCount(const qint32 &unread_count);
    bool is_unread_count_Set() const;
    bool is_unread_count_Valid() const;

    QString getFirstUnreadMessageId() const;
    void setFirstUnreadMessageId(const QString &first_unread_message_id);
    bool is_first_unread_message_id_Set() const;
    bool is_first_unread_message_id_Valid() const;

    QDateTime getLastReadAt() const;
    void setLastReadAt(const QDateTime &last_read_at);
    bool is_last_read_at_Set() const;
    bool is_last_read_at_Valid() const;

    qint32 getUnreadMessages() const;
    void setUnreadMessages(const qint32 &unread_messages);
    bool is_unread_messages_Set() const;
    bool is_unread_messages_Valid() const;

    OAIReaction getReaction() const;
    void setReaction(const OAIReaction &reaction);
    bool is_reaction_Set() const;
    bool is_reaction_Valid() const;

    QString getParentId() const;
    void setParentId(const QString &parent_id);
    bool is_parent_id_Set() const;
    bool is_parent_id_Valid() const;

    OAIUserObject getCreatedBy() const;
    void setCreatedBy(const OAIUserObject &created_by);
    bool is_created_by_Set() const;
    bool is_created_by_Valid() const;

    QDateTime getExpiration() const;
    void setExpiration(const QDateTime &expiration);
    bool is_expiration_Set() const;
    bool is_expiration_Valid() const;

    QString getReason() const;
    void setReason(const QString &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    bool isShadow() const;
    void setShadow(const bool &shadow);
    bool is_shadow_Set() const;
    bool is_shadow_Valid() const;

    bool isDeleteConversationChannels() const;
    void setDeleteConversationChannels(const bool &delete_conversation_channels);
    bool is_delete_conversation_channels_Set() const;
    bool is_delete_conversation_channels_Valid() const;

    bool isMarkMessagesDeleted() const;
    void setMarkMessagesDeleted(const bool &mark_messages_deleted);
    bool is_mark_messages_deleted_Set() const;
    bool is_mark_messages_deleted_Valid() const;

    QString getTargetUser() const;
    void setTargetUser(const QString &target_user);
    bool is_target_user_Set() const;
    bool is_target_user_Valid() const;

    QList<QString> getTargetUsers() const;
    void setTargetUsers(const QList<QString> &target_users);
    bool is_target_users_Set() const;
    bool is_target_users_Valid() const;

    QMap<QString, OAIChannelMessages> getChannels() const;
    void setChannels(const QMap<QString, OAIChannelMessages> &channels);
    bool is_channels_Set() const;
    bool is_channels_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    OAIChannelResponse m_channel;
    bool m_channel_isSet;
    bool m_channel_isValid;

    QString m_channel_id;
    bool m_channel_id_isSet;
    bool m_channel_id_isValid;

    QString m_channel_type;
    bool m_channel_type_isSet;
    bool m_channel_type_isValid;

    QString m_cid;
    bool m_cid_isSet;
    bool m_cid_isValid;

    QString m_team;
    bool m_team_isSet;
    bool m_team_isValid;

    bool m_clear_history;
    bool m_clear_history_isSet;
    bool m_clear_history_isValid;

    OAIUserObject m_user;
    bool m_user_isSet;
    bool m_user_isValid;

    OAIMessage m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    OAIOwnUser m_me;
    bool m_me_isSet;
    bool m_me_isValid;

    OAIChannelMember m_member;
    bool m_member_isSet;
    bool m_member_isValid;

    bool m_hard_delete;
    bool m_hard_delete_isSet;
    bool m_hard_delete_isValid;

    QList<OAIUserObject> m_thread_participants;
    bool m_thread_participants_isSet;
    bool m_thread_participants_isValid;

    OAIFlag m_flag;
    bool m_flag_isSet;
    bool m_flag_isValid;

    qint32 m_watcher_count;
    bool m_watcher_count_isSet;
    bool m_watcher_count_isValid;

    QString m_last_read_message_id;
    bool m_last_read_message_id_isSet;
    bool m_last_read_message_id_isValid;

    qint32 m_total_unread_count;
    bool m_total_unread_count_isSet;
    bool m_total_unread_count_isValid;

    qint32 m_unread_channels;
    bool m_unread_channels_isSet;
    bool m_unread_channels_isValid;

    qint32 m_unread_count;
    bool m_unread_count_isSet;
    bool m_unread_count_isValid;

    QString m_first_unread_message_id;
    bool m_first_unread_message_id_isSet;
    bool m_first_unread_message_id_isValid;

    QDateTime m_last_read_at;
    bool m_last_read_at_isSet;
    bool m_last_read_at_isValid;

    qint32 m_unread_messages;
    bool m_unread_messages_isSet;
    bool m_unread_messages_isValid;

    OAIReaction m_reaction;
    bool m_reaction_isSet;
    bool m_reaction_isValid;

    QString m_parent_id;
    bool m_parent_id_isSet;
    bool m_parent_id_isValid;

    OAIUserObject m_created_by;
    bool m_created_by_isSet;
    bool m_created_by_isValid;

    QDateTime m_expiration;
    bool m_expiration_isSet;
    bool m_expiration_isValid;

    QString m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;

    bool m_shadow;
    bool m_shadow_isSet;
    bool m_shadow_isValid;

    bool m_delete_conversation_channels;
    bool m_delete_conversation_channels_isSet;
    bool m_delete_conversation_channels_isValid;

    bool m_mark_messages_deleted;
    bool m_mark_messages_deleted_isSet;
    bool m_mark_messages_deleted_isValid;

    QString m_target_user;
    bool m_target_user_isSet;
    bool m_target_user_isValid;

    QList<QString> m_target_users;
    bool m_target_users_isSet;
    bool m_target_users_isValid;

    QMap<QString, OAIChannelMessages> m_channels;
    bool m_channels_isSet;
    bool m_channels_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIChatEvent)

#endif // OAIChatEvent_H
