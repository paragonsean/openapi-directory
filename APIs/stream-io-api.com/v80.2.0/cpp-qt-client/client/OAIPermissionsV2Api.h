/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPermissionsV2Api_H
#define OAI_OAIPermissionsV2Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAICreateRoleRequest.h"
#include "OAICreateRoleResponse.h"
#include "OAIGetCustomPermissionResponse.h"
#include "OAIListPermissionsResponse.h"
#include "OAIListRolesResponse.h"
#include "OAIResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPermissionsV2Api : public QObject {
    Q_OBJECT

public:
    OAIPermissionsV2Api(const int timeOut = 0);
    ~OAIPermissionsV2Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_role_request OAICreateRoleRequest [required]
    */
    virtual void createRole(const OAICreateRoleRequest &oai_create_role_request);

    /**
    * @param[in]  name QString [required]
    */
    virtual void deleteRole(const QString &name);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getPermission(const QString &id);


    virtual void listPermissions();


    virtual void listRoles();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createRoleCallback(OAIHttpRequestWorker *worker);
    void deleteRoleCallback(OAIHttpRequestWorker *worker);
    void getPermissionCallback(OAIHttpRequestWorker *worker);
    void listPermissionsCallback(OAIHttpRequestWorker *worker);
    void listRolesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createRoleSignal(OAICreateRoleResponse summary);
    void deleteRoleSignal(OAIResponse summary);
    void getPermissionSignal(OAIGetCustomPermissionResponse summary);
    void listPermissionsSignal(OAIListPermissionsResponse summary);
    void listRolesSignal(OAIListRolesResponse summary);


    void createRoleSignalFull(OAIHttpRequestWorker *worker, OAICreateRoleResponse summary);
    void deleteRoleSignalFull(OAIHttpRequestWorker *worker, OAIResponse summary);
    void getPermissionSignalFull(OAIHttpRequestWorker *worker, OAIGetCustomPermissionResponse summary);
    void listPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIListPermissionsResponse summary);
    void listRolesSignalFull(OAIHttpRequestWorker *worker, OAIListRolesResponse summary);

    Q_DECL_DEPRECATED_X("Use createRoleSignalError() instead")
    void createRoleSignalE(OAICreateRoleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRoleSignalError(OAICreateRoleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRoleSignalError() instead")
    void deleteRoleSignalE(OAIResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRoleSignalError(OAIResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionSignalError() instead")
    void getPermissionSignalE(OAIGetCustomPermissionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionSignalError(OAIGetCustomPermissionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPermissionsSignalError() instead")
    void listPermissionsSignalE(OAIListPermissionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPermissionsSignalError(OAIListPermissionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRolesSignalError() instead")
    void listRolesSignalE(OAIListRolesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRolesSignalError(OAIListRolesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createRoleSignalErrorFull() instead")
    void createRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRoleSignalErrorFull() instead")
    void deleteRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionSignalErrorFull() instead")
    void getPermissionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPermissionsSignalErrorFull() instead")
    void listPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRolesSignalErrorFull() instead")
    void listRolesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRolesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
