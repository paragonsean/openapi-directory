/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAppRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAppRequest::OAIUpdateAppRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAppRequest::OAIUpdateAppRequest() {
    this->initializeModel();
}

OAIUpdateAppRequest::~OAIUpdateAppRequest() {}

void OAIUpdateAppRequest::initializeModel() {

    m_agora_options_isSet = false;
    m_agora_options_isValid = false;

    m_apn_config_isSet = false;
    m_apn_config_isValid = false;

    m_async_moderation_config_isSet = false;
    m_async_moderation_config_isValid = false;

    m_async_url_enrich_enabled_isSet = false;
    m_async_url_enrich_enabled_isValid = false;

    m_auto_translation_enabled_isSet = false;
    m_auto_translation_enabled_isValid = false;

    m_before_message_send_hook_url_isSet = false;
    m_before_message_send_hook_url_isValid = false;

    m_cdn_expiration_seconds_isSet = false;
    m_cdn_expiration_seconds_isValid = false;

    m_channel_hide_members_only_isSet = false;
    m_channel_hide_members_only_isValid = false;

    m_custom_action_handler_url_isSet = false;
    m_custom_action_handler_url_isValid = false;

    m_disable_auth_checks_isSet = false;
    m_disable_auth_checks_isValid = false;

    m_disable_permissions_checks_isSet = false;
    m_disable_permissions_checks_isValid = false;

    m_enforce_unique_usernames_isSet = false;
    m_enforce_unique_usernames_isValid = false;

    m_file_upload_config_isSet = false;
    m_file_upload_config_isValid = false;

    m_firebase_config_isSet = false;
    m_firebase_config_isValid = false;

    m_grants_isSet = false;
    m_grants_isValid = false;

    m_hms_options_isSet = false;
    m_hms_options_isValid = false;

    m_huawei_config_isSet = false;
    m_huawei_config_isValid = false;

    m_image_moderation_block_labels_isSet = false;
    m_image_moderation_block_labels_isValid = false;

    m_image_moderation_enabled_isSet = false;
    m_image_moderation_enabled_isValid = false;

    m_image_moderation_labels_isSet = false;
    m_image_moderation_labels_isValid = false;

    m_image_upload_config_isSet = false;
    m_image_upload_config_isValid = false;

    m_migrate_permissions_to_v2_isSet = false;
    m_migrate_permissions_to_v2_isValid = false;

    m_multi_tenant_enabled_isSet = false;
    m_multi_tenant_enabled_isValid = false;

    m_permission_version_isSet = false;
    m_permission_version_isValid = false;

    m_push_config_isSet = false;
    m_push_config_isValid = false;

    m_reminders_interval_isSet = false;
    m_reminders_interval_isValid = false;

    m_revoke_tokens_issued_before_isSet = false;
    m_revoke_tokens_issued_before_isValid = false;

    m_sqs_key_isSet = false;
    m_sqs_key_isValid = false;

    m_sqs_secret_isSet = false;
    m_sqs_secret_isValid = false;

    m_sqs_url_isSet = false;
    m_sqs_url_isValid = false;

    m_user_search_disallowed_roles_isSet = false;
    m_user_search_disallowed_roles_isValid = false;

    m_video_provider_isSet = false;
    m_video_provider_isValid = false;

    m_webhook_events_isSet = false;
    m_webhook_events_isValid = false;

    m_webhook_url_isSet = false;
    m_webhook_url_isValid = false;

    m_xiaomi_config_isSet = false;
    m_xiaomi_config_isValid = false;
}

void OAIUpdateAppRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAppRequest::fromJsonObject(QJsonObject json) {

    m_agora_options_isValid = ::OpenAPI::fromJsonValue(m_agora_options, json[QString("agora_options")]);
    m_agora_options_isSet = !json[QString("agora_options")].isNull() && m_agora_options_isValid;

    m_apn_config_isValid = ::OpenAPI::fromJsonValue(m_apn_config, json[QString("apn_config")]);
    m_apn_config_isSet = !json[QString("apn_config")].isNull() && m_apn_config_isValid;

    m_async_moderation_config_isValid = ::OpenAPI::fromJsonValue(m_async_moderation_config, json[QString("async_moderation_config")]);
    m_async_moderation_config_isSet = !json[QString("async_moderation_config")].isNull() && m_async_moderation_config_isValid;

    m_async_url_enrich_enabled_isValid = ::OpenAPI::fromJsonValue(m_async_url_enrich_enabled, json[QString("async_url_enrich_enabled")]);
    m_async_url_enrich_enabled_isSet = !json[QString("async_url_enrich_enabled")].isNull() && m_async_url_enrich_enabled_isValid;

    m_auto_translation_enabled_isValid = ::OpenAPI::fromJsonValue(m_auto_translation_enabled, json[QString("auto_translation_enabled")]);
    m_auto_translation_enabled_isSet = !json[QString("auto_translation_enabled")].isNull() && m_auto_translation_enabled_isValid;

    m_before_message_send_hook_url_isValid = ::OpenAPI::fromJsonValue(m_before_message_send_hook_url, json[QString("before_message_send_hook_url")]);
    m_before_message_send_hook_url_isSet = !json[QString("before_message_send_hook_url")].isNull() && m_before_message_send_hook_url_isValid;

    m_cdn_expiration_seconds_isValid = ::OpenAPI::fromJsonValue(m_cdn_expiration_seconds, json[QString("cdn_expiration_seconds")]);
    m_cdn_expiration_seconds_isSet = !json[QString("cdn_expiration_seconds")].isNull() && m_cdn_expiration_seconds_isValid;

    m_channel_hide_members_only_isValid = ::OpenAPI::fromJsonValue(m_channel_hide_members_only, json[QString("channel_hide_members_only")]);
    m_channel_hide_members_only_isSet = !json[QString("channel_hide_members_only")].isNull() && m_channel_hide_members_only_isValid;

    m_custom_action_handler_url_isValid = ::OpenAPI::fromJsonValue(m_custom_action_handler_url, json[QString("custom_action_handler_url")]);
    m_custom_action_handler_url_isSet = !json[QString("custom_action_handler_url")].isNull() && m_custom_action_handler_url_isValid;

    m_disable_auth_checks_isValid = ::OpenAPI::fromJsonValue(m_disable_auth_checks, json[QString("disable_auth_checks")]);
    m_disable_auth_checks_isSet = !json[QString("disable_auth_checks")].isNull() && m_disable_auth_checks_isValid;

    m_disable_permissions_checks_isValid = ::OpenAPI::fromJsonValue(m_disable_permissions_checks, json[QString("disable_permissions_checks")]);
    m_disable_permissions_checks_isSet = !json[QString("disable_permissions_checks")].isNull() && m_disable_permissions_checks_isValid;

    m_enforce_unique_usernames_isValid = ::OpenAPI::fromJsonValue(m_enforce_unique_usernames, json[QString("enforce_unique_usernames")]);
    m_enforce_unique_usernames_isSet = !json[QString("enforce_unique_usernames")].isNull() && m_enforce_unique_usernames_isValid;

    m_file_upload_config_isValid = ::OpenAPI::fromJsonValue(m_file_upload_config, json[QString("file_upload_config")]);
    m_file_upload_config_isSet = !json[QString("file_upload_config")].isNull() && m_file_upload_config_isValid;

    m_firebase_config_isValid = ::OpenAPI::fromJsonValue(m_firebase_config, json[QString("firebase_config")]);
    m_firebase_config_isSet = !json[QString("firebase_config")].isNull() && m_firebase_config_isValid;

    if(json["grants"].isObject()){
        auto varmap = json["grants"].toObject().toVariantMap();
        m_grants_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_grants_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_grants_isSet &= !jval.isNull() && m_grants_isValid;
                m_grants.insert(m_grants.end(), val, item);
            }
        }
    }

    m_hms_options_isValid = ::OpenAPI::fromJsonValue(m_hms_options, json[QString("hms_options")]);
    m_hms_options_isSet = !json[QString("hms_options")].isNull() && m_hms_options_isValid;

    m_huawei_config_isValid = ::OpenAPI::fromJsonValue(m_huawei_config, json[QString("huawei_config")]);
    m_huawei_config_isSet = !json[QString("huawei_config")].isNull() && m_huawei_config_isValid;

    m_image_moderation_block_labels_isValid = ::OpenAPI::fromJsonValue(m_image_moderation_block_labels, json[QString("image_moderation_block_labels")]);
    m_image_moderation_block_labels_isSet = !json[QString("image_moderation_block_labels")].isNull() && m_image_moderation_block_labels_isValid;

    m_image_moderation_enabled_isValid = ::OpenAPI::fromJsonValue(m_image_moderation_enabled, json[QString("image_moderation_enabled")]);
    m_image_moderation_enabled_isSet = !json[QString("image_moderation_enabled")].isNull() && m_image_moderation_enabled_isValid;

    m_image_moderation_labels_isValid = ::OpenAPI::fromJsonValue(m_image_moderation_labels, json[QString("image_moderation_labels")]);
    m_image_moderation_labels_isSet = !json[QString("image_moderation_labels")].isNull() && m_image_moderation_labels_isValid;

    m_image_upload_config_isValid = ::OpenAPI::fromJsonValue(m_image_upload_config, json[QString("image_upload_config")]);
    m_image_upload_config_isSet = !json[QString("image_upload_config")].isNull() && m_image_upload_config_isValid;

    m_migrate_permissions_to_v2_isValid = ::OpenAPI::fromJsonValue(m_migrate_permissions_to_v2, json[QString("migrate_permissions_to_v2")]);
    m_migrate_permissions_to_v2_isSet = !json[QString("migrate_permissions_to_v2")].isNull() && m_migrate_permissions_to_v2_isValid;

    m_multi_tenant_enabled_isValid = ::OpenAPI::fromJsonValue(m_multi_tenant_enabled, json[QString("multi_tenant_enabled")]);
    m_multi_tenant_enabled_isSet = !json[QString("multi_tenant_enabled")].isNull() && m_multi_tenant_enabled_isValid;

    m_permission_version_isValid = ::OpenAPI::fromJsonValue(m_permission_version, json[QString("permission_version")]);
    m_permission_version_isSet = !json[QString("permission_version")].isNull() && m_permission_version_isValid;

    m_push_config_isValid = ::OpenAPI::fromJsonValue(m_push_config, json[QString("push_config")]);
    m_push_config_isSet = !json[QString("push_config")].isNull() && m_push_config_isValid;

    m_reminders_interval_isValid = ::OpenAPI::fromJsonValue(m_reminders_interval, json[QString("reminders_interval")]);
    m_reminders_interval_isSet = !json[QString("reminders_interval")].isNull() && m_reminders_interval_isValid;

    m_revoke_tokens_issued_before_isValid = ::OpenAPI::fromJsonValue(m_revoke_tokens_issued_before, json[QString("revoke_tokens_issued_before")]);
    m_revoke_tokens_issued_before_isSet = !json[QString("revoke_tokens_issued_before")].isNull() && m_revoke_tokens_issued_before_isValid;

    m_sqs_key_isValid = ::OpenAPI::fromJsonValue(m_sqs_key, json[QString("sqs_key")]);
    m_sqs_key_isSet = !json[QString("sqs_key")].isNull() && m_sqs_key_isValid;

    m_sqs_secret_isValid = ::OpenAPI::fromJsonValue(m_sqs_secret, json[QString("sqs_secret")]);
    m_sqs_secret_isSet = !json[QString("sqs_secret")].isNull() && m_sqs_secret_isValid;

    m_sqs_url_isValid = ::OpenAPI::fromJsonValue(m_sqs_url, json[QString("sqs_url")]);
    m_sqs_url_isSet = !json[QString("sqs_url")].isNull() && m_sqs_url_isValid;

    m_user_search_disallowed_roles_isValid = ::OpenAPI::fromJsonValue(m_user_search_disallowed_roles, json[QString("user_search_disallowed_roles")]);
    m_user_search_disallowed_roles_isSet = !json[QString("user_search_disallowed_roles")].isNull() && m_user_search_disallowed_roles_isValid;

    m_video_provider_isValid = ::OpenAPI::fromJsonValue(m_video_provider, json[QString("video_provider")]);
    m_video_provider_isSet = !json[QString("video_provider")].isNull() && m_video_provider_isValid;

    m_webhook_events_isValid = ::OpenAPI::fromJsonValue(m_webhook_events, json[QString("webhook_events")]);
    m_webhook_events_isSet = !json[QString("webhook_events")].isNull() && m_webhook_events_isValid;

    m_webhook_url_isValid = ::OpenAPI::fromJsonValue(m_webhook_url, json[QString("webhook_url")]);
    m_webhook_url_isSet = !json[QString("webhook_url")].isNull() && m_webhook_url_isValid;

    m_xiaomi_config_isValid = ::OpenAPI::fromJsonValue(m_xiaomi_config, json[QString("xiaomi_config")]);
    m_xiaomi_config_isSet = !json[QString("xiaomi_config")].isNull() && m_xiaomi_config_isValid;
}

QString OAIUpdateAppRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAppRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_agora_options.isSet()) {
        obj.insert(QString("agora_options"), ::OpenAPI::toJsonValue(m_agora_options));
    }
    if (m_apn_config.isSet()) {
        obj.insert(QString("apn_config"), ::OpenAPI::toJsonValue(m_apn_config));
    }
    if (m_async_moderation_config.isSet()) {
        obj.insert(QString("async_moderation_config"), ::OpenAPI::toJsonValue(m_async_moderation_config));
    }
    if (m_async_url_enrich_enabled_isSet) {
        obj.insert(QString("async_url_enrich_enabled"), ::OpenAPI::toJsonValue(m_async_url_enrich_enabled));
    }
    if (m_auto_translation_enabled_isSet) {
        obj.insert(QString("auto_translation_enabled"), ::OpenAPI::toJsonValue(m_auto_translation_enabled));
    }
    if (m_before_message_send_hook_url_isSet) {
        obj.insert(QString("before_message_send_hook_url"), ::OpenAPI::toJsonValue(m_before_message_send_hook_url));
    }
    if (m_cdn_expiration_seconds_isSet) {
        obj.insert(QString("cdn_expiration_seconds"), ::OpenAPI::toJsonValue(m_cdn_expiration_seconds));
    }
    if (m_channel_hide_members_only_isSet) {
        obj.insert(QString("channel_hide_members_only"), ::OpenAPI::toJsonValue(m_channel_hide_members_only));
    }
    if (m_custom_action_handler_url_isSet) {
        obj.insert(QString("custom_action_handler_url"), ::OpenAPI::toJsonValue(m_custom_action_handler_url));
    }
    if (m_disable_auth_checks_isSet) {
        obj.insert(QString("disable_auth_checks"), ::OpenAPI::toJsonValue(m_disable_auth_checks));
    }
    if (m_disable_permissions_checks_isSet) {
        obj.insert(QString("disable_permissions_checks"), ::OpenAPI::toJsonValue(m_disable_permissions_checks));
    }
    if (m_enforce_unique_usernames_isSet) {
        obj.insert(QString("enforce_unique_usernames"), ::OpenAPI::toJsonValue(m_enforce_unique_usernames));
    }
    if (m_file_upload_config.isSet()) {
        obj.insert(QString("file_upload_config"), ::OpenAPI::toJsonValue(m_file_upload_config));
    }
    if (m_firebase_config.isSet()) {
        obj.insert(QString("firebase_config"), ::OpenAPI::toJsonValue(m_firebase_config));
    }
    if (m_grants.size() > 0) {
        
        obj.insert(QString("grants"), toJsonValue(m_grants));
    }
    if (m_hms_options.isSet()) {
        obj.insert(QString("hms_options"), ::OpenAPI::toJsonValue(m_hms_options));
    }
    if (m_huawei_config.isSet()) {
        obj.insert(QString("huawei_config"), ::OpenAPI::toJsonValue(m_huawei_config));
    }
    if (m_image_moderation_block_labels.size() > 0) {
        obj.insert(QString("image_moderation_block_labels"), ::OpenAPI::toJsonValue(m_image_moderation_block_labels));
    }
    if (m_image_moderation_enabled_isSet) {
        obj.insert(QString("image_moderation_enabled"), ::OpenAPI::toJsonValue(m_image_moderation_enabled));
    }
    if (m_image_moderation_labels.size() > 0) {
        obj.insert(QString("image_moderation_labels"), ::OpenAPI::toJsonValue(m_image_moderation_labels));
    }
    if (m_image_upload_config.isSet()) {
        obj.insert(QString("image_upload_config"), ::OpenAPI::toJsonValue(m_image_upload_config));
    }
    if (m_migrate_permissions_to_v2_isSet) {
        obj.insert(QString("migrate_permissions_to_v2"), ::OpenAPI::toJsonValue(m_migrate_permissions_to_v2));
    }
    if (m_multi_tenant_enabled_isSet) {
        obj.insert(QString("multi_tenant_enabled"), ::OpenAPI::toJsonValue(m_multi_tenant_enabled));
    }
    if (m_permission_version_isSet) {
        obj.insert(QString("permission_version"), ::OpenAPI::toJsonValue(m_permission_version));
    }
    if (m_push_config.isSet()) {
        obj.insert(QString("push_config"), ::OpenAPI::toJsonValue(m_push_config));
    }
    if (m_reminders_interval_isSet) {
        obj.insert(QString("reminders_interval"), ::OpenAPI::toJsonValue(m_reminders_interval));
    }
    if (m_revoke_tokens_issued_before_isSet) {
        obj.insert(QString("revoke_tokens_issued_before"), ::OpenAPI::toJsonValue(m_revoke_tokens_issued_before));
    }
    if (m_sqs_key_isSet) {
        obj.insert(QString("sqs_key"), ::OpenAPI::toJsonValue(m_sqs_key));
    }
    if (m_sqs_secret_isSet) {
        obj.insert(QString("sqs_secret"), ::OpenAPI::toJsonValue(m_sqs_secret));
    }
    if (m_sqs_url_isSet) {
        obj.insert(QString("sqs_url"), ::OpenAPI::toJsonValue(m_sqs_url));
    }
    if (m_user_search_disallowed_roles.size() > 0) {
        obj.insert(QString("user_search_disallowed_roles"), ::OpenAPI::toJsonValue(m_user_search_disallowed_roles));
    }
    if (m_video_provider_isSet) {
        obj.insert(QString("video_provider"), ::OpenAPI::toJsonValue(m_video_provider));
    }
    if (m_webhook_events.size() > 0) {
        obj.insert(QString("webhook_events"), ::OpenAPI::toJsonValue(m_webhook_events));
    }
    if (m_webhook_url_isSet) {
        obj.insert(QString("webhook_url"), ::OpenAPI::toJsonValue(m_webhook_url));
    }
    if (m_xiaomi_config.isSet()) {
        obj.insert(QString("xiaomi_config"), ::OpenAPI::toJsonValue(m_xiaomi_config));
    }
    return obj;
}

OAIConfigRequest OAIUpdateAppRequest::getAgoraOptions() const {
    return m_agora_options;
}
void OAIUpdateAppRequest::setAgoraOptions(const OAIConfigRequest &agora_options) {
    m_agora_options = agora_options;
    m_agora_options_isSet = true;
}

bool OAIUpdateAppRequest::is_agora_options_Set() const{
    return m_agora_options_isSet;
}

bool OAIUpdateAppRequest::is_agora_options_Valid() const{
    return m_agora_options_isValid;
}

OAIAPNConfigRequest OAIUpdateAppRequest::getApnConfig() const {
    return m_apn_config;
}
void OAIUpdateAppRequest::setApnConfig(const OAIAPNConfigRequest &apn_config) {
    m_apn_config = apn_config;
    m_apn_config_isSet = true;
}

bool OAIUpdateAppRequest::is_apn_config_Set() const{
    return m_apn_config_isSet;
}

bool OAIUpdateAppRequest::is_apn_config_Valid() const{
    return m_apn_config_isValid;
}

OAIAsyncModerationConfigurationRequest OAIUpdateAppRequest::getAsyncModerationConfig() const {
    return m_async_moderation_config;
}
void OAIUpdateAppRequest::setAsyncModerationConfig(const OAIAsyncModerationConfigurationRequest &async_moderation_config) {
    m_async_moderation_config = async_moderation_config;
    m_async_moderation_config_isSet = true;
}

bool OAIUpdateAppRequest::is_async_moderation_config_Set() const{
    return m_async_moderation_config_isSet;
}

bool OAIUpdateAppRequest::is_async_moderation_config_Valid() const{
    return m_async_moderation_config_isValid;
}

bool OAIUpdateAppRequest::isAsyncUrlEnrichEnabled() const {
    return m_async_url_enrich_enabled;
}
void OAIUpdateAppRequest::setAsyncUrlEnrichEnabled(const bool &async_url_enrich_enabled) {
    m_async_url_enrich_enabled = async_url_enrich_enabled;
    m_async_url_enrich_enabled_isSet = true;
}

bool OAIUpdateAppRequest::is_async_url_enrich_enabled_Set() const{
    return m_async_url_enrich_enabled_isSet;
}

bool OAIUpdateAppRequest::is_async_url_enrich_enabled_Valid() const{
    return m_async_url_enrich_enabled_isValid;
}

bool OAIUpdateAppRequest::isAutoTranslationEnabled() const {
    return m_auto_translation_enabled;
}
void OAIUpdateAppRequest::setAutoTranslationEnabled(const bool &auto_translation_enabled) {
    m_auto_translation_enabled = auto_translation_enabled;
    m_auto_translation_enabled_isSet = true;
}

bool OAIUpdateAppRequest::is_auto_translation_enabled_Set() const{
    return m_auto_translation_enabled_isSet;
}

bool OAIUpdateAppRequest::is_auto_translation_enabled_Valid() const{
    return m_auto_translation_enabled_isValid;
}

QString OAIUpdateAppRequest::getBeforeMessageSendHookUrl() const {
    return m_before_message_send_hook_url;
}
void OAIUpdateAppRequest::setBeforeMessageSendHookUrl(const QString &before_message_send_hook_url) {
    m_before_message_send_hook_url = before_message_send_hook_url;
    m_before_message_send_hook_url_isSet = true;
}

bool OAIUpdateAppRequest::is_before_message_send_hook_url_Set() const{
    return m_before_message_send_hook_url_isSet;
}

bool OAIUpdateAppRequest::is_before_message_send_hook_url_Valid() const{
    return m_before_message_send_hook_url_isValid;
}

qint32 OAIUpdateAppRequest::getCdnExpirationSeconds() const {
    return m_cdn_expiration_seconds;
}
void OAIUpdateAppRequest::setCdnExpirationSeconds(const qint32 &cdn_expiration_seconds) {
    m_cdn_expiration_seconds = cdn_expiration_seconds;
    m_cdn_expiration_seconds_isSet = true;
}

bool OAIUpdateAppRequest::is_cdn_expiration_seconds_Set() const{
    return m_cdn_expiration_seconds_isSet;
}

bool OAIUpdateAppRequest::is_cdn_expiration_seconds_Valid() const{
    return m_cdn_expiration_seconds_isValid;
}

bool OAIUpdateAppRequest::isChannelHideMembersOnly() const {
    return m_channel_hide_members_only;
}
void OAIUpdateAppRequest::setChannelHideMembersOnly(const bool &channel_hide_members_only) {
    m_channel_hide_members_only = channel_hide_members_only;
    m_channel_hide_members_only_isSet = true;
}

bool OAIUpdateAppRequest::is_channel_hide_members_only_Set() const{
    return m_channel_hide_members_only_isSet;
}

bool OAIUpdateAppRequest::is_channel_hide_members_only_Valid() const{
    return m_channel_hide_members_only_isValid;
}

QString OAIUpdateAppRequest::getCustomActionHandlerUrl() const {
    return m_custom_action_handler_url;
}
void OAIUpdateAppRequest::setCustomActionHandlerUrl(const QString &custom_action_handler_url) {
    m_custom_action_handler_url = custom_action_handler_url;
    m_custom_action_handler_url_isSet = true;
}

bool OAIUpdateAppRequest::is_custom_action_handler_url_Set() const{
    return m_custom_action_handler_url_isSet;
}

bool OAIUpdateAppRequest::is_custom_action_handler_url_Valid() const{
    return m_custom_action_handler_url_isValid;
}

bool OAIUpdateAppRequest::isDisableAuthChecks() const {
    return m_disable_auth_checks;
}
void OAIUpdateAppRequest::setDisableAuthChecks(const bool &disable_auth_checks) {
    m_disable_auth_checks = disable_auth_checks;
    m_disable_auth_checks_isSet = true;
}

bool OAIUpdateAppRequest::is_disable_auth_checks_Set() const{
    return m_disable_auth_checks_isSet;
}

bool OAIUpdateAppRequest::is_disable_auth_checks_Valid() const{
    return m_disable_auth_checks_isValid;
}

bool OAIUpdateAppRequest::isDisablePermissionsChecks() const {
    return m_disable_permissions_checks;
}
void OAIUpdateAppRequest::setDisablePermissionsChecks(const bool &disable_permissions_checks) {
    m_disable_permissions_checks = disable_permissions_checks;
    m_disable_permissions_checks_isSet = true;
}

bool OAIUpdateAppRequest::is_disable_permissions_checks_Set() const{
    return m_disable_permissions_checks_isSet;
}

bool OAIUpdateAppRequest::is_disable_permissions_checks_Valid() const{
    return m_disable_permissions_checks_isValid;
}

QString OAIUpdateAppRequest::getEnforceUniqueUsernames() const {
    return m_enforce_unique_usernames;
}
void OAIUpdateAppRequest::setEnforceUniqueUsernames(const QString &enforce_unique_usernames) {
    m_enforce_unique_usernames = enforce_unique_usernames;
    m_enforce_unique_usernames_isSet = true;
}

bool OAIUpdateAppRequest::is_enforce_unique_usernames_Set() const{
    return m_enforce_unique_usernames_isSet;
}

bool OAIUpdateAppRequest::is_enforce_unique_usernames_Valid() const{
    return m_enforce_unique_usernames_isValid;
}

OAIFileUploadConfigRequest OAIUpdateAppRequest::getFileUploadConfig() const {
    return m_file_upload_config;
}
void OAIUpdateAppRequest::setFileUploadConfig(const OAIFileUploadConfigRequest &file_upload_config) {
    m_file_upload_config = file_upload_config;
    m_file_upload_config_isSet = true;
}

bool OAIUpdateAppRequest::is_file_upload_config_Set() const{
    return m_file_upload_config_isSet;
}

bool OAIUpdateAppRequest::is_file_upload_config_Valid() const{
    return m_file_upload_config_isValid;
}

OAIFirebaseConfigRequest OAIUpdateAppRequest::getFirebaseConfig() const {
    return m_firebase_config;
}
void OAIUpdateAppRequest::setFirebaseConfig(const OAIFirebaseConfigRequest &firebase_config) {
    m_firebase_config = firebase_config;
    m_firebase_config_isSet = true;
}

bool OAIUpdateAppRequest::is_firebase_config_Set() const{
    return m_firebase_config_isSet;
}

bool OAIUpdateAppRequest::is_firebase_config_Valid() const{
    return m_firebase_config_isValid;
}

QMap<QString, QList<QString>> OAIUpdateAppRequest::getGrants() const {
    return m_grants;
}
void OAIUpdateAppRequest::setGrants(const QMap<QString, QList<QString>> &grants) {
    m_grants = grants;
    m_grants_isSet = true;
}

bool OAIUpdateAppRequest::is_grants_Set() const{
    return m_grants_isSet;
}

bool OAIUpdateAppRequest::is_grants_Valid() const{
    return m_grants_isValid;
}

OAIConfigRequest OAIUpdateAppRequest::getHmsOptions() const {
    return m_hms_options;
}
void OAIUpdateAppRequest::setHmsOptions(const OAIConfigRequest &hms_options) {
    m_hms_options = hms_options;
    m_hms_options_isSet = true;
}

bool OAIUpdateAppRequest::is_hms_options_Set() const{
    return m_hms_options_isSet;
}

bool OAIUpdateAppRequest::is_hms_options_Valid() const{
    return m_hms_options_isValid;
}

OAIHuaweiConfigRequest OAIUpdateAppRequest::getHuaweiConfig() const {
    return m_huawei_config;
}
void OAIUpdateAppRequest::setHuaweiConfig(const OAIHuaweiConfigRequest &huawei_config) {
    m_huawei_config = huawei_config;
    m_huawei_config_isSet = true;
}

bool OAIUpdateAppRequest::is_huawei_config_Set() const{
    return m_huawei_config_isSet;
}

bool OAIUpdateAppRequest::is_huawei_config_Valid() const{
    return m_huawei_config_isValid;
}

QList<QString> OAIUpdateAppRequest::getImageModerationBlockLabels() const {
    return m_image_moderation_block_labels;
}
void OAIUpdateAppRequest::setImageModerationBlockLabels(const QList<QString> &image_moderation_block_labels) {
    m_image_moderation_block_labels = image_moderation_block_labels;
    m_image_moderation_block_labels_isSet = true;
}

bool OAIUpdateAppRequest::is_image_moderation_block_labels_Set() const{
    return m_image_moderation_block_labels_isSet;
}

bool OAIUpdateAppRequest::is_image_moderation_block_labels_Valid() const{
    return m_image_moderation_block_labels_isValid;
}

bool OAIUpdateAppRequest::isImageModerationEnabled() const {
    return m_image_moderation_enabled;
}
void OAIUpdateAppRequest::setImageModerationEnabled(const bool &image_moderation_enabled) {
    m_image_moderation_enabled = image_moderation_enabled;
    m_image_moderation_enabled_isSet = true;
}

bool OAIUpdateAppRequest::is_image_moderation_enabled_Set() const{
    return m_image_moderation_enabled_isSet;
}

bool OAIUpdateAppRequest::is_image_moderation_enabled_Valid() const{
    return m_image_moderation_enabled_isValid;
}

QList<QString> OAIUpdateAppRequest::getImageModerationLabels() const {
    return m_image_moderation_labels;
}
void OAIUpdateAppRequest::setImageModerationLabels(const QList<QString> &image_moderation_labels) {
    m_image_moderation_labels = image_moderation_labels;
    m_image_moderation_labels_isSet = true;
}

bool OAIUpdateAppRequest::is_image_moderation_labels_Set() const{
    return m_image_moderation_labels_isSet;
}

bool OAIUpdateAppRequest::is_image_moderation_labels_Valid() const{
    return m_image_moderation_labels_isValid;
}

OAIFileUploadConfigRequest OAIUpdateAppRequest::getImageUploadConfig() const {
    return m_image_upload_config;
}
void OAIUpdateAppRequest::setImageUploadConfig(const OAIFileUploadConfigRequest &image_upload_config) {
    m_image_upload_config = image_upload_config;
    m_image_upload_config_isSet = true;
}

bool OAIUpdateAppRequest::is_image_upload_config_Set() const{
    return m_image_upload_config_isSet;
}

bool OAIUpdateAppRequest::is_image_upload_config_Valid() const{
    return m_image_upload_config_isValid;
}

bool OAIUpdateAppRequest::isMigratePermissionsToV2() const {
    return m_migrate_permissions_to_v2;
}
void OAIUpdateAppRequest::setMigratePermissionsToV2(const bool &migrate_permissions_to_v2) {
    m_migrate_permissions_to_v2 = migrate_permissions_to_v2;
    m_migrate_permissions_to_v2_isSet = true;
}

bool OAIUpdateAppRequest::is_migrate_permissions_to_v2_Set() const{
    return m_migrate_permissions_to_v2_isSet;
}

bool OAIUpdateAppRequest::is_migrate_permissions_to_v2_Valid() const{
    return m_migrate_permissions_to_v2_isValid;
}

bool OAIUpdateAppRequest::isMultiTenantEnabled() const {
    return m_multi_tenant_enabled;
}
void OAIUpdateAppRequest::setMultiTenantEnabled(const bool &multi_tenant_enabled) {
    m_multi_tenant_enabled = multi_tenant_enabled;
    m_multi_tenant_enabled_isSet = true;
}

bool OAIUpdateAppRequest::is_multi_tenant_enabled_Set() const{
    return m_multi_tenant_enabled_isSet;
}

bool OAIUpdateAppRequest::is_multi_tenant_enabled_Valid() const{
    return m_multi_tenant_enabled_isValid;
}

QString OAIUpdateAppRequest::getPermissionVersion() const {
    return m_permission_version;
}
void OAIUpdateAppRequest::setPermissionVersion(const QString &permission_version) {
    m_permission_version = permission_version;
    m_permission_version_isSet = true;
}

bool OAIUpdateAppRequest::is_permission_version_Set() const{
    return m_permission_version_isSet;
}

bool OAIUpdateAppRequest::is_permission_version_Valid() const{
    return m_permission_version_isValid;
}

OAIPushConfigRequest OAIUpdateAppRequest::getPushConfig() const {
    return m_push_config;
}
void OAIUpdateAppRequest::setPushConfig(const OAIPushConfigRequest &push_config) {
    m_push_config = push_config;
    m_push_config_isSet = true;
}

bool OAIUpdateAppRequest::is_push_config_Set() const{
    return m_push_config_isSet;
}

bool OAIUpdateAppRequest::is_push_config_Valid() const{
    return m_push_config_isValid;
}

qint32 OAIUpdateAppRequest::getRemindersInterval() const {
    return m_reminders_interval;
}
void OAIUpdateAppRequest::setRemindersInterval(const qint32 &reminders_interval) {
    m_reminders_interval = reminders_interval;
    m_reminders_interval_isSet = true;
}

bool OAIUpdateAppRequest::is_reminders_interval_Set() const{
    return m_reminders_interval_isSet;
}

bool OAIUpdateAppRequest::is_reminders_interval_Valid() const{
    return m_reminders_interval_isValid;
}

QDateTime OAIUpdateAppRequest::getRevokeTokensIssuedBefore() const {
    return m_revoke_tokens_issued_before;
}
void OAIUpdateAppRequest::setRevokeTokensIssuedBefore(const QDateTime &revoke_tokens_issued_before) {
    m_revoke_tokens_issued_before = revoke_tokens_issued_before;
    m_revoke_tokens_issued_before_isSet = true;
}

bool OAIUpdateAppRequest::is_revoke_tokens_issued_before_Set() const{
    return m_revoke_tokens_issued_before_isSet;
}

bool OAIUpdateAppRequest::is_revoke_tokens_issued_before_Valid() const{
    return m_revoke_tokens_issued_before_isValid;
}

QString OAIUpdateAppRequest::getSqsKey() const {
    return m_sqs_key;
}
void OAIUpdateAppRequest::setSqsKey(const QString &sqs_key) {
    m_sqs_key = sqs_key;
    m_sqs_key_isSet = true;
}

bool OAIUpdateAppRequest::is_sqs_key_Set() const{
    return m_sqs_key_isSet;
}

bool OAIUpdateAppRequest::is_sqs_key_Valid() const{
    return m_sqs_key_isValid;
}

QString OAIUpdateAppRequest::getSqsSecret() const {
    return m_sqs_secret;
}
void OAIUpdateAppRequest::setSqsSecret(const QString &sqs_secret) {
    m_sqs_secret = sqs_secret;
    m_sqs_secret_isSet = true;
}

bool OAIUpdateAppRequest::is_sqs_secret_Set() const{
    return m_sqs_secret_isSet;
}

bool OAIUpdateAppRequest::is_sqs_secret_Valid() const{
    return m_sqs_secret_isValid;
}

QString OAIUpdateAppRequest::getSqsUrl() const {
    return m_sqs_url;
}
void OAIUpdateAppRequest::setSqsUrl(const QString &sqs_url) {
    m_sqs_url = sqs_url;
    m_sqs_url_isSet = true;
}

bool OAIUpdateAppRequest::is_sqs_url_Set() const{
    return m_sqs_url_isSet;
}

bool OAIUpdateAppRequest::is_sqs_url_Valid() const{
    return m_sqs_url_isValid;
}

QList<QString> OAIUpdateAppRequest::getUserSearchDisallowedRoles() const {
    return m_user_search_disallowed_roles;
}
void OAIUpdateAppRequest::setUserSearchDisallowedRoles(const QList<QString> &user_search_disallowed_roles) {
    m_user_search_disallowed_roles = user_search_disallowed_roles;
    m_user_search_disallowed_roles_isSet = true;
}

bool OAIUpdateAppRequest::is_user_search_disallowed_roles_Set() const{
    return m_user_search_disallowed_roles_isSet;
}

bool OAIUpdateAppRequest::is_user_search_disallowed_roles_Valid() const{
    return m_user_search_disallowed_roles_isValid;
}

QString OAIUpdateAppRequest::getVideoProvider() const {
    return m_video_provider;
}
void OAIUpdateAppRequest::setVideoProvider(const QString &video_provider) {
    m_video_provider = video_provider;
    m_video_provider_isSet = true;
}

bool OAIUpdateAppRequest::is_video_provider_Set() const{
    return m_video_provider_isSet;
}

bool OAIUpdateAppRequest::is_video_provider_Valid() const{
    return m_video_provider_isValid;
}

QList<QString> OAIUpdateAppRequest::getWebhookEvents() const {
    return m_webhook_events;
}
void OAIUpdateAppRequest::setWebhookEvents(const QList<QString> &webhook_events) {
    m_webhook_events = webhook_events;
    m_webhook_events_isSet = true;
}

bool OAIUpdateAppRequest::is_webhook_events_Set() const{
    return m_webhook_events_isSet;
}

bool OAIUpdateAppRequest::is_webhook_events_Valid() const{
    return m_webhook_events_isValid;
}

QString OAIUpdateAppRequest::getWebhookUrl() const {
    return m_webhook_url;
}
void OAIUpdateAppRequest::setWebhookUrl(const QString &webhook_url) {
    m_webhook_url = webhook_url;
    m_webhook_url_isSet = true;
}

bool OAIUpdateAppRequest::is_webhook_url_Set() const{
    return m_webhook_url_isSet;
}

bool OAIUpdateAppRequest::is_webhook_url_Valid() const{
    return m_webhook_url_isValid;
}

OAIXiaomiConfigRequest OAIUpdateAppRequest::getXiaomiConfig() const {
    return m_xiaomi_config;
}
void OAIUpdateAppRequest::setXiaomiConfig(const OAIXiaomiConfigRequest &xiaomi_config) {
    m_xiaomi_config = xiaomi_config;
    m_xiaomi_config_isSet = true;
}

bool OAIUpdateAppRequest::is_xiaomi_config_Set() const{
    return m_xiaomi_config_isSet;
}

bool OAIUpdateAppRequest::is_xiaomi_config_Valid() const{
    return m_xiaomi_config_isValid;
}

bool OAIUpdateAppRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agora_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_apn_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_async_moderation_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_async_url_enrich_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_translation_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_before_message_send_hook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cdn_expiration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_hide_members_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_action_handler_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_auth_checks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_permissions_checks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforce_unique_usernames_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_upload_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_firebase_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_grants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hms_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_huawei_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_moderation_block_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_moderation_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_moderation_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_upload_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_migrate_permissions_to_v2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_tenant_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_push_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reminders_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revoke_tokens_issued_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqs_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqs_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqs_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_search_disallowed_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhook_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xiaomi_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAppRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
