/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportTaskHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportTaskHistory::OAIImportTaskHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportTaskHistory::OAIImportTaskHistory() {
    this->initializeModel();
}

OAIImportTaskHistory::~OAIImportTaskHistory() {}

void OAIImportTaskHistory::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_next_state_isSet = false;
    m_next_state_isValid = false;

    m_prev_state_isSet = false;
    m_prev_state_isValid = false;
}

void OAIImportTaskHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportTaskHistory::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_next_state_isValid = ::OpenAPI::fromJsonValue(m_next_state, json[QString("next_state")]);
    m_next_state_isSet = !json[QString("next_state")].isNull() && m_next_state_isValid;

    m_prev_state_isValid = ::OpenAPI::fromJsonValue(m_prev_state, json[QString("prev_state")]);
    m_prev_state_isSet = !json[QString("prev_state")].isNull() && m_prev_state_isValid;
}

QString OAIImportTaskHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportTaskHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_next_state_isSet) {
        obj.insert(QString("next_state"), ::OpenAPI::toJsonValue(m_next_state));
    }
    if (m_prev_state_isSet) {
        obj.insert(QString("prev_state"), ::OpenAPI::toJsonValue(m_prev_state));
    }
    return obj;
}

QDateTime OAIImportTaskHistory::getCreatedAt() const {
    return m_created_at;
}
void OAIImportTaskHistory::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIImportTaskHistory::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIImportTaskHistory::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIImportTaskHistory::getNextState() const {
    return m_next_state;
}
void OAIImportTaskHistory::setNextState(const QString &next_state) {
    m_next_state = next_state;
    m_next_state_isSet = true;
}

bool OAIImportTaskHistory::is_next_state_Set() const{
    return m_next_state_isSet;
}

bool OAIImportTaskHistory::is_next_state_Valid() const{
    return m_next_state_isValid;
}

QString OAIImportTaskHistory::getPrevState() const {
    return m_prev_state;
}
void OAIImportTaskHistory::setPrevState(const QString &prev_state) {
    m_prev_state = prev_state;
    m_prev_state_isSet = true;
}

bool OAIImportTaskHistory::is_prev_state_Set() const{
    return m_prev_state_isSet;
}

bool OAIImportTaskHistory::is_prev_state_Valid() const{
    return m_prev_state_isValid;
}

bool OAIImportTaskHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prev_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportTaskHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_at_isValid && m_next_state_isValid && m_prev_state_isValid && true;
}

} // namespace OpenAPI
