/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import ChannelGetOrCreateRequest from '../model/ChannelGetOrCreateRequest';
import ChannelStateResponse from '../model/ChannelStateResponse';
import ChannelStopWatchingRequest from '../model/ChannelStopWatchingRequest';
import ChannelsResponse from '../model/ChannelsResponse';
import DeleteChannelResponse from '../model/DeleteChannelResponse';
import DeleteChannelsRequest from '../model/DeleteChannelsRequest';
import DeleteChannelsResponse from '../model/DeleteChannelsResponse';
import ExportChannelsRequest from '../model/ExportChannelsRequest';
import ExportChannelsResponse from '../model/ExportChannelsResponse';
import GetExportChannelsStatusResponse from '../model/GetExportChannelsStatusResponse';
import HideChannelRequest from '../model/HideChannelRequest';
import HideChannelResponse from '../model/HideChannelResponse';
import MarkChannelsReadRequest from '../model/MarkChannelsReadRequest';
import MarkReadRequest from '../model/MarkReadRequest';
import MarkReadResponse from '../model/MarkReadResponse';
import MarkUnreadRequest from '../model/MarkUnreadRequest';
import MembersResponse from '../model/MembersResponse';
import MuteChannelRequest from '../model/MuteChannelRequest';
import MuteChannelResponse from '../model/MuteChannelResponse';
import QueryChannelsRequest from '../model/QueryChannelsRequest';
import QueryMembersRequest from '../model/QueryMembersRequest';
import Response from '../model/Response';
import SearchRequest from '../model/SearchRequest';
import SearchResponse from '../model/SearchResponse';
import ShowChannelRequest from '../model/ShowChannelRequest';
import ShowChannelResponse from '../model/ShowChannelResponse';
import StopWatchingResponse from '../model/StopWatchingResponse';
import SyncRequest from '../model/SyncRequest';
import SyncResponse from '../model/SyncResponse';
import TruncateChannelRequest from '../model/TruncateChannelRequest';
import TruncateChannelResponse from '../model/TruncateChannelResponse';
import UnmuteChannelRequest from '../model/UnmuteChannelRequest';
import UnmuteResponse from '../model/UnmuteResponse';
import UpdateChannelPartialRequest from '../model/UpdateChannelPartialRequest';
import UpdateChannelPartialResponse from '../model/UpdateChannelPartialResponse';
import UpdateChannelRequest from '../model/UpdateChannelRequest';
import UpdateChannelResponse from '../model/UpdateChannelResponse';

/**
* Channels service.
* @module api/ChannelsApi
* @version v80.2.0
*/
export default class ChannelsApi {

    /**
    * Constructs a new ChannelsApi. 
    * @alias module:api/ChannelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteChannel operation.
     * @callback module:api/ChannelsApi~deleteChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete channel
     * Deletes channel  Sends events: - channel.deleted  Required permissions: - DeleteChannel 
     * @param {String} type 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [hardDelete] 
     * @param {module:api/ChannelsApi~deleteChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteChannelResponse}
     */
    deleteChannel(type, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deleteChannel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteChannel");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
        'hard_delete': opts['hardDelete']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteChannelResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannels operation.
     * @callback module:api/ChannelsApi~deleteChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteChannelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes channels asynchronously
     * Allows to delete several channels at once asynchronously  Sends events: - channel.deleted  Required permissions: - DeleteChannel 
     * @param {module:model/DeleteChannelsRequest} deleteChannelsRequest 
     * @param {module:api/ChannelsApi~deleteChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteChannelsResponse}
     */
    deleteChannels(deleteChannelsRequest, callback) {
      let postBody = deleteChannelsRequest;
      // verify the required parameter 'deleteChannelsRequest' is set
      if (deleteChannelsRequest === undefined || deleteChannelsRequest === null) {
        throw new Error("Missing the required parameter 'deleteChannelsRequest' when calling deleteChannels");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteChannelsResponse;
      return this.apiClient.callApi(
        '/channels/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportChannels operation.
     * @callback module:api/ChannelsApi~exportChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportChannelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export channels
     * Exports channel data to JSON file 
     * @param {module:model/ExportChannelsRequest} exportChannelsRequest 
     * @param {module:api/ChannelsApi~exportChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportChannelsResponse}
     */
    exportChannels(exportChannelsRequest, callback) {
      let postBody = exportChannelsRequest;
      // verify the required parameter 'exportChannelsRequest' is set
      if (exportChannelsRequest === undefined || exportChannelsRequest === null) {
        throw new Error("Missing the required parameter 'exportChannelsRequest' when calling exportChannels");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExportChannelsResponse;
      return this.apiClient.callApi(
        '/export_channels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getExportChannelsStatus operation.
     * @callback module:api/ChannelsApi~getExportChannelsStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetExportChannelsStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export channels status
     *  
     * @param {String} id 
     * @param {module:api/ChannelsApi~getExportChannelsStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetExportChannelsStatusResponse}
     */
    getExportChannelsStatus(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getExportChannelsStatus");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetExportChannelsStatusResponse;
      return this.apiClient.callApi(
        '/export_channels/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrCreateChannelType1 operation.
     * @callback module:api/ChannelsApi~getOrCreateChannelType1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelStateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get or create channel (type)
     * This method creates a channel or returns an existing one with matching attributes  Sends events: - channel.created - member.added - member.removed - member.updated - user.watching.start 
     * @param {String} type 
     * @param {module:model/ChannelGetOrCreateRequest} channelGetOrCreateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] 
     * @param {String} [connectionId] 
     * @param {module:api/ChannelsApi~getOrCreateChannelType1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelStateResponse}
     */
    getOrCreateChannelType1(type, channelGetOrCreateRequest, opts, callback) {
      opts = opts || {};
      let postBody = channelGetOrCreateRequest;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getOrCreateChannelType1");
      }
      // verify the required parameter 'channelGetOrCreateRequest' is set
      if (channelGetOrCreateRequest === undefined || channelGetOrCreateRequest === null) {
        throw new Error("Missing the required parameter 'channelGetOrCreateRequest' when calling getOrCreateChannelType1");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
        'client_id': opts['clientId'],
        'connection_id': opts['connectionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChannelStateResponse;
      return this.apiClient.callApi(
        '/channels/{type}/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrCreateChannelTypeId0 operation.
     * @callback module:api/ChannelsApi~getOrCreateChannelTypeId0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelStateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get or create channel (type, id)
     * This method creates a channel or returns an existing one with matching attributes  Sends events: - channel.created - member.added - member.removed - member.updated - user.watching.start 
     * @param {String} type 
     * @param {String} id 
     * @param {module:model/ChannelGetOrCreateRequest} channelGetOrCreateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] 
     * @param {String} [connectionId] 
     * @param {module:api/ChannelsApi~getOrCreateChannelTypeId0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelStateResponse}
     */
    getOrCreateChannelTypeId0(type, id, channelGetOrCreateRequest, opts, callback) {
      opts = opts || {};
      let postBody = channelGetOrCreateRequest;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getOrCreateChannelTypeId0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrCreateChannelTypeId0");
      }
      // verify the required parameter 'channelGetOrCreateRequest' is set
      if (channelGetOrCreateRequest === undefined || channelGetOrCreateRequest === null) {
        throw new Error("Missing the required parameter 'channelGetOrCreateRequest' when calling getOrCreateChannelTypeId0");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
        'client_id': opts['clientId'],
        'connection_id': opts['connectionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChannelStateResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/query', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hideChannel operation.
     * @callback module:api/ChannelsApi~hideChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HideChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Hide channel
     * Marks channel as hidden for current user  Sends events: - channel.hidden  Required permissions: - ReadChannel 
     * @param {String} type 
     * @param {String} id 
     * @param {module:model/HideChannelRequest} hideChannelRequest 
     * @param {module:api/ChannelsApi~hideChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HideChannelResponse}
     */
    hideChannel(type, id, hideChannelRequest, callback) {
      let postBody = hideChannelRequest;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling hideChannel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling hideChannel");
      }
      // verify the required parameter 'hideChannelRequest' is set
      if (hideChannelRequest === undefined || hideChannelRequest === null) {
        throw new Error("Missing the required parameter 'hideChannelRequest' when calling hideChannel");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HideChannelResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/hide', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markChannelsRead operation.
     * @callback module:api/ChannelsApi~markChannelsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarkReadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark channels as read
     * Marks channels as read up to the specific message. If no channels is given, mark all channel as read  Sends events: - message.read  Required permissions: - ReadChannel 
     * @param {module:model/MarkChannelsReadRequest} markChannelsReadRequest 
     * @param {module:api/ChannelsApi~markChannelsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarkReadResponse}
     */
    markChannelsRead(markChannelsReadRequest, callback) {
      let postBody = markChannelsReadRequest;
      // verify the required parameter 'markChannelsReadRequest' is set
      if (markChannelsReadRequest === undefined || markChannelsReadRequest === null) {
        throw new Error("Missing the required parameter 'markChannelsReadRequest' when calling markChannelsRead");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MarkReadResponse;
      return this.apiClient.callApi(
        '/channels/read', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markRead operation.
     * @callback module:api/ChannelsApi~markReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MarkReadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark read
     * Marks channel as read up to the specific message  Sends events: - message.read  Required permissions: - ReadChannel 
     * @param {String} type 
     * @param {String} id 
     * @param {module:model/MarkReadRequest} markReadRequest 
     * @param {module:api/ChannelsApi~markReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarkReadResponse}
     */
    markRead(type, id, markReadRequest, callback) {
      let postBody = markReadRequest;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling markRead");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling markRead");
      }
      // verify the required parameter 'markReadRequest' is set
      if (markReadRequest === undefined || markReadRequest === null) {
        throw new Error("Missing the required parameter 'markReadRequest' when calling markRead");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MarkReadResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/read', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markUnread operation.
     * @callback module:api/ChannelsApi~markUnreadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark unread
     * Marks channel as unread from a specific message  Required permissions: - ReadChannel 
     * @param {String} type 
     * @param {String} id 
     * @param {module:model/MarkUnreadRequest} markUnreadRequest 
     * @param {module:api/ChannelsApi~markUnreadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    markUnread(type, id, markUnreadRequest, callback) {
      let postBody = markUnreadRequest;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling markUnread");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling markUnread");
      }
      // verify the required parameter 'markUnreadRequest' is set
      if (markUnreadRequest === undefined || markUnreadRequest === null) {
        throw new Error("Missing the required parameter 'markUnreadRequest' when calling markUnread");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/unread', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the muteChannel operation.
     * @callback module:api/ChannelsApi~muteChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MuteChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mute channel
     * Mutes channel for user  Sends events: - channel.muted  Required permissions: - MuteChannel 
     * @param {module:model/MuteChannelRequest} muteChannelRequest 
     * @param {module:api/ChannelsApi~muteChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MuteChannelResponse}
     */
    muteChannel(muteChannelRequest, callback) {
      let postBody = muteChannelRequest;
      // verify the required parameter 'muteChannelRequest' is set
      if (muteChannelRequest === undefined || muteChannelRequest === null) {
        throw new Error("Missing the required parameter 'muteChannelRequest' when calling muteChannel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MuteChannelResponse;
      return this.apiClient.callApi(
        '/moderation/mute/channel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryChannels operation.
     * @callback module:api/ChannelsApi~queryChannelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query channels
     * Query channels with filter query  Required permissions: - ReadChannel 
     * @param {module:model/QueryChannelsRequest} queryChannelsRequest Query Channels Request
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] 
     * @param {String} [connectionId] 
     * @param {module:api/ChannelsApi~queryChannelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelsResponse}
     */
    queryChannels(queryChannelsRequest, opts, callback) {
      opts = opts || {};
      let postBody = queryChannelsRequest;
      // verify the required parameter 'queryChannelsRequest' is set
      if (queryChannelsRequest === undefined || queryChannelsRequest === null) {
        throw new Error("Missing the required parameter 'queryChannelsRequest' when calling queryChannels");
      }

      let pathParams = {
      };
      let queryParams = {
        'client_id': opts['clientId'],
        'connection_id': opts['connectionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ChannelsResponse;
      return this.apiClient.callApi(
        '/channels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryMembers operation.
     * @callback module:api/ChannelsApi~queryMembersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MembersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query members
     * Find and filter channel members  Required permissions: - ReadChannel 
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryMembersRequest} [payload] 
     * @param {module:api/ChannelsApi~queryMembersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MembersResponse}
     */
    queryMembers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'payload': opts['payload']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MembersResponse;
      return this.apiClient.callApi(
        '/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the search operation.
     * @callback module:api/ChannelsApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search messages
     * Search messages across channels  Required permissions: - ReadChannel 
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchRequest} [payload] 
     * @param {module:api/ChannelsApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResponse}
     */
    search(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'payload': opts['payload']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchResponse;
      return this.apiClient.callApi(
        '/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the showChannel operation.
     * @callback module:api/ChannelsApi~showChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show channel
     * Shows previously hidden channel  Sends events: - channel.visible 
     * @param {String} type 
     * @param {String} id 
     * @param {module:model/ShowChannelRequest} showChannelRequest 
     * @param {module:api/ChannelsApi~showChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowChannelResponse}
     */
    showChannel(type, id, showChannelRequest, callback) {
      let postBody = showChannelRequest;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling showChannel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling showChannel");
      }
      // verify the required parameter 'showChannelRequest' is set
      if (showChannelRequest === undefined || showChannelRequest === null) {
        throw new Error("Missing the required parameter 'showChannelRequest' when calling showChannel");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShowChannelResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/show', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopWatchingChannel operation.
     * @callback module:api/ChannelsApi~stopWatchingChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopWatchingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop watching channel
     * Call this method to stop receiving channel events  Sends events: - user.watching.stop 
     * @param {String} type 
     * @param {String} id 
     * @param {module:model/ChannelStopWatchingRequest} channelStopWatchingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [clientId] 
     * @param {String} [connectionId] 
     * @param {module:api/ChannelsApi~stopWatchingChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopWatchingResponse}
     */
    stopWatchingChannel(type, id, channelStopWatchingRequest, opts, callback) {
      opts = opts || {};
      let postBody = channelStopWatchingRequest;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling stopWatchingChannel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopWatchingChannel");
      }
      // verify the required parameter 'channelStopWatchingRequest' is set
      if (channelStopWatchingRequest === undefined || channelStopWatchingRequest === null) {
        throw new Error("Missing the required parameter 'channelStopWatchingRequest' when calling stopWatchingChannel");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
        'client_id': opts['clientId'],
        'connection_id': opts['connectionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StopWatchingResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/stop-watching', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sync operation.
     * @callback module:api/ChannelsApi~syncCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SyncResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sync
     * Returns all events happened since client disconnect in specified channels  Required permissions: - ReadChannel 
     * @param {module:model/SyncRequest} syncRequest 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [withInaccessibleCids] 
     * @param {Boolean} [watch] 
     * @param {String} [clientId] 
     * @param {String} [connectionId] 
     * @param {module:api/ChannelsApi~syncCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyncResponse}
     */
    sync(syncRequest, opts, callback) {
      opts = opts || {};
      let postBody = syncRequest;
      // verify the required parameter 'syncRequest' is set
      if (syncRequest === undefined || syncRequest === null) {
        throw new Error("Missing the required parameter 'syncRequest' when calling sync");
      }

      let pathParams = {
      };
      let queryParams = {
        'with_inaccessible_cids': opts['withInaccessibleCids'],
        'watch': opts['watch'],
        'client_id': opts['clientId'],
        'connection_id': opts['connectionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SyncResponse;
      return this.apiClient.callApi(
        '/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the truncateChannel operation.
     * @callback module:api/ChannelsApi~truncateChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TruncateChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Truncate channel
     * Truncates channel  Sends events: - channel.truncated  Required permissions: - DeleteChannel - TruncateChannel 
     * @param {String} type 
     * @param {String} id 
     * @param {module:model/TruncateChannelRequest} truncateChannelRequest 
     * @param {module:api/ChannelsApi~truncateChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TruncateChannelResponse}
     */
    truncateChannel(type, id, truncateChannelRequest, callback) {
      let postBody = truncateChannelRequest;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling truncateChannel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling truncateChannel");
      }
      // verify the required parameter 'truncateChannelRequest' is set
      if (truncateChannelRequest === undefined || truncateChannelRequest === null) {
        throw new Error("Missing the required parameter 'truncateChannelRequest' when calling truncateChannel");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TruncateChannelResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/truncate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unmuteChannel operation.
     * @callback module:api/ChannelsApi~unmuteChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnmuteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unmute channel
     * Unmutes channel for user  Sends events: - channel.unmuted  Required permissions: - MuteChannel 
     * @param {module:model/UnmuteChannelRequest} unmuteChannelRequest 
     * @param {module:api/ChannelsApi~unmuteChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnmuteResponse}
     */
    unmuteChannel(unmuteChannelRequest, callback) {
      let postBody = unmuteChannelRequest;
      // verify the required parameter 'unmuteChannelRequest' is set
      if (unmuteChannelRequest === undefined || unmuteChannelRequest === null) {
        throw new Error("Missing the required parameter 'unmuteChannelRequest' when calling unmuteChannel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UnmuteResponse;
      return this.apiClient.callApi(
        '/moderation/unmute/channel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannel operation.
     * @callback module:api/ChannelsApi~updateChannelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateChannelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update channel
     * Change channel data  Sends events: - channel.updated - member.added - member.removed - member.updated - message.new  Required permissions: - AddOwnChannelMembership - RemoveOwnChannelMembership - UpdateChannel - UpdateChannelCooldown - UpdateChannelFrozen - UpdateChannelMembers 
     * @param {String} type 
     * @param {String} id 
     * @param {module:model/UpdateChannelRequest} updateChannelRequest Channel update request
     * @param {module:api/ChannelsApi~updateChannelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateChannelResponse}
     */
    updateChannel(type, id, updateChannelRequest, callback) {
      let postBody = updateChannelRequest;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling updateChannel");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateChannel");
      }
      // verify the required parameter 'updateChannelRequest' is set
      if (updateChannelRequest === undefined || updateChannelRequest === null) {
        throw new Error("Missing the required parameter 'updateChannelRequest' when calling updateChannel");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateChannelResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannelPartial operation.
     * @callback module:api/ChannelsApi~updateChannelPartialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateChannelPartialResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially update channel
     * Updates certain fields of the channel  Sends events: - channel.updated  Required permissions: - UpdateChannel - UpdateChannelCooldown - UpdateChannelFrozen 
     * @param {String} type 
     * @param {String} id 
     * @param {module:model/UpdateChannelPartialRequest} updateChannelPartialRequest 
     * @param {module:api/ChannelsApi~updateChannelPartialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateChannelPartialResponse}
     */
    updateChannelPartial(type, id, updateChannelPartialRequest, callback) {
      let postBody = updateChannelPartialRequest;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling updateChannelPartial");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateChannelPartial");
      }
      // verify the required parameter 'updateChannelPartialRequest' is set
      if (updateChannelPartialRequest === undefined || updateChannelPartialRequest === null) {
        throw new Error("Missing the required parameter 'updateChannelPartialRequest' when calling updateChannelPartial");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateChannelPartialResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
