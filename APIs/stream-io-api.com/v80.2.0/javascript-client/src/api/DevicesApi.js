/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import CreateDeviceRequest from '../model/CreateDeviceRequest';
import ListDevicesResponse from '../model/ListDevicesResponse';
import Response from '../model/Response';

/**
* Devices service.
* @module api/DevicesApi
* @version v80.2.0
*/
export default class DevicesApi {

    /**
    * Constructs a new DevicesApi. 
    * @alias module:api/DevicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDevice operation.
     * @callback module:api/DevicesApi~createDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create device
     * Adds a new device to a user, if the same device already exists the call will have no effect 
     * @param {module:model/CreateDeviceRequest} createDeviceRequest 
     * @param {module:api/DevicesApi~createDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    createDevice(createDeviceRequest, callback) {
      let postBody = createDeviceRequest;
      // verify the required parameter 'createDeviceRequest' is set
      if (createDeviceRequest === undefined || createDeviceRequest === null) {
        throw new Error("Missing the required parameter 'createDeviceRequest' when calling createDevice");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/devices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDevice operation.
     * @callback module:api/DevicesApi~deleteDeviceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete device
     * Deletes device 
     * @param {Object} opts Optional parameters
     * @param {String} [id] 
     * @param {String} [userId] 
     * @param {module:api/DevicesApi~deleteDeviceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    deleteDevice(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'user_id': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/devices', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDevices operation.
     * @callback module:api/DevicesApi~listDevicesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDevicesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List devices
     * Returns all available devices 
     * @param {Object} opts Optional parameters
     * @param {String} [userId] 
     * @param {module:api/DevicesApi~listDevicesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDevicesResponse}
     */
    listDevices(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'user_id': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDevicesResponse;
      return this.apiClient.callApi(
        '/devices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
