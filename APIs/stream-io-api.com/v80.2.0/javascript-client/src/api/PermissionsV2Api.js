/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import CreateRoleRequest from '../model/CreateRoleRequest';
import CreateRoleResponse from '../model/CreateRoleResponse';
import GetCustomPermissionResponse from '../model/GetCustomPermissionResponse';
import ListPermissionsResponse from '../model/ListPermissionsResponse';
import ListRolesResponse from '../model/ListRolesResponse';
import Response from '../model/Response';

/**
* PermissionsV2 service.
* @module api/PermissionsV2Api
* @version v80.2.0
*/
export default class PermissionsV2Api {

    /**
    * Constructs a new PermissionsV2Api. 
    * @alias module:api/PermissionsV2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createRole operation.
     * @callback module:api/PermissionsV2Api~createRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRoleResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create role
     * Creates custom role 
     * @param {module:model/CreateRoleRequest} createRoleRequest 
     * @param {module:api/PermissionsV2Api~createRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRoleResponse}
     */
    createRole(createRoleRequest, callback) {
      let postBody = createRoleRequest;
      // verify the required parameter 'createRoleRequest' is set
      if (createRoleRequest === undefined || createRoleRequest === null) {
        throw new Error("Missing the required parameter 'createRoleRequest' when calling createRole");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRoleResponse;
      return this.apiClient.callApi(
        '/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRole operation.
     * @callback module:api/PermissionsV2Api~deleteRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete role
     * Deletes custom role 
     * @param {String} name 
     * @param {module:api/PermissionsV2Api~deleteRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    deleteRole(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteRole");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/roles/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPermission operation.
     * @callback module:api/PermissionsV2Api~getPermissionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCustomPermissionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get permission
     * Gets custom permission 
     * @param {String} id 
     * @param {module:api/PermissionsV2Api~getPermissionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCustomPermissionResponse}
     */
    getPermission(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPermission");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCustomPermissionResponse;
      return this.apiClient.callApi(
        '/permissions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPermissions operation.
     * @callback module:api/PermissionsV2Api~listPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPermissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List permissions
     * Lists all available permissions 
     * @param {module:api/PermissionsV2Api~listPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPermissionsResponse}
     */
    listPermissions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPermissionsResponse;
      return this.apiClient.callApi(
        '/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRoles operation.
     * @callback module:api/PermissionsV2Api~listRolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRolesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List roles
     * Lists all available roles 
     * @param {module:api/PermissionsV2Api~listRolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRolesResponse}
     */
    listRoles(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRolesResponse;
      return this.apiClient.callApi(
        '/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
