/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import FileDeleteResponse from '../model/FileDeleteResponse';
import FileUploadResponse from '../model/FileUploadResponse';
import FlagRequest from '../model/FlagRequest';
import FlagResponse from '../model/FlagResponse';
import GetManyMessagesResponse from '../model/GetManyMessagesResponse';
import GetOGResponse from '../model/GetOGResponse';
import GetReactionsResponse from '../model/GetReactionsResponse';
import GetRepliesResponse from '../model/GetRepliesResponse';
import ImageSizeRequest from '../model/ImageSizeRequest';
import ImageUploadResponse from '../model/ImageUploadResponse';
import MarkChannelsReadRequest from '../model/MarkChannelsReadRequest';
import MarkReadRequest from '../model/MarkReadRequest';
import MarkReadResponse from '../model/MarkReadResponse';
import MarkUnreadRequest from '../model/MarkUnreadRequest';
import MessageActionRequest from '../model/MessageActionRequest';
import MessageResponse from '../model/MessageResponse';
import MessageWithPendingMetadataResponse from '../model/MessageWithPendingMetadataResponse';
import OnlyUserIDRequest from '../model/OnlyUserIDRequest';
import QueryMessageFlagsRequest from '../model/QueryMessageFlagsRequest';
import QueryMessageFlagsResponse from '../model/QueryMessageFlagsResponse';
import ReactionRemovalResponse from '../model/ReactionRemovalResponse';
import ReactionResponse from '../model/ReactionResponse';
import Response from '../model/Response';
import SearchRequest from '../model/SearchRequest';
import SearchResponse from '../model/SearchResponse';
import SendMessageRequest from '../model/SendMessageRequest';
import SendReactionRequest from '../model/SendReactionRequest';
import TranslateMessageRequest from '../model/TranslateMessageRequest';
import UpdateMessagePartialRequest from '../model/UpdateMessagePartialRequest';
import UpdateMessageRequest from '../model/UpdateMessageRequest';

/**
* Messages service.
* @module api/MessagesApi
* @version v80.2.0
*/
export default class MessagesApi {

    /**
    * Constructs a new MessagesApi. 
    * @alias module:api/MessagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteFile operation.
     * @callback module:api/MessagesApi~deleteFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete file
     * Deletes previously uploaded file  Required permissions: - DeleteAttachment 
     * @param {String} type Automatically added
     * @param {String} id Automatically added
     * @param {Object} opts Optional parameters
     * @param {String} [url] 
     * @param {module:api/MessagesApi~deleteFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileDeleteResponse}
     */
    deleteFile(type, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deleteFile");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFile");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
        'url': opts['url']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileDeleteResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/file', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImage operation.
     * @callback module:api/MessagesApi~deleteImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete image
     * Deletes previously uploaded image  Required permissions: - DeleteAttachment 
     * @param {String} type Automatically added
     * @param {String} id Automatically added
     * @param {Object} opts Optional parameters
     * @param {String} [url] 
     * @param {module:api/MessagesApi~deleteImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileDeleteResponse}
     */
    deleteImage(type, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deleteImage");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteImage");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
        'url': opts['url']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileDeleteResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/image', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteMessage operation.
     * @callback module:api/MessagesApi~deleteMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete message
     * Deletes message  Sends events: - message.deleted  Required permissions: - DeleteMessage 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [hard] 
     * @param {module:api/MessagesApi~deleteMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageResponse}
     */
    deleteMessage(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteMessage");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'hard': opts['hard']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessageResponse;
      return this.apiClient.callApi(
        '/messages/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReaction operation.
     * @callback module:api/MessagesApi~deleteReactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReactionRemovalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete reaction
     * Removes user reaction from the message  Sends events: - reaction.deleted  Required permissions: - DeleteReaction 
     * @param {String} id 
     * @param {String} type 
     * @param {Object} opts Optional parameters
     * @param {String} [userId] 
     * @param {module:api/MessagesApi~deleteReactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReactionRemovalResponse}
     */
    deleteReaction(id, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteReaction");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deleteReaction");
      }

      let pathParams = {
        'id': id,
        'type': type
      };
      let queryParams = {
        'user_id': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReactionRemovalResponse;
      return this.apiClient.callApi(
        '/messages/{id}/reaction/{type}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flag_0 operation.
     * @callback module:api/MessagesApi~flag_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FlagResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flag
     * Reports message or user for review by moderators  Sends events: - message.flagged - user.flagged  Required permissions: - FlagMessage - FlagUser 
     * @param {module:model/FlagRequest} flagRequest 
     * @param {module:api/MessagesApi~flag_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlagResponse}
     */
    flag_0(flagRequest, callback) {
      let postBody = flagRequest;
      // verify the required parameter 'flagRequest' is set
      if (flagRequest === undefined || flagRequest === null) {
        throw new Error("Missing the required parameter 'flagRequest' when calling flag_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FlagResponse;
      return this.apiClient.callApi(
        '/moderation/flag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getManyMessages operation.
     * @callback module:api/MessagesApi~getManyMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetManyMessagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get many messages
     * Returns list messages found by IDs  Required permissions: - ReadChannel 
     * @param {String} type 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [ids] 
     * @param {module:api/MessagesApi~getManyMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetManyMessagesResponse}
     */
    getManyMessages(type, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getManyMessages");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getManyMessages");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetManyMessagesResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/messages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessage operation.
     * @callback module:api/MessagesApi~getMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageWithPendingMetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get message
     * Returns message by ID  Required permissions: - ReadChannel 
     * @param {String} id 
     * @param {module:api/MessagesApi~getMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageWithPendingMetadataResponse}
     */
    getMessage(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getMessage");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessageWithPendingMetadataResponse;
      return this.apiClient.callApi(
        '/messages/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOG operation.
     * @callback module:api/MessagesApi~getOGCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOGResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get OG
     * Get an OpenGraph attachment for a link 
     * @param {Object} opts Optional parameters
     * @param {String} [url] 
     * @param {module:api/MessagesApi~getOGCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOGResponse}
     */
    getOG(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'url': opts['url']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOGResponse;
      return this.apiClient.callApi(
        '/og', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReactions operation.
     * @callback module:api/MessagesApi~getReactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReactionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get reactions
     * Returns list of reactions of specific message  Required permissions: - ReadChannel 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {Number} [offset] 
     * @param {module:api/MessagesApi~getReactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReactionsResponse}
     */
    getReactions(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReactions");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReactionsResponse;
      return this.apiClient.callApi(
        '/messages/{id}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReplies operation.
     * @callback module:api/MessagesApi~getRepliesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRepliesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get replies
     * Returns replies (thread) of the message  Required permissions: - ReadChannel 
     * @param {String} parentId 
     * @param {Object} opts Optional parameters
     * @param {String} [idGte] 
     * @param {String} [idGt] 
     * @param {String} [idLte] 
     * @param {String} [idLt] 
     * @param {Date} [createdAtAfterOrEqual] 
     * @param {Date} [createdAtAfter] 
     * @param {Date} [createdAtBeforeOrEqual] 
     * @param {Date} [createdAtBefore] 
     * @param {String} [idAround] 
     * @param {Date} [createdAtAround] 
     * @param {module:api/MessagesApi~getRepliesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRepliesResponse}
     */
    getReplies(parentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parentId' is set
      if (parentId === undefined || parentId === null) {
        throw new Error("Missing the required parameter 'parentId' when calling getReplies");
      }

      let pathParams = {
        'parent_id': parentId
      };
      let queryParams = {
        'id_gte': opts['idGte'],
        'id_gt': opts['idGt'],
        'id_lte': opts['idLte'],
        'id_lt': opts['idLt'],
        'created_at_after_or_equal': opts['createdAtAfterOrEqual'],
        'created_at_after': opts['createdAtAfter'],
        'created_at_before_or_equal': opts['createdAtBeforeOrEqual'],
        'created_at_before': opts['createdAtBefore'],
        'id_around': opts['idAround'],
        'created_at_around': opts['createdAtAround']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRepliesResponse;
      return this.apiClient.callApi(
        '/messages/{parent_id}/replies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markChannelsRead_0 operation.
     * @callback module:api/MessagesApi~markChannelsRead_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/MarkReadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark channels as read
     * Marks channels as read up to the specific message. If no channels is given, mark all channel as read  Sends events: - message.read  Required permissions: - ReadChannel 
     * @param {module:model/MarkChannelsReadRequest} markChannelsReadRequest 
     * @param {module:api/MessagesApi~markChannelsRead_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarkReadResponse}
     */
    markChannelsRead_0(markChannelsReadRequest, callback) {
      let postBody = markChannelsReadRequest;
      // verify the required parameter 'markChannelsReadRequest' is set
      if (markChannelsReadRequest === undefined || markChannelsReadRequest === null) {
        throw new Error("Missing the required parameter 'markChannelsReadRequest' when calling markChannelsRead_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MarkReadResponse;
      return this.apiClient.callApi(
        '/channels/read', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markRead_0 operation.
     * @callback module:api/MessagesApi~markRead_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/MarkReadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark read
     * Marks channel as read up to the specific message  Sends events: - message.read  Required permissions: - ReadChannel 
     * @param {String} type 
     * @param {String} id 
     * @param {module:model/MarkReadRequest} markReadRequest 
     * @param {module:api/MessagesApi~markRead_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MarkReadResponse}
     */
    markRead_0(type, id, markReadRequest, callback) {
      let postBody = markReadRequest;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling markRead_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling markRead_0");
      }
      // verify the required parameter 'markReadRequest' is set
      if (markReadRequest === undefined || markReadRequest === null) {
        throw new Error("Missing the required parameter 'markReadRequest' when calling markRead_0");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MarkReadResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/read', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markUnread_0 operation.
     * @callback module:api/MessagesApi~markUnread_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mark unread
     * Marks channel as unread from a specific message  Required permissions: - ReadChannel 
     * @param {String} type 
     * @param {String} id 
     * @param {module:model/MarkUnreadRequest} markUnreadRequest 
     * @param {module:api/MessagesApi~markUnread_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    markUnread_0(type, id, markUnreadRequest, callback) {
      let postBody = markUnreadRequest;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling markUnread_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling markUnread_0");
      }
      // verify the required parameter 'markUnreadRequest' is set
      if (markUnreadRequest === undefined || markUnreadRequest === null) {
        throw new Error("Missing the required parameter 'markUnreadRequest' when calling markUnread_0");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/unread', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryMessageFlags operation.
     * @callback module:api/MessagesApi~queryMessageFlagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryMessageFlagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query Message Flags
     * Find and filter message flags  Required permissions: - ReadMessageFlags 
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryMessageFlagsRequest} [payload] 
     * @param {module:api/MessagesApi~queryMessageFlagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryMessageFlagsResponse}
     */
    queryMessageFlags(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'payload': opts['payload']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueryMessageFlagsResponse;
      return this.apiClient.callApi(
        '/moderation/flags/message', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runMessageAction operation.
     * @callback module:api/MessagesApi~runMessageActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run message command action
     * Executes message command action with given parameters  Sends events: - message.new  Required permissions: - RunMessageAction 
     * @param {String} id 
     * @param {module:model/MessageActionRequest} messageActionRequest 
     * @param {module:api/MessagesApi~runMessageActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageResponse}
     */
    runMessageAction(id, messageActionRequest, callback) {
      let postBody = messageActionRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling runMessageAction");
      }
      // verify the required parameter 'messageActionRequest' is set
      if (messageActionRequest === undefined || messageActionRequest === null) {
        throw new Error("Missing the required parameter 'messageActionRequest' when calling runMessageAction");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MessageResponse;
      return this.apiClient.callApi(
        '/messages/{id}/action', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the search_0 operation.
     * @callback module:api/MessagesApi~search_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search messages
     * Search messages across channels  Required permissions: - ReadChannel 
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchRequest} [payload] 
     * @param {module:api/MessagesApi~search_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResponse}
     */
    search_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'payload': opts['payload']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchResponse;
      return this.apiClient.callApi(
        '/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMessage operation.
     * @callback module:api/MessagesApi~sendMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageWithPendingMetadataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send new message
     * Sends new message to the specified channel  Sends events: - message.new - message.updated  Required permissions: - AddLinks - CreateMessage - PinMessage - SkipChannelCooldown - SkipMessageModeration - UseFrozenChannel 
     * @param {String} type 
     * @param {String} id 
     * @param {module:model/SendMessageRequest} sendMessageRequest Send Message Request
     * @param {module:api/MessagesApi~sendMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageWithPendingMetadataResponse}
     */
    sendMessage(type, id, sendMessageRequest, callback) {
      let postBody = sendMessageRequest;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling sendMessage");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sendMessage");
      }
      // verify the required parameter 'sendMessageRequest' is set
      if (sendMessageRequest === undefined || sendMessageRequest === null) {
        throw new Error("Missing the required parameter 'sendMessageRequest' when calling sendMessage");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MessageWithPendingMetadataResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/message', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendReaction operation.
     * @callback module:api/MessagesApi~sendReactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send reaction
     * Sends reaction to specified message  Sends events: - reaction.new - reaction.updated  Required permissions: - CreateReaction - UseFrozenChannel 
     * @param {String} id 
     * @param {module:model/SendReactionRequest} sendReactionRequest 
     * @param {module:api/MessagesApi~sendReactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReactionResponse}
     */
    sendReaction(id, sendReactionRequest, callback) {
      let postBody = sendReactionRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sendReaction");
      }
      // verify the required parameter 'sendReactionRequest' is set
      if (sendReactionRequest === undefined || sendReactionRequest === null) {
        throw new Error("Missing the required parameter 'sendReactionRequest' when calling sendReaction");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReactionResponse;
      return this.apiClient.callApi(
        '/messages/{id}/reaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the translateMessage operation.
     * @callback module:api/MessagesApi~translateMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Translate message
     * Translates message to a given language using automated translation software  Sends events: - message.updated  Required permissions: - ReadChannel 
     * @param {String} id Automatically added
     * @param {module:model/TranslateMessageRequest} translateMessageRequest 
     * @param {module:api/MessagesApi~translateMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageResponse}
     */
    translateMessage(id, translateMessageRequest, callback) {
      let postBody = translateMessageRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling translateMessage");
      }
      // verify the required parameter 'translateMessageRequest' is set
      if (translateMessageRequest === undefined || translateMessageRequest === null) {
        throw new Error("Missing the required parameter 'translateMessageRequest' when calling translateMessage");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MessageResponse;
      return this.apiClient.callApi(
        '/messages/{id}/translate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unflag_0 operation.
     * @callback module:api/MessagesApi~unflag_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FlagResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unflag
     * Removes previously created user or message flag  Required permissions: - FlagMessage - FlagUser 
     * @param {module:model/FlagRequest} flagRequest 
     * @param {module:api/MessagesApi~unflag_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlagResponse}
     */
    unflag_0(flagRequest, callback) {
      let postBody = flagRequest;
      // verify the required parameter 'flagRequest' is set
      if (flagRequest === undefined || flagRequest === null) {
        throw new Error("Missing the required parameter 'flagRequest' when calling unflag_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FlagResponse;
      return this.apiClient.callApi(
        '/moderation/unflag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMessage operation.
     * @callback module:api/MessagesApi~updateMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update message
     * Updates message with new data  Sends events: - message.updated  Required permissions: - AddLinks - PinMessage - SkipMessageModeration - UpdateMessage 
     * @param {String} id Automatically added
     * @param {module:model/UpdateMessageRequest} updateMessageRequest Update Message Request
     * @param {module:api/MessagesApi~updateMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageResponse}
     */
    updateMessage(id, updateMessageRequest, callback) {
      let postBody = updateMessageRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateMessage");
      }
      // verify the required parameter 'updateMessageRequest' is set
      if (updateMessageRequest === undefined || updateMessageRequest === null) {
        throw new Error("Missing the required parameter 'updateMessageRequest' when calling updateMessage");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MessageResponse;
      return this.apiClient.callApi(
        '/messages/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateMessagePartial operation.
     * @callback module:api/MessagesApi~updateMessagePartialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially message update
     * Updates certain fields of the message  Sends events: - message.updated  Required permissions: - AddLinks - PinMessage - SkipMessageModeration - UpdateMessage 
     * @param {String} id Automatically added
     * @param {module:model/UpdateMessagePartialRequest} updateMessagePartialRequest 
     * @param {module:api/MessagesApi~updateMessagePartialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageResponse}
     */
    updateMessagePartial(id, updateMessagePartialRequest, callback) {
      let postBody = updateMessagePartialRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateMessagePartial");
      }
      // verify the required parameter 'updateMessagePartialRequest' is set
      if (updateMessagePartialRequest === undefined || updateMessagePartialRequest === null) {
        throw new Error("Missing the required parameter 'updateMessagePartialRequest' when calling updateMessagePartial");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MessageResponse;
      return this.apiClient.callApi(
        '/messages/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFile operation.
     * @callback module:api/MessagesApi~uploadFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload file
     * Uploads file  Required permissions: - UploadAttachment 
     * @param {String} type 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [file] file field
     * @param {module:model/OnlyUserIDRequest} [user] 
     * @param {module:api/MessagesApi~uploadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileUploadResponse}
     */
    uploadFile(type, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling uploadFile");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling uploadFile");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file'],
        'user': opts['user']
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FileUploadResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadImage operation.
     * @callback module:api/MessagesApi~uploadImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload image
     * Uploads image  Required permissions: - UploadAttachment 
     * @param {String} type 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [file] 
     * @param {Array.<module:model/ImageSizeRequest>} [uploadSizes] field with JSON-encoded array of image size configurations
     * @param {module:model/OnlyUserIDRequest} [user] 
     * @param {module:api/MessagesApi~uploadImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageUploadResponse}
     */
    uploadImage(type, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling uploadImage");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling uploadImage");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file'],
        'upload_sizes': this.apiClient.buildCollectionParam(opts['uploadSizes'], 'csv'),
        'user': opts['user']
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ImageUploadResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
