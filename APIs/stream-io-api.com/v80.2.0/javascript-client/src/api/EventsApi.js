/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import EventResponse from '../model/EventResponse';
import Response from '../model/Response';
import SendEventRequest from '../model/SendEventRequest';
import SendUserCustomEventRequest from '../model/SendUserCustomEventRequest';
import SyncRequest from '../model/SyncRequest';
import SyncResponse from '../model/SyncResponse';

/**
* Events service.
* @module api/EventsApi
* @version v80.2.0
*/
export default class EventsApi {

    /**
    * Constructs a new EventsApi. 
    * @alias module:api/EventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sendEvent operation.
     * @callback module:api/EventsApi~sendEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EventResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send event
     * Sends event to the channel  Sends events: - any  Required permissions: - SendCustomEvent 
     * @param {String} type 
     * @param {String} id 
     * @param {module:model/SendEventRequest} sendEventRequest 
     * @param {module:api/EventsApi~sendEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EventResponse}
     */
    sendEvent(type, id, sendEventRequest, callback) {
      let postBody = sendEventRequest;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling sendEvent");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sendEvent");
      }
      // verify the required parameter 'sendEventRequest' is set
      if (sendEventRequest === undefined || sendEventRequest === null) {
        throw new Error("Missing the required parameter 'sendEventRequest' when calling sendEvent");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EventResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/event', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendUserCustomEvent operation.
     * @callback module:api/EventsApi~sendUserCustomEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send user event
     * Sends a custom event to a user  Sends events: - custom 
     * @param {String} userId 
     * @param {module:model/SendUserCustomEventRequest} sendUserCustomEventRequest 
     * @param {module:api/EventsApi~sendUserCustomEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    sendUserCustomEvent(userId, sendUserCustomEventRequest, callback) {
      let postBody = sendUserCustomEventRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling sendUserCustomEvent");
      }
      // verify the required parameter 'sendUserCustomEventRequest' is set
      if (sendUserCustomEventRequest === undefined || sendUserCustomEventRequest === null) {
        throw new Error("Missing the required parameter 'sendUserCustomEventRequest' when calling sendUserCustomEvent");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/users/{user_id}/event', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sync_0 operation.
     * @callback module:api/EventsApi~sync_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SyncResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sync
     * Returns all events happened since client disconnect in specified channels  Required permissions: - ReadChannel 
     * @param {module:model/SyncRequest} syncRequest 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [withInaccessibleCids] 
     * @param {Boolean} [watch] 
     * @param {String} [clientId] 
     * @param {String} [connectionId] 
     * @param {module:api/EventsApi~sync_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyncResponse}
     */
    sync_0(syncRequest, opts, callback) {
      opts = opts || {};
      let postBody = syncRequest;
      // verify the required parameter 'syncRequest' is set
      if (syncRequest === undefined || syncRequest === null) {
        throw new Error("Missing the required parameter 'syncRequest' when calling sync_0");
      }

      let pathParams = {
      };
      let queryParams = {
        'with_inaccessible_cids': opts['withInaccessibleCids'],
        'watch': opts['watch'],
        'client_id': opts['clientId'],
        'connection_id': opts['connectionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SyncResponse;
      return this.apiClient.callApi(
        '/sync', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
