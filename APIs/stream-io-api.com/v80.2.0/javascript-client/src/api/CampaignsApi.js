/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import CreateCampaignRequest from '../model/CreateCampaignRequest';
import CreateCampaignResponse from '../model/CreateCampaignResponse';
import CreateSegmentRequest from '../model/CreateSegmentRequest';
import CreateSegmentResponse from '../model/CreateSegmentResponse';
import DeleteCampaignResponse from '../model/DeleteCampaignResponse';
import DeleteSegmentResponse from '../model/DeleteSegmentResponse';
import QueryCampaignsRequest from '../model/QueryCampaignsRequest';
import QueryCampaignsResponse from '../model/QueryCampaignsResponse';
import QueryRecipientsRequest from '../model/QueryRecipientsRequest';
import QueryRecipientsResponse from '../model/QueryRecipientsResponse';
import QuerySegmentsRequest from '../model/QuerySegmentsRequest';
import QuerySegmentsResponse from '../model/QuerySegmentsResponse';
import ResumeCampaignResponse from '../model/ResumeCampaignResponse';
import ScheduleCampaignRequest from '../model/ScheduleCampaignRequest';
import ScheduleCampaignResponse from '../model/ScheduleCampaignResponse';
import StopCampaignResponse from '../model/StopCampaignResponse';
import TestCampaignRequest from '../model/TestCampaignRequest';
import TestCampaignResponse from '../model/TestCampaignResponse';
import UpdateCampaignRequest from '../model/UpdateCampaignRequest';
import UpdateCampaignResponse from '../model/UpdateCampaignResponse';
import UpdateSegmentRequest from '../model/UpdateSegmentRequest';
import UpdateSegmentResponse from '../model/UpdateSegmentResponse';

/**
* Campaigns service.
* @module api/CampaignsApi
* @version v80.2.0
*/
export default class CampaignsApi {

    /**
    * Constructs a new CampaignsApi. 
    * @alias module:api/CampaignsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCampaign operation.
     * @callback module:api/CampaignsApi~createCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create campaign
     * Creates a new campaign 
     * @param {module:model/CreateCampaignRequest} createCampaignRequest 
     * @param {module:api/CampaignsApi~createCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCampaignResponse}
     */
    createCampaign(createCampaignRequest, callback) {
      let postBody = createCampaignRequest;
      // verify the required parameter 'createCampaignRequest' is set
      if (createCampaignRequest === undefined || createCampaignRequest === null) {
        throw new Error("Missing the required parameter 'createCampaignRequest' when calling createCampaign");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCampaignResponse;
      return this.apiClient.callApi(
        '/campaigns', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSegment operation.
     * @callback module:api/CampaignsApi~createSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create segment
     * Create a segment 
     * @param {module:model/CreateSegmentRequest} createSegmentRequest 
     * @param {module:api/CampaignsApi~createSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSegmentResponse}
     */
    createSegment(createSegmentRequest, callback) {
      let postBody = createSegmentRequest;
      // verify the required parameter 'createSegmentRequest' is set
      if (createSegmentRequest === undefined || createSegmentRequest === null) {
        throw new Error("Missing the required parameter 'createSegmentRequest' when calling createSegment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSegmentResponse;
      return this.apiClient.callApi(
        '/segments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCampaign operation.
     * @callback module:api/CampaignsApi~deleteCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete campaign
     * Delete a campaign 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [recipients] 
     * @param {module:api/CampaignsApi~deleteCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteCampaignResponse}
     */
    deleteCampaign(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCampaign");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'recipients': opts['recipients']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteCampaignResponse;
      return this.apiClient.callApi(
        '/campaigns/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSegment operation.
     * @callback module:api/CampaignsApi~deleteSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete segment
     * Delete a segment 
     * @param {String} id 
     * @param {module:api/CampaignsApi~deleteSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteSegmentResponse}
     */
    deleteSegment(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSegment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteSegmentResponse;
      return this.apiClient.callApi(
        '/segments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryCampaigns operation.
     * @callback module:api/CampaignsApi~queryCampaignsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryCampaignsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query campaigns
     * Query campaigns 
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryCampaignsRequest} [payload] 
     * @param {module:api/CampaignsApi~queryCampaignsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryCampaignsResponse}
     */
    queryCampaigns(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'payload': opts['payload']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueryCampaignsResponse;
      return this.apiClient.callApi(
        '/campaigns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryRecipients operation.
     * @callback module:api/CampaignsApi~queryRecipientsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryRecipientsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query recipients
     * Query recipients 
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryRecipientsRequest} [payload] 
     * @param {module:api/CampaignsApi~queryRecipientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryRecipientsResponse}
     */
    queryRecipients(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'payload': opts['payload']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueryRecipientsResponse;
      return this.apiClient.callApi(
        '/recipients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the querySegments operation.
     * @callback module:api/CampaignsApi~querySegmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuerySegmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query segments
     * Query segments 
     * @param {Object} opts Optional parameters
     * @param {module:model/QuerySegmentsRequest} [payload] 
     * @param {module:api/CampaignsApi~querySegmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuerySegmentsResponse}
     */
    querySegments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'payload': opts['payload']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QuerySegmentsResponse;
      return this.apiClient.callApi(
        '/segments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resumeCampaign operation.
     * @callback module:api/CampaignsApi~resumeCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResumeCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume campaign
     * Resume a stopped campaign 
     * @param {String} id 
     * @param {module:api/CampaignsApi~resumeCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResumeCampaignResponse}
     */
    resumeCampaign(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling resumeCampaign");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResumeCampaignResponse;
      return this.apiClient.callApi(
        '/campaigns/{id}/resume', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scheduleCampaign operation.
     * @callback module:api/CampaignsApi~scheduleCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScheduleCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedule campaign
     * Schedule a campaign 
     * @param {String} id 
     * @param {module:model/ScheduleCampaignRequest} scheduleCampaignRequest 
     * @param {module:api/CampaignsApi~scheduleCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScheduleCampaignResponse}
     */
    scheduleCampaign(id, scheduleCampaignRequest, callback) {
      let postBody = scheduleCampaignRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling scheduleCampaign");
      }
      // verify the required parameter 'scheduleCampaignRequest' is set
      if (scheduleCampaignRequest === undefined || scheduleCampaignRequest === null) {
        throw new Error("Missing the required parameter 'scheduleCampaignRequest' when calling scheduleCampaign");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ScheduleCampaignResponse;
      return this.apiClient.callApi(
        '/campaigns/{id}/schedule', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopCampaign operation.
     * @callback module:api/CampaignsApi~stopCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop campaign
     * Stop a running campaign 
     * @param {String} id 
     * @param {module:api/CampaignsApi~stopCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopCampaignResponse}
     */
    stopCampaign(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling stopCampaign");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StopCampaignResponse;
      return this.apiClient.callApi(
        '/campaigns/{id}/stop', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the testCampaign operation.
     * @callback module:api/CampaignsApi~testCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Test campaign
     * Test a campaign 
     * @param {String} id 
     * @param {module:model/TestCampaignRequest} testCampaignRequest 
     * @param {module:api/CampaignsApi~testCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestCampaignResponse}
     */
    testCampaign(id, testCampaignRequest, callback) {
      let postBody = testCampaignRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling testCampaign");
      }
      // verify the required parameter 'testCampaignRequest' is set
      if (testCampaignRequest === undefined || testCampaignRequest === null) {
        throw new Error("Missing the required parameter 'testCampaignRequest' when calling testCampaign");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TestCampaignResponse;
      return this.apiClient.callApi(
        '/campaigns/{id}/test', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCampaign operation.
     * @callback module:api/CampaignsApi~updateCampaignCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCampaignResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update campaign
     * Update an existing campaign 
     * @param {String} id 
     * @param {module:model/UpdateCampaignRequest} updateCampaignRequest 
     * @param {module:api/CampaignsApi~updateCampaignCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCampaignResponse}
     */
    updateCampaign(id, updateCampaignRequest, callback) {
      let postBody = updateCampaignRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCampaign");
      }
      // verify the required parameter 'updateCampaignRequest' is set
      if (updateCampaignRequest === undefined || updateCampaignRequest === null) {
        throw new Error("Missing the required parameter 'updateCampaignRequest' when calling updateCampaign");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateCampaignResponse;
      return this.apiClient.callApi(
        '/campaigns/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSegment operation.
     * @callback module:api/CampaignsApi~updateSegmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSegmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update segment
     * Update an existing segment 
     * @param {String} id 
     * @param {module:model/UpdateSegmentRequest} updateSegmentRequest 
     * @param {module:api/CampaignsApi~updateSegmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSegmentResponse}
     */
    updateSegment(id, updateSegmentRequest, callback) {
      let postBody = updateSegmentRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSegment");
      }
      // verify the required parameter 'updateSegmentRequest' is set
      if (updateSegmentRequest === undefined || updateSegmentRequest === null) {
        throw new Error("Missing the required parameter 'updateSegmentRequest' when calling updateSegment");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSegmentResponse;
      return this.apiClient.callApi(
        '/segments/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
