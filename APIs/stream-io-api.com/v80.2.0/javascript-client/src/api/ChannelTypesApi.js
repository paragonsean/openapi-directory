/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import CreateChannelTypeRequest from '../model/CreateChannelTypeRequest';
import CreateChannelTypeResponse from '../model/CreateChannelTypeResponse';
import ListChannelTypesResponse from '../model/ListChannelTypesResponse';
import Response from '../model/Response';
import UpdateChannelTypeRequest from '../model/UpdateChannelTypeRequest';
import UpdateChannelTypeResponse from '../model/UpdateChannelTypeResponse';

/**
* ChannelTypes service.
* @module api/ChannelTypesApi
* @version v80.2.0
*/
export default class ChannelTypesApi {

    /**
    * Constructs a new ChannelTypesApi. 
    * @alias module:api/ChannelTypesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createChannelType_0 operation.
     * @callback module:api/ChannelTypesApi~createChannelType_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateChannelTypeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create channel type
     * Creates new channel type 
     * @param {module:model/CreateChannelTypeRequest} createChannelTypeRequest 
     * @param {module:api/ChannelTypesApi~createChannelType_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateChannelTypeResponse}
     */
    createChannelType_0(createChannelTypeRequest, callback) {
      let postBody = createChannelTypeRequest;
      // verify the required parameter 'createChannelTypeRequest' is set
      if (createChannelTypeRequest === undefined || createChannelTypeRequest === null) {
        throw new Error("Missing the required parameter 'createChannelTypeRequest' when calling createChannelType_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateChannelTypeResponse;
      return this.apiClient.callApi(
        '/channeltypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannelType_0 operation.
     * @callback module:api/ChannelTypesApi~deleteChannelType_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete channel type
     * Deletes channel type 
     * @param {String} name 
     * @param {module:api/ChannelTypesApi~deleteChannelType_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    deleteChannelType_0(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteChannelType_0");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/channeltypes/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelType_0 operation.
     * @callback module:api/ChannelTypesApi~getChannelType_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get channel type
     * Gets channel type 
     * @param {String} name 
     * @param {module:api/ChannelTypesApi~getChannelType_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    getChannelType_0(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getChannelType_0");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/channeltypes/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannelTypes_0 operation.
     * @callback module:api/ChannelTypesApi~listChannelTypes_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChannelTypesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List channel types
     * Lists all available channel types 
     * @param {module:api/ChannelTypesApi~listChannelTypes_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChannelTypesResponse}
     */
    listChannelTypes_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChannelTypesResponse;
      return this.apiClient.callApi(
        '/channeltypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannelType_0 operation.
     * @callback module:api/ChannelTypesApi~updateChannelType_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateChannelTypeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update channel type
     * Updates channel type 
     * @param {String} name 
     * @param {module:model/UpdateChannelTypeRequest} updateChannelTypeRequest 
     * @param {module:api/ChannelTypesApi~updateChannelType_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateChannelTypeResponse}
     */
    updateChannelType_0(name, updateChannelTypeRequest, callback) {
      let postBody = updateChannelTypeRequest;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateChannelType_0");
      }
      // verify the required parameter 'updateChannelTypeRequest' is set
      if (updateChannelTypeRequest === undefined || updateChannelTypeRequest === null) {
        throw new Error("Missing the required parameter 'updateChannelTypeRequest' when calling updateChannelType_0");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateChannelTypeResponse;
      return this.apiClient.callApi(
        '/channeltypes/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
