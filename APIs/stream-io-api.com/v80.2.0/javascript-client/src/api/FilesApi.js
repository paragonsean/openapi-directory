/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import FileDeleteResponse from '../model/FileDeleteResponse';
import FileUploadResponse from '../model/FileUploadResponse';
import ImageSizeRequest from '../model/ImageSizeRequest';
import ImageUploadResponse from '../model/ImageUploadResponse';
import OnlyUserIDRequest from '../model/OnlyUserIDRequest';

/**
* Files service.
* @module api/FilesApi
* @version v80.2.0
*/
export default class FilesApi {

    /**
    * Constructs a new FilesApi. 
    * @alias module:api/FilesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteFile_0 operation.
     * @callback module:api/FilesApi~deleteFile_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FileDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete file
     * Deletes previously uploaded file  Required permissions: - DeleteAttachment 
     * @param {String} type Automatically added
     * @param {String} id Automatically added
     * @param {Object} opts Optional parameters
     * @param {String} [url] 
     * @param {module:api/FilesApi~deleteFile_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileDeleteResponse}
     */
    deleteFile_0(type, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deleteFile_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteFile_0");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
        'url': opts['url']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileDeleteResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/file', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImage_0 operation.
     * @callback module:api/FilesApi~deleteImage_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FileDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete image
     * Deletes previously uploaded image  Required permissions: - DeleteAttachment 
     * @param {String} type Automatically added
     * @param {String} id Automatically added
     * @param {Object} opts Optional parameters
     * @param {String} [url] 
     * @param {module:api/FilesApi~deleteImage_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileDeleteResponse}
     */
    deleteImage_0(type, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deleteImage_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteImage_0");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
        'url': opts['url']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FileDeleteResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/image', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFile_0 operation.
     * @callback module:api/FilesApi~uploadFile_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FileUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload file
     * Uploads file  Required permissions: - UploadAttachment 
     * @param {String} type 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [file] file field
     * @param {module:model/OnlyUserIDRequest} [user] 
     * @param {module:api/FilesApi~uploadFile_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileUploadResponse}
     */
    uploadFile_0(type, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling uploadFile_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling uploadFile_0");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file'],
        'user': opts['user']
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = FileUploadResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/file', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadImage_0 operation.
     * @callback module:api/FilesApi~uploadImage_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageUploadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload image
     * Uploads image  Required permissions: - UploadAttachment 
     * @param {String} type 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {String} [file] 
     * @param {Array.<module:model/ImageSizeRequest>} [uploadSizes] field with JSON-encoded array of image size configurations
     * @param {module:model/OnlyUserIDRequest} [user] 
     * @param {module:api/FilesApi~uploadImage_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageUploadResponse}
     */
    uploadImage_0(type, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling uploadImage_0");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling uploadImage_0");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': opts['file'],
        'upload_sizes': this.apiClient.buildCollectionParam(opts['uploadSizes'], 'csv'),
        'user': opts['user']
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ImageUploadResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
