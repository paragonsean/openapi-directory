/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import DeactivateUserRequest from '../model/DeactivateUserRequest';
import DeactivateUserResponse from '../model/DeactivateUserResponse';
import DeactivateUsersRequest from '../model/DeactivateUsersRequest';
import DeactivateUsersResponse from '../model/DeactivateUsersResponse';
import DeleteChannelsRequest from '../model/DeleteChannelsRequest';
import DeleteChannelsResponse from '../model/DeleteChannelsResponse';
import DeleteUserResponse from '../model/DeleteUserResponse';
import DeleteUsersRequest from '../model/DeleteUsersRequest';
import DeleteUsersResponse from '../model/DeleteUsersResponse';
import ReactivateUserRequest from '../model/ReactivateUserRequest';
import ReactivateUserResponse from '../model/ReactivateUserResponse';
import ReactivateUsersRequest from '../model/ReactivateUsersRequest';
import ReactivateUsersResponse from '../model/ReactivateUsersResponse';

/**
* GDPR service.
* @module api/GDPRApi
* @version v80.2.0
*/
export default class GDPRApi {

    /**
    * Constructs a new GDPRApi. 
    * @alias module:api/GDPRApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deactivateUser_0 operation.
     * @callback module:api/GDPRApi~deactivateUser_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DeactivateUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate user
     * Deactivates user with possibility to activate it back  Sends events: - user.deactivated 
     * @param {String} userId 
     * @param {module:model/DeactivateUserRequest} deactivateUserRequest 
     * @param {module:api/GDPRApi~deactivateUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeactivateUserResponse}
     */
    deactivateUser_0(userId, deactivateUserRequest, callback) {
      let postBody = deactivateUserRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deactivateUser_0");
      }
      // verify the required parameter 'deactivateUserRequest' is set
      if (deactivateUserRequest === undefined || deactivateUserRequest === null) {
        throw new Error("Missing the required parameter 'deactivateUserRequest' when calling deactivateUser_0");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeactivateUserResponse;
      return this.apiClient.callApi(
        '/users/{user_id}/deactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deactivateUsers_0 operation.
     * @callback module:api/GDPRApi~deactivateUsers_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DeactivateUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate users
     * Deactivate users in batches  Sends events: - user.deactivated 
     * @param {module:model/DeactivateUsersRequest} deactivateUsersRequest 
     * @param {module:api/GDPRApi~deactivateUsers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeactivateUsersResponse}
     */
    deactivateUsers_0(deactivateUsersRequest, callback) {
      let postBody = deactivateUsersRequest;
      // verify the required parameter 'deactivateUsersRequest' is set
      if (deactivateUsersRequest === undefined || deactivateUsersRequest === null) {
        throw new Error("Missing the required parameter 'deactivateUsersRequest' when calling deactivateUsers_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeactivateUsersResponse;
      return this.apiClient.callApi(
        '/users/deactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannels_0 operation.
     * @callback module:api/GDPRApi~deleteChannels_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteChannelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes channels asynchronously
     * Allows to delete several channels at once asynchronously  Sends events: - channel.deleted  Required permissions: - DeleteChannel 
     * @param {module:model/DeleteChannelsRequest} deleteChannelsRequest 
     * @param {module:api/GDPRApi~deleteChannels_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteChannelsResponse}
     */
    deleteChannels_0(deleteChannelsRequest, callback) {
      let postBody = deleteChannelsRequest;
      // verify the required parameter 'deleteChannelsRequest' is set
      if (deleteChannelsRequest === undefined || deleteChannelsRequest === null) {
        throw new Error("Missing the required parameter 'deleteChannelsRequest' when calling deleteChannels_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteChannelsResponse;
      return this.apiClient.callApi(
        '/channels/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser_0 operation.
     * @callback module:api/GDPRApi~deleteUser_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete user
     * Deletes user and optionally all their belongings. The Endpoint is deprecated, please use 'Delete Users' endpoint instead  Sends events: - channel.deleted - message.deleted - user.deleted 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [markMessagesDeleted] 
     * @param {Boolean} [hardDelete] 
     * @param {Boolean} [deleteConversationChannels] 
     * @param {module:api/GDPRApi~deleteUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteUserResponse}
     */
    deleteUser_0(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUser_0");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'mark_messages_deleted': opts['markMessagesDeleted'],
        'hard_delete': opts['hardDelete'],
        'delete_conversation_channels': opts['deleteConversationChannels']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteUserResponse;
      return this.apiClient.callApi(
        '/users/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUsers_0 operation.
     * @callback module:api/GDPRApi~deleteUsers_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Users
     * Deletes users and optionally all their belongings asynchronously.  Sends events: - channel.deleted - user.deleted 
     * @param {module:model/DeleteUsersRequest} deleteUsersRequest 
     * @param {module:api/GDPRApi~deleteUsers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteUsersResponse}
     */
    deleteUsers_0(deleteUsersRequest, callback) {
      let postBody = deleteUsersRequest;
      // verify the required parameter 'deleteUsersRequest' is set
      if (deleteUsersRequest === undefined || deleteUsersRequest === null) {
        throw new Error("Missing the required parameter 'deleteUsersRequest' when calling deleteUsers_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteUsersResponse;
      return this.apiClient.callApi(
        '/users/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactivateUser_0 operation.
     * @callback module:api/GDPRApi~reactivateUser_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ReactivateUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reactivate user
     * Activates user who's been deactivated previously  Sends events: - user.reactivated 
     * @param {String} userId 
     * @param {module:model/ReactivateUserRequest} reactivateUserRequest 
     * @param {module:api/GDPRApi~reactivateUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReactivateUserResponse}
     */
    reactivateUser_0(userId, reactivateUserRequest, callback) {
      let postBody = reactivateUserRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling reactivateUser_0");
      }
      // verify the required parameter 'reactivateUserRequest' is set
      if (reactivateUserRequest === undefined || reactivateUserRequest === null) {
        throw new Error("Missing the required parameter 'reactivateUserRequest' when calling reactivateUser_0");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReactivateUserResponse;
      return this.apiClient.callApi(
        '/users/{user_id}/reactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactivateUsers_0 operation.
     * @callback module:api/GDPRApi~reactivateUsers_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ReactivateUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reactivate users
     * Reactivate users in batches  Sends events: - user.reactivated 
     * @param {module:model/ReactivateUsersRequest} reactivateUsersRequest 
     * @param {module:api/GDPRApi~reactivateUsers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReactivateUsersResponse}
     */
    reactivateUsers_0(reactivateUsersRequest, callback) {
      let postBody = reactivateUsersRequest;
      // verify the required parameter 'reactivateUsersRequest' is set
      if (reactivateUsersRequest === undefined || reactivateUsersRequest === null) {
        throw new Error("Missing the required parameter 'reactivateUsersRequest' when calling reactivateUsers_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReactivateUsersResponse;
      return this.apiClient.callApi(
        '/users/reactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
