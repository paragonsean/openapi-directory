/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import BanRequest from '../model/BanRequest';
import ConnectRequest from '../model/ConnectRequest';
import DeactivateUserRequest from '../model/DeactivateUserRequest';
import DeactivateUserResponse from '../model/DeactivateUserResponse';
import DeactivateUsersRequest from '../model/DeactivateUsersRequest';
import DeactivateUsersResponse from '../model/DeactivateUsersResponse';
import DeleteUserResponse from '../model/DeleteUserResponse';
import DeleteUsersRequest from '../model/DeleteUsersRequest';
import DeleteUsersResponse from '../model/DeleteUsersResponse';
import ExportUserResponse from '../model/ExportUserResponse';
import ExportUsersRequest from '../model/ExportUsersRequest';
import ExportUsersResponse from '../model/ExportUsersResponse';
import FlagRequest from '../model/FlagRequest';
import FlagResponse from '../model/FlagResponse';
import GuestRequest from '../model/GuestRequest';
import GuestResponse from '../model/GuestResponse';
import MuteUserRequest from '../model/MuteUserRequest';
import MuteUserResponse from '../model/MuteUserResponse';
import QueryBannedUsersRequest from '../model/QueryBannedUsersRequest';
import QueryBannedUsersResponse from '../model/QueryBannedUsersResponse';
import QueryUsersRequest from '../model/QueryUsersRequest';
import ReactivateUserRequest from '../model/ReactivateUserRequest';
import ReactivateUserResponse from '../model/ReactivateUserResponse';
import ReactivateUsersRequest from '../model/ReactivateUsersRequest';
import ReactivateUsersResponse from '../model/ReactivateUsersResponse';
import Response from '../model/Response';
import RestoreUsersRequest from '../model/RestoreUsersRequest';
import UnmuteResponse from '../model/UnmuteResponse';
import UnmuteUserRequest from '../model/UnmuteUserRequest';
import UpdateUserPartialRequest from '../model/UpdateUserPartialRequest';
import UpdateUsersRequest from '../model/UpdateUsersRequest';
import UpdateUsersResponse from '../model/UpdateUsersResponse';
import UsersResponse from '../model/UsersResponse';

/**
* Users service.
* @module api/UsersApi
* @version v80.2.0
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ban operation.
     * @callback module:api/UsersApi~banCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ban user
     * Restricts user activity either in specific channel or globally  Sends events: - user.banned  Required permissions: - BanChannelMember - BanUser 
     * @param {module:model/BanRequest} banRequest 
     * @param {module:api/UsersApi~banCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    ban(banRequest, callback) {
      let postBody = banRequest;
      // verify the required parameter 'banRequest' is set
      if (banRequest === undefined || banRequest === null) {
        throw new Error("Missing the required parameter 'banRequest' when calling ban");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/moderation/ban', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the connect operation.
     * @callback module:api/UsersApi~connectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Connect (WebSocket)
     * Establishes WebSocket connection for user  Sends events: - user.updated 
     * @param {Object} opts Optional parameters
     * @param {module:model/ConnectRequest} [json] 
     * @param {module:api/UsersApi~connectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    connect(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'json': opts['json']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/connect', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGuest operation.
     * @callback module:api/UsersApi~createGuestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GuestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create guest
     * Creates guest user 
     * @param {module:model/GuestRequest} guestRequest 
     * @param {module:api/UsersApi~createGuestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GuestResponse}
     */
    createGuest(guestRequest, callback) {
      let postBody = guestRequest;
      // verify the required parameter 'guestRequest' is set
      if (guestRequest === undefined || guestRequest === null) {
        throw new Error("Missing the required parameter 'guestRequest' when calling createGuest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GuestResponse;
      return this.apiClient.callApi(
        '/guest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deactivateUser operation.
     * @callback module:api/UsersApi~deactivateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeactivateUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate user
     * Deactivates user with possibility to activate it back  Sends events: - user.deactivated 
     * @param {String} userId 
     * @param {module:model/DeactivateUserRequest} deactivateUserRequest 
     * @param {module:api/UsersApi~deactivateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeactivateUserResponse}
     */
    deactivateUser(userId, deactivateUserRequest, callback) {
      let postBody = deactivateUserRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deactivateUser");
      }
      // verify the required parameter 'deactivateUserRequest' is set
      if (deactivateUserRequest === undefined || deactivateUserRequest === null) {
        throw new Error("Missing the required parameter 'deactivateUserRequest' when calling deactivateUser");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeactivateUserResponse;
      return this.apiClient.callApi(
        '/users/{user_id}/deactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deactivateUsers operation.
     * @callback module:api/UsersApi~deactivateUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeactivateUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate users
     * Deactivate users in batches  Sends events: - user.deactivated 
     * @param {module:model/DeactivateUsersRequest} deactivateUsersRequest 
     * @param {module:api/UsersApi~deactivateUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeactivateUsersResponse}
     */
    deactivateUsers(deactivateUsersRequest, callback) {
      let postBody = deactivateUsersRequest;
      // verify the required parameter 'deactivateUsersRequest' is set
      if (deactivateUsersRequest === undefined || deactivateUsersRequest === null) {
        throw new Error("Missing the required parameter 'deactivateUsersRequest' when calling deactivateUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeactivateUsersResponse;
      return this.apiClient.callApi(
        '/users/deactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/UsersApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete user
     * Deletes user and optionally all their belongings. The Endpoint is deprecated, please use 'Delete Users' endpoint instead  Sends events: - channel.deleted - message.deleted - user.deleted 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [markMessagesDeleted] 
     * @param {Boolean} [hardDelete] 
     * @param {Boolean} [deleteConversationChannels] 
     * @param {module:api/UsersApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteUserResponse}
     */
    deleteUser(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUser");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'mark_messages_deleted': opts['markMessagesDeleted'],
        'hard_delete': opts['hardDelete'],
        'delete_conversation_channels': opts['deleteConversationChannels']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteUserResponse;
      return this.apiClient.callApi(
        '/users/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUsers operation.
     * @callback module:api/UsersApi~deleteUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Users
     * Deletes users and optionally all their belongings asynchronously.  Sends events: - channel.deleted - user.deleted 
     * @param {module:model/DeleteUsersRequest} deleteUsersRequest 
     * @param {module:api/UsersApi~deleteUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteUsersResponse}
     */
    deleteUsers(deleteUsersRequest, callback) {
      let postBody = deleteUsersRequest;
      // verify the required parameter 'deleteUsersRequest' is set
      if (deleteUsersRequest === undefined || deleteUsersRequest === null) {
        throw new Error("Missing the required parameter 'deleteUsersRequest' when calling deleteUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteUsersResponse;
      return this.apiClient.callApi(
        '/users/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportUser operation.
     * @callback module:api/UsersApi~exportUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export users
     * Exports user profile, reactions and messages for list of given users 
     * @param {module:model/ExportUsersRequest} exportUsersRequest 
     * @param {module:api/UsersApi~exportUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportUsersResponse}
     */
    exportUser(exportUsersRequest, callback) {
      let postBody = exportUsersRequest;
      // verify the required parameter 'exportUsersRequest' is set
      if (exportUsersRequest === undefined || exportUsersRequest === null) {
        throw new Error("Missing the required parameter 'exportUsersRequest' when calling exportUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExportUsersResponse;
      return this.apiClient.callApi(
        '/export/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flag_1 operation.
     * @callback module:api/UsersApi~flag_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FlagResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flag
     * Reports message or user for review by moderators  Sends events: - message.flagged - user.flagged  Required permissions: - FlagMessage - FlagUser 
     * @param {module:model/FlagRequest} flagRequest 
     * @param {module:api/UsersApi~flag_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlagResponse}
     */
    flag_1(flagRequest, callback) {
      let postBody = flagRequest;
      // verify the required parameter 'flagRequest' is set
      if (flagRequest === undefined || flagRequest === null) {
        throw new Error("Missing the required parameter 'flagRequest' when calling flag_1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FlagResponse;
      return this.apiClient.callApi(
        '/moderation/flag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the longPoll operation.
     * @callback module:api/UsersApi~longPollCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Long Poll (Transport)
     * WebSocket fallback transport endpoint  Sends events: - user.updated 
     * @param {Object} opts Optional parameters
     * @param {module:model/ConnectRequest} [json] 
     * @param {String} [connectionId] 
     * @param {module:api/UsersApi~longPollCallback} callback The callback function, accepting three arguments: error, data, response
     */
    longPoll(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'json': opts['json'],
        'connection_id': opts['connectionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/longpoll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the muteUser operation.
     * @callback module:api/UsersApi~muteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MuteUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mute user
     * Mutes one or several users  Sends events: - user.muted  Required permissions: - MuteUser 
     * @param {module:model/MuteUserRequest} muteUserRequest 
     * @param {module:api/UsersApi~muteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MuteUserResponse}
     */
    muteUser(muteUserRequest, callback) {
      let postBody = muteUserRequest;
      // verify the required parameter 'muteUserRequest' is set
      if (muteUserRequest === undefined || muteUserRequest === null) {
        throw new Error("Missing the required parameter 'muteUserRequest' when calling muteUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MuteUserResponse;
      return this.apiClient.callApi(
        '/moderation/mute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryBannedUsers operation.
     * @callback module:api/UsersApi~queryBannedUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryBannedUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query Banned Users
     * Find and filter channel scoped or global user bans  Required permissions: - ReadChannel 
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryBannedUsersRequest} [payload] 
     * @param {module:api/UsersApi~queryBannedUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryBannedUsersResponse}
     */
    queryBannedUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'payload': opts['payload']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueryBannedUsersResponse;
      return this.apiClient.callApi(
        '/query_banned_users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryUsers operation.
     * @callback module:api/UsersApi~queryUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query users
     * Find and filter users  Required permissions: - SearchUser 
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryUsersRequest} [payload] 
     * @param {module:api/UsersApi~queryUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsersResponse}
     */
    queryUsers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'payload': opts['payload']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsersResponse;
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactivateUser operation.
     * @callback module:api/UsersApi~reactivateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReactivateUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reactivate user
     * Activates user who's been deactivated previously  Sends events: - user.reactivated 
     * @param {String} userId 
     * @param {module:model/ReactivateUserRequest} reactivateUserRequest 
     * @param {module:api/UsersApi~reactivateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReactivateUserResponse}
     */
    reactivateUser(userId, reactivateUserRequest, callback) {
      let postBody = reactivateUserRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling reactivateUser");
      }
      // verify the required parameter 'reactivateUserRequest' is set
      if (reactivateUserRequest === undefined || reactivateUserRequest === null) {
        throw new Error("Missing the required parameter 'reactivateUserRequest' when calling reactivateUser");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReactivateUserResponse;
      return this.apiClient.callApi(
        '/users/{user_id}/reactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactivateUsers operation.
     * @callback module:api/UsersApi~reactivateUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReactivateUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reactivate users
     * Reactivate users in batches  Sends events: - user.reactivated 
     * @param {module:model/ReactivateUsersRequest} reactivateUsersRequest 
     * @param {module:api/UsersApi~reactivateUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReactivateUsersResponse}
     */
    reactivateUsers(reactivateUsersRequest, callback) {
      let postBody = reactivateUsersRequest;
      // verify the required parameter 'reactivateUsersRequest' is set
      if (reactivateUsersRequest === undefined || reactivateUsersRequest === null) {
        throw new Error("Missing the required parameter 'reactivateUsersRequest' when calling reactivateUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReactivateUsersResponse;
      return this.apiClient.callApi(
        '/users/reactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restoreUsers operation.
     * @callback module:api/UsersApi~restoreUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restore users
     * Restore soft deleted users 
     * @param {module:model/RestoreUsersRequest} restoreUsersRequest 
     * @param {module:api/UsersApi~restoreUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    restoreUsers(restoreUsersRequest, callback) {
      let postBody = restoreUsersRequest;
      // verify the required parameter 'restoreUsersRequest' is set
      if (restoreUsersRequest === undefined || restoreUsersRequest === null) {
        throw new Error("Missing the required parameter 'restoreUsersRequest' when calling restoreUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/users/restore', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unban operation.
     * @callback module:api/UsersApi~unbanCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unban user
     * Removes previously applied ban  Sends events: - user.unbanned  Required permissions: - BanChannelMember - BanUser 
     * @param {Object} opts Optional parameters
     * @param {String} [targetUserId] 
     * @param {String} [type] 
     * @param {String} [id] 
     * @param {module:api/UsersApi~unbanCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    unban(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'target_user_id': opts['targetUserId'],
        'type': opts['type'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/moderation/ban', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unflag_1 operation.
     * @callback module:api/UsersApi~unflag_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FlagResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unflag
     * Removes previously created user or message flag  Required permissions: - FlagMessage - FlagUser 
     * @param {module:model/FlagRequest} flagRequest 
     * @param {module:api/UsersApi~unflag_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlagResponse}
     */
    unflag_1(flagRequest, callback) {
      let postBody = flagRequest;
      // verify the required parameter 'flagRequest' is set
      if (flagRequest === undefined || flagRequest === null) {
        throw new Error("Missing the required parameter 'flagRequest' when calling unflag_1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FlagResponse;
      return this.apiClient.callApi(
        '/moderation/unflag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unmuteUser operation.
     * @callback module:api/UsersApi~unmuteUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnmuteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unmute user
     * Unmutes previously muted user  Sends events: - user.unmuted  Required permissions: - MuteUser 
     * @param {module:model/UnmuteUserRequest} unmuteUserRequest 
     * @param {module:api/UsersApi~unmuteUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnmuteResponse}
     */
    unmuteUser(unmuteUserRequest, callback) {
      let postBody = unmuteUserRequest;
      // verify the required parameter 'unmuteUserRequest' is set
      if (unmuteUserRequest === undefined || unmuteUserRequest === null) {
        throw new Error("Missing the required parameter 'unmuteUserRequest' when calling unmuteUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UnmuteResponse;
      return this.apiClient.callApi(
        '/moderation/unmute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUsers operation.
     * @callback module:api/UsersApi~updateUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upsert users
     * Update or create users in bulk  Sends events: - user.updated 
     * @param {module:model/UpdateUsersRequest} updateUsersRequest 
     * @param {module:api/UsersApi~updateUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateUsersResponse}
     */
    updateUsers(updateUsersRequest, callback) {
      let postBody = updateUsersRequest;
      // verify the required parameter 'updateUsersRequest' is set
      if (updateUsersRequest === undefined || updateUsersRequest === null) {
        throw new Error("Missing the required parameter 'updateUsersRequest' when calling updateUsers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateUsersResponse;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUsersPartial operation.
     * @callback module:api/UsersApi~updateUsersPartialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Partially update user
     * Updates certain fields of the user  Sends events: - user.presence.changed - user.updated 
     * @param {module:model/UpdateUserPartialRequest} updateUserPartialRequest 
     * @param {module:api/UsersApi~updateUsersPartialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateUsersResponse}
     */
    updateUsersPartial(updateUserPartialRequest, callback) {
      let postBody = updateUserPartialRequest;
      // verify the required parameter 'updateUserPartialRequest' is set
      if (updateUserPartialRequest === undefined || updateUserPartialRequest === null) {
        throw new Error("Missing the required parameter 'updateUserPartialRequest' when calling updateUsersPartial");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateUsersResponse;
      return this.apiClient.callApi(
        '/users', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersUserIdExportGet operation.
     * @callback module:api/UsersApi~usersUserIdExportGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export user
     * Exports the user's profile, reactions and messages. Raises an error if a user has more than 10k messages or reactions 
     * @param {String} userId 
     * @param {module:api/UsersApi~usersUserIdExportGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportUserResponse}
     */
    usersUserIdExportGet(userId, callback) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersUserIdExportGet");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportUserResponse;
      return this.apiClient.callApi(
        '/users/{user_id}/export', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
