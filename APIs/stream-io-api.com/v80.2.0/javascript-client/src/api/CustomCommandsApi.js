/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import CreateCommandRequest from '../model/CreateCommandRequest';
import CreateCommandResponse from '../model/CreateCommandResponse';
import DeleteCommandResponse from '../model/DeleteCommandResponse';
import GetCommandResponse from '../model/GetCommandResponse';
import ListCommandsResponse from '../model/ListCommandsResponse';
import UpdateCommandRequest from '../model/UpdateCommandRequest';
import UpdateCommandResponse from '../model/UpdateCommandResponse';

/**
* CustomCommands service.
* @module api/CustomCommandsApi
* @version v80.2.0
*/
export default class CustomCommandsApi {

    /**
    * Constructs a new CustomCommandsApi. 
    * @alias module:api/CustomCommandsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCommand operation.
     * @callback module:api/CustomCommandsApi~createCommandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCommandResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create command
     * Creates custom chat command 
     * @param {module:model/CreateCommandRequest} createCommandRequest Command
     * @param {module:api/CustomCommandsApi~createCommandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCommandResponse}
     */
    createCommand(createCommandRequest, callback) {
      let postBody = createCommandRequest;
      // verify the required parameter 'createCommandRequest' is set
      if (createCommandRequest === undefined || createCommandRequest === null) {
        throw new Error("Missing the required parameter 'createCommandRequest' when calling createCommand");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCommandResponse;
      return this.apiClient.callApi(
        '/commands', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCommand operation.
     * @callback module:api/CustomCommandsApi~deleteCommandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteCommandResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete command
     * Deletes custom chat command 
     * @param {String} name 
     * @param {module:api/CustomCommandsApi~deleteCommandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteCommandResponse}
     */
    deleteCommand(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteCommand");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteCommandResponse;
      return this.apiClient.callApi(
        '/commands/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommand operation.
     * @callback module:api/CustomCommandsApi~getCommandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCommandResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get command
     * Returns custom command by its name 
     * @param {String} name 
     * @param {module:api/CustomCommandsApi~getCommandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCommandResponse}
     */
    getCommand(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getCommand");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCommandResponse;
      return this.apiClient.callApi(
        '/commands/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCommands operation.
     * @callback module:api/CustomCommandsApi~listCommandsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCommandsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List commands
     * Returns all custom commands 
     * @param {module:api/CustomCommandsApi~listCommandsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCommandsResponse}
     */
    listCommands(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCommandsResponse;
      return this.apiClient.callApi(
        '/commands', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCommand operation.
     * @callback module:api/CustomCommandsApi~updateCommandCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCommandResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update command
     * Updates custom chat command 
     * @param {String} name 
     * @param {module:model/UpdateCommandRequest} updateCommandRequest Command
     * @param {module:api/CustomCommandsApi~updateCommandCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCommandResponse}
     */
    updateCommand(name, updateCommandRequest, callback) {
      let postBody = updateCommandRequest;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateCommand");
      }
      // verify the required parameter 'updateCommandRequest' is set
      if (updateCommandRequest === undefined || updateCommandRequest === null) {
        throw new Error("Missing the required parameter 'updateCommandRequest' when calling updateCommand");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateCommandResponse;
      return this.apiClient.callApi(
        '/commands/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
