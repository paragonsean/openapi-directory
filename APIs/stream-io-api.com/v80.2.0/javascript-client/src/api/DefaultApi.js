/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import CreateCallRequest from '../model/CreateCallRequest';
import CreateCallResponse from '../model/CreateCallResponse';
import GetCallTokenRequest from '../model/GetCallTokenRequest';
import GetCallTokenResponse from '../model/GetCallTokenResponse';
import MessageResponse from '../model/MessageResponse';

/**
* Default service.
* @module api/DefaultApi
* @version v80.2.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the commitMessage operation.
     * @callback module:api/DefaultApi~commitMessageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MessageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Commit message
     * Commits a pending message, which will make it visible in the channel  Sends events: - message.new - message.updated 
     * @param {String} id 
     * @param {module:api/DefaultApi~commitMessageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MessageResponse}
     */
    commitMessage(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling commitMessage");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MessageResponse;
      return this.apiClient.callApi(
        '/messages/{id}/commit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCall operation.
     * @callback module:api/DefaultApi~createCallCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCallResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a call
     * Creates a call  Required permissions: - CreateCall - ReadChannel 
     * @param {String} type 
     * @param {String} id 
     * @param {module:model/CreateCallRequest} createCallRequest 
     * @param {module:api/DefaultApi~createCallCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCallResponse}
     */
    createCall(type, id, createCallRequest, callback) {
      let postBody = createCallRequest;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling createCall");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling createCall");
      }
      // verify the required parameter 'createCallRequest' is set
      if (createCallRequest === undefined || createCallRequest === null) {
        throw new Error("Missing the required parameter 'createCallRequest' when calling createCall");
      }

      let pathParams = {
        'type': type,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCallResponse;
      return this.apiClient.callApi(
        '/channels/{type}/{id}/call', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallToken1 operation.
     * @callback module:api/DefaultApi~getCallToken1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCallTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Call Token ()
     * Retrieves the token to join a call  Required permissions: - JoinCall - ReadChannel 
     * @param {module:model/GetCallTokenRequest} getCallTokenRequest 
     * @param {module:api/DefaultApi~getCallToken1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCallTokenResponse}
     */
    getCallToken1(getCallTokenRequest, callback) {
      let postBody = getCallTokenRequest;
      // verify the required parameter 'getCallTokenRequest' is set
      if (getCallTokenRequest === undefined || getCallTokenRequest === null) {
        throw new Error("Missing the required parameter 'getCallTokenRequest' when calling getCallToken1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetCallTokenResponse;
      return this.apiClient.callApi(
        '/calls/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCallTokenCallId0 operation.
     * @callback module:api/DefaultApi~getCallTokenCallId0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCallTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Call Token (call_id)
     * Retrieves the token to join a call  Required permissions: - JoinCall - ReadChannel 
     * @param {String} callId 
     * @param {module:model/GetCallTokenRequest} getCallTokenRequest 
     * @param {module:api/DefaultApi~getCallTokenCallId0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCallTokenResponse}
     */
    getCallTokenCallId0(callId, getCallTokenRequest, callback) {
      let postBody = getCallTokenRequest;
      // verify the required parameter 'callId' is set
      if (callId === undefined || callId === null) {
        throw new Error("Missing the required parameter 'callId' when calling getCallTokenCallId0");
      }
      // verify the required parameter 'getCallTokenRequest' is set
      if (getCallTokenRequest === undefined || getCallTokenRequest === null) {
        throw new Error("Missing the required parameter 'getCallTokenRequest' when calling getCallTokenCallId0");
      }

      let pathParams = {
        'call_id': callId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetCallTokenResponse;
      return this.apiClient.callApi(
        '/calls/{call_id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
