/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import CheckPushRequest from '../model/CheckPushRequest';
import CheckPushResponse from '../model/CheckPushResponse';
import CheckSQSRequest from '../model/CheckSQSRequest';
import CheckSQSResponse from '../model/CheckSQSResponse';
import CreateBlockListRequest from '../model/CreateBlockListRequest';
import CreateChannelTypeRequest from '../model/CreateChannelTypeRequest';
import CreateChannelTypeResponse from '../model/CreateChannelTypeResponse';
import GetApplicationResponse from '../model/GetApplicationResponse';
import GetBlockListResponse from '../model/GetBlockListResponse';
import GetRateLimitsResponse from '../model/GetRateLimitsResponse';
import ListBlockListResponse from '../model/ListBlockListResponse';
import ListChannelTypesResponse from '../model/ListChannelTypesResponse';
import ListPushProvidersResponse from '../model/ListPushProvidersResponse';
import Response from '../model/Response';
import UpdateAppRequest from '../model/UpdateAppRequest';
import UpdateBlockListRequest from '../model/UpdateBlockListRequest';
import UpdateChannelTypeRequest from '../model/UpdateChannelTypeRequest';
import UpdateChannelTypeResponse from '../model/UpdateChannelTypeResponse';
import UpsertPushProviderRequest from '../model/UpsertPushProviderRequest';
import UpsertPushProviderResponse from '../model/UpsertPushProviderResponse';

/**
* Settings service.
* @module api/SettingsApi
* @version v80.2.0
*/
export default class SettingsApi {

    /**
    * Constructs a new SettingsApi. 
    * @alias module:api/SettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the checkPush operation.
     * @callback module:api/SettingsApi~checkPushCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckPushResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check push
     * Sends a test message via push, this is a test endpoint to verify your push settings 
     * @param {module:model/CheckPushRequest} checkPushRequest 
     * @param {module:api/SettingsApi~checkPushCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckPushResponse}
     */
    checkPush(checkPushRequest, callback) {
      let postBody = checkPushRequest;
      // verify the required parameter 'checkPushRequest' is set
      if (checkPushRequest === undefined || checkPushRequest === null) {
        throw new Error("Missing the required parameter 'checkPushRequest' when calling checkPush");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckPushResponse;
      return this.apiClient.callApi(
        '/check_push', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the checkSQS operation.
     * @callback module:api/SettingsApi~checkSQSCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckSQSResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check SQS
     * Validates Amazon SQS credentials 
     * @param {module:model/CheckSQSRequest} checkSQSRequest 
     * @param {module:api/SettingsApi~checkSQSCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckSQSResponse}
     */
    checkSQS(checkSQSRequest, callback) {
      let postBody = checkSQSRequest;
      // verify the required parameter 'checkSQSRequest' is set
      if (checkSQSRequest === undefined || checkSQSRequest === null) {
        throw new Error("Missing the required parameter 'checkSQSRequest' when calling checkSQS");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckSQSResponse;
      return this.apiClient.callApi(
        '/check_sqs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBlockList operation.
     * @callback module:api/SettingsApi~createBlockListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create block list
     * Creates a new application blocklist, once created the blocklist can be used by any channel type 
     * @param {module:model/CreateBlockListRequest} createBlockListRequest Block list
     * @param {module:api/SettingsApi~createBlockListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    createBlockList(createBlockListRequest, callback) {
      let postBody = createBlockListRequest;
      // verify the required parameter 'createBlockListRequest' is set
      if (createBlockListRequest === undefined || createBlockListRequest === null) {
        throw new Error("Missing the required parameter 'createBlockListRequest' when calling createBlockList");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/blocklists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createChannelType operation.
     * @callback module:api/SettingsApi~createChannelTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateChannelTypeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create channel type
     * Creates new channel type 
     * @param {module:model/CreateChannelTypeRequest} createChannelTypeRequest 
     * @param {module:api/SettingsApi~createChannelTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateChannelTypeResponse}
     */
    createChannelType(createChannelTypeRequest, callback) {
      let postBody = createChannelTypeRequest;
      // verify the required parameter 'createChannelTypeRequest' is set
      if (createChannelTypeRequest === undefined || createChannelTypeRequest === null) {
        throw new Error("Missing the required parameter 'createChannelTypeRequest' when calling createChannelType");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateChannelTypeResponse;
      return this.apiClient.callApi(
        '/channeltypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBlockList operation.
     * @callback module:api/SettingsApi~deleteBlockListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete block list
     * Deletes previously created application blocklist 
     * @param {String} name 
     * @param {module:api/SettingsApi~deleteBlockListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    deleteBlockList(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteBlockList");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/blocklists/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteChannelType operation.
     * @callback module:api/SettingsApi~deleteChannelTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete channel type
     * Deletes channel type 
     * @param {String} name 
     * @param {module:api/SettingsApi~deleteChannelTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    deleteChannelType(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteChannelType");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/channeltypes/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePushProvider_0 operation.
     * @callback module:api/SettingsApi~deletePushProvider_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a push provider
     * Delete a push provider from v2 with multi bundle/package support. v1 isn't supported in this endpoint 
     * @param {module:model/String} type 
     * @param {String} name 
     * @param {module:api/SettingsApi~deletePushProvider_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    deletePushProvider_0(type, name, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deletePushProvider_0");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deletePushProvider_0");
      }

      let pathParams = {
        'type': type,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/push_providers/{type}/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApp operation.
     * @callback module:api/SettingsApi~getAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApplicationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get App Settings
     * This method returns the application settings 
     * @param {module:api/SettingsApi~getAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApplicationResponse}
     */
    getApp(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetApplicationResponse;
      return this.apiClient.callApi(
        '/app', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlockList operation.
     * @callback module:api/SettingsApi~getBlockListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get block list
     * Returns block list by given name 
     * @param {String} name 
     * @param {module:api/SettingsApi~getBlockListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockListResponse}
     */
    getBlockList(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getBlockList");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBlockListResponse;
      return this.apiClient.callApi(
        '/blocklists/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getChannelType operation.
     * @callback module:api/SettingsApi~getChannelTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get channel type
     * Gets channel type 
     * @param {String} name 
     * @param {module:api/SettingsApi~getChannelTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    getChannelType(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getChannelType");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/channeltypes/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRateLimits operation.
     * @callback module:api/SettingsApi~getRateLimitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRateLimitsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get rate limits
     * Get rate limits usage and quotas 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [serverSide] 
     * @param {Boolean} [android] 
     * @param {Boolean} [ios] 
     * @param {Boolean} [web] 
     * @param {String} [endpoints] 
     * @param {module:api/SettingsApi~getRateLimitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRateLimitsResponse}
     */
    getRateLimits(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'server_side': opts['serverSide'],
        'android': opts['android'],
        'ios': opts['ios'],
        'web': opts['web'],
        'endpoints': opts['endpoints']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRateLimitsResponse;
      return this.apiClient.callApi(
        '/rate_limits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBlockLists operation.
     * @callback module:api/SettingsApi~listBlockListsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBlockListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List block lists
     * Returns all available block lists 
     * @param {module:api/SettingsApi~listBlockListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBlockListResponse}
     */
    listBlockLists(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBlockListResponse;
      return this.apiClient.callApi(
        '/blocklists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listChannelTypes operation.
     * @callback module:api/SettingsApi~listChannelTypesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListChannelTypesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List channel types
     * Lists all available channel types 
     * @param {module:api/SettingsApi~listChannelTypesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListChannelTypesResponse}
     */
    listChannelTypes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListChannelTypesResponse;
      return this.apiClient.callApi(
        '/channeltypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPushProviders_0 operation.
     * @callback module:api/SettingsApi~listPushProviders_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPushProvidersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List push providers
     * List details of all push providers. 
     * @param {module:api/SettingsApi~listPushProviders_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPushProvidersResponse}
     */
    listPushProviders_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPushProvidersResponse;
      return this.apiClient.callApi(
        '/push_providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApp operation.
     * @callback module:api/SettingsApi~updateAppCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update App Settings
     * This method updates one or more application settings 
     * @param {module:model/UpdateAppRequest} updateAppRequest 
     * @param {module:api/SettingsApi~updateAppCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    updateApp(updateAppRequest, callback) {
      let postBody = updateAppRequest;
      // verify the required parameter 'updateAppRequest' is set
      if (updateAppRequest === undefined || updateAppRequest === null) {
        throw new Error("Missing the required parameter 'updateAppRequest' when calling updateApp");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/app', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBlockList operation.
     * @callback module:api/SettingsApi~updateBlockListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update block list
     * Updates contents of the block list 
     * @param {String} name 
     * @param {module:model/UpdateBlockListRequest} updateBlockListRequest 
     * @param {module:api/SettingsApi~updateBlockListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    updateBlockList(name, updateBlockListRequest, callback) {
      let postBody = updateBlockListRequest;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateBlockList");
      }
      // verify the required parameter 'updateBlockListRequest' is set
      if (updateBlockListRequest === undefined || updateBlockListRequest === null) {
        throw new Error("Missing the required parameter 'updateBlockListRequest' when calling updateBlockList");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/blocklists/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateChannelType operation.
     * @callback module:api/SettingsApi~updateChannelTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateChannelTypeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update channel type
     * Updates channel type 
     * @param {String} name 
     * @param {module:model/UpdateChannelTypeRequest} updateChannelTypeRequest 
     * @param {module:api/SettingsApi~updateChannelTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateChannelTypeResponse}
     */
    updateChannelType(name, updateChannelTypeRequest, callback) {
      let postBody = updateChannelTypeRequest;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateChannelType");
      }
      // verify the required parameter 'updateChannelTypeRequest' is set
      if (updateChannelTypeRequest === undefined || updateChannelTypeRequest === null) {
        throw new Error("Missing the required parameter 'updateChannelTypeRequest' when calling updateChannelType");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateChannelTypeResponse;
      return this.apiClient.callApi(
        '/channeltypes/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upsertPushProvider_0 operation.
     * @callback module:api/SettingsApi~upsertPushProvider_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UpsertPushProviderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upsert a push provider
     * Upsert a push provider for v2 with multi bundle/package support 
     * @param {module:model/UpsertPushProviderRequest} upsertPushProviderRequest 
     * @param {module:api/SettingsApi~upsertPushProvider_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpsertPushProviderResponse}
     */
    upsertPushProvider_0(upsertPushProviderRequest, callback) {
      let postBody = upsertPushProviderRequest;
      // verify the required parameter 'upsertPushProviderRequest' is set
      if (upsertPushProviderRequest === undefined || upsertPushProviderRequest === null) {
        throw new Error("Missing the required parameter 'upsertPushProviderRequest' when calling upsertPushProvider_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpsertPushProviderResponse;
      return this.apiClient.callApi(
        '/push_providers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
