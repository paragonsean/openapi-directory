/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import BanRequest from '../model/BanRequest';
import CreateBlockListRequest from '../model/CreateBlockListRequest';
import DeactivateUserRequest from '../model/DeactivateUserRequest';
import DeactivateUserResponse from '../model/DeactivateUserResponse';
import DeactivateUsersRequest from '../model/DeactivateUsersRequest';
import DeactivateUsersResponse from '../model/DeactivateUsersResponse';
import DeleteUserResponse from '../model/DeleteUserResponse';
import DeleteUsersRequest from '../model/DeleteUsersRequest';
import DeleteUsersResponse from '../model/DeleteUsersResponse';
import FlagRequest from '../model/FlagRequest';
import FlagResponse from '../model/FlagResponse';
import GetBlockListResponse from '../model/GetBlockListResponse';
import ListBlockListResponse from '../model/ListBlockListResponse';
import MuteUserRequest from '../model/MuteUserRequest';
import MuteUserResponse from '../model/MuteUserResponse';
import QueryBannedUsersRequest from '../model/QueryBannedUsersRequest';
import QueryBannedUsersResponse from '../model/QueryBannedUsersResponse';
import QueryMessageFlagsRequest from '../model/QueryMessageFlagsRequest';
import QueryMessageFlagsResponse from '../model/QueryMessageFlagsResponse';
import ReactivateUserRequest from '../model/ReactivateUserRequest';
import ReactivateUserResponse from '../model/ReactivateUserResponse';
import ReactivateUsersRequest from '../model/ReactivateUsersRequest';
import ReactivateUsersResponse from '../model/ReactivateUsersResponse';
import Response from '../model/Response';
import UnmuteResponse from '../model/UnmuteResponse';
import UnmuteUserRequest from '../model/UnmuteUserRequest';
import UpdateBlockListRequest from '../model/UpdateBlockListRequest';

/**
* Moderation service.
* @module api/ModerationApi
* @version v80.2.0
*/
export default class ModerationApi {

    /**
    * Constructs a new ModerationApi. 
    * @alias module:api/ModerationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the ban_0 operation.
     * @callback module:api/ModerationApi~ban_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ban user
     * Restricts user activity either in specific channel or globally  Sends events: - user.banned  Required permissions: - BanChannelMember - BanUser 
     * @param {module:model/BanRequest} banRequest 
     * @param {module:api/ModerationApi~ban_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    ban_0(banRequest, callback) {
      let postBody = banRequest;
      // verify the required parameter 'banRequest' is set
      if (banRequest === undefined || banRequest === null) {
        throw new Error("Missing the required parameter 'banRequest' when calling ban_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/moderation/ban', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createBlockList_0 operation.
     * @callback module:api/ModerationApi~createBlockList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create block list
     * Creates a new application blocklist, once created the blocklist can be used by any channel type 
     * @param {module:model/CreateBlockListRequest} createBlockListRequest Block list
     * @param {module:api/ModerationApi~createBlockList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    createBlockList_0(createBlockListRequest, callback) {
      let postBody = createBlockListRequest;
      // verify the required parameter 'createBlockListRequest' is set
      if (createBlockListRequest === undefined || createBlockListRequest === null) {
        throw new Error("Missing the required parameter 'createBlockListRequest' when calling createBlockList_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/blocklists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deactivateUser_1 operation.
     * @callback module:api/ModerationApi~deactivateUser_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DeactivateUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate user
     * Deactivates user with possibility to activate it back  Sends events: - user.deactivated 
     * @param {String} userId 
     * @param {module:model/DeactivateUserRequest} deactivateUserRequest 
     * @param {module:api/ModerationApi~deactivateUser_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeactivateUserResponse}
     */
    deactivateUser_1(userId, deactivateUserRequest, callback) {
      let postBody = deactivateUserRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deactivateUser_1");
      }
      // verify the required parameter 'deactivateUserRequest' is set
      if (deactivateUserRequest === undefined || deactivateUserRequest === null) {
        throw new Error("Missing the required parameter 'deactivateUserRequest' when calling deactivateUser_1");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeactivateUserResponse;
      return this.apiClient.callApi(
        '/users/{user_id}/deactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deactivateUsers_1 operation.
     * @callback module:api/ModerationApi~deactivateUsers_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DeactivateUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate users
     * Deactivate users in batches  Sends events: - user.deactivated 
     * @param {module:model/DeactivateUsersRequest} deactivateUsersRequest 
     * @param {module:api/ModerationApi~deactivateUsers_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeactivateUsersResponse}
     */
    deactivateUsers_1(deactivateUsersRequest, callback) {
      let postBody = deactivateUsersRequest;
      // verify the required parameter 'deactivateUsersRequest' is set
      if (deactivateUsersRequest === undefined || deactivateUsersRequest === null) {
        throw new Error("Missing the required parameter 'deactivateUsersRequest' when calling deactivateUsers_1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeactivateUsersResponse;
      return this.apiClient.callApi(
        '/users/deactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteBlockList_0 operation.
     * @callback module:api/ModerationApi~deleteBlockList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete block list
     * Deletes previously created application blocklist 
     * @param {String} name 
     * @param {module:api/ModerationApi~deleteBlockList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    deleteBlockList_0(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deleteBlockList_0");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/blocklists/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUser_1 operation.
     * @callback module:api/ModerationApi~deleteUser_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete user
     * Deletes user and optionally all their belongings. The Endpoint is deprecated, please use 'Delete Users' endpoint instead  Sends events: - channel.deleted - message.deleted - user.deleted 
     * @param {String} userId 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [markMessagesDeleted] 
     * @param {Boolean} [hardDelete] 
     * @param {Boolean} [deleteConversationChannels] 
     * @param {module:api/ModerationApi~deleteUser_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteUserResponse}
     */
    deleteUser_1(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUser_1");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
        'mark_messages_deleted': opts['markMessagesDeleted'],
        'hard_delete': opts['hardDelete'],
        'delete_conversation_channels': opts['deleteConversationChannels']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteUserResponse;
      return this.apiClient.callApi(
        '/users/{user_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUsers_1 operation.
     * @callback module:api/ModerationApi~deleteUsers_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Users
     * Deletes users and optionally all their belongings asynchronously.  Sends events: - channel.deleted - user.deleted 
     * @param {module:model/DeleteUsersRequest} deleteUsersRequest 
     * @param {module:api/ModerationApi~deleteUsers_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteUsersResponse}
     */
    deleteUsers_1(deleteUsersRequest, callback) {
      let postBody = deleteUsersRequest;
      // verify the required parameter 'deleteUsersRequest' is set
      if (deleteUsersRequest === undefined || deleteUsersRequest === null) {
        throw new Error("Missing the required parameter 'deleteUsersRequest' when calling deleteUsers_1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeleteUsersResponse;
      return this.apiClient.callApi(
        '/users/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flag operation.
     * @callback module:api/ModerationApi~flagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlagResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Flag
     * Reports message or user for review by moderators  Sends events: - message.flagged - user.flagged  Required permissions: - FlagMessage - FlagUser 
     * @param {module:model/FlagRequest} flagRequest 
     * @param {module:api/ModerationApi~flagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlagResponse}
     */
    flag(flagRequest, callback) {
      let postBody = flagRequest;
      // verify the required parameter 'flagRequest' is set
      if (flagRequest === undefined || flagRequest === null) {
        throw new Error("Missing the required parameter 'flagRequest' when calling flag");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FlagResponse;
      return this.apiClient.callApi(
        '/moderation/flag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBlockList_0 operation.
     * @callback module:api/ModerationApi~getBlockList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetBlockListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get block list
     * Returns block list by given name 
     * @param {String} name 
     * @param {module:api/ModerationApi~getBlockList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetBlockListResponse}
     */
    getBlockList_0(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getBlockList_0");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetBlockListResponse;
      return this.apiClient.callApi(
        '/blocklists/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listBlockLists_0 operation.
     * @callback module:api/ModerationApi~listBlockLists_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBlockListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List block lists
     * Returns all available block lists 
     * @param {module:api/ModerationApi~listBlockLists_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBlockListResponse}
     */
    listBlockLists_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBlockListResponse;
      return this.apiClient.callApi(
        '/blocklists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the muteUser_0 operation.
     * @callback module:api/ModerationApi~muteUser_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/MuteUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mute user
     * Mutes one or several users  Sends events: - user.muted  Required permissions: - MuteUser 
     * @param {module:model/MuteUserRequest} muteUserRequest 
     * @param {module:api/ModerationApi~muteUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MuteUserResponse}
     */
    muteUser_0(muteUserRequest, callback) {
      let postBody = muteUserRequest;
      // verify the required parameter 'muteUserRequest' is set
      if (muteUserRequest === undefined || muteUserRequest === null) {
        throw new Error("Missing the required parameter 'muteUserRequest' when calling muteUser_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = MuteUserResponse;
      return this.apiClient.callApi(
        '/moderation/mute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryBannedUsers_0 operation.
     * @callback module:api/ModerationApi~queryBannedUsers_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryBannedUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query Banned Users
     * Find and filter channel scoped or global user bans  Required permissions: - ReadChannel 
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryBannedUsersRequest} [payload] 
     * @param {module:api/ModerationApi~queryBannedUsers_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryBannedUsersResponse}
     */
    queryBannedUsers_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'payload': opts['payload']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueryBannedUsersResponse;
      return this.apiClient.callApi(
        '/query_banned_users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the queryMessageFlags_0 operation.
     * @callback module:api/ModerationApi~queryMessageFlags_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/QueryMessageFlagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query Message Flags
     * Find and filter message flags  Required permissions: - ReadMessageFlags 
     * @param {Object} opts Optional parameters
     * @param {module:model/QueryMessageFlagsRequest} [payload] 
     * @param {module:api/ModerationApi~queryMessageFlags_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QueryMessageFlagsResponse}
     */
    queryMessageFlags_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'payload': opts['payload']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = QueryMessageFlagsResponse;
      return this.apiClient.callApi(
        '/moderation/flags/message', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactivateUser_1 operation.
     * @callback module:api/ModerationApi~reactivateUser_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ReactivateUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reactivate user
     * Activates user who's been deactivated previously  Sends events: - user.reactivated 
     * @param {String} userId 
     * @param {module:model/ReactivateUserRequest} reactivateUserRequest 
     * @param {module:api/ModerationApi~reactivateUser_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReactivateUserResponse}
     */
    reactivateUser_1(userId, reactivateUserRequest, callback) {
      let postBody = reactivateUserRequest;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling reactivateUser_1");
      }
      // verify the required parameter 'reactivateUserRequest' is set
      if (reactivateUserRequest === undefined || reactivateUserRequest === null) {
        throw new Error("Missing the required parameter 'reactivateUserRequest' when calling reactivateUser_1");
      }

      let pathParams = {
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReactivateUserResponse;
      return this.apiClient.callApi(
        '/users/{user_id}/reactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reactivateUsers_1 operation.
     * @callback module:api/ModerationApi~reactivateUsers_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ReactivateUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reactivate users
     * Reactivate users in batches  Sends events: - user.reactivated 
     * @param {module:model/ReactivateUsersRequest} reactivateUsersRequest 
     * @param {module:api/ModerationApi~reactivateUsers_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReactivateUsersResponse}
     */
    reactivateUsers_1(reactivateUsersRequest, callback) {
      let postBody = reactivateUsersRequest;
      // verify the required parameter 'reactivateUsersRequest' is set
      if (reactivateUsersRequest === undefined || reactivateUsersRequest === null) {
        throw new Error("Missing the required parameter 'reactivateUsersRequest' when calling reactivateUsers_1");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReactivateUsersResponse;
      return this.apiClient.callApi(
        '/users/reactivate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unban_0 operation.
     * @callback module:api/ModerationApi~unban_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unban user
     * Removes previously applied ban  Sends events: - user.unbanned  Required permissions: - BanChannelMember - BanUser 
     * @param {Object} opts Optional parameters
     * @param {String} [targetUserId] 
     * @param {String} [type] 
     * @param {String} [id] 
     * @param {module:api/ModerationApi~unban_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    unban_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'target_user_id': opts['targetUserId'],
        'type': opts['type'],
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/moderation/ban', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unflag operation.
     * @callback module:api/ModerationApi~unflagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlagResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unflag
     * Removes previously created user or message flag  Required permissions: - FlagMessage - FlagUser 
     * @param {module:model/FlagRequest} flagRequest 
     * @param {module:api/ModerationApi~unflagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlagResponse}
     */
    unflag(flagRequest, callback) {
      let postBody = flagRequest;
      // verify the required parameter 'flagRequest' is set
      if (flagRequest === undefined || flagRequest === null) {
        throw new Error("Missing the required parameter 'flagRequest' when calling unflag");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FlagResponse;
      return this.apiClient.callApi(
        '/moderation/unflag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unmuteUser_0 operation.
     * @callback module:api/ModerationApi~unmuteUser_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UnmuteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unmute user
     * Unmutes previously muted user  Sends events: - user.unmuted  Required permissions: - MuteUser 
     * @param {module:model/UnmuteUserRequest} unmuteUserRequest 
     * @param {module:api/ModerationApi~unmuteUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnmuteResponse}
     */
    unmuteUser_0(unmuteUserRequest, callback) {
      let postBody = unmuteUserRequest;
      // verify the required parameter 'unmuteUserRequest' is set
      if (unmuteUserRequest === undefined || unmuteUserRequest === null) {
        throw new Error("Missing the required parameter 'unmuteUserRequest' when calling unmuteUser_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UnmuteResponse;
      return this.apiClient.callApi(
        '/moderation/unmute', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateBlockList_0 operation.
     * @callback module:api/ModerationApi~updateBlockList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update block list
     * Updates contents of the block list 
     * @param {String} name 
     * @param {module:model/UpdateBlockListRequest} updateBlockListRequest 
     * @param {module:api/ModerationApi~updateBlockList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    updateBlockList_0(name, updateBlockListRequest, callback) {
      let postBody = updateBlockListRequest;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateBlockList_0");
      }
      // verify the required parameter 'updateBlockListRequest' is set
      if (updateBlockListRequest === undefined || updateBlockListRequest === null) {
        throw new Error("Missing the required parameter 'updateBlockListRequest' when calling updateBlockList_0");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/blocklists/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
