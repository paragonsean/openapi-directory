/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import GetReactionsResponse from '../model/GetReactionsResponse';
import ReactionRemovalResponse from '../model/ReactionRemovalResponse';
import ReactionResponse from '../model/ReactionResponse';
import SendReactionRequest from '../model/SendReactionRequest';

/**
* Reactions service.
* @module api/ReactionsApi
* @version v80.2.0
*/
export default class ReactionsApi {

    /**
    * Constructs a new ReactionsApi. 
    * @alias module:api/ReactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteReaction_0 operation.
     * @callback module:api/ReactionsApi~deleteReaction_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ReactionRemovalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete reaction
     * Removes user reaction from the message  Sends events: - reaction.deleted  Required permissions: - DeleteReaction 
     * @param {String} id 
     * @param {String} type 
     * @param {Object} opts Optional parameters
     * @param {String} [userId] 
     * @param {module:api/ReactionsApi~deleteReaction_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReactionRemovalResponse}
     */
    deleteReaction_0(id, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteReaction_0");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deleteReaction_0");
      }

      let pathParams = {
        'id': id,
        'type': type
      };
      let queryParams = {
        'user_id': opts['userId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReactionRemovalResponse;
      return this.apiClient.callApi(
        '/messages/{id}/reaction/{type}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReactions_0 operation.
     * @callback module:api/ReactionsApi~getReactions_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReactionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get reactions
     * Returns list of reactions of specific message  Required permissions: - ReadChannel 
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] 
     * @param {Number} [offset] 
     * @param {module:api/ReactionsApi~getReactions_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReactionsResponse}
     */
    getReactions_0(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getReactions_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReactionsResponse;
      return this.apiClient.callApi(
        '/messages/{id}/reactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendReaction_0 operation.
     * @callback module:api/ReactionsApi~sendReaction_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ReactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send reaction
     * Sends reaction to specified message  Sends events: - reaction.new - reaction.updated  Required permissions: - CreateReaction - UseFrozenChannel 
     * @param {String} id 
     * @param {module:model/SendReactionRequest} sendReactionRequest 
     * @param {module:api/ReactionsApi~sendReaction_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReactionResponse}
     */
    sendReaction_0(id, sendReactionRequest, callback) {
      let postBody = sendReactionRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling sendReaction_0");
      }
      // verify the required parameter 'sendReactionRequest' is set
      if (sendReactionRequest === undefined || sendReactionRequest === null) {
        throw new Error("Missing the required parameter 'sendReactionRequest' when calling sendReaction_0");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReactionResponse;
      return this.apiClient.callApi(
        '/messages/{id}/reaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
