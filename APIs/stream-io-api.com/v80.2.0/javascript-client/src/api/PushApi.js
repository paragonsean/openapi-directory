/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import CreateDeviceRequest from '../model/CreateDeviceRequest';
import ListPushProvidersResponse from '../model/ListPushProvidersResponse';
import Response from '../model/Response';
import UpsertPushProviderRequest from '../model/UpsertPushProviderRequest';
import UpsertPushProviderResponse from '../model/UpsertPushProviderResponse';

/**
* Push service.
* @module api/PushApi
* @version v80.2.0
*/
export default class PushApi {

    /**
    * Constructs a new PushApi. 
    * @alias module:api/PushApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDevice_0 operation.
     * @callback module:api/PushApi~createDevice_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create device
     * Adds a new device to a user, if the same device already exists the call will have no effect 
     * @param {module:model/CreateDeviceRequest} createDeviceRequest 
     * @param {module:api/PushApi~createDevice_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    createDevice_0(createDeviceRequest, callback) {
      let postBody = createDeviceRequest;
      // verify the required parameter 'createDeviceRequest' is set
      if (createDeviceRequest === undefined || createDeviceRequest === null) {
        throw new Error("Missing the required parameter 'createDeviceRequest' when calling createDevice_0");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/devices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePushProvider operation.
     * @callback module:api/PushApi~deletePushProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a push provider
     * Delete a push provider from v2 with multi bundle/package support. v1 isn't supported in this endpoint 
     * @param {module:model/String} type 
     * @param {String} name 
     * @param {module:api/PushApi~deletePushProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Response}
     */
    deletePushProvider(type, name, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deletePushProvider");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deletePushProvider");
      }

      let pathParams = {
        'type': type,
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Response;
      return this.apiClient.callApi(
        '/push_providers/{type}/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPushProviders operation.
     * @callback module:api/PushApi~listPushProvidersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPushProvidersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List push providers
     * List details of all push providers. 
     * @param {module:api/PushApi~listPushProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPushProvidersResponse}
     */
    listPushProviders(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPushProvidersResponse;
      return this.apiClient.callApi(
        '/push_providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upsertPushProvider operation.
     * @callback module:api/PushApi~upsertPushProviderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpsertPushProviderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upsert a push provider
     * Upsert a push provider for v2 with multi bundle/package support 
     * @param {module:model/UpsertPushProviderRequest} upsertPushProviderRequest 
     * @param {module:api/PushApi~upsertPushProviderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpsertPushProviderResponse}
     */
    upsertPushProvider(upsertPushProviderRequest, callback) {
      let postBody = upsertPushProviderRequest;
      // verify the required parameter 'upsertPushProviderRequest' is set
      if (upsertPushProviderRequest === undefined || upsertPushProviderRequest === null) {
        throw new Error("Missing the required parameter 'upsertPushProviderRequest' when calling upsertPushProvider");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['stream-auth-type', 'api_key', 'JWT'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpsertPushProviderResponse;
      return this.apiClient.callApi(
        '/push_providers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
