/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SortParamRequest from './SortParamRequest';
import UserObjectRequest from './UserObjectRequest';

/**
 * The QueryChannelsRequest model module.
 * @module model/QueryChannelsRequest
 * @version v80.2.0
 */
class QueryChannelsRequest {
    /**
     * Constructs a new <code>QueryChannelsRequest</code>.
     * @alias module:model/QueryChannelsRequest
     * @param sort {Array.<module:model/SortParamRequest>} List of sort parameters
     */
    constructor(sort) { 
        
        QueryChannelsRequest.initialize(this, sort);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sort) { 
        obj['sort'] = sort;
    }

    /**
     * Constructs a <code>QueryChannelsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryChannelsRequest} obj Optional instance to populate.
     * @return {module:model/QueryChannelsRequest} The populated <code>QueryChannelsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryChannelsRequest();

            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('connection_id')) {
                obj['connection_id'] = ApiClient.convertToType(data['connection_id'], 'String');
            }
            if (data.hasOwnProperty('filter_conditions')) {
                obj['filter_conditions'] = ApiClient.convertToType(data['filter_conditions'], {'String': Object});
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('member_limit')) {
                obj['member_limit'] = ApiClient.convertToType(data['member_limit'], 'Number');
            }
            if (data.hasOwnProperty('message_limit')) {
                obj['message_limit'] = ApiClient.convertToType(data['message_limit'], 'Number');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('presence')) {
                obj['presence'] = ApiClient.convertToType(data['presence'], 'Boolean');
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = ApiClient.convertToType(data['sort'], [SortParamRequest]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'Boolean');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = UserObjectRequest.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
            if (data.hasOwnProperty('watch')) {
                obj['watch'] = ApiClient.convertToType(data['watch'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryChannelsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryChannelsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QueryChannelsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['connection_id'] && !(typeof data['connection_id'] === 'string' || data['connection_id'] instanceof String)) {
            throw new Error("Expected the field `connection_id` to be a primitive type in the JSON string but got " + data['connection_id']);
        }
        if (data['sort']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sort'])) {
                throw new Error("Expected the field `sort` to be an array in the JSON data but got " + data['sort']);
            }
            // validate the optional field `sort` (array)
            for (const item of data['sort']) {
                SortParamRequest.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}

QueryChannelsRequest.RequiredProperties = ["sort"];

/**
 * @member {String} client_id
 */
QueryChannelsRequest.prototype['client_id'] = undefined;

/**
 * @member {String} connection_id
 */
QueryChannelsRequest.prototype['connection_id'] = undefined;

/**
 * @member {Object.<String, Object>} filter_conditions
 */
QueryChannelsRequest.prototype['filter_conditions'] = undefined;

/**
 * Number of channels to limit
 * @member {Number} limit
 */
QueryChannelsRequest.prototype['limit'] = undefined;

/**
 * Number of members to limit
 * @member {Number} member_limit
 */
QueryChannelsRequest.prototype['member_limit'] = undefined;

/**
 * Number of messages to limit
 * @member {Number} message_limit
 */
QueryChannelsRequest.prototype['message_limit'] = undefined;

/**
 * Channel pagination offset
 * @member {Number} offset
 */
QueryChannelsRequest.prototype['offset'] = undefined;

/**
 * @member {Boolean} presence
 */
QueryChannelsRequest.prototype['presence'] = undefined;

/**
 * List of sort parameters
 * @member {Array.<module:model/SortParamRequest>} sort
 */
QueryChannelsRequest.prototype['sort'] = undefined;

/**
 * Whether to update channel state or not
 * @member {Boolean} state
 */
QueryChannelsRequest.prototype['state'] = undefined;

/**
 * @member {module:model/UserObjectRequest} user
 */
QueryChannelsRequest.prototype['user'] = undefined;

/**
 * @member {String} user_id
 */
QueryChannelsRequest.prototype['user_id'] = undefined;

/**
 * Whether to start watching found channels or not
 * @member {Boolean} watch
 */
QueryChannelsRequest.prototype['watch'] = undefined;






export default QueryChannelsRequest;

