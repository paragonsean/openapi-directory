/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Segment model module.
 * @module model/Segment
 * @version v80.2.0
 */
class Segment {
    /**
     * Constructs a new <code>Segment</code>.
     * @alias module:model/Segment
     * @param createdAt {Date} 
     * @param description {String} 
     * @param filter {Object.<String, Object>} 
     * @param id {String} 
     * @param inUse {Boolean} 
     * @param name {String} 
     * @param size {Number} 
     * @param status {String} 
     * @param type {module:model/Segment.TypeEnum} 
     * @param updatedAt {Date} 
     */
    constructor(createdAt, description, filter, id, inUse, name, size, status, type, updatedAt) { 
        
        Segment.initialize(this, createdAt, description, filter, id, inUse, name, size, status, type, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, description, filter, id, inUse, name, size, status, type, updatedAt) { 
        obj['created_at'] = createdAt;
        obj['description'] = description;
        obj['filter'] = filter;
        obj['id'] = id;
        obj['in_use'] = inUse;
        obj['name'] = name;
        obj['size'] = size;
        obj['status'] = status;
        obj['type'] = type;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>Segment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Segment} obj Optional instance to populate.
     * @return {module:model/Segment} The populated <code>Segment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Segment();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], {'String': Object});
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('in_use')) {
                obj['in_use'] = ApiClient.convertToType(data['in_use'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Segment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Segment</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Segment.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Segment.RequiredProperties = ["created_at", "description", "filter", "id", "in_use", "name", "size", "status", "type", "updated_at"];

/**
 * @member {Date} created_at
 */
Segment.prototype['created_at'] = undefined;

/**
 * @member {String} description
 */
Segment.prototype['description'] = undefined;

/**
 * @member {Object.<String, Object>} filter
 */
Segment.prototype['filter'] = undefined;

/**
 * @member {String} id
 */
Segment.prototype['id'] = undefined;

/**
 * @member {Boolean} in_use
 */
Segment.prototype['in_use'] = undefined;

/**
 * @member {String} name
 */
Segment.prototype['name'] = undefined;

/**
 * @member {Number} size
 */
Segment.prototype['size'] = undefined;

/**
 * @member {String} status
 */
Segment.prototype['status'] = undefined;

/**
 * @member {module:model/Segment.TypeEnum} type
 */
Segment.prototype['type'] = undefined;

/**
 * @member {Date} updated_at
 */
Segment.prototype['updated_at'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Segment['TypeEnum'] = {

    /**
     * value: "user"
     * @const
     */
    "user": "user",

    /**
     * value: "channel"
     * @const
     */
    "channel": "channel"
};



export default Segment;

