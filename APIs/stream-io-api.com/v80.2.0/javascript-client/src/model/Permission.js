/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Permission model module.
 * @module model/Permission
 * @version v80.2.0
 */
class Permission {
    /**
     * Constructs a new <code>Permission</code>.
     * @alias module:model/Permission
     * @param action {String} Action name this permission is for (e.g. SendMessage)
     * @param custom {Boolean} Whether this is a custom permission or built-in
     * @param description {String} Description of the permission
     * @param id {String} Unique permission ID
     * @param level {module:model/Permission.LevelEnum} Level at which permission could be applied (app or channel)
     * @param name {String} Name of the permission
     * @param owner {Boolean} Whether this permission applies to resource owner or not
     * @param sameTeam {Boolean} Whether this permission applies to teammates (multi-tenancy mode only)
     * @param tags {Array.<String>} List of tags of the permission
     */
    constructor(action, custom, description, id, level, name, owner, sameTeam, tags) { 
        
        Permission.initialize(this, action, custom, description, id, level, name, owner, sameTeam, tags);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, custom, description, id, level, name, owner, sameTeam, tags) { 
        obj['action'] = action;
        obj['custom'] = custom;
        obj['description'] = description;
        obj['id'] = id;
        obj['level'] = level;
        obj['name'] = name;
        obj['owner'] = owner;
        obj['same_team'] = sameTeam;
        obj['tags'] = tags;
    }

    /**
     * Constructs a <code>Permission</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Permission} obj Optional instance to populate.
     * @return {module:model/Permission} The populated <code>Permission</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Permission();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('condition')) {
                obj['condition'] = ApiClient.convertToType(data['condition'], {'String': Object});
            }
            if (data.hasOwnProperty('custom')) {
                obj['custom'] = ApiClient.convertToType(data['custom'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'Boolean');
            }
            if (data.hasOwnProperty('same_team')) {
                obj['same_team'] = ApiClient.convertToType(data['same_team'], 'Boolean');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Permission</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Permission</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Permission.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['level'] && !(typeof data['level'] === 'string' || data['level'] instanceof String)) {
            throw new Error("Expected the field `level` to be a primitive type in the JSON string but got " + data['level']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

Permission.RequiredProperties = ["action", "custom", "description", "id", "level", "name", "owner", "same_team", "tags"];

/**
 * Action name this permission is for (e.g. SendMessage)
 * @member {String} action
 */
Permission.prototype['action'] = undefined;

/**
 * MongoDB style condition which decides whether or not the permission is granted
 * @member {Object.<String, Object>} condition
 */
Permission.prototype['condition'] = undefined;

/**
 * Whether this is a custom permission or built-in
 * @member {Boolean} custom
 */
Permission.prototype['custom'] = undefined;

/**
 * Description of the permission
 * @member {String} description
 */
Permission.prototype['description'] = undefined;

/**
 * Unique permission ID
 * @member {String} id
 */
Permission.prototype['id'] = undefined;

/**
 * Level at which permission could be applied (app or channel)
 * @member {module:model/Permission.LevelEnum} level
 */
Permission.prototype['level'] = undefined;

/**
 * Name of the permission
 * @member {String} name
 */
Permission.prototype['name'] = undefined;

/**
 * Whether this permission applies to resource owner or not
 * @member {Boolean} owner
 */
Permission.prototype['owner'] = undefined;

/**
 * Whether this permission applies to teammates (multi-tenancy mode only)
 * @member {Boolean} same_team
 */
Permission.prototype['same_team'] = undefined;

/**
 * List of tags of the permission
 * @member {Array.<String>} tags
 */
Permission.prototype['tags'] = undefined;





/**
 * Allowed values for the <code>level</code> property.
 * @enum {String}
 * @readonly
 */
Permission['LevelEnum'] = {

    /**
     * value: "app"
     * @const
     */
    "app": "app",

    /**
     * value: "channel"
     * @const
     */
    "channel": "channel"
};



export default Permission;

