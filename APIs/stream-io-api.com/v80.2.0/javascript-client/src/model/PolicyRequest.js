/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PolicyRequest model module.
 * @module model/PolicyRequest
 * @version v80.2.0
 */
class PolicyRequest {
    /**
     * Constructs a new <code>PolicyRequest</code>.
     * @alias module:model/PolicyRequest
     * @param name {String} User-friendly policy name
     * @param priority {Number} Policy priority
     */
    constructor(name, priority) { 
        
        PolicyRequest.initialize(this, name, priority);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, priority) { 
        obj['name'] = name;
        obj['priority'] = priority;
    }

    /**
     * Constructs a <code>PolicyRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyRequest} obj Optional instance to populate.
     * @return {module:model/PolicyRequest} The populated <code>PolicyRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyRequest();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'Boolean');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ApiClient.convertToType(data['resources'], ['String']);
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PolicyRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['resources'])) {
            throw new Error("Expected the field `resources` to be an array in the JSON data but got " + data['resources']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['roles'])) {
            throw new Error("Expected the field `roles` to be an array in the JSON data but got " + data['roles']);
        }

        return true;
    }


}

PolicyRequest.RequiredProperties = ["name", "priority"];

/**
 * @member {module:model/PolicyRequest.ActionEnum} action
 */
PolicyRequest.prototype['action'] = undefined;

/**
 * User-friendly policy name
 * @member {String} name
 */
PolicyRequest.prototype['name'] = undefined;

/**
 * Whether policy applies to resource owner or not
 * @member {Boolean} owner
 */
PolicyRequest.prototype['owner'] = undefined;

/**
 * Policy priority
 * @member {Number} priority
 */
PolicyRequest.prototype['priority'] = undefined;

/**
 * List of resources to apply policy to
 * @member {Array.<String>} resources
 */
PolicyRequest.prototype['resources'] = undefined;

/**
 * List of roles to apply policy to
 * @member {Array.<String>} roles
 */
PolicyRequest.prototype['roles'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
PolicyRequest['ActionEnum'] = {

    /**
     * value: "Deny"
     * @const
     */
    "Deny": "Deny",

    /**
     * value: "Allow"
     * @const
     */
    "Allow": "Allow"
};



export default PolicyRequest;

