/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserObjectRequest from './UserObjectRequest';

/**
 * The SyncRequest model module.
 * @module model/SyncRequest
 * @version v80.2.0
 */
class SyncRequest {
    /**
     * Constructs a new <code>SyncRequest</code>.
     * @alias module:model/SyncRequest
     * @param lastSyncAt {Date} Date from which synchronization should happen
     */
    constructor(lastSyncAt) { 
        
        SyncRequest.initialize(this, lastSyncAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, lastSyncAt) { 
        obj['last_sync_at'] = lastSyncAt;
    }

    /**
     * Constructs a <code>SyncRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SyncRequest} obj Optional instance to populate.
     * @return {module:model/SyncRequest} The populated <code>SyncRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SyncRequest();

            if (data.hasOwnProperty('channel_cids')) {
                obj['channel_cids'] = ApiClient.convertToType(data['channel_cids'], ['String']);
            }
            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('connection_id')) {
                obj['connection_id'] = ApiClient.convertToType(data['connection_id'], 'String');
            }
            if (data.hasOwnProperty('last_sync_at')) {
                obj['last_sync_at'] = ApiClient.convertToType(data['last_sync_at'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = UserObjectRequest.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
            if (data.hasOwnProperty('watch')) {
                obj['watch'] = ApiClient.convertToType(data['watch'], 'Boolean');
            }
            if (data.hasOwnProperty('with_inaccessible_cids')) {
                obj['with_inaccessible_cids'] = ApiClient.convertToType(data['with_inaccessible_cids'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SyncRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SyncRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SyncRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['channel_cids'])) {
            throw new Error("Expected the field `channel_cids` to be an array in the JSON data but got " + data['channel_cids']);
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['connection_id'] && !(typeof data['connection_id'] === 'string' || data['connection_id'] instanceof String)) {
            throw new Error("Expected the field `connection_id` to be a primitive type in the JSON string but got " + data['connection_id']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}

SyncRequest.RequiredProperties = ["last_sync_at"];

/**
 * List of channel CIDs to sync
 * @member {Array.<String>} channel_cids
 */
SyncRequest.prototype['channel_cids'] = undefined;

/**
 * @member {String} client_id
 */
SyncRequest.prototype['client_id'] = undefined;

/**
 * @member {String} connection_id
 */
SyncRequest.prototype['connection_id'] = undefined;

/**
 * Date from which synchronization should happen
 * @member {Date} last_sync_at
 */
SyncRequest.prototype['last_sync_at'] = undefined;

/**
 * @member {module:model/UserObjectRequest} user
 */
SyncRequest.prototype['user'] = undefined;

/**
 * @member {String} user_id
 */
SyncRequest.prototype['user_id'] = undefined;

/**
 * If set to true this will start watching requested and newly added channels that user has access to. If error occurred with this option enabled and it is not an input error - channels will still be watched.
 * @member {Boolean} watch
 */
SyncRequest.prototype['watch'] = undefined;

/**
 * If set to true this will add 'inaccessible_cids' to response type
 * @member {Boolean} with_inaccessible_cids
 */
SyncRequest.prototype['with_inaccessible_cids'] = undefined;






export default SyncRequest;

