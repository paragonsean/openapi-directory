/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SortParam from './SortParam';

/**
 * The SearchRequest model module.
 * @module model/SearchRequest
 * @version v80.2.0
 */
class SearchRequest {
    /**
     * Constructs a new <code>SearchRequest</code>.
     * @alias module:model/SearchRequest
     * @param filterConditions {Object.<String, Object>} Channel filter conditions
     */
    constructor(filterConditions) { 
        
        SearchRequest.initialize(this, filterConditions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, filterConditions) { 
        obj['filter_conditions'] = filterConditions;
    }

    /**
     * Constructs a <code>SearchRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchRequest} obj Optional instance to populate.
     * @return {module:model/SearchRequest} The populated <code>SearchRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchRequest();

            if (data.hasOwnProperty('filter_conditions')) {
                obj['filter_conditions'] = ApiClient.convertToType(data['filter_conditions'], {'String': Object});
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('message_filter_conditions')) {
                obj['message_filter_conditions'] = ApiClient.convertToType(data['message_filter_conditions'], {'String': Object});
            }
            if (data.hasOwnProperty('next')) {
                obj['next'] = ApiClient.convertToType(data['next'], 'String');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = ApiClient.convertToType(data['sort'], [SortParam]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SearchRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['next'] && !(typeof data['next'] === 'string' || data['next'] instanceof String)) {
            throw new Error("Expected the field `next` to be a primitive type in the JSON string but got " + data['next']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        if (data['sort']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sort'])) {
                throw new Error("Expected the field `sort` to be an array in the JSON data but got " + data['sort']);
            }
            // validate the optional field `sort` (array)
            for (const item of data['sort']) {
                SortParam.validateJSON(item);
            };
        }

        return true;
    }


}

SearchRequest.RequiredProperties = ["filter_conditions"];

/**
 * Channel filter conditions
 * @member {Object.<String, Object>} filter_conditions
 */
SearchRequest.prototype['filter_conditions'] = undefined;

/**
 * Number of messages to return
 * @member {Number} limit
 */
SearchRequest.prototype['limit'] = undefined;

/**
 * Message filter conditions
 * @member {Object.<String, Object>} message_filter_conditions
 */
SearchRequest.prototype['message_filter_conditions'] = undefined;

/**
 * Pagination parameter. Cannot be used with non-zero offset.
 * @member {String} next
 */
SearchRequest.prototype['next'] = undefined;

/**
 * Pagination offset. Cannot be used with sort or next.
 * @member {Number} offset
 */
SearchRequest.prototype['offset'] = undefined;

/**
 * Search phrase
 * @member {String} query
 */
SearchRequest.prototype['query'] = undefined;

/**
 * Sort parameters. Cannot be used with non-zero offset
 * @member {Array.<module:model/SortParam>} sort
 */
SearchRequest.prototype['sort'] = undefined;






export default SearchRequest;

