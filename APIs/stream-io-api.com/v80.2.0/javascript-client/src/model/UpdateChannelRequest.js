/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelMemberRequest from './ChannelMemberRequest';
import ChannelRequest from './ChannelRequest';
import MessageRequest from './MessageRequest';
import UserObjectRequest from './UserObjectRequest';

/**
 * The UpdateChannelRequest model module.
 * @module model/UpdateChannelRequest
 * @version v80.2.0
 */
class UpdateChannelRequest {
    /**
     * Constructs a new <code>UpdateChannelRequest</code>.
     * @alias module:model/UpdateChannelRequest
     * @param addModerators {Array.<String>} List of user IDs to make channel moderators
     * @param demoteModerators {Array.<String>} List of user IDs to take away moderators status from
     * @param removeMembers {Array.<String>} List of user IDs to remove from the channel
     */
    constructor(addModerators, demoteModerators, removeMembers) { 
        
        UpdateChannelRequest.initialize(this, addModerators, demoteModerators, removeMembers);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, addModerators, demoteModerators, removeMembers) { 
        obj['add_moderators'] = addModerators;
        obj['demote_moderators'] = demoteModerators;
        obj['remove_members'] = removeMembers;
    }

    /**
     * Constructs a <code>UpdateChannelRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateChannelRequest} obj Optional instance to populate.
     * @return {module:model/UpdateChannelRequest} The populated <code>UpdateChannelRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateChannelRequest();

            if (data.hasOwnProperty('accept_invite')) {
                obj['accept_invite'] = ApiClient.convertToType(data['accept_invite'], 'Boolean');
            }
            if (data.hasOwnProperty('add_members')) {
                obj['add_members'] = ApiClient.convertToType(data['add_members'], [ChannelMemberRequest]);
            }
            if (data.hasOwnProperty('add_moderators')) {
                obj['add_moderators'] = ApiClient.convertToType(data['add_moderators'], ['String']);
            }
            if (data.hasOwnProperty('assign_roles')) {
                obj['assign_roles'] = ApiClient.convertToType(data['assign_roles'], [ChannelMemberRequest]);
            }
            if (data.hasOwnProperty('cooldown')) {
                obj['cooldown'] = ApiClient.convertToType(data['cooldown'], 'Number');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ChannelRequest.constructFromObject(data['data']);
            }
            if (data.hasOwnProperty('demote_moderators')) {
                obj['demote_moderators'] = ApiClient.convertToType(data['demote_moderators'], ['String']);
            }
            if (data.hasOwnProperty('hide_history')) {
                obj['hide_history'] = ApiClient.convertToType(data['hide_history'], 'Boolean');
            }
            if (data.hasOwnProperty('invites')) {
                obj['invites'] = ApiClient.convertToType(data['invites'], [ChannelMemberRequest]);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = MessageRequest.constructFromObject(data['message']);
            }
            if (data.hasOwnProperty('reject_invite')) {
                obj['reject_invite'] = ApiClient.convertToType(data['reject_invite'], 'Boolean');
            }
            if (data.hasOwnProperty('remove_members')) {
                obj['remove_members'] = ApiClient.convertToType(data['remove_members'], ['String']);
            }
            if (data.hasOwnProperty('skip_push')) {
                obj['skip_push'] = ApiClient.convertToType(data['skip_push'], 'Boolean');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = UserObjectRequest.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateChannelRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateChannelRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateChannelRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['add_members']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['add_members'])) {
                throw new Error("Expected the field `add_members` to be an array in the JSON data but got " + data['add_members']);
            }
            // validate the optional field `add_members` (array)
            for (const item of data['add_members']) {
                ChannelMemberRequest.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['add_moderators'])) {
            throw new Error("Expected the field `add_moderators` to be an array in the JSON data but got " + data['add_moderators']);
        }
        if (data['assign_roles']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['assign_roles'])) {
                throw new Error("Expected the field `assign_roles` to be an array in the JSON data but got " + data['assign_roles']);
            }
            // validate the optional field `assign_roles` (array)
            for (const item of data['assign_roles']) {
                ChannelMemberRequest.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['demote_moderators'])) {
            throw new Error("Expected the field `demote_moderators` to be an array in the JSON data but got " + data['demote_moderators']);
        }
        if (data['invites']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['invites'])) {
                throw new Error("Expected the field `invites` to be an array in the JSON data but got " + data['invites']);
            }
            // validate the optional field `invites` (array)
            for (const item of data['invites']) {
                ChannelMemberRequest.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['remove_members'])) {
            throw new Error("Expected the field `remove_members` to be an array in the JSON data but got " + data['remove_members']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}

UpdateChannelRequest.RequiredProperties = ["add_moderators", "demote_moderators", "remove_members"];

/**
 * Set to `true` to accept the invite
 * @member {Boolean} accept_invite
 */
UpdateChannelRequest.prototype['accept_invite'] = undefined;

/**
 * List of user IDs to add to the channel
 * @member {Array.<module:model/ChannelMemberRequest>} add_members
 */
UpdateChannelRequest.prototype['add_members'] = undefined;

/**
 * List of user IDs to make channel moderators
 * @member {Array.<String>} add_moderators
 */
UpdateChannelRequest.prototype['add_moderators'] = undefined;

/**
 * List of channel member role assignments. If any specified user is not part of the channel, the request will fail
 * @member {Array.<module:model/ChannelMemberRequest>} assign_roles
 */
UpdateChannelRequest.prototype['assign_roles'] = undefined;

/**
 * Sets cool down period for the channel in seconds
 * @member {Number} cooldown
 */
UpdateChannelRequest.prototype['cooldown'] = undefined;

/**
 * @member {module:model/ChannelRequest} data
 */
UpdateChannelRequest.prototype['data'] = undefined;

/**
 * List of user IDs to take away moderators status from
 * @member {Array.<String>} demote_moderators
 */
UpdateChannelRequest.prototype['demote_moderators'] = undefined;

/**
 * Set to `true` to hide channel's history when adding new members
 * @member {Boolean} hide_history
 */
UpdateChannelRequest.prototype['hide_history'] = undefined;

/**
 * List of user IDs to invite to the channel
 * @member {Array.<module:model/ChannelMemberRequest>} invites
 */
UpdateChannelRequest.prototype['invites'] = undefined;

/**
 * @member {module:model/MessageRequest} message
 */
UpdateChannelRequest.prototype['message'] = undefined;

/**
 * Set to `true` to reject the invite
 * @member {Boolean} reject_invite
 */
UpdateChannelRequest.prototype['reject_invite'] = undefined;

/**
 * List of user IDs to remove from the channel
 * @member {Array.<String>} remove_members
 */
UpdateChannelRequest.prototype['remove_members'] = undefined;

/**
 * When `message` is set disables all push notifications for it
 * @member {Boolean} skip_push
 */
UpdateChannelRequest.prototype['skip_push'] = undefined;

/**
 * @member {module:model/UserObjectRequest} user
 */
UpdateChannelRequest.prototype['user'] = undefined;

/**
 * @member {String} user_id
 */
UpdateChannelRequest.prototype['user_id'] = undefined;






export default UpdateChannelRequest;

