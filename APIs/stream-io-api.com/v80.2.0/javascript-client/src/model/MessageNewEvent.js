/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Message from './Message';
import UserObject from './UserObject';

/**
 * The MessageNewEvent model module.
 * @module model/MessageNewEvent
 * @version v80.2.0
 */
class MessageNewEvent {
    /**
     * Constructs a new <code>MessageNewEvent</code>.
     * @alias module:model/MessageNewEvent
     * @param channelId {String} 
     * @param channelType {String} 
     * @param cid {String} 
     * @param createdAt {Date} 
     * @param type {String} 
     * @param watcherCount {Number} 
     */
    constructor(channelId, channelType, cid, createdAt, type, watcherCount) { 
        
        MessageNewEvent.initialize(this, channelId, channelType, cid, createdAt, type, watcherCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, channelId, channelType, cid, createdAt, type, watcherCount) { 
        obj['channel_id'] = channelId;
        obj['channel_type'] = channelType;
        obj['cid'] = cid;
        obj['created_at'] = createdAt;
        obj['type'] = type || 'message.new';
        obj['watcher_count'] = watcherCount;
    }

    /**
     * Constructs a <code>MessageNewEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessageNewEvent} obj Optional instance to populate.
     * @return {module:model/MessageNewEvent} The populated <code>MessageNewEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessageNewEvent();

            if (data.hasOwnProperty('channel_id')) {
                obj['channel_id'] = ApiClient.convertToType(data['channel_id'], 'String');
            }
            if (data.hasOwnProperty('channel_type')) {
                obj['channel_type'] = ApiClient.convertToType(data['channel_type'], 'String');
            }
            if (data.hasOwnProperty('cid')) {
                obj['cid'] = ApiClient.convertToType(data['cid'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = Message.constructFromObject(data['message']);
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = ApiClient.convertToType(data['team'], 'String');
            }
            if (data.hasOwnProperty('thread_participants')) {
                obj['thread_participants'] = ApiClient.convertToType(data['thread_participants'], [UserObject]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = UserObject.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('watcher_count')) {
                obj['watcher_count'] = ApiClient.convertToType(data['watcher_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MessageNewEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MessageNewEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MessageNewEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['channel_id'] && !(typeof data['channel_id'] === 'string' || data['channel_id'] instanceof String)) {
            throw new Error("Expected the field `channel_id` to be a primitive type in the JSON string but got " + data['channel_id']);
        }
        // ensure the json data is a string
        if (data['channel_type'] && !(typeof data['channel_type'] === 'string' || data['channel_type'] instanceof String)) {
            throw new Error("Expected the field `channel_type` to be a primitive type in the JSON string but got " + data['channel_type']);
        }
        // ensure the json data is a string
        if (data['cid'] && !(typeof data['cid'] === 'string' || data['cid'] instanceof String)) {
            throw new Error("Expected the field `cid` to be a primitive type in the JSON string but got " + data['cid']);
        }
        // ensure the json data is a string
        if (data['team'] && !(typeof data['team'] === 'string' || data['team'] instanceof String)) {
            throw new Error("Expected the field `team` to be a primitive type in the JSON string but got " + data['team']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['thread_participants'])) {
            throw new Error("Expected the field `thread_participants` to be an array in the JSON data but got " + data['thread_participants']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

MessageNewEvent.RequiredProperties = ["channel_id", "channel_type", "cid", "created_at", "type", "watcher_count"];

/**
 * @member {String} channel_id
 */
MessageNewEvent.prototype['channel_id'] = undefined;

/**
 * @member {String} channel_type
 */
MessageNewEvent.prototype['channel_type'] = undefined;

/**
 * @member {String} cid
 */
MessageNewEvent.prototype['cid'] = undefined;

/**
 * @member {Date} created_at
 */
MessageNewEvent.prototype['created_at'] = undefined;

/**
 * @member {module:model/Message} message
 */
MessageNewEvent.prototype['message'] = undefined;

/**
 * @member {String} team
 */
MessageNewEvent.prototype['team'] = undefined;

/**
 * @member {Array.<module:model/UserObject>} thread_participants
 */
MessageNewEvent.prototype['thread_participants'] = undefined;

/**
 * @member {String} type
 * @default 'message.new'
 */
MessageNewEvent.prototype['type'] = 'message.new';

/**
 * @member {module:model/UserObject} user
 */
MessageNewEvent.prototype['user'] = undefined;

/**
 * @member {Number} watcher_count
 */
MessageNewEvent.prototype['watcher_count'] = undefined;






export default MessageNewEvent;

