/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImportTaskHistory model module.
 * @module model/ImportTaskHistory
 * @version v80.2.0
 */
class ImportTaskHistory {
    /**
     * Constructs a new <code>ImportTaskHistory</code>.
     * @alias module:model/ImportTaskHistory
     * @param createdAt {Date} 
     * @param nextState {String} 
     * @param prevState {String} 
     */
    constructor(createdAt, nextState, prevState) { 
        
        ImportTaskHistory.initialize(this, createdAt, nextState, prevState);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, nextState, prevState) { 
        obj['created_at'] = createdAt;
        obj['next_state'] = nextState;
        obj['prev_state'] = prevState;
    }

    /**
     * Constructs a <code>ImportTaskHistory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportTaskHistory} obj Optional instance to populate.
     * @return {module:model/ImportTaskHistory} The populated <code>ImportTaskHistory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportTaskHistory();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('next_state')) {
                obj['next_state'] = ApiClient.convertToType(data['next_state'], 'String');
            }
            if (data.hasOwnProperty('prev_state')) {
                obj['prev_state'] = ApiClient.convertToType(data['prev_state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportTaskHistory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportTaskHistory</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImportTaskHistory.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['next_state'] && !(typeof data['next_state'] === 'string' || data['next_state'] instanceof String)) {
            throw new Error("Expected the field `next_state` to be a primitive type in the JSON string but got " + data['next_state']);
        }
        // ensure the json data is a string
        if (data['prev_state'] && !(typeof data['prev_state'] === 'string' || data['prev_state'] instanceof String)) {
            throw new Error("Expected the field `prev_state` to be a primitive type in the JSON string but got " + data['prev_state']);
        }

        return true;
    }


}

ImportTaskHistory.RequiredProperties = ["created_at", "next_state", "prev_state"];

/**
 * @member {Date} created_at
 */
ImportTaskHistory.prototype['created_at'] = undefined;

/**
 * @member {String} next_state
 */
ImportTaskHistory.prototype['next_state'] = undefined;

/**
 * @member {String} prev_state
 */
ImportTaskHistory.prototype['prev_state'] = undefined;






export default ImportTaskHistory;

