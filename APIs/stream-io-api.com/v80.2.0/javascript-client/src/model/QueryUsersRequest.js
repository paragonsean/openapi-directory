/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SortParam from './SortParam';
import UserObject from './UserObject';

/**
 * The QueryUsersRequest model module.
 * @module model/QueryUsersRequest
 * @version v80.2.0
 */
class QueryUsersRequest {
    /**
     * Constructs a new <code>QueryUsersRequest</code>.
     * @alias module:model/QueryUsersRequest
     * @param filterConditions {Object.<String, Object>} User filters
     * @param sort {Array.<module:model/SortParam>} Array of sort parameters
     */
    constructor(filterConditions, sort) { 
        
        QueryUsersRequest.initialize(this, filterConditions, sort);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, filterConditions, sort) { 
        obj['filter_conditions'] = filterConditions;
        obj['sort'] = sort;
    }

    /**
     * Constructs a <code>QueryUsersRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryUsersRequest} obj Optional instance to populate.
     * @return {module:model/QueryUsersRequest} The populated <code>QueryUsersRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryUsersRequest();

            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('connection_id')) {
                obj['connection_id'] = ApiClient.convertToType(data['connection_id'], 'String');
            }
            if (data.hasOwnProperty('filter_conditions')) {
                obj['filter_conditions'] = ApiClient.convertToType(data['filter_conditions'], {'String': Object});
            }
            if (data.hasOwnProperty('id_gt')) {
                obj['id_gt'] = ApiClient.convertToType(data['id_gt'], 'String');
            }
            if (data.hasOwnProperty('id_gte')) {
                obj['id_gte'] = ApiClient.convertToType(data['id_gte'], 'String');
            }
            if (data.hasOwnProperty('id_lt')) {
                obj['id_lt'] = ApiClient.convertToType(data['id_lt'], 'String');
            }
            if (data.hasOwnProperty('id_lte')) {
                obj['id_lte'] = ApiClient.convertToType(data['id_lte'], 'String');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('presence')) {
                obj['presence'] = ApiClient.convertToType(data['presence'], 'Boolean');
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = ApiClient.convertToType(data['sort'], [SortParam]);
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = UserObject.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryUsersRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryUsersRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QueryUsersRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['connection_id'] && !(typeof data['connection_id'] === 'string' || data['connection_id'] instanceof String)) {
            throw new Error("Expected the field `connection_id` to be a primitive type in the JSON string but got " + data['connection_id']);
        }
        // ensure the json data is a string
        if (data['id_gt'] && !(typeof data['id_gt'] === 'string' || data['id_gt'] instanceof String)) {
            throw new Error("Expected the field `id_gt` to be a primitive type in the JSON string but got " + data['id_gt']);
        }
        // ensure the json data is a string
        if (data['id_gte'] && !(typeof data['id_gte'] === 'string' || data['id_gte'] instanceof String)) {
            throw new Error("Expected the field `id_gte` to be a primitive type in the JSON string but got " + data['id_gte']);
        }
        // ensure the json data is a string
        if (data['id_lt'] && !(typeof data['id_lt'] === 'string' || data['id_lt'] instanceof String)) {
            throw new Error("Expected the field `id_lt` to be a primitive type in the JSON string but got " + data['id_lt']);
        }
        // ensure the json data is a string
        if (data['id_lte'] && !(typeof data['id_lte'] === 'string' || data['id_lte'] instanceof String)) {
            throw new Error("Expected the field `id_lte` to be a primitive type in the JSON string but got " + data['id_lte']);
        }
        if (data['sort']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sort'])) {
                throw new Error("Expected the field `sort` to be an array in the JSON data but got " + data['sort']);
            }
            // validate the optional field `sort` (array)
            for (const item of data['sort']) {
                SortParam.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}

QueryUsersRequest.RequiredProperties = ["filter_conditions", "sort"];

/**
 * @member {String} client_id
 */
QueryUsersRequest.prototype['client_id'] = undefined;

/**
 * @member {String} connection_id
 */
QueryUsersRequest.prototype['connection_id'] = undefined;

/**
 * User filters
 * @member {Object.<String, Object>} filter_conditions
 */
QueryUsersRequest.prototype['filter_conditions'] = undefined;

/**
 * @member {String} id_gt
 */
QueryUsersRequest.prototype['id_gt'] = undefined;

/**
 * @member {String} id_gte
 */
QueryUsersRequest.prototype['id_gte'] = undefined;

/**
 * @member {String} id_lt
 */
QueryUsersRequest.prototype['id_lt'] = undefined;

/**
 * @member {String} id_lte
 */
QueryUsersRequest.prototype['id_lte'] = undefined;

/**
 * @member {Number} limit
 */
QueryUsersRequest.prototype['limit'] = undefined;

/**
 * @member {Number} offset
 */
QueryUsersRequest.prototype['offset'] = undefined;

/**
 * Request user presence status
 * @member {Boolean} presence
 */
QueryUsersRequest.prototype['presence'] = undefined;

/**
 * Array of sort parameters
 * @member {Array.<module:model/SortParam>} sort
 */
QueryUsersRequest.prototype['sort'] = undefined;

/**
 * @member {module:model/UserObject} user
 */
QueryUsersRequest.prototype['user'] = undefined;

/**
 * @member {String} user_id
 */
QueryUsersRequest.prototype['user_id'] = undefined;






export default QueryUsersRequest;

