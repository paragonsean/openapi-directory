/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImageSizeRequest model module.
 * @module model/ImageSizeRequest
 * @version v80.2.0
 */
class ImageSizeRequest {
    /**
     * Constructs a new <code>ImageSizeRequest</code>.
     * @alias module:model/ImageSizeRequest
     */
    constructor() { 
        
        ImageSizeRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageSizeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageSizeRequest} obj Optional instance to populate.
     * @return {module:model/ImageSizeRequest} The populated <code>ImageSizeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageSizeRequest();

            if (data.hasOwnProperty('crop')) {
                obj['crop'] = ApiClient.convertToType(data['crop'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('resize')) {
                obj['resize'] = ApiClient.convertToType(data['resize'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageSizeRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageSizeRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['crop'] && !(typeof data['crop'] === 'string' || data['crop'] instanceof String)) {
            throw new Error("Expected the field `crop` to be a primitive type in the JSON string but got " + data['crop']);
        }
        // ensure the json data is a string
        if (data['resize'] && !(typeof data['resize'] === 'string' || data['resize'] instanceof String)) {
            throw new Error("Expected the field `resize` to be a primitive type in the JSON string but got " + data['resize']);
        }

        return true;
    }


}



/**
 * Crop mode
 * @member {module:model/ImageSizeRequest.CropEnum} crop
 */
ImageSizeRequest.prototype['crop'] = undefined;

/**
 * Target image height
 * @member {Number} height
 */
ImageSizeRequest.prototype['height'] = undefined;

/**
 * Resize method
 * @member {module:model/ImageSizeRequest.ResizeEnum} resize
 */
ImageSizeRequest.prototype['resize'] = undefined;

/**
 * Target image width
 * @member {Number} width
 */
ImageSizeRequest.prototype['width'] = undefined;





/**
 * Allowed values for the <code>crop</code> property.
 * @enum {String}
 * @readonly
 */
ImageSizeRequest['CropEnum'] = {

    /**
     * value: "top"
     * @const
     */
    "top": "top",

    /**
     * value: "bottom"
     * @const
     */
    "bottom": "bottom",

    /**
     * value: "left"
     * @const
     */
    "left": "left",

    /**
     * value: "right"
     * @const
     */
    "right": "right",

    /**
     * value: "center"
     * @const
     */
    "center": "center"
};


/**
 * Allowed values for the <code>resize</code> property.
 * @enum {String}
 * @readonly
 */
ImageSizeRequest['ResizeEnum'] = {

    /**
     * value: "clip"
     * @const
     */
    "clip": "clip",

    /**
     * value: "crop"
     * @const
     */
    "crop": "crop",

    /**
     * value: "scale"
     * @const
     */
    "scale": "scale",

    /**
     * value: "fill"
     * @const
     */
    "fill": "fill"
};



export default ImageSizeRequest;

