/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserObject from './UserObject';

/**
 * The Reaction model module.
 * @module model/Reaction
 * @version v80.2.0
 */
class Reaction {
    /**
     * Constructs a new <code>Reaction</code>.
     * Represents user reaction to a message
     * @alias module:model/Reaction
     * @extends Object
     * @param createdAt {Date} Date/time of creation
     * @param messageId {String} ID of a message user reacted to
     * @param score {Number} Reaction score. If not specified reaction has score of 1
     * @param type {String} The type of reaction (e.g. 'like', 'laugh', 'wow')
     * @param updatedAt {Date} Date/time of the last update
     */
    constructor(createdAt, messageId, score, type, updatedAt) { 
        
        Reaction.initialize(this, createdAt, messageId, score, type, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, messageId, score, type, updatedAt) { 
        obj['created_at'] = createdAt;
        obj['message_id'] = messageId;
        obj['score'] = score;
        obj['type'] = type;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>Reaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Reaction} obj Optional instance to populate.
     * @return {module:model/Reaction} The populated <code>Reaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Reaction();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('message_id')) {
                obj['message_id'] = ApiClient.convertToType(data['message_id'], 'String');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = UserObject.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Reaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Reaction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Reaction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['message_id'] && !(typeof data['message_id'] === 'string' || data['message_id'] instanceof String)) {
            throw new Error("Expected the field `message_id` to be a primitive type in the JSON string but got " + data['message_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}

Reaction.RequiredProperties = ["created_at", "message_id", "score", "type", "updated_at"];

/**
 * Date/time of creation
 * @member {Date} created_at
 */
Reaction.prototype['created_at'] = undefined;

/**
 * ID of a message user reacted to
 * @member {String} message_id
 */
Reaction.prototype['message_id'] = undefined;

/**
 * Reaction score. If not specified reaction has score of 1
 * @member {Number} score
 */
Reaction.prototype['score'] = undefined;

/**
 * The type of reaction (e.g. 'like', 'laugh', 'wow')
 * @member {String} type
 */
Reaction.prototype['type'] = undefined;

/**
 * Date/time of the last update
 * @member {Date} updated_at
 */
Reaction.prototype['updated_at'] = undefined;

/**
 * @member {module:model/UserObject} user
 */
Reaction.prototype['user'] = undefined;

/**
 * ID of a user who reacted to a message
 * @member {String} user_id
 */
Reaction.prototype['user_id'] = undefined;






export default Reaction;

