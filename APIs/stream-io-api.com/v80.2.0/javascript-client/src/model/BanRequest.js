/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserObjectRequest from './UserObjectRequest';

/**
 * The BanRequest model module.
 * @module model/BanRequest
 * @version v80.2.0
 */
class BanRequest {
    /**
     * Constructs a new <code>BanRequest</code>.
     * @alias module:model/BanRequest
     * @param targetUserId {String} ID of user to ban
     */
    constructor(targetUserId) { 
        
        BanRequest.initialize(this, targetUserId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, targetUserId) { 
        obj['target_user_id'] = targetUserId;
    }

    /**
     * Constructs a <code>BanRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BanRequest} obj Optional instance to populate.
     * @return {module:model/BanRequest} The populated <code>BanRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BanRequest();

            if (data.hasOwnProperty('banned_by')) {
                obj['banned_by'] = UserObjectRequest.constructFromObject(data['banned_by']);
            }
            if (data.hasOwnProperty('banned_by_id')) {
                obj['banned_by_id'] = ApiClient.convertToType(data['banned_by_id'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ip_ban')) {
                obj['ip_ban'] = ApiClient.convertToType(data['ip_ban'], 'Boolean');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('shadow')) {
                obj['shadow'] = ApiClient.convertToType(data['shadow'], 'Boolean');
            }
            if (data.hasOwnProperty('target_user_id')) {
                obj['target_user_id'] = ApiClient.convertToType(data['target_user_id'], 'String');
            }
            if (data.hasOwnProperty('timeout')) {
                obj['timeout'] = ApiClient.convertToType(data['timeout'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = UserObjectRequest.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BanRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BanRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BanRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['banned_by_id'] && !(typeof data['banned_by_id'] === 'string' || data['banned_by_id'] instanceof String)) {
            throw new Error("Expected the field `banned_by_id` to be a primitive type in the JSON string but got " + data['banned_by_id']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['target_user_id'] && !(typeof data['target_user_id'] === 'string' || data['target_user_id'] instanceof String)) {
            throw new Error("Expected the field `target_user_id` to be a primitive type in the JSON string but got " + data['target_user_id']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}

BanRequest.RequiredProperties = ["target_user_id"];

/**
 * @member {module:model/UserObjectRequest} banned_by
 */
BanRequest.prototype['banned_by'] = undefined;

/**
 * User ID who issued a ban
 * @member {String} banned_by_id
 */
BanRequest.prototype['banned_by_id'] = undefined;

/**
 * Channel ID to ban user in
 * @member {String} id
 */
BanRequest.prototype['id'] = undefined;

/**
 * Whether to perform IP ban or not
 * @member {Boolean} ip_ban
 */
BanRequest.prototype['ip_ban'] = undefined;

/**
 * Ban reason
 * @member {String} reason
 */
BanRequest.prototype['reason'] = undefined;

/**
 * Whether to perform shadow ban or not
 * @member {Boolean} shadow
 */
BanRequest.prototype['shadow'] = undefined;

/**
 * ID of user to ban
 * @member {String} target_user_id
 */
BanRequest.prototype['target_user_id'] = undefined;

/**
 * Timeout of ban in minutes. User will be unbanned after this period of time
 * @member {Number} timeout
 */
BanRequest.prototype['timeout'] = undefined;

/**
 * Channel type to ban user in
 * @member {String} type
 */
BanRequest.prototype['type'] = undefined;

/**
 * @member {module:model/UserObjectRequest} user
 */
BanRequest.prototype['user'] = undefined;

/**
 * @member {String} user_id
 */
BanRequest.prototype['user_id'] = undefined;






export default BanRequest;

