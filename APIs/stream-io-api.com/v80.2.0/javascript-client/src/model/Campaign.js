/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attachment from './Attachment';

/**
 * The Campaign model module.
 * @module model/Campaign
 * @version v80.2.0
 */
class Campaign {
    /**
     * Constructs a new <code>Campaign</code>.
     * @alias module:model/Campaign
     * @param attachments {Array.<module:model/Attachment>} 
     * @param channelType {String} 
     * @param createdAt {Date} 
     * @param defaults {Object.<String, String>} 
     * @param description {String} 
     * @param id {String} 
     * @param name {String} 
     * @param segmentId {String} 
     * @param senderId {String} 
     * @param text {String} 
     * @param updatedAt {Date} 
     */
    constructor(attachments, channelType, createdAt, defaults, description, id, name, segmentId, senderId, text, updatedAt) { 
        
        Campaign.initialize(this, attachments, channelType, createdAt, defaults, description, id, name, segmentId, senderId, text, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attachments, channelType, createdAt, defaults, description, id, name, segmentId, senderId, text, updatedAt) { 
        obj['attachments'] = attachments;
        obj['channel_type'] = channelType;
        obj['created_at'] = createdAt;
        obj['defaults'] = defaults;
        obj['description'] = description;
        obj['id'] = id;
        obj['name'] = name;
        obj['segment_id'] = segmentId;
        obj['sender_id'] = senderId;
        obj['text'] = text;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>Campaign</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Campaign} obj Optional instance to populate.
     * @return {module:model/Campaign} The populated <code>Campaign</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Campaign();

            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], [Attachment]);
            }
            if (data.hasOwnProperty('channel_type')) {
                obj['channel_type'] = ApiClient.convertToType(data['channel_type'], 'String');
            }
            if (data.hasOwnProperty('completed_at')) {
                obj['completed_at'] = ApiClient.convertToType(data['completed_at'], 'Date');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('defaults')) {
                obj['defaults'] = ApiClient.convertToType(data['defaults'], {'String': 'String'});
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], 'String');
            }
            if (data.hasOwnProperty('errored_messages')) {
                obj['errored_messages'] = ApiClient.convertToType(data['errored_messages'], 'Number');
            }
            if (data.hasOwnProperty('failed_at')) {
                obj['failed_at'] = ApiClient.convertToType(data['failed_at'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resumed_at')) {
                obj['resumed_at'] = ApiClient.convertToType(data['resumed_at'], 'Date');
            }
            if (data.hasOwnProperty('scheduled_at')) {
                obj['scheduled_at'] = ApiClient.convertToType(data['scheduled_at'], 'Date');
            }
            if (data.hasOwnProperty('scheduled_for')) {
                obj['scheduled_for'] = ApiClient.convertToType(data['scheduled_for'], 'Date');
            }
            if (data.hasOwnProperty('segment_id')) {
                obj['segment_id'] = ApiClient.convertToType(data['segment_id'], 'String');
            }
            if (data.hasOwnProperty('sender_id')) {
                obj['sender_id'] = ApiClient.convertToType(data['sender_id'], 'String');
            }
            if (data.hasOwnProperty('sent_messages')) {
                obj['sent_messages'] = ApiClient.convertToType(data['sent_messages'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('stopped_at')) {
                obj['stopped_at'] = ApiClient.convertToType(data['stopped_at'], 'Date');
            }
            if (data.hasOwnProperty('task_id')) {
                obj['task_id'] = ApiClient.convertToType(data['task_id'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Campaign</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Campaign</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Campaign.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['attachments'])) {
            throw new Error("Expected the field `attachments` to be an array in the JSON data but got " + data['attachments']);
        }
        // ensure the json data is a string
        if (data['channel_type'] && !(typeof data['channel_type'] === 'string' || data['channel_type'] instanceof String)) {
            throw new Error("Expected the field `channel_type` to be a primitive type in the JSON string but got " + data['channel_type']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['details'] && !(typeof data['details'] === 'string' || data['details'] instanceof String)) {
            throw new Error("Expected the field `details` to be a primitive type in the JSON string but got " + data['details']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['segment_id'] && !(typeof data['segment_id'] === 'string' || data['segment_id'] instanceof String)) {
            throw new Error("Expected the field `segment_id` to be a primitive type in the JSON string but got " + data['segment_id']);
        }
        // ensure the json data is a string
        if (data['sender_id'] && !(typeof data['sender_id'] === 'string' || data['sender_id'] instanceof String)) {
            throw new Error("Expected the field `sender_id` to be a primitive type in the JSON string but got " + data['sender_id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['task_id'] && !(typeof data['task_id'] === 'string' || data['task_id'] instanceof String)) {
            throw new Error("Expected the field `task_id` to be a primitive type in the JSON string but got " + data['task_id']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}

Campaign.RequiredProperties = ["attachments", "channel_type", "created_at", "defaults", "description", "id", "name", "segment_id", "sender_id", "text", "updated_at"];

/**
 * @member {Array.<module:model/Attachment>} attachments
 */
Campaign.prototype['attachments'] = undefined;

/**
 * @member {String} channel_type
 */
Campaign.prototype['channel_type'] = undefined;

/**
 * @member {Date} completed_at
 */
Campaign.prototype['completed_at'] = undefined;

/**
 * @member {Date} created_at
 */
Campaign.prototype['created_at'] = undefined;

/**
 * @member {Object.<String, String>} defaults
 */
Campaign.prototype['defaults'] = undefined;

/**
 * @member {String} description
 */
Campaign.prototype['description'] = undefined;

/**
 * @member {String} details
 */
Campaign.prototype['details'] = undefined;

/**
 * @member {Number} errored_messages
 */
Campaign.prototype['errored_messages'] = undefined;

/**
 * @member {Date} failed_at
 */
Campaign.prototype['failed_at'] = undefined;

/**
 * @member {String} id
 */
Campaign.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Campaign.prototype['name'] = undefined;

/**
 * @member {Date} resumed_at
 */
Campaign.prototype['resumed_at'] = undefined;

/**
 * @member {Date} scheduled_at
 */
Campaign.prototype['scheduled_at'] = undefined;

/**
 * @member {Date} scheduled_for
 */
Campaign.prototype['scheduled_for'] = undefined;

/**
 * @member {String} segment_id
 */
Campaign.prototype['segment_id'] = undefined;

/**
 * @member {String} sender_id
 */
Campaign.prototype['sender_id'] = undefined;

/**
 * @member {Number} sent_messages
 */
Campaign.prototype['sent_messages'] = undefined;

/**
 * @member {String} status
 */
Campaign.prototype['status'] = undefined;

/**
 * @member {Date} stopped_at
 */
Campaign.prototype['stopped_at'] = undefined;

/**
 * @member {String} task_id
 */
Campaign.prototype['task_id'] = undefined;

/**
 * @member {String} text
 */
Campaign.prototype['text'] = undefined;

/**
 * @member {Date} updated_at
 */
Campaign.prototype['updated_at'] = undefined;






export default Campaign;

