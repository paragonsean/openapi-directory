/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeleteUsersRequest model module.
 * @module model/DeleteUsersRequest
 * @version v80.2.0
 */
class DeleteUsersRequest {
    /**
     * Constructs a new <code>DeleteUsersRequest</code>.
     * @alias module:model/DeleteUsersRequest
     * @param userIds {Array.<String>} IDs of users to delete
     */
    constructor(userIds) { 
        
        DeleteUsersRequest.initialize(this, userIds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, userIds) { 
        obj['user_ids'] = userIds;
    }

    /**
     * Constructs a <code>DeleteUsersRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeleteUsersRequest} obj Optional instance to populate.
     * @return {module:model/DeleteUsersRequest} The populated <code>DeleteUsersRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeleteUsersRequest();

            if (data.hasOwnProperty('conversations')) {
                obj['conversations'] = ApiClient.convertToType(data['conversations'], 'String');
            }
            if (data.hasOwnProperty('messages')) {
                obj['messages'] = ApiClient.convertToType(data['messages'], 'String');
            }
            if (data.hasOwnProperty('new_channel_owner_id')) {
                obj['new_channel_owner_id'] = ApiClient.convertToType(data['new_channel_owner_id'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
            if (data.hasOwnProperty('user_ids')) {
                obj['user_ids'] = ApiClient.convertToType(data['user_ids'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeleteUsersRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeleteUsersRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeleteUsersRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['conversations'] && !(typeof data['conversations'] === 'string' || data['conversations'] instanceof String)) {
            throw new Error("Expected the field `conversations` to be a primitive type in the JSON string but got " + data['conversations']);
        }
        // ensure the json data is a string
        if (data['messages'] && !(typeof data['messages'] === 'string' || data['messages'] instanceof String)) {
            throw new Error("Expected the field `messages` to be a primitive type in the JSON string but got " + data['messages']);
        }
        // ensure the json data is a string
        if (data['new_channel_owner_id'] && !(typeof data['new_channel_owner_id'] === 'string' || data['new_channel_owner_id'] instanceof String)) {
            throw new Error("Expected the field `new_channel_owner_id` to be a primitive type in the JSON string but got " + data['new_channel_owner_id']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['user_ids'])) {
            throw new Error("Expected the field `user_ids` to be an array in the JSON data but got " + data['user_ids']);
        }

        return true;
    }


}

DeleteUsersRequest.RequiredProperties = ["user_ids"];

/**
 * Conversation channels delete mode. Conversation channel is any channel which only has two members one of which is the user being deleted.  * null or empty string - doesn't delete any conversation channels * soft - marks all conversation channels as deleted (same effect as Delete Channels with 'hard' option disabled) * hard - deletes channel and all its data completely including messages (same effect as Delete Channels with 'hard' option enabled) 
 * @member {module:model/DeleteUsersRequest.ConversationsEnum} conversations
 */
DeleteUsersRequest.prototype['conversations'] = undefined;

/**
 * Message delete mode.  * null or empty string - doesn't delete user messages * soft - marks all user messages as deleted without removing any related message data * pruning - marks all user messages as deleted, nullifies message information and removes some message data such as reactions and flags * hard - deletes messages completely with all related information 
 * @member {module:model/DeleteUsersRequest.MessagesEnum} messages
 */
DeleteUsersRequest.prototype['messages'] = undefined;

/**
 * @member {String} new_channel_owner_id
 */
DeleteUsersRequest.prototype['new_channel_owner_id'] = undefined;

/**
 * User delete mode.  * soft - marks user as deleted and retains all user data * pruning - marks user as deleted and nullifies user information * hard - deletes user completely. Requires 'hard' option for messages and conversations as well 
 * @member {module:model/DeleteUsersRequest.UserEnum} user
 */
DeleteUsersRequest.prototype['user'] = undefined;

/**
 * IDs of users to delete
 * @member {Array.<String>} user_ids
 */
DeleteUsersRequest.prototype['user_ids'] = undefined;





/**
 * Allowed values for the <code>conversations</code> property.
 * @enum {String}
 * @readonly
 */
DeleteUsersRequest['ConversationsEnum'] = {

    /**
     * value: "soft"
     * @const
     */
    "soft": "soft",

    /**
     * value: "hard"
     * @const
     */
    "hard": "hard"
};


/**
 * Allowed values for the <code>messages</code> property.
 * @enum {String}
 * @readonly
 */
DeleteUsersRequest['MessagesEnum'] = {

    /**
     * value: "soft"
     * @const
     */
    "soft": "soft",

    /**
     * value: "pruning"
     * @const
     */
    "pruning": "pruning",

    /**
     * value: "hard"
     * @const
     */
    "hard": "hard"
};


/**
 * Allowed values for the <code>user</code> property.
 * @enum {String}
 * @readonly
 */
DeleteUsersRequest['UserEnum'] = {

    /**
     * value: "soft"
     * @const
     */
    "soft": "soft",

    /**
     * value: "pruning"
     * @const
     */
    "pruning": "pruning",

    /**
     * value: "hard"
     * @const
     */
    "hard": "hard"
};



export default DeleteUsersRequest;

