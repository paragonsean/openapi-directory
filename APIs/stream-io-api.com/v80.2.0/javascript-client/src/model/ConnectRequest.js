/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceFields from './DeviceFields';
import UserObject from './UserObject';

/**
 * The ConnectRequest model module.
 * @module model/ConnectRequest
 * @version v80.2.0
 */
class ConnectRequest {
    /**
     * Constructs a new <code>ConnectRequest</code>.
     * @alias module:model/ConnectRequest
     * @param userDetails {module:model/UserObject} 
     */
    constructor(userDetails) { 
        
        ConnectRequest.initialize(this, userDetails);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, userDetails) { 
        obj['user_details'] = userDetails;
    }

    /**
     * Constructs a <code>ConnectRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectRequest} obj Optional instance to populate.
     * @return {module:model/ConnectRequest} The populated <code>ConnectRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectRequest();

            if (data.hasOwnProperty('device')) {
                obj['device'] = DeviceFields.constructFromObject(data['device']);
            }
            if (data.hasOwnProperty('user_details')) {
                obj['user_details'] = UserObject.constructFromObject(data['user_details']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConnectRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `device`
        if (data['device']) { // data not null
          DeviceFields.validateJSON(data['device']);
        }

        return true;
    }


}

ConnectRequest.RequiredProperties = ["user_details"];

/**
 * @member {module:model/DeviceFields} device
 */
ConnectRequest.prototype['device'] = undefined;

/**
 * @member {module:model/UserObject} user_details
 */
ConnectRequest.prototype['user_details'] = undefined;






export default ConnectRequest;

