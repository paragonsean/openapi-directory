/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageSize from './ImageSize';

/**
 * The ImageUploadResponse model module.
 * @module model/ImageUploadResponse
 * @version v80.2.0
 */
class ImageUploadResponse {
    /**
     * Constructs a new <code>ImageUploadResponse</code>.
     * @alias module:model/ImageUploadResponse
     * @param duration {String} 
     */
    constructor(duration) { 
        
        ImageUploadResponse.initialize(this, duration);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, duration) { 
        obj['duration'] = duration;
    }

    /**
     * Constructs a <code>ImageUploadResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageUploadResponse} obj Optional instance to populate.
     * @return {module:model/ImageUploadResponse} The populated <code>ImageUploadResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageUploadResponse();

            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('file')) {
                obj['file'] = ApiClient.convertToType(data['file'], 'String');
            }
            if (data.hasOwnProperty('thumb_url')) {
                obj['thumb_url'] = ApiClient.convertToType(data['thumb_url'], 'String');
            }
            if (data.hasOwnProperty('upload_sizes')) {
                obj['upload_sizes'] = ApiClient.convertToType(data['upload_sizes'], [ImageSize]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageUploadResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageUploadResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImageUploadResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // ensure the json data is a string
        if (data['file'] && !(typeof data['file'] === 'string' || data['file'] instanceof String)) {
            throw new Error("Expected the field `file` to be a primitive type in the JSON string but got " + data['file']);
        }
        // ensure the json data is a string
        if (data['thumb_url'] && !(typeof data['thumb_url'] === 'string' || data['thumb_url'] instanceof String)) {
            throw new Error("Expected the field `thumb_url` to be a primitive type in the JSON string but got " + data['thumb_url']);
        }
        if (data['upload_sizes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['upload_sizes'])) {
                throw new Error("Expected the field `upload_sizes` to be an array in the JSON data but got " + data['upload_sizes']);
            }
            // validate the optional field `upload_sizes` (array)
            for (const item of data['upload_sizes']) {
                ImageSize.validateJSON(item);
            };
        }

        return true;
    }


}

ImageUploadResponse.RequiredProperties = ["duration"];

/**
 * @member {String} duration
 */
ImageUploadResponse.prototype['duration'] = undefined;

/**
 * URL to the uploaded asset. Should be used to put to `asset_url` attachment field
 * @member {String} file
 */
ImageUploadResponse.prototype['file'] = undefined;

/**
 * URL of the file thumbnail for supported file formats. Should be put to `thumb_url` attachment field
 * @member {String} thumb_url
 */
ImageUploadResponse.prototype['thumb_url'] = undefined;

/**
 * @member {Array.<module:model/ImageSize>} upload_sizes
 */
ImageUploadResponse.prototype['upload_sizes'] = undefined;






export default ImageUploadResponse;

