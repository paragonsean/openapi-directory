/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RecordSettings model module.
 * @module model/RecordSettings
 * @version v80.2.0
 */
class RecordSettings {
    /**
     * Constructs a new <code>RecordSettings</code>.
     * @alias module:model/RecordSettings
     * @param audioOnly {Boolean} 
     * @param mode {module:model/RecordSettings.ModeEnum} 
     * @param quality {module:model/RecordSettings.QualityEnum} 
     */
    constructor(audioOnly, mode, quality) { 
        
        RecordSettings.initialize(this, audioOnly, mode, quality);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, audioOnly, mode, quality) { 
        obj['audio_only'] = audioOnly;
        obj['mode'] = mode;
        obj['quality'] = quality;
    }

    /**
     * Constructs a <code>RecordSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecordSettings} obj Optional instance to populate.
     * @return {module:model/RecordSettings} The populated <code>RecordSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecordSettings();

            if (data.hasOwnProperty('audio_only')) {
                obj['audio_only'] = ApiClient.convertToType(data['audio_only'], 'Boolean');
            }
            if (data.hasOwnProperty('mode')) {
                obj['mode'] = ApiClient.convertToType(data['mode'], 'String');
            }
            if (data.hasOwnProperty('quality')) {
                obj['quality'] = ApiClient.convertToType(data['quality'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecordSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecordSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RecordSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['mode'] && !(typeof data['mode'] === 'string' || data['mode'] instanceof String)) {
            throw new Error("Expected the field `mode` to be a primitive type in the JSON string but got " + data['mode']);
        }
        // ensure the json data is a string
        if (data['quality'] && !(typeof data['quality'] === 'string' || data['quality'] instanceof String)) {
            throw new Error("Expected the field `quality` to be a primitive type in the JSON string but got " + data['quality']);
        }

        return true;
    }


}

RecordSettings.RequiredProperties = ["audio_only", "mode", "quality"];

/**
 * @member {Boolean} audio_only
 */
RecordSettings.prototype['audio_only'] = undefined;

/**
 * @member {module:model/RecordSettings.ModeEnum} mode
 */
RecordSettings.prototype['mode'] = undefined;

/**
 * @member {module:model/RecordSettings.QualityEnum} quality
 */
RecordSettings.prototype['quality'] = undefined;





/**
 * Allowed values for the <code>mode</code> property.
 * @enum {String}
 * @readonly
 */
RecordSettings['ModeEnum'] = {

    /**
     * value: "available"
     * @const
     */
    "available": "available",

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled",

    /**
     * value: "auto-on"
     * @const
     */
    "auto-on": "auto-on"
};


/**
 * Allowed values for the <code>quality</code> property.
 * @enum {String}
 * @readonly
 */
RecordSettings['QualityEnum'] = {

    /**
     * value: "audio-only"
     * @const
     */
    "audio-only": "audio-only",

    /**
     * value: "360p"
     * @const
     */
    "360p": "360p",

    /**
     * value: "480p"
     * @const
     */
    "480p": "480p",

    /**
     * value: "720p"
     * @const
     */
    "720p": "720p",

    /**
     * value: "1080p"
     * @const
     */
    "1080p": "1080p",

    /**
     * value: "1440p"
     * @const
     */
    "1440p": "1440p"
};



export default RecordSettings;

