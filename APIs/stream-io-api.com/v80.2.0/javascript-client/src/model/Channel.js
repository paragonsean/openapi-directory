/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelConfig from './ChannelConfig';
import ChannelMember from './ChannelMember';
import UserObject from './UserObject';

/**
 * The Channel model module.
 * @module model/Channel
 * @version v80.2.0
 */
class Channel {
    /**
     * Constructs a new <code>Channel</code>.
     * @alias module:model/Channel
     * @extends Object
     * @param autoTranslationLanguage {String} 
     * @param cid {String} 
     * @param createdAt {Date} 
     * @param disabled {Boolean} 
     * @param frozen {Boolean} 
     * @param id {String} 
     * @param type {String} 
     * @param updatedAt {Date} 
     */
    constructor(autoTranslationLanguage, cid, createdAt, disabled, frozen, id, type, updatedAt) { 
        
        Channel.initialize(this, autoTranslationLanguage, cid, createdAt, disabled, frozen, id, type, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, autoTranslationLanguage, cid, createdAt, disabled, frozen, id, type, updatedAt) { 
        obj['auto_translation_language'] = autoTranslationLanguage;
        obj['cid'] = cid;
        obj['created_at'] = createdAt;
        obj['disabled'] = disabled;
        obj['frozen'] = frozen;
        obj['id'] = id;
        obj['type'] = type;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>Channel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Channel} obj Optional instance to populate.
     * @return {module:model/Channel} The populated <code>Channel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Channel();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('auto_translation_enabled')) {
                obj['auto_translation_enabled'] = ApiClient.convertToType(data['auto_translation_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('auto_translation_language')) {
                obj['auto_translation_language'] = ApiClient.convertToType(data['auto_translation_language'], 'String');
            }
            if (data.hasOwnProperty('cid')) {
                obj['cid'] = ApiClient.convertToType(data['cid'], 'String');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = ChannelConfig.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('config_overrides')) {
                obj['config_overrides'] = ChannelConfig.constructFromObject(data['config_overrides']);
            }
            if (data.hasOwnProperty('cooldown')) {
                obj['cooldown'] = ApiClient.convertToType(data['cooldown'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('created_by')) {
                obj['created_by'] = UserObject.constructFromObject(data['created_by']);
            }
            if (data.hasOwnProperty('deleted_at')) {
                obj['deleted_at'] = ApiClient.convertToType(data['deleted_at'], 'Date');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('frozen')) {
                obj['frozen'] = ApiClient.convertToType(data['frozen'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('invites')) {
                obj['invites'] = ApiClient.convertToType(data['invites'], [ChannelMember]);
            }
            if (data.hasOwnProperty('last_message_at')) {
                obj['last_message_at'] = ApiClient.convertToType(data['last_message_at'], 'Date');
            }
            if (data.hasOwnProperty('member_count')) {
                obj['member_count'] = ApiClient.convertToType(data['member_count'], 'Number');
            }
            if (data.hasOwnProperty('members')) {
                obj['members'] = ApiClient.convertToType(data['members'], [ChannelMember]);
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = ApiClient.convertToType(data['team'], 'String');
            }
            if (data.hasOwnProperty('truncated_by')) {
                obj['truncated_by'] = UserObject.constructFromObject(data['truncated_by']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Channel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Channel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Channel.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['auto_translation_language'] && !(typeof data['auto_translation_language'] === 'string' || data['auto_translation_language'] instanceof String)) {
            throw new Error("Expected the field `auto_translation_language` to be a primitive type in the JSON string but got " + data['auto_translation_language']);
        }
        // ensure the json data is a string
        if (data['cid'] && !(typeof data['cid'] === 'string' || data['cid'] instanceof String)) {
            throw new Error("Expected the field `cid` to be a primitive type in the JSON string but got " + data['cid']);
        }
        // validate the optional field `config`
        if (data['config']) { // data not null
          ChannelConfig.validateJSON(data['config']);
        }
        // validate the optional field `config_overrides`
        if (data['config_overrides']) { // data not null
          ChannelConfig.validateJSON(data['config_overrides']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['invites']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['invites'])) {
                throw new Error("Expected the field `invites` to be an array in the JSON data but got " + data['invites']);
            }
            // validate the optional field `invites` (array)
            for (const item of data['invites']) {
                ChannelMember.validateJSON(item);
            };
        }
        if (data['members']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['members'])) {
                throw new Error("Expected the field `members` to be an array in the JSON data but got " + data['members']);
            }
            // validate the optional field `members` (array)
            for (const item of data['members']) {
                ChannelMember.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['team'] && !(typeof data['team'] === 'string' || data['team'] instanceof String)) {
            throw new Error("Expected the field `team` to be a primitive type in the JSON string but got " + data['team']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Channel.RequiredProperties = ["auto_translation_language", "cid", "created_at", "disabled", "frozen", "id", "type", "updated_at"];

/**
 * @member {Boolean} auto_translation_enabled
 */
Channel.prototype['auto_translation_enabled'] = undefined;

/**
 * @member {String} auto_translation_language
 */
Channel.prototype['auto_translation_language'] = undefined;

/**
 * @member {String} cid
 */
Channel.prototype['cid'] = undefined;

/**
 * @member {module:model/ChannelConfig} config
 */
Channel.prototype['config'] = undefined;

/**
 * @member {module:model/ChannelConfig} config_overrides
 */
Channel.prototype['config_overrides'] = undefined;

/**
 * @member {Number} cooldown
 */
Channel.prototype['cooldown'] = undefined;

/**
 * @member {Date} created_at
 */
Channel.prototype['created_at'] = undefined;

/**
 * @member {module:model/UserObject} created_by
 */
Channel.prototype['created_by'] = undefined;

/**
 * @member {Date} deleted_at
 */
Channel.prototype['deleted_at'] = undefined;

/**
 * @member {Boolean} disabled
 */
Channel.prototype['disabled'] = undefined;

/**
 * @member {Boolean} frozen
 */
Channel.prototype['frozen'] = undefined;

/**
 * @member {String} id
 */
Channel.prototype['id'] = undefined;

/**
 * @member {Array.<module:model/ChannelMember>} invites
 */
Channel.prototype['invites'] = undefined;

/**
 * @member {Date} last_message_at
 */
Channel.prototype['last_message_at'] = undefined;

/**
 * @member {Number} member_count
 */
Channel.prototype['member_count'] = undefined;

/**
 * @member {Array.<module:model/ChannelMember>} members
 */
Channel.prototype['members'] = undefined;

/**
 * @member {String} team
 */
Channel.prototype['team'] = undefined;

/**
 * @member {module:model/UserObject} truncated_by
 */
Channel.prototype['truncated_by'] = undefined;

/**
 * @member {String} type
 */
Channel.prototype['type'] = undefined;

/**
 * @member {Date} updated_at
 */
Channel.prototype['updated_at'] = undefined;






export default Channel;

