/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ChannelConfigRequest model module.
 * @module model/ChannelConfigRequest
 * @version v80.2.0
 */
class ChannelConfigRequest {
    /**
     * Constructs a new <code>ChannelConfigRequest</code>.
     * Channel configuration overrides
     * @alias module:model/ChannelConfigRequest
     */
    constructor() { 
        
        ChannelConfigRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChannelConfigRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelConfigRequest} obj Optional instance to populate.
     * @return {module:model/ChannelConfigRequest} The populated <code>ChannelConfigRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChannelConfigRequest();

            if (data.hasOwnProperty('blocklist')) {
                obj['blocklist'] = ApiClient.convertToType(data['blocklist'], 'String');
            }
            if (data.hasOwnProperty('blocklist_behavior')) {
                obj['blocklist_behavior'] = ApiClient.convertToType(data['blocklist_behavior'], 'String');
            }
            if (data.hasOwnProperty('commands')) {
                obj['commands'] = ApiClient.convertToType(data['commands'], ['String']);
            }
            if (data.hasOwnProperty('grants')) {
                obj['grants'] = ApiClient.convertToType(data['grants'], {'String': ['String']});
            }
            if (data.hasOwnProperty('max_message_length')) {
                obj['max_message_length'] = ApiClient.convertToType(data['max_message_length'], 'Number');
            }
            if (data.hasOwnProperty('quotes')) {
                obj['quotes'] = ApiClient.convertToType(data['quotes'], 'Boolean');
            }
            if (data.hasOwnProperty('reactions')) {
                obj['reactions'] = ApiClient.convertToType(data['reactions'], 'Boolean');
            }
            if (data.hasOwnProperty('replies')) {
                obj['replies'] = ApiClient.convertToType(data['replies'], 'Boolean');
            }
            if (data.hasOwnProperty('typing_events')) {
                obj['typing_events'] = ApiClient.convertToType(data['typing_events'], 'Boolean');
            }
            if (data.hasOwnProperty('uploads')) {
                obj['uploads'] = ApiClient.convertToType(data['uploads'], 'Boolean');
            }
            if (data.hasOwnProperty('url_enrichment')) {
                obj['url_enrichment'] = ApiClient.convertToType(data['url_enrichment'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChannelConfigRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChannelConfigRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['blocklist'] && !(typeof data['blocklist'] === 'string' || data['blocklist'] instanceof String)) {
            throw new Error("Expected the field `blocklist` to be a primitive type in the JSON string but got " + data['blocklist']);
        }
        // ensure the json data is a string
        if (data['blocklist_behavior'] && !(typeof data['blocklist_behavior'] === 'string' || data['blocklist_behavior'] instanceof String)) {
            throw new Error("Expected the field `blocklist_behavior` to be a primitive type in the JSON string but got " + data['blocklist_behavior']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['commands'])) {
            throw new Error("Expected the field `commands` to be an array in the JSON data but got " + data['commands']);
        }

        return true;
    }


}



/**
 * @member {String} blocklist
 */
ChannelConfigRequest.prototype['blocklist'] = undefined;

/**
 * @member {module:model/ChannelConfigRequest.BlocklistBehaviorEnum} blocklist_behavior
 */
ChannelConfigRequest.prototype['blocklist_behavior'] = undefined;

/**
 * @member {Array.<String>} commands
 */
ChannelConfigRequest.prototype['commands'] = undefined;

/**
 * @member {Object.<String, Array.<String>>} grants
 */
ChannelConfigRequest.prototype['grants'] = undefined;

/**
 * Overrides max message length
 * @member {Number} max_message_length
 */
ChannelConfigRequest.prototype['max_message_length'] = undefined;

/**
 * Enables message quotes
 * @member {Boolean} quotes
 */
ChannelConfigRequest.prototype['quotes'] = undefined;

/**
 * Enables or disables reactions
 * @member {Boolean} reactions
 */
ChannelConfigRequest.prototype['reactions'] = undefined;

/**
 * Enables message replies (threads)
 * @member {Boolean} replies
 */
ChannelConfigRequest.prototype['replies'] = undefined;

/**
 * Enables or disables typing events
 * @member {Boolean} typing_events
 */
ChannelConfigRequest.prototype['typing_events'] = undefined;

/**
 * Enables or disables file uploads
 * @member {Boolean} uploads
 */
ChannelConfigRequest.prototype['uploads'] = undefined;

/**
 * Enables or disables URL enrichment
 * @member {Boolean} url_enrichment
 */
ChannelConfigRequest.prototype['url_enrichment'] = undefined;





/**
 * Allowed values for the <code>blocklist_behavior</code> property.
 * @enum {String}
 * @readonly
 */
ChannelConfigRequest['BlocklistBehaviorEnum'] = {

    /**
     * value: "flag"
     * @const
     */
    "flag": "flag",

    /**
     * value: "block"
     * @const
     */
    "block": "block"
};



export default ChannelConfigRequest;

