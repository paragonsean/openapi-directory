/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelConfigWithInfo from './ChannelConfigWithInfo';
import ChannelMember from './ChannelMember';
import UserObject from './UserObject';

/**
 * The ChannelResponse model module.
 * @module model/ChannelResponse
 * @version v80.2.0
 */
class ChannelResponse {
    /**
     * Constructs a new <code>ChannelResponse</code>.
     * Represents channel in chat
     * @alias module:model/ChannelResponse
     * @extends Object
     * @param cid {String} Channel CID (<type>:<id>)
     * @param disabled {Boolean} 
     * @param frozen {Boolean} Whether channel is frozen or not
     * @param id {String} Channel unique ID
     * @param type {String} Type of the channel
     */
    constructor(cid, disabled, frozen, id, type) { 
        
        ChannelResponse.initialize(this, cid, disabled, frozen, id, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cid, disabled, frozen, id, type) { 
        obj['cid'] = cid;
        obj['disabled'] = disabled;
        obj['frozen'] = frozen;
        obj['id'] = id;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>ChannelResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelResponse} obj Optional instance to populate.
     * @return {module:model/ChannelResponse} The populated <code>ChannelResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChannelResponse();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('auto_translation_enabled')) {
                obj['auto_translation_enabled'] = ApiClient.convertToType(data['auto_translation_enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('auto_translation_language')) {
                obj['auto_translation_language'] = ApiClient.convertToType(data['auto_translation_language'], 'String');
            }
            if (data.hasOwnProperty('cid')) {
                obj['cid'] = ApiClient.convertToType(data['cid'], 'String');
            }
            if (data.hasOwnProperty('config')) {
                obj['config'] = ChannelConfigWithInfo.constructFromObject(data['config']);
            }
            if (data.hasOwnProperty('cooldown')) {
                obj['cooldown'] = ApiClient.convertToType(data['cooldown'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('created_by')) {
                obj['created_by'] = UserObject.constructFromObject(data['created_by']);
            }
            if (data.hasOwnProperty('deleted_at')) {
                obj['deleted_at'] = ApiClient.convertToType(data['deleted_at'], 'Date');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('frozen')) {
                obj['frozen'] = ApiClient.convertToType(data['frozen'], 'Boolean');
            }
            if (data.hasOwnProperty('hidden')) {
                obj['hidden'] = ApiClient.convertToType(data['hidden'], 'Boolean');
            }
            if (data.hasOwnProperty('hide_messages_before')) {
                obj['hide_messages_before'] = ApiClient.convertToType(data['hide_messages_before'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('last_message_at')) {
                obj['last_message_at'] = ApiClient.convertToType(data['last_message_at'], 'Date');
            }
            if (data.hasOwnProperty('member_count')) {
                obj['member_count'] = ApiClient.convertToType(data['member_count'], 'Number');
            }
            if (data.hasOwnProperty('members')) {
                obj['members'] = ApiClient.convertToType(data['members'], [ChannelMember]);
            }
            if (data.hasOwnProperty('mute_expires_at')) {
                obj['mute_expires_at'] = ApiClient.convertToType(data['mute_expires_at'], 'Date');
            }
            if (data.hasOwnProperty('muted')) {
                obj['muted'] = ApiClient.convertToType(data['muted'], 'Boolean');
            }
            if (data.hasOwnProperty('own_capabilities')) {
                obj['own_capabilities'] = ApiClient.convertToType(data['own_capabilities'], ['String']);
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = ApiClient.convertToType(data['team'], 'String');
            }
            if (data.hasOwnProperty('truncated_at')) {
                obj['truncated_at'] = ApiClient.convertToType(data['truncated_at'], 'Date');
            }
            if (data.hasOwnProperty('truncated_by')) {
                obj['truncated_by'] = UserObject.constructFromObject(data['truncated_by']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChannelResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChannelResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChannelResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['auto_translation_language'] && !(typeof data['auto_translation_language'] === 'string' || data['auto_translation_language'] instanceof String)) {
            throw new Error("Expected the field `auto_translation_language` to be a primitive type in the JSON string but got " + data['auto_translation_language']);
        }
        // ensure the json data is a string
        if (data['cid'] && !(typeof data['cid'] === 'string' || data['cid'] instanceof String)) {
            throw new Error("Expected the field `cid` to be a primitive type in the JSON string but got " + data['cid']);
        }
        // validate the optional field `config`
        if (data['config']) { // data not null
          ChannelConfigWithInfo.validateJSON(data['config']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['members']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['members'])) {
                throw new Error("Expected the field `members` to be an array in the JSON data but got " + data['members']);
            }
            // validate the optional field `members` (array)
            for (const item of data['members']) {
                ChannelMember.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['own_capabilities'])) {
            throw new Error("Expected the field `own_capabilities` to be an array in the JSON data but got " + data['own_capabilities']);
        }
        // ensure the json data is a string
        if (data['team'] && !(typeof data['team'] === 'string' || data['team'] instanceof String)) {
            throw new Error("Expected the field `team` to be a primitive type in the JSON string but got " + data['team']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ChannelResponse.RequiredProperties = ["cid", "disabled", "frozen", "id", "type"];

/**
 * Whether auto translation is enabled or not
 * @member {Boolean} auto_translation_enabled
 */
ChannelResponse.prototype['auto_translation_enabled'] = undefined;

/**
 * Language to translate to when auto translation is active
 * @member {String} auto_translation_language
 */
ChannelResponse.prototype['auto_translation_language'] = undefined;

/**
 * Channel CID (<type>:<id>)
 * @member {String} cid
 */
ChannelResponse.prototype['cid'] = undefined;

/**
 * @member {module:model/ChannelConfigWithInfo} config
 */
ChannelResponse.prototype['config'] = undefined;

/**
 * Cooldown period after sending each message
 * @member {Number} cooldown
 */
ChannelResponse.prototype['cooldown'] = undefined;

/**
 * Date/time of creation
 * @member {Date} created_at
 */
ChannelResponse.prototype['created_at'] = undefined;

/**
 * @member {module:model/UserObject} created_by
 */
ChannelResponse.prototype['created_by'] = undefined;

/**
 * Date/time of deletion
 * @member {Date} deleted_at
 */
ChannelResponse.prototype['deleted_at'] = undefined;

/**
 * @member {Boolean} disabled
 */
ChannelResponse.prototype['disabled'] = undefined;

/**
 * Whether channel is frozen or not
 * @member {Boolean} frozen
 */
ChannelResponse.prototype['frozen'] = undefined;

/**
 * Whether this channel is hidden by current user or not
 * @member {Boolean} hidden
 */
ChannelResponse.prototype['hidden'] = undefined;

/**
 * Date since when the message history is accessible
 * @member {Date} hide_messages_before
 */
ChannelResponse.prototype['hide_messages_before'] = undefined;

/**
 * Channel unique ID
 * @member {String} id
 */
ChannelResponse.prototype['id'] = undefined;

/**
 * Date of the last message sent
 * @member {Date} last_message_at
 */
ChannelResponse.prototype['last_message_at'] = undefined;

/**
 * Number of members in the channel
 * @member {Number} member_count
 */
ChannelResponse.prototype['member_count'] = undefined;

/**
 * List of channel members (max 100)
 * @member {Array.<module:model/ChannelMember>} members
 */
ChannelResponse.prototype['members'] = undefined;

/**
 * Date of mute expiration
 * @member {Date} mute_expires_at
 */
ChannelResponse.prototype['mute_expires_at'] = undefined;

/**
 * Whether this channel is muted or not
 * @member {Boolean} muted
 */
ChannelResponse.prototype['muted'] = undefined;

/**
 * List of channel capabilities of authenticated user
 * @member {Array.<String>} own_capabilities
 */
ChannelResponse.prototype['own_capabilities'] = undefined;

/**
 * Team the channel belongs to (multi-tenant only)
 * @member {String} team
 */
ChannelResponse.prototype['team'] = undefined;

/**
 * Date of the latest truncation of the channel
 * @member {Date} truncated_at
 */
ChannelResponse.prototype['truncated_at'] = undefined;

/**
 * @member {module:model/UserObject} truncated_by
 */
ChannelResponse.prototype['truncated_by'] = undefined;

/**
 * Type of the channel
 * @member {String} type
 */
ChannelResponse.prototype['type'] = undefined;

/**
 * Date/time of the last update
 * @member {Date} updated_at
 */
ChannelResponse.prototype['updated_at'] = undefined;






export default ChannelResponse;

