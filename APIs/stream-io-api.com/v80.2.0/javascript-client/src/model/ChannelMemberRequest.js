/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserObjectRequest from './UserObjectRequest';

/**
 * The ChannelMemberRequest model module.
 * @module model/ChannelMemberRequest
 * @version v80.2.0
 */
class ChannelMemberRequest {
    /**
     * Constructs a new <code>ChannelMemberRequest</code>.
     * @alias module:model/ChannelMemberRequest
     */
    constructor() { 
        
        ChannelMemberRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ChannelMemberRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelMemberRequest} obj Optional instance to populate.
     * @return {module:model/ChannelMemberRequest} The populated <code>ChannelMemberRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChannelMemberRequest();

            if (data.hasOwnProperty('ban_expires')) {
                obj['ban_expires'] = ApiClient.convertToType(data['ban_expires'], 'Date');
            }
            if (data.hasOwnProperty('banned')) {
                obj['banned'] = ApiClient.convertToType(data['banned'], 'Boolean');
            }
            if (data.hasOwnProperty('channel_role')) {
                obj['channel_role'] = ApiClient.convertToType(data['channel_role'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('deleted_at')) {
                obj['deleted_at'] = ApiClient.convertToType(data['deleted_at'], 'Date');
            }
            if (data.hasOwnProperty('invite_accepted_at')) {
                obj['invite_accepted_at'] = ApiClient.convertToType(data['invite_accepted_at'], 'Date');
            }
            if (data.hasOwnProperty('invite_rejected_at')) {
                obj['invite_rejected_at'] = ApiClient.convertToType(data['invite_rejected_at'], 'Date');
            }
            if (data.hasOwnProperty('invited')) {
                obj['invited'] = ApiClient.convertToType(data['invited'], 'Boolean');
            }
            if (data.hasOwnProperty('is_moderator')) {
                obj['is_moderator'] = ApiClient.convertToType(data['is_moderator'], 'Boolean');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('shadow_banned')) {
                obj['shadow_banned'] = ApiClient.convertToType(data['shadow_banned'], 'Boolean');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = UserObjectRequest.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChannelMemberRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChannelMemberRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['channel_role'] && !(typeof data['channel_role'] === 'string' || data['channel_role'] instanceof String)) {
            throw new Error("Expected the field `channel_role` to be a primitive type in the JSON string but got " + data['channel_role']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}



/**
 * Expiration date of the ban
 * @member {Date} ban_expires
 */
ChannelMemberRequest.prototype['ban_expires'] = undefined;

/**
 * Whether member is banned this channel or not
 * @member {Boolean} banned
 */
ChannelMemberRequest.prototype['banned'] = undefined;

/**
 * Role of the member in the channel
 * @member {String} channel_role
 */
ChannelMemberRequest.prototype['channel_role'] = undefined;

/**
 * Date/time of creation
 * @member {Date} created_at
 */
ChannelMemberRequest.prototype['created_at'] = undefined;

/**
 * @member {Date} deleted_at
 */
ChannelMemberRequest.prototype['deleted_at'] = undefined;

/**
 * Date when invite was accepted
 * @member {Date} invite_accepted_at
 */
ChannelMemberRequest.prototype['invite_accepted_at'] = undefined;

/**
 * Date when invite was rejected
 * @member {Date} invite_rejected_at
 */
ChannelMemberRequest.prototype['invite_rejected_at'] = undefined;

/**
 * Whether member was invited or not
 * @member {Boolean} invited
 */
ChannelMemberRequest.prototype['invited'] = undefined;

/**
 * Whether member is channel moderator or not
 * @member {Boolean} is_moderator
 */
ChannelMemberRequest.prototype['is_moderator'] = undefined;

/**
 * Permission level of the member in the channel (DEPRECATED: use channel_role instead)
 * @member {module:model/ChannelMemberRequest.RoleEnum} role
 */
ChannelMemberRequest.prototype['role'] = undefined;

/**
 * Whether member is shadow banned in this channel or not
 * @member {Boolean} shadow_banned
 */
ChannelMemberRequest.prototype['shadow_banned'] = undefined;

/**
 * Date/time of the last update
 * @member {Date} updated_at
 */
ChannelMemberRequest.prototype['updated_at'] = undefined;

/**
 * @member {module:model/UserObjectRequest} user
 */
ChannelMemberRequest.prototype['user'] = undefined;

/**
 * @member {String} user_id
 */
ChannelMemberRequest.prototype['user_id'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
ChannelMemberRequest['RoleEnum'] = {

    /**
     * value: "member"
     * @const
     */
    "member": "member",

    /**
     * value: "moderator"
     * @const
     */
    "moderator": "moderator",

    /**
     * value: "admin"
     * @const
     */
    "admin": "admin",

    /**
     * value: "owner"
     * @const
     */
    "owner": "owner"
};



export default ChannelMemberRequest;

