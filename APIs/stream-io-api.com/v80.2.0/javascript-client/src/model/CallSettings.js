/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioSettings from './AudioSettings';
import BackstageSettings from './BackstageSettings';
import BroadcastSettings from './BroadcastSettings';
import GeofenceSettings from './GeofenceSettings';
import RecordSettings from './RecordSettings';
import RingSettings from './RingSettings';
import ScreensharingSettings from './ScreensharingSettings';
import TranscriptionSettings from './TranscriptionSettings';
import VideoSettings from './VideoSettings';

/**
 * The CallSettings model module.
 * @module model/CallSettings
 * @version v80.2.0
 */
class CallSettings {
    /**
     * Constructs a new <code>CallSettings</code>.
     * @alias module:model/CallSettings
     */
    constructor() { 
        
        CallSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CallSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CallSettings} obj Optional instance to populate.
     * @return {module:model/CallSettings} The populated <code>CallSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CallSettings();

            if (data.hasOwnProperty('audio')) {
                obj['audio'] = AudioSettings.constructFromObject(data['audio']);
            }
            if (data.hasOwnProperty('backstage')) {
                obj['backstage'] = BackstageSettings.constructFromObject(data['backstage']);
            }
            if (data.hasOwnProperty('broadcasting')) {
                obj['broadcasting'] = BroadcastSettings.constructFromObject(data['broadcasting']);
            }
            if (data.hasOwnProperty('geofencing')) {
                obj['geofencing'] = GeofenceSettings.constructFromObject(data['geofencing']);
            }
            if (data.hasOwnProperty('recording')) {
                obj['recording'] = RecordSettings.constructFromObject(data['recording']);
            }
            if (data.hasOwnProperty('ring')) {
                obj['ring'] = RingSettings.constructFromObject(data['ring']);
            }
            if (data.hasOwnProperty('screensharing')) {
                obj['screensharing'] = ScreensharingSettings.constructFromObject(data['screensharing']);
            }
            if (data.hasOwnProperty('transcription')) {
                obj['transcription'] = TranscriptionSettings.constructFromObject(data['transcription']);
            }
            if (data.hasOwnProperty('video')) {
                obj['video'] = VideoSettings.constructFromObject(data['video']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CallSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CallSettings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `audio`
        if (data['audio']) { // data not null
          AudioSettings.validateJSON(data['audio']);
        }
        // validate the optional field `backstage`
        if (data['backstage']) { // data not null
          BackstageSettings.validateJSON(data['backstage']);
        }
        // validate the optional field `broadcasting`
        if (data['broadcasting']) { // data not null
          BroadcastSettings.validateJSON(data['broadcasting']);
        }
        // validate the optional field `geofencing`
        if (data['geofencing']) { // data not null
          GeofenceSettings.validateJSON(data['geofencing']);
        }
        // validate the optional field `recording`
        if (data['recording']) { // data not null
          RecordSettings.validateJSON(data['recording']);
        }
        // validate the optional field `ring`
        if (data['ring']) { // data not null
          RingSettings.validateJSON(data['ring']);
        }
        // validate the optional field `screensharing`
        if (data['screensharing']) { // data not null
          ScreensharingSettings.validateJSON(data['screensharing']);
        }
        // validate the optional field `transcription`
        if (data['transcription']) { // data not null
          TranscriptionSettings.validateJSON(data['transcription']);
        }
        // validate the optional field `video`
        if (data['video']) { // data not null
          VideoSettings.validateJSON(data['video']);
        }

        return true;
    }


}



/**
 * @member {module:model/AudioSettings} audio
 */
CallSettings.prototype['audio'] = undefined;

/**
 * @member {module:model/BackstageSettings} backstage
 */
CallSettings.prototype['backstage'] = undefined;

/**
 * @member {module:model/BroadcastSettings} broadcasting
 */
CallSettings.prototype['broadcasting'] = undefined;

/**
 * @member {module:model/GeofenceSettings} geofencing
 */
CallSettings.prototype['geofencing'] = undefined;

/**
 * @member {module:model/RecordSettings} recording
 */
CallSettings.prototype['recording'] = undefined;

/**
 * @member {module:model/RingSettings} ring
 */
CallSettings.prototype['ring'] = undefined;

/**
 * @member {module:model/ScreensharingSettings} screensharing
 */
CallSettings.prototype['screensharing'] = undefined;

/**
 * @member {module:model/TranscriptionSettings} transcription
 */
CallSettings.prototype['transcription'] = undefined;

/**
 * @member {module:model/VideoSettings} video
 */
CallSettings.prototype['video'] = undefined;






export default CallSettings;

