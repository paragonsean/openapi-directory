/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelMute from './ChannelMute';
import Device from './Device';
import PushNotificationSettings from './PushNotificationSettings';
import UserMute from './UserMute';

/**
 * The OwnUser model module.
 * @module model/OwnUser
 * @version v80.2.0
 */
class OwnUser {
    /**
     * Constructs a new <code>OwnUser</code>.
     * @alias module:model/OwnUser
     * @extends Object
     * @param banned {Boolean} 
     * @param channelMutes {Array.<module:model/ChannelMute>} 
     * @param createdAt {Date} 
     * @param devices {Array.<module:model/Device>} 
     * @param id {String} 
     * @param language {String} 
     * @param mutes {Array.<module:model/UserMute>} 
     * @param online {Boolean} 
     * @param role {String} 
     * @param totalUnreadCount {Number} 
     * @param unreadChannels {Number} 
     * @param unreadCount {Number} 
     * @param updatedAt {Date} 
     */
    constructor(banned, channelMutes, createdAt, devices, id, language, mutes, online, role, totalUnreadCount, unreadChannels, unreadCount, updatedAt) { 
        
        OwnUser.initialize(this, banned, channelMutes, createdAt, devices, id, language, mutes, online, role, totalUnreadCount, unreadChannels, unreadCount, updatedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, banned, channelMutes, createdAt, devices, id, language, mutes, online, role, totalUnreadCount, unreadChannels, unreadCount, updatedAt) { 
        obj['banned'] = banned;
        obj['channel_mutes'] = channelMutes;
        obj['created_at'] = createdAt;
        obj['devices'] = devices;
        obj['id'] = id;
        obj['language'] = language;
        obj['mutes'] = mutes;
        obj['online'] = online;
        obj['role'] = role;
        obj['total_unread_count'] = totalUnreadCount;
        obj['unread_channels'] = unreadChannels;
        obj['unread_count'] = unreadCount;
        obj['updated_at'] = updatedAt;
    }

    /**
     * Constructs a <code>OwnUser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OwnUser} obj Optional instance to populate.
     * @return {module:model/OwnUser} The populated <code>OwnUser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OwnUser();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('banned')) {
                obj['banned'] = ApiClient.convertToType(data['banned'], 'Boolean');
            }
            if (data.hasOwnProperty('channel_mutes')) {
                obj['channel_mutes'] = ApiClient.convertToType(data['channel_mutes'], [ChannelMute]);
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('deactivated_at')) {
                obj['deactivated_at'] = ApiClient.convertToType(data['deactivated_at'], 'Date');
            }
            if (data.hasOwnProperty('deleted_at')) {
                obj['deleted_at'] = ApiClient.convertToType(data['deleted_at'], 'Date');
            }
            if (data.hasOwnProperty('devices')) {
                obj['devices'] = ApiClient.convertToType(data['devices'], [Device]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('invisible')) {
                obj['invisible'] = ApiClient.convertToType(data['invisible'], 'Boolean');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('last_active')) {
                obj['last_active'] = ApiClient.convertToType(data['last_active'], 'Date');
            }
            if (data.hasOwnProperty('latest_hidden_channels')) {
                obj['latest_hidden_channels'] = ApiClient.convertToType(data['latest_hidden_channels'], ['String']);
            }
            if (data.hasOwnProperty('mutes')) {
                obj['mutes'] = ApiClient.convertToType(data['mutes'], [UserMute]);
            }
            if (data.hasOwnProperty('online')) {
                obj['online'] = ApiClient.convertToType(data['online'], 'Boolean');
            }
            if (data.hasOwnProperty('push_notifications')) {
                obj['push_notifications'] = PushNotificationSettings.constructFromObject(data['push_notifications']);
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('teams')) {
                obj['teams'] = ApiClient.convertToType(data['teams'], ['String']);
            }
            if (data.hasOwnProperty('total_unread_count')) {
                obj['total_unread_count'] = ApiClient.convertToType(data['total_unread_count'], 'Number');
            }
            if (data.hasOwnProperty('unread_channels')) {
                obj['unread_channels'] = ApiClient.convertToType(data['unread_channels'], 'Number');
            }
            if (data.hasOwnProperty('unread_count')) {
                obj['unread_count'] = ApiClient.convertToType(data['unread_count'], 'Number');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OwnUser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OwnUser</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OwnUser.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['channel_mutes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['channel_mutes'])) {
                throw new Error("Expected the field `channel_mutes` to be an array in the JSON data but got " + data['channel_mutes']);
            }
            // validate the optional field `channel_mutes` (array)
            for (const item of data['channel_mutes']) {
                ChannelMute.validateJSON(item);
            };
        }
        if (data['devices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['devices'])) {
                throw new Error("Expected the field `devices` to be an array in the JSON data but got " + data['devices']);
            }
            // validate the optional field `devices` (array)
            for (const item of data['devices']) {
                Device.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['latest_hidden_channels'])) {
            throw new Error("Expected the field `latest_hidden_channels` to be an array in the JSON data but got " + data['latest_hidden_channels']);
        }
        if (data['mutes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mutes'])) {
                throw new Error("Expected the field `mutes` to be an array in the JSON data but got " + data['mutes']);
            }
            // validate the optional field `mutes` (array)
            for (const item of data['mutes']) {
                UserMute.validateJSON(item);
            };
        }
        // validate the optional field `push_notifications`
        if (data['push_notifications']) { // data not null
          PushNotificationSettings.validateJSON(data['push_notifications']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['teams'])) {
            throw new Error("Expected the field `teams` to be an array in the JSON data but got " + data['teams']);
        }

        return true;
    }


}

OwnUser.RequiredProperties = ["banned", "channel_mutes", "created_at", "devices", "id", "language", "mutes", "online", "role", "total_unread_count", "unread_channels", "unread_count", "updated_at"];

/**
 * @member {Boolean} banned
 */
OwnUser.prototype['banned'] = undefined;

/**
 * @member {Array.<module:model/ChannelMute>} channel_mutes
 */
OwnUser.prototype['channel_mutes'] = undefined;

/**
 * @member {Date} created_at
 */
OwnUser.prototype['created_at'] = undefined;

/**
 * @member {Date} deactivated_at
 */
OwnUser.prototype['deactivated_at'] = undefined;

/**
 * @member {Date} deleted_at
 */
OwnUser.prototype['deleted_at'] = undefined;

/**
 * @member {Array.<module:model/Device>} devices
 */
OwnUser.prototype['devices'] = undefined;

/**
 * @member {String} id
 */
OwnUser.prototype['id'] = undefined;

/**
 * @member {Boolean} invisible
 */
OwnUser.prototype['invisible'] = undefined;

/**
 * @member {String} language
 */
OwnUser.prototype['language'] = undefined;

/**
 * @member {Date} last_active
 */
OwnUser.prototype['last_active'] = undefined;

/**
 * @member {Array.<String>} latest_hidden_channels
 */
OwnUser.prototype['latest_hidden_channels'] = undefined;

/**
 * @member {Array.<module:model/UserMute>} mutes
 */
OwnUser.prototype['mutes'] = undefined;

/**
 * @member {Boolean} online
 */
OwnUser.prototype['online'] = undefined;

/**
 * @member {module:model/PushNotificationSettings} push_notifications
 */
OwnUser.prototype['push_notifications'] = undefined;

/**
 * @member {String} role
 */
OwnUser.prototype['role'] = undefined;

/**
 * @member {Array.<String>} teams
 */
OwnUser.prototype['teams'] = undefined;

/**
 * @member {Number} total_unread_count
 */
OwnUser.prototype['total_unread_count'] = undefined;

/**
 * @member {Number} unread_channels
 */
OwnUser.prototype['unread_channels'] = undefined;

/**
 * @member {Number} unread_count
 */
OwnUser.prototype['unread_count'] = undefined;

/**
 * @member {Date} updated_at
 */
OwnUser.prototype['updated_at'] = undefined;






export default OwnUser;

