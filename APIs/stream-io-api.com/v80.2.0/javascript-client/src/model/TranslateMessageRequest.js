/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TranslateMessageRequest model module.
 * @module model/TranslateMessageRequest
 * @version v80.2.0
 */
class TranslateMessageRequest {
    /**
     * Constructs a new <code>TranslateMessageRequest</code>.
     * @alias module:model/TranslateMessageRequest
     * @param language {module:model/TranslateMessageRequest.LanguageEnum} Language to translate message to
     */
    constructor(language) { 
        
        TranslateMessageRequest.initialize(this, language);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, language) { 
        obj['language'] = language;
    }

    /**
     * Constructs a <code>TranslateMessageRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TranslateMessageRequest} obj Optional instance to populate.
     * @return {module:model/TranslateMessageRequest} The populated <code>TranslateMessageRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TranslateMessageRequest();

            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TranslateMessageRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TranslateMessageRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TranslateMessageRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }

        return true;
    }


}

TranslateMessageRequest.RequiredProperties = ["language"];

/**
 * Language to translate message to
 * @member {module:model/TranslateMessageRequest.LanguageEnum} language
 */
TranslateMessageRequest.prototype['language'] = undefined;





/**
 * Allowed values for the <code>language</code> property.
 * @enum {String}
 * @readonly
 */
TranslateMessageRequest['LanguageEnum'] = {

    /**
     * value: "af"
     * @const
     */
    "af": "af",

    /**
     * value: "sq"
     * @const
     */
    "sq": "sq",

    /**
     * value: "am"
     * @const
     */
    "am": "am",

    /**
     * value: "ar"
     * @const
     */
    "ar": "ar",

    /**
     * value: "az"
     * @const
     */
    "az": "az",

    /**
     * value: "bn"
     * @const
     */
    "bn": "bn",

    /**
     * value: "bs"
     * @const
     */
    "bs": "bs",

    /**
     * value: "bg"
     * @const
     */
    "bg": "bg",

    /**
     * value: "zh"
     * @const
     */
    "zh": "zh",

    /**
     * value: "zh-TW"
     * @const
     */
    "zh-TW": "zh-TW",

    /**
     * value: "hr"
     * @const
     */
    "hr": "hr",

    /**
     * value: "cs"
     * @const
     */
    "cs": "cs",

    /**
     * value: "da"
     * @const
     */
    "da": "da",

    /**
     * value: "fa-AF"
     * @const
     */
    "fa-AF": "fa-AF",

    /**
     * value: "nl"
     * @const
     */
    "nl": "nl",

    /**
     * value: "en"
     * @const
     */
    "en": "en",

    /**
     * value: "et"
     * @const
     */
    "et": "et",

    /**
     * value: "fi"
     * @const
     */
    "fi": "fi",

    /**
     * value: "fr"
     * @const
     */
    "fr": "fr",

    /**
     * value: "fr-CA"
     * @const
     */
    "fr-CA": "fr-CA",

    /**
     * value: "ka"
     * @const
     */
    "ka": "ka",

    /**
     * value: "de"
     * @const
     */
    "de": "de",

    /**
     * value: "el"
     * @const
     */
    "el": "el",

    /**
     * value: "ha"
     * @const
     */
    "ha": "ha",

    /**
     * value: "he"
     * @const
     */
    "he": "he",

    /**
     * value: "hi"
     * @const
     */
    "hi": "hi",

    /**
     * value: "hu"
     * @const
     */
    "hu": "hu",

    /**
     * value: "id"
     * @const
     */
    "id": "id",

    /**
     * value: "it"
     * @const
     */
    "it": "it",

    /**
     * value: "ja"
     * @const
     */
    "ja": "ja",

    /**
     * value: "ko"
     * @const
     */
    "ko": "ko",

    /**
     * value: "lv"
     * @const
     */
    "lv": "lv",

    /**
     * value: "ms"
     * @const
     */
    "ms": "ms",

    /**
     * value: "false"
     * @const
     */
    "false": "false",

    /**
     * value: "fa"
     * @const
     */
    "fa": "fa",

    /**
     * value: "ps"
     * @const
     */
    "ps": "ps",

    /**
     * value: "pl"
     * @const
     */
    "pl": "pl",

    /**
     * value: "pt"
     * @const
     */
    "pt": "pt",

    /**
     * value: "ro"
     * @const
     */
    "ro": "ro",

    /**
     * value: "ru"
     * @const
     */
    "ru": "ru",

    /**
     * value: "sr"
     * @const
     */
    "sr": "sr",

    /**
     * value: "sk"
     * @const
     */
    "sk": "sk",

    /**
     * value: "sl"
     * @const
     */
    "sl": "sl",

    /**
     * value: "so"
     * @const
     */
    "so": "so",

    /**
     * value: "es"
     * @const
     */
    "es": "es",

    /**
     * value: "es-MX"
     * @const
     */
    "es-MX": "es-MX",

    /**
     * value: "sw"
     * @const
     */
    "sw": "sw",

    /**
     * value: "sv"
     * @const
     */
    "sv": "sv",

    /**
     * value: "tl"
     * @const
     */
    "tl": "tl",

    /**
     * value: "ta"
     * @const
     */
    "ta": "ta",

    /**
     * value: "th"
     * @const
     */
    "th": "th",

    /**
     * value: "tr"
     * @const
     */
    "tr": "tr",

    /**
     * value: "uk"
     * @const
     */
    "uk": "uk",

    /**
     * value: "ur"
     * @const
     */
    "ur": "ur",

    /**
     * value: "vi"
     * @const
     */
    "vi": "vi"
};



export default TranslateMessageRequest;

