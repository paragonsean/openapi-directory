/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActionRequest from './ActionRequest';
import FieldRequest from './FieldRequest';
import ImagesRequest from './ImagesRequest';

/**
 * The AttachmentRequest model module.
 * @module model/AttachmentRequest
 * @version v80.2.0
 */
class AttachmentRequest {
    /**
     * Constructs a new <code>AttachmentRequest</code>.
     * @alias module:model/AttachmentRequest
     * @extends Object
     */
    constructor() { 
        
        AttachmentRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AttachmentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttachmentRequest} obj Optional instance to populate.
     * @return {module:model/AttachmentRequest} The populated <code>AttachmentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttachmentRequest();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], [ActionRequest]);
            }
            if (data.hasOwnProperty('asset_url')) {
                obj['asset_url'] = ApiClient.convertToType(data['asset_url'], 'String');
            }
            if (data.hasOwnProperty('author_icon')) {
                obj['author_icon'] = ApiClient.convertToType(data['author_icon'], 'String');
            }
            if (data.hasOwnProperty('author_link')) {
                obj['author_link'] = ApiClient.convertToType(data['author_link'], 'String');
            }
            if (data.hasOwnProperty('author_name')) {
                obj['author_name'] = ApiClient.convertToType(data['author_name'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('fallback')) {
                obj['fallback'] = ApiClient.convertToType(data['fallback'], 'String');
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], [FieldRequest]);
            }
            if (data.hasOwnProperty('footer')) {
                obj['footer'] = ApiClient.convertToType(data['footer'], 'String');
            }
            if (data.hasOwnProperty('footer_icon')) {
                obj['footer_icon'] = ApiClient.convertToType(data['footer_icon'], 'String');
            }
            if (data.hasOwnProperty('giphy')) {
                obj['giphy'] = ImagesRequest.constructFromObject(data['giphy']);
            }
            if (data.hasOwnProperty('image_url')) {
                obj['image_url'] = ApiClient.convertToType(data['image_url'], 'String');
            }
            if (data.hasOwnProperty('og_scrape_url')) {
                obj['og_scrape_url'] = ApiClient.convertToType(data['og_scrape_url'], 'String');
            }
            if (data.hasOwnProperty('original_height')) {
                obj['original_height'] = ApiClient.convertToType(data['original_height'], 'Number');
            }
            if (data.hasOwnProperty('original_width')) {
                obj['original_width'] = ApiClient.convertToType(data['original_width'], 'Number');
            }
            if (data.hasOwnProperty('pretext')) {
                obj['pretext'] = ApiClient.convertToType(data['pretext'], 'String');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('thumb_url')) {
                obj['thumb_url'] = ApiClient.convertToType(data['thumb_url'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('title_link')) {
                obj['title_link'] = ApiClient.convertToType(data['title_link'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttachmentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttachmentRequest</code>.
     */
    static validateJSON(data) {
        if (data['actions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['actions'])) {
                throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
            }
            // validate the optional field `actions` (array)
            for (const item of data['actions']) {
                ActionRequest.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['asset_url'] && !(typeof data['asset_url'] === 'string' || data['asset_url'] instanceof String)) {
            throw new Error("Expected the field `asset_url` to be a primitive type in the JSON string but got " + data['asset_url']);
        }
        // ensure the json data is a string
        if (data['author_icon'] && !(typeof data['author_icon'] === 'string' || data['author_icon'] instanceof String)) {
            throw new Error("Expected the field `author_icon` to be a primitive type in the JSON string but got " + data['author_icon']);
        }
        // ensure the json data is a string
        if (data['author_link'] && !(typeof data['author_link'] === 'string' || data['author_link'] instanceof String)) {
            throw new Error("Expected the field `author_link` to be a primitive type in the JSON string but got " + data['author_link']);
        }
        // ensure the json data is a string
        if (data['author_name'] && !(typeof data['author_name'] === 'string' || data['author_name'] instanceof String)) {
            throw new Error("Expected the field `author_name` to be a primitive type in the JSON string but got " + data['author_name']);
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is a string
        if (data['fallback'] && !(typeof data['fallback'] === 'string' || data['fallback'] instanceof String)) {
            throw new Error("Expected the field `fallback` to be a primitive type in the JSON string but got " + data['fallback']);
        }
        if (data['fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fields'])) {
                throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
            }
            // validate the optional field `fields` (array)
            for (const item of data['fields']) {
                FieldRequest.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['footer'] && !(typeof data['footer'] === 'string' || data['footer'] instanceof String)) {
            throw new Error("Expected the field `footer` to be a primitive type in the JSON string but got " + data['footer']);
        }
        // ensure the json data is a string
        if (data['footer_icon'] && !(typeof data['footer_icon'] === 'string' || data['footer_icon'] instanceof String)) {
            throw new Error("Expected the field `footer_icon` to be a primitive type in the JSON string but got " + data['footer_icon']);
        }
        // validate the optional field `giphy`
        if (data['giphy']) { // data not null
          ImagesRequest.validateJSON(data['giphy']);
        }
        // ensure the json data is a string
        if (data['image_url'] && !(typeof data['image_url'] === 'string' || data['image_url'] instanceof String)) {
            throw new Error("Expected the field `image_url` to be a primitive type in the JSON string but got " + data['image_url']);
        }
        // ensure the json data is a string
        if (data['og_scrape_url'] && !(typeof data['og_scrape_url'] === 'string' || data['og_scrape_url'] instanceof String)) {
            throw new Error("Expected the field `og_scrape_url` to be a primitive type in the JSON string but got " + data['og_scrape_url']);
        }
        // ensure the json data is a string
        if (data['pretext'] && !(typeof data['pretext'] === 'string' || data['pretext'] instanceof String)) {
            throw new Error("Expected the field `pretext` to be a primitive type in the JSON string but got " + data['pretext']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['thumb_url'] && !(typeof data['thumb_url'] === 'string' || data['thumb_url'] instanceof String)) {
            throw new Error("Expected the field `thumb_url` to be a primitive type in the JSON string but got " + data['thumb_url']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['title_link'] && !(typeof data['title_link'] === 'string' || data['title_link'] instanceof String)) {
            throw new Error("Expected the field `title_link` to be a primitive type in the JSON string but got " + data['title_link']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/ActionRequest>} actions
 */
AttachmentRequest.prototype['actions'] = undefined;

/**
 * @member {String} asset_url
 */
AttachmentRequest.prototype['asset_url'] = undefined;

/**
 * @member {String} author_icon
 */
AttachmentRequest.prototype['author_icon'] = undefined;

/**
 * @member {String} author_link
 */
AttachmentRequest.prototype['author_link'] = undefined;

/**
 * @member {String} author_name
 */
AttachmentRequest.prototype['author_name'] = undefined;

/**
 * @member {String} color
 */
AttachmentRequest.prototype['color'] = undefined;

/**
 * @member {String} fallback
 */
AttachmentRequest.prototype['fallback'] = undefined;

/**
 * @member {Array.<module:model/FieldRequest>} fields
 */
AttachmentRequest.prototype['fields'] = undefined;

/**
 * @member {String} footer
 */
AttachmentRequest.prototype['footer'] = undefined;

/**
 * @member {String} footer_icon
 */
AttachmentRequest.prototype['footer_icon'] = undefined;

/**
 * @member {module:model/ImagesRequest} giphy
 */
AttachmentRequest.prototype['giphy'] = undefined;

/**
 * @member {String} image_url
 */
AttachmentRequest.prototype['image_url'] = undefined;

/**
 * @member {String} og_scrape_url
 */
AttachmentRequest.prototype['og_scrape_url'] = undefined;

/**
 * @member {Number} original_height
 */
AttachmentRequest.prototype['original_height'] = undefined;

/**
 * @member {Number} original_width
 */
AttachmentRequest.prototype['original_width'] = undefined;

/**
 * @member {String} pretext
 */
AttachmentRequest.prototype['pretext'] = undefined;

/**
 * @member {String} text
 */
AttachmentRequest.prototype['text'] = undefined;

/**
 * @member {String} thumb_url
 */
AttachmentRequest.prototype['thumb_url'] = undefined;

/**
 * @member {String} title
 */
AttachmentRequest.prototype['title'] = undefined;

/**
 * @member {String} title_link
 */
AttachmentRequest.prototype['title_link'] = undefined;

/**
 * Attachment type (e.g. image, video, url)
 * @member {String} type
 */
AttachmentRequest.prototype['type'] = undefined;






export default AttachmentRequest;

