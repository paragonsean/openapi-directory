/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnyEvent from './AnyEvent';
import ChannelCreatedEvent from './ChannelCreatedEvent';
import ChannelDeletedEvent from './ChannelDeletedEvent';
import ChannelFrozenEvent from './ChannelFrozenEvent';
import ChannelHiddenEvent from './ChannelHiddenEvent';
import ChannelKickedEvent from './ChannelKickedEvent';
import ChannelMember from './ChannelMember';
import ChannelMessages from './ChannelMessages';
import ChannelMutedEvent from './ChannelMutedEvent';
import ChannelResponse from './ChannelResponse';
import ChannelTruncatedEvent from './ChannelTruncatedEvent';
import ChannelUnFrozenEvent from './ChannelUnFrozenEvent';
import ChannelUnmutedEvent from './ChannelUnmutedEvent';
import ChannelUpdatedEvent from './ChannelUpdatedEvent';
import ChannelVisibleEvent from './ChannelVisibleEvent';
import Flag from './Flag';
import HealthCheckEvent from './HealthCheckEvent';
import MemberAddedEvent from './MemberAddedEvent';
import MemberRemovedEvent from './MemberRemovedEvent';
import MemberUpdatedEvent from './MemberUpdatedEvent';
import Message from './Message';
import MessageDeletedEvent from './MessageDeletedEvent';
import MessageFlaggedEvent from './MessageFlaggedEvent';
import MessageNewEvent from './MessageNewEvent';
import MessageReadEvent from './MessageReadEvent';
import MessageUnblockedEvent from './MessageUnblockedEvent';
import MessageUpdatedEvent from './MessageUpdatedEvent';
import NotificationAddedToChannelEvent from './NotificationAddedToChannelEvent';
import NotificationChannelDeletedEvent from './NotificationChannelDeletedEvent';
import NotificationChannelMutesUpdatedEvent from './NotificationChannelMutesUpdatedEvent';
import NotificationChannelTruncatedEvent from './NotificationChannelTruncatedEvent';
import NotificationInviteAcceptedEvent from './NotificationInviteAcceptedEvent';
import NotificationInviteRejectedEvent from './NotificationInviteRejectedEvent';
import NotificationInvitedEvent from './NotificationInvitedEvent';
import NotificationMarkReadEvent from './NotificationMarkReadEvent';
import NotificationMarkUnreadEvent from './NotificationMarkUnreadEvent';
import NotificationMutesUpdatedEvent from './NotificationMutesUpdatedEvent';
import NotificationNewMessageEvent from './NotificationNewMessageEvent';
import NotificationRemovedFromChannelEvent from './NotificationRemovedFromChannelEvent';
import OwnUser from './OwnUser';
import Reaction from './Reaction';
import ReactionDeletedEvent from './ReactionDeletedEvent';
import ReactionNewEvent from './ReactionNewEvent';
import ReactionUpdatedEvent from './ReactionUpdatedEvent';
import TypingStartEvent from './TypingStartEvent';
import TypingStopEvent from './TypingStopEvent';
import UserBannedEvent from './UserBannedEvent';
import UserDeactivatedEvent from './UserDeactivatedEvent';
import UserDeletedEvent from './UserDeletedEvent';
import UserFlaggedEvent from './UserFlaggedEvent';
import UserMutedEvent from './UserMutedEvent';
import UserObject from './UserObject';
import UserPresenceChangedEvent from './UserPresenceChangedEvent';
import UserReactivatedEvent from './UserReactivatedEvent';
import UserUnbannedEvent from './UserUnbannedEvent';
import UserUnmutedEvent from './UserUnmutedEvent';
import UserUnreadReminderEvent from './UserUnreadReminderEvent';
import UserUpdatedEvent from './UserUpdatedEvent';
import UserWatchingStartEvent from './UserWatchingStartEvent';
import UserWatchingStopEvent from './UserWatchingStopEvent';

/**
 * The ChatEvent model module.
 * @module model/ChatEvent
 * @version v80.2.0
 */
class ChatEvent {
    /**
     * Constructs a new <code>ChatEvent</code>.
     * The discriminator object for all websocket events, you should use this to map event payloads to their own type
     * @alias module:model/ChatEvent
     * @param {(module:model/AnyEvent|module:model/ChannelCreatedEvent|module:model/ChannelDeletedEvent|module:model/ChannelFrozenEvent|module:model/ChannelHiddenEvent|module:model/ChannelKickedEvent|module:model/ChannelMutedEvent|module:model/ChannelTruncatedEvent|module:model/ChannelUnFrozenEvent|module:model/ChannelUnmutedEvent|module:model/ChannelUpdatedEvent|module:model/ChannelVisibleEvent|module:model/HealthCheckEvent|module:model/MemberAddedEvent|module:model/MemberRemovedEvent|module:model/MemberUpdatedEvent|module:model/MessageDeletedEvent|module:model/MessageFlaggedEvent|module:model/MessageNewEvent|module:model/MessageReadEvent|module:model/MessageUnblockedEvent|module:model/MessageUpdatedEvent|module:model/NotificationAddedToChannelEvent|module:model/NotificationChannelDeletedEvent|module:model/NotificationChannelMutesUpdatedEvent|module:model/NotificationChannelTruncatedEvent|module:model/NotificationInviteAcceptedEvent|module:model/NotificationInviteRejectedEvent|module:model/NotificationInvitedEvent|module:model/NotificationMarkReadEvent|module:model/NotificationMarkUnreadEvent|module:model/NotificationMutesUpdatedEvent|module:model/NotificationNewMessageEvent|module:model/NotificationRemovedFromChannelEvent|module:model/ReactionDeletedEvent|module:model/ReactionNewEvent|module:model/ReactionUpdatedEvent|module:model/TypingStartEvent|module:model/TypingStopEvent|module:model/UserBannedEvent|module:model/UserDeactivatedEvent|module:model/UserDeletedEvent|module:model/UserFlaggedEvent|module:model/UserMutedEvent|module:model/UserPresenceChangedEvent|module:model/UserReactivatedEvent|module:model/UserUnbannedEvent|module:model/UserUnmutedEvent|module:model/UserUnreadReminderEvent|module:model/UserUpdatedEvent|module:model/UserWatchingStartEvent|module:model/UserWatchingStopEvent)} instance The actual instance to initialize ChatEvent.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "AnyEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AnyEvent.validateJSON(instance); // throw an exception if no match
                // create AnyEvent from JS object
                this.actualInstance = AnyEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AnyEvent
            errorMessages.push("Failed to construct AnyEvent: " + err)
        }

        try {
            if (typeof instance === "AnyEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AnyEvent.validateJSON(instance); // throw an exception if no match
                // create AnyEvent from JS object
                this.actualInstance = AnyEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AnyEvent
            errorMessages.push("Failed to construct AnyEvent: " + err)
        }

        try {
            if (typeof instance === "ChannelCreatedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChannelCreatedEvent.validateJSON(instance); // throw an exception if no match
                // create ChannelCreatedEvent from JS object
                this.actualInstance = ChannelCreatedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChannelCreatedEvent
            errorMessages.push("Failed to construct ChannelCreatedEvent: " + err)
        }

        try {
            if (typeof instance === "ChannelDeletedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChannelDeletedEvent.validateJSON(instance); // throw an exception if no match
                // create ChannelDeletedEvent from JS object
                this.actualInstance = ChannelDeletedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChannelDeletedEvent
            errorMessages.push("Failed to construct ChannelDeletedEvent: " + err)
        }

        try {
            if (typeof instance === "ChannelFrozenEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChannelFrozenEvent.validateJSON(instance); // throw an exception if no match
                // create ChannelFrozenEvent from JS object
                this.actualInstance = ChannelFrozenEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChannelFrozenEvent
            errorMessages.push("Failed to construct ChannelFrozenEvent: " + err)
        }

        try {
            if (typeof instance === "ChannelHiddenEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChannelHiddenEvent.validateJSON(instance); // throw an exception if no match
                // create ChannelHiddenEvent from JS object
                this.actualInstance = ChannelHiddenEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChannelHiddenEvent
            errorMessages.push("Failed to construct ChannelHiddenEvent: " + err)
        }

        try {
            if (typeof instance === "ChannelKickedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChannelKickedEvent.validateJSON(instance); // throw an exception if no match
                // create ChannelKickedEvent from JS object
                this.actualInstance = ChannelKickedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChannelKickedEvent
            errorMessages.push("Failed to construct ChannelKickedEvent: " + err)
        }

        try {
            if (typeof instance === "ChannelMutedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChannelMutedEvent.validateJSON(instance); // throw an exception if no match
                // create ChannelMutedEvent from JS object
                this.actualInstance = ChannelMutedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChannelMutedEvent
            errorMessages.push("Failed to construct ChannelMutedEvent: " + err)
        }

        try {
            if (typeof instance === "ChannelTruncatedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChannelTruncatedEvent.validateJSON(instance); // throw an exception if no match
                // create ChannelTruncatedEvent from JS object
                this.actualInstance = ChannelTruncatedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChannelTruncatedEvent
            errorMessages.push("Failed to construct ChannelTruncatedEvent: " + err)
        }

        try {
            if (typeof instance === "ChannelUnFrozenEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChannelUnFrozenEvent.validateJSON(instance); // throw an exception if no match
                // create ChannelUnFrozenEvent from JS object
                this.actualInstance = ChannelUnFrozenEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChannelUnFrozenEvent
            errorMessages.push("Failed to construct ChannelUnFrozenEvent: " + err)
        }

        try {
            if (typeof instance === "ChannelUnmutedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChannelUnmutedEvent.validateJSON(instance); // throw an exception if no match
                // create ChannelUnmutedEvent from JS object
                this.actualInstance = ChannelUnmutedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChannelUnmutedEvent
            errorMessages.push("Failed to construct ChannelUnmutedEvent: " + err)
        }

        try {
            if (typeof instance === "ChannelUpdatedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChannelUpdatedEvent.validateJSON(instance); // throw an exception if no match
                // create ChannelUpdatedEvent from JS object
                this.actualInstance = ChannelUpdatedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChannelUpdatedEvent
            errorMessages.push("Failed to construct ChannelUpdatedEvent: " + err)
        }

        try {
            if (typeof instance === "ChannelVisibleEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ChannelVisibleEvent.validateJSON(instance); // throw an exception if no match
                // create ChannelVisibleEvent from JS object
                this.actualInstance = ChannelVisibleEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ChannelVisibleEvent
            errorMessages.push("Failed to construct ChannelVisibleEvent: " + err)
        }

        try {
            if (typeof instance === "HealthCheckEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                HealthCheckEvent.validateJSON(instance); // throw an exception if no match
                // create HealthCheckEvent from JS object
                this.actualInstance = HealthCheckEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into HealthCheckEvent
            errorMessages.push("Failed to construct HealthCheckEvent: " + err)
        }

        try {
            if (typeof instance === "MemberAddedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MemberAddedEvent.validateJSON(instance); // throw an exception if no match
                // create MemberAddedEvent from JS object
                this.actualInstance = MemberAddedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MemberAddedEvent
            errorMessages.push("Failed to construct MemberAddedEvent: " + err)
        }

        try {
            if (typeof instance === "MemberRemovedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MemberRemovedEvent.validateJSON(instance); // throw an exception if no match
                // create MemberRemovedEvent from JS object
                this.actualInstance = MemberRemovedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MemberRemovedEvent
            errorMessages.push("Failed to construct MemberRemovedEvent: " + err)
        }

        try {
            if (typeof instance === "MemberUpdatedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MemberUpdatedEvent.validateJSON(instance); // throw an exception if no match
                // create MemberUpdatedEvent from JS object
                this.actualInstance = MemberUpdatedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MemberUpdatedEvent
            errorMessages.push("Failed to construct MemberUpdatedEvent: " + err)
        }

        try {
            if (typeof instance === "MessageDeletedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessageDeletedEvent.validateJSON(instance); // throw an exception if no match
                // create MessageDeletedEvent from JS object
                this.actualInstance = MessageDeletedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessageDeletedEvent
            errorMessages.push("Failed to construct MessageDeletedEvent: " + err)
        }

        try {
            if (typeof instance === "MessageFlaggedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessageFlaggedEvent.validateJSON(instance); // throw an exception if no match
                // create MessageFlaggedEvent from JS object
                this.actualInstance = MessageFlaggedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessageFlaggedEvent
            errorMessages.push("Failed to construct MessageFlaggedEvent: " + err)
        }

        try {
            if (typeof instance === "MessageNewEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessageNewEvent.validateJSON(instance); // throw an exception if no match
                // create MessageNewEvent from JS object
                this.actualInstance = MessageNewEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessageNewEvent
            errorMessages.push("Failed to construct MessageNewEvent: " + err)
        }

        try {
            if (typeof instance === "MessageReadEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessageReadEvent.validateJSON(instance); // throw an exception if no match
                // create MessageReadEvent from JS object
                this.actualInstance = MessageReadEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessageReadEvent
            errorMessages.push("Failed to construct MessageReadEvent: " + err)
        }

        try {
            if (typeof instance === "MessageUnblockedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessageUnblockedEvent.validateJSON(instance); // throw an exception if no match
                // create MessageUnblockedEvent from JS object
                this.actualInstance = MessageUnblockedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessageUnblockedEvent
            errorMessages.push("Failed to construct MessageUnblockedEvent: " + err)
        }

        try {
            if (typeof instance === "MessageUpdatedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MessageUpdatedEvent.validateJSON(instance); // throw an exception if no match
                // create MessageUpdatedEvent from JS object
                this.actualInstance = MessageUpdatedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MessageUpdatedEvent
            errorMessages.push("Failed to construct MessageUpdatedEvent: " + err)
        }

        try {
            if (typeof instance === "NotificationAddedToChannelEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                NotificationAddedToChannelEvent.validateJSON(instance); // throw an exception if no match
                // create NotificationAddedToChannelEvent from JS object
                this.actualInstance = NotificationAddedToChannelEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into NotificationAddedToChannelEvent
            errorMessages.push("Failed to construct NotificationAddedToChannelEvent: " + err)
        }

        try {
            if (typeof instance === "NotificationChannelDeletedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                NotificationChannelDeletedEvent.validateJSON(instance); // throw an exception if no match
                // create NotificationChannelDeletedEvent from JS object
                this.actualInstance = NotificationChannelDeletedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into NotificationChannelDeletedEvent
            errorMessages.push("Failed to construct NotificationChannelDeletedEvent: " + err)
        }

        try {
            if (typeof instance === "NotificationChannelMutesUpdatedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                NotificationChannelMutesUpdatedEvent.validateJSON(instance); // throw an exception if no match
                // create NotificationChannelMutesUpdatedEvent from JS object
                this.actualInstance = NotificationChannelMutesUpdatedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into NotificationChannelMutesUpdatedEvent
            errorMessages.push("Failed to construct NotificationChannelMutesUpdatedEvent: " + err)
        }

        try {
            if (typeof instance === "NotificationChannelTruncatedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                NotificationChannelTruncatedEvent.validateJSON(instance); // throw an exception if no match
                // create NotificationChannelTruncatedEvent from JS object
                this.actualInstance = NotificationChannelTruncatedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into NotificationChannelTruncatedEvent
            errorMessages.push("Failed to construct NotificationChannelTruncatedEvent: " + err)
        }

        try {
            if (typeof instance === "NotificationInviteAcceptedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                NotificationInviteAcceptedEvent.validateJSON(instance); // throw an exception if no match
                // create NotificationInviteAcceptedEvent from JS object
                this.actualInstance = NotificationInviteAcceptedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into NotificationInviteAcceptedEvent
            errorMessages.push("Failed to construct NotificationInviteAcceptedEvent: " + err)
        }

        try {
            if (typeof instance === "NotificationInviteRejectedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                NotificationInviteRejectedEvent.validateJSON(instance); // throw an exception if no match
                // create NotificationInviteRejectedEvent from JS object
                this.actualInstance = NotificationInviteRejectedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into NotificationInviteRejectedEvent
            errorMessages.push("Failed to construct NotificationInviteRejectedEvent: " + err)
        }

        try {
            if (typeof instance === "NotificationInvitedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                NotificationInvitedEvent.validateJSON(instance); // throw an exception if no match
                // create NotificationInvitedEvent from JS object
                this.actualInstance = NotificationInvitedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into NotificationInvitedEvent
            errorMessages.push("Failed to construct NotificationInvitedEvent: " + err)
        }

        try {
            if (typeof instance === "NotificationMarkReadEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                NotificationMarkReadEvent.validateJSON(instance); // throw an exception if no match
                // create NotificationMarkReadEvent from JS object
                this.actualInstance = NotificationMarkReadEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into NotificationMarkReadEvent
            errorMessages.push("Failed to construct NotificationMarkReadEvent: " + err)
        }

        try {
            if (typeof instance === "NotificationMarkUnreadEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                NotificationMarkUnreadEvent.validateJSON(instance); // throw an exception if no match
                // create NotificationMarkUnreadEvent from JS object
                this.actualInstance = NotificationMarkUnreadEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into NotificationMarkUnreadEvent
            errorMessages.push("Failed to construct NotificationMarkUnreadEvent: " + err)
        }

        try {
            if (typeof instance === "NotificationMutesUpdatedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                NotificationMutesUpdatedEvent.validateJSON(instance); // throw an exception if no match
                // create NotificationMutesUpdatedEvent from JS object
                this.actualInstance = NotificationMutesUpdatedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into NotificationMutesUpdatedEvent
            errorMessages.push("Failed to construct NotificationMutesUpdatedEvent: " + err)
        }

        try {
            if (typeof instance === "NotificationNewMessageEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                NotificationNewMessageEvent.validateJSON(instance); // throw an exception if no match
                // create NotificationNewMessageEvent from JS object
                this.actualInstance = NotificationNewMessageEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into NotificationNewMessageEvent
            errorMessages.push("Failed to construct NotificationNewMessageEvent: " + err)
        }

        try {
            if (typeof instance === "NotificationRemovedFromChannelEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                NotificationRemovedFromChannelEvent.validateJSON(instance); // throw an exception if no match
                // create NotificationRemovedFromChannelEvent from JS object
                this.actualInstance = NotificationRemovedFromChannelEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into NotificationRemovedFromChannelEvent
            errorMessages.push("Failed to construct NotificationRemovedFromChannelEvent: " + err)
        }

        try {
            if (typeof instance === "ReactionDeletedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ReactionDeletedEvent.validateJSON(instance); // throw an exception if no match
                // create ReactionDeletedEvent from JS object
                this.actualInstance = ReactionDeletedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ReactionDeletedEvent
            errorMessages.push("Failed to construct ReactionDeletedEvent: " + err)
        }

        try {
            if (typeof instance === "ReactionNewEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ReactionNewEvent.validateJSON(instance); // throw an exception if no match
                // create ReactionNewEvent from JS object
                this.actualInstance = ReactionNewEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ReactionNewEvent
            errorMessages.push("Failed to construct ReactionNewEvent: " + err)
        }

        try {
            if (typeof instance === "ReactionUpdatedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ReactionUpdatedEvent.validateJSON(instance); // throw an exception if no match
                // create ReactionUpdatedEvent from JS object
                this.actualInstance = ReactionUpdatedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ReactionUpdatedEvent
            errorMessages.push("Failed to construct ReactionUpdatedEvent: " + err)
        }

        try {
            if (typeof instance === "TypingStartEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                TypingStartEvent.validateJSON(instance); // throw an exception if no match
                // create TypingStartEvent from JS object
                this.actualInstance = TypingStartEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TypingStartEvent
            errorMessages.push("Failed to construct TypingStartEvent: " + err)
        }

        try {
            if (typeof instance === "TypingStopEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                TypingStopEvent.validateJSON(instance); // throw an exception if no match
                // create TypingStopEvent from JS object
                this.actualInstance = TypingStopEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into TypingStopEvent
            errorMessages.push("Failed to construct TypingStopEvent: " + err)
        }

        try {
            if (typeof instance === "UserBannedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                UserBannedEvent.validateJSON(instance); // throw an exception if no match
                // create UserBannedEvent from JS object
                this.actualInstance = UserBannedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into UserBannedEvent
            errorMessages.push("Failed to construct UserBannedEvent: " + err)
        }

        try {
            if (typeof instance === "UserDeactivatedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                UserDeactivatedEvent.validateJSON(instance); // throw an exception if no match
                // create UserDeactivatedEvent from JS object
                this.actualInstance = UserDeactivatedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into UserDeactivatedEvent
            errorMessages.push("Failed to construct UserDeactivatedEvent: " + err)
        }

        try {
            if (typeof instance === "UserDeletedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                UserDeletedEvent.validateJSON(instance); // throw an exception if no match
                // create UserDeletedEvent from JS object
                this.actualInstance = UserDeletedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into UserDeletedEvent
            errorMessages.push("Failed to construct UserDeletedEvent: " + err)
        }

        try {
            if (typeof instance === "UserFlaggedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                UserFlaggedEvent.validateJSON(instance); // throw an exception if no match
                // create UserFlaggedEvent from JS object
                this.actualInstance = UserFlaggedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into UserFlaggedEvent
            errorMessages.push("Failed to construct UserFlaggedEvent: " + err)
        }

        try {
            if (typeof instance === "UserMutedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                UserMutedEvent.validateJSON(instance); // throw an exception if no match
                // create UserMutedEvent from JS object
                this.actualInstance = UserMutedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into UserMutedEvent
            errorMessages.push("Failed to construct UserMutedEvent: " + err)
        }

        try {
            if (typeof instance === "UserPresenceChangedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                UserPresenceChangedEvent.validateJSON(instance); // throw an exception if no match
                // create UserPresenceChangedEvent from JS object
                this.actualInstance = UserPresenceChangedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into UserPresenceChangedEvent
            errorMessages.push("Failed to construct UserPresenceChangedEvent: " + err)
        }

        try {
            if (typeof instance === "UserReactivatedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                UserReactivatedEvent.validateJSON(instance); // throw an exception if no match
                // create UserReactivatedEvent from JS object
                this.actualInstance = UserReactivatedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into UserReactivatedEvent
            errorMessages.push("Failed to construct UserReactivatedEvent: " + err)
        }

        try {
            if (typeof instance === "UserUnbannedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                UserUnbannedEvent.validateJSON(instance); // throw an exception if no match
                // create UserUnbannedEvent from JS object
                this.actualInstance = UserUnbannedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into UserUnbannedEvent
            errorMessages.push("Failed to construct UserUnbannedEvent: " + err)
        }

        try {
            if (typeof instance === "UserUnmutedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                UserUnmutedEvent.validateJSON(instance); // throw an exception if no match
                // create UserUnmutedEvent from JS object
                this.actualInstance = UserUnmutedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into UserUnmutedEvent
            errorMessages.push("Failed to construct UserUnmutedEvent: " + err)
        }

        try {
            if (typeof instance === "UserUnreadReminderEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                UserUnreadReminderEvent.validateJSON(instance); // throw an exception if no match
                // create UserUnreadReminderEvent from JS object
                this.actualInstance = UserUnreadReminderEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into UserUnreadReminderEvent
            errorMessages.push("Failed to construct UserUnreadReminderEvent: " + err)
        }

        try {
            if (typeof instance === "UserUpdatedEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                UserUpdatedEvent.validateJSON(instance); // throw an exception if no match
                // create UserUpdatedEvent from JS object
                this.actualInstance = UserUpdatedEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into UserUpdatedEvent
            errorMessages.push("Failed to construct UserUpdatedEvent: " + err)
        }

        try {
            if (typeof instance === "UserWatchingStartEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                UserWatchingStartEvent.validateJSON(instance); // throw an exception if no match
                // create UserWatchingStartEvent from JS object
                this.actualInstance = UserWatchingStartEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into UserWatchingStartEvent
            errorMessages.push("Failed to construct UserWatchingStartEvent: " + err)
        }

        try {
            if (typeof instance === "UserWatchingStopEvent") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                UserWatchingStopEvent.validateJSON(instance); // throw an exception if no match
                // create UserWatchingStopEvent from JS object
                this.actualInstance = UserWatchingStopEvent.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into UserWatchingStopEvent
            errorMessages.push("Failed to construct UserWatchingStopEvent: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `ChatEvent` with oneOf schemas AnyEvent, ChannelCreatedEvent, ChannelDeletedEvent, ChannelFrozenEvent, ChannelHiddenEvent, ChannelKickedEvent, ChannelMutedEvent, ChannelTruncatedEvent, ChannelUnFrozenEvent, ChannelUnmutedEvent, ChannelUpdatedEvent, ChannelVisibleEvent, HealthCheckEvent, MemberAddedEvent, MemberRemovedEvent, MemberUpdatedEvent, MessageDeletedEvent, MessageFlaggedEvent, MessageNewEvent, MessageReadEvent, MessageUnblockedEvent, MessageUpdatedEvent, NotificationAddedToChannelEvent, NotificationChannelDeletedEvent, NotificationChannelMutesUpdatedEvent, NotificationChannelTruncatedEvent, NotificationInviteAcceptedEvent, NotificationInviteRejectedEvent, NotificationInvitedEvent, NotificationMarkReadEvent, NotificationMarkUnreadEvent, NotificationMutesUpdatedEvent, NotificationNewMessageEvent, NotificationRemovedFromChannelEvent, ReactionDeletedEvent, ReactionNewEvent, ReactionUpdatedEvent, TypingStartEvent, TypingStopEvent, UserBannedEvent, UserDeactivatedEvent, UserDeletedEvent, UserFlaggedEvent, UserMutedEvent, UserPresenceChangedEvent, UserReactivatedEvent, UserUnbannedEvent, UserUnmutedEvent, UserUnreadReminderEvent, UserUpdatedEvent, UserWatchingStartEvent, UserWatchingStopEvent. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `ChatEvent` with oneOf schemas AnyEvent, ChannelCreatedEvent, ChannelDeletedEvent, ChannelFrozenEvent, ChannelHiddenEvent, ChannelKickedEvent, ChannelMutedEvent, ChannelTruncatedEvent, ChannelUnFrozenEvent, ChannelUnmutedEvent, ChannelUpdatedEvent, ChannelVisibleEvent, HealthCheckEvent, MemberAddedEvent, MemberRemovedEvent, MemberUpdatedEvent, MessageDeletedEvent, MessageFlaggedEvent, MessageNewEvent, MessageReadEvent, MessageUnblockedEvent, MessageUpdatedEvent, NotificationAddedToChannelEvent, NotificationChannelDeletedEvent, NotificationChannelMutesUpdatedEvent, NotificationChannelTruncatedEvent, NotificationInviteAcceptedEvent, NotificationInviteRejectedEvent, NotificationInvitedEvent, NotificationMarkReadEvent, NotificationMarkUnreadEvent, NotificationMutesUpdatedEvent, NotificationNewMessageEvent, NotificationRemovedFromChannelEvent, ReactionDeletedEvent, ReactionNewEvent, ReactionUpdatedEvent, TypingStartEvent, TypingStopEvent, UserBannedEvent, UserDeactivatedEvent, UserDeletedEvent, UserFlaggedEvent, UserMutedEvent, UserPresenceChangedEvent, UserReactivatedEvent, UserUnbannedEvent, UserUnmutedEvent, UserUnreadReminderEvent, UserUpdatedEvent, UserWatchingStartEvent, UserWatchingStopEvent. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>ChatEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChatEvent} obj Optional instance to populate.
     * @return {module:model/ChatEvent} The populated <code>ChatEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        return new ChatEvent(data);
    }

    /**
     * Gets the actual instance, which can be <code>AnyEvent</code>, <code>ChannelCreatedEvent</code>, <code>ChannelDeletedEvent</code>, <code>ChannelFrozenEvent</code>, <code>ChannelHiddenEvent</code>, <code>ChannelKickedEvent</code>, <code>ChannelMutedEvent</code>, <code>ChannelTruncatedEvent</code>, <code>ChannelUnFrozenEvent</code>, <code>ChannelUnmutedEvent</code>, <code>ChannelUpdatedEvent</code>, <code>ChannelVisibleEvent</code>, <code>HealthCheckEvent</code>, <code>MemberAddedEvent</code>, <code>MemberRemovedEvent</code>, <code>MemberUpdatedEvent</code>, <code>MessageDeletedEvent</code>, <code>MessageFlaggedEvent</code>, <code>MessageNewEvent</code>, <code>MessageReadEvent</code>, <code>MessageUnblockedEvent</code>, <code>MessageUpdatedEvent</code>, <code>NotificationAddedToChannelEvent</code>, <code>NotificationChannelDeletedEvent</code>, <code>NotificationChannelMutesUpdatedEvent</code>, <code>NotificationChannelTruncatedEvent</code>, <code>NotificationInviteAcceptedEvent</code>, <code>NotificationInviteRejectedEvent</code>, <code>NotificationInvitedEvent</code>, <code>NotificationMarkReadEvent</code>, <code>NotificationMarkUnreadEvent</code>, <code>NotificationMutesUpdatedEvent</code>, <code>NotificationNewMessageEvent</code>, <code>NotificationRemovedFromChannelEvent</code>, <code>ReactionDeletedEvent</code>, <code>ReactionNewEvent</code>, <code>ReactionUpdatedEvent</code>, <code>TypingStartEvent</code>, <code>TypingStopEvent</code>, <code>UserBannedEvent</code>, <code>UserDeactivatedEvent</code>, <code>UserDeletedEvent</code>, <code>UserFlaggedEvent</code>, <code>UserMutedEvent</code>, <code>UserPresenceChangedEvent</code>, <code>UserReactivatedEvent</code>, <code>UserUnbannedEvent</code>, <code>UserUnmutedEvent</code>, <code>UserUnreadReminderEvent</code>, <code>UserUpdatedEvent</code>, <code>UserWatchingStartEvent</code>, <code>UserWatchingStopEvent</code>.
     * @return {(module:model/AnyEvent|module:model/ChannelCreatedEvent|module:model/ChannelDeletedEvent|module:model/ChannelFrozenEvent|module:model/ChannelHiddenEvent|module:model/ChannelKickedEvent|module:model/ChannelMutedEvent|module:model/ChannelTruncatedEvent|module:model/ChannelUnFrozenEvent|module:model/ChannelUnmutedEvent|module:model/ChannelUpdatedEvent|module:model/ChannelVisibleEvent|module:model/HealthCheckEvent|module:model/MemberAddedEvent|module:model/MemberRemovedEvent|module:model/MemberUpdatedEvent|module:model/MessageDeletedEvent|module:model/MessageFlaggedEvent|module:model/MessageNewEvent|module:model/MessageReadEvent|module:model/MessageUnblockedEvent|module:model/MessageUpdatedEvent|module:model/NotificationAddedToChannelEvent|module:model/NotificationChannelDeletedEvent|module:model/NotificationChannelMutesUpdatedEvent|module:model/NotificationChannelTruncatedEvent|module:model/NotificationInviteAcceptedEvent|module:model/NotificationInviteRejectedEvent|module:model/NotificationInvitedEvent|module:model/NotificationMarkReadEvent|module:model/NotificationMarkUnreadEvent|module:model/NotificationMutesUpdatedEvent|module:model/NotificationNewMessageEvent|module:model/NotificationRemovedFromChannelEvent|module:model/ReactionDeletedEvent|module:model/ReactionNewEvent|module:model/ReactionUpdatedEvent|module:model/TypingStartEvent|module:model/TypingStopEvent|module:model/UserBannedEvent|module:model/UserDeactivatedEvent|module:model/UserDeletedEvent|module:model/UserFlaggedEvent|module:model/UserMutedEvent|module:model/UserPresenceChangedEvent|module:model/UserReactivatedEvent|module:model/UserUnbannedEvent|module:model/UserUnmutedEvent|module:model/UserUnreadReminderEvent|module:model/UserUpdatedEvent|module:model/UserWatchingStartEvent|module:model/UserWatchingStopEvent)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>AnyEvent</code>, <code>ChannelCreatedEvent</code>, <code>ChannelDeletedEvent</code>, <code>ChannelFrozenEvent</code>, <code>ChannelHiddenEvent</code>, <code>ChannelKickedEvent</code>, <code>ChannelMutedEvent</code>, <code>ChannelTruncatedEvent</code>, <code>ChannelUnFrozenEvent</code>, <code>ChannelUnmutedEvent</code>, <code>ChannelUpdatedEvent</code>, <code>ChannelVisibleEvent</code>, <code>HealthCheckEvent</code>, <code>MemberAddedEvent</code>, <code>MemberRemovedEvent</code>, <code>MemberUpdatedEvent</code>, <code>MessageDeletedEvent</code>, <code>MessageFlaggedEvent</code>, <code>MessageNewEvent</code>, <code>MessageReadEvent</code>, <code>MessageUnblockedEvent</code>, <code>MessageUpdatedEvent</code>, <code>NotificationAddedToChannelEvent</code>, <code>NotificationChannelDeletedEvent</code>, <code>NotificationChannelMutesUpdatedEvent</code>, <code>NotificationChannelTruncatedEvent</code>, <code>NotificationInviteAcceptedEvent</code>, <code>NotificationInviteRejectedEvent</code>, <code>NotificationInvitedEvent</code>, <code>NotificationMarkReadEvent</code>, <code>NotificationMarkUnreadEvent</code>, <code>NotificationMutesUpdatedEvent</code>, <code>NotificationNewMessageEvent</code>, <code>NotificationRemovedFromChannelEvent</code>, <code>ReactionDeletedEvent</code>, <code>ReactionNewEvent</code>, <code>ReactionUpdatedEvent</code>, <code>TypingStartEvent</code>, <code>TypingStopEvent</code>, <code>UserBannedEvent</code>, <code>UserDeactivatedEvent</code>, <code>UserDeletedEvent</code>, <code>UserFlaggedEvent</code>, <code>UserMutedEvent</code>, <code>UserPresenceChangedEvent</code>, <code>UserReactivatedEvent</code>, <code>UserUnbannedEvent</code>, <code>UserUnmutedEvent</code>, <code>UserUnreadReminderEvent</code>, <code>UserUpdatedEvent</code>, <code>UserWatchingStartEvent</code>, <code>UserWatchingStopEvent</code>.
     * @param {(module:model/AnyEvent|module:model/ChannelCreatedEvent|module:model/ChannelDeletedEvent|module:model/ChannelFrozenEvent|module:model/ChannelHiddenEvent|module:model/ChannelKickedEvent|module:model/ChannelMutedEvent|module:model/ChannelTruncatedEvent|module:model/ChannelUnFrozenEvent|module:model/ChannelUnmutedEvent|module:model/ChannelUpdatedEvent|module:model/ChannelVisibleEvent|module:model/HealthCheckEvent|module:model/MemberAddedEvent|module:model/MemberRemovedEvent|module:model/MemberUpdatedEvent|module:model/MessageDeletedEvent|module:model/MessageFlaggedEvent|module:model/MessageNewEvent|module:model/MessageReadEvent|module:model/MessageUnblockedEvent|module:model/MessageUpdatedEvent|module:model/NotificationAddedToChannelEvent|module:model/NotificationChannelDeletedEvent|module:model/NotificationChannelMutesUpdatedEvent|module:model/NotificationChannelTruncatedEvent|module:model/NotificationInviteAcceptedEvent|module:model/NotificationInviteRejectedEvent|module:model/NotificationInvitedEvent|module:model/NotificationMarkReadEvent|module:model/NotificationMarkUnreadEvent|module:model/NotificationMutesUpdatedEvent|module:model/NotificationNewMessageEvent|module:model/NotificationRemovedFromChannelEvent|module:model/ReactionDeletedEvent|module:model/ReactionNewEvent|module:model/ReactionUpdatedEvent|module:model/TypingStartEvent|module:model/TypingStopEvent|module:model/UserBannedEvent|module:model/UserDeactivatedEvent|module:model/UserDeletedEvent|module:model/UserFlaggedEvent|module:model/UserMutedEvent|module:model/UserPresenceChangedEvent|module:model/UserReactivatedEvent|module:model/UserUnbannedEvent|module:model/UserUnmutedEvent|module:model/UserUnreadReminderEvent|module:model/UserUpdatedEvent|module:model/UserWatchingStartEvent|module:model/UserWatchingStopEvent)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = ChatEvent.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of ChatEvent from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/ChatEvent} An instance of ChatEvent.
     */
    static fromJSON = function(json_string){
        return ChatEvent.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {Date} created_at
 */
ChatEvent.prototype['created_at'] = undefined;

/**
 * @member {String} type
 * @default 'user.watching.stop'
 */
ChatEvent.prototype['type'] = 'user.watching.stop';

/**
 * @member {module:model/ChannelResponse} channel
 */
ChatEvent.prototype['channel'] = undefined;

/**
 * @member {String} channel_id
 */
ChatEvent.prototype['channel_id'] = undefined;

/**
 * @member {String} channel_type
 */
ChatEvent.prototype['channel_type'] = undefined;

/**
 * @member {String} cid
 */
ChatEvent.prototype['cid'] = undefined;

/**
 * @member {String} team
 */
ChatEvent.prototype['team'] = undefined;

/**
 * @member {Boolean} clear_history
 */
ChatEvent.prototype['clear_history'] = undefined;

/**
 * @member {module:model/UserObject} user
 */
ChatEvent.prototype['user'] = undefined;

/**
 * @member {module:model/Message} message
 */
ChatEvent.prototype['message'] = undefined;

/**
 * @member {module:model/OwnUser} me
 */
ChatEvent.prototype['me'] = undefined;

/**
 * @member {module:model/ChannelMember} member
 */
ChatEvent.prototype['member'] = undefined;

/**
 * @member {Boolean} hard_delete
 */
ChatEvent.prototype['hard_delete'] = undefined;

/**
 * @member {Array.<module:model/UserObject>} thread_participants
 */
ChatEvent.prototype['thread_participants'] = undefined;

/**
 * @member {module:model/Flag} flag
 */
ChatEvent.prototype['flag'] = undefined;

/**
 * @member {Number} watcher_count
 */
ChatEvent.prototype['watcher_count'] = undefined;

/**
 * @member {String} last_read_message_id
 */
ChatEvent.prototype['last_read_message_id'] = undefined;

/**
 * @member {Number} total_unread_count
 */
ChatEvent.prototype['total_unread_count'] = undefined;

/**
 * @member {Number} unread_channels
 */
ChatEvent.prototype['unread_channels'] = undefined;

/**
 * @member {Number} unread_count
 */
ChatEvent.prototype['unread_count'] = undefined;

/**
 * @member {String} first_unread_message_id
 */
ChatEvent.prototype['first_unread_message_id'] = undefined;

/**
 * @member {Date} last_read_at
 */
ChatEvent.prototype['last_read_at'] = undefined;

/**
 * @member {Number} unread_messages
 */
ChatEvent.prototype['unread_messages'] = undefined;

/**
 * @member {module:model/Reaction} reaction
 */
ChatEvent.prototype['reaction'] = undefined;

/**
 * @member {String} parent_id
 */
ChatEvent.prototype['parent_id'] = undefined;

/**
 * @member {module:model/UserObject} created_by
 */
ChatEvent.prototype['created_by'] = undefined;

/**
 * @member {Date} expiration
 */
ChatEvent.prototype['expiration'] = undefined;

/**
 * @member {String} reason
 */
ChatEvent.prototype['reason'] = undefined;

/**
 * @member {Boolean} shadow
 */
ChatEvent.prototype['shadow'] = undefined;

/**
 * @member {Boolean} delete_conversation_channels
 */
ChatEvent.prototype['delete_conversation_channels'] = undefined;

/**
 * @member {Boolean} mark_messages_deleted
 */
ChatEvent.prototype['mark_messages_deleted'] = undefined;

/**
 * @member {String} target_user
 */
ChatEvent.prototype['target_user'] = undefined;

/**
 * @member {Array.<String>} target_users
 */
ChatEvent.prototype['target_users'] = undefined;

/**
 * @member {Object.<String, module:model/ChannelMessages>} channels
 */
ChatEvent.prototype['channels'] = undefined;


ChatEvent.OneOf = ["AnyEvent", "ChannelCreatedEvent", "ChannelDeletedEvent", "ChannelFrozenEvent", "ChannelHiddenEvent", "ChannelKickedEvent", "ChannelMutedEvent", "ChannelTruncatedEvent", "ChannelUnFrozenEvent", "ChannelUnmutedEvent", "ChannelUpdatedEvent", "ChannelVisibleEvent", "HealthCheckEvent", "MemberAddedEvent", "MemberRemovedEvent", "MemberUpdatedEvent", "MessageDeletedEvent", "MessageFlaggedEvent", "MessageNewEvent", "MessageReadEvent", "MessageUnblockedEvent", "MessageUpdatedEvent", "NotificationAddedToChannelEvent", "NotificationChannelDeletedEvent", "NotificationChannelMutesUpdatedEvent", "NotificationChannelTruncatedEvent", "NotificationInviteAcceptedEvent", "NotificationInviteRejectedEvent", "NotificationInvitedEvent", "NotificationMarkReadEvent", "NotificationMarkUnreadEvent", "NotificationMutesUpdatedEvent", "NotificationNewMessageEvent", "NotificationRemovedFromChannelEvent", "ReactionDeletedEvent", "ReactionNewEvent", "ReactionUpdatedEvent", "TypingStartEvent", "TypingStopEvent", "UserBannedEvent", "UserDeactivatedEvent", "UserDeletedEvent", "UserFlaggedEvent", "UserMutedEvent", "UserPresenceChangedEvent", "UserReactivatedEvent", "UserUnbannedEvent", "UserUnmutedEvent", "UserUnreadReminderEvent", "UserUpdatedEvent", "UserWatchingStartEvent", "UserWatchingStopEvent"];

export default ChatEvent;

