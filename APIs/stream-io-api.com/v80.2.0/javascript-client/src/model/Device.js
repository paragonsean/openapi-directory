/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Device model module.
 * @module model/Device
 * @version v80.2.0
 */
class Device {
    /**
     * Constructs a new <code>Device</code>.
     * @alias module:model/Device
     * @param createdAt {Date} Date/time of creation
     * @param id {String} 
     * @param pushProvider {String} 
     * @param userId {String} 
     */
    constructor(createdAt, id, pushProvider, userId) { 
        
        Device.initialize(this, createdAt, id, pushProvider, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createdAt, id, pushProvider, userId) { 
        obj['created_at'] = createdAt;
        obj['id'] = id;
        obj['push_provider'] = pushProvider;
        obj['user_id'] = userId;
    }

    /**
     * Constructs a <code>Device</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Device} obj Optional instance to populate.
     * @return {module:model/Device} The populated <code>Device</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Device();

            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('disabled_reason')) {
                obj['disabled_reason'] = ApiClient.convertToType(data['disabled_reason'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('push_provider')) {
                obj['push_provider'] = ApiClient.convertToType(data['push_provider'], 'String');
            }
            if (data.hasOwnProperty('push_provider_name')) {
                obj['push_provider_name'] = ApiClient.convertToType(data['push_provider_name'], 'String');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Device</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Device</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Device.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['disabled_reason'] && !(typeof data['disabled_reason'] === 'string' || data['disabled_reason'] instanceof String)) {
            throw new Error("Expected the field `disabled_reason` to be a primitive type in the JSON string but got " + data['disabled_reason']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['push_provider'] && !(typeof data['push_provider'] === 'string' || data['push_provider'] instanceof String)) {
            throw new Error("Expected the field `push_provider` to be a primitive type in the JSON string but got " + data['push_provider']);
        }
        // ensure the json data is a string
        if (data['push_provider_name'] && !(typeof data['push_provider_name'] === 'string' || data['push_provider_name'] instanceof String)) {
            throw new Error("Expected the field `push_provider_name` to be a primitive type in the JSON string but got " + data['push_provider_name']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}

Device.RequiredProperties = ["created_at", "id", "push_provider", "user_id"];

/**
 * Date/time of creation
 * @member {Date} created_at
 */
Device.prototype['created_at'] = undefined;

/**
 * Whether device is disabled or not
 * @member {Boolean} disabled
 */
Device.prototype['disabled'] = undefined;

/**
 * Reason explaining why device had been disabled
 * @member {String} disabled_reason
 */
Device.prototype['disabled_reason'] = undefined;

/**
 * @member {String} id
 */
Device.prototype['id'] = undefined;

/**
 * @member {String} push_provider
 */
Device.prototype['push_provider'] = undefined;

/**
 * @member {String} push_provider_name
 */
Device.prototype['push_provider_name'] = undefined;

/**
 * @member {String} user_id
 */
Device.prototype['user_id'] = undefined;






export default Device;

