/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PushNotificationSettings from './PushNotificationSettings';

/**
 * The UserObject model module.
 * @module model/UserObject
 * @version v80.2.0
 */
class UserObject {
    /**
     * Constructs a new <code>UserObject</code>.
     * Represents chat user
     * @alias module:model/UserObject
     * @extends Object
     * @param banned {Boolean} Whether a user is banned or not
     * @param id {String} Unique user identifier
     * @param online {Boolean} Whether a user online or not
     * @param role {String} Determines the set of user permissions
     */
    constructor(banned, id, online, role) { 
        
        UserObject.initialize(this, banned, id, online, role);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, banned, id, online, role) { 
        obj['banned'] = banned;
        obj['id'] = id;
        obj['online'] = online;
        obj['role'] = role;
    }

    /**
     * Constructs a <code>UserObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserObject} obj Optional instance to populate.
     * @return {module:model/UserObject} The populated <code>UserObject</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserObject();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('ban_expires')) {
                obj['ban_expires'] = ApiClient.convertToType(data['ban_expires'], 'Date');
            }
            if (data.hasOwnProperty('banned')) {
                obj['banned'] = ApiClient.convertToType(data['banned'], 'Boolean');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('deactivated_at')) {
                obj['deactivated_at'] = ApiClient.convertToType(data['deactivated_at'], 'Date');
            }
            if (data.hasOwnProperty('deleted_at')) {
                obj['deleted_at'] = ApiClient.convertToType(data['deleted_at'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('invisible')) {
                obj['invisible'] = ApiClient.convertToType(data['invisible'], 'Boolean');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('last_active')) {
                obj['last_active'] = ApiClient.convertToType(data['last_active'], 'Date');
            }
            if (data.hasOwnProperty('online')) {
                obj['online'] = ApiClient.convertToType(data['online'], 'Boolean');
            }
            if (data.hasOwnProperty('push_notifications')) {
                obj['push_notifications'] = PushNotificationSettings.constructFromObject(data['push_notifications']);
            }
            if (data.hasOwnProperty('revoke_tokens_issued_before')) {
                obj['revoke_tokens_issued_before'] = ApiClient.convertToType(data['revoke_tokens_issued_before'], 'Date');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('teams')) {
                obj['teams'] = ApiClient.convertToType(data['teams'], ['String']);
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserObject</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserObject</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserObject.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // validate the optional field `push_notifications`
        if (data['push_notifications']) { // data not null
          PushNotificationSettings.validateJSON(data['push_notifications']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['teams'])) {
            throw new Error("Expected the field `teams` to be an array in the JSON data but got " + data['teams']);
        }

        return true;
    }


}

UserObject.RequiredProperties = ["banned", "id", "online", "role"];

/**
 * Expiration date of the ban
 * @member {Date} ban_expires
 */
UserObject.prototype['ban_expires'] = undefined;

/**
 * Whether a user is banned or not
 * @member {Boolean} banned
 */
UserObject.prototype['banned'] = undefined;

/**
 * Date/time of creation
 * @member {Date} created_at
 */
UserObject.prototype['created_at'] = undefined;

/**
 * Date of deactivation
 * @member {Date} deactivated_at
 */
UserObject.prototype['deactivated_at'] = undefined;

/**
 * Date/time of deletion
 * @member {Date} deleted_at
 */
UserObject.prototype['deleted_at'] = undefined;

/**
 * Unique user identifier
 * @member {String} id
 */
UserObject.prototype['id'] = undefined;

/**
 * @member {Boolean} invisible
 */
UserObject.prototype['invisible'] = undefined;

/**
 * Preferred language of a user
 * @member {String} language
 */
UserObject.prototype['language'] = undefined;

/**
 * Date of last activity
 * @member {Date} last_active
 */
UserObject.prototype['last_active'] = undefined;

/**
 * Whether a user online or not
 * @member {Boolean} online
 */
UserObject.prototype['online'] = undefined;

/**
 * @member {module:model/PushNotificationSettings} push_notifications
 */
UserObject.prototype['push_notifications'] = undefined;

/**
 * Revocation date for tokens
 * @member {Date} revoke_tokens_issued_before
 */
UserObject.prototype['revoke_tokens_issued_before'] = undefined;

/**
 * Determines the set of user permissions
 * @member {String} role
 */
UserObject.prototype['role'] = undefined;

/**
 * List of teams user is a part of
 * @member {Array.<String>} teams
 */
UserObject.prototype['teams'] = undefined;

/**
 * Date/time of the last update
 * @member {Date} updated_at
 */
UserObject.prototype['updated_at'] = undefined;






export default UserObject;

