/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DeviceErrorInfo model module.
 * @module model/DeviceErrorInfo
 * @version v80.2.0
 */
class DeviceErrorInfo {
    /**
     * Constructs a new <code>DeviceErrorInfo</code>.
     * @alias module:model/DeviceErrorInfo
     * @param errorMessage {String} 
     * @param provider {String} 
     * @param providerName {String} 
     */
    constructor(errorMessage, provider, providerName) { 
        
        DeviceErrorInfo.initialize(this, errorMessage, provider, providerName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, errorMessage, provider, providerName) { 
        obj['error_message'] = errorMessage;
        obj['provider'] = provider;
        obj['provider_name'] = providerName;
    }

    /**
     * Constructs a <code>DeviceErrorInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeviceErrorInfo} obj Optional instance to populate.
     * @return {module:model/DeviceErrorInfo} The populated <code>DeviceErrorInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeviceErrorInfo();

            if (data.hasOwnProperty('error_message')) {
                obj['error_message'] = ApiClient.convertToType(data['error_message'], 'String');
            }
            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('provider_name')) {
                obj['provider_name'] = ApiClient.convertToType(data['provider_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeviceErrorInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeviceErrorInfo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeviceErrorInfo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['error_message'] && !(typeof data['error_message'] === 'string' || data['error_message'] instanceof String)) {
            throw new Error("Expected the field `error_message` to be a primitive type in the JSON string but got " + data['error_message']);
        }
        // ensure the json data is a string
        if (data['provider'] && !(typeof data['provider'] === 'string' || data['provider'] instanceof String)) {
            throw new Error("Expected the field `provider` to be a primitive type in the JSON string but got " + data['provider']);
        }
        // ensure the json data is a string
        if (data['provider_name'] && !(typeof data['provider_name'] === 'string' || data['provider_name'] instanceof String)) {
            throw new Error("Expected the field `provider_name` to be a primitive type in the JSON string but got " + data['provider_name']);
        }

        return true;
    }


}

DeviceErrorInfo.RequiredProperties = ["error_message", "provider", "provider_name"];

/**
 * @member {String} error_message
 */
DeviceErrorInfo.prototype['error_message'] = undefined;

/**
 * @member {String} provider
 */
DeviceErrorInfo.prototype['provider'] = undefined;

/**
 * @member {String} provider_name
 */
DeviceErrorInfo.prototype['provider_name'] = undefined;






export default DeviceErrorInfo;

