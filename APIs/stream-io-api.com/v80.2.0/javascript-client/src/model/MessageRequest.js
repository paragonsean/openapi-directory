/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttachmentRequest from './AttachmentRequest';
import UserObjectRequest from './UserObjectRequest';

/**
 * The MessageRequest model module.
 * @module model/MessageRequest
 * @version v80.2.0
 */
class MessageRequest {
    /**
     * Constructs a new <code>MessageRequest</code>.
     * Represents any chat message
     * @alias module:model/MessageRequest
     * @extends Object
     * @param attachments {Array.<module:model/AttachmentRequest>} Array of message attachments
     */
    constructor(attachments) { 
        
        MessageRequest.initialize(this, attachments);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attachments) { 
        obj['attachments'] = attachments;
    }

    /**
     * Constructs a <code>MessageRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessageRequest} obj Optional instance to populate.
     * @return {module:model/MessageRequest} The populated <code>MessageRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessageRequest();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], [AttachmentRequest]);
            }
            if (data.hasOwnProperty('cid')) {
                obj['cid'] = ApiClient.convertToType(data['cid'], ['Number']);
            }
            if (data.hasOwnProperty('html')) {
                obj['html'] = ApiClient.convertToType(data['html'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('mentioned_users')) {
                obj['mentioned_users'] = ApiClient.convertToType(data['mentioned_users'], ['String']);
            }
            if (data.hasOwnProperty('mml')) {
                obj['mml'] = ApiClient.convertToType(data['mml'], 'String');
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ApiClient.convertToType(data['parent'], ['Number']);
            }
            if (data.hasOwnProperty('parent_id')) {
                obj['parent_id'] = ApiClient.convertToType(data['parent_id'], 'String');
            }
            if (data.hasOwnProperty('pin_expires')) {
                obj['pin_expires'] = ApiClient.convertToType(data['pin_expires'], 'Date');
            }
            if (data.hasOwnProperty('pinned')) {
                obj['pinned'] = ApiClient.convertToType(data['pinned'], 'Boolean');
            }
            if (data.hasOwnProperty('pinned_at')) {
                obj['pinned_at'] = ApiClient.convertToType(data['pinned_at'], 'Date');
            }
            if (data.hasOwnProperty('pinned_by')) {
                obj['pinned_by'] = ApiClient.convertToType(data['pinned_by'], ['Number']);
            }
            if (data.hasOwnProperty('quoted_message_id')) {
                obj['quoted_message_id'] = ApiClient.convertToType(data['quoted_message_id'], 'String');
            }
            if (data.hasOwnProperty('reaction_scores')) {
                obj['reaction_scores'] = ApiClient.convertToType(data['reaction_scores'], ['Number']);
            }
            if (data.hasOwnProperty('show_in_channel')) {
                obj['show_in_channel'] = ApiClient.convertToType(data['show_in_channel'], 'Boolean');
            }
            if (data.hasOwnProperty('silent')) {
                obj['silent'] = ApiClient.convertToType(data['silent'], 'Boolean');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = UserObjectRequest.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MessageRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MessageRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MessageRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['attachments'])) {
            throw new Error("Expected the field `attachments` to be an array in the JSON data but got " + data['attachments']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['cid'])) {
            throw new Error("Expected the field `cid` to be an array in the JSON data but got " + data['cid']);
        }
        // ensure the json data is a string
        if (data['html'] && !(typeof data['html'] === 'string' || data['html'] instanceof String)) {
            throw new Error("Expected the field `html` to be a primitive type in the JSON string but got " + data['html']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mentioned_users'])) {
            throw new Error("Expected the field `mentioned_users` to be an array in the JSON data but got " + data['mentioned_users']);
        }
        // ensure the json data is a string
        if (data['mml'] && !(typeof data['mml'] === 'string' || data['mml'] instanceof String)) {
            throw new Error("Expected the field `mml` to be a primitive type in the JSON string but got " + data['mml']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['parent'])) {
            throw new Error("Expected the field `parent` to be an array in the JSON data but got " + data['parent']);
        }
        // ensure the json data is a string
        if (data['parent_id'] && !(typeof data['parent_id'] === 'string' || data['parent_id'] instanceof String)) {
            throw new Error("Expected the field `parent_id` to be a primitive type in the JSON string but got " + data['parent_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pinned_by'])) {
            throw new Error("Expected the field `pinned_by` to be an array in the JSON data but got " + data['pinned_by']);
        }
        // ensure the json data is a string
        if (data['quoted_message_id'] && !(typeof data['quoted_message_id'] === 'string' || data['quoted_message_id'] instanceof String)) {
            throw new Error("Expected the field `quoted_message_id` to be a primitive type in the JSON string but got " + data['quoted_message_id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['reaction_scores'])) {
            throw new Error("Expected the field `reaction_scores` to be an array in the JSON data but got " + data['reaction_scores']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}

MessageRequest.RequiredProperties = ["attachments"];

/**
 * Array of message attachments
 * @member {Array.<module:model/AttachmentRequest>} attachments
 */
MessageRequest.prototype['attachments'] = undefined;

/**
 * Channel unique identifier in <type>:<id> format
 * @member {Array.<Number>} cid
 */
MessageRequest.prototype['cid'] = undefined;

/**
 * Contains HTML markup of the message. Can only be set when using server-side API
 * @member {String} html
 */
MessageRequest.prototype['html'] = undefined;

/**
 * Message ID is unique string identifier of the message
 * @member {String} id
 */
MessageRequest.prototype['id'] = undefined;

/**
 * List of mentioned users
 * @member {Array.<String>} mentioned_users
 */
MessageRequest.prototype['mentioned_users'] = undefined;

/**
 * Should be empty if `text` is provided. Can only be set when using server-side API
 * @member {String} mml
 */
MessageRequest.prototype['mml'] = undefined;

/**
 * @member {Array.<Number>} parent
 */
MessageRequest.prototype['parent'] = undefined;

/**
 * ID of parent message (thread)
 * @member {String} parent_id
 */
MessageRequest.prototype['parent_id'] = undefined;

/**
 * Date when pinned message expires
 * @member {Date} pin_expires
 */
MessageRequest.prototype['pin_expires'] = undefined;

/**
 * Whether message is pinned or not
 * @member {Boolean} pinned
 */
MessageRequest.prototype['pinned'] = undefined;

/**
 * Date when message got pinned
 * @member {Date} pinned_at
 */
MessageRequest.prototype['pinned_at'] = undefined;

/**
 * Contains user who pinned the message
 * @member {Array.<Number>} pinned_by
 */
MessageRequest.prototype['pinned_by'] = undefined;

/**
 * @member {String} quoted_message_id
 */
MessageRequest.prototype['quoted_message_id'] = undefined;

/**
 * An object containing scores of reactions of each type. Key: reaction type (string), value: total score of reactions (int)
 * @member {Array.<Number>} reaction_scores
 */
MessageRequest.prototype['reaction_scores'] = undefined;

/**
 * Whether thread reply should be shown in the channel as well
 * @member {Boolean} show_in_channel
 */
MessageRequest.prototype['show_in_channel'] = undefined;

/**
 * Whether message is silent or not
 * @member {Boolean} silent
 */
MessageRequest.prototype['silent'] = undefined;

/**
 * Text of the message. Should be empty if `mml` is provided
 * @member {String} text
 */
MessageRequest.prototype['text'] = undefined;

/**
 * Contains type of the message
 * @member {module:model/MessageRequest.TypeEnum} type
 */
MessageRequest.prototype['type'] = undefined;

/**
 * @member {module:model/UserObjectRequest} user
 */
MessageRequest.prototype['user'] = undefined;

/**
 * @member {String} user_id
 */
MessageRequest.prototype['user_id'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
MessageRequest['TypeEnum'] = {

    /**
     * value: "regular"
     * @const
     */
    "regular": "regular",

    /**
     * value: "ephemeral"
     * @const
     */
    "ephemeral": "ephemeral",

    /**
     * value: "error"
     * @const
     */
    "error": "error",

    /**
     * value: "reply"
     * @const
     */
    "reply": "reply",

    /**
     * value: "system"
     * @const
     */
    "system": "system",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted"
};



export default MessageRequest;

