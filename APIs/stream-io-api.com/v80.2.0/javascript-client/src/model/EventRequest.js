/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChannelMemberRequest from './ChannelMemberRequest';
import ChannelResponseRequest from './ChannelResponseRequest';
import MessageRequest1 from './MessageRequest1';
import ModerationResponseRequest from './ModerationResponseRequest';
import OwnUserRequest from './OwnUserRequest';
import ReactionRequest from './ReactionRequest';
import UserObjectRequest from './UserObjectRequest';

/**
 * The EventRequest model module.
 * @module model/EventRequest
 * @version v80.2.0
 */
class EventRequest {
    /**
     * Constructs a new <code>EventRequest</code>.
     * Represents an BaseEvent that happened in Stream Chat
     * @alias module:model/EventRequest
     * @extends Object
     * @param type {String} Event type. To use custom BaseEvent types see Custom Events documentation
     */
    constructor(type) { 
        
        EventRequest.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>EventRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventRequest} obj Optional instance to populate.
     * @return {module:model/EventRequest} The populated <code>EventRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventRequest();

            ApiClient.constructFromObject(data, obj, 'Object');
            

            if (data.hasOwnProperty('automoderation')) {
                obj['automoderation'] = ApiClient.convertToType(data['automoderation'], 'Boolean');
            }
            if (data.hasOwnProperty('automoderation_scores')) {
                obj['automoderation_scores'] = ModerationResponseRequest.constructFromObject(data['automoderation_scores']);
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ChannelResponseRequest.constructFromObject(data['channel']);
            }
            if (data.hasOwnProperty('channel_id')) {
                obj['channel_id'] = ApiClient.convertToType(data['channel_id'], 'String');
            }
            if (data.hasOwnProperty('channel_type')) {
                obj['channel_type'] = ApiClient.convertToType(data['channel_type'], 'String');
            }
            if (data.hasOwnProperty('cid')) {
                obj['cid'] = ApiClient.convertToType(data['cid'], 'String');
            }
            if (data.hasOwnProperty('connection_id')) {
                obj['connection_id'] = ApiClient.convertToType(data['connection_id'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('created_by')) {
                obj['created_by'] = UserObjectRequest.constructFromObject(data['created_by']);
            }
            if (data.hasOwnProperty('me')) {
                obj['me'] = OwnUserRequest.constructFromObject(data['me']);
            }
            if (data.hasOwnProperty('member')) {
                obj['member'] = ChannelMemberRequest.constructFromObject(data['member']);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = MessageRequest1.constructFromObject(data['message']);
            }
            if (data.hasOwnProperty('parent_id')) {
                obj['parent_id'] = ApiClient.convertToType(data['parent_id'], 'String');
            }
            if (data.hasOwnProperty('reaction')) {
                obj['reaction'] = ReactionRequest.constructFromObject(data['reaction']);
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('team')) {
                obj['team'] = ApiClient.convertToType(data['team'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = UserObjectRequest.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
            if (data.hasOwnProperty('watcher_count')) {
                obj['watcher_count'] = ApiClient.convertToType(data['watcher_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `automoderation_scores`
        if (data['automoderation_scores']) { // data not null
          ModerationResponseRequest.validateJSON(data['automoderation_scores']);
        }
        // ensure the json data is a string
        if (data['channel_id'] && !(typeof data['channel_id'] === 'string' || data['channel_id'] instanceof String)) {
            throw new Error("Expected the field `channel_id` to be a primitive type in the JSON string but got " + data['channel_id']);
        }
        // ensure the json data is a string
        if (data['channel_type'] && !(typeof data['channel_type'] === 'string' || data['channel_type'] instanceof String)) {
            throw new Error("Expected the field `channel_type` to be a primitive type in the JSON string but got " + data['channel_type']);
        }
        // ensure the json data is a string
        if (data['cid'] && !(typeof data['cid'] === 'string' || data['cid'] instanceof String)) {
            throw new Error("Expected the field `cid` to be a primitive type in the JSON string but got " + data['cid']);
        }
        // ensure the json data is a string
        if (data['connection_id'] && !(typeof data['connection_id'] === 'string' || data['connection_id'] instanceof String)) {
            throw new Error("Expected the field `connection_id` to be a primitive type in the JSON string but got " + data['connection_id']);
        }
        // validate the optional field `member`
        if (data['member']) { // data not null
          ChannelMemberRequest.validateJSON(data['member']);
        }
        // ensure the json data is a string
        if (data['parent_id'] && !(typeof data['parent_id'] === 'string' || data['parent_id'] instanceof String)) {
            throw new Error("Expected the field `parent_id` to be a primitive type in the JSON string but got " + data['parent_id']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['team'] && !(typeof data['team'] === 'string' || data['team'] instanceof String)) {
            throw new Error("Expected the field `team` to be a primitive type in the JSON string but got " + data['team']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }

        return true;
    }


}

EventRequest.RequiredProperties = ["type"];

/**
 * Only applicable to `message.flagged` BaseEvent.
 * @member {Boolean} automoderation
 */
EventRequest.prototype['automoderation'] = undefined;

/**
 * @member {module:model/ModerationResponseRequest} automoderation_scores
 */
EventRequest.prototype['automoderation_scores'] = undefined;

/**
 * @member {module:model/ChannelResponseRequest} channel
 */
EventRequest.prototype['channel'] = undefined;

/**
 * @member {String} channel_id
 */
EventRequest.prototype['channel_id'] = undefined;

/**
 * @member {String} channel_type
 */
EventRequest.prototype['channel_type'] = undefined;

/**
 * Channel CID (<type>:<id>)
 * @member {String} cid
 */
EventRequest.prototype['cid'] = undefined;

/**
 * Only applicable to `health.check` BaseEvent
 * @member {String} connection_id
 */
EventRequest.prototype['connection_id'] = undefined;

/**
 * Date/time of creation
 * @member {Date} created_at
 */
EventRequest.prototype['created_at'] = undefined;

/**
 * @member {module:model/UserObjectRequest} created_by
 */
EventRequest.prototype['created_by'] = undefined;

/**
 * @member {module:model/OwnUserRequest} me
 */
EventRequest.prototype['me'] = undefined;

/**
 * @member {module:model/ChannelMemberRequest} member
 */
EventRequest.prototype['member'] = undefined;

/**
 * @member {module:model/MessageRequest1} message
 */
EventRequest.prototype['message'] = undefined;

/**
 * ID of thread. Used in typing events
 * @member {String} parent_id
 */
EventRequest.prototype['parent_id'] = undefined;

/**
 * @member {module:model/ReactionRequest} reaction
 */
EventRequest.prototype['reaction'] = undefined;

/**
 * Ban reason. Only applicable to `user.banned` BaseEvent
 * @member {String} reason
 */
EventRequest.prototype['reason'] = undefined;

/**
 * @member {String} team
 */
EventRequest.prototype['team'] = undefined;

/**
 * Event type. To use custom BaseEvent types see Custom Events documentation
 * @member {String} type
 */
EventRequest.prototype['type'] = undefined;

/**
 * @member {module:model/UserObjectRequest} user
 */
EventRequest.prototype['user'] = undefined;

/**
 * @member {String} user_id
 */
EventRequest.prototype['user_id'] = undefined;

/**
 * Number of watchers who received this BaseEvent
 * @member {Number} watcher_count
 */
EventRequest.prototype['watcher_count'] = undefined;






export default EventRequest;

