/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The APIError model module.
 * @module model/APIError
 * @version v80.2.0
 */
class APIError {
    /**
     * Constructs a new <code>APIError</code>.
     * @alias module:model/APIError
     * @param statusCode {Number} Response HTTP status code
     * @param code {Number} API error code
     * @param details {Array.<Number>} Additional error-specific information
     * @param duration {String} Request duration
     * @param message {String} Message describing an error
     * @param moreInfo {String} URL with additional information
     */
    constructor(statusCode, code, details, duration, message, moreInfo) { 
        
        APIError.initialize(this, statusCode, code, details, duration, message, moreInfo);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, statusCode, code, details, duration, message, moreInfo) { 
        obj['StatusCode'] = statusCode;
        obj['code'] = code;
        obj['details'] = details;
        obj['duration'] = duration;
        obj['message'] = message;
        obj['more_info'] = moreInfo;
    }

    /**
     * Constructs a <code>APIError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/APIError} obj Optional instance to populate.
     * @return {module:model/APIError} The populated <code>APIError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new APIError();

            if (data.hasOwnProperty('StatusCode')) {
                obj['StatusCode'] = ApiClient.convertToType(data['StatusCode'], 'Number');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'Number');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], ['Number']);
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'String');
            }
            if (data.hasOwnProperty('exception_fields')) {
                obj['exception_fields'] = ApiClient.convertToType(data['exception_fields'], {'String': 'String'});
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('more_info')) {
                obj['more_info'] = ApiClient.convertToType(data['more_info'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>APIError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>APIError</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of APIError.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['details'])) {
            throw new Error("Expected the field `details` to be an array in the JSON data but got " + data['details']);
        }
        // ensure the json data is a string
        if (data['duration'] && !(typeof data['duration'] === 'string' || data['duration'] instanceof String)) {
            throw new Error("Expected the field `duration` to be a primitive type in the JSON string but got " + data['duration']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['more_info'] && !(typeof data['more_info'] === 'string' || data['more_info'] instanceof String)) {
            throw new Error("Expected the field `more_info` to be a primitive type in the JSON string but got " + data['more_info']);
        }

        return true;
    }


}

APIError.RequiredProperties = ["StatusCode", "code", "details", "duration", "message", "more_info"];

/**
 * Response HTTP status code
 * @member {Number} StatusCode
 */
APIError.prototype['StatusCode'] = undefined;

/**
 * API error code
 * @member {Number} code
 */
APIError.prototype['code'] = undefined;

/**
 * Additional error-specific information
 * @member {Array.<Number>} details
 */
APIError.prototype['details'] = undefined;

/**
 * Request duration
 * @member {String} duration
 */
APIError.prototype['duration'] = undefined;

/**
 * Additional error info
 * @member {Object.<String, String>} exception_fields
 */
APIError.prototype['exception_fields'] = undefined;

/**
 * Message describing an error
 * @member {String} message
 */
APIError.prototype['message'] = undefined;

/**
 * URL with additional information
 * @member {String} more_info
 */
APIError.prototype['more_info'] = undefined;






export default APIError;

