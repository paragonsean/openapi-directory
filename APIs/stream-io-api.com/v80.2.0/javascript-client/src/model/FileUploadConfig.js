/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FileUploadConfig model module.
 * @module model/FileUploadConfig
 * @version v80.2.0
 */
class FileUploadConfig {
    /**
     * Constructs a new <code>FileUploadConfig</code>.
     * @alias module:model/FileUploadConfig
     * @param allowedFileExtensions {Array.<String>} 
     * @param allowedMimeTypes {Array.<String>} 
     * @param blockedFileExtensions {Array.<String>} 
     * @param blockedMimeTypes {Array.<String>} 
     */
    constructor(allowedFileExtensions, allowedMimeTypes, blockedFileExtensions, blockedMimeTypes) { 
        
        FileUploadConfig.initialize(this, allowedFileExtensions, allowedMimeTypes, blockedFileExtensions, blockedMimeTypes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, allowedFileExtensions, allowedMimeTypes, blockedFileExtensions, blockedMimeTypes) { 
        obj['allowed_file_extensions'] = allowedFileExtensions;
        obj['allowed_mime_types'] = allowedMimeTypes;
        obj['blocked_file_extensions'] = blockedFileExtensions;
        obj['blocked_mime_types'] = blockedMimeTypes;
    }

    /**
     * Constructs a <code>FileUploadConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileUploadConfig} obj Optional instance to populate.
     * @return {module:model/FileUploadConfig} The populated <code>FileUploadConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileUploadConfig();

            if (data.hasOwnProperty('allowed_file_extensions')) {
                obj['allowed_file_extensions'] = ApiClient.convertToType(data['allowed_file_extensions'], ['String']);
            }
            if (data.hasOwnProperty('allowed_mime_types')) {
                obj['allowed_mime_types'] = ApiClient.convertToType(data['allowed_mime_types'], ['String']);
            }
            if (data.hasOwnProperty('blocked_file_extensions')) {
                obj['blocked_file_extensions'] = ApiClient.convertToType(data['blocked_file_extensions'], ['String']);
            }
            if (data.hasOwnProperty('blocked_mime_types')) {
                obj['blocked_mime_types'] = ApiClient.convertToType(data['blocked_mime_types'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileUploadConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileUploadConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FileUploadConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowed_file_extensions'])) {
            throw new Error("Expected the field `allowed_file_extensions` to be an array in the JSON data but got " + data['allowed_file_extensions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowed_mime_types'])) {
            throw new Error("Expected the field `allowed_mime_types` to be an array in the JSON data but got " + data['allowed_mime_types']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['blocked_file_extensions'])) {
            throw new Error("Expected the field `blocked_file_extensions` to be an array in the JSON data but got " + data['blocked_file_extensions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['blocked_mime_types'])) {
            throw new Error("Expected the field `blocked_mime_types` to be an array in the JSON data but got " + data['blocked_mime_types']);
        }

        return true;
    }


}

FileUploadConfig.RequiredProperties = ["allowed_file_extensions", "allowed_mime_types", "blocked_file_extensions", "blocked_mime_types"];

/**
 * @member {Array.<String>} allowed_file_extensions
 */
FileUploadConfig.prototype['allowed_file_extensions'] = undefined;

/**
 * @member {Array.<String>} allowed_mime_types
 */
FileUploadConfig.prototype['allowed_mime_types'] = undefined;

/**
 * @member {Array.<String>} blocked_file_extensions
 */
FileUploadConfig.prototype['blocked_file_extensions'] = undefined;

/**
 * @member {Array.<String>} blocked_mime_types
 */
FileUploadConfig.prototype['blocked_mime_types'] = undefined;






export default FileUploadConfig;

