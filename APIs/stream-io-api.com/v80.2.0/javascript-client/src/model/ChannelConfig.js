/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Thresholds from './Thresholds';

/**
 * The ChannelConfig model module.
 * @module model/ChannelConfig
 * @version v80.2.0
 */
class ChannelConfig {
    /**
     * Constructs a new <code>ChannelConfig</code>.
     * @alias module:model/ChannelConfig
     * @param automod {module:model/ChannelConfig.AutomodEnum} 
     * @param automodBehavior {module:model/ChannelConfig.AutomodBehaviorEnum} 
     * @param commands {Array.<String>} List of commands that channel supports
     * @param connectEvents {Boolean} 
     * @param createdAt {Date} 
     * @param customEvents {Boolean} 
     * @param maxMessageLength {Number} 
     * @param messageRetention {String} 
     * @param mutes {Boolean} 
     * @param name {String} 
     * @param pushNotifications {Boolean} 
     * @param quotes {Boolean} 
     * @param reactions {Boolean} 
     * @param readEvents {Boolean} 
     * @param reminders {Boolean} 
     * @param replies {Boolean} 
     * @param search {Boolean} 
     * @param typingEvents {Boolean} 
     * @param updatedAt {Date} 
     * @param uploads {Boolean} 
     * @param urlEnrichment {Boolean} 
     */
    constructor(automod, automodBehavior, commands, connectEvents, createdAt, customEvents, maxMessageLength, messageRetention, mutes, name, pushNotifications, quotes, reactions, readEvents, reminders, replies, search, typingEvents, updatedAt, uploads, urlEnrichment) { 
        
        ChannelConfig.initialize(this, automod, automodBehavior, commands, connectEvents, createdAt, customEvents, maxMessageLength, messageRetention, mutes, name, pushNotifications, quotes, reactions, readEvents, reminders, replies, search, typingEvents, updatedAt, uploads, urlEnrichment);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, automod, automodBehavior, commands, connectEvents, createdAt, customEvents, maxMessageLength, messageRetention, mutes, name, pushNotifications, quotes, reactions, readEvents, reminders, replies, search, typingEvents, updatedAt, uploads, urlEnrichment) { 
        obj['automod'] = automod;
        obj['automod_behavior'] = automodBehavior;
        obj['commands'] = commands;
        obj['connect_events'] = connectEvents;
        obj['created_at'] = createdAt;
        obj['custom_events'] = customEvents;
        obj['max_message_length'] = maxMessageLength;
        obj['message_retention'] = messageRetention;
        obj['mutes'] = mutes;
        obj['name'] = name;
        obj['push_notifications'] = pushNotifications;
        obj['quotes'] = quotes;
        obj['reactions'] = reactions;
        obj['read_events'] = readEvents;
        obj['reminders'] = reminders;
        obj['replies'] = replies;
        obj['search'] = search;
        obj['typing_events'] = typingEvents;
        obj['updated_at'] = updatedAt;
        obj['uploads'] = uploads;
        obj['url_enrichment'] = urlEnrichment;
    }

    /**
     * Constructs a <code>ChannelConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ChannelConfig} obj Optional instance to populate.
     * @return {module:model/ChannelConfig} The populated <code>ChannelConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ChannelConfig();

            if (data.hasOwnProperty('automod')) {
                obj['automod'] = ApiClient.convertToType(data['automod'], 'String');
            }
            if (data.hasOwnProperty('automod_behavior')) {
                obj['automod_behavior'] = ApiClient.convertToType(data['automod_behavior'], 'String');
            }
            if (data.hasOwnProperty('automod_thresholds')) {
                obj['automod_thresholds'] = Thresholds.constructFromObject(data['automod_thresholds']);
            }
            if (data.hasOwnProperty('blocklist')) {
                obj['blocklist'] = ApiClient.convertToType(data['blocklist'], 'String');
            }
            if (data.hasOwnProperty('blocklist_behavior')) {
                obj['blocklist_behavior'] = ApiClient.convertToType(data['blocklist_behavior'], 'String');
            }
            if (data.hasOwnProperty('commands')) {
                obj['commands'] = ApiClient.convertToType(data['commands'], ['String']);
            }
            if (data.hasOwnProperty('connect_events')) {
                obj['connect_events'] = ApiClient.convertToType(data['connect_events'], 'Boolean');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('custom_events')) {
                obj['custom_events'] = ApiClient.convertToType(data['custom_events'], 'Boolean');
            }
            if (data.hasOwnProperty('max_message_length')) {
                obj['max_message_length'] = ApiClient.convertToType(data['max_message_length'], 'Number');
            }
            if (data.hasOwnProperty('message_retention')) {
                obj['message_retention'] = ApiClient.convertToType(data['message_retention'], 'String');
            }
            if (data.hasOwnProperty('mutes')) {
                obj['mutes'] = ApiClient.convertToType(data['mutes'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('push_notifications')) {
                obj['push_notifications'] = ApiClient.convertToType(data['push_notifications'], 'Boolean');
            }
            if (data.hasOwnProperty('quotes')) {
                obj['quotes'] = ApiClient.convertToType(data['quotes'], 'Boolean');
            }
            if (data.hasOwnProperty('reactions')) {
                obj['reactions'] = ApiClient.convertToType(data['reactions'], 'Boolean');
            }
            if (data.hasOwnProperty('read_events')) {
                obj['read_events'] = ApiClient.convertToType(data['read_events'], 'Boolean');
            }
            if (data.hasOwnProperty('reminders')) {
                obj['reminders'] = ApiClient.convertToType(data['reminders'], 'Boolean');
            }
            if (data.hasOwnProperty('replies')) {
                obj['replies'] = ApiClient.convertToType(data['replies'], 'Boolean');
            }
            if (data.hasOwnProperty('search')) {
                obj['search'] = ApiClient.convertToType(data['search'], 'Boolean');
            }
            if (data.hasOwnProperty('typing_events')) {
                obj['typing_events'] = ApiClient.convertToType(data['typing_events'], 'Boolean');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('uploads')) {
                obj['uploads'] = ApiClient.convertToType(data['uploads'], 'Boolean');
            }
            if (data.hasOwnProperty('url_enrichment')) {
                obj['url_enrichment'] = ApiClient.convertToType(data['url_enrichment'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ChannelConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ChannelConfig</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ChannelConfig.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['automod'] && !(typeof data['automod'] === 'string' || data['automod'] instanceof String)) {
            throw new Error("Expected the field `automod` to be a primitive type in the JSON string but got " + data['automod']);
        }
        // ensure the json data is a string
        if (data['automod_behavior'] && !(typeof data['automod_behavior'] === 'string' || data['automod_behavior'] instanceof String)) {
            throw new Error("Expected the field `automod_behavior` to be a primitive type in the JSON string but got " + data['automod_behavior']);
        }
        // validate the optional field `automod_thresholds`
        if (data['automod_thresholds']) { // data not null
          Thresholds.validateJSON(data['automod_thresholds']);
        }
        // ensure the json data is a string
        if (data['blocklist'] && !(typeof data['blocklist'] === 'string' || data['blocklist'] instanceof String)) {
            throw new Error("Expected the field `blocklist` to be a primitive type in the JSON string but got " + data['blocklist']);
        }
        // ensure the json data is a string
        if (data['blocklist_behavior'] && !(typeof data['blocklist_behavior'] === 'string' || data['blocklist_behavior'] instanceof String)) {
            throw new Error("Expected the field `blocklist_behavior` to be a primitive type in the JSON string but got " + data['blocklist_behavior']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['commands'])) {
            throw new Error("Expected the field `commands` to be an array in the JSON data but got " + data['commands']);
        }
        // ensure the json data is a string
        if (data['message_retention'] && !(typeof data['message_retention'] === 'string' || data['message_retention'] instanceof String)) {
            throw new Error("Expected the field `message_retention` to be a primitive type in the JSON string but got " + data['message_retention']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

ChannelConfig.RequiredProperties = ["automod", "automod_behavior", "commands", "connect_events", "created_at", "custom_events", "max_message_length", "message_retention", "mutes", "name", "push_notifications", "quotes", "reactions", "read_events", "reminders", "replies", "search", "typing_events", "updated_at", "uploads", "url_enrichment"];

/**
 * @member {module:model/ChannelConfig.AutomodEnum} automod
 */
ChannelConfig.prototype['automod'] = undefined;

/**
 * @member {module:model/ChannelConfig.AutomodBehaviorEnum} automod_behavior
 */
ChannelConfig.prototype['automod_behavior'] = undefined;

/**
 * @member {module:model/Thresholds} automod_thresholds
 */
ChannelConfig.prototype['automod_thresholds'] = undefined;

/**
 * @member {String} blocklist
 */
ChannelConfig.prototype['blocklist'] = undefined;

/**
 * @member {module:model/ChannelConfig.BlocklistBehaviorEnum} blocklist_behavior
 */
ChannelConfig.prototype['blocklist_behavior'] = undefined;

/**
 * List of commands that channel supports
 * @member {Array.<String>} commands
 */
ChannelConfig.prototype['commands'] = undefined;

/**
 * @member {Boolean} connect_events
 */
ChannelConfig.prototype['connect_events'] = undefined;

/**
 * @member {Date} created_at
 */
ChannelConfig.prototype['created_at'] = undefined;

/**
 * @member {Boolean} custom_events
 */
ChannelConfig.prototype['custom_events'] = undefined;

/**
 * @member {Number} max_message_length
 */
ChannelConfig.prototype['max_message_length'] = undefined;

/**
 * @member {String} message_retention
 */
ChannelConfig.prototype['message_retention'] = undefined;

/**
 * @member {Boolean} mutes
 */
ChannelConfig.prototype['mutes'] = undefined;

/**
 * @member {String} name
 */
ChannelConfig.prototype['name'] = undefined;

/**
 * @member {Boolean} push_notifications
 */
ChannelConfig.prototype['push_notifications'] = undefined;

/**
 * @member {Boolean} quotes
 */
ChannelConfig.prototype['quotes'] = undefined;

/**
 * @member {Boolean} reactions
 */
ChannelConfig.prototype['reactions'] = undefined;

/**
 * @member {Boolean} read_events
 */
ChannelConfig.prototype['read_events'] = undefined;

/**
 * @member {Boolean} reminders
 */
ChannelConfig.prototype['reminders'] = undefined;

/**
 * @member {Boolean} replies
 */
ChannelConfig.prototype['replies'] = undefined;

/**
 * @member {Boolean} search
 */
ChannelConfig.prototype['search'] = undefined;

/**
 * @member {Boolean} typing_events
 */
ChannelConfig.prototype['typing_events'] = undefined;

/**
 * @member {Date} updated_at
 */
ChannelConfig.prototype['updated_at'] = undefined;

/**
 * @member {Boolean} uploads
 */
ChannelConfig.prototype['uploads'] = undefined;

/**
 * @member {Boolean} url_enrichment
 */
ChannelConfig.prototype['url_enrichment'] = undefined;





/**
 * Allowed values for the <code>automod</code> property.
 * @enum {String}
 * @readonly
 */
ChannelConfig['AutomodEnum'] = {

    /**
     * value: "disabled"
     * @const
     */
    "disabled": "disabled",

    /**
     * value: "simple"
     * @const
     */
    "simple": "simple",

    /**
     * value: "AI"
     * @const
     */
    "AI": "AI"
};


/**
 * Allowed values for the <code>automod_behavior</code> property.
 * @enum {String}
 * @readonly
 */
ChannelConfig['AutomodBehaviorEnum'] = {

    /**
     * value: "flag"
     * @const
     */
    "flag": "flag",

    /**
     * value: "block"
     * @const
     */
    "block": "block"
};


/**
 * Allowed values for the <code>blocklist_behavior</code> property.
 * @enum {String}
 * @readonly
 */
ChannelConfig['BlocklistBehaviorEnum'] = {

    /**
     * value: "flag"
     * @const
     */
    "flag": "flag",

    /**
     * value: "block"
     * @const
     */
    "block": "block"
};



export default ChannelConfig;

