/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StreamChatApi);
  }
}(this, function(expect, StreamChatApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StreamChatApi.PushProviderRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PushProviderRequest', function() {
    it('should create an instance of PushProviderRequest', function() {
      // uncomment below and update the code to test PushProviderRequest
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be.a(StreamChatApi.PushProviderRequest);
    });

    it('should have the property apnAuthKey (base name: "apn_auth_key")', function() {
      // uncomment below and update the code to test the property apnAuthKey
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property apnAuthType (base name: "apn_auth_type")', function() {
      // uncomment below and update the code to test the property apnAuthType
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property apnDevelopment (base name: "apn_development")', function() {
      // uncomment below and update the code to test the property apnDevelopment
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property apnHost (base name: "apn_host")', function() {
      // uncomment below and update the code to test the property apnHost
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property apnKeyId (base name: "apn_key_id")', function() {
      // uncomment below and update the code to test the property apnKeyId
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property apnNotificationTemplate (base name: "apn_notification_template")', function() {
      // uncomment below and update the code to test the property apnNotificationTemplate
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property apnP12Cert (base name: "apn_p12_cert")', function() {
      // uncomment below and update the code to test the property apnP12Cert
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property apnTeamId (base name: "apn_team_id")', function() {
      // uncomment below and update the code to test the property apnTeamId
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property apnTopic (base name: "apn_topic")', function() {
      // uncomment below and update the code to test the property apnTopic
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property disabledAt (base name: "disabled_at")', function() {
      // uncomment below and update the code to test the property disabledAt
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property disabledReason (base name: "disabled_reason")', function() {
      // uncomment below and update the code to test the property disabledReason
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property firebaseApnTemplate (base name: "firebase_apn_template")', function() {
      // uncomment below and update the code to test the property firebaseApnTemplate
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property firebaseCredentials (base name: "firebase_credentials")', function() {
      // uncomment below and update the code to test the property firebaseCredentials
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property firebaseDataTemplate (base name: "firebase_data_template")', function() {
      // uncomment below and update the code to test the property firebaseDataTemplate
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property firebaseNotificationTemplate (base name: "firebase_notification_template")', function() {
      // uncomment below and update the code to test the property firebaseNotificationTemplate
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property firebaseServerKey (base name: "firebase_server_key")', function() {
      // uncomment below and update the code to test the property firebaseServerKey
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property huaweiAppId (base name: "huawei_app_id")', function() {
      // uncomment below and update the code to test the property huaweiAppId
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property huaweiAppSecret (base name: "huawei_app_secret")', function() {
      // uncomment below and update the code to test the property huaweiAppSecret
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property xiaomiAppSecret (base name: "xiaomi_app_secret")', function() {
      // uncomment below and update the code to test the property xiaomiAppSecret
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

    it('should have the property xiaomiPackageName (base name: "xiaomi_package_name")', function() {
      // uncomment below and update the code to test the property xiaomiPackageName
      //var instance = new StreamChatApi.PushProviderRequest();
      //expect(instance).to.be();
    });

  });

}));
