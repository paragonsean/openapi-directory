/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StreamChatApi);
  }
}(this, function(expect, StreamChatApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StreamChatApi.CreateChannelTypeResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreateChannelTypeResponse', function() {
    it('should create an instance of CreateChannelTypeResponse', function() {
      // uncomment below and update the code to test CreateChannelTypeResponse
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be.a(StreamChatApi.CreateChannelTypeResponse);
    });

    it('should have the property automod (base name: "automod")', function() {
      // uncomment below and update the code to test the property automod
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property automodBehavior (base name: "automod_behavior")', function() {
      // uncomment below and update the code to test the property automodBehavior
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property automodThresholds (base name: "automod_thresholds")', function() {
      // uncomment below and update the code to test the property automodThresholds
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property blocklist (base name: "blocklist")', function() {
      // uncomment below and update the code to test the property blocklist
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property blocklistBehavior (base name: "blocklist_behavior")', function() {
      // uncomment below and update the code to test the property blocklistBehavior
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property commands (base name: "commands")', function() {
      // uncomment below and update the code to test the property commands
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property connectEvents (base name: "connect_events")', function() {
      // uncomment below and update the code to test the property connectEvents
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property customEvents (base name: "custom_events")', function() {
      // uncomment below and update the code to test the property customEvents
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property duration (base name: "duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property grants (base name: "grants")', function() {
      // uncomment below and update the code to test the property grants
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property maxMessageLength (base name: "max_message_length")', function() {
      // uncomment below and update the code to test the property maxMessageLength
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property messageRetention (base name: "message_retention")', function() {
      // uncomment below and update the code to test the property messageRetention
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property mutes (base name: "mutes")', function() {
      // uncomment below and update the code to test the property mutes
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property permissions (base name: "permissions")', function() {
      // uncomment below and update the code to test the property permissions
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property pushNotifications (base name: "push_notifications")', function() {
      // uncomment below and update the code to test the property pushNotifications
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property quotes (base name: "quotes")', function() {
      // uncomment below and update the code to test the property quotes
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property reactions (base name: "reactions")', function() {
      // uncomment below and update the code to test the property reactions
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property readEvents (base name: "read_events")', function() {
      // uncomment below and update the code to test the property readEvents
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property reminders (base name: "reminders")', function() {
      // uncomment below and update the code to test the property reminders
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property replies (base name: "replies")', function() {
      // uncomment below and update the code to test the property replies
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property search (base name: "search")', function() {
      // uncomment below and update the code to test the property search
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property typingEvents (base name: "typing_events")', function() {
      // uncomment below and update the code to test the property typingEvents
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property uploads (base name: "uploads")', function() {
      // uncomment below and update the code to test the property uploads
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

    it('should have the property urlEnrichment (base name: "url_enrichment")', function() {
      // uncomment below and update the code to test the property urlEnrichment
      //var instance = new StreamChatApi.CreateChannelTypeResponse();
      //expect(instance).to.be();
    });

  });

}));
