/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StreamChatApi);
  }
}(this, function(expect, StreamChatApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StreamChatApi.QueryUsersRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('QueryUsersRequest', function() {
    it('should create an instance of QueryUsersRequest', function() {
      // uncomment below and update the code to test QueryUsersRequest
      //var instance = new StreamChatApi.QueryUsersRequest();
      //expect(instance).to.be.a(StreamChatApi.QueryUsersRequest);
    });

    it('should have the property clientId (base name: "client_id")', function() {
      // uncomment below and update the code to test the property clientId
      //var instance = new StreamChatApi.QueryUsersRequest();
      //expect(instance).to.be();
    });

    it('should have the property connectionId (base name: "connection_id")', function() {
      // uncomment below and update the code to test the property connectionId
      //var instance = new StreamChatApi.QueryUsersRequest();
      //expect(instance).to.be();
    });

    it('should have the property filterConditions (base name: "filter_conditions")', function() {
      // uncomment below and update the code to test the property filterConditions
      //var instance = new StreamChatApi.QueryUsersRequest();
      //expect(instance).to.be();
    });

    it('should have the property idGt (base name: "id_gt")', function() {
      // uncomment below and update the code to test the property idGt
      //var instance = new StreamChatApi.QueryUsersRequest();
      //expect(instance).to.be();
    });

    it('should have the property idGte (base name: "id_gte")', function() {
      // uncomment below and update the code to test the property idGte
      //var instance = new StreamChatApi.QueryUsersRequest();
      //expect(instance).to.be();
    });

    it('should have the property idLt (base name: "id_lt")', function() {
      // uncomment below and update the code to test the property idLt
      //var instance = new StreamChatApi.QueryUsersRequest();
      //expect(instance).to.be();
    });

    it('should have the property idLte (base name: "id_lte")', function() {
      // uncomment below and update the code to test the property idLte
      //var instance = new StreamChatApi.QueryUsersRequest();
      //expect(instance).to.be();
    });

    it('should have the property limit (base name: "limit")', function() {
      // uncomment below and update the code to test the property limit
      //var instance = new StreamChatApi.QueryUsersRequest();
      //expect(instance).to.be();
    });

    it('should have the property offset (base name: "offset")', function() {
      // uncomment below and update the code to test the property offset
      //var instance = new StreamChatApi.QueryUsersRequest();
      //expect(instance).to.be();
    });

    it('should have the property presence (base name: "presence")', function() {
      // uncomment below and update the code to test the property presence
      //var instance = new StreamChatApi.QueryUsersRequest();
      //expect(instance).to.be();
    });

    it('should have the property sort (base name: "sort")', function() {
      // uncomment below and update the code to test the property sort
      //var instance = new StreamChatApi.QueryUsersRequest();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new StreamChatApi.QueryUsersRequest();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "user_id")', function() {
      // uncomment below and update the code to test the property userId
      //var instance = new StreamChatApi.QueryUsersRequest();
      //expect(instance).to.be();
    });

  });

}));
