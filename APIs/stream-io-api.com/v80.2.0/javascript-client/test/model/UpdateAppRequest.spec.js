/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StreamChatApi);
  }
}(this, function(expect, StreamChatApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StreamChatApi.UpdateAppRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UpdateAppRequest', function() {
    it('should create an instance of UpdateAppRequest', function() {
      // uncomment below and update the code to test UpdateAppRequest
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be.a(StreamChatApi.UpdateAppRequest);
    });

    it('should have the property agoraOptions (base name: "agora_options")', function() {
      // uncomment below and update the code to test the property agoraOptions
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property apnConfig (base name: "apn_config")', function() {
      // uncomment below and update the code to test the property apnConfig
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property asyncModerationConfig (base name: "async_moderation_config")', function() {
      // uncomment below and update the code to test the property asyncModerationConfig
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property asyncUrlEnrichEnabled (base name: "async_url_enrich_enabled")', function() {
      // uncomment below and update the code to test the property asyncUrlEnrichEnabled
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property autoTranslationEnabled (base name: "auto_translation_enabled")', function() {
      // uncomment below and update the code to test the property autoTranslationEnabled
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property beforeMessageSendHookUrl (base name: "before_message_send_hook_url")', function() {
      // uncomment below and update the code to test the property beforeMessageSendHookUrl
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property cdnExpirationSeconds (base name: "cdn_expiration_seconds")', function() {
      // uncomment below and update the code to test the property cdnExpirationSeconds
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property channelHideMembersOnly (base name: "channel_hide_members_only")', function() {
      // uncomment below and update the code to test the property channelHideMembersOnly
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property customActionHandlerUrl (base name: "custom_action_handler_url")', function() {
      // uncomment below and update the code to test the property customActionHandlerUrl
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property disableAuthChecks (base name: "disable_auth_checks")', function() {
      // uncomment below and update the code to test the property disableAuthChecks
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property disablePermissionsChecks (base name: "disable_permissions_checks")', function() {
      // uncomment below and update the code to test the property disablePermissionsChecks
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property enforceUniqueUsernames (base name: "enforce_unique_usernames")', function() {
      // uncomment below and update the code to test the property enforceUniqueUsernames
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property fileUploadConfig (base name: "file_upload_config")', function() {
      // uncomment below and update the code to test the property fileUploadConfig
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property firebaseConfig (base name: "firebase_config")', function() {
      // uncomment below and update the code to test the property firebaseConfig
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property grants (base name: "grants")', function() {
      // uncomment below and update the code to test the property grants
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property hmsOptions (base name: "hms_options")', function() {
      // uncomment below and update the code to test the property hmsOptions
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property huaweiConfig (base name: "huawei_config")', function() {
      // uncomment below and update the code to test the property huaweiConfig
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property imageModerationBlockLabels (base name: "image_moderation_block_labels")', function() {
      // uncomment below and update the code to test the property imageModerationBlockLabels
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property imageModerationEnabled (base name: "image_moderation_enabled")', function() {
      // uncomment below and update the code to test the property imageModerationEnabled
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property imageModerationLabels (base name: "image_moderation_labels")', function() {
      // uncomment below and update the code to test the property imageModerationLabels
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property imageUploadConfig (base name: "image_upload_config")', function() {
      // uncomment below and update the code to test the property imageUploadConfig
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property migratePermissionsToV2 (base name: "migrate_permissions_to_v2")', function() {
      // uncomment below and update the code to test the property migratePermissionsToV2
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property multiTenantEnabled (base name: "multi_tenant_enabled")', function() {
      // uncomment below and update the code to test the property multiTenantEnabled
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property permissionVersion (base name: "permission_version")', function() {
      // uncomment below and update the code to test the property permissionVersion
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property pushConfig (base name: "push_config")', function() {
      // uncomment below and update the code to test the property pushConfig
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property remindersInterval (base name: "reminders_interval")', function() {
      // uncomment below and update the code to test the property remindersInterval
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property revokeTokensIssuedBefore (base name: "revoke_tokens_issued_before")', function() {
      // uncomment below and update the code to test the property revokeTokensIssuedBefore
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property sqsKey (base name: "sqs_key")', function() {
      // uncomment below and update the code to test the property sqsKey
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property sqsSecret (base name: "sqs_secret")', function() {
      // uncomment below and update the code to test the property sqsSecret
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property sqsUrl (base name: "sqs_url")', function() {
      // uncomment below and update the code to test the property sqsUrl
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property userSearchDisallowedRoles (base name: "user_search_disallowed_roles")', function() {
      // uncomment below and update the code to test the property userSearchDisallowedRoles
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property videoProvider (base name: "video_provider")', function() {
      // uncomment below and update the code to test the property videoProvider
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property webhookEvents (base name: "webhook_events")', function() {
      // uncomment below and update the code to test the property webhookEvents
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property webhookUrl (base name: "webhook_url")', function() {
      // uncomment below and update the code to test the property webhookUrl
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

    it('should have the property xiaomiConfig (base name: "xiaomi_config")', function() {
      // uncomment below and update the code to test the property xiaomiConfig
      //var instance = new StreamChatApi.UpdateAppRequest();
      //expect(instance).to.be();
    });

  });

}));
