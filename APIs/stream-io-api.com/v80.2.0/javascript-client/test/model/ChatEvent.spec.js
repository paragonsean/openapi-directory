/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StreamChatApi);
  }
}(this, function(expect, StreamChatApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StreamChatApi.ChatEvent();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ChatEvent', function() {
    it('should create an instance of ChatEvent', function() {
      // uncomment below and update the code to test ChatEvent
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be.a(StreamChatApi.ChatEvent);
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property channel (base name: "channel")', function() {
      // uncomment below and update the code to test the property channel
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property channelId (base name: "channel_id")', function() {
      // uncomment below and update the code to test the property channelId
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property channelType (base name: "channel_type")', function() {
      // uncomment below and update the code to test the property channelType
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property cid (base name: "cid")', function() {
      // uncomment below and update the code to test the property cid
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property team (base name: "team")', function() {
      // uncomment below and update the code to test the property team
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property clearHistory (base name: "clear_history")', function() {
      // uncomment below and update the code to test the property clearHistory
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property me (base name: "me")', function() {
      // uncomment below and update the code to test the property me
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property member (base name: "member")', function() {
      // uncomment below and update the code to test the property member
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property hardDelete (base name: "hard_delete")', function() {
      // uncomment below and update the code to test the property hardDelete
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property threadParticipants (base name: "thread_participants")', function() {
      // uncomment below and update the code to test the property threadParticipants
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property flag (base name: "flag")', function() {
      // uncomment below and update the code to test the property flag
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property watcherCount (base name: "watcher_count")', function() {
      // uncomment below and update the code to test the property watcherCount
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property lastReadMessageId (base name: "last_read_message_id")', function() {
      // uncomment below and update the code to test the property lastReadMessageId
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property totalUnreadCount (base name: "total_unread_count")', function() {
      // uncomment below and update the code to test the property totalUnreadCount
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property unreadChannels (base name: "unread_channels")', function() {
      // uncomment below and update the code to test the property unreadChannels
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property unreadCount (base name: "unread_count")', function() {
      // uncomment below and update the code to test the property unreadCount
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property firstUnreadMessageId (base name: "first_unread_message_id")', function() {
      // uncomment below and update the code to test the property firstUnreadMessageId
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property lastReadAt (base name: "last_read_at")', function() {
      // uncomment below and update the code to test the property lastReadAt
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property unreadMessages (base name: "unread_messages")', function() {
      // uncomment below and update the code to test the property unreadMessages
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property reaction (base name: "reaction")', function() {
      // uncomment below and update the code to test the property reaction
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property parentId (base name: "parent_id")', function() {
      // uncomment below and update the code to test the property parentId
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "created_by")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property expiration (base name: "expiration")', function() {
      // uncomment below and update the code to test the property expiration
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property reason (base name: "reason")', function() {
      // uncomment below and update the code to test the property reason
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property shadow (base name: "shadow")', function() {
      // uncomment below and update the code to test the property shadow
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property deleteConversationChannels (base name: "delete_conversation_channels")', function() {
      // uncomment below and update the code to test the property deleteConversationChannels
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property markMessagesDeleted (base name: "mark_messages_deleted")', function() {
      // uncomment below and update the code to test the property markMessagesDeleted
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property targetUser (base name: "target_user")', function() {
      // uncomment below and update the code to test the property targetUser
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property targetUsers (base name: "target_users")', function() {
      // uncomment below and update the code to test the property targetUsers
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

    it('should have the property channels (base name: "channels")', function() {
      // uncomment below and update the code to test the property channels
      //var instance = new StreamChatApi.ChatEvent();
      //expect(instance).to.be();
    });

  });

}));
