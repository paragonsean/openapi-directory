/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StreamChatApi);
  }
}(this, function(expect, StreamChatApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StreamChatApi.OwnUserRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OwnUserRequest', function() {
    it('should create an instance of OwnUserRequest', function() {
      // uncomment below and update the code to test OwnUserRequest
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be.a(StreamChatApi.OwnUserRequest);
    });

    it('should have the property banned (base name: "banned")', function() {
      // uncomment below and update the code to test the property banned
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be();
    });

    it('should have the property channelMutes (base name: "channel_mutes")', function() {
      // uncomment below and update the code to test the property channelMutes
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be();
    });

    it('should have the property deactivatedAt (base name: "deactivated_at")', function() {
      // uncomment below and update the code to test the property deactivatedAt
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be();
    });

    it('should have the property deletedAt (base name: "deleted_at")', function() {
      // uncomment below and update the code to test the property deletedAt
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be();
    });

    it('should have the property devices (base name: "devices")', function() {
      // uncomment below and update the code to test the property devices
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be();
    });

    it('should have the property invisible (base name: "invisible")', function() {
      // uncomment below and update the code to test the property invisible
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be();
    });

    it('should have the property language (base name: "language")', function() {
      // uncomment below and update the code to test the property language
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be();
    });

    it('should have the property lastActive (base name: "last_active")', function() {
      // uncomment below and update the code to test the property lastActive
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be();
    });

    it('should have the property latestHiddenChannels (base name: "latest_hidden_channels")', function() {
      // uncomment below and update the code to test the property latestHiddenChannels
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be();
    });

    it('should have the property mutes (base name: "mutes")', function() {
      // uncomment below and update the code to test the property mutes
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be();
    });

    it('should have the property online (base name: "online")', function() {
      // uncomment below and update the code to test the property online
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be();
    });

    it('should have the property pushNotifications (base name: "push_notifications")', function() {
      // uncomment below and update the code to test the property pushNotifications
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be();
    });

    it('should have the property role (base name: "role")', function() {
      // uncomment below and update the code to test the property role
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be();
    });

    it('should have the property teams (base name: "teams")', function() {
      // uncomment below and update the code to test the property teams
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be();
    });

    it('should have the property totalUnreadCount (base name: "total_unread_count")', function() {
      // uncomment below and update the code to test the property totalUnreadCount
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be();
    });

    it('should have the property unreadChannels (base name: "unread_channels")', function() {
      // uncomment below and update the code to test the property unreadChannels
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be();
    });

    it('should have the property unreadCount (base name: "unread_count")', function() {
      // uncomment below and update the code to test the property unreadCount
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new StreamChatApi.OwnUserRequest();
      //expect(instance).to.be();
    });

  });

}));
