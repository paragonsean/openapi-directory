/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StreamChatApi);
  }
}(this, function(expect, StreamChatApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StreamChatApi.ChannelResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ChannelResponse', function() {
    it('should create an instance of ChannelResponse', function() {
      // uncomment below and update the code to test ChannelResponse
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be.a(StreamChatApi.ChannelResponse);
    });

    it('should have the property autoTranslationEnabled (base name: "auto_translation_enabled")', function() {
      // uncomment below and update the code to test the property autoTranslationEnabled
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property autoTranslationLanguage (base name: "auto_translation_language")', function() {
      // uncomment below and update the code to test the property autoTranslationLanguage
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property cid (base name: "cid")', function() {
      // uncomment below and update the code to test the property cid
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property config (base name: "config")', function() {
      // uncomment below and update the code to test the property config
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property cooldown (base name: "cooldown")', function() {
      // uncomment below and update the code to test the property cooldown
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "created_by")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property deletedAt (base name: "deleted_at")', function() {
      // uncomment below and update the code to test the property deletedAt
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property disabled (base name: "disabled")', function() {
      // uncomment below and update the code to test the property disabled
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property frozen (base name: "frozen")', function() {
      // uncomment below and update the code to test the property frozen
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property hidden (base name: "hidden")', function() {
      // uncomment below and update the code to test the property hidden
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property hideMessagesBefore (base name: "hide_messages_before")', function() {
      // uncomment below and update the code to test the property hideMessagesBefore
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property lastMessageAt (base name: "last_message_at")', function() {
      // uncomment below and update the code to test the property lastMessageAt
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property memberCount (base name: "member_count")', function() {
      // uncomment below and update the code to test the property memberCount
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property members (base name: "members")', function() {
      // uncomment below and update the code to test the property members
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property muteExpiresAt (base name: "mute_expires_at")', function() {
      // uncomment below and update the code to test the property muteExpiresAt
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property muted (base name: "muted")', function() {
      // uncomment below and update the code to test the property muted
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property ownCapabilities (base name: "own_capabilities")', function() {
      // uncomment below and update the code to test the property ownCapabilities
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property team (base name: "team")', function() {
      // uncomment below and update the code to test the property team
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property truncatedAt (base name: "truncated_at")', function() {
      // uncomment below and update the code to test the property truncatedAt
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property truncatedBy (base name: "truncated_by")', function() {
      // uncomment below and update the code to test the property truncatedBy
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new StreamChatApi.ChannelResponse();
      //expect(instance).to.be();
    });

  });

}));
