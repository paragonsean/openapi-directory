/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StreamChatApi);
  }
}(this, function(expect, StreamChatApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StreamChatApi.MessageRequest();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MessageRequest', function() {
    it('should create an instance of MessageRequest', function() {
      // uncomment below and update the code to test MessageRequest
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be.a(StreamChatApi.MessageRequest);
    });

    it('should have the property attachments (base name: "attachments")', function() {
      // uncomment below and update the code to test the property attachments
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property cid (base name: "cid")', function() {
      // uncomment below and update the code to test the property cid
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property html (base name: "html")', function() {
      // uncomment below and update the code to test the property html
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property mentionedUsers (base name: "mentioned_users")', function() {
      // uncomment below and update the code to test the property mentionedUsers
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property mml (base name: "mml")', function() {
      // uncomment below and update the code to test the property mml
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property parent (base name: "parent")', function() {
      // uncomment below and update the code to test the property parent
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property parentId (base name: "parent_id")', function() {
      // uncomment below and update the code to test the property parentId
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property pinExpires (base name: "pin_expires")', function() {
      // uncomment below and update the code to test the property pinExpires
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property pinned (base name: "pinned")', function() {
      // uncomment below and update the code to test the property pinned
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property pinnedAt (base name: "pinned_at")', function() {
      // uncomment below and update the code to test the property pinnedAt
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property pinnedBy (base name: "pinned_by")', function() {
      // uncomment below and update the code to test the property pinnedBy
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property quotedMessageId (base name: "quoted_message_id")', function() {
      // uncomment below and update the code to test the property quotedMessageId
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property reactionScores (base name: "reaction_scores")', function() {
      // uncomment below and update the code to test the property reactionScores
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property showInChannel (base name: "show_in_channel")', function() {
      // uncomment below and update the code to test the property showInChannel
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property silent (base name: "silent")', function() {
      // uncomment below and update the code to test the property silent
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property text (base name: "text")', function() {
      // uncomment below and update the code to test the property text
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "user_id")', function() {
      // uncomment below and update the code to test the property userId
      //var instance = new StreamChatApi.MessageRequest();
      //expect(instance).to.be();
    });

  });

}));
