/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StreamChatApi);
  }
}(this, function(expect, StreamChatApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StreamChatApi.MessagesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('MessagesApi', function() {
    describe('deleteFile', function() {
      it('should call deleteFile successfully', function(done) {
        //uncomment below and update the code to test deleteFile
        //instance.deleteFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteImage', function() {
      it('should call deleteImage successfully', function(done) {
        //uncomment below and update the code to test deleteImage
        //instance.deleteImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMessage', function() {
      it('should call deleteMessage successfully', function(done) {
        //uncomment below and update the code to test deleteMessage
        //instance.deleteMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteReaction', function() {
      it('should call deleteReaction successfully', function(done) {
        //uncomment below and update the code to test deleteReaction
        //instance.deleteReaction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('flag_0', function() {
      it('should call flag_0 successfully', function(done) {
        //uncomment below and update the code to test flag_0
        //instance.flag_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getManyMessages', function() {
      it('should call getManyMessages successfully', function(done) {
        //uncomment below and update the code to test getManyMessages
        //instance.getManyMessages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMessage', function() {
      it('should call getMessage successfully', function(done) {
        //uncomment below and update the code to test getMessage
        //instance.getMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOG', function() {
      it('should call getOG successfully', function(done) {
        //uncomment below and update the code to test getOG
        //instance.getOG(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getReactions', function() {
      it('should call getReactions successfully', function(done) {
        //uncomment below and update the code to test getReactions
        //instance.getReactions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getReplies', function() {
      it('should call getReplies successfully', function(done) {
        //uncomment below and update the code to test getReplies
        //instance.getReplies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('markChannelsRead_0', function() {
      it('should call markChannelsRead_0 successfully', function(done) {
        //uncomment below and update the code to test markChannelsRead_0
        //instance.markChannelsRead_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('markRead_0', function() {
      it('should call markRead_0 successfully', function(done) {
        //uncomment below and update the code to test markRead_0
        //instance.markRead_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('markUnread_0', function() {
      it('should call markUnread_0 successfully', function(done) {
        //uncomment below and update the code to test markUnread_0
        //instance.markUnread_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryMessageFlags', function() {
      it('should call queryMessageFlags successfully', function(done) {
        //uncomment below and update the code to test queryMessageFlags
        //instance.queryMessageFlags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('runMessageAction', function() {
      it('should call runMessageAction successfully', function(done) {
        //uncomment below and update the code to test runMessageAction
        //instance.runMessageAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('search_0', function() {
      it('should call search_0 successfully', function(done) {
        //uncomment below and update the code to test search_0
        //instance.search_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendMessage', function() {
      it('should call sendMessage successfully', function(done) {
        //uncomment below and update the code to test sendMessage
        //instance.sendMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendReaction', function() {
      it('should call sendReaction successfully', function(done) {
        //uncomment below and update the code to test sendReaction
        //instance.sendReaction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('translateMessage', function() {
      it('should call translateMessage successfully', function(done) {
        //uncomment below and update the code to test translateMessage
        //instance.translateMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unflag_0', function() {
      it('should call unflag_0 successfully', function(done) {
        //uncomment below and update the code to test unflag_0
        //instance.unflag_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMessage', function() {
      it('should call updateMessage successfully', function(done) {
        //uncomment below and update the code to test updateMessage
        //instance.updateMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMessagePartial', function() {
      it('should call updateMessagePartial successfully', function(done) {
        //uncomment below and update the code to test updateMessagePartial
        //instance.updateMessagePartial(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadFile', function() {
      it('should call uploadFile successfully', function(done) {
        //uncomment below and update the code to test uploadFile
        //instance.uploadFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('uploadImage', function() {
      it('should call uploadImage successfully', function(done) {
        //uncomment below and update the code to test uploadImage
        //instance.uploadImage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
