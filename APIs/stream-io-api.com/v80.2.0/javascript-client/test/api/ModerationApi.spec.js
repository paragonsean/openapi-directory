/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StreamChatApi);
  }
}(this, function(expect, StreamChatApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StreamChatApi.ModerationApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ModerationApi', function() {
    describe('ban_0', function() {
      it('should call ban_0 successfully', function(done) {
        //uncomment below and update the code to test ban_0
        //instance.ban_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBlockList_0', function() {
      it('should call createBlockList_0 successfully', function(done) {
        //uncomment below and update the code to test createBlockList_0
        //instance.createBlockList_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deactivateUser_1', function() {
      it('should call deactivateUser_1 successfully', function(done) {
        //uncomment below and update the code to test deactivateUser_1
        //instance.deactivateUser_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deactivateUsers_1', function() {
      it('should call deactivateUsers_1 successfully', function(done) {
        //uncomment below and update the code to test deactivateUsers_1
        //instance.deactivateUsers_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBlockList_0', function() {
      it('should call deleteBlockList_0 successfully', function(done) {
        //uncomment below and update the code to test deleteBlockList_0
        //instance.deleteBlockList_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUser_1', function() {
      it('should call deleteUser_1 successfully', function(done) {
        //uncomment below and update the code to test deleteUser_1
        //instance.deleteUser_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteUsers_1', function() {
      it('should call deleteUsers_1 successfully', function(done) {
        //uncomment below and update the code to test deleteUsers_1
        //instance.deleteUsers_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('flag', function() {
      it('should call flag successfully', function(done) {
        //uncomment below and update the code to test flag
        //instance.flag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBlockList_0', function() {
      it('should call getBlockList_0 successfully', function(done) {
        //uncomment below and update the code to test getBlockList_0
        //instance.getBlockList_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBlockLists_0', function() {
      it('should call listBlockLists_0 successfully', function(done) {
        //uncomment below and update the code to test listBlockLists_0
        //instance.listBlockLists_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('muteUser_0', function() {
      it('should call muteUser_0 successfully', function(done) {
        //uncomment below and update the code to test muteUser_0
        //instance.muteUser_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryBannedUsers_0', function() {
      it('should call queryBannedUsers_0 successfully', function(done) {
        //uncomment below and update the code to test queryBannedUsers_0
        //instance.queryBannedUsers_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryMessageFlags_0', function() {
      it('should call queryMessageFlags_0 successfully', function(done) {
        //uncomment below and update the code to test queryMessageFlags_0
        //instance.queryMessageFlags_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reactivateUser_1', function() {
      it('should call reactivateUser_1 successfully', function(done) {
        //uncomment below and update the code to test reactivateUser_1
        //instance.reactivateUser_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reactivateUsers_1', function() {
      it('should call reactivateUsers_1 successfully', function(done) {
        //uncomment below and update the code to test reactivateUsers_1
        //instance.reactivateUsers_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unban_0', function() {
      it('should call unban_0 successfully', function(done) {
        //uncomment below and update the code to test unban_0
        //instance.unban_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unflag', function() {
      it('should call unflag successfully', function(done) {
        //uncomment below and update the code to test unflag
        //instance.unflag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unmuteUser_0', function() {
      it('should call unmuteUser_0 successfully', function(done) {
        //uncomment below and update the code to test unmuteUser_0
        //instance.unmuteUser_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBlockList_0', function() {
      it('should call updateBlockList_0 successfully', function(done) {
        //uncomment below and update the code to test updateBlockList_0
        //instance.updateBlockList_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
