/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StreamChatApi);
  }
}(this, function(expect, StreamChatApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StreamChatApi.ChannelsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ChannelsApi', function() {
    describe('deleteChannel', function() {
      it('should call deleteChannel successfully', function(done) {
        //uncomment below and update the code to test deleteChannel
        //instance.deleteChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChannels', function() {
      it('should call deleteChannels successfully', function(done) {
        //uncomment below and update the code to test deleteChannels
        //instance.deleteChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportChannels', function() {
      it('should call exportChannels successfully', function(done) {
        //uncomment below and update the code to test exportChannels
        //instance.exportChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExportChannelsStatus', function() {
      it('should call getExportChannelsStatus successfully', function(done) {
        //uncomment below and update the code to test getExportChannelsStatus
        //instance.getExportChannelsStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOrCreateChannelType1', function() {
      it('should call getOrCreateChannelType1 successfully', function(done) {
        //uncomment below and update the code to test getOrCreateChannelType1
        //instance.getOrCreateChannelType1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getOrCreateChannelTypeId0', function() {
      it('should call getOrCreateChannelTypeId0 successfully', function(done) {
        //uncomment below and update the code to test getOrCreateChannelTypeId0
        //instance.getOrCreateChannelTypeId0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hideChannel', function() {
      it('should call hideChannel successfully', function(done) {
        //uncomment below and update the code to test hideChannel
        //instance.hideChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('markChannelsRead', function() {
      it('should call markChannelsRead successfully', function(done) {
        //uncomment below and update the code to test markChannelsRead
        //instance.markChannelsRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('markRead', function() {
      it('should call markRead successfully', function(done) {
        //uncomment below and update the code to test markRead
        //instance.markRead(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('markUnread', function() {
      it('should call markUnread successfully', function(done) {
        //uncomment below and update the code to test markUnread
        //instance.markUnread(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('muteChannel', function() {
      it('should call muteChannel successfully', function(done) {
        //uncomment below and update the code to test muteChannel
        //instance.muteChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryChannels', function() {
      it('should call queryChannels successfully', function(done) {
        //uncomment below and update the code to test queryChannels
        //instance.queryChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryMembers', function() {
      it('should call queryMembers successfully', function(done) {
        //uncomment below and update the code to test queryMembers
        //instance.queryMembers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('search', function() {
      it('should call search successfully', function(done) {
        //uncomment below and update the code to test search
        //instance.search(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('showChannel', function() {
      it('should call showChannel successfully', function(done) {
        //uncomment below and update the code to test showChannel
        //instance.showChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopWatchingChannel', function() {
      it('should call stopWatchingChannel successfully', function(done) {
        //uncomment below and update the code to test stopWatchingChannel
        //instance.stopWatchingChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sync', function() {
      it('should call sync successfully', function(done) {
        //uncomment below and update the code to test sync
        //instance.sync(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('truncateChannel', function() {
      it('should call truncateChannel successfully', function(done) {
        //uncomment below and update the code to test truncateChannel
        //instance.truncateChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unmuteChannel', function() {
      it('should call unmuteChannel successfully', function(done) {
        //uncomment below and update the code to test unmuteChannel
        //instance.unmuteChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChannel', function() {
      it('should call updateChannel successfully', function(done) {
        //uncomment below and update the code to test updateChannel
        //instance.updateChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChannelPartial', function() {
      it('should call updateChannelPartial successfully', function(done) {
        //uncomment below and update the code to test updateChannelPartial
        //instance.updateChannelPartial(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
