/**
 * Stream Chat API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v80.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StreamChatApi);
  }
}(this, function(expect, StreamChatApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StreamChatApi.CampaignsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CampaignsApi', function() {
    describe('createCampaign', function() {
      it('should call createCampaign successfully', function(done) {
        //uncomment below and update the code to test createCampaign
        //instance.createCampaign(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSegment', function() {
      it('should call createSegment successfully', function(done) {
        //uncomment below and update the code to test createSegment
        //instance.createSegment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCampaign', function() {
      it('should call deleteCampaign successfully', function(done) {
        //uncomment below and update the code to test deleteCampaign
        //instance.deleteCampaign(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSegment', function() {
      it('should call deleteSegment successfully', function(done) {
        //uncomment below and update the code to test deleteSegment
        //instance.deleteSegment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryCampaigns', function() {
      it('should call queryCampaigns successfully', function(done) {
        //uncomment below and update the code to test queryCampaigns
        //instance.queryCampaigns(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('queryRecipients', function() {
      it('should call queryRecipients successfully', function(done) {
        //uncomment below and update the code to test queryRecipients
        //instance.queryRecipients(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('querySegments', function() {
      it('should call querySegments successfully', function(done) {
        //uncomment below and update the code to test querySegments
        //instance.querySegments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resumeCampaign', function() {
      it('should call resumeCampaign successfully', function(done) {
        //uncomment below and update the code to test resumeCampaign
        //instance.resumeCampaign(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('scheduleCampaign', function() {
      it('should call scheduleCampaign successfully', function(done) {
        //uncomment below and update the code to test scheduleCampaign
        //instance.scheduleCampaign(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopCampaign', function() {
      it('should call stopCampaign successfully', function(done) {
        //uncomment below and update the code to test stopCampaign
        //instance.stopCampaign(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('testCampaign', function() {
      it('should call testCampaign successfully', function(done) {
        //uncomment below and update the code to test testCampaign
        //instance.testCampaign(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCampaign', function() {
      it('should call updateCampaign successfully', function(done) {
        //uncomment below and update the code to test updateCampaign
        //instance.updateCampaign(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSegment', function() {
      it('should call updateSegment successfully', function(done) {
        //uncomment below and update the code to test updateSegment
        //instance.updateSegment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
