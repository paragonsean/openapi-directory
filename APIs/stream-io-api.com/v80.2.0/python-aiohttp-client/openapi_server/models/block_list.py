# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BlockList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, name: str=None, updated_at: datetime=None, words: List[str]=None):
        """BlockList - a model defined in OpenAPI

        :param created_at: The created_at of this BlockList.
        :param name: The name of this BlockList.
        :param updated_at: The updated_at of this BlockList.
        :param words: The words of this BlockList.
        """
        self.openapi_types = {
            'created_at': datetime,
            'name': str,
            'updated_at': datetime,
            'words': List[str]
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'name': 'name',
            'updated_at': 'updated_at',
            'words': 'words'
        }

        self._created_at = created_at
        self._name = name
        self._updated_at = updated_at
        self._words = words

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlockList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlockList of this BlockList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this BlockList.

        Date/time of creation

        :return: The created_at of this BlockList.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BlockList.

        Date/time of creation

        :param created_at: The created_at of this BlockList.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def name(self):
        """Gets the name of this BlockList.

        Block list name

        :return: The name of this BlockList.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BlockList.

        Block list name

        :param name: The name of this BlockList.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def updated_at(self):
        """Gets the updated_at of this BlockList.

        Date/time of the last update

        :return: The updated_at of this BlockList.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this BlockList.

        Date/time of the last update

        :param updated_at: The updated_at of this BlockList.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def words(self):
        """Gets the words of this BlockList.

        List of words to block

        :return: The words of this BlockList.
        :rtype: List[str]
        """
        return self._words

    @words.setter
    def words(self, words):
        """Sets the words of this BlockList.

        List of words to block

        :param words: The words of this BlockList.
        :type words: List[str]
        """
        if words is None:
            raise ValueError("Invalid value for `words`, must not be `None`")

        self._words = words
