# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_response import ChannelResponse
from openapi_server.models.user_object import UserObject
from openapi_server import util


class NotificationMarkUnreadEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: ChannelResponse=None, channel_id: str=None, channel_type: str=None, cid: str=None, created_at: datetime=None, first_unread_message_id: str=None, last_read_at: datetime=None, team: str=None, total_unread_count: int=None, type: str='notification.mark_unread', unread_channels: int=None, unread_count: int=None, unread_messages: int=None, user: UserObject=None):
        """NotificationMarkUnreadEvent - a model defined in OpenAPI

        :param channel: The channel of this NotificationMarkUnreadEvent.
        :param channel_id: The channel_id of this NotificationMarkUnreadEvent.
        :param channel_type: The channel_type of this NotificationMarkUnreadEvent.
        :param cid: The cid of this NotificationMarkUnreadEvent.
        :param created_at: The created_at of this NotificationMarkUnreadEvent.
        :param first_unread_message_id: The first_unread_message_id of this NotificationMarkUnreadEvent.
        :param last_read_at: The last_read_at of this NotificationMarkUnreadEvent.
        :param team: The team of this NotificationMarkUnreadEvent.
        :param total_unread_count: The total_unread_count of this NotificationMarkUnreadEvent.
        :param type: The type of this NotificationMarkUnreadEvent.
        :param unread_channels: The unread_channels of this NotificationMarkUnreadEvent.
        :param unread_count: The unread_count of this NotificationMarkUnreadEvent.
        :param unread_messages: The unread_messages of this NotificationMarkUnreadEvent.
        :param user: The user of this NotificationMarkUnreadEvent.
        """
        self.openapi_types = {
            'channel': ChannelResponse,
            'channel_id': str,
            'channel_type': str,
            'cid': str,
            'created_at': datetime,
            'first_unread_message_id': str,
            'last_read_at': datetime,
            'team': str,
            'total_unread_count': int,
            'type': str,
            'unread_channels': int,
            'unread_count': int,
            'unread_messages': int,
            'user': UserObject
        }

        self.attribute_map = {
            'channel': 'channel',
            'channel_id': 'channel_id',
            'channel_type': 'channel_type',
            'cid': 'cid',
            'created_at': 'created_at',
            'first_unread_message_id': 'first_unread_message_id',
            'last_read_at': 'last_read_at',
            'team': 'team',
            'total_unread_count': 'total_unread_count',
            'type': 'type',
            'unread_channels': 'unread_channels',
            'unread_count': 'unread_count',
            'unread_messages': 'unread_messages',
            'user': 'user'
        }

        self._channel = channel
        self._channel_id = channel_id
        self._channel_type = channel_type
        self._cid = cid
        self._created_at = created_at
        self._first_unread_message_id = first_unread_message_id
        self._last_read_at = last_read_at
        self._team = team
        self._total_unread_count = total_unread_count
        self._type = type
        self._unread_channels = unread_channels
        self._unread_count = unread_count
        self._unread_messages = unread_messages
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationMarkUnreadEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationMarkUnreadEvent of this NotificationMarkUnreadEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this NotificationMarkUnreadEvent.


        :return: The channel of this NotificationMarkUnreadEvent.
        :rtype: ChannelResponse
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this NotificationMarkUnreadEvent.


        :param channel: The channel of this NotificationMarkUnreadEvent.
        :type channel: ChannelResponse
        """

        self._channel = channel

    @property
    def channel_id(self):
        """Gets the channel_id of this NotificationMarkUnreadEvent.


        :return: The channel_id of this NotificationMarkUnreadEvent.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this NotificationMarkUnreadEvent.


        :param channel_id: The channel_id of this NotificationMarkUnreadEvent.
        :type channel_id: str
        """
        if channel_id is None:
            raise ValueError("Invalid value for `channel_id`, must not be `None`")

        self._channel_id = channel_id

    @property
    def channel_type(self):
        """Gets the channel_type of this NotificationMarkUnreadEvent.


        :return: The channel_type of this NotificationMarkUnreadEvent.
        :rtype: str
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this NotificationMarkUnreadEvent.


        :param channel_type: The channel_type of this NotificationMarkUnreadEvent.
        :type channel_type: str
        """
        if channel_type is None:
            raise ValueError("Invalid value for `channel_type`, must not be `None`")

        self._channel_type = channel_type

    @property
    def cid(self):
        """Gets the cid of this NotificationMarkUnreadEvent.


        :return: The cid of this NotificationMarkUnreadEvent.
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this NotificationMarkUnreadEvent.


        :param cid: The cid of this NotificationMarkUnreadEvent.
        :type cid: str
        """
        if cid is None:
            raise ValueError("Invalid value for `cid`, must not be `None`")

        self._cid = cid

    @property
    def created_at(self):
        """Gets the created_at of this NotificationMarkUnreadEvent.


        :return: The created_at of this NotificationMarkUnreadEvent.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this NotificationMarkUnreadEvent.


        :param created_at: The created_at of this NotificationMarkUnreadEvent.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def first_unread_message_id(self):
        """Gets the first_unread_message_id of this NotificationMarkUnreadEvent.


        :return: The first_unread_message_id of this NotificationMarkUnreadEvent.
        :rtype: str
        """
        return self._first_unread_message_id

    @first_unread_message_id.setter
    def first_unread_message_id(self, first_unread_message_id):
        """Sets the first_unread_message_id of this NotificationMarkUnreadEvent.


        :param first_unread_message_id: The first_unread_message_id of this NotificationMarkUnreadEvent.
        :type first_unread_message_id: str
        """
        if first_unread_message_id is None:
            raise ValueError("Invalid value for `first_unread_message_id`, must not be `None`")

        self._first_unread_message_id = first_unread_message_id

    @property
    def last_read_at(self):
        """Gets the last_read_at of this NotificationMarkUnreadEvent.


        :return: The last_read_at of this NotificationMarkUnreadEvent.
        :rtype: datetime
        """
        return self._last_read_at

    @last_read_at.setter
    def last_read_at(self, last_read_at):
        """Sets the last_read_at of this NotificationMarkUnreadEvent.


        :param last_read_at: The last_read_at of this NotificationMarkUnreadEvent.
        :type last_read_at: datetime
        """
        if last_read_at is None:
            raise ValueError("Invalid value for `last_read_at`, must not be `None`")

        self._last_read_at = last_read_at

    @property
    def team(self):
        """Gets the team of this NotificationMarkUnreadEvent.


        :return: The team of this NotificationMarkUnreadEvent.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this NotificationMarkUnreadEvent.


        :param team: The team of this NotificationMarkUnreadEvent.
        :type team: str
        """

        self._team = team

    @property
    def total_unread_count(self):
        """Gets the total_unread_count of this NotificationMarkUnreadEvent.


        :return: The total_unread_count of this NotificationMarkUnreadEvent.
        :rtype: int
        """
        return self._total_unread_count

    @total_unread_count.setter
    def total_unread_count(self, total_unread_count):
        """Sets the total_unread_count of this NotificationMarkUnreadEvent.


        :param total_unread_count: The total_unread_count of this NotificationMarkUnreadEvent.
        :type total_unread_count: int
        """
        if total_unread_count is None:
            raise ValueError("Invalid value for `total_unread_count`, must not be `None`")

        self._total_unread_count = total_unread_count

    @property
    def type(self):
        """Gets the type of this NotificationMarkUnreadEvent.


        :return: The type of this NotificationMarkUnreadEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NotificationMarkUnreadEvent.


        :param type: The type of this NotificationMarkUnreadEvent.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def unread_channels(self):
        """Gets the unread_channels of this NotificationMarkUnreadEvent.


        :return: The unread_channels of this NotificationMarkUnreadEvent.
        :rtype: int
        """
        return self._unread_channels

    @unread_channels.setter
    def unread_channels(self, unread_channels):
        """Sets the unread_channels of this NotificationMarkUnreadEvent.


        :param unread_channels: The unread_channels of this NotificationMarkUnreadEvent.
        :type unread_channels: int
        """
        if unread_channels is None:
            raise ValueError("Invalid value for `unread_channels`, must not be `None`")

        self._unread_channels = unread_channels

    @property
    def unread_count(self):
        """Gets the unread_count of this NotificationMarkUnreadEvent.


        :return: The unread_count of this NotificationMarkUnreadEvent.
        :rtype: int
        """
        return self._unread_count

    @unread_count.setter
    def unread_count(self, unread_count):
        """Sets the unread_count of this NotificationMarkUnreadEvent.


        :param unread_count: The unread_count of this NotificationMarkUnreadEvent.
        :type unread_count: int
        """
        if unread_count is None:
            raise ValueError("Invalid value for `unread_count`, must not be `None`")

        self._unread_count = unread_count

    @property
    def unread_messages(self):
        """Gets the unread_messages of this NotificationMarkUnreadEvent.


        :return: The unread_messages of this NotificationMarkUnreadEvent.
        :rtype: int
        """
        return self._unread_messages

    @unread_messages.setter
    def unread_messages(self, unread_messages):
        """Sets the unread_messages of this NotificationMarkUnreadEvent.


        :param unread_messages: The unread_messages of this NotificationMarkUnreadEvent.
        :type unread_messages: int
        """
        if unread_messages is None:
            raise ValueError("Invalid value for `unread_messages`, must not be `None`")

        self._unread_messages = unread_messages

    @property
    def user(self):
        """Gets the user of this NotificationMarkUnreadEvent.


        :return: The user of this NotificationMarkUnreadEvent.
        :rtype: UserObject
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this NotificationMarkUnreadEvent.


        :param user: The user of this NotificationMarkUnreadEvent.
        :type user: UserObject
        """

        self._user = user
