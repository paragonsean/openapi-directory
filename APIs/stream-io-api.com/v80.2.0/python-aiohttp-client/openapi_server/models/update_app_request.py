# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.apn_config_request import APNConfigRequest
from openapi_server.models.async_moderation_configuration_request import AsyncModerationConfigurationRequest
from openapi_server.models.config_request import ConfigRequest
from openapi_server.models.file_upload_config_request import FileUploadConfigRequest
from openapi_server.models.firebase_config_request import FirebaseConfigRequest
from openapi_server.models.huawei_config_request import HuaweiConfigRequest
from openapi_server.models.push_config_request import PushConfigRequest
from openapi_server.models.xiaomi_config_request import XiaomiConfigRequest
from openapi_server import util


class UpdateAppRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agora_options: ConfigRequest=None, apn_config: APNConfigRequest=None, async_moderation_config: AsyncModerationConfigurationRequest=None, async_url_enrich_enabled: bool=None, auto_translation_enabled: bool=None, before_message_send_hook_url: str=None, cdn_expiration_seconds: int=None, channel_hide_members_only: bool=None, custom_action_handler_url: str=None, disable_auth_checks: bool=None, disable_permissions_checks: bool=None, enforce_unique_usernames: str=None, file_upload_config: FileUploadConfigRequest=None, firebase_config: FirebaseConfigRequest=None, grants: Dict[str, List[str]]=None, hms_options: ConfigRequest=None, huawei_config: HuaweiConfigRequest=None, image_moderation_block_labels: List[str]=None, image_moderation_enabled: bool=None, image_moderation_labels: List[str]=None, image_upload_config: FileUploadConfigRequest=None, migrate_permissions_to_v2: bool=None, multi_tenant_enabled: bool=None, permission_version: str=None, push_config: PushConfigRequest=None, reminders_interval: int=None, revoke_tokens_issued_before: datetime=None, sqs_key: str=None, sqs_secret: str=None, sqs_url: str=None, user_search_disallowed_roles: List[str]=None, video_provider: str=None, webhook_events: List[str]=None, webhook_url: str=None, xiaomi_config: XiaomiConfigRequest=None):
        """UpdateAppRequest - a model defined in OpenAPI

        :param agora_options: The agora_options of this UpdateAppRequest.
        :param apn_config: The apn_config of this UpdateAppRequest.
        :param async_moderation_config: The async_moderation_config of this UpdateAppRequest.
        :param async_url_enrich_enabled: The async_url_enrich_enabled of this UpdateAppRequest.
        :param auto_translation_enabled: The auto_translation_enabled of this UpdateAppRequest.
        :param before_message_send_hook_url: The before_message_send_hook_url of this UpdateAppRequest.
        :param cdn_expiration_seconds: The cdn_expiration_seconds of this UpdateAppRequest.
        :param channel_hide_members_only: The channel_hide_members_only of this UpdateAppRequest.
        :param custom_action_handler_url: The custom_action_handler_url of this UpdateAppRequest.
        :param disable_auth_checks: The disable_auth_checks of this UpdateAppRequest.
        :param disable_permissions_checks: The disable_permissions_checks of this UpdateAppRequest.
        :param enforce_unique_usernames: The enforce_unique_usernames of this UpdateAppRequest.
        :param file_upload_config: The file_upload_config of this UpdateAppRequest.
        :param firebase_config: The firebase_config of this UpdateAppRequest.
        :param grants: The grants of this UpdateAppRequest.
        :param hms_options: The hms_options of this UpdateAppRequest.
        :param huawei_config: The huawei_config of this UpdateAppRequest.
        :param image_moderation_block_labels: The image_moderation_block_labels of this UpdateAppRequest.
        :param image_moderation_enabled: The image_moderation_enabled of this UpdateAppRequest.
        :param image_moderation_labels: The image_moderation_labels of this UpdateAppRequest.
        :param image_upload_config: The image_upload_config of this UpdateAppRequest.
        :param migrate_permissions_to_v2: The migrate_permissions_to_v2 of this UpdateAppRequest.
        :param multi_tenant_enabled: The multi_tenant_enabled of this UpdateAppRequest.
        :param permission_version: The permission_version of this UpdateAppRequest.
        :param push_config: The push_config of this UpdateAppRequest.
        :param reminders_interval: The reminders_interval of this UpdateAppRequest.
        :param revoke_tokens_issued_before: The revoke_tokens_issued_before of this UpdateAppRequest.
        :param sqs_key: The sqs_key of this UpdateAppRequest.
        :param sqs_secret: The sqs_secret of this UpdateAppRequest.
        :param sqs_url: The sqs_url of this UpdateAppRequest.
        :param user_search_disallowed_roles: The user_search_disallowed_roles of this UpdateAppRequest.
        :param video_provider: The video_provider of this UpdateAppRequest.
        :param webhook_events: The webhook_events of this UpdateAppRequest.
        :param webhook_url: The webhook_url of this UpdateAppRequest.
        :param xiaomi_config: The xiaomi_config of this UpdateAppRequest.
        """
        self.openapi_types = {
            'agora_options': ConfigRequest,
            'apn_config': APNConfigRequest,
            'async_moderation_config': AsyncModerationConfigurationRequest,
            'async_url_enrich_enabled': bool,
            'auto_translation_enabled': bool,
            'before_message_send_hook_url': str,
            'cdn_expiration_seconds': int,
            'channel_hide_members_only': bool,
            'custom_action_handler_url': str,
            'disable_auth_checks': bool,
            'disable_permissions_checks': bool,
            'enforce_unique_usernames': str,
            'file_upload_config': FileUploadConfigRequest,
            'firebase_config': FirebaseConfigRequest,
            'grants': Dict[str, List[str]],
            'hms_options': ConfigRequest,
            'huawei_config': HuaweiConfigRequest,
            'image_moderation_block_labels': List[str],
            'image_moderation_enabled': bool,
            'image_moderation_labels': List[str],
            'image_upload_config': FileUploadConfigRequest,
            'migrate_permissions_to_v2': bool,
            'multi_tenant_enabled': bool,
            'permission_version': str,
            'push_config': PushConfigRequest,
            'reminders_interval': int,
            'revoke_tokens_issued_before': datetime,
            'sqs_key': str,
            'sqs_secret': str,
            'sqs_url': str,
            'user_search_disallowed_roles': List[str],
            'video_provider': str,
            'webhook_events': List[str],
            'webhook_url': str,
            'xiaomi_config': XiaomiConfigRequest
        }

        self.attribute_map = {
            'agora_options': 'agora_options',
            'apn_config': 'apn_config',
            'async_moderation_config': 'async_moderation_config',
            'async_url_enrich_enabled': 'async_url_enrich_enabled',
            'auto_translation_enabled': 'auto_translation_enabled',
            'before_message_send_hook_url': 'before_message_send_hook_url',
            'cdn_expiration_seconds': 'cdn_expiration_seconds',
            'channel_hide_members_only': 'channel_hide_members_only',
            'custom_action_handler_url': 'custom_action_handler_url',
            'disable_auth_checks': 'disable_auth_checks',
            'disable_permissions_checks': 'disable_permissions_checks',
            'enforce_unique_usernames': 'enforce_unique_usernames',
            'file_upload_config': 'file_upload_config',
            'firebase_config': 'firebase_config',
            'grants': 'grants',
            'hms_options': 'hms_options',
            'huawei_config': 'huawei_config',
            'image_moderation_block_labels': 'image_moderation_block_labels',
            'image_moderation_enabled': 'image_moderation_enabled',
            'image_moderation_labels': 'image_moderation_labels',
            'image_upload_config': 'image_upload_config',
            'migrate_permissions_to_v2': 'migrate_permissions_to_v2',
            'multi_tenant_enabled': 'multi_tenant_enabled',
            'permission_version': 'permission_version',
            'push_config': 'push_config',
            'reminders_interval': 'reminders_interval',
            'revoke_tokens_issued_before': 'revoke_tokens_issued_before',
            'sqs_key': 'sqs_key',
            'sqs_secret': 'sqs_secret',
            'sqs_url': 'sqs_url',
            'user_search_disallowed_roles': 'user_search_disallowed_roles',
            'video_provider': 'video_provider',
            'webhook_events': 'webhook_events',
            'webhook_url': 'webhook_url',
            'xiaomi_config': 'xiaomi_config'
        }

        self._agora_options = agora_options
        self._apn_config = apn_config
        self._async_moderation_config = async_moderation_config
        self._async_url_enrich_enabled = async_url_enrich_enabled
        self._auto_translation_enabled = auto_translation_enabled
        self._before_message_send_hook_url = before_message_send_hook_url
        self._cdn_expiration_seconds = cdn_expiration_seconds
        self._channel_hide_members_only = channel_hide_members_only
        self._custom_action_handler_url = custom_action_handler_url
        self._disable_auth_checks = disable_auth_checks
        self._disable_permissions_checks = disable_permissions_checks
        self._enforce_unique_usernames = enforce_unique_usernames
        self._file_upload_config = file_upload_config
        self._firebase_config = firebase_config
        self._grants = grants
        self._hms_options = hms_options
        self._huawei_config = huawei_config
        self._image_moderation_block_labels = image_moderation_block_labels
        self._image_moderation_enabled = image_moderation_enabled
        self._image_moderation_labels = image_moderation_labels
        self._image_upload_config = image_upload_config
        self._migrate_permissions_to_v2 = migrate_permissions_to_v2
        self._multi_tenant_enabled = multi_tenant_enabled
        self._permission_version = permission_version
        self._push_config = push_config
        self._reminders_interval = reminders_interval
        self._revoke_tokens_issued_before = revoke_tokens_issued_before
        self._sqs_key = sqs_key
        self._sqs_secret = sqs_secret
        self._sqs_url = sqs_url
        self._user_search_disallowed_roles = user_search_disallowed_roles
        self._video_provider = video_provider
        self._webhook_events = webhook_events
        self._webhook_url = webhook_url
        self._xiaomi_config = xiaomi_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAppRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAppRequest of this UpdateAppRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agora_options(self):
        """Gets the agora_options of this UpdateAppRequest.


        :return: The agora_options of this UpdateAppRequest.
        :rtype: ConfigRequest
        """
        return self._agora_options

    @agora_options.setter
    def agora_options(self, agora_options):
        """Sets the agora_options of this UpdateAppRequest.


        :param agora_options: The agora_options of this UpdateAppRequest.
        :type agora_options: ConfigRequest
        """

        self._agora_options = agora_options

    @property
    def apn_config(self):
        """Gets the apn_config of this UpdateAppRequest.


        :return: The apn_config of this UpdateAppRequest.
        :rtype: APNConfigRequest
        """
        return self._apn_config

    @apn_config.setter
    def apn_config(self, apn_config):
        """Sets the apn_config of this UpdateAppRequest.


        :param apn_config: The apn_config of this UpdateAppRequest.
        :type apn_config: APNConfigRequest
        """

        self._apn_config = apn_config

    @property
    def async_moderation_config(self):
        """Gets the async_moderation_config of this UpdateAppRequest.


        :return: The async_moderation_config of this UpdateAppRequest.
        :rtype: AsyncModerationConfigurationRequest
        """
        return self._async_moderation_config

    @async_moderation_config.setter
    def async_moderation_config(self, async_moderation_config):
        """Sets the async_moderation_config of this UpdateAppRequest.


        :param async_moderation_config: The async_moderation_config of this UpdateAppRequest.
        :type async_moderation_config: AsyncModerationConfigurationRequest
        """

        self._async_moderation_config = async_moderation_config

    @property
    def async_url_enrich_enabled(self):
        """Gets the async_url_enrich_enabled of this UpdateAppRequest.


        :return: The async_url_enrich_enabled of this UpdateAppRequest.
        :rtype: bool
        """
        return self._async_url_enrich_enabled

    @async_url_enrich_enabled.setter
    def async_url_enrich_enabled(self, async_url_enrich_enabled):
        """Sets the async_url_enrich_enabled of this UpdateAppRequest.


        :param async_url_enrich_enabled: The async_url_enrich_enabled of this UpdateAppRequest.
        :type async_url_enrich_enabled: bool
        """

        self._async_url_enrich_enabled = async_url_enrich_enabled

    @property
    def auto_translation_enabled(self):
        """Gets the auto_translation_enabled of this UpdateAppRequest.


        :return: The auto_translation_enabled of this UpdateAppRequest.
        :rtype: bool
        """
        return self._auto_translation_enabled

    @auto_translation_enabled.setter
    def auto_translation_enabled(self, auto_translation_enabled):
        """Sets the auto_translation_enabled of this UpdateAppRequest.


        :param auto_translation_enabled: The auto_translation_enabled of this UpdateAppRequest.
        :type auto_translation_enabled: bool
        """

        self._auto_translation_enabled = auto_translation_enabled

    @property
    def before_message_send_hook_url(self):
        """Gets the before_message_send_hook_url of this UpdateAppRequest.


        :return: The before_message_send_hook_url of this UpdateAppRequest.
        :rtype: str
        """
        return self._before_message_send_hook_url

    @before_message_send_hook_url.setter
    def before_message_send_hook_url(self, before_message_send_hook_url):
        """Sets the before_message_send_hook_url of this UpdateAppRequest.


        :param before_message_send_hook_url: The before_message_send_hook_url of this UpdateAppRequest.
        :type before_message_send_hook_url: str
        """

        self._before_message_send_hook_url = before_message_send_hook_url

    @property
    def cdn_expiration_seconds(self):
        """Gets the cdn_expiration_seconds of this UpdateAppRequest.


        :return: The cdn_expiration_seconds of this UpdateAppRequest.
        :rtype: int
        """
        return self._cdn_expiration_seconds

    @cdn_expiration_seconds.setter
    def cdn_expiration_seconds(self, cdn_expiration_seconds):
        """Sets the cdn_expiration_seconds of this UpdateAppRequest.


        :param cdn_expiration_seconds: The cdn_expiration_seconds of this UpdateAppRequest.
        :type cdn_expiration_seconds: int
        """
        if cdn_expiration_seconds is not None and cdn_expiration_seconds > 1209600:
            raise ValueError("Invalid value for `cdn_expiration_seconds`, must be a value less than or equal to `1209600`")
        if cdn_expiration_seconds is not None and cdn_expiration_seconds < 14400:
            raise ValueError("Invalid value for `cdn_expiration_seconds`, must be a value greater than or equal to `14400`")

        self._cdn_expiration_seconds = cdn_expiration_seconds

    @property
    def channel_hide_members_only(self):
        """Gets the channel_hide_members_only of this UpdateAppRequest.


        :return: The channel_hide_members_only of this UpdateAppRequest.
        :rtype: bool
        """
        return self._channel_hide_members_only

    @channel_hide_members_only.setter
    def channel_hide_members_only(self, channel_hide_members_only):
        """Sets the channel_hide_members_only of this UpdateAppRequest.


        :param channel_hide_members_only: The channel_hide_members_only of this UpdateAppRequest.
        :type channel_hide_members_only: bool
        """

        self._channel_hide_members_only = channel_hide_members_only

    @property
    def custom_action_handler_url(self):
        """Gets the custom_action_handler_url of this UpdateAppRequest.


        :return: The custom_action_handler_url of this UpdateAppRequest.
        :rtype: str
        """
        return self._custom_action_handler_url

    @custom_action_handler_url.setter
    def custom_action_handler_url(self, custom_action_handler_url):
        """Sets the custom_action_handler_url of this UpdateAppRequest.


        :param custom_action_handler_url: The custom_action_handler_url of this UpdateAppRequest.
        :type custom_action_handler_url: str
        """

        self._custom_action_handler_url = custom_action_handler_url

    @property
    def disable_auth_checks(self):
        """Gets the disable_auth_checks of this UpdateAppRequest.


        :return: The disable_auth_checks of this UpdateAppRequest.
        :rtype: bool
        """
        return self._disable_auth_checks

    @disable_auth_checks.setter
    def disable_auth_checks(self, disable_auth_checks):
        """Sets the disable_auth_checks of this UpdateAppRequest.


        :param disable_auth_checks: The disable_auth_checks of this UpdateAppRequest.
        :type disable_auth_checks: bool
        """

        self._disable_auth_checks = disable_auth_checks

    @property
    def disable_permissions_checks(self):
        """Gets the disable_permissions_checks of this UpdateAppRequest.


        :return: The disable_permissions_checks of this UpdateAppRequest.
        :rtype: bool
        """
        return self._disable_permissions_checks

    @disable_permissions_checks.setter
    def disable_permissions_checks(self, disable_permissions_checks):
        """Sets the disable_permissions_checks of this UpdateAppRequest.


        :param disable_permissions_checks: The disable_permissions_checks of this UpdateAppRequest.
        :type disable_permissions_checks: bool
        """

        self._disable_permissions_checks = disable_permissions_checks

    @property
    def enforce_unique_usernames(self):
        """Gets the enforce_unique_usernames of this UpdateAppRequest.


        :return: The enforce_unique_usernames of this UpdateAppRequest.
        :rtype: str
        """
        return self._enforce_unique_usernames

    @enforce_unique_usernames.setter
    def enforce_unique_usernames(self, enforce_unique_usernames):
        """Sets the enforce_unique_usernames of this UpdateAppRequest.


        :param enforce_unique_usernames: The enforce_unique_usernames of this UpdateAppRequest.
        :type enforce_unique_usernames: str
        """
        allowed_values = ["false", "app", "team"]  # noqa: E501
        if enforce_unique_usernames not in allowed_values:
            raise ValueError(
                "Invalid value for `enforce_unique_usernames` ({0}), must be one of {1}"
                .format(enforce_unique_usernames, allowed_values)
            )

        self._enforce_unique_usernames = enforce_unique_usernames

    @property
    def file_upload_config(self):
        """Gets the file_upload_config of this UpdateAppRequest.


        :return: The file_upload_config of this UpdateAppRequest.
        :rtype: FileUploadConfigRequest
        """
        return self._file_upload_config

    @file_upload_config.setter
    def file_upload_config(self, file_upload_config):
        """Sets the file_upload_config of this UpdateAppRequest.


        :param file_upload_config: The file_upload_config of this UpdateAppRequest.
        :type file_upload_config: FileUploadConfigRequest
        """

        self._file_upload_config = file_upload_config

    @property
    def firebase_config(self):
        """Gets the firebase_config of this UpdateAppRequest.


        :return: The firebase_config of this UpdateAppRequest.
        :rtype: FirebaseConfigRequest
        """
        return self._firebase_config

    @firebase_config.setter
    def firebase_config(self, firebase_config):
        """Sets the firebase_config of this UpdateAppRequest.


        :param firebase_config: The firebase_config of this UpdateAppRequest.
        :type firebase_config: FirebaseConfigRequest
        """

        self._firebase_config = firebase_config

    @property
    def grants(self):
        """Gets the grants of this UpdateAppRequest.


        :return: The grants of this UpdateAppRequest.
        :rtype: Dict[str, List[str]]
        """
        return self._grants

    @grants.setter
    def grants(self, grants):
        """Sets the grants of this UpdateAppRequest.


        :param grants: The grants of this UpdateAppRequest.
        :type grants: Dict[str, List[str]]
        """

        self._grants = grants

    @property
    def hms_options(self):
        """Gets the hms_options of this UpdateAppRequest.


        :return: The hms_options of this UpdateAppRequest.
        :rtype: ConfigRequest
        """
        return self._hms_options

    @hms_options.setter
    def hms_options(self, hms_options):
        """Sets the hms_options of this UpdateAppRequest.


        :param hms_options: The hms_options of this UpdateAppRequest.
        :type hms_options: ConfigRequest
        """

        self._hms_options = hms_options

    @property
    def huawei_config(self):
        """Gets the huawei_config of this UpdateAppRequest.


        :return: The huawei_config of this UpdateAppRequest.
        :rtype: HuaweiConfigRequest
        """
        return self._huawei_config

    @huawei_config.setter
    def huawei_config(self, huawei_config):
        """Sets the huawei_config of this UpdateAppRequest.


        :param huawei_config: The huawei_config of this UpdateAppRequest.
        :type huawei_config: HuaweiConfigRequest
        """

        self._huawei_config = huawei_config

    @property
    def image_moderation_block_labels(self):
        """Gets the image_moderation_block_labels of this UpdateAppRequest.


        :return: The image_moderation_block_labels of this UpdateAppRequest.
        :rtype: List[str]
        """
        return self._image_moderation_block_labels

    @image_moderation_block_labels.setter
    def image_moderation_block_labels(self, image_moderation_block_labels):
        """Sets the image_moderation_block_labels of this UpdateAppRequest.


        :param image_moderation_block_labels: The image_moderation_block_labels of this UpdateAppRequest.
        :type image_moderation_block_labels: List[str]
        """

        self._image_moderation_block_labels = image_moderation_block_labels

    @property
    def image_moderation_enabled(self):
        """Gets the image_moderation_enabled of this UpdateAppRequest.


        :return: The image_moderation_enabled of this UpdateAppRequest.
        :rtype: bool
        """
        return self._image_moderation_enabled

    @image_moderation_enabled.setter
    def image_moderation_enabled(self, image_moderation_enabled):
        """Sets the image_moderation_enabled of this UpdateAppRequest.


        :param image_moderation_enabled: The image_moderation_enabled of this UpdateAppRequest.
        :type image_moderation_enabled: bool
        """

        self._image_moderation_enabled = image_moderation_enabled

    @property
    def image_moderation_labels(self):
        """Gets the image_moderation_labels of this UpdateAppRequest.


        :return: The image_moderation_labels of this UpdateAppRequest.
        :rtype: List[str]
        """
        return self._image_moderation_labels

    @image_moderation_labels.setter
    def image_moderation_labels(self, image_moderation_labels):
        """Sets the image_moderation_labels of this UpdateAppRequest.


        :param image_moderation_labels: The image_moderation_labels of this UpdateAppRequest.
        :type image_moderation_labels: List[str]
        """

        self._image_moderation_labels = image_moderation_labels

    @property
    def image_upload_config(self):
        """Gets the image_upload_config of this UpdateAppRequest.


        :return: The image_upload_config of this UpdateAppRequest.
        :rtype: FileUploadConfigRequest
        """
        return self._image_upload_config

    @image_upload_config.setter
    def image_upload_config(self, image_upload_config):
        """Sets the image_upload_config of this UpdateAppRequest.


        :param image_upload_config: The image_upload_config of this UpdateAppRequest.
        :type image_upload_config: FileUploadConfigRequest
        """

        self._image_upload_config = image_upload_config

    @property
    def migrate_permissions_to_v2(self):
        """Gets the migrate_permissions_to_v2 of this UpdateAppRequest.


        :return: The migrate_permissions_to_v2 of this UpdateAppRequest.
        :rtype: bool
        """
        return self._migrate_permissions_to_v2

    @migrate_permissions_to_v2.setter
    def migrate_permissions_to_v2(self, migrate_permissions_to_v2):
        """Sets the migrate_permissions_to_v2 of this UpdateAppRequest.


        :param migrate_permissions_to_v2: The migrate_permissions_to_v2 of this UpdateAppRequest.
        :type migrate_permissions_to_v2: bool
        """

        self._migrate_permissions_to_v2 = migrate_permissions_to_v2

    @property
    def multi_tenant_enabled(self):
        """Gets the multi_tenant_enabled of this UpdateAppRequest.


        :return: The multi_tenant_enabled of this UpdateAppRequest.
        :rtype: bool
        """
        return self._multi_tenant_enabled

    @multi_tenant_enabled.setter
    def multi_tenant_enabled(self, multi_tenant_enabled):
        """Sets the multi_tenant_enabled of this UpdateAppRequest.


        :param multi_tenant_enabled: The multi_tenant_enabled of this UpdateAppRequest.
        :type multi_tenant_enabled: bool
        """

        self._multi_tenant_enabled = multi_tenant_enabled

    @property
    def permission_version(self):
        """Gets the permission_version of this UpdateAppRequest.


        :return: The permission_version of this UpdateAppRequest.
        :rtype: str
        """
        return self._permission_version

    @permission_version.setter
    def permission_version(self, permission_version):
        """Sets the permission_version of this UpdateAppRequest.


        :param permission_version: The permission_version of this UpdateAppRequest.
        :type permission_version: str
        """
        allowed_values = ["v1", "v2"]  # noqa: E501
        if permission_version not in allowed_values:
            raise ValueError(
                "Invalid value for `permission_version` ({0}), must be one of {1}"
                .format(permission_version, allowed_values)
            )

        self._permission_version = permission_version

    @property
    def push_config(self):
        """Gets the push_config of this UpdateAppRequest.


        :return: The push_config of this UpdateAppRequest.
        :rtype: PushConfigRequest
        """
        return self._push_config

    @push_config.setter
    def push_config(self, push_config):
        """Sets the push_config of this UpdateAppRequest.


        :param push_config: The push_config of this UpdateAppRequest.
        :type push_config: PushConfigRequest
        """

        self._push_config = push_config

    @property
    def reminders_interval(self):
        """Gets the reminders_interval of this UpdateAppRequest.


        :return: The reminders_interval of this UpdateAppRequest.
        :rtype: int
        """
        return self._reminders_interval

    @reminders_interval.setter
    def reminders_interval(self, reminders_interval):
        """Sets the reminders_interval of this UpdateAppRequest.


        :param reminders_interval: The reminders_interval of this UpdateAppRequest.
        :type reminders_interval: int
        """
        if reminders_interval is not None and reminders_interval > 86400:
            raise ValueError("Invalid value for `reminders_interval`, must be a value less than or equal to `86400`")
        if reminders_interval is not None and reminders_interval < 60:
            raise ValueError("Invalid value for `reminders_interval`, must be a value greater than or equal to `60`")

        self._reminders_interval = reminders_interval

    @property
    def revoke_tokens_issued_before(self):
        """Gets the revoke_tokens_issued_before of this UpdateAppRequest.


        :return: The revoke_tokens_issued_before of this UpdateAppRequest.
        :rtype: datetime
        """
        return self._revoke_tokens_issued_before

    @revoke_tokens_issued_before.setter
    def revoke_tokens_issued_before(self, revoke_tokens_issued_before):
        """Sets the revoke_tokens_issued_before of this UpdateAppRequest.


        :param revoke_tokens_issued_before: The revoke_tokens_issued_before of this UpdateAppRequest.
        :type revoke_tokens_issued_before: datetime
        """

        self._revoke_tokens_issued_before = revoke_tokens_issued_before

    @property
    def sqs_key(self):
        """Gets the sqs_key of this UpdateAppRequest.


        :return: The sqs_key of this UpdateAppRequest.
        :rtype: str
        """
        return self._sqs_key

    @sqs_key.setter
    def sqs_key(self, sqs_key):
        """Sets the sqs_key of this UpdateAppRequest.


        :param sqs_key: The sqs_key of this UpdateAppRequest.
        :type sqs_key: str
        """

        self._sqs_key = sqs_key

    @property
    def sqs_secret(self):
        """Gets the sqs_secret of this UpdateAppRequest.


        :return: The sqs_secret of this UpdateAppRequest.
        :rtype: str
        """
        return self._sqs_secret

    @sqs_secret.setter
    def sqs_secret(self, sqs_secret):
        """Sets the sqs_secret of this UpdateAppRequest.


        :param sqs_secret: The sqs_secret of this UpdateAppRequest.
        :type sqs_secret: str
        """

        self._sqs_secret = sqs_secret

    @property
    def sqs_url(self):
        """Gets the sqs_url of this UpdateAppRequest.


        :return: The sqs_url of this UpdateAppRequest.
        :rtype: str
        """
        return self._sqs_url

    @sqs_url.setter
    def sqs_url(self, sqs_url):
        """Sets the sqs_url of this UpdateAppRequest.


        :param sqs_url: The sqs_url of this UpdateAppRequest.
        :type sqs_url: str
        """

        self._sqs_url = sqs_url

    @property
    def user_search_disallowed_roles(self):
        """Gets the user_search_disallowed_roles of this UpdateAppRequest.


        :return: The user_search_disallowed_roles of this UpdateAppRequest.
        :rtype: List[str]
        """
        return self._user_search_disallowed_roles

    @user_search_disallowed_roles.setter
    def user_search_disallowed_roles(self, user_search_disallowed_roles):
        """Sets the user_search_disallowed_roles of this UpdateAppRequest.


        :param user_search_disallowed_roles: The user_search_disallowed_roles of this UpdateAppRequest.
        :type user_search_disallowed_roles: List[str]
        """

        self._user_search_disallowed_roles = user_search_disallowed_roles

    @property
    def video_provider(self):
        """Gets the video_provider of this UpdateAppRequest.


        :return: The video_provider of this UpdateAppRequest.
        :rtype: str
        """
        return self._video_provider

    @video_provider.setter
    def video_provider(self, video_provider):
        """Sets the video_provider of this UpdateAppRequest.


        :param video_provider: The video_provider of this UpdateAppRequest.
        :type video_provider: str
        """
        allowed_values = ["agora", "hms"]  # noqa: E501
        if video_provider not in allowed_values:
            raise ValueError(
                "Invalid value for `video_provider` ({0}), must be one of {1}"
                .format(video_provider, allowed_values)
            )

        self._video_provider = video_provider

    @property
    def webhook_events(self):
        """Gets the webhook_events of this UpdateAppRequest.


        :return: The webhook_events of this UpdateAppRequest.
        :rtype: List[str]
        """
        return self._webhook_events

    @webhook_events.setter
    def webhook_events(self, webhook_events):
        """Sets the webhook_events of this UpdateAppRequest.


        :param webhook_events: The webhook_events of this UpdateAppRequest.
        :type webhook_events: List[str]
        """

        self._webhook_events = webhook_events

    @property
    def webhook_url(self):
        """Gets the webhook_url of this UpdateAppRequest.


        :return: The webhook_url of this UpdateAppRequest.
        :rtype: str
        """
        return self._webhook_url

    @webhook_url.setter
    def webhook_url(self, webhook_url):
        """Sets the webhook_url of this UpdateAppRequest.


        :param webhook_url: The webhook_url of this UpdateAppRequest.
        :type webhook_url: str
        """

        self._webhook_url = webhook_url

    @property
    def xiaomi_config(self):
        """Gets the xiaomi_config of this UpdateAppRequest.


        :return: The xiaomi_config of this UpdateAppRequest.
        :rtype: XiaomiConfigRequest
        """
        return self._xiaomi_config

    @xiaomi_config.setter
    def xiaomi_config(self, xiaomi_config):
        """Sets the xiaomi_config of this UpdateAppRequest.


        :param xiaomi_config: The xiaomi_config of this UpdateAppRequest.
        :type xiaomi_config: XiaomiConfigRequest
        """

        self._xiaomi_config = xiaomi_config
