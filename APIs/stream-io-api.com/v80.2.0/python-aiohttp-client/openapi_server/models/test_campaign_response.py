# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestCampaignResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: str=None, duration: str=None, results: Dict[str, str]=None, status: str=None):
        """TestCampaignResponse - a model defined in OpenAPI

        :param details: The details of this TestCampaignResponse.
        :param duration: The duration of this TestCampaignResponse.
        :param results: The results of this TestCampaignResponse.
        :param status: The status of this TestCampaignResponse.
        """
        self.openapi_types = {
            'details': str,
            'duration': str,
            'results': Dict[str, str],
            'status': str
        }

        self.attribute_map = {
            'details': 'details',
            'duration': 'duration',
            'results': 'results',
            'status': 'status'
        }

        self._details = details
        self._duration = duration
        self._results = results
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestCampaignResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestCampaignResponse of this TestCampaignResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this TestCampaignResponse.


        :return: The details of this TestCampaignResponse.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this TestCampaignResponse.


        :param details: The details of this TestCampaignResponse.
        :type details: str
        """

        self._details = details

    @property
    def duration(self):
        """Gets the duration of this TestCampaignResponse.


        :return: The duration of this TestCampaignResponse.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this TestCampaignResponse.


        :param duration: The duration of this TestCampaignResponse.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def results(self):
        """Gets the results of this TestCampaignResponse.

        Result of the test per user

        :return: The results of this TestCampaignResponse.
        :rtype: Dict[str, str]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this TestCampaignResponse.

        Result of the test per user

        :param results: The results of this TestCampaignResponse.
        :type results: Dict[str, str]
        """

        self._results = results

    @property
    def status(self):
        """Gets the status of this TestCampaignResponse.


        :return: The status of this TestCampaignResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TestCampaignResponse.


        :param status: The status of this TestCampaignResponse.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status
