# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sort_param import SortParam
from openapi_server import util


class SearchRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter_conditions: Dict[str, object]=None, limit: int=None, message_filter_conditions: Dict[str, object]=None, next: str=None, offset: int=None, query: str=None, sort: List[SortParam]=None):
        """SearchRequest - a model defined in OpenAPI

        :param filter_conditions: The filter_conditions of this SearchRequest.
        :param limit: The limit of this SearchRequest.
        :param message_filter_conditions: The message_filter_conditions of this SearchRequest.
        :param next: The next of this SearchRequest.
        :param offset: The offset of this SearchRequest.
        :param query: The query of this SearchRequest.
        :param sort: The sort of this SearchRequest.
        """
        self.openapi_types = {
            'filter_conditions': Dict[str, object],
            'limit': int,
            'message_filter_conditions': Dict[str, object],
            'next': str,
            'offset': int,
            'query': str,
            'sort': List[SortParam]
        }

        self.attribute_map = {
            'filter_conditions': 'filter_conditions',
            'limit': 'limit',
            'message_filter_conditions': 'message_filter_conditions',
            'next': 'next',
            'offset': 'offset',
            'query': 'query',
            'sort': 'sort'
        }

        self._filter_conditions = filter_conditions
        self._limit = limit
        self._message_filter_conditions = message_filter_conditions
        self._next = next
        self._offset = offset
        self._query = query
        self._sort = sort

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchRequest of this SearchRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_conditions(self):
        """Gets the filter_conditions of this SearchRequest.

        Channel filter conditions

        :return: The filter_conditions of this SearchRequest.
        :rtype: Dict[str, object]
        """
        return self._filter_conditions

    @filter_conditions.setter
    def filter_conditions(self, filter_conditions):
        """Sets the filter_conditions of this SearchRequest.

        Channel filter conditions

        :param filter_conditions: The filter_conditions of this SearchRequest.
        :type filter_conditions: Dict[str, object]
        """
        if filter_conditions is None:
            raise ValueError("Invalid value for `filter_conditions`, must not be `None`")

        self._filter_conditions = filter_conditions

    @property
    def limit(self):
        """Gets the limit of this SearchRequest.

        Number of messages to return

        :return: The limit of this SearchRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this SearchRequest.

        Number of messages to return

        :param limit: The limit of this SearchRequest.
        :type limit: int
        """

        self._limit = limit

    @property
    def message_filter_conditions(self):
        """Gets the message_filter_conditions of this SearchRequest.

        Message filter conditions

        :return: The message_filter_conditions of this SearchRequest.
        :rtype: Dict[str, object]
        """
        return self._message_filter_conditions

    @message_filter_conditions.setter
    def message_filter_conditions(self, message_filter_conditions):
        """Sets the message_filter_conditions of this SearchRequest.

        Message filter conditions

        :param message_filter_conditions: The message_filter_conditions of this SearchRequest.
        :type message_filter_conditions: Dict[str, object]
        """

        self._message_filter_conditions = message_filter_conditions

    @property
    def next(self):
        """Gets the next of this SearchRequest.

        Pagination parameter. Cannot be used with non-zero offset.

        :return: The next of this SearchRequest.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this SearchRequest.

        Pagination parameter. Cannot be used with non-zero offset.

        :param next: The next of this SearchRequest.
        :type next: str
        """

        self._next = next

    @property
    def offset(self):
        """Gets the offset of this SearchRequest.

        Pagination offset. Cannot be used with sort or next.

        :return: The offset of this SearchRequest.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this SearchRequest.

        Pagination offset. Cannot be used with sort or next.

        :param offset: The offset of this SearchRequest.
        :type offset: int
        """

        self._offset = offset

    @property
    def query(self):
        """Gets the query of this SearchRequest.

        Search phrase

        :return: The query of this SearchRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SearchRequest.

        Search phrase

        :param query: The query of this SearchRequest.
        :type query: str
        """

        self._query = query

    @property
    def sort(self):
        """Gets the sort of this SearchRequest.

        Sort parameters. Cannot be used with non-zero offset

        :return: The sort of this SearchRequest.
        :rtype: List[SortParam]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this SearchRequest.

        Sort parameters. Cannot be used with non-zero offset

        :param sort: The sort of this SearchRequest.
        :type sort: List[SortParam]
        """

        self._sort = sort
