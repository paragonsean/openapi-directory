# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TranscriptionSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, closed_caption_mode: str=None, mode: str=None):
        """TranscriptionSettings - a model defined in OpenAPI

        :param closed_caption_mode: The closed_caption_mode of this TranscriptionSettings.
        :param mode: The mode of this TranscriptionSettings.
        """
        self.openapi_types = {
            'closed_caption_mode': str,
            'mode': str
        }

        self.attribute_map = {
            'closed_caption_mode': 'closed_caption_mode',
            'mode': 'mode'
        }

        self._closed_caption_mode = closed_caption_mode
        self._mode = mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TranscriptionSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TranscriptionSettings of this TranscriptionSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def closed_caption_mode(self):
        """Gets the closed_caption_mode of this TranscriptionSettings.


        :return: The closed_caption_mode of this TranscriptionSettings.
        :rtype: str
        """
        return self._closed_caption_mode

    @closed_caption_mode.setter
    def closed_caption_mode(self, closed_caption_mode):
        """Sets the closed_caption_mode of this TranscriptionSettings.


        :param closed_caption_mode: The closed_caption_mode of this TranscriptionSettings.
        :type closed_caption_mode: str
        """
        if closed_caption_mode is None:
            raise ValueError("Invalid value for `closed_caption_mode`, must not be `None`")

        self._closed_caption_mode = closed_caption_mode

    @property
    def mode(self):
        """Gets the mode of this TranscriptionSettings.


        :return: The mode of this TranscriptionSettings.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this TranscriptionSettings.


        :param mode: The mode of this TranscriptionSettings.
        :type mode: str
        """
        allowed_values = ["available", "disabled", "auto-on"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode
