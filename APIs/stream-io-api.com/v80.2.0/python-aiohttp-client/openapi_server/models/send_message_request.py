# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_request import MessageRequest
from openapi_server import util


class SendMessageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, force_moderation: bool=None, is_pending_message: bool=None, keep_channel_hidden: bool=None, message: MessageRequest=None, pending_message_metadata: Dict[str, str]=None, skip_enrich_url: bool=None, skip_push: bool=None):
        """SendMessageRequest - a model defined in OpenAPI

        :param force_moderation: The force_moderation of this SendMessageRequest.
        :param is_pending_message: The is_pending_message of this SendMessageRequest.
        :param keep_channel_hidden: The keep_channel_hidden of this SendMessageRequest.
        :param message: The message of this SendMessageRequest.
        :param pending_message_metadata: The pending_message_metadata of this SendMessageRequest.
        :param skip_enrich_url: The skip_enrich_url of this SendMessageRequest.
        :param skip_push: The skip_push of this SendMessageRequest.
        """
        self.openapi_types = {
            'force_moderation': bool,
            'is_pending_message': bool,
            'keep_channel_hidden': bool,
            'message': MessageRequest,
            'pending_message_metadata': Dict[str, str],
            'skip_enrich_url': bool,
            'skip_push': bool
        }

        self.attribute_map = {
            'force_moderation': 'force_moderation',
            'is_pending_message': 'is_pending_message',
            'keep_channel_hidden': 'keep_channel_hidden',
            'message': 'message',
            'pending_message_metadata': 'pending_message_metadata',
            'skip_enrich_url': 'skip_enrich_url',
            'skip_push': 'skip_push'
        }

        self._force_moderation = force_moderation
        self._is_pending_message = is_pending_message
        self._keep_channel_hidden = keep_channel_hidden
        self._message = message
        self._pending_message_metadata = pending_message_metadata
        self._skip_enrich_url = skip_enrich_url
        self._skip_push = skip_push

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendMessageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendMessageRequest of this SendMessageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def force_moderation(self):
        """Gets the force_moderation of this SendMessageRequest.

        Enable moderation on server-side requests

        :return: The force_moderation of this SendMessageRequest.
        :rtype: bool
        """
        return self._force_moderation

    @force_moderation.setter
    def force_moderation(self, force_moderation):
        """Sets the force_moderation of this SendMessageRequest.

        Enable moderation on server-side requests

        :param force_moderation: The force_moderation of this SendMessageRequest.
        :type force_moderation: bool
        """

        self._force_moderation = force_moderation

    @property
    def is_pending_message(self):
        """Gets the is_pending_message of this SendMessageRequest.

        Make the message a pending message. This message will not be viewable to others until it is committed.

        :return: The is_pending_message of this SendMessageRequest.
        :rtype: bool
        """
        return self._is_pending_message

    @is_pending_message.setter
    def is_pending_message(self, is_pending_message):
        """Sets the is_pending_message of this SendMessageRequest.

        Make the message a pending message. This message will not be viewable to others until it is committed.

        :param is_pending_message: The is_pending_message of this SendMessageRequest.
        :type is_pending_message: bool
        """

        self._is_pending_message = is_pending_message

    @property
    def keep_channel_hidden(self):
        """Gets the keep_channel_hidden of this SendMessageRequest.

        Keeps the channel hidden for the sender

        :return: The keep_channel_hidden of this SendMessageRequest.
        :rtype: bool
        """
        return self._keep_channel_hidden

    @keep_channel_hidden.setter
    def keep_channel_hidden(self, keep_channel_hidden):
        """Sets the keep_channel_hidden of this SendMessageRequest.

        Keeps the channel hidden for the sender

        :param keep_channel_hidden: The keep_channel_hidden of this SendMessageRequest.
        :type keep_channel_hidden: bool
        """

        self._keep_channel_hidden = keep_channel_hidden

    @property
    def message(self):
        """Gets the message of this SendMessageRequest.


        :return: The message of this SendMessageRequest.
        :rtype: MessageRequest
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SendMessageRequest.


        :param message: The message of this SendMessageRequest.
        :type message: MessageRequest
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def pending_message_metadata(self):
        """Gets the pending_message_metadata of this SendMessageRequest.


        :return: The pending_message_metadata of this SendMessageRequest.
        :rtype: Dict[str, str]
        """
        return self._pending_message_metadata

    @pending_message_metadata.setter
    def pending_message_metadata(self, pending_message_metadata):
        """Sets the pending_message_metadata of this SendMessageRequest.


        :param pending_message_metadata: The pending_message_metadata of this SendMessageRequest.
        :type pending_message_metadata: Dict[str, str]
        """

        self._pending_message_metadata = pending_message_metadata

    @property
    def skip_enrich_url(self):
        """Gets the skip_enrich_url of this SendMessageRequest.

        Do not try to enrich the links within message

        :return: The skip_enrich_url of this SendMessageRequest.
        :rtype: bool
        """
        return self._skip_enrich_url

    @skip_enrich_url.setter
    def skip_enrich_url(self, skip_enrich_url):
        """Sets the skip_enrich_url of this SendMessageRequest.

        Do not try to enrich the links within message

        :param skip_enrich_url: The skip_enrich_url of this SendMessageRequest.
        :type skip_enrich_url: bool
        """

        self._skip_enrich_url = skip_enrich_url

    @property
    def skip_push(self):
        """Gets the skip_push of this SendMessageRequest.

        Disables all push notifications for this message

        :return: The skip_push of this SendMessageRequest.
        :rtype: bool
        """
        return self._skip_push

    @skip_push.setter
    def skip_push(self, skip_push):
        """Sets the skip_push of this SendMessageRequest.

        Disables all push notifications for this message

        :param skip_push: The skip_push of this SendMessageRequest.
        :type skip_push: bool
        """

        self._skip_push = skip_push
