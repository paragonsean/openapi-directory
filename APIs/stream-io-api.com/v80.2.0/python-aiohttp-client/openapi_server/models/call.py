# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agora_call import AgoraCall
from openapi_server.models.hms_call import HMSCall
from openapi_server import util


class Call(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agora: AgoraCall=None, hms: HMSCall=None, id: str=None, provider: str=None, type: str=None):
        """Call - a model defined in OpenAPI

        :param agora: The agora of this Call.
        :param hms: The hms of this Call.
        :param id: The id of this Call.
        :param provider: The provider of this Call.
        :param type: The type of this Call.
        """
        self.openapi_types = {
            'agora': AgoraCall,
            'hms': HMSCall,
            'id': str,
            'provider': str,
            'type': str
        }

        self.attribute_map = {
            'agora': 'agora',
            'hms': 'hms',
            'id': 'id',
            'provider': 'provider',
            'type': 'type'
        }

        self._agora = agora
        self._hms = hms
        self._id = id
        self._provider = provider
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Call':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Call of this Call.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agora(self):
        """Gets the agora of this Call.


        :return: The agora of this Call.
        :rtype: AgoraCall
        """
        return self._agora

    @agora.setter
    def agora(self, agora):
        """Sets the agora of this Call.


        :param agora: The agora of this Call.
        :type agora: AgoraCall
        """

        self._agora = agora

    @property
    def hms(self):
        """Gets the hms of this Call.


        :return: The hms of this Call.
        :rtype: HMSCall
        """
        return self._hms

    @hms.setter
    def hms(self, hms):
        """Sets the hms of this Call.


        :param hms: The hms of this Call.
        :type hms: HMSCall
        """

        self._hms = hms

    @property
    def id(self):
        """Gets the id of this Call.


        :return: The id of this Call.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Call.


        :param id: The id of this Call.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def provider(self):
        """Gets the provider of this Call.


        :return: The provider of this Call.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Call.


        :param provider: The provider of this Call.
        :type provider: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def type(self):
        """Gets the type of this Call.


        :return: The type of this Call.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Call.


        :param type: The type of this Call.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
