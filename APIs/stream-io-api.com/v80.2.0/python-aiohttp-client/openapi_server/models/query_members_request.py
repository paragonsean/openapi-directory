# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_member import ChannelMember
from openapi_server.models.sort_param import SortParam
from openapi_server.models.user_object import UserObject
from openapi_server import util


class QueryMembersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at_after: datetime=None, created_at_after_or_equal: datetime=None, created_at_before: datetime=None, created_at_before_or_equal: datetime=None, filter_conditions: Dict[str, object]=None, id: str=None, limit: int=None, members: List[ChannelMember]=None, offset: int=None, sort: List[SortParam]=None, type: str=None, user: UserObject=None, user_id: str=None, user_id_gt: str=None, user_id_gte: str=None, user_id_lt: str=None, user_id_lte: str=None):
        """QueryMembersRequest - a model defined in OpenAPI

        :param created_at_after: The created_at_after of this QueryMembersRequest.
        :param created_at_after_or_equal: The created_at_after_or_equal of this QueryMembersRequest.
        :param created_at_before: The created_at_before of this QueryMembersRequest.
        :param created_at_before_or_equal: The created_at_before_or_equal of this QueryMembersRequest.
        :param filter_conditions: The filter_conditions of this QueryMembersRequest.
        :param id: The id of this QueryMembersRequest.
        :param limit: The limit of this QueryMembersRequest.
        :param members: The members of this QueryMembersRequest.
        :param offset: The offset of this QueryMembersRequest.
        :param sort: The sort of this QueryMembersRequest.
        :param type: The type of this QueryMembersRequest.
        :param user: The user of this QueryMembersRequest.
        :param user_id: The user_id of this QueryMembersRequest.
        :param user_id_gt: The user_id_gt of this QueryMembersRequest.
        :param user_id_gte: The user_id_gte of this QueryMembersRequest.
        :param user_id_lt: The user_id_lt of this QueryMembersRequest.
        :param user_id_lte: The user_id_lte of this QueryMembersRequest.
        """
        self.openapi_types = {
            'created_at_after': datetime,
            'created_at_after_or_equal': datetime,
            'created_at_before': datetime,
            'created_at_before_or_equal': datetime,
            'filter_conditions': Dict[str, object],
            'id': str,
            'limit': int,
            'members': List[ChannelMember],
            'offset': int,
            'sort': List[SortParam],
            'type': str,
            'user': UserObject,
            'user_id': str,
            'user_id_gt': str,
            'user_id_gte': str,
            'user_id_lt': str,
            'user_id_lte': str
        }

        self.attribute_map = {
            'created_at_after': 'created_at_after',
            'created_at_after_or_equal': 'created_at_after_or_equal',
            'created_at_before': 'created_at_before',
            'created_at_before_or_equal': 'created_at_before_or_equal',
            'filter_conditions': 'filter_conditions',
            'id': 'id',
            'limit': 'limit',
            'members': 'members',
            'offset': 'offset',
            'sort': 'sort',
            'type': 'type',
            'user': 'user',
            'user_id': 'user_id',
            'user_id_gt': 'user_id_gt',
            'user_id_gte': 'user_id_gte',
            'user_id_lt': 'user_id_lt',
            'user_id_lte': 'user_id_lte'
        }

        self._created_at_after = created_at_after
        self._created_at_after_or_equal = created_at_after_or_equal
        self._created_at_before = created_at_before
        self._created_at_before_or_equal = created_at_before_or_equal
        self._filter_conditions = filter_conditions
        self._id = id
        self._limit = limit
        self._members = members
        self._offset = offset
        self._sort = sort
        self._type = type
        self._user = user
        self._user_id = user_id
        self._user_id_gt = user_id_gt
        self._user_id_gte = user_id_gte
        self._user_id_lt = user_id_lt
        self._user_id_lte = user_id_lte

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryMembersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryMembersRequest of this QueryMembersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at_after(self):
        """Gets the created_at_after of this QueryMembersRequest.


        :return: The created_at_after of this QueryMembersRequest.
        :rtype: datetime
        """
        return self._created_at_after

    @created_at_after.setter
    def created_at_after(self, created_at_after):
        """Sets the created_at_after of this QueryMembersRequest.


        :param created_at_after: The created_at_after of this QueryMembersRequest.
        :type created_at_after: datetime
        """

        self._created_at_after = created_at_after

    @property
    def created_at_after_or_equal(self):
        """Gets the created_at_after_or_equal of this QueryMembersRequest.


        :return: The created_at_after_or_equal of this QueryMembersRequest.
        :rtype: datetime
        """
        return self._created_at_after_or_equal

    @created_at_after_or_equal.setter
    def created_at_after_or_equal(self, created_at_after_or_equal):
        """Sets the created_at_after_or_equal of this QueryMembersRequest.


        :param created_at_after_or_equal: The created_at_after_or_equal of this QueryMembersRequest.
        :type created_at_after_or_equal: datetime
        """

        self._created_at_after_or_equal = created_at_after_or_equal

    @property
    def created_at_before(self):
        """Gets the created_at_before of this QueryMembersRequest.


        :return: The created_at_before of this QueryMembersRequest.
        :rtype: datetime
        """
        return self._created_at_before

    @created_at_before.setter
    def created_at_before(self, created_at_before):
        """Sets the created_at_before of this QueryMembersRequest.


        :param created_at_before: The created_at_before of this QueryMembersRequest.
        :type created_at_before: datetime
        """

        self._created_at_before = created_at_before

    @property
    def created_at_before_or_equal(self):
        """Gets the created_at_before_or_equal of this QueryMembersRequest.


        :return: The created_at_before_or_equal of this QueryMembersRequest.
        :rtype: datetime
        """
        return self._created_at_before_or_equal

    @created_at_before_or_equal.setter
    def created_at_before_or_equal(self, created_at_before_or_equal):
        """Sets the created_at_before_or_equal of this QueryMembersRequest.


        :param created_at_before_or_equal: The created_at_before_or_equal of this QueryMembersRequest.
        :type created_at_before_or_equal: datetime
        """

        self._created_at_before_or_equal = created_at_before_or_equal

    @property
    def filter_conditions(self):
        """Gets the filter_conditions of this QueryMembersRequest.

        Filter to apply to members

        :return: The filter_conditions of this QueryMembersRequest.
        :rtype: Dict[str, object]
        """
        return self._filter_conditions

    @filter_conditions.setter
    def filter_conditions(self, filter_conditions):
        """Sets the filter_conditions of this QueryMembersRequest.

        Filter to apply to members

        :param filter_conditions: The filter_conditions of this QueryMembersRequest.
        :type filter_conditions: Dict[str, object]
        """
        if filter_conditions is None:
            raise ValueError("Invalid value for `filter_conditions`, must not be `None`")

        self._filter_conditions = filter_conditions

    @property
    def id(self):
        """Gets the id of this QueryMembersRequest.

        Channel ID to interact with

        :return: The id of this QueryMembersRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QueryMembersRequest.

        Channel ID to interact with

        :param id: The id of this QueryMembersRequest.
        :type id: str
        """
        if id is not None and len(id) > 64:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `64`")

        self._id = id

    @property
    def limit(self):
        """Gets the limit of this QueryMembersRequest.

        Number of records to return

        :return: The limit of this QueryMembersRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this QueryMembersRequest.

        Number of records to return

        :param limit: The limit of this QueryMembersRequest.
        :type limit: int
        """
        if limit is not None and limit > 300:
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `300`")
        if limit is not None and limit < 0:
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `0`")

        self._limit = limit

    @property
    def members(self):
        """Gets the members of this QueryMembersRequest.

        List of members to search in distinct channels

        :return: The members of this QueryMembersRequest.
        :rtype: List[ChannelMember]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this QueryMembersRequest.

        List of members to search in distinct channels

        :param members: The members of this QueryMembersRequest.
        :type members: List[ChannelMember]
        """

        self._members = members

    @property
    def offset(self):
        """Gets the offset of this QueryMembersRequest.

        Number of records to offset

        :return: The offset of this QueryMembersRequest.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this QueryMembersRequest.

        Number of records to offset

        :param offset: The offset of this QueryMembersRequest.
        :type offset: int
        """
        if offset is not None and offset > 10000:
            raise ValueError("Invalid value for `offset`, must be a value less than or equal to `10000`")

        self._offset = offset

    @property
    def sort(self):
        """Gets the sort of this QueryMembersRequest.

        Array of sort parameters

        :return: The sort of this QueryMembersRequest.
        :rtype: List[SortParam]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this QueryMembersRequest.

        Array of sort parameters

        :param sort: The sort of this QueryMembersRequest.
        :type sort: List[SortParam]
        """

        self._sort = sort

    @property
    def type(self):
        """Gets the type of this QueryMembersRequest.

        Channel type to interact with

        :return: The type of this QueryMembersRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this QueryMembersRequest.

        Channel type to interact with

        :param type: The type of this QueryMembersRequest.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        if type is not None and len(type) > 64:
            raise ValueError("Invalid value for `type`, length must be less than or equal to `64`")

        self._type = type

    @property
    def user(self):
        """Gets the user of this QueryMembersRequest.


        :return: The user of this QueryMembersRequest.
        :rtype: UserObject
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this QueryMembersRequest.


        :param user: The user of this QueryMembersRequest.
        :type user: UserObject
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this QueryMembersRequest.


        :return: The user_id of this QueryMembersRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this QueryMembersRequest.


        :param user_id: The user_id of this QueryMembersRequest.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def user_id_gt(self):
        """Gets the user_id_gt of this QueryMembersRequest.


        :return: The user_id_gt of this QueryMembersRequest.
        :rtype: str
        """
        return self._user_id_gt

    @user_id_gt.setter
    def user_id_gt(self, user_id_gt):
        """Sets the user_id_gt of this QueryMembersRequest.


        :param user_id_gt: The user_id_gt of this QueryMembersRequest.
        :type user_id_gt: str
        """

        self._user_id_gt = user_id_gt

    @property
    def user_id_gte(self):
        """Gets the user_id_gte of this QueryMembersRequest.


        :return: The user_id_gte of this QueryMembersRequest.
        :rtype: str
        """
        return self._user_id_gte

    @user_id_gte.setter
    def user_id_gte(self, user_id_gte):
        """Sets the user_id_gte of this QueryMembersRequest.


        :param user_id_gte: The user_id_gte of this QueryMembersRequest.
        :type user_id_gte: str
        """

        self._user_id_gte = user_id_gte

    @property
    def user_id_lt(self):
        """Gets the user_id_lt of this QueryMembersRequest.


        :return: The user_id_lt of this QueryMembersRequest.
        :rtype: str
        """
        return self._user_id_lt

    @user_id_lt.setter
    def user_id_lt(self, user_id_lt):
        """Sets the user_id_lt of this QueryMembersRequest.


        :param user_id_lt: The user_id_lt of this QueryMembersRequest.
        :type user_id_lt: str
        """

        self._user_id_lt = user_id_lt

    @property
    def user_id_lte(self):
        """Gets the user_id_lte of this QueryMembersRequest.


        :return: The user_id_lte of this QueryMembersRequest.
        :rtype: str
        """
        return self._user_id_lte

    @user_id_lte.setter
    def user_id_lte(self, user_id_lte):
        """Sets the user_id_lte of this QueryMembersRequest.


        :param user_id_lte: The user_id_lte of this QueryMembersRequest.
        :type user_id_lte: str
        """

        self._user_id_lte = user_id_lte
