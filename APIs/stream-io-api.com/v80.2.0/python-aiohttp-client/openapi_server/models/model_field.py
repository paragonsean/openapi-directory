# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModelField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, short: bool=None, title: str=None, value: str=None):
        """ModelField - a model defined in OpenAPI

        :param short: The short of this ModelField.
        :param title: The title of this ModelField.
        :param value: The value of this ModelField.
        """
        self.openapi_types = {
            'short': bool,
            'title': str,
            'value': str
        }

        self.attribute_map = {
            'short': 'short',
            'title': 'title',
            'value': 'value'
        }

        self._short = short
        self._title = title
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Field of this ModelField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def short(self):
        """Gets the short of this ModelField.


        :return: The short of this ModelField.
        :rtype: bool
        """
        return self._short

    @short.setter
    def short(self, short):
        """Sets the short of this ModelField.


        :param short: The short of this ModelField.
        :type short: bool
        """
        if short is None:
            raise ValueError("Invalid value for `short`, must not be `None`")

        self._short = short

    @property
    def title(self):
        """Gets the title of this ModelField.


        :return: The title of this ModelField.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ModelField.


        :param title: The title of this ModelField.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def value(self):
        """Gets the value of this ModelField.


        :return: The value of this ModelField.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ModelField.


        :param value: The value of this ModelField.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
