# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_object_request import UserObjectRequest
from openapi_server import util


class MuteChannelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_cids: List[str]=None, expiration: int=None, user: UserObjectRequest=None, user_id: str=None):
        """MuteChannelRequest - a model defined in OpenAPI

        :param channel_cids: The channel_cids of this MuteChannelRequest.
        :param expiration: The expiration of this MuteChannelRequest.
        :param user: The user of this MuteChannelRequest.
        :param user_id: The user_id of this MuteChannelRequest.
        """
        self.openapi_types = {
            'channel_cids': List[str],
            'expiration': int,
            'user': UserObjectRequest,
            'user_id': str
        }

        self.attribute_map = {
            'channel_cids': 'channel_cids',
            'expiration': 'expiration',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._channel_cids = channel_cids
        self._expiration = expiration
        self._user = user
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MuteChannelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MuteChannelRequest of this MuteChannelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_cids(self):
        """Gets the channel_cids of this MuteChannelRequest.

        Channel CIDs to mute (if multiple channels)

        :return: The channel_cids of this MuteChannelRequest.
        :rtype: List[str]
        """
        return self._channel_cids

    @channel_cids.setter
    def channel_cids(self, channel_cids):
        """Sets the channel_cids of this MuteChannelRequest.

        Channel CIDs to mute (if multiple channels)

        :param channel_cids: The channel_cids of this MuteChannelRequest.
        :type channel_cids: List[str]
        """
        if channel_cids is None:
            raise ValueError("Invalid value for `channel_cids`, must not be `None`")

        self._channel_cids = channel_cids

    @property
    def expiration(self):
        """Gets the expiration of this MuteChannelRequest.

        Duration of mute in milliseconds

        :return: The expiration of this MuteChannelRequest.
        :rtype: int
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this MuteChannelRequest.

        Duration of mute in milliseconds

        :param expiration: The expiration of this MuteChannelRequest.
        :type expiration: int
        """

        self._expiration = expiration

    @property
    def user(self):
        """Gets the user of this MuteChannelRequest.


        :return: The user of this MuteChannelRequest.
        :rtype: UserObjectRequest
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this MuteChannelRequest.


        :param user: The user of this MuteChannelRequest.
        :type user: UserObjectRequest
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this MuteChannelRequest.


        :return: The user_id of this MuteChannelRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this MuteChannelRequest.


        :param user_id: The user_id of this MuteChannelRequest.
        :type user_id: str
        """

        self._user_id = user_id
