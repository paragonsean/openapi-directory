# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, push_provider: str=None, push_provider_name: str=None):
        """DeviceFields - a model defined in OpenAPI

        :param id: The id of this DeviceFields.
        :param push_provider: The push_provider of this DeviceFields.
        :param push_provider_name: The push_provider_name of this DeviceFields.
        """
        self.openapi_types = {
            'id': str,
            'push_provider': str,
            'push_provider_name': str
        }

        self.attribute_map = {
            'id': 'id',
            'push_provider': 'push_provider',
            'push_provider_name': 'push_provider_name'
        }

        self._id = id
        self._push_provider = push_provider
        self._push_provider_name = push_provider_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceFields of this DeviceFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this DeviceFields.

        Device ID

        :return: The id of this DeviceFields.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceFields.

        Device ID

        :param id: The id of this DeviceFields.
        :type id: str
        """

        self._id = id

    @property
    def push_provider(self):
        """Gets the push_provider of this DeviceFields.


        :return: The push_provider of this DeviceFields.
        :rtype: str
        """
        return self._push_provider

    @push_provider.setter
    def push_provider(self, push_provider):
        """Sets the push_provider of this DeviceFields.


        :param push_provider: The push_provider of this DeviceFields.
        :type push_provider: str
        """
        allowed_values = ["firebase", "apn", "huawei", "xiaomi"]  # noqa: E501
        if push_provider not in allowed_values:
            raise ValueError(
                "Invalid value for `push_provider` ({0}), must be one of {1}"
                .format(push_provider, allowed_values)
            )

        self._push_provider = push_provider

    @property
    def push_provider_name(self):
        """Gets the push_provider_name of this DeviceFields.

        Name of the push provider configuration

        :return: The push_provider_name of this DeviceFields.
        :rtype: str
        """
        return self._push_provider_name

    @push_provider_name.setter
    def push_provider_name(self, push_provider_name):
        """Sets the push_provider_name of this DeviceFields.

        Name of the push provider configuration

        :param push_provider_name: The push_provider_name of this DeviceFields.
        :type push_provider_name: str
        """

        self._push_provider_name = push_provider_name
