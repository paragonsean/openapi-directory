# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_object import UserObject
from openapi_server import util


class UpdateUsersResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: str=None, users: Dict[str, UserObject]=None):
        """UpdateUsersResponse - a model defined in OpenAPI

        :param duration: The duration of this UpdateUsersResponse.
        :param users: The users of this UpdateUsersResponse.
        """
        self.openapi_types = {
            'duration': str,
            'users': Dict[str, UserObject]
        }

        self.attribute_map = {
            'duration': 'duration',
            'users': 'users'
        }

        self._duration = duration
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateUsersResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateUsersResponse of this UpdateUsersResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this UpdateUsersResponse.


        :return: The duration of this UpdateUsersResponse.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this UpdateUsersResponse.


        :param duration: The duration of this UpdateUsersResponse.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def users(self):
        """Gets the users of this UpdateUsersResponse.

        Object containing users

        :return: The users of this UpdateUsersResponse.
        :rtype: Dict[str, UserObject]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this UpdateUsersResponse.

        Object containing users

        :param users: The users of this UpdateUsersResponse.
        :type users: Dict[str, UserObject]
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")

        self._users = users
