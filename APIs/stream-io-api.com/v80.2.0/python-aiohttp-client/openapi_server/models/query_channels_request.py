# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sort_param_request import SortParamRequest
from openapi_server.models.user_object_request import UserObjectRequest
from openapi_server import util


class QueryChannelsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, connection_id: str=None, filter_conditions: Dict[str, object]=None, limit: int=None, member_limit: int=None, message_limit: int=None, offset: int=None, presence: bool=None, sort: List[SortParamRequest]=None, state: bool=None, user: UserObjectRequest=None, user_id: str=None, watch: bool=None):
        """QueryChannelsRequest - a model defined in OpenAPI

        :param client_id: The client_id of this QueryChannelsRequest.
        :param connection_id: The connection_id of this QueryChannelsRequest.
        :param filter_conditions: The filter_conditions of this QueryChannelsRequest.
        :param limit: The limit of this QueryChannelsRequest.
        :param member_limit: The member_limit of this QueryChannelsRequest.
        :param message_limit: The message_limit of this QueryChannelsRequest.
        :param offset: The offset of this QueryChannelsRequest.
        :param presence: The presence of this QueryChannelsRequest.
        :param sort: The sort of this QueryChannelsRequest.
        :param state: The state of this QueryChannelsRequest.
        :param user: The user of this QueryChannelsRequest.
        :param user_id: The user_id of this QueryChannelsRequest.
        :param watch: The watch of this QueryChannelsRequest.
        """
        self.openapi_types = {
            'client_id': str,
            'connection_id': str,
            'filter_conditions': Dict[str, object],
            'limit': int,
            'member_limit': int,
            'message_limit': int,
            'offset': int,
            'presence': bool,
            'sort': List[SortParamRequest],
            'state': bool,
            'user': UserObjectRequest,
            'user_id': str,
            'watch': bool
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'connection_id': 'connection_id',
            'filter_conditions': 'filter_conditions',
            'limit': 'limit',
            'member_limit': 'member_limit',
            'message_limit': 'message_limit',
            'offset': 'offset',
            'presence': 'presence',
            'sort': 'sort',
            'state': 'state',
            'user': 'user',
            'user_id': 'user_id',
            'watch': 'watch'
        }

        self._client_id = client_id
        self._connection_id = connection_id
        self._filter_conditions = filter_conditions
        self._limit = limit
        self._member_limit = member_limit
        self._message_limit = message_limit
        self._offset = offset
        self._presence = presence
        self._sort = sort
        self._state = state
        self._user = user
        self._user_id = user_id
        self._watch = watch

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryChannelsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryChannelsRequest of this QueryChannelsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this QueryChannelsRequest.


        :return: The client_id of this QueryChannelsRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this QueryChannelsRequest.


        :param client_id: The client_id of this QueryChannelsRequest.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def connection_id(self):
        """Gets the connection_id of this QueryChannelsRequest.


        :return: The connection_id of this QueryChannelsRequest.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this QueryChannelsRequest.


        :param connection_id: The connection_id of this QueryChannelsRequest.
        :type connection_id: str
        """

        self._connection_id = connection_id

    @property
    def filter_conditions(self):
        """Gets the filter_conditions of this QueryChannelsRequest.


        :return: The filter_conditions of this QueryChannelsRequest.
        :rtype: Dict[str, object]
        """
        return self._filter_conditions

    @filter_conditions.setter
    def filter_conditions(self, filter_conditions):
        """Sets the filter_conditions of this QueryChannelsRequest.


        :param filter_conditions: The filter_conditions of this QueryChannelsRequest.
        :type filter_conditions: Dict[str, object]
        """

        self._filter_conditions = filter_conditions

    @property
    def limit(self):
        """Gets the limit of this QueryChannelsRequest.

        Number of channels to limit

        :return: The limit of this QueryChannelsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this QueryChannelsRequest.

        Number of channels to limit

        :param limit: The limit of this QueryChannelsRequest.
        :type limit: int
        """

        self._limit = limit

    @property
    def member_limit(self):
        """Gets the member_limit of this QueryChannelsRequest.

        Number of members to limit

        :return: The member_limit of this QueryChannelsRequest.
        :rtype: int
        """
        return self._member_limit

    @member_limit.setter
    def member_limit(self, member_limit):
        """Sets the member_limit of this QueryChannelsRequest.

        Number of members to limit

        :param member_limit: The member_limit of this QueryChannelsRequest.
        :type member_limit: int
        """
        if member_limit is not None and member_limit > 100:
            raise ValueError("Invalid value for `member_limit`, must be a value less than or equal to `100`")
        if member_limit is not None and member_limit < 0:
            raise ValueError("Invalid value for `member_limit`, must be a value greater than or equal to `0`")

        self._member_limit = member_limit

    @property
    def message_limit(self):
        """Gets the message_limit of this QueryChannelsRequest.

        Number of messages to limit

        :return: The message_limit of this QueryChannelsRequest.
        :rtype: int
        """
        return self._message_limit

    @message_limit.setter
    def message_limit(self, message_limit):
        """Sets the message_limit of this QueryChannelsRequest.

        Number of messages to limit

        :param message_limit: The message_limit of this QueryChannelsRequest.
        :type message_limit: int
        """
        if message_limit is not None and message_limit < 0:
            raise ValueError("Invalid value for `message_limit`, must be a value greater than or equal to `0`")

        self._message_limit = message_limit

    @property
    def offset(self):
        """Gets the offset of this QueryChannelsRequest.

        Channel pagination offset

        :return: The offset of this QueryChannelsRequest.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this QueryChannelsRequest.

        Channel pagination offset

        :param offset: The offset of this QueryChannelsRequest.
        :type offset: int
        """

        self._offset = offset

    @property
    def presence(self):
        """Gets the presence of this QueryChannelsRequest.


        :return: The presence of this QueryChannelsRequest.
        :rtype: bool
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """Sets the presence of this QueryChannelsRequest.


        :param presence: The presence of this QueryChannelsRequest.
        :type presence: bool
        """

        self._presence = presence

    @property
    def sort(self):
        """Gets the sort of this QueryChannelsRequest.

        List of sort parameters

        :return: The sort of this QueryChannelsRequest.
        :rtype: List[SortParamRequest]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this QueryChannelsRequest.

        List of sort parameters

        :param sort: The sort of this QueryChannelsRequest.
        :type sort: List[SortParamRequest]
        """
        if sort is None:
            raise ValueError("Invalid value for `sort`, must not be `None`")

        self._sort = sort

    @property
    def state(self):
        """Gets the state of this QueryChannelsRequest.

        Whether to update channel state or not

        :return: The state of this QueryChannelsRequest.
        :rtype: bool
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this QueryChannelsRequest.

        Whether to update channel state or not

        :param state: The state of this QueryChannelsRequest.
        :type state: bool
        """

        self._state = state

    @property
    def user(self):
        """Gets the user of this QueryChannelsRequest.


        :return: The user of this QueryChannelsRequest.
        :rtype: UserObjectRequest
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this QueryChannelsRequest.


        :param user: The user of this QueryChannelsRequest.
        :type user: UserObjectRequest
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this QueryChannelsRequest.


        :return: The user_id of this QueryChannelsRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this QueryChannelsRequest.


        :param user_id: The user_id of this QueryChannelsRequest.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def watch(self):
        """Gets the watch of this QueryChannelsRequest.

        Whether to start watching found channels or not

        :return: The watch of this QueryChannelsRequest.
        :rtype: bool
        """
        return self._watch

    @watch.setter
    def watch(self, watch):
        """Sets the watch of this QueryChannelsRequest.

        Whether to start watching found channels or not

        :param watch: The watch of this QueryChannelsRequest.
        :type watch: bool
        """

        self._watch = watch
