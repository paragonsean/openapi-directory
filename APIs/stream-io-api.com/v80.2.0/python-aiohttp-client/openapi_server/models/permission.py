# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Permission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, condition: Dict[str, object]=None, custom: bool=None, description: str=None, id: str=None, level: str=None, name: str=None, owner: bool=None, same_team: bool=None, tags: List[str]=None):
        """Permission - a model defined in OpenAPI

        :param action: The action of this Permission.
        :param condition: The condition of this Permission.
        :param custom: The custom of this Permission.
        :param description: The description of this Permission.
        :param id: The id of this Permission.
        :param level: The level of this Permission.
        :param name: The name of this Permission.
        :param owner: The owner of this Permission.
        :param same_team: The same_team of this Permission.
        :param tags: The tags of this Permission.
        """
        self.openapi_types = {
            'action': str,
            'condition': Dict[str, object],
            'custom': bool,
            'description': str,
            'id': str,
            'level': str,
            'name': str,
            'owner': bool,
            'same_team': bool,
            'tags': List[str]
        }

        self.attribute_map = {
            'action': 'action',
            'condition': 'condition',
            'custom': 'custom',
            'description': 'description',
            'id': 'id',
            'level': 'level',
            'name': 'name',
            'owner': 'owner',
            'same_team': 'same_team',
            'tags': 'tags'
        }

        self._action = action
        self._condition = condition
        self._custom = custom
        self._description = description
        self._id = id
        self._level = level
        self._name = name
        self._owner = owner
        self._same_team = same_team
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Permission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Permission of this Permission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this Permission.

        Action name this permission is for (e.g. SendMessage)

        :return: The action of this Permission.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Permission.

        Action name this permission is for (e.g. SendMessage)

        :param action: The action of this Permission.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def condition(self):
        """Gets the condition of this Permission.

        MongoDB style condition which decides whether or not the permission is granted

        :return: The condition of this Permission.
        :rtype: Dict[str, object]
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this Permission.

        MongoDB style condition which decides whether or not the permission is granted

        :param condition: The condition of this Permission.
        :type condition: Dict[str, object]
        """

        self._condition = condition

    @property
    def custom(self):
        """Gets the custom of this Permission.

        Whether this is a custom permission or built-in

        :return: The custom of this Permission.
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this Permission.

        Whether this is a custom permission or built-in

        :param custom: The custom of this Permission.
        :type custom: bool
        """
        if custom is None:
            raise ValueError("Invalid value for `custom`, must not be `None`")

        self._custom = custom

    @property
    def description(self):
        """Gets the description of this Permission.

        Description of the permission

        :return: The description of this Permission.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Permission.

        Description of the permission

        :param description: The description of this Permission.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this Permission.

        Unique permission ID

        :return: The id of this Permission.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Permission.

        Unique permission ID

        :param id: The id of this Permission.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def level(self):
        """Gets the level of this Permission.

        Level at which permission could be applied (app or channel)

        :return: The level of this Permission.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this Permission.

        Level at which permission could be applied (app or channel)

        :param level: The level of this Permission.
        :type level: str
        """
        allowed_values = ["app", "channel"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def name(self):
        """Gets the name of this Permission.

        Name of the permission

        :return: The name of this Permission.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Permission.

        Name of the permission

        :param name: The name of this Permission.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this Permission.

        Whether this permission applies to resource owner or not

        :return: The owner of this Permission.
        :rtype: bool
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Permission.

        Whether this permission applies to resource owner or not

        :param owner: The owner of this Permission.
        :type owner: bool
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")

        self._owner = owner

    @property
    def same_team(self):
        """Gets the same_team of this Permission.

        Whether this permission applies to teammates (multi-tenancy mode only)

        :return: The same_team of this Permission.
        :rtype: bool
        """
        return self._same_team

    @same_team.setter
    def same_team(self, same_team):
        """Sets the same_team of this Permission.

        Whether this permission applies to teammates (multi-tenancy mode only)

        :param same_team: The same_team of this Permission.
        :type same_team: bool
        """
        if same_team is None:
            raise ValueError("Invalid value for `same_team`, must not be `None`")

        self._same_team = same_team

    @property
    def tags(self):
        """Gets the tags of this Permission.

        List of tags of the permission

        :return: The tags of this Permission.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Permission.

        List of tags of the permission

        :param tags: The tags of this Permission.
        :type tags: List[str]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")

        self._tags = tags
