# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_request import PolicyRequest
from openapi_server import util


class CreateChannelTypeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automod: str=None, automod_behavior: str=None, blocklist: str=None, blocklist_behavior: str=None, commands: List[str]=None, connect_events: bool=None, custom_events: bool=None, grants: Dict[str, List[str]]=None, max_message_length: int=None, message_retention: str=None, mutes: bool=None, name: str=None, permissions: List[PolicyRequest]=None, push_notifications: bool=None, reactions: bool=None, read_events: bool=None, replies: bool=None, search: bool=None, typing_events: bool=None, uploads: bool=None, url_enrichment: bool=None):
        """CreateChannelTypeRequest - a model defined in OpenAPI

        :param automod: The automod of this CreateChannelTypeRequest.
        :param automod_behavior: The automod_behavior of this CreateChannelTypeRequest.
        :param blocklist: The blocklist of this CreateChannelTypeRequest.
        :param blocklist_behavior: The blocklist_behavior of this CreateChannelTypeRequest.
        :param commands: The commands of this CreateChannelTypeRequest.
        :param connect_events: The connect_events of this CreateChannelTypeRequest.
        :param custom_events: The custom_events of this CreateChannelTypeRequest.
        :param grants: The grants of this CreateChannelTypeRequest.
        :param max_message_length: The max_message_length of this CreateChannelTypeRequest.
        :param message_retention: The message_retention of this CreateChannelTypeRequest.
        :param mutes: The mutes of this CreateChannelTypeRequest.
        :param name: The name of this CreateChannelTypeRequest.
        :param permissions: The permissions of this CreateChannelTypeRequest.
        :param push_notifications: The push_notifications of this CreateChannelTypeRequest.
        :param reactions: The reactions of this CreateChannelTypeRequest.
        :param read_events: The read_events of this CreateChannelTypeRequest.
        :param replies: The replies of this CreateChannelTypeRequest.
        :param search: The search of this CreateChannelTypeRequest.
        :param typing_events: The typing_events of this CreateChannelTypeRequest.
        :param uploads: The uploads of this CreateChannelTypeRequest.
        :param url_enrichment: The url_enrichment of this CreateChannelTypeRequest.
        """
        self.openapi_types = {
            'automod': str,
            'automod_behavior': str,
            'blocklist': str,
            'blocklist_behavior': str,
            'commands': List[str],
            'connect_events': bool,
            'custom_events': bool,
            'grants': Dict[str, List[str]],
            'max_message_length': int,
            'message_retention': str,
            'mutes': bool,
            'name': str,
            'permissions': List[PolicyRequest],
            'push_notifications': bool,
            'reactions': bool,
            'read_events': bool,
            'replies': bool,
            'search': bool,
            'typing_events': bool,
            'uploads': bool,
            'url_enrichment': bool
        }

        self.attribute_map = {
            'automod': 'automod',
            'automod_behavior': 'automod_behavior',
            'blocklist': 'blocklist',
            'blocklist_behavior': 'blocklist_behavior',
            'commands': 'commands',
            'connect_events': 'connect_events',
            'custom_events': 'custom_events',
            'grants': 'grants',
            'max_message_length': 'max_message_length',
            'message_retention': 'message_retention',
            'mutes': 'mutes',
            'name': 'name',
            'permissions': 'permissions',
            'push_notifications': 'push_notifications',
            'reactions': 'reactions',
            'read_events': 'read_events',
            'replies': 'replies',
            'search': 'search',
            'typing_events': 'typing_events',
            'uploads': 'uploads',
            'url_enrichment': 'url_enrichment'
        }

        self._automod = automod
        self._automod_behavior = automod_behavior
        self._blocklist = blocklist
        self._blocklist_behavior = blocklist_behavior
        self._commands = commands
        self._connect_events = connect_events
        self._custom_events = custom_events
        self._grants = grants
        self._max_message_length = max_message_length
        self._message_retention = message_retention
        self._mutes = mutes
        self._name = name
        self._permissions = permissions
        self._push_notifications = push_notifications
        self._reactions = reactions
        self._read_events = read_events
        self._replies = replies
        self._search = search
        self._typing_events = typing_events
        self._uploads = uploads
        self._url_enrichment = url_enrichment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateChannelTypeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateChannelTypeRequest of this CreateChannelTypeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automod(self):
        """Gets the automod of this CreateChannelTypeRequest.

        Enables automatic message moderation

        :return: The automod of this CreateChannelTypeRequest.
        :rtype: str
        """
        return self._automod

    @automod.setter
    def automod(self, automod):
        """Sets the automod of this CreateChannelTypeRequest.

        Enables automatic message moderation

        :param automod: The automod of this CreateChannelTypeRequest.
        :type automod: str
        """
        allowed_values = ["disabled", "simple", "AI"]  # noqa: E501
        if automod not in allowed_values:
            raise ValueError(
                "Invalid value for `automod` ({0}), must be one of {1}"
                .format(automod, allowed_values)
            )

        self._automod = automod

    @property
    def automod_behavior(self):
        """Gets the automod_behavior of this CreateChannelTypeRequest.

        Sets behavior of automatic moderation

        :return: The automod_behavior of this CreateChannelTypeRequest.
        :rtype: str
        """
        return self._automod_behavior

    @automod_behavior.setter
    def automod_behavior(self, automod_behavior):
        """Sets the automod_behavior of this CreateChannelTypeRequest.

        Sets behavior of automatic moderation

        :param automod_behavior: The automod_behavior of this CreateChannelTypeRequest.
        :type automod_behavior: str
        """
        allowed_values = ["flag", "block"]  # noqa: E501
        if automod_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `automod_behavior` ({0}), must be one of {1}"
                .format(automod_behavior, allowed_values)
            )

        self._automod_behavior = automod_behavior

    @property
    def blocklist(self):
        """Gets the blocklist of this CreateChannelTypeRequest.

        Name of the blocklist to use

        :return: The blocklist of this CreateChannelTypeRequest.
        :rtype: str
        """
        return self._blocklist

    @blocklist.setter
    def blocklist(self, blocklist):
        """Sets the blocklist of this CreateChannelTypeRequest.

        Name of the blocklist to use

        :param blocklist: The blocklist of this CreateChannelTypeRequest.
        :type blocklist: str
        """

        self._blocklist = blocklist

    @property
    def blocklist_behavior(self):
        """Gets the blocklist_behavior of this CreateChannelTypeRequest.

        Sets behavior of blocklist

        :return: The blocklist_behavior of this CreateChannelTypeRequest.
        :rtype: str
        """
        return self._blocklist_behavior

    @blocklist_behavior.setter
    def blocklist_behavior(self, blocklist_behavior):
        """Sets the blocklist_behavior of this CreateChannelTypeRequest.

        Sets behavior of blocklist

        :param blocklist_behavior: The blocklist_behavior of this CreateChannelTypeRequest.
        :type blocklist_behavior: str
        """
        allowed_values = ["flag", "block"]  # noqa: E501
        if blocklist_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `blocklist_behavior` ({0}), must be one of {1}"
                .format(blocklist_behavior, allowed_values)
            )

        self._blocklist_behavior = blocklist_behavior

    @property
    def commands(self):
        """Gets the commands of this CreateChannelTypeRequest.

        List of commands that channel supports

        :return: The commands of this CreateChannelTypeRequest.
        :rtype: List[str]
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """Sets the commands of this CreateChannelTypeRequest.

        List of commands that channel supports

        :param commands: The commands of this CreateChannelTypeRequest.
        :type commands: List[str]
        """

        self._commands = commands

    @property
    def connect_events(self):
        """Gets the connect_events of this CreateChannelTypeRequest.

        Connect events support

        :return: The connect_events of this CreateChannelTypeRequest.
        :rtype: bool
        """
        return self._connect_events

    @connect_events.setter
    def connect_events(self, connect_events):
        """Sets the connect_events of this CreateChannelTypeRequest.

        Connect events support

        :param connect_events: The connect_events of this CreateChannelTypeRequest.
        :type connect_events: bool
        """

        self._connect_events = connect_events

    @property
    def custom_events(self):
        """Gets the custom_events of this CreateChannelTypeRequest.

        Enables custom events

        :return: The custom_events of this CreateChannelTypeRequest.
        :rtype: bool
        """
        return self._custom_events

    @custom_events.setter
    def custom_events(self, custom_events):
        """Sets the custom_events of this CreateChannelTypeRequest.

        Enables custom events

        :param custom_events: The custom_events of this CreateChannelTypeRequest.
        :type custom_events: bool
        """

        self._custom_events = custom_events

    @property
    def grants(self):
        """Gets the grants of this CreateChannelTypeRequest.


        :return: The grants of this CreateChannelTypeRequest.
        :rtype: Dict[str, List[str]]
        """
        return self._grants

    @grants.setter
    def grants(self, grants):
        """Sets the grants of this CreateChannelTypeRequest.


        :param grants: The grants of this CreateChannelTypeRequest.
        :type grants: Dict[str, List[str]]
        """

        self._grants = grants

    @property
    def max_message_length(self):
        """Gets the max_message_length of this CreateChannelTypeRequest.

        Number of maximum message characters

        :return: The max_message_length of this CreateChannelTypeRequest.
        :rtype: int
        """
        return self._max_message_length

    @max_message_length.setter
    def max_message_length(self, max_message_length):
        """Sets the max_message_length of this CreateChannelTypeRequest.

        Number of maximum message characters

        :param max_message_length: The max_message_length of this CreateChannelTypeRequest.
        :type max_message_length: int
        """

        self._max_message_length = max_message_length

    @property
    def message_retention(self):
        """Gets the message_retention of this CreateChannelTypeRequest.

        Number of days to keep messages. 'infinite' disables retention

        :return: The message_retention of this CreateChannelTypeRequest.
        :rtype: str
        """
        return self._message_retention

    @message_retention.setter
    def message_retention(self, message_retention):
        """Sets the message_retention of this CreateChannelTypeRequest.

        Number of days to keep messages. 'infinite' disables retention

        :param message_retention: The message_retention of this CreateChannelTypeRequest.
        :type message_retention: str
        """

        self._message_retention = message_retention

    @property
    def mutes(self):
        """Gets the mutes of this CreateChannelTypeRequest.

        Enables mutes

        :return: The mutes of this CreateChannelTypeRequest.
        :rtype: bool
        """
        return self._mutes

    @mutes.setter
    def mutes(self, mutes):
        """Sets the mutes of this CreateChannelTypeRequest.

        Enables mutes

        :param mutes: The mutes of this CreateChannelTypeRequest.
        :type mutes: bool
        """

        self._mutes = mutes

    @property
    def name(self):
        """Gets the name of this CreateChannelTypeRequest.

        Channel type name

        :return: The name of this CreateChannelTypeRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateChannelTypeRequest.

        Channel type name

        :param name: The name of this CreateChannelTypeRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def permissions(self):
        """Gets the permissions of this CreateChannelTypeRequest.

        List of permissions for the channel type

        :return: The permissions of this CreateChannelTypeRequest.
        :rtype: List[PolicyRequest]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this CreateChannelTypeRequest.

        List of permissions for the channel type

        :param permissions: The permissions of this CreateChannelTypeRequest.
        :type permissions: List[PolicyRequest]
        """

        self._permissions = permissions

    @property
    def push_notifications(self):
        """Gets the push_notifications of this CreateChannelTypeRequest.

        Enables push notifications

        :return: The push_notifications of this CreateChannelTypeRequest.
        :rtype: bool
        """
        return self._push_notifications

    @push_notifications.setter
    def push_notifications(self, push_notifications):
        """Sets the push_notifications of this CreateChannelTypeRequest.

        Enables push notifications

        :param push_notifications: The push_notifications of this CreateChannelTypeRequest.
        :type push_notifications: bool
        """

        self._push_notifications = push_notifications

    @property
    def reactions(self):
        """Gets the reactions of this CreateChannelTypeRequest.

        Enables message reactions

        :return: The reactions of this CreateChannelTypeRequest.
        :rtype: bool
        """
        return self._reactions

    @reactions.setter
    def reactions(self, reactions):
        """Sets the reactions of this CreateChannelTypeRequest.

        Enables message reactions

        :param reactions: The reactions of this CreateChannelTypeRequest.
        :type reactions: bool
        """

        self._reactions = reactions

    @property
    def read_events(self):
        """Gets the read_events of this CreateChannelTypeRequest.

        Read events support

        :return: The read_events of this CreateChannelTypeRequest.
        :rtype: bool
        """
        return self._read_events

    @read_events.setter
    def read_events(self, read_events):
        """Sets the read_events of this CreateChannelTypeRequest.

        Read events support

        :param read_events: The read_events of this CreateChannelTypeRequest.
        :type read_events: bool
        """

        self._read_events = read_events

    @property
    def replies(self):
        """Gets the replies of this CreateChannelTypeRequest.

        Enables message replies (threads)

        :return: The replies of this CreateChannelTypeRequest.
        :rtype: bool
        """
        return self._replies

    @replies.setter
    def replies(self, replies):
        """Sets the replies of this CreateChannelTypeRequest.

        Enables message replies (threads)

        :param replies: The replies of this CreateChannelTypeRequest.
        :type replies: bool
        """

        self._replies = replies

    @property
    def search(self):
        """Gets the search of this CreateChannelTypeRequest.

        Enables message search

        :return: The search of this CreateChannelTypeRequest.
        :rtype: bool
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this CreateChannelTypeRequest.

        Enables message search

        :param search: The search of this CreateChannelTypeRequest.
        :type search: bool
        """

        self._search = search

    @property
    def typing_events(self):
        """Gets the typing_events of this CreateChannelTypeRequest.

        Typing events support

        :return: The typing_events of this CreateChannelTypeRequest.
        :rtype: bool
        """
        return self._typing_events

    @typing_events.setter
    def typing_events(self, typing_events):
        """Sets the typing_events of this CreateChannelTypeRequest.

        Typing events support

        :param typing_events: The typing_events of this CreateChannelTypeRequest.
        :type typing_events: bool
        """

        self._typing_events = typing_events

    @property
    def uploads(self):
        """Gets the uploads of this CreateChannelTypeRequest.

        Enables file uploads

        :return: The uploads of this CreateChannelTypeRequest.
        :rtype: bool
        """
        return self._uploads

    @uploads.setter
    def uploads(self, uploads):
        """Sets the uploads of this CreateChannelTypeRequest.

        Enables file uploads

        :param uploads: The uploads of this CreateChannelTypeRequest.
        :type uploads: bool
        """

        self._uploads = uploads

    @property
    def url_enrichment(self):
        """Gets the url_enrichment of this CreateChannelTypeRequest.

        Enables URL enrichment

        :return: The url_enrichment of this CreateChannelTypeRequest.
        :rtype: bool
        """
        return self._url_enrichment

    @url_enrichment.setter
    def url_enrichment(self, url_enrichment):
        """Sets the url_enrichment of this CreateChannelTypeRequest.

        Enables URL enrichment

        :param url_enrichment: The url_enrichment of this CreateChannelTypeRequest.
        :type url_enrichment: bool
        """

        self._url_enrichment = url_enrichment
