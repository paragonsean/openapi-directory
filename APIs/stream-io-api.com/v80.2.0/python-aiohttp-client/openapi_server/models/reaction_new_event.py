# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message import Message
from openapi_server.models.reaction import Reaction
from openapi_server.models.user_object import UserObject
from openapi_server import util


class ReactionNewEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_id: str=None, channel_type: str=None, cid: str=None, created_at: datetime=None, message: Message=None, reaction: Reaction=None, team: str=None, thread_participants: List[UserObject]=None, type: str='reaction.new', user: UserObject=None):
        """ReactionNewEvent - a model defined in OpenAPI

        :param channel_id: The channel_id of this ReactionNewEvent.
        :param channel_type: The channel_type of this ReactionNewEvent.
        :param cid: The cid of this ReactionNewEvent.
        :param created_at: The created_at of this ReactionNewEvent.
        :param message: The message of this ReactionNewEvent.
        :param reaction: The reaction of this ReactionNewEvent.
        :param team: The team of this ReactionNewEvent.
        :param thread_participants: The thread_participants of this ReactionNewEvent.
        :param type: The type of this ReactionNewEvent.
        :param user: The user of this ReactionNewEvent.
        """
        self.openapi_types = {
            'channel_id': str,
            'channel_type': str,
            'cid': str,
            'created_at': datetime,
            'message': Message,
            'reaction': Reaction,
            'team': str,
            'thread_participants': List[UserObject],
            'type': str,
            'user': UserObject
        }

        self.attribute_map = {
            'channel_id': 'channel_id',
            'channel_type': 'channel_type',
            'cid': 'cid',
            'created_at': 'created_at',
            'message': 'message',
            'reaction': 'reaction',
            'team': 'team',
            'thread_participants': 'thread_participants',
            'type': 'type',
            'user': 'user'
        }

        self._channel_id = channel_id
        self._channel_type = channel_type
        self._cid = cid
        self._created_at = created_at
        self._message = message
        self._reaction = reaction
        self._team = team
        self._thread_participants = thread_participants
        self._type = type
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReactionNewEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReactionNewEvent of this ReactionNewEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_id(self):
        """Gets the channel_id of this ReactionNewEvent.


        :return: The channel_id of this ReactionNewEvent.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this ReactionNewEvent.


        :param channel_id: The channel_id of this ReactionNewEvent.
        :type channel_id: str
        """
        if channel_id is None:
            raise ValueError("Invalid value for `channel_id`, must not be `None`")

        self._channel_id = channel_id

    @property
    def channel_type(self):
        """Gets the channel_type of this ReactionNewEvent.


        :return: The channel_type of this ReactionNewEvent.
        :rtype: str
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this ReactionNewEvent.


        :param channel_type: The channel_type of this ReactionNewEvent.
        :type channel_type: str
        """
        if channel_type is None:
            raise ValueError("Invalid value for `channel_type`, must not be `None`")

        self._channel_type = channel_type

    @property
    def cid(self):
        """Gets the cid of this ReactionNewEvent.


        :return: The cid of this ReactionNewEvent.
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this ReactionNewEvent.


        :param cid: The cid of this ReactionNewEvent.
        :type cid: str
        """
        if cid is None:
            raise ValueError("Invalid value for `cid`, must not be `None`")

        self._cid = cid

    @property
    def created_at(self):
        """Gets the created_at of this ReactionNewEvent.


        :return: The created_at of this ReactionNewEvent.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ReactionNewEvent.


        :param created_at: The created_at of this ReactionNewEvent.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def message(self):
        """Gets the message of this ReactionNewEvent.


        :return: The message of this ReactionNewEvent.
        :rtype: Message
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ReactionNewEvent.


        :param message: The message of this ReactionNewEvent.
        :type message: Message
        """

        self._message = message

    @property
    def reaction(self):
        """Gets the reaction of this ReactionNewEvent.


        :return: The reaction of this ReactionNewEvent.
        :rtype: Reaction
        """
        return self._reaction

    @reaction.setter
    def reaction(self, reaction):
        """Sets the reaction of this ReactionNewEvent.


        :param reaction: The reaction of this ReactionNewEvent.
        :type reaction: Reaction
        """

        self._reaction = reaction

    @property
    def team(self):
        """Gets the team of this ReactionNewEvent.


        :return: The team of this ReactionNewEvent.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this ReactionNewEvent.


        :param team: The team of this ReactionNewEvent.
        :type team: str
        """

        self._team = team

    @property
    def thread_participants(self):
        """Gets the thread_participants of this ReactionNewEvent.


        :return: The thread_participants of this ReactionNewEvent.
        :rtype: List[UserObject]
        """
        return self._thread_participants

    @thread_participants.setter
    def thread_participants(self, thread_participants):
        """Sets the thread_participants of this ReactionNewEvent.


        :param thread_participants: The thread_participants of this ReactionNewEvent.
        :type thread_participants: List[UserObject]
        """

        self._thread_participants = thread_participants

    @property
    def type(self):
        """Gets the type of this ReactionNewEvent.


        :return: The type of this ReactionNewEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReactionNewEvent.


        :param type: The type of this ReactionNewEvent.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def user(self):
        """Gets the user of this ReactionNewEvent.


        :return: The user of this ReactionNewEvent.
        :rtype: UserObject
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ReactionNewEvent.


        :param user: The user of this ReactionNewEvent.
        :type user: UserObject
        """

        self._user = user
