# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_mute import ChannelMute
from openapi_server.models.own_user import OwnUser
from openapi_server import util


class MuteChannelResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_mute: ChannelMute=None, channel_mutes: List[ChannelMute]=None, duration: str=None, own_user: OwnUser=None):
        """MuteChannelResponse - a model defined in OpenAPI

        :param channel_mute: The channel_mute of this MuteChannelResponse.
        :param channel_mutes: The channel_mutes of this MuteChannelResponse.
        :param duration: The duration of this MuteChannelResponse.
        :param own_user: The own_user of this MuteChannelResponse.
        """
        self.openapi_types = {
            'channel_mute': ChannelMute,
            'channel_mutes': List[ChannelMute],
            'duration': str,
            'own_user': OwnUser
        }

        self.attribute_map = {
            'channel_mute': 'channel_mute',
            'channel_mutes': 'channel_mutes',
            'duration': 'duration',
            'own_user': 'own_user'
        }

        self._channel_mute = channel_mute
        self._channel_mutes = channel_mutes
        self._duration = duration
        self._own_user = own_user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MuteChannelResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MuteChannelResponse of this MuteChannelResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_mute(self):
        """Gets the channel_mute of this MuteChannelResponse.


        :return: The channel_mute of this MuteChannelResponse.
        :rtype: ChannelMute
        """
        return self._channel_mute

    @channel_mute.setter
    def channel_mute(self, channel_mute):
        """Sets the channel_mute of this MuteChannelResponse.


        :param channel_mute: The channel_mute of this MuteChannelResponse.
        :type channel_mute: ChannelMute
        """

        self._channel_mute = channel_mute

    @property
    def channel_mutes(self):
        """Gets the channel_mutes of this MuteChannelResponse.

        Object with mutes (if multiple channels were muted)

        :return: The channel_mutes of this MuteChannelResponse.
        :rtype: List[ChannelMute]
        """
        return self._channel_mutes

    @channel_mutes.setter
    def channel_mutes(self, channel_mutes):
        """Sets the channel_mutes of this MuteChannelResponse.

        Object with mutes (if multiple channels were muted)

        :param channel_mutes: The channel_mutes of this MuteChannelResponse.
        :type channel_mutes: List[ChannelMute]
        """

        self._channel_mutes = channel_mutes

    @property
    def duration(self):
        """Gets the duration of this MuteChannelResponse.


        :return: The duration of this MuteChannelResponse.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this MuteChannelResponse.


        :param duration: The duration of this MuteChannelResponse.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def own_user(self):
        """Gets the own_user of this MuteChannelResponse.


        :return: The own_user of this MuteChannelResponse.
        :rtype: OwnUser
        """
        return self._own_user

    @own_user.setter
    def own_user(self, own_user):
        """Sets the own_user of this MuteChannelResponse.


        :param own_user: The own_user of this MuteChannelResponse.
        :type own_user: OwnUser
        """

        self._own_user = own_user
