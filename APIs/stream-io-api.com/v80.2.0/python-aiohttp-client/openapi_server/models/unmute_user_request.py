# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_object_request import UserObjectRequest
from openapi_server import util


class UnmuteUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, target_id: str=None, target_ids: List[str]=None, timeout: int=None, user: UserObjectRequest=None, user_id: str=None):
        """UnmuteUserRequest - a model defined in OpenAPI

        :param target_id: The target_id of this UnmuteUserRequest.
        :param target_ids: The target_ids of this UnmuteUserRequest.
        :param timeout: The timeout of this UnmuteUserRequest.
        :param user: The user of this UnmuteUserRequest.
        :param user_id: The user_id of this UnmuteUserRequest.
        """
        self.openapi_types = {
            'target_id': str,
            'target_ids': List[str],
            'timeout': int,
            'user': UserObjectRequest,
            'user_id': str
        }

        self.attribute_map = {
            'target_id': 'target_id',
            'target_ids': 'target_ids',
            'timeout': 'timeout',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._target_id = target_id
        self._target_ids = target_ids
        self._timeout = timeout
        self._user = user
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UnmuteUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UnmuteUserRequest of this UnmuteUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def target_id(self):
        """Gets the target_id of this UnmuteUserRequest.


        :return: The target_id of this UnmuteUserRequest.
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this UnmuteUserRequest.


        :param target_id: The target_id of this UnmuteUserRequest.
        :type target_id: str
        """
        if target_id is None:
            raise ValueError("Invalid value for `target_id`, must not be `None`")

        self._target_id = target_id

    @property
    def target_ids(self):
        """Gets the target_ids of this UnmuteUserRequest.


        :return: The target_ids of this UnmuteUserRequest.
        :rtype: List[str]
        """
        return self._target_ids

    @target_ids.setter
    def target_ids(self, target_ids):
        """Sets the target_ids of this UnmuteUserRequest.


        :param target_ids: The target_ids of this UnmuteUserRequest.
        :type target_ids: List[str]
        """
        if target_ids is None:
            raise ValueError("Invalid value for `target_ids`, must not be `None`")

        self._target_ids = target_ids

    @property
    def timeout(self):
        """Gets the timeout of this UnmuteUserRequest.


        :return: The timeout of this UnmuteUserRequest.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this UnmuteUserRequest.


        :param timeout: The timeout of this UnmuteUserRequest.
        :type timeout: int
        """
        if timeout is not None and timeout < 0:
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `0`")

        self._timeout = timeout

    @property
    def user(self):
        """Gets the user of this UnmuteUserRequest.


        :return: The user of this UnmuteUserRequest.
        :rtype: UserObjectRequest
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UnmuteUserRequest.


        :param user: The user of this UnmuteUserRequest.
        :type user: UserObjectRequest
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this UnmuteUserRequest.


        :return: The user_id of this UnmuteUserRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UnmuteUserRequest.


        :param user_id: The user_id of this UnmuteUserRequest.
        :type user_id: str
        """

        self._user_id = user_id
