# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel import Channel
from openapi_server.models.message import Message
from openapi_server.models.user_object import UserObject
from openapi_server import util


class PendingMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: Channel=None, message: Message=None, metadata: Dict[str, str]=None, user: UserObject=None):
        """PendingMessage - a model defined in OpenAPI

        :param channel: The channel of this PendingMessage.
        :param message: The message of this PendingMessage.
        :param metadata: The metadata of this PendingMessage.
        :param user: The user of this PendingMessage.
        """
        self.openapi_types = {
            'channel': Channel,
            'message': Message,
            'metadata': Dict[str, str],
            'user': UserObject
        }

        self.attribute_map = {
            'channel': 'channel',
            'message': 'message',
            'metadata': 'metadata',
            'user': 'user'
        }

        self._channel = channel
        self._message = message
        self._metadata = metadata
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PendingMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PendingMessage of this PendingMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this PendingMessage.


        :return: The channel of this PendingMessage.
        :rtype: Channel
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this PendingMessage.


        :param channel: The channel of this PendingMessage.
        :type channel: Channel
        """

        self._channel = channel

    @property
    def message(self):
        """Gets the message of this PendingMessage.


        :return: The message of this PendingMessage.
        :rtype: Message
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PendingMessage.


        :param message: The message of this PendingMessage.
        :type message: Message
        """

        self._message = message

    @property
    def metadata(self):
        """Gets the metadata of this PendingMessage.

        Additional data attached to the pending message. This data is discarded once the pending message is committed.

        :return: The metadata of this PendingMessage.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PendingMessage.

        Additional data attached to the pending message. This data is discarded once the pending message is committed.

        :param metadata: The metadata of this PendingMessage.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def user(self):
        """Gets the user of this PendingMessage.


        :return: The user of this PendingMessage.
        :rtype: UserObject
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PendingMessage.


        :param user: The user of this PendingMessage.
        :type user: UserObject
        """

        self._user = user
