# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteUsersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conversations: str=None, messages: str=None, new_channel_owner_id: str=None, user: str=None, user_ids: List[str]=None):
        """DeleteUsersRequest - a model defined in OpenAPI

        :param conversations: The conversations of this DeleteUsersRequest.
        :param messages: The messages of this DeleteUsersRequest.
        :param new_channel_owner_id: The new_channel_owner_id of this DeleteUsersRequest.
        :param user: The user of this DeleteUsersRequest.
        :param user_ids: The user_ids of this DeleteUsersRequest.
        """
        self.openapi_types = {
            'conversations': str,
            'messages': str,
            'new_channel_owner_id': str,
            'user': str,
            'user_ids': List[str]
        }

        self.attribute_map = {
            'conversations': 'conversations',
            'messages': 'messages',
            'new_channel_owner_id': 'new_channel_owner_id',
            'user': 'user',
            'user_ids': 'user_ids'
        }

        self._conversations = conversations
        self._messages = messages
        self._new_channel_owner_id = new_channel_owner_id
        self._user = user
        self._user_ids = user_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteUsersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteUsersRequest of this DeleteUsersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conversations(self):
        """Gets the conversations of this DeleteUsersRequest.

        Conversation channels delete mode. Conversation channel is any channel which only has two members one of which is the user being deleted.  * null or empty string - doesn't delete any conversation channels * soft - marks all conversation channels as deleted (same effect as Delete Channels with 'hard' option disabled) * hard - deletes channel and all its data completely including messages (same effect as Delete Channels with 'hard' option enabled) 

        :return: The conversations of this DeleteUsersRequest.
        :rtype: str
        """
        return self._conversations

    @conversations.setter
    def conversations(self, conversations):
        """Sets the conversations of this DeleteUsersRequest.

        Conversation channels delete mode. Conversation channel is any channel which only has two members one of which is the user being deleted.  * null or empty string - doesn't delete any conversation channels * soft - marks all conversation channels as deleted (same effect as Delete Channels with 'hard' option disabled) * hard - deletes channel and all its data completely including messages (same effect as Delete Channels with 'hard' option enabled) 

        :param conversations: The conversations of this DeleteUsersRequest.
        :type conversations: str
        """
        allowed_values = ["soft", "hard"]  # noqa: E501
        if conversations not in allowed_values:
            raise ValueError(
                "Invalid value for `conversations` ({0}), must be one of {1}"
                .format(conversations, allowed_values)
            )

        self._conversations = conversations

    @property
    def messages(self):
        """Gets the messages of this DeleteUsersRequest.

        Message delete mode.  * null or empty string - doesn't delete user messages * soft - marks all user messages as deleted without removing any related message data * pruning - marks all user messages as deleted, nullifies message information and removes some message data such as reactions and flags * hard - deletes messages completely with all related information 

        :return: The messages of this DeleteUsersRequest.
        :rtype: str
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this DeleteUsersRequest.

        Message delete mode.  * null or empty string - doesn't delete user messages * soft - marks all user messages as deleted without removing any related message data * pruning - marks all user messages as deleted, nullifies message information and removes some message data such as reactions and flags * hard - deletes messages completely with all related information 

        :param messages: The messages of this DeleteUsersRequest.
        :type messages: str
        """
        allowed_values = ["soft", "pruning", "hard"]  # noqa: E501
        if messages not in allowed_values:
            raise ValueError(
                "Invalid value for `messages` ({0}), must be one of {1}"
                .format(messages, allowed_values)
            )

        self._messages = messages

    @property
    def new_channel_owner_id(self):
        """Gets the new_channel_owner_id of this DeleteUsersRequest.


        :return: The new_channel_owner_id of this DeleteUsersRequest.
        :rtype: str
        """
        return self._new_channel_owner_id

    @new_channel_owner_id.setter
    def new_channel_owner_id(self, new_channel_owner_id):
        """Sets the new_channel_owner_id of this DeleteUsersRequest.


        :param new_channel_owner_id: The new_channel_owner_id of this DeleteUsersRequest.
        :type new_channel_owner_id: str
        """

        self._new_channel_owner_id = new_channel_owner_id

    @property
    def user(self):
        """Gets the user of this DeleteUsersRequest.

        User delete mode.  * soft - marks user as deleted and retains all user data * pruning - marks user as deleted and nullifies user information * hard - deletes user completely. Requires 'hard' option for messages and conversations as well 

        :return: The user of this DeleteUsersRequest.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DeleteUsersRequest.

        User delete mode.  * soft - marks user as deleted and retains all user data * pruning - marks user as deleted and nullifies user information * hard - deletes user completely. Requires 'hard' option for messages and conversations as well 

        :param user: The user of this DeleteUsersRequest.
        :type user: str
        """
        allowed_values = ["soft", "pruning", "hard"]  # noqa: E501
        if user not in allowed_values:
            raise ValueError(
                "Invalid value for `user` ({0}), must be one of {1}"
                .format(user, allowed_values)
            )

        self._user = user

    @property
    def user_ids(self):
        """Gets the user_ids of this DeleteUsersRequest.

        IDs of users to delete

        :return: The user_ids of this DeleteUsersRequest.
        :rtype: List[str]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this DeleteUsersRequest.

        IDs of users to delete

        :param user_ids: The user_ids of this DeleteUsersRequest.
        :type user_ids: List[str]
        """
        if user_ids is None:
            raise ValueError("Invalid value for `user_ids`, must not be `None`")

        self._user_ids = user_ids
