# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaginationParamsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id_gt: int=None, id_gte: int=None, id_lt: int=None, id_lte: int=None, limit: int=None, offset: int=None):
        """PaginationParamsRequest - a model defined in OpenAPI

        :param id_gt: The id_gt of this PaginationParamsRequest.
        :param id_gte: The id_gte of this PaginationParamsRequest.
        :param id_lt: The id_lt of this PaginationParamsRequest.
        :param id_lte: The id_lte of this PaginationParamsRequest.
        :param limit: The limit of this PaginationParamsRequest.
        :param offset: The offset of this PaginationParamsRequest.
        """
        self.openapi_types = {
            'id_gt': int,
            'id_gte': int,
            'id_lt': int,
            'id_lte': int,
            'limit': int,
            'offset': int
        }

        self.attribute_map = {
            'id_gt': 'id_gt',
            'id_gte': 'id_gte',
            'id_lt': 'id_lt',
            'id_lte': 'id_lte',
            'limit': 'limit',
            'offset': 'offset'
        }

        self._id_gt = id_gt
        self._id_gte = id_gte
        self._id_lt = id_lt
        self._id_lte = id_lte
        self._limit = limit
        self._offset = offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaginationParamsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaginationParamsRequest of this PaginationParamsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_gt(self):
        """Gets the id_gt of this PaginationParamsRequest.


        :return: The id_gt of this PaginationParamsRequest.
        :rtype: int
        """
        return self._id_gt

    @id_gt.setter
    def id_gt(self, id_gt):
        """Sets the id_gt of this PaginationParamsRequest.


        :param id_gt: The id_gt of this PaginationParamsRequest.
        :type id_gt: int
        """

        self._id_gt = id_gt

    @property
    def id_gte(self):
        """Gets the id_gte of this PaginationParamsRequest.


        :return: The id_gte of this PaginationParamsRequest.
        :rtype: int
        """
        return self._id_gte

    @id_gte.setter
    def id_gte(self, id_gte):
        """Sets the id_gte of this PaginationParamsRequest.


        :param id_gte: The id_gte of this PaginationParamsRequest.
        :type id_gte: int
        """

        self._id_gte = id_gte

    @property
    def id_lt(self):
        """Gets the id_lt of this PaginationParamsRequest.


        :return: The id_lt of this PaginationParamsRequest.
        :rtype: int
        """
        return self._id_lt

    @id_lt.setter
    def id_lt(self, id_lt):
        """Sets the id_lt of this PaginationParamsRequest.


        :param id_lt: The id_lt of this PaginationParamsRequest.
        :type id_lt: int
        """

        self._id_lt = id_lt

    @property
    def id_lte(self):
        """Gets the id_lte of this PaginationParamsRequest.


        :return: The id_lte of this PaginationParamsRequest.
        :rtype: int
        """
        return self._id_lte

    @id_lte.setter
    def id_lte(self, id_lte):
        """Sets the id_lte of this PaginationParamsRequest.


        :param id_lte: The id_lte of this PaginationParamsRequest.
        :type id_lte: int
        """

        self._id_lte = id_lte

    @property
    def limit(self):
        """Gets the limit of this PaginationParamsRequest.


        :return: The limit of this PaginationParamsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this PaginationParamsRequest.


        :param limit: The limit of this PaginationParamsRequest.
        :type limit: int
        """
        if limit is not None and limit < 0:
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `0`")

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this PaginationParamsRequest.


        :return: The offset of this PaginationParamsRequest.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PaginationParamsRequest.


        :param offset: The offset of this PaginationParamsRequest.
        :type offset: int
        """

        self._offset = offset
