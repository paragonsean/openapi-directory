# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.call import Call
from openapi_server import util


class CreateCallResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agora_app_id: str=None, agora_uid: int=None, call: Call=None, duration: str=None, token: str=None):
        """CreateCallResponse - a model defined in OpenAPI

        :param agora_app_id: The agora_app_id of this CreateCallResponse.
        :param agora_uid: The agora_uid of this CreateCallResponse.
        :param call: The call of this CreateCallResponse.
        :param duration: The duration of this CreateCallResponse.
        :param token: The token of this CreateCallResponse.
        """
        self.openapi_types = {
            'agora_app_id': str,
            'agora_uid': int,
            'call': Call,
            'duration': str,
            'token': str
        }

        self.attribute_map = {
            'agora_app_id': 'agora_app_id',
            'agora_uid': 'agora_uid',
            'call': 'call',
            'duration': 'duration',
            'token': 'token'
        }

        self._agora_app_id = agora_app_id
        self._agora_uid = agora_uid
        self._call = call
        self._duration = duration
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCallResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCallResponse of this CreateCallResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agora_app_id(self):
        """Gets the agora_app_id of this CreateCallResponse.


        :return: The agora_app_id of this CreateCallResponse.
        :rtype: str
        """
        return self._agora_app_id

    @agora_app_id.setter
    def agora_app_id(self, agora_app_id):
        """Sets the agora_app_id of this CreateCallResponse.


        :param agora_app_id: The agora_app_id of this CreateCallResponse.
        :type agora_app_id: str
        """

        self._agora_app_id = agora_app_id

    @property
    def agora_uid(self):
        """Gets the agora_uid of this CreateCallResponse.


        :return: The agora_uid of this CreateCallResponse.
        :rtype: int
        """
        return self._agora_uid

    @agora_uid.setter
    def agora_uid(self, agora_uid):
        """Sets the agora_uid of this CreateCallResponse.


        :param agora_uid: The agora_uid of this CreateCallResponse.
        :type agora_uid: int
        """

        self._agora_uid = agora_uid

    @property
    def call(self):
        """Gets the call of this CreateCallResponse.


        :return: The call of this CreateCallResponse.
        :rtype: Call
        """
        return self._call

    @call.setter
    def call(self, call):
        """Sets the call of this CreateCallResponse.


        :param call: The call of this CreateCallResponse.
        :type call: Call
        """

        self._call = call

    @property
    def duration(self):
        """Gets the duration of this CreateCallResponse.

        Duration of the request in human-readable format

        :return: The duration of this CreateCallResponse.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CreateCallResponse.

        Duration of the request in human-readable format

        :param duration: The duration of this CreateCallResponse.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def token(self):
        """Gets the token of this CreateCallResponse.


        :return: The token of this CreateCallResponse.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CreateCallResponse.


        :param token: The token of this CreateCallResponse.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
