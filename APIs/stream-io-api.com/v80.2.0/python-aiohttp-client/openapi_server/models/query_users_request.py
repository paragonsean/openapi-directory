# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sort_param import SortParam
from openapi_server.models.user_object import UserObject
from openapi_server import util


class QueryUsersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, connection_id: str=None, filter_conditions: Dict[str, object]=None, id_gt: str=None, id_gte: str=None, id_lt: str=None, id_lte: str=None, limit: int=None, offset: int=None, presence: bool=None, sort: List[SortParam]=None, user: UserObject=None, user_id: str=None):
        """QueryUsersRequest - a model defined in OpenAPI

        :param client_id: The client_id of this QueryUsersRequest.
        :param connection_id: The connection_id of this QueryUsersRequest.
        :param filter_conditions: The filter_conditions of this QueryUsersRequest.
        :param id_gt: The id_gt of this QueryUsersRequest.
        :param id_gte: The id_gte of this QueryUsersRequest.
        :param id_lt: The id_lt of this QueryUsersRequest.
        :param id_lte: The id_lte of this QueryUsersRequest.
        :param limit: The limit of this QueryUsersRequest.
        :param offset: The offset of this QueryUsersRequest.
        :param presence: The presence of this QueryUsersRequest.
        :param sort: The sort of this QueryUsersRequest.
        :param user: The user of this QueryUsersRequest.
        :param user_id: The user_id of this QueryUsersRequest.
        """
        self.openapi_types = {
            'client_id': str,
            'connection_id': str,
            'filter_conditions': Dict[str, object],
            'id_gt': str,
            'id_gte': str,
            'id_lt': str,
            'id_lte': str,
            'limit': int,
            'offset': int,
            'presence': bool,
            'sort': List[SortParam],
            'user': UserObject,
            'user_id': str
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'connection_id': 'connection_id',
            'filter_conditions': 'filter_conditions',
            'id_gt': 'id_gt',
            'id_gte': 'id_gte',
            'id_lt': 'id_lt',
            'id_lte': 'id_lte',
            'limit': 'limit',
            'offset': 'offset',
            'presence': 'presence',
            'sort': 'sort',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._client_id = client_id
        self._connection_id = connection_id
        self._filter_conditions = filter_conditions
        self._id_gt = id_gt
        self._id_gte = id_gte
        self._id_lt = id_lt
        self._id_lte = id_lte
        self._limit = limit
        self._offset = offset
        self._presence = presence
        self._sort = sort
        self._user = user
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryUsersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryUsersRequest of this QueryUsersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this QueryUsersRequest.


        :return: The client_id of this QueryUsersRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this QueryUsersRequest.


        :param client_id: The client_id of this QueryUsersRequest.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def connection_id(self):
        """Gets the connection_id of this QueryUsersRequest.


        :return: The connection_id of this QueryUsersRequest.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this QueryUsersRequest.


        :param connection_id: The connection_id of this QueryUsersRequest.
        :type connection_id: str
        """

        self._connection_id = connection_id

    @property
    def filter_conditions(self):
        """Gets the filter_conditions of this QueryUsersRequest.

        User filters

        :return: The filter_conditions of this QueryUsersRequest.
        :rtype: Dict[str, object]
        """
        return self._filter_conditions

    @filter_conditions.setter
    def filter_conditions(self, filter_conditions):
        """Sets the filter_conditions of this QueryUsersRequest.

        User filters

        :param filter_conditions: The filter_conditions of this QueryUsersRequest.
        :type filter_conditions: Dict[str, object]
        """
        if filter_conditions is None:
            raise ValueError("Invalid value for `filter_conditions`, must not be `None`")

        self._filter_conditions = filter_conditions

    @property
    def id_gt(self):
        """Gets the id_gt of this QueryUsersRequest.


        :return: The id_gt of this QueryUsersRequest.
        :rtype: str
        """
        return self._id_gt

    @id_gt.setter
    def id_gt(self, id_gt):
        """Sets the id_gt of this QueryUsersRequest.


        :param id_gt: The id_gt of this QueryUsersRequest.
        :type id_gt: str
        """

        self._id_gt = id_gt

    @property
    def id_gte(self):
        """Gets the id_gte of this QueryUsersRequest.


        :return: The id_gte of this QueryUsersRequest.
        :rtype: str
        """
        return self._id_gte

    @id_gte.setter
    def id_gte(self, id_gte):
        """Sets the id_gte of this QueryUsersRequest.


        :param id_gte: The id_gte of this QueryUsersRequest.
        :type id_gte: str
        """

        self._id_gte = id_gte

    @property
    def id_lt(self):
        """Gets the id_lt of this QueryUsersRequest.


        :return: The id_lt of this QueryUsersRequest.
        :rtype: str
        """
        return self._id_lt

    @id_lt.setter
    def id_lt(self, id_lt):
        """Sets the id_lt of this QueryUsersRequest.


        :param id_lt: The id_lt of this QueryUsersRequest.
        :type id_lt: str
        """

        self._id_lt = id_lt

    @property
    def id_lte(self):
        """Gets the id_lte of this QueryUsersRequest.


        :return: The id_lte of this QueryUsersRequest.
        :rtype: str
        """
        return self._id_lte

    @id_lte.setter
    def id_lte(self, id_lte):
        """Sets the id_lte of this QueryUsersRequest.


        :param id_lte: The id_lte of this QueryUsersRequest.
        :type id_lte: str
        """

        self._id_lte = id_lte

    @property
    def limit(self):
        """Gets the limit of this QueryUsersRequest.


        :return: The limit of this QueryUsersRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this QueryUsersRequest.


        :param limit: The limit of this QueryUsersRequest.
        :type limit: int
        """
        if limit is not None and limit > 100:
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `100`")
        if limit is not None and limit < 0:
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `0`")

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this QueryUsersRequest.


        :return: The offset of this QueryUsersRequest.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this QueryUsersRequest.


        :param offset: The offset of this QueryUsersRequest.
        :type offset: int
        """
        if offset is not None and offset > 1000:
            raise ValueError("Invalid value for `offset`, must be a value less than or equal to `1000`")

        self._offset = offset

    @property
    def presence(self):
        """Gets the presence of this QueryUsersRequest.

        Request user presence status

        :return: The presence of this QueryUsersRequest.
        :rtype: bool
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """Sets the presence of this QueryUsersRequest.

        Request user presence status

        :param presence: The presence of this QueryUsersRequest.
        :type presence: bool
        """

        self._presence = presence

    @property
    def sort(self):
        """Gets the sort of this QueryUsersRequest.

        Array of sort parameters

        :return: The sort of this QueryUsersRequest.
        :rtype: List[SortParam]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this QueryUsersRequest.

        Array of sort parameters

        :param sort: The sort of this QueryUsersRequest.
        :type sort: List[SortParam]
        """
        if sort is None:
            raise ValueError("Invalid value for `sort`, must not be `None`")

        self._sort = sort

    @property
    def user(self):
        """Gets the user of this QueryUsersRequest.


        :return: The user of this QueryUsersRequest.
        :rtype: UserObject
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this QueryUsersRequest.


        :param user: The user of this QueryUsersRequest.
        :type user: UserObject
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this QueryUsersRequest.


        :return: The user_id of this QueryUsersRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this QueryUsersRequest.


        :param user_id: The user_id of this QueryUsersRequest.
        :type user_id: str
        """

        self._user_id = user_id
