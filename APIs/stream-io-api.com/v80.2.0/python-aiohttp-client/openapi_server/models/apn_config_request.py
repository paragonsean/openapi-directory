# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APNConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disabled: bool=None, auth_key: str=None, auth_type: str=None, bundle_id: str=None, development: bool=None, host: str=None, key_id: str=None, notification_template: str=None, p12_cert: str=None, team_id: str=None):
        """APNConfigRequest - a model defined in OpenAPI

        :param disabled: The disabled of this APNConfigRequest.
        :param auth_key: The auth_key of this APNConfigRequest.
        :param auth_type: The auth_type of this APNConfigRequest.
        :param bundle_id: The bundle_id of this APNConfigRequest.
        :param development: The development of this APNConfigRequest.
        :param host: The host of this APNConfigRequest.
        :param key_id: The key_id of this APNConfigRequest.
        :param notification_template: The notification_template of this APNConfigRequest.
        :param p12_cert: The p12_cert of this APNConfigRequest.
        :param team_id: The team_id of this APNConfigRequest.
        """
        self.openapi_types = {
            'disabled': bool,
            'auth_key': str,
            'auth_type': str,
            'bundle_id': str,
            'development': bool,
            'host': str,
            'key_id': str,
            'notification_template': str,
            'p12_cert': str,
            'team_id': str
        }

        self.attribute_map = {
            'disabled': 'Disabled',
            'auth_key': 'auth_key',
            'auth_type': 'auth_type',
            'bundle_id': 'bundle_id',
            'development': 'development',
            'host': 'host',
            'key_id': 'key_id',
            'notification_template': 'notification_template',
            'p12_cert': 'p12_cert',
            'team_id': 'team_id'
        }

        self._disabled = disabled
        self._auth_key = auth_key
        self._auth_type = auth_type
        self._bundle_id = bundle_id
        self._development = development
        self._host = host
        self._key_id = key_id
        self._notification_template = notification_template
        self._p12_cert = p12_cert
        self._team_id = team_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APNConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APNConfigRequest of this APNConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disabled(self):
        """Gets the disabled of this APNConfigRequest.


        :return: The disabled of this APNConfigRequest.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this APNConfigRequest.


        :param disabled: The disabled of this APNConfigRequest.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def auth_key(self):
        """Gets the auth_key of this APNConfigRequest.


        :return: The auth_key of this APNConfigRequest.
        :rtype: str
        """
        return self._auth_key

    @auth_key.setter
    def auth_key(self, auth_key):
        """Sets the auth_key of this APNConfigRequest.


        :param auth_key: The auth_key of this APNConfigRequest.
        :type auth_key: str
        """

        self._auth_key = auth_key

    @property
    def auth_type(self):
        """Gets the auth_type of this APNConfigRequest.


        :return: The auth_type of this APNConfigRequest.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this APNConfigRequest.


        :param auth_type: The auth_type of this APNConfigRequest.
        :type auth_type: str
        """
        allowed_values = ["certificate", "token"]  # noqa: E501
        if auth_type not in allowed_values:
            raise ValueError(
                "Invalid value for `auth_type` ({0}), must be one of {1}"
                .format(auth_type, allowed_values)
            )

        self._auth_type = auth_type

    @property
    def bundle_id(self):
        """Gets the bundle_id of this APNConfigRequest.


        :return: The bundle_id of this APNConfigRequest.
        :rtype: str
        """
        return self._bundle_id

    @bundle_id.setter
    def bundle_id(self, bundle_id):
        """Sets the bundle_id of this APNConfigRequest.


        :param bundle_id: The bundle_id of this APNConfigRequest.
        :type bundle_id: str
        """

        self._bundle_id = bundle_id

    @property
    def development(self):
        """Gets the development of this APNConfigRequest.


        :return: The development of this APNConfigRequest.
        :rtype: bool
        """
        return self._development

    @development.setter
    def development(self, development):
        """Sets the development of this APNConfigRequest.


        :param development: The development of this APNConfigRequest.
        :type development: bool
        """

        self._development = development

    @property
    def host(self):
        """Gets the host of this APNConfigRequest.


        :return: The host of this APNConfigRequest.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this APNConfigRequest.


        :param host: The host of this APNConfigRequest.
        :type host: str
        """

        self._host = host

    @property
    def key_id(self):
        """Gets the key_id of this APNConfigRequest.


        :return: The key_id of this APNConfigRequest.
        :rtype: str
        """
        return self._key_id

    @key_id.setter
    def key_id(self, key_id):
        """Sets the key_id of this APNConfigRequest.


        :param key_id: The key_id of this APNConfigRequest.
        :type key_id: str
        """

        self._key_id = key_id

    @property
    def notification_template(self):
        """Gets the notification_template of this APNConfigRequest.


        :return: The notification_template of this APNConfigRequest.
        :rtype: str
        """
        return self._notification_template

    @notification_template.setter
    def notification_template(self, notification_template):
        """Sets the notification_template of this APNConfigRequest.


        :param notification_template: The notification_template of this APNConfigRequest.
        :type notification_template: str
        """

        self._notification_template = notification_template

    @property
    def p12_cert(self):
        """Gets the p12_cert of this APNConfigRequest.


        :return: The p12_cert of this APNConfigRequest.
        :rtype: str
        """
        return self._p12_cert

    @p12_cert.setter
    def p12_cert(self, p12_cert):
        """Sets the p12_cert of this APNConfigRequest.


        :param p12_cert: The p12_cert of this APNConfigRequest.
        :type p12_cert: str
        """

        self._p12_cert = p12_cert

    @property
    def team_id(self):
        """Gets the team_id of this APNConfigRequest.


        :return: The team_id of this APNConfigRequest.
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this APNConfigRequest.


        :param team_id: The team_id of this APNConfigRequest.
        :type team_id: str
        """

        self._team_id = team_id
