# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.import_task_history import ImportTaskHistory
from openapi_server import util


class ImportTask(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, history: List[ImportTaskHistory]=None, id: str=None, mode: str=None, path: str=None, result: object=None, size: int=None, state: str=None, updated_at: datetime=None):
        """ImportTask - a model defined in OpenAPI

        :param created_at: The created_at of this ImportTask.
        :param history: The history of this ImportTask.
        :param id: The id of this ImportTask.
        :param mode: The mode of this ImportTask.
        :param path: The path of this ImportTask.
        :param result: The result of this ImportTask.
        :param size: The size of this ImportTask.
        :param state: The state of this ImportTask.
        :param updated_at: The updated_at of this ImportTask.
        """
        self.openapi_types = {
            'created_at': datetime,
            'history': List[ImportTaskHistory],
            'id': str,
            'mode': str,
            'path': str,
            'result': object,
            'size': int,
            'state': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'history': 'history',
            'id': 'id',
            'mode': 'mode',
            'path': 'path',
            'result': 'result',
            'size': 'size',
            'state': 'state',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._history = history
        self._id = id
        self._mode = mode
        self._path = path
        self._result = result
        self._size = size
        self._state = state
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportTask':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportTask of this ImportTask.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this ImportTask.


        :return: The created_at of this ImportTask.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ImportTask.


        :param created_at: The created_at of this ImportTask.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def history(self):
        """Gets the history of this ImportTask.


        :return: The history of this ImportTask.
        :rtype: List[ImportTaskHistory]
        """
        return self._history

    @history.setter
    def history(self, history):
        """Sets the history of this ImportTask.


        :param history: The history of this ImportTask.
        :type history: List[ImportTaskHistory]
        """
        if history is None:
            raise ValueError("Invalid value for `history`, must not be `None`")

        self._history = history

    @property
    def id(self):
        """Gets the id of this ImportTask.


        :return: The id of this ImportTask.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportTask.


        :param id: The id of this ImportTask.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def mode(self):
        """Gets the mode of this ImportTask.


        :return: The mode of this ImportTask.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this ImportTask.


        :param mode: The mode of this ImportTask.
        :type mode: str
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")

        self._mode = mode

    @property
    def path(self):
        """Gets the path of this ImportTask.


        :return: The path of this ImportTask.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ImportTask.


        :param path: The path of this ImportTask.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def result(self):
        """Gets the result of this ImportTask.


        :return: The result of this ImportTask.
        :rtype: object
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ImportTask.


        :param result: The result of this ImportTask.
        :type result: object
        """

        self._result = result

    @property
    def size(self):
        """Gets the size of this ImportTask.


        :return: The size of this ImportTask.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ImportTask.


        :param size: The size of this ImportTask.
        :type size: int
        """

        self._size = size

    @property
    def state(self):
        """Gets the state of this ImportTask.


        :return: The state of this ImportTask.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ImportTask.


        :param state: The state of this ImportTask.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")

        self._state = state

    @property
    def updated_at(self):
        """Gets the updated_at of this ImportTask.


        :return: The updated_at of this ImportTask.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ImportTask.


        :param updated_at: The updated_at of this ImportTask.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
