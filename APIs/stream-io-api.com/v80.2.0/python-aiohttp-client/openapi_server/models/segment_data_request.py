# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SegmentDataRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, filter: Dict[str, object]=None, name: str=None, type: str=None):
        """SegmentDataRequest - a model defined in OpenAPI

        :param description: The description of this SegmentDataRequest.
        :param filter: The filter of this SegmentDataRequest.
        :param name: The name of this SegmentDataRequest.
        :param type: The type of this SegmentDataRequest.
        """
        self.openapi_types = {
            'description': str,
            'filter': Dict[str, object],
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'description': 'description',
            'filter': 'filter',
            'name': 'name',
            'type': 'type'
        }

        self._description = description
        self._filter = filter
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SegmentDataRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SegmentDataRequest of this SegmentDataRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this SegmentDataRequest.


        :return: The description of this SegmentDataRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SegmentDataRequest.


        :param description: The description of this SegmentDataRequest.
        :type description: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")

        self._description = description

    @property
    def filter(self):
        """Gets the filter of this SegmentDataRequest.


        :return: The filter of this SegmentDataRequest.
        :rtype: Dict[str, object]
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this SegmentDataRequest.


        :param filter: The filter of this SegmentDataRequest.
        :type filter: Dict[str, object]
        """
        if filter is None:
            raise ValueError("Invalid value for `filter`, must not be `None`")

        self._filter = filter

    @property
    def name(self):
        """Gets the name of this SegmentDataRequest.


        :return: The name of this SegmentDataRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SegmentDataRequest.


        :param name: The name of this SegmentDataRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this SegmentDataRequest.


        :return: The type of this SegmentDataRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SegmentDataRequest.


        :param type: The type of this SegmentDataRequest.
        :type type: str
        """
        allowed_values = ["user", "channel"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
