# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_request import ChannelRequest
from openapi_server.models.message_pagination_params_request import MessagePaginationParamsRequest
from openapi_server.models.pagination_params_request import PaginationParamsRequest
from openapi_server import util


class ChannelGetOrCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, connection_id: str=None, data: ChannelRequest=None, hide_for_creator: bool=None, members: PaginationParamsRequest=None, messages: MessagePaginationParamsRequest=None, presence: bool=None, state: bool=None, watch: bool=None, watchers: PaginationParamsRequest=None):
        """ChannelGetOrCreateRequest - a model defined in OpenAPI

        :param client_id: The client_id of this ChannelGetOrCreateRequest.
        :param connection_id: The connection_id of this ChannelGetOrCreateRequest.
        :param data: The data of this ChannelGetOrCreateRequest.
        :param hide_for_creator: The hide_for_creator of this ChannelGetOrCreateRequest.
        :param members: The members of this ChannelGetOrCreateRequest.
        :param messages: The messages of this ChannelGetOrCreateRequest.
        :param presence: The presence of this ChannelGetOrCreateRequest.
        :param state: The state of this ChannelGetOrCreateRequest.
        :param watch: The watch of this ChannelGetOrCreateRequest.
        :param watchers: The watchers of this ChannelGetOrCreateRequest.
        """
        self.openapi_types = {
            'client_id': str,
            'connection_id': str,
            'data': ChannelRequest,
            'hide_for_creator': bool,
            'members': PaginationParamsRequest,
            'messages': MessagePaginationParamsRequest,
            'presence': bool,
            'state': bool,
            'watch': bool,
            'watchers': PaginationParamsRequest
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'connection_id': 'connection_id',
            'data': 'data',
            'hide_for_creator': 'hide_for_creator',
            'members': 'members',
            'messages': 'messages',
            'presence': 'presence',
            'state': 'state',
            'watch': 'watch',
            'watchers': 'watchers'
        }

        self._client_id = client_id
        self._connection_id = connection_id
        self._data = data
        self._hide_for_creator = hide_for_creator
        self._members = members
        self._messages = messages
        self._presence = presence
        self._state = state
        self._watch = watch
        self._watchers = watchers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelGetOrCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelGetOrCreateRequest of this ChannelGetOrCreateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this ChannelGetOrCreateRequest.


        :return: The client_id of this ChannelGetOrCreateRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ChannelGetOrCreateRequest.


        :param client_id: The client_id of this ChannelGetOrCreateRequest.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def connection_id(self):
        """Gets the connection_id of this ChannelGetOrCreateRequest.


        :return: The connection_id of this ChannelGetOrCreateRequest.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this ChannelGetOrCreateRequest.


        :param connection_id: The connection_id of this ChannelGetOrCreateRequest.
        :type connection_id: str
        """

        self._connection_id = connection_id

    @property
    def data(self):
        """Gets the data of this ChannelGetOrCreateRequest.


        :return: The data of this ChannelGetOrCreateRequest.
        :rtype: ChannelRequest
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ChannelGetOrCreateRequest.


        :param data: The data of this ChannelGetOrCreateRequest.
        :type data: ChannelRequest
        """

        self._data = data

    @property
    def hide_for_creator(self):
        """Gets the hide_for_creator of this ChannelGetOrCreateRequest.

        Whether this channel will be hidden for the user who created the channel or not

        :return: The hide_for_creator of this ChannelGetOrCreateRequest.
        :rtype: bool
        """
        return self._hide_for_creator

    @hide_for_creator.setter
    def hide_for_creator(self, hide_for_creator):
        """Sets the hide_for_creator of this ChannelGetOrCreateRequest.

        Whether this channel will be hidden for the user who created the channel or not

        :param hide_for_creator: The hide_for_creator of this ChannelGetOrCreateRequest.
        :type hide_for_creator: bool
        """

        self._hide_for_creator = hide_for_creator

    @property
    def members(self):
        """Gets the members of this ChannelGetOrCreateRequest.


        :return: The members of this ChannelGetOrCreateRequest.
        :rtype: PaginationParamsRequest
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this ChannelGetOrCreateRequest.


        :param members: The members of this ChannelGetOrCreateRequest.
        :type members: PaginationParamsRequest
        """

        self._members = members

    @property
    def messages(self):
        """Gets the messages of this ChannelGetOrCreateRequest.


        :return: The messages of this ChannelGetOrCreateRequest.
        :rtype: MessagePaginationParamsRequest
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this ChannelGetOrCreateRequest.


        :param messages: The messages of this ChannelGetOrCreateRequest.
        :type messages: MessagePaginationParamsRequest
        """

        self._messages = messages

    @property
    def presence(self):
        """Gets the presence of this ChannelGetOrCreateRequest.

        Fetch user presence info

        :return: The presence of this ChannelGetOrCreateRequest.
        :rtype: bool
        """
        return self._presence

    @presence.setter
    def presence(self, presence):
        """Sets the presence of this ChannelGetOrCreateRequest.

        Fetch user presence info

        :param presence: The presence of this ChannelGetOrCreateRequest.
        :type presence: bool
        """

        self._presence = presence

    @property
    def state(self):
        """Gets the state of this ChannelGetOrCreateRequest.

        Refresh channel state

        :return: The state of this ChannelGetOrCreateRequest.
        :rtype: bool
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ChannelGetOrCreateRequest.

        Refresh channel state

        :param state: The state of this ChannelGetOrCreateRequest.
        :type state: bool
        """

        self._state = state

    @property
    def watch(self):
        """Gets the watch of this ChannelGetOrCreateRequest.

        Start watching the channel

        :return: The watch of this ChannelGetOrCreateRequest.
        :rtype: bool
        """
        return self._watch

    @watch.setter
    def watch(self, watch):
        """Sets the watch of this ChannelGetOrCreateRequest.

        Start watching the channel

        :param watch: The watch of this ChannelGetOrCreateRequest.
        :type watch: bool
        """

        self._watch = watch

    @property
    def watchers(self):
        """Gets the watchers of this ChannelGetOrCreateRequest.


        :return: The watchers of this ChannelGetOrCreateRequest.
        :rtype: PaginationParamsRequest
        """
        return self._watchers

    @watchers.setter
    def watchers(self, watchers):
        """Sets the watchers of this ChannelGetOrCreateRequest.


        :param watchers: The watchers of this ChannelGetOrCreateRequest.
        :type watchers: PaginationParamsRequest
        """

        self._watchers = watchers
