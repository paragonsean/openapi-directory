# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_object_request import UserObjectRequest
from openapi_server import util


class BanRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, banned_by: UserObjectRequest=None, banned_by_id: str=None, id: str=None, ip_ban: bool=None, reason: str=None, shadow: bool=None, target_user_id: str=None, timeout: int=None, type: str=None, user: UserObjectRequest=None, user_id: str=None):
        """BanRequest - a model defined in OpenAPI

        :param banned_by: The banned_by of this BanRequest.
        :param banned_by_id: The banned_by_id of this BanRequest.
        :param id: The id of this BanRequest.
        :param ip_ban: The ip_ban of this BanRequest.
        :param reason: The reason of this BanRequest.
        :param shadow: The shadow of this BanRequest.
        :param target_user_id: The target_user_id of this BanRequest.
        :param timeout: The timeout of this BanRequest.
        :param type: The type of this BanRequest.
        :param user: The user of this BanRequest.
        :param user_id: The user_id of this BanRequest.
        """
        self.openapi_types = {
            'banned_by': UserObjectRequest,
            'banned_by_id': str,
            'id': str,
            'ip_ban': bool,
            'reason': str,
            'shadow': bool,
            'target_user_id': str,
            'timeout': int,
            'type': str,
            'user': UserObjectRequest,
            'user_id': str
        }

        self.attribute_map = {
            'banned_by': 'banned_by',
            'banned_by_id': 'banned_by_id',
            'id': 'id',
            'ip_ban': 'ip_ban',
            'reason': 'reason',
            'shadow': 'shadow',
            'target_user_id': 'target_user_id',
            'timeout': 'timeout',
            'type': 'type',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._banned_by = banned_by
        self._banned_by_id = banned_by_id
        self._id = id
        self._ip_ban = ip_ban
        self._reason = reason
        self._shadow = shadow
        self._target_user_id = target_user_id
        self._timeout = timeout
        self._type = type
        self._user = user
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BanRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BanRequest of this BanRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def banned_by(self):
        """Gets the banned_by of this BanRequest.


        :return: The banned_by of this BanRequest.
        :rtype: UserObjectRequest
        """
        return self._banned_by

    @banned_by.setter
    def banned_by(self, banned_by):
        """Sets the banned_by of this BanRequest.


        :param banned_by: The banned_by of this BanRequest.
        :type banned_by: UserObjectRequest
        """

        self._banned_by = banned_by

    @property
    def banned_by_id(self):
        """Gets the banned_by_id of this BanRequest.

        User ID who issued a ban

        :return: The banned_by_id of this BanRequest.
        :rtype: str
        """
        return self._banned_by_id

    @banned_by_id.setter
    def banned_by_id(self, banned_by_id):
        """Sets the banned_by_id of this BanRequest.

        User ID who issued a ban

        :param banned_by_id: The banned_by_id of this BanRequest.
        :type banned_by_id: str
        """

        self._banned_by_id = banned_by_id

    @property
    def id(self):
        """Gets the id of this BanRequest.

        Channel ID to ban user in

        :return: The id of this BanRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BanRequest.

        Channel ID to ban user in

        :param id: The id of this BanRequest.
        :type id: str
        """

        self._id = id

    @property
    def ip_ban(self):
        """Gets the ip_ban of this BanRequest.

        Whether to perform IP ban or not

        :return: The ip_ban of this BanRequest.
        :rtype: bool
        """
        return self._ip_ban

    @ip_ban.setter
    def ip_ban(self, ip_ban):
        """Sets the ip_ban of this BanRequest.

        Whether to perform IP ban or not

        :param ip_ban: The ip_ban of this BanRequest.
        :type ip_ban: bool
        """

        self._ip_ban = ip_ban

    @property
    def reason(self):
        """Gets the reason of this BanRequest.

        Ban reason

        :return: The reason of this BanRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this BanRequest.

        Ban reason

        :param reason: The reason of this BanRequest.
        :type reason: str
        """

        self._reason = reason

    @property
    def shadow(self):
        """Gets the shadow of this BanRequest.

        Whether to perform shadow ban or not

        :return: The shadow of this BanRequest.
        :rtype: bool
        """
        return self._shadow

    @shadow.setter
    def shadow(self, shadow):
        """Sets the shadow of this BanRequest.

        Whether to perform shadow ban or not

        :param shadow: The shadow of this BanRequest.
        :type shadow: bool
        """

        self._shadow = shadow

    @property
    def target_user_id(self):
        """Gets the target_user_id of this BanRequest.

        ID of user to ban

        :return: The target_user_id of this BanRequest.
        :rtype: str
        """
        return self._target_user_id

    @target_user_id.setter
    def target_user_id(self, target_user_id):
        """Sets the target_user_id of this BanRequest.

        ID of user to ban

        :param target_user_id: The target_user_id of this BanRequest.
        :type target_user_id: str
        """
        if target_user_id is None:
            raise ValueError("Invalid value for `target_user_id`, must not be `None`")

        self._target_user_id = target_user_id

    @property
    def timeout(self):
        """Gets the timeout of this BanRequest.

        Timeout of ban in minutes. User will be unbanned after this period of time

        :return: The timeout of this BanRequest.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this BanRequest.

        Timeout of ban in minutes. User will be unbanned after this period of time

        :param timeout: The timeout of this BanRequest.
        :type timeout: int
        """

        self._timeout = timeout

    @property
    def type(self):
        """Gets the type of this BanRequest.

        Channel type to ban user in

        :return: The type of this BanRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BanRequest.

        Channel type to ban user in

        :param type: The type of this BanRequest.
        :type type: str
        """

        self._type = type

    @property
    def user(self):
        """Gets the user of this BanRequest.


        :return: The user of this BanRequest.
        :rtype: UserObjectRequest
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this BanRequest.


        :param user: The user of this BanRequest.
        :type user: UserObjectRequest
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this BanRequest.


        :return: The user_id of this BanRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this BanRequest.


        :param user_id: The user_id of this BanRequest.
        :type user_id: str
        """

        self._user_id = user_id
