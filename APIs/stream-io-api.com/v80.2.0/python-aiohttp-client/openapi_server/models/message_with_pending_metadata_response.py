# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message import Message
from openapi_server import util


class MessageWithPendingMetadataResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: str=None, message: Message=None, pending_message_metadata: Dict[str, str]=None):
        """MessageWithPendingMetadataResponse - a model defined in OpenAPI

        :param duration: The duration of this MessageWithPendingMetadataResponse.
        :param message: The message of this MessageWithPendingMetadataResponse.
        :param pending_message_metadata: The pending_message_metadata of this MessageWithPendingMetadataResponse.
        """
        self.openapi_types = {
            'duration': str,
            'message': Message,
            'pending_message_metadata': Dict[str, str]
        }

        self.attribute_map = {
            'duration': 'duration',
            'message': 'message',
            'pending_message_metadata': 'pending_message_metadata'
        }

        self._duration = duration
        self._message = message
        self._pending_message_metadata = pending_message_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageWithPendingMetadataResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageWithPendingMetadataResponse of this MessageWithPendingMetadataResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this MessageWithPendingMetadataResponse.


        :return: The duration of this MessageWithPendingMetadataResponse.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this MessageWithPendingMetadataResponse.


        :param duration: The duration of this MessageWithPendingMetadataResponse.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def message(self):
        """Gets the message of this MessageWithPendingMetadataResponse.


        :return: The message of this MessageWithPendingMetadataResponse.
        :rtype: Message
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this MessageWithPendingMetadataResponse.


        :param message: The message of this MessageWithPendingMetadataResponse.
        :type message: Message
        """

        self._message = message

    @property
    def pending_message_metadata(self):
        """Gets the pending_message_metadata of this MessageWithPendingMetadataResponse.

        Metadata attached to a message while it is pending

        :return: The pending_message_metadata of this MessageWithPendingMetadataResponse.
        :rtype: Dict[str, str]
        """
        return self._pending_message_metadata

    @pending_message_metadata.setter
    def pending_message_metadata(self, pending_message_metadata):
        """Sets the pending_message_metadata of this MessageWithPendingMetadataResponse.

        Metadata attached to a message while it is pending

        :param pending_message_metadata: The pending_message_metadata of this MessageWithPendingMetadataResponse.
        :type pending_message_metadata: Dict[str, str]
        """

        self._pending_message_metadata = pending_message_metadata
