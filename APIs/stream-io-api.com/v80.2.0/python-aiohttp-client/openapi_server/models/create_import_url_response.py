# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateImportURLResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: str=None, path: str=None, upload_url: str=None):
        """CreateImportURLResponse - a model defined in OpenAPI

        :param duration: The duration of this CreateImportURLResponse.
        :param path: The path of this CreateImportURLResponse.
        :param upload_url: The upload_url of this CreateImportURLResponse.
        """
        self.openapi_types = {
            'duration': str,
            'path': str,
            'upload_url': str
        }

        self.attribute_map = {
            'duration': 'duration',
            'path': 'path',
            'upload_url': 'upload_url'
        }

        self._duration = duration
        self._path = path
        self._upload_url = upload_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateImportURLResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateImportURLResponse of this CreateImportURLResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this CreateImportURLResponse.

        Duration of the request in human-readable format

        :return: The duration of this CreateImportURLResponse.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CreateImportURLResponse.

        Duration of the request in human-readable format

        :param duration: The duration of this CreateImportURLResponse.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def path(self):
        """Gets the path of this CreateImportURLResponse.


        :return: The path of this CreateImportURLResponse.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this CreateImportURLResponse.


        :param path: The path of this CreateImportURLResponse.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")

        self._path = path

    @property
    def upload_url(self):
        """Gets the upload_url of this CreateImportURLResponse.


        :return: The upload_url of this CreateImportURLResponse.
        :rtype: str
        """
        return self._upload_url

    @upload_url.setter
    def upload_url(self, upload_url):
        """Sets the upload_url of this CreateImportURLResponse.


        :param upload_url: The upload_url of this CreateImportURLResponse.
        :type upload_url: str
        """
        if upload_url is None:
            raise ValueError("Invalid value for `upload_url`, must not be `None`")

        self._upload_url = upload_url
