# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_error_info import DeviceErrorInfo
from openapi_server import util


class CheckPushResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_errors: Dict[str, DeviceErrorInfo]=None, duration: str=None, general_errors: List[str]=None, rendered_apn_template: str=None, rendered_firebase_template: str=None, rendered_message: Dict[str, str]=None, skip_devices: bool=None):
        """CheckPushResponse - a model defined in OpenAPI

        :param device_errors: The device_errors of this CheckPushResponse.
        :param duration: The duration of this CheckPushResponse.
        :param general_errors: The general_errors of this CheckPushResponse.
        :param rendered_apn_template: The rendered_apn_template of this CheckPushResponse.
        :param rendered_firebase_template: The rendered_firebase_template of this CheckPushResponse.
        :param rendered_message: The rendered_message of this CheckPushResponse.
        :param skip_devices: The skip_devices of this CheckPushResponse.
        """
        self.openapi_types = {
            'device_errors': Dict[str, DeviceErrorInfo],
            'duration': str,
            'general_errors': List[str],
            'rendered_apn_template': str,
            'rendered_firebase_template': str,
            'rendered_message': Dict[str, str],
            'skip_devices': bool
        }

        self.attribute_map = {
            'device_errors': 'device_errors',
            'duration': 'duration',
            'general_errors': 'general_errors',
            'rendered_apn_template': 'rendered_apn_template',
            'rendered_firebase_template': 'rendered_firebase_template',
            'rendered_message': 'rendered_message',
            'skip_devices': 'skip_devices'
        }

        self._device_errors = device_errors
        self._duration = duration
        self._general_errors = general_errors
        self._rendered_apn_template = rendered_apn_template
        self._rendered_firebase_template = rendered_firebase_template
        self._rendered_message = rendered_message
        self._skip_devices = skip_devices

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckPushResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckPushResponse of this CheckPushResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_errors(self):
        """Gets the device_errors of this CheckPushResponse.

        Object with device errors

        :return: The device_errors of this CheckPushResponse.
        :rtype: Dict[str, DeviceErrorInfo]
        """
        return self._device_errors

    @device_errors.setter
    def device_errors(self, device_errors):
        """Sets the device_errors of this CheckPushResponse.

        Object with device errors

        :param device_errors: The device_errors of this CheckPushResponse.
        :type device_errors: Dict[str, DeviceErrorInfo]
        """

        self._device_errors = device_errors

    @property
    def duration(self):
        """Gets the duration of this CheckPushResponse.


        :return: The duration of this CheckPushResponse.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CheckPushResponse.


        :param duration: The duration of this CheckPushResponse.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def general_errors(self):
        """Gets the general_errors of this CheckPushResponse.

        List of general errors

        :return: The general_errors of this CheckPushResponse.
        :rtype: List[str]
        """
        return self._general_errors

    @general_errors.setter
    def general_errors(self, general_errors):
        """Sets the general_errors of this CheckPushResponse.

        List of general errors

        :param general_errors: The general_errors of this CheckPushResponse.
        :type general_errors: List[str]
        """

        self._general_errors = general_errors

    @property
    def rendered_apn_template(self):
        """Gets the rendered_apn_template of this CheckPushResponse.


        :return: The rendered_apn_template of this CheckPushResponse.
        :rtype: str
        """
        return self._rendered_apn_template

    @rendered_apn_template.setter
    def rendered_apn_template(self, rendered_apn_template):
        """Sets the rendered_apn_template of this CheckPushResponse.


        :param rendered_apn_template: The rendered_apn_template of this CheckPushResponse.
        :type rendered_apn_template: str
        """

        self._rendered_apn_template = rendered_apn_template

    @property
    def rendered_firebase_template(self):
        """Gets the rendered_firebase_template of this CheckPushResponse.


        :return: The rendered_firebase_template of this CheckPushResponse.
        :rtype: str
        """
        return self._rendered_firebase_template

    @rendered_firebase_template.setter
    def rendered_firebase_template(self, rendered_firebase_template):
        """Sets the rendered_firebase_template of this CheckPushResponse.


        :param rendered_firebase_template: The rendered_firebase_template of this CheckPushResponse.
        :type rendered_firebase_template: str
        """

        self._rendered_firebase_template = rendered_firebase_template

    @property
    def rendered_message(self):
        """Gets the rendered_message of this CheckPushResponse.


        :return: The rendered_message of this CheckPushResponse.
        :rtype: Dict[str, str]
        """
        return self._rendered_message

    @rendered_message.setter
    def rendered_message(self, rendered_message):
        """Sets the rendered_message of this CheckPushResponse.


        :param rendered_message: The rendered_message of this CheckPushResponse.
        :type rendered_message: Dict[str, str]
        """

        self._rendered_message = rendered_message

    @property
    def skip_devices(self):
        """Gets the skip_devices of this CheckPushResponse.

        Don't require existing devices to render templates

        :return: The skip_devices of this CheckPushResponse.
        :rtype: bool
        """
        return self._skip_devices

    @skip_devices.setter
    def skip_devices(self, skip_devices):
        """Sets the skip_devices of this CheckPushResponse.

        Don't require existing devices to render templates

        :param skip_devices: The skip_devices of this CheckPushResponse.
        :type skip_devices: bool
        """

        self._skip_devices = skip_devices
