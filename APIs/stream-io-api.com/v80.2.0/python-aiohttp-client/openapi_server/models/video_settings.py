# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VideoSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_request_enabled: bool=None, enabled: bool=None):
        """VideoSettings - a model defined in OpenAPI

        :param access_request_enabled: The access_request_enabled of this VideoSettings.
        :param enabled: The enabled of this VideoSettings.
        """
        self.openapi_types = {
            'access_request_enabled': bool,
            'enabled': bool
        }

        self.attribute_map = {
            'access_request_enabled': 'access_request_enabled',
            'enabled': 'enabled'
        }

        self._access_request_enabled = access_request_enabled
        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoSettings of this VideoSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_request_enabled(self):
        """Gets the access_request_enabled of this VideoSettings.


        :return: The access_request_enabled of this VideoSettings.
        :rtype: bool
        """
        return self._access_request_enabled

    @access_request_enabled.setter
    def access_request_enabled(self, access_request_enabled):
        """Sets the access_request_enabled of this VideoSettings.


        :param access_request_enabled: The access_request_enabled of this VideoSettings.
        :type access_request_enabled: bool
        """
        if access_request_enabled is None:
            raise ValueError("Invalid value for `access_request_enabled`, must not be `None`")

        self._access_request_enabled = access_request_enabled

    @property
    def enabled(self):
        """Gets the enabled of this VideoSettings.


        :return: The enabled of this VideoSettings.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this VideoSettings.


        :param enabled: The enabled of this VideoSettings.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled
