# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.any_event import AnyEvent
from openapi_server.models.channel_created_event import ChannelCreatedEvent
from openapi_server.models.channel_deleted_event import ChannelDeletedEvent
from openapi_server.models.channel_frozen_event import ChannelFrozenEvent
from openapi_server.models.channel_hidden_event import ChannelHiddenEvent
from openapi_server.models.channel_kicked_event import ChannelKickedEvent
from openapi_server.models.channel_member import ChannelMember
from openapi_server.models.channel_messages import ChannelMessages
from openapi_server.models.channel_muted_event import ChannelMutedEvent
from openapi_server.models.channel_response import ChannelResponse
from openapi_server.models.channel_truncated_event import ChannelTruncatedEvent
from openapi_server.models.channel_un_frozen_event import ChannelUnFrozenEvent
from openapi_server.models.channel_unmuted_event import ChannelUnmutedEvent
from openapi_server.models.channel_updated_event import ChannelUpdatedEvent
from openapi_server.models.channel_visible_event import ChannelVisibleEvent
from openapi_server.models.flag import Flag
from openapi_server.models.health_check_event import HealthCheckEvent
from openapi_server.models.member_added_event import MemberAddedEvent
from openapi_server.models.member_removed_event import MemberRemovedEvent
from openapi_server.models.member_updated_event import MemberUpdatedEvent
from openapi_server.models.message import Message
from openapi_server.models.message_deleted_event import MessageDeletedEvent
from openapi_server.models.message_flagged_event import MessageFlaggedEvent
from openapi_server.models.message_new_event import MessageNewEvent
from openapi_server.models.message_read_event import MessageReadEvent
from openapi_server.models.message_unblocked_event import MessageUnblockedEvent
from openapi_server.models.message_updated_event import MessageUpdatedEvent
from openapi_server.models.notification_added_to_channel_event import NotificationAddedToChannelEvent
from openapi_server.models.notification_channel_deleted_event import NotificationChannelDeletedEvent
from openapi_server.models.notification_channel_mutes_updated_event import NotificationChannelMutesUpdatedEvent
from openapi_server.models.notification_channel_truncated_event import NotificationChannelTruncatedEvent
from openapi_server.models.notification_invite_accepted_event import NotificationInviteAcceptedEvent
from openapi_server.models.notification_invite_rejected_event import NotificationInviteRejectedEvent
from openapi_server.models.notification_invited_event import NotificationInvitedEvent
from openapi_server.models.notification_mark_read_event import NotificationMarkReadEvent
from openapi_server.models.notification_mark_unread_event import NotificationMarkUnreadEvent
from openapi_server.models.notification_mutes_updated_event import NotificationMutesUpdatedEvent
from openapi_server.models.notification_new_message_event import NotificationNewMessageEvent
from openapi_server.models.notification_removed_from_channel_event import NotificationRemovedFromChannelEvent
from openapi_server.models.own_user import OwnUser
from openapi_server.models.reaction import Reaction
from openapi_server.models.reaction_deleted_event import ReactionDeletedEvent
from openapi_server.models.reaction_new_event import ReactionNewEvent
from openapi_server.models.reaction_updated_event import ReactionUpdatedEvent
from openapi_server.models.typing_start_event import TypingStartEvent
from openapi_server.models.typing_stop_event import TypingStopEvent
from openapi_server.models.user_banned_event import UserBannedEvent
from openapi_server.models.user_deactivated_event import UserDeactivatedEvent
from openapi_server.models.user_deleted_event import UserDeletedEvent
from openapi_server.models.user_flagged_event import UserFlaggedEvent
from openapi_server.models.user_muted_event import UserMutedEvent
from openapi_server.models.user_object import UserObject
from openapi_server.models.user_presence_changed_event import UserPresenceChangedEvent
from openapi_server.models.user_reactivated_event import UserReactivatedEvent
from openapi_server.models.user_unbanned_event import UserUnbannedEvent
from openapi_server.models.user_unmuted_event import UserUnmutedEvent
from openapi_server.models.user_unread_reminder_event import UserUnreadReminderEvent
from openapi_server.models.user_updated_event import UserUpdatedEvent
from openapi_server.models.user_watching_start_event import UserWatchingStartEvent
from openapi_server.models.user_watching_stop_event import UserWatchingStopEvent
from openapi_server import util


class ChatEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, type: str='user.watching.stop', channel: ChannelResponse=None, channel_id: str=None, channel_type: str=None, cid: str=None, team: str=None, clear_history: bool=None, user: UserObject=None, message: Message=None, me: OwnUser=None, member: ChannelMember=None, hard_delete: bool=None, thread_participants: List[UserObject]=None, flag: Flag=None, watcher_count: int=None, last_read_message_id: str=None, total_unread_count: int=None, unread_channels: int=None, unread_count: int=None, first_unread_message_id: str=None, last_read_at: datetime=None, unread_messages: int=None, reaction: Reaction=None, parent_id: str=None, created_by: UserObject=None, expiration: datetime=None, reason: str=None, shadow: bool=None, delete_conversation_channels: bool=None, mark_messages_deleted: bool=None, target_user: str=None, target_users: List[str]=None, channels: Dict[str, ChannelMessages]=None):
        """ChatEvent - a model defined in OpenAPI

        :param created_at: The created_at of this ChatEvent.
        :param type: The type of this ChatEvent.
        :param channel: The channel of this ChatEvent.
        :param channel_id: The channel_id of this ChatEvent.
        :param channel_type: The channel_type of this ChatEvent.
        :param cid: The cid of this ChatEvent.
        :param team: The team of this ChatEvent.
        :param clear_history: The clear_history of this ChatEvent.
        :param user: The user of this ChatEvent.
        :param message: The message of this ChatEvent.
        :param me: The me of this ChatEvent.
        :param member: The member of this ChatEvent.
        :param hard_delete: The hard_delete of this ChatEvent.
        :param thread_participants: The thread_participants of this ChatEvent.
        :param flag: The flag of this ChatEvent.
        :param watcher_count: The watcher_count of this ChatEvent.
        :param last_read_message_id: The last_read_message_id of this ChatEvent.
        :param total_unread_count: The total_unread_count of this ChatEvent.
        :param unread_channels: The unread_channels of this ChatEvent.
        :param unread_count: The unread_count of this ChatEvent.
        :param first_unread_message_id: The first_unread_message_id of this ChatEvent.
        :param last_read_at: The last_read_at of this ChatEvent.
        :param unread_messages: The unread_messages of this ChatEvent.
        :param reaction: The reaction of this ChatEvent.
        :param parent_id: The parent_id of this ChatEvent.
        :param created_by: The created_by of this ChatEvent.
        :param expiration: The expiration of this ChatEvent.
        :param reason: The reason of this ChatEvent.
        :param shadow: The shadow of this ChatEvent.
        :param delete_conversation_channels: The delete_conversation_channels of this ChatEvent.
        :param mark_messages_deleted: The mark_messages_deleted of this ChatEvent.
        :param target_user: The target_user of this ChatEvent.
        :param target_users: The target_users of this ChatEvent.
        :param channels: The channels of this ChatEvent.
        """
        self.openapi_types = {
            'created_at': datetime,
            'type': str,
            'channel': ChannelResponse,
            'channel_id': str,
            'channel_type': str,
            'cid': str,
            'team': str,
            'clear_history': bool,
            'user': UserObject,
            'message': Message,
            'me': OwnUser,
            'member': ChannelMember,
            'hard_delete': bool,
            'thread_participants': List[UserObject],
            'flag': Flag,
            'watcher_count': int,
            'last_read_message_id': str,
            'total_unread_count': int,
            'unread_channels': int,
            'unread_count': int,
            'first_unread_message_id': str,
            'last_read_at': datetime,
            'unread_messages': int,
            'reaction': Reaction,
            'parent_id': str,
            'created_by': UserObject,
            'expiration': datetime,
            'reason': str,
            'shadow': bool,
            'delete_conversation_channels': bool,
            'mark_messages_deleted': bool,
            'target_user': str,
            'target_users': List[str],
            'channels': Dict[str, ChannelMessages]
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'type': 'type',
            'channel': 'channel',
            'channel_id': 'channel_id',
            'channel_type': 'channel_type',
            'cid': 'cid',
            'team': 'team',
            'clear_history': 'clear_history',
            'user': 'user',
            'message': 'message',
            'me': 'me',
            'member': 'member',
            'hard_delete': 'hard_delete',
            'thread_participants': 'thread_participants',
            'flag': 'flag',
            'watcher_count': 'watcher_count',
            'last_read_message_id': 'last_read_message_id',
            'total_unread_count': 'total_unread_count',
            'unread_channels': 'unread_channels',
            'unread_count': 'unread_count',
            'first_unread_message_id': 'first_unread_message_id',
            'last_read_at': 'last_read_at',
            'unread_messages': 'unread_messages',
            'reaction': 'reaction',
            'parent_id': 'parent_id',
            'created_by': 'created_by',
            'expiration': 'expiration',
            'reason': 'reason',
            'shadow': 'shadow',
            'delete_conversation_channels': 'delete_conversation_channels',
            'mark_messages_deleted': 'mark_messages_deleted',
            'target_user': 'target_user',
            'target_users': 'target_users',
            'channels': 'channels'
        }

        self._created_at = created_at
        self._type = type
        self._channel = channel
        self._channel_id = channel_id
        self._channel_type = channel_type
        self._cid = cid
        self._team = team
        self._clear_history = clear_history
        self._user = user
        self._message = message
        self._me = me
        self._member = member
        self._hard_delete = hard_delete
        self._thread_participants = thread_participants
        self._flag = flag
        self._watcher_count = watcher_count
        self._last_read_message_id = last_read_message_id
        self._total_unread_count = total_unread_count
        self._unread_channels = unread_channels
        self._unread_count = unread_count
        self._first_unread_message_id = first_unread_message_id
        self._last_read_at = last_read_at
        self._unread_messages = unread_messages
        self._reaction = reaction
        self._parent_id = parent_id
        self._created_by = created_by
        self._expiration = expiration
        self._reason = reason
        self._shadow = shadow
        self._delete_conversation_channels = delete_conversation_channels
        self._mark_messages_deleted = mark_messages_deleted
        self._target_user = target_user
        self._target_users = target_users
        self._channels = channels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChatEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChatEvent of this ChatEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this ChatEvent.


        :return: The created_at of this ChatEvent.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ChatEvent.


        :param created_at: The created_at of this ChatEvent.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def type(self):
        """Gets the type of this ChatEvent.


        :return: The type of this ChatEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ChatEvent.


        :param type: The type of this ChatEvent.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def channel(self):
        """Gets the channel of this ChatEvent.


        :return: The channel of this ChatEvent.
        :rtype: ChannelResponse
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this ChatEvent.


        :param channel: The channel of this ChatEvent.
        :type channel: ChannelResponse
        """

        self._channel = channel

    @property
    def channel_id(self):
        """Gets the channel_id of this ChatEvent.


        :return: The channel_id of this ChatEvent.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this ChatEvent.


        :param channel_id: The channel_id of this ChatEvent.
        :type channel_id: str
        """
        if channel_id is None:
            raise ValueError("Invalid value for `channel_id`, must not be `None`")

        self._channel_id = channel_id

    @property
    def channel_type(self):
        """Gets the channel_type of this ChatEvent.


        :return: The channel_type of this ChatEvent.
        :rtype: str
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this ChatEvent.


        :param channel_type: The channel_type of this ChatEvent.
        :type channel_type: str
        """
        if channel_type is None:
            raise ValueError("Invalid value for `channel_type`, must not be `None`")

        self._channel_type = channel_type

    @property
    def cid(self):
        """Gets the cid of this ChatEvent.


        :return: The cid of this ChatEvent.
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this ChatEvent.


        :param cid: The cid of this ChatEvent.
        :type cid: str
        """
        if cid is None:
            raise ValueError("Invalid value for `cid`, must not be `None`")

        self._cid = cid

    @property
    def team(self):
        """Gets the team of this ChatEvent.


        :return: The team of this ChatEvent.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this ChatEvent.


        :param team: The team of this ChatEvent.
        :type team: str
        """

        self._team = team

    @property
    def clear_history(self):
        """Gets the clear_history of this ChatEvent.


        :return: The clear_history of this ChatEvent.
        :rtype: bool
        """
        return self._clear_history

    @clear_history.setter
    def clear_history(self, clear_history):
        """Sets the clear_history of this ChatEvent.


        :param clear_history: The clear_history of this ChatEvent.
        :type clear_history: bool
        """
        if clear_history is None:
            raise ValueError("Invalid value for `clear_history`, must not be `None`")

        self._clear_history = clear_history

    @property
    def user(self):
        """Gets the user of this ChatEvent.


        :return: The user of this ChatEvent.
        :rtype: UserObject
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ChatEvent.


        :param user: The user of this ChatEvent.
        :type user: UserObject
        """

        self._user = user

    @property
    def message(self):
        """Gets the message of this ChatEvent.


        :return: The message of this ChatEvent.
        :rtype: Message
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ChatEvent.


        :param message: The message of this ChatEvent.
        :type message: Message
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def me(self):
        """Gets the me of this ChatEvent.


        :return: The me of this ChatEvent.
        :rtype: OwnUser
        """
        return self._me

    @me.setter
    def me(self, me):
        """Sets the me of this ChatEvent.


        :param me: The me of this ChatEvent.
        :type me: OwnUser
        """
        if me is None:
            raise ValueError("Invalid value for `me`, must not be `None`")

        self._me = me

    @property
    def member(self):
        """Gets the member of this ChatEvent.


        :return: The member of this ChatEvent.
        :rtype: ChannelMember
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this ChatEvent.


        :param member: The member of this ChatEvent.
        :type member: ChannelMember
        """

        self._member = member

    @property
    def hard_delete(self):
        """Gets the hard_delete of this ChatEvent.


        :return: The hard_delete of this ChatEvent.
        :rtype: bool
        """
        return self._hard_delete

    @hard_delete.setter
    def hard_delete(self, hard_delete):
        """Sets the hard_delete of this ChatEvent.


        :param hard_delete: The hard_delete of this ChatEvent.
        :type hard_delete: bool
        """
        if hard_delete is None:
            raise ValueError("Invalid value for `hard_delete`, must not be `None`")

        self._hard_delete = hard_delete

    @property
    def thread_participants(self):
        """Gets the thread_participants of this ChatEvent.


        :return: The thread_participants of this ChatEvent.
        :rtype: List[UserObject]
        """
        return self._thread_participants

    @thread_participants.setter
    def thread_participants(self, thread_participants):
        """Sets the thread_participants of this ChatEvent.


        :param thread_participants: The thread_participants of this ChatEvent.
        :type thread_participants: List[UserObject]
        """

        self._thread_participants = thread_participants

    @property
    def flag(self):
        """Gets the flag of this ChatEvent.


        :return: The flag of this ChatEvent.
        :rtype: Flag
        """
        return self._flag

    @flag.setter
    def flag(self, flag):
        """Sets the flag of this ChatEvent.


        :param flag: The flag of this ChatEvent.
        :type flag: Flag
        """

        self._flag = flag

    @property
    def watcher_count(self):
        """Gets the watcher_count of this ChatEvent.


        :return: The watcher_count of this ChatEvent.
        :rtype: int
        """
        return self._watcher_count

    @watcher_count.setter
    def watcher_count(self, watcher_count):
        """Sets the watcher_count of this ChatEvent.


        :param watcher_count: The watcher_count of this ChatEvent.
        :type watcher_count: int
        """
        if watcher_count is None:
            raise ValueError("Invalid value for `watcher_count`, must not be `None`")

        self._watcher_count = watcher_count

    @property
    def last_read_message_id(self):
        """Gets the last_read_message_id of this ChatEvent.


        :return: The last_read_message_id of this ChatEvent.
        :rtype: str
        """
        return self._last_read_message_id

    @last_read_message_id.setter
    def last_read_message_id(self, last_read_message_id):
        """Sets the last_read_message_id of this ChatEvent.


        :param last_read_message_id: The last_read_message_id of this ChatEvent.
        :type last_read_message_id: str
        """

        self._last_read_message_id = last_read_message_id

    @property
    def total_unread_count(self):
        """Gets the total_unread_count of this ChatEvent.


        :return: The total_unread_count of this ChatEvent.
        :rtype: int
        """
        return self._total_unread_count

    @total_unread_count.setter
    def total_unread_count(self, total_unread_count):
        """Sets the total_unread_count of this ChatEvent.


        :param total_unread_count: The total_unread_count of this ChatEvent.
        :type total_unread_count: int
        """
        if total_unread_count is None:
            raise ValueError("Invalid value for `total_unread_count`, must not be `None`")

        self._total_unread_count = total_unread_count

    @property
    def unread_channels(self):
        """Gets the unread_channels of this ChatEvent.


        :return: The unread_channels of this ChatEvent.
        :rtype: int
        """
        return self._unread_channels

    @unread_channels.setter
    def unread_channels(self, unread_channels):
        """Sets the unread_channels of this ChatEvent.


        :param unread_channels: The unread_channels of this ChatEvent.
        :type unread_channels: int
        """
        if unread_channels is None:
            raise ValueError("Invalid value for `unread_channels`, must not be `None`")

        self._unread_channels = unread_channels

    @property
    def unread_count(self):
        """Gets the unread_count of this ChatEvent.


        :return: The unread_count of this ChatEvent.
        :rtype: int
        """
        return self._unread_count

    @unread_count.setter
    def unread_count(self, unread_count):
        """Sets the unread_count of this ChatEvent.


        :param unread_count: The unread_count of this ChatEvent.
        :type unread_count: int
        """
        if unread_count is None:
            raise ValueError("Invalid value for `unread_count`, must not be `None`")

        self._unread_count = unread_count

    @property
    def first_unread_message_id(self):
        """Gets the first_unread_message_id of this ChatEvent.


        :return: The first_unread_message_id of this ChatEvent.
        :rtype: str
        """
        return self._first_unread_message_id

    @first_unread_message_id.setter
    def first_unread_message_id(self, first_unread_message_id):
        """Sets the first_unread_message_id of this ChatEvent.


        :param first_unread_message_id: The first_unread_message_id of this ChatEvent.
        :type first_unread_message_id: str
        """
        if first_unread_message_id is None:
            raise ValueError("Invalid value for `first_unread_message_id`, must not be `None`")

        self._first_unread_message_id = first_unread_message_id

    @property
    def last_read_at(self):
        """Gets the last_read_at of this ChatEvent.


        :return: The last_read_at of this ChatEvent.
        :rtype: datetime
        """
        return self._last_read_at

    @last_read_at.setter
    def last_read_at(self, last_read_at):
        """Sets the last_read_at of this ChatEvent.


        :param last_read_at: The last_read_at of this ChatEvent.
        :type last_read_at: datetime
        """
        if last_read_at is None:
            raise ValueError("Invalid value for `last_read_at`, must not be `None`")

        self._last_read_at = last_read_at

    @property
    def unread_messages(self):
        """Gets the unread_messages of this ChatEvent.


        :return: The unread_messages of this ChatEvent.
        :rtype: int
        """
        return self._unread_messages

    @unread_messages.setter
    def unread_messages(self, unread_messages):
        """Sets the unread_messages of this ChatEvent.


        :param unread_messages: The unread_messages of this ChatEvent.
        :type unread_messages: int
        """
        if unread_messages is None:
            raise ValueError("Invalid value for `unread_messages`, must not be `None`")

        self._unread_messages = unread_messages

    @property
    def reaction(self):
        """Gets the reaction of this ChatEvent.


        :return: The reaction of this ChatEvent.
        :rtype: Reaction
        """
        return self._reaction

    @reaction.setter
    def reaction(self, reaction):
        """Sets the reaction of this ChatEvent.


        :param reaction: The reaction of this ChatEvent.
        :type reaction: Reaction
        """
        if reaction is None:
            raise ValueError("Invalid value for `reaction`, must not be `None`")

        self._reaction = reaction

    @property
    def parent_id(self):
        """Gets the parent_id of this ChatEvent.


        :return: The parent_id of this ChatEvent.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this ChatEvent.


        :param parent_id: The parent_id of this ChatEvent.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def created_by(self):
        """Gets the created_by of this ChatEvent.


        :return: The created_by of this ChatEvent.
        :rtype: UserObject
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ChatEvent.


        :param created_by: The created_by of this ChatEvent.
        :type created_by: UserObject
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")

        self._created_by = created_by

    @property
    def expiration(self):
        """Gets the expiration of this ChatEvent.


        :return: The expiration of this ChatEvent.
        :rtype: datetime
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this ChatEvent.


        :param expiration: The expiration of this ChatEvent.
        :type expiration: datetime
        """

        self._expiration = expiration

    @property
    def reason(self):
        """Gets the reason of this ChatEvent.


        :return: The reason of this ChatEvent.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ChatEvent.


        :param reason: The reason of this ChatEvent.
        :type reason: str
        """

        self._reason = reason

    @property
    def shadow(self):
        """Gets the shadow of this ChatEvent.


        :return: The shadow of this ChatEvent.
        :rtype: bool
        """
        return self._shadow

    @shadow.setter
    def shadow(self, shadow):
        """Sets the shadow of this ChatEvent.


        :param shadow: The shadow of this ChatEvent.
        :type shadow: bool
        """
        if shadow is None:
            raise ValueError("Invalid value for `shadow`, must not be `None`")

        self._shadow = shadow

    @property
    def delete_conversation_channels(self):
        """Gets the delete_conversation_channels of this ChatEvent.


        :return: The delete_conversation_channels of this ChatEvent.
        :rtype: bool
        """
        return self._delete_conversation_channels

    @delete_conversation_channels.setter
    def delete_conversation_channels(self, delete_conversation_channels):
        """Sets the delete_conversation_channels of this ChatEvent.


        :param delete_conversation_channels: The delete_conversation_channels of this ChatEvent.
        :type delete_conversation_channels: bool
        """
        if delete_conversation_channels is None:
            raise ValueError("Invalid value for `delete_conversation_channels`, must not be `None`")

        self._delete_conversation_channels = delete_conversation_channels

    @property
    def mark_messages_deleted(self):
        """Gets the mark_messages_deleted of this ChatEvent.


        :return: The mark_messages_deleted of this ChatEvent.
        :rtype: bool
        """
        return self._mark_messages_deleted

    @mark_messages_deleted.setter
    def mark_messages_deleted(self, mark_messages_deleted):
        """Sets the mark_messages_deleted of this ChatEvent.


        :param mark_messages_deleted: The mark_messages_deleted of this ChatEvent.
        :type mark_messages_deleted: bool
        """
        if mark_messages_deleted is None:
            raise ValueError("Invalid value for `mark_messages_deleted`, must not be `None`")

        self._mark_messages_deleted = mark_messages_deleted

    @property
    def target_user(self):
        """Gets the target_user of this ChatEvent.


        :return: The target_user of this ChatEvent.
        :rtype: str
        """
        return self._target_user

    @target_user.setter
    def target_user(self, target_user):
        """Sets the target_user of this ChatEvent.


        :param target_user: The target_user of this ChatEvent.
        :type target_user: str
        """

        self._target_user = target_user

    @property
    def target_users(self):
        """Gets the target_users of this ChatEvent.


        :return: The target_users of this ChatEvent.
        :rtype: List[str]
        """
        return self._target_users

    @target_users.setter
    def target_users(self, target_users):
        """Sets the target_users of this ChatEvent.


        :param target_users: The target_users of this ChatEvent.
        :type target_users: List[str]
        """

        self._target_users = target_users

    @property
    def channels(self):
        """Gets the channels of this ChatEvent.


        :return: The channels of this ChatEvent.
        :rtype: Dict[str, ChannelMessages]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this ChatEvent.


        :param channels: The channels of this ChatEvent.
        :type channels: Dict[str, ChannelMessages]
        """
        if channels is None:
            raise ValueError("Invalid value for `channels`, must not be `None`")

        self._channels = channels
