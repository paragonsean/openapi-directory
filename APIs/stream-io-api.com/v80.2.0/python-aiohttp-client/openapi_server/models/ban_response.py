# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_response import ChannelResponse
from openapi_server.models.user_object import UserObject
from openapi_server import util


class BanResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, banned_by: UserObject=None, channel: ChannelResponse=None, created_at: datetime=None, expires: datetime=None, reason: str=None, shadow: bool=None, user: UserObject=None):
        """BanResponse - a model defined in OpenAPI

        :param banned_by: The banned_by of this BanResponse.
        :param channel: The channel of this BanResponse.
        :param created_at: The created_at of this BanResponse.
        :param expires: The expires of this BanResponse.
        :param reason: The reason of this BanResponse.
        :param shadow: The shadow of this BanResponse.
        :param user: The user of this BanResponse.
        """
        self.openapi_types = {
            'banned_by': UserObject,
            'channel': ChannelResponse,
            'created_at': datetime,
            'expires': datetime,
            'reason': str,
            'shadow': bool,
            'user': UserObject
        }

        self.attribute_map = {
            'banned_by': 'banned_by',
            'channel': 'channel',
            'created_at': 'created_at',
            'expires': 'expires',
            'reason': 'reason',
            'shadow': 'shadow',
            'user': 'user'
        }

        self._banned_by = banned_by
        self._channel = channel
        self._created_at = created_at
        self._expires = expires
        self._reason = reason
        self._shadow = shadow
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BanResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BanResponse of this BanResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def banned_by(self):
        """Gets the banned_by of this BanResponse.


        :return: The banned_by of this BanResponse.
        :rtype: UserObject
        """
        return self._banned_by

    @banned_by.setter
    def banned_by(self, banned_by):
        """Sets the banned_by of this BanResponse.


        :param banned_by: The banned_by of this BanResponse.
        :type banned_by: UserObject
        """

        self._banned_by = banned_by

    @property
    def channel(self):
        """Gets the channel of this BanResponse.


        :return: The channel of this BanResponse.
        :rtype: ChannelResponse
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this BanResponse.


        :param channel: The channel of this BanResponse.
        :type channel: ChannelResponse
        """

        self._channel = channel

    @property
    def created_at(self):
        """Gets the created_at of this BanResponse.


        :return: The created_at of this BanResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this BanResponse.


        :param created_at: The created_at of this BanResponse.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def expires(self):
        """Gets the expires of this BanResponse.


        :return: The expires of this BanResponse.
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this BanResponse.


        :param expires: The expires of this BanResponse.
        :type expires: datetime
        """

        self._expires = expires

    @property
    def reason(self):
        """Gets the reason of this BanResponse.


        :return: The reason of this BanResponse.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this BanResponse.


        :param reason: The reason of this BanResponse.
        :type reason: str
        """

        self._reason = reason

    @property
    def shadow(self):
        """Gets the shadow of this BanResponse.


        :return: The shadow of this BanResponse.
        :rtype: bool
        """
        return self._shadow

    @shadow.setter
    def shadow(self, shadow):
        """Sets the shadow of this BanResponse.


        :param shadow: The shadow of this BanResponse.
        :type shadow: bool
        """

        self._shadow = shadow

    @property
    def user(self):
        """Gets the user of this BanResponse.


        :return: The user of this BanResponse.
        :rtype: UserObject
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this BanResponse.


        :param user: The user of this BanResponse.
        :type user: UserObject
        """

        self._user = user
