# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_config import ChannelConfig
from openapi_server.models.channel_member import ChannelMember
from openapi_server.models.user_object import UserObject
from openapi_server import util


class Channel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_translation_enabled: bool=None, auto_translation_language: str=None, cid: str=None, config: ChannelConfig=None, config_overrides: ChannelConfig=None, cooldown: int=None, created_at: datetime=None, created_by: UserObject=None, deleted_at: datetime=None, disabled: bool=None, frozen: bool=None, id: str=None, invites: List[ChannelMember]=None, last_message_at: datetime=None, member_count: int=None, members: List[ChannelMember]=None, team: str=None, truncated_by: UserObject=None, type: str=None, updated_at: datetime=None):
        """Channel - a model defined in OpenAPI

        :param auto_translation_enabled: The auto_translation_enabled of this Channel.
        :param auto_translation_language: The auto_translation_language of this Channel.
        :param cid: The cid of this Channel.
        :param config: The config of this Channel.
        :param config_overrides: The config_overrides of this Channel.
        :param cooldown: The cooldown of this Channel.
        :param created_at: The created_at of this Channel.
        :param created_by: The created_by of this Channel.
        :param deleted_at: The deleted_at of this Channel.
        :param disabled: The disabled of this Channel.
        :param frozen: The frozen of this Channel.
        :param id: The id of this Channel.
        :param invites: The invites of this Channel.
        :param last_message_at: The last_message_at of this Channel.
        :param member_count: The member_count of this Channel.
        :param members: The members of this Channel.
        :param team: The team of this Channel.
        :param truncated_by: The truncated_by of this Channel.
        :param type: The type of this Channel.
        :param updated_at: The updated_at of this Channel.
        """
        self.openapi_types = {
            'auto_translation_enabled': bool,
            'auto_translation_language': str,
            'cid': str,
            'config': ChannelConfig,
            'config_overrides': ChannelConfig,
            'cooldown': int,
            'created_at': datetime,
            'created_by': UserObject,
            'deleted_at': datetime,
            'disabled': bool,
            'frozen': bool,
            'id': str,
            'invites': List[ChannelMember],
            'last_message_at': datetime,
            'member_count': int,
            'members': List[ChannelMember],
            'team': str,
            'truncated_by': UserObject,
            'type': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'auto_translation_enabled': 'auto_translation_enabled',
            'auto_translation_language': 'auto_translation_language',
            'cid': 'cid',
            'config': 'config',
            'config_overrides': 'config_overrides',
            'cooldown': 'cooldown',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'deleted_at': 'deleted_at',
            'disabled': 'disabled',
            'frozen': 'frozen',
            'id': 'id',
            'invites': 'invites',
            'last_message_at': 'last_message_at',
            'member_count': 'member_count',
            'members': 'members',
            'team': 'team',
            'truncated_by': 'truncated_by',
            'type': 'type',
            'updated_at': 'updated_at'
        }

        self._auto_translation_enabled = auto_translation_enabled
        self._auto_translation_language = auto_translation_language
        self._cid = cid
        self._config = config
        self._config_overrides = config_overrides
        self._cooldown = cooldown
        self._created_at = created_at
        self._created_by = created_by
        self._deleted_at = deleted_at
        self._disabled = disabled
        self._frozen = frozen
        self._id = id
        self._invites = invites
        self._last_message_at = last_message_at
        self._member_count = member_count
        self._members = members
        self._team = team
        self._truncated_by = truncated_by
        self._type = type
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Channel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Channel of this Channel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_translation_enabled(self):
        """Gets the auto_translation_enabled of this Channel.


        :return: The auto_translation_enabled of this Channel.
        :rtype: bool
        """
        return self._auto_translation_enabled

    @auto_translation_enabled.setter
    def auto_translation_enabled(self, auto_translation_enabled):
        """Sets the auto_translation_enabled of this Channel.


        :param auto_translation_enabled: The auto_translation_enabled of this Channel.
        :type auto_translation_enabled: bool
        """

        self._auto_translation_enabled = auto_translation_enabled

    @property
    def auto_translation_language(self):
        """Gets the auto_translation_language of this Channel.


        :return: The auto_translation_language of this Channel.
        :rtype: str
        """
        return self._auto_translation_language

    @auto_translation_language.setter
    def auto_translation_language(self, auto_translation_language):
        """Sets the auto_translation_language of this Channel.


        :param auto_translation_language: The auto_translation_language of this Channel.
        :type auto_translation_language: str
        """
        if auto_translation_language is None:
            raise ValueError("Invalid value for `auto_translation_language`, must not be `None`")

        self._auto_translation_language = auto_translation_language

    @property
    def cid(self):
        """Gets the cid of this Channel.


        :return: The cid of this Channel.
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this Channel.


        :param cid: The cid of this Channel.
        :type cid: str
        """
        if cid is None:
            raise ValueError("Invalid value for `cid`, must not be `None`")

        self._cid = cid

    @property
    def config(self):
        """Gets the config of this Channel.


        :return: The config of this Channel.
        :rtype: ChannelConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Channel.


        :param config: The config of this Channel.
        :type config: ChannelConfig
        """

        self._config = config

    @property
    def config_overrides(self):
        """Gets the config_overrides of this Channel.


        :return: The config_overrides of this Channel.
        :rtype: ChannelConfig
        """
        return self._config_overrides

    @config_overrides.setter
    def config_overrides(self, config_overrides):
        """Sets the config_overrides of this Channel.


        :param config_overrides: The config_overrides of this Channel.
        :type config_overrides: ChannelConfig
        """

        self._config_overrides = config_overrides

    @property
    def cooldown(self):
        """Gets the cooldown of this Channel.


        :return: The cooldown of this Channel.
        :rtype: int
        """
        return self._cooldown

    @cooldown.setter
    def cooldown(self, cooldown):
        """Sets the cooldown of this Channel.


        :param cooldown: The cooldown of this Channel.
        :type cooldown: int
        """

        self._cooldown = cooldown

    @property
    def created_at(self):
        """Gets the created_at of this Channel.


        :return: The created_at of this Channel.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Channel.


        :param created_at: The created_at of this Channel.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Channel.


        :return: The created_by of this Channel.
        :rtype: UserObject
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Channel.


        :param created_by: The created_by of this Channel.
        :type created_by: UserObject
        """

        self._created_by = created_by

    @property
    def deleted_at(self):
        """Gets the deleted_at of this Channel.


        :return: The deleted_at of this Channel.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this Channel.


        :param deleted_at: The deleted_at of this Channel.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def disabled(self):
        """Gets the disabled of this Channel.


        :return: The disabled of this Channel.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this Channel.


        :param disabled: The disabled of this Channel.
        :type disabled: bool
        """
        if disabled is None:
            raise ValueError("Invalid value for `disabled`, must not be `None`")

        self._disabled = disabled

    @property
    def frozen(self):
        """Gets the frozen of this Channel.


        :return: The frozen of this Channel.
        :rtype: bool
        """
        return self._frozen

    @frozen.setter
    def frozen(self, frozen):
        """Sets the frozen of this Channel.


        :param frozen: The frozen of this Channel.
        :type frozen: bool
        """
        if frozen is None:
            raise ValueError("Invalid value for `frozen`, must not be `None`")

        self._frozen = frozen

    @property
    def id(self):
        """Gets the id of this Channel.


        :return: The id of this Channel.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Channel.


        :param id: The id of this Channel.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def invites(self):
        """Gets the invites of this Channel.


        :return: The invites of this Channel.
        :rtype: List[ChannelMember]
        """
        return self._invites

    @invites.setter
    def invites(self, invites):
        """Sets the invites of this Channel.


        :param invites: The invites of this Channel.
        :type invites: List[ChannelMember]
        """

        self._invites = invites

    @property
    def last_message_at(self):
        """Gets the last_message_at of this Channel.


        :return: The last_message_at of this Channel.
        :rtype: datetime
        """
        return self._last_message_at

    @last_message_at.setter
    def last_message_at(self, last_message_at):
        """Sets the last_message_at of this Channel.


        :param last_message_at: The last_message_at of this Channel.
        :type last_message_at: datetime
        """

        self._last_message_at = last_message_at

    @property
    def member_count(self):
        """Gets the member_count of this Channel.


        :return: The member_count of this Channel.
        :rtype: int
        """
        return self._member_count

    @member_count.setter
    def member_count(self, member_count):
        """Sets the member_count of this Channel.


        :param member_count: The member_count of this Channel.
        :type member_count: int
        """

        self._member_count = member_count

    @property
    def members(self):
        """Gets the members of this Channel.


        :return: The members of this Channel.
        :rtype: List[ChannelMember]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this Channel.


        :param members: The members of this Channel.
        :type members: List[ChannelMember]
        """

        self._members = members

    @property
    def team(self):
        """Gets the team of this Channel.


        :return: The team of this Channel.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Channel.


        :param team: The team of this Channel.
        :type team: str
        """

        self._team = team

    @property
    def truncated_by(self):
        """Gets the truncated_by of this Channel.


        :return: The truncated_by of this Channel.
        :rtype: UserObject
        """
        return self._truncated_by

    @truncated_by.setter
    def truncated_by(self, truncated_by):
        """Sets the truncated_by of this Channel.


        :param truncated_by: The truncated_by of this Channel.
        :type truncated_by: UserObject
        """

        self._truncated_by = truncated_by

    @property
    def type(self):
        """Gets the type of this Channel.


        :return: The type of this Channel.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Channel.


        :param type: The type of this Channel.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Channel.


        :return: The updated_at of this Channel.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Channel.


        :param updated_at: The updated_at of this Channel.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
