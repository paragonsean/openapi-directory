# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_object_request import UserObjectRequest
from openapi_server import util


class CreateDeviceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, push_provider: str=None, push_provider_name: str=None, user: UserObjectRequest=None, user_id: str=None):
        """CreateDeviceRequest - a model defined in OpenAPI

        :param id: The id of this CreateDeviceRequest.
        :param push_provider: The push_provider of this CreateDeviceRequest.
        :param push_provider_name: The push_provider_name of this CreateDeviceRequest.
        :param user: The user of this CreateDeviceRequest.
        :param user_id: The user_id of this CreateDeviceRequest.
        """
        self.openapi_types = {
            'id': str,
            'push_provider': str,
            'push_provider_name': str,
            'user': UserObjectRequest,
            'user_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'push_provider': 'push_provider',
            'push_provider_name': 'push_provider_name',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._id = id
        self._push_provider = push_provider
        self._push_provider_name = push_provider_name
        self._user = user
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateDeviceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateDeviceRequest of this CreateDeviceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CreateDeviceRequest.


        :return: The id of this CreateDeviceRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateDeviceRequest.


        :param id: The id of this CreateDeviceRequest.
        :type id: str
        """
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")

        self._id = id

    @property
    def push_provider(self):
        """Gets the push_provider of this CreateDeviceRequest.


        :return: The push_provider of this CreateDeviceRequest.
        :rtype: str
        """
        return self._push_provider

    @push_provider.setter
    def push_provider(self, push_provider):
        """Sets the push_provider of this CreateDeviceRequest.


        :param push_provider: The push_provider of this CreateDeviceRequest.
        :type push_provider: str
        """
        allowed_values = ["firebase", "apn", "huawei", "xiaomi"]  # noqa: E501
        if push_provider not in allowed_values:
            raise ValueError(
                "Invalid value for `push_provider` ({0}), must be one of {1}"
                .format(push_provider, allowed_values)
            )

        self._push_provider = push_provider

    @property
    def push_provider_name(self):
        """Gets the push_provider_name of this CreateDeviceRequest.


        :return: The push_provider_name of this CreateDeviceRequest.
        :rtype: str
        """
        return self._push_provider_name

    @push_provider_name.setter
    def push_provider_name(self, push_provider_name):
        """Sets the push_provider_name of this CreateDeviceRequest.


        :param push_provider_name: The push_provider_name of this CreateDeviceRequest.
        :type push_provider_name: str
        """

        self._push_provider_name = push_provider_name

    @property
    def user(self):
        """Gets the user of this CreateDeviceRequest.


        :return: The user of this CreateDeviceRequest.
        :rtype: UserObjectRequest
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CreateDeviceRequest.


        :param user: The user of this CreateDeviceRequest.
        :type user: UserObjectRequest
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this CreateDeviceRequest.

        **Server-side only**. User ID which server acts upon

        :return: The user_id of this CreateDeviceRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CreateDeviceRequest.

        **Server-side only**. User ID which server acts upon

        :param user_id: The user_id of this CreateDeviceRequest.
        :type user_id: str
        """

        self._user_id = user_id
