# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_result import ErrorResult
from openapi_server import util


class GetTaskResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, duration: str=None, error: ErrorResult=None, result: Dict[str, object]=None, status: str=None, task_id: str=None, updated_at: datetime=None):
        """GetTaskResponse - a model defined in OpenAPI

        :param created_at: The created_at of this GetTaskResponse.
        :param duration: The duration of this GetTaskResponse.
        :param error: The error of this GetTaskResponse.
        :param result: The result of this GetTaskResponse.
        :param status: The status of this GetTaskResponse.
        :param task_id: The task_id of this GetTaskResponse.
        :param updated_at: The updated_at of this GetTaskResponse.
        """
        self.openapi_types = {
            'created_at': datetime,
            'duration': str,
            'error': ErrorResult,
            'result': Dict[str, object],
            'status': str,
            'task_id': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'duration': 'duration',
            'error': 'error',
            'result': 'result',
            'status': 'status',
            'task_id': 'task_id',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._duration = duration
        self._error = error
        self._result = result
        self._status = status
        self._task_id = task_id
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTaskResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetTaskResponse of this GetTaskResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this GetTaskResponse.


        :return: The created_at of this GetTaskResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetTaskResponse.


        :param created_at: The created_at of this GetTaskResponse.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def duration(self):
        """Gets the duration of this GetTaskResponse.


        :return: The duration of this GetTaskResponse.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this GetTaskResponse.


        :param duration: The duration of this GetTaskResponse.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def error(self):
        """Gets the error of this GetTaskResponse.


        :return: The error of this GetTaskResponse.
        :rtype: ErrorResult
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this GetTaskResponse.


        :param error: The error of this GetTaskResponse.
        :type error: ErrorResult
        """

        self._error = error

    @property
    def result(self):
        """Gets the result of this GetTaskResponse.

        Result produced by task after completion

        :return: The result of this GetTaskResponse.
        :rtype: Dict[str, object]
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this GetTaskResponse.

        Result produced by task after completion

        :param result: The result of this GetTaskResponse.
        :type result: Dict[str, object]
        """

        self._result = result

    @property
    def status(self):
        """Gets the status of this GetTaskResponse.

        Current status of task

        :return: The status of this GetTaskResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetTaskResponse.

        Current status of task

        :param status: The status of this GetTaskResponse.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def task_id(self):
        """Gets the task_id of this GetTaskResponse.

        ID of task

        :return: The task_id of this GetTaskResponse.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this GetTaskResponse.

        ID of task

        :param task_id: The task_id of this GetTaskResponse.
        :type task_id: str
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")

        self._task_id = task_id

    @property
    def updated_at(self):
        """Gets the updated_at of this GetTaskResponse.


        :return: The updated_at of this GetTaskResponse.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GetTaskResponse.


        :param updated_at: The updated_at of this GetTaskResponse.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
