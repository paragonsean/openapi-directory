# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_request import MessageRequest
from openapi_server import util


class UpdateMessageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message: MessageRequest=None, pending_message_metadata: Dict[str, str]=None, skip_enrich_url: bool=None):
        """UpdateMessageRequest - a model defined in OpenAPI

        :param message: The message of this UpdateMessageRequest.
        :param pending_message_metadata: The pending_message_metadata of this UpdateMessageRequest.
        :param skip_enrich_url: The skip_enrich_url of this UpdateMessageRequest.
        """
        self.openapi_types = {
            'message': MessageRequest,
            'pending_message_metadata': Dict[str, str],
            'skip_enrich_url': bool
        }

        self.attribute_map = {
            'message': 'message',
            'pending_message_metadata': 'pending_message_metadata',
            'skip_enrich_url': 'skip_enrich_url'
        }

        self._message = message
        self._pending_message_metadata = pending_message_metadata
        self._skip_enrich_url = skip_enrich_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateMessageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateMessageRequest of this UpdateMessageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message(self):
        """Gets the message of this UpdateMessageRequest.


        :return: The message of this UpdateMessageRequest.
        :rtype: MessageRequest
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this UpdateMessageRequest.


        :param message: The message of this UpdateMessageRequest.
        :type message: MessageRequest
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def pending_message_metadata(self):
        """Gets the pending_message_metadata of this UpdateMessageRequest.


        :return: The pending_message_metadata of this UpdateMessageRequest.
        :rtype: Dict[str, str]
        """
        return self._pending_message_metadata

    @pending_message_metadata.setter
    def pending_message_metadata(self, pending_message_metadata):
        """Sets the pending_message_metadata of this UpdateMessageRequest.


        :param pending_message_metadata: The pending_message_metadata of this UpdateMessageRequest.
        :type pending_message_metadata: Dict[str, str]
        """

        self._pending_message_metadata = pending_message_metadata

    @property
    def skip_enrich_url(self):
        """Gets the skip_enrich_url of this UpdateMessageRequest.

        Do not try to enrich the links within message

        :return: The skip_enrich_url of this UpdateMessageRequest.
        :rtype: bool
        """
        return self._skip_enrich_url

    @skip_enrich_url.setter
    def skip_enrich_url(self, skip_enrich_url):
        """Sets the skip_enrich_url of this UpdateMessageRequest.

        Do not try to enrich the links within message

        :param skip_enrich_url: The skip_enrich_url of this UpdateMessageRequest.
        :type skip_enrich_url: bool
        """

        self._skip_enrich_url = skip_enrich_url
