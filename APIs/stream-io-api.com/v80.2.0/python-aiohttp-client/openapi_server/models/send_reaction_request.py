# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reaction_request import ReactionRequest
from openapi_server import util


class SendReactionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, enforce_unique: bool=None, reaction: ReactionRequest=None, skip_push: bool=None):
        """SendReactionRequest - a model defined in OpenAPI

        :param id: The id of this SendReactionRequest.
        :param enforce_unique: The enforce_unique of this SendReactionRequest.
        :param reaction: The reaction of this SendReactionRequest.
        :param skip_push: The skip_push of this SendReactionRequest.
        """
        self.openapi_types = {
            'id': str,
            'enforce_unique': bool,
            'reaction': ReactionRequest,
            'skip_push': bool
        }

        self.attribute_map = {
            'id': 'ID',
            'enforce_unique': 'enforce_unique',
            'reaction': 'reaction',
            'skip_push': 'skip_push'
        }

        self._id = id
        self._enforce_unique = enforce_unique
        self._reaction = reaction
        self._skip_push = skip_push

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendReactionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendReactionRequest of this SendReactionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this SendReactionRequest.


        :return: The id of this SendReactionRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SendReactionRequest.


        :param id: The id of this SendReactionRequest.
        :type id: str
        """

        self._id = id

    @property
    def enforce_unique(self):
        """Gets the enforce_unique of this SendReactionRequest.

        Whether to replace all existing user reactions

        :return: The enforce_unique of this SendReactionRequest.
        :rtype: bool
        """
        return self._enforce_unique

    @enforce_unique.setter
    def enforce_unique(self, enforce_unique):
        """Sets the enforce_unique of this SendReactionRequest.

        Whether to replace all existing user reactions

        :param enforce_unique: The enforce_unique of this SendReactionRequest.
        :type enforce_unique: bool
        """

        self._enforce_unique = enforce_unique

    @property
    def reaction(self):
        """Gets the reaction of this SendReactionRequest.


        :return: The reaction of this SendReactionRequest.
        :rtype: ReactionRequest
        """
        return self._reaction

    @reaction.setter
    def reaction(self, reaction):
        """Sets the reaction of this SendReactionRequest.


        :param reaction: The reaction of this SendReactionRequest.
        :type reaction: ReactionRequest
        """
        if reaction is None:
            raise ValueError("Invalid value for `reaction`, must not be `None`")

        self._reaction = reaction

    @property
    def skip_push(self):
        """Gets the skip_push of this SendReactionRequest.

        Skips any mobile push notifications

        :return: The skip_push of this SendReactionRequest.
        :rtype: bool
        """
        return self._skip_push

    @skip_push.setter
    def skip_push(self, skip_push):
        """Sets the skip_push of this SendReactionRequest.

        Skips any mobile push notifications

        :param skip_push: The skip_push of this SendReactionRequest.
        :type skip_push: bool
        """

        self._skip_push = skip_push
