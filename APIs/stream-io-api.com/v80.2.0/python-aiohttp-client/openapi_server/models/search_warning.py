# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SearchWarning(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_search_cids: List[str]=None, channel_search_count: int=None, warning_code: int=None, warning_description: str=None):
        """SearchWarning - a model defined in OpenAPI

        :param channel_search_cids: The channel_search_cids of this SearchWarning.
        :param channel_search_count: The channel_search_count of this SearchWarning.
        :param warning_code: The warning_code of this SearchWarning.
        :param warning_description: The warning_description of this SearchWarning.
        """
        self.openapi_types = {
            'channel_search_cids': List[str],
            'channel_search_count': int,
            'warning_code': int,
            'warning_description': str
        }

        self.attribute_map = {
            'channel_search_cids': 'channel_search_cids',
            'channel_search_count': 'channel_search_count',
            'warning_code': 'warning_code',
            'warning_description': 'warning_description'
        }

        self._channel_search_cids = channel_search_cids
        self._channel_search_count = channel_search_count
        self._warning_code = warning_code
        self._warning_description = warning_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchWarning':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchWarning of this SearchWarning.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_search_cids(self):
        """Gets the channel_search_cids of this SearchWarning.

        Channel CIDs for the searched channels

        :return: The channel_search_cids of this SearchWarning.
        :rtype: List[str]
        """
        return self._channel_search_cids

    @channel_search_cids.setter
    def channel_search_cids(self, channel_search_cids):
        """Sets the channel_search_cids of this SearchWarning.

        Channel CIDs for the searched channels

        :param channel_search_cids: The channel_search_cids of this SearchWarning.
        :type channel_search_cids: List[str]
        """

        self._channel_search_cids = channel_search_cids

    @property
    def channel_search_count(self):
        """Gets the channel_search_count of this SearchWarning.

        Number of channels searched

        :return: The channel_search_count of this SearchWarning.
        :rtype: int
        """
        return self._channel_search_count

    @channel_search_count.setter
    def channel_search_count(self, channel_search_count):
        """Sets the channel_search_count of this SearchWarning.

        Number of channels searched

        :param channel_search_count: The channel_search_count of this SearchWarning.
        :type channel_search_count: int
        """

        self._channel_search_count = channel_search_count

    @property
    def warning_code(self):
        """Gets the warning_code of this SearchWarning.

        Code corresponding to the warning

        :return: The warning_code of this SearchWarning.
        :rtype: int
        """
        return self._warning_code

    @warning_code.setter
    def warning_code(self, warning_code):
        """Sets the warning_code of this SearchWarning.

        Code corresponding to the warning

        :param warning_code: The warning_code of this SearchWarning.
        :type warning_code: int
        """
        if warning_code is None:
            raise ValueError("Invalid value for `warning_code`, must not be `None`")

        self._warning_code = warning_code

    @property
    def warning_description(self):
        """Gets the warning_description of this SearchWarning.

        Description of the warning

        :return: The warning_description of this SearchWarning.
        :rtype: str
        """
        return self._warning_description

    @warning_description.setter
    def warning_description(self, warning_description):
        """Sets the warning_description of this SearchWarning.

        Description of the warning

        :param warning_description: The warning_description of this SearchWarning.
        :type warning_description: str
        """
        if warning_description is None:
            raise ValueError("Invalid value for `warning_description`, must not be `None`")

        self._warning_description = warning_description
