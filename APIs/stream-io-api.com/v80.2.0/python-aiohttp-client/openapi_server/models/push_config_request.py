# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PushConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offline_only: bool=None, version: str=None):
        """PushConfigRequest - a model defined in OpenAPI

        :param offline_only: The offline_only of this PushConfigRequest.
        :param version: The version of this PushConfigRequest.
        """
        self.openapi_types = {
            'offline_only': bool,
            'version': str
        }

        self.attribute_map = {
            'offline_only': 'offline_only',
            'version': 'version'
        }

        self._offline_only = offline_only
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PushConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PushConfigRequest of this PushConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offline_only(self):
        """Gets the offline_only of this PushConfigRequest.


        :return: The offline_only of this PushConfigRequest.
        :rtype: bool
        """
        return self._offline_only

    @offline_only.setter
    def offline_only(self, offline_only):
        """Sets the offline_only of this PushConfigRequest.


        :param offline_only: The offline_only of this PushConfigRequest.
        :type offline_only: bool
        """

        self._offline_only = offline_only

    @property
    def version(self):
        """Gets the version of this PushConfigRequest.


        :return: The version of this PushConfigRequest.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PushConfigRequest.


        :param version: The version of this PushConfigRequest.
        :type version: str
        """
        allowed_values = ["v1", "v2"]  # noqa: E501
        if version not in allowed_values:
            raise ValueError(
                "Invalid value for `version` ({0}), must be one of {1}"
                .format(version, allowed_values)
            )

        self._version = version
