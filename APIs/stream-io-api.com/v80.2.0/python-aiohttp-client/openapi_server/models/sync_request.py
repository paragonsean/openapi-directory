# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_object_request import UserObjectRequest
from openapi_server import util


class SyncRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_cids: List[str]=None, client_id: str=None, connection_id: str=None, last_sync_at: datetime=None, user: UserObjectRequest=None, user_id: str=None, watch: bool=None, with_inaccessible_cids: bool=None):
        """SyncRequest - a model defined in OpenAPI

        :param channel_cids: The channel_cids of this SyncRequest.
        :param client_id: The client_id of this SyncRequest.
        :param connection_id: The connection_id of this SyncRequest.
        :param last_sync_at: The last_sync_at of this SyncRequest.
        :param user: The user of this SyncRequest.
        :param user_id: The user_id of this SyncRequest.
        :param watch: The watch of this SyncRequest.
        :param with_inaccessible_cids: The with_inaccessible_cids of this SyncRequest.
        """
        self.openapi_types = {
            'channel_cids': List[str],
            'client_id': str,
            'connection_id': str,
            'last_sync_at': datetime,
            'user': UserObjectRequest,
            'user_id': str,
            'watch': bool,
            'with_inaccessible_cids': bool
        }

        self.attribute_map = {
            'channel_cids': 'channel_cids',
            'client_id': 'client_id',
            'connection_id': 'connection_id',
            'last_sync_at': 'last_sync_at',
            'user': 'user',
            'user_id': 'user_id',
            'watch': 'watch',
            'with_inaccessible_cids': 'with_inaccessible_cids'
        }

        self._channel_cids = channel_cids
        self._client_id = client_id
        self._connection_id = connection_id
        self._last_sync_at = last_sync_at
        self._user = user
        self._user_id = user_id
        self._watch = watch
        self._with_inaccessible_cids = with_inaccessible_cids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SyncRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SyncRequest of this SyncRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_cids(self):
        """Gets the channel_cids of this SyncRequest.

        List of channel CIDs to sync

        :return: The channel_cids of this SyncRequest.
        :rtype: List[str]
        """
        return self._channel_cids

    @channel_cids.setter
    def channel_cids(self, channel_cids):
        """Sets the channel_cids of this SyncRequest.

        List of channel CIDs to sync

        :param channel_cids: The channel_cids of this SyncRequest.
        :type channel_cids: List[str]
        """

        self._channel_cids = channel_cids

    @property
    def client_id(self):
        """Gets the client_id of this SyncRequest.


        :return: The client_id of this SyncRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this SyncRequest.


        :param client_id: The client_id of this SyncRequest.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def connection_id(self):
        """Gets the connection_id of this SyncRequest.


        :return: The connection_id of this SyncRequest.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this SyncRequest.


        :param connection_id: The connection_id of this SyncRequest.
        :type connection_id: str
        """

        self._connection_id = connection_id

    @property
    def last_sync_at(self):
        """Gets the last_sync_at of this SyncRequest.

        Date from which synchronization should happen

        :return: The last_sync_at of this SyncRequest.
        :rtype: datetime
        """
        return self._last_sync_at

    @last_sync_at.setter
    def last_sync_at(self, last_sync_at):
        """Sets the last_sync_at of this SyncRequest.

        Date from which synchronization should happen

        :param last_sync_at: The last_sync_at of this SyncRequest.
        :type last_sync_at: datetime
        """
        if last_sync_at is None:
            raise ValueError("Invalid value for `last_sync_at`, must not be `None`")

        self._last_sync_at = last_sync_at

    @property
    def user(self):
        """Gets the user of this SyncRequest.


        :return: The user of this SyncRequest.
        :rtype: UserObjectRequest
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this SyncRequest.


        :param user: The user of this SyncRequest.
        :type user: UserObjectRequest
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this SyncRequest.


        :return: The user_id of this SyncRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SyncRequest.


        :param user_id: The user_id of this SyncRequest.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def watch(self):
        """Gets the watch of this SyncRequest.

        If set to true this will start watching requested and newly added channels that user has access to. If error occurred with this option enabled and it is not an input error - channels will still be watched.

        :return: The watch of this SyncRequest.
        :rtype: bool
        """
        return self._watch

    @watch.setter
    def watch(self, watch):
        """Sets the watch of this SyncRequest.

        If set to true this will start watching requested and newly added channels that user has access to. If error occurred with this option enabled and it is not an input error - channels will still be watched.

        :param watch: The watch of this SyncRequest.
        :type watch: bool
        """

        self._watch = watch

    @property
    def with_inaccessible_cids(self):
        """Gets the with_inaccessible_cids of this SyncRequest.

        If set to true this will add 'inaccessible_cids' to response type

        :return: The with_inaccessible_cids of this SyncRequest.
        :rtype: bool
        """
        return self._with_inaccessible_cids

    @with_inaccessible_cids.setter
    def with_inaccessible_cids(self, with_inaccessible_cids):
        """Sets the with_inaccessible_cids of this SyncRequest.

        If set to true this will add 'inaccessible_cids' to response type

        :param with_inaccessible_cids: The with_inaccessible_cids of this SyncRequest.
        :type with_inaccessible_cids: bool
        """

        self._with_inaccessible_cids = with_inaccessible_cids
