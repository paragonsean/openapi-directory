# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_size import ImageSize
from openapi_server import util


class ImageUploadResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: str=None, file: str=None, thumb_url: str=None, upload_sizes: List[ImageSize]=None):
        """ImageUploadResponse - a model defined in OpenAPI

        :param duration: The duration of this ImageUploadResponse.
        :param file: The file of this ImageUploadResponse.
        :param thumb_url: The thumb_url of this ImageUploadResponse.
        :param upload_sizes: The upload_sizes of this ImageUploadResponse.
        """
        self.openapi_types = {
            'duration': str,
            'file': str,
            'thumb_url': str,
            'upload_sizes': List[ImageSize]
        }

        self.attribute_map = {
            'duration': 'duration',
            'file': 'file',
            'thumb_url': 'thumb_url',
            'upload_sizes': 'upload_sizes'
        }

        self._duration = duration
        self._file = file
        self._thumb_url = thumb_url
        self._upload_sizes = upload_sizes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageUploadResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageUploadResponse of this ImageUploadResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this ImageUploadResponse.


        :return: The duration of this ImageUploadResponse.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ImageUploadResponse.


        :param duration: The duration of this ImageUploadResponse.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def file(self):
        """Gets the file of this ImageUploadResponse.

        URL to the uploaded asset. Should be used to put to `asset_url` attachment field

        :return: The file of this ImageUploadResponse.
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this ImageUploadResponse.

        URL to the uploaded asset. Should be used to put to `asset_url` attachment field

        :param file: The file of this ImageUploadResponse.
        :type file: str
        """

        self._file = file

    @property
    def thumb_url(self):
        """Gets the thumb_url of this ImageUploadResponse.

        URL of the file thumbnail for supported file formats. Should be put to `thumb_url` attachment field

        :return: The thumb_url of this ImageUploadResponse.
        :rtype: str
        """
        return self._thumb_url

    @thumb_url.setter
    def thumb_url(self, thumb_url):
        """Sets the thumb_url of this ImageUploadResponse.

        URL of the file thumbnail for supported file formats. Should be put to `thumb_url` attachment field

        :param thumb_url: The thumb_url of this ImageUploadResponse.
        :type thumb_url: str
        """

        self._thumb_url = thumb_url

    @property
    def upload_sizes(self):
        """Gets the upload_sizes of this ImageUploadResponse.


        :return: The upload_sizes of this ImageUploadResponse.
        :rtype: List[ImageSize]
        """
        return self._upload_sizes

    @upload_sizes.setter
    def upload_sizes(self, upload_sizes):
        """Sets the upload_sizes of this ImageUploadResponse.


        :param upload_sizes: The upload_sizes of this ImageUploadResponse.
        :type upload_sizes: List[ImageSize]
        """

        self._upload_sizes = upload_sizes
