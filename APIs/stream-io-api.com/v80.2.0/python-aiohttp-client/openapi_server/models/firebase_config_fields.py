# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FirebaseConfigFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apn_template: str=None, credentials_json: str=None, data_template: str=None, enabled: bool=None, notification_template: str=None, server_key: str=None):
        """FirebaseConfigFields - a model defined in OpenAPI

        :param apn_template: The apn_template of this FirebaseConfigFields.
        :param credentials_json: The credentials_json of this FirebaseConfigFields.
        :param data_template: The data_template of this FirebaseConfigFields.
        :param enabled: The enabled of this FirebaseConfigFields.
        :param notification_template: The notification_template of this FirebaseConfigFields.
        :param server_key: The server_key of this FirebaseConfigFields.
        """
        self.openapi_types = {
            'apn_template': str,
            'credentials_json': str,
            'data_template': str,
            'enabled': bool,
            'notification_template': str,
            'server_key': str
        }

        self.attribute_map = {
            'apn_template': 'apn_template',
            'credentials_json': 'credentials_json',
            'data_template': 'data_template',
            'enabled': 'enabled',
            'notification_template': 'notification_template',
            'server_key': 'server_key'
        }

        self._apn_template = apn_template
        self._credentials_json = credentials_json
        self._data_template = data_template
        self._enabled = enabled
        self._notification_template = notification_template
        self._server_key = server_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FirebaseConfigFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FirebaseConfigFields of this FirebaseConfigFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apn_template(self):
        """Gets the apn_template of this FirebaseConfigFields.


        :return: The apn_template of this FirebaseConfigFields.
        :rtype: str
        """
        return self._apn_template

    @apn_template.setter
    def apn_template(self, apn_template):
        """Sets the apn_template of this FirebaseConfigFields.


        :param apn_template: The apn_template of this FirebaseConfigFields.
        :type apn_template: str
        """
        if apn_template is None:
            raise ValueError("Invalid value for `apn_template`, must not be `None`")

        self._apn_template = apn_template

    @property
    def credentials_json(self):
        """Gets the credentials_json of this FirebaseConfigFields.


        :return: The credentials_json of this FirebaseConfigFields.
        :rtype: str
        """
        return self._credentials_json

    @credentials_json.setter
    def credentials_json(self, credentials_json):
        """Sets the credentials_json of this FirebaseConfigFields.


        :param credentials_json: The credentials_json of this FirebaseConfigFields.
        :type credentials_json: str
        """

        self._credentials_json = credentials_json

    @property
    def data_template(self):
        """Gets the data_template of this FirebaseConfigFields.


        :return: The data_template of this FirebaseConfigFields.
        :rtype: str
        """
        return self._data_template

    @data_template.setter
    def data_template(self, data_template):
        """Sets the data_template of this FirebaseConfigFields.


        :param data_template: The data_template of this FirebaseConfigFields.
        :type data_template: str
        """
        if data_template is None:
            raise ValueError("Invalid value for `data_template`, must not be `None`")

        self._data_template = data_template

    @property
    def enabled(self):
        """Gets the enabled of this FirebaseConfigFields.


        :return: The enabled of this FirebaseConfigFields.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this FirebaseConfigFields.


        :param enabled: The enabled of this FirebaseConfigFields.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def notification_template(self):
        """Gets the notification_template of this FirebaseConfigFields.


        :return: The notification_template of this FirebaseConfigFields.
        :rtype: str
        """
        return self._notification_template

    @notification_template.setter
    def notification_template(self, notification_template):
        """Sets the notification_template of this FirebaseConfigFields.


        :param notification_template: The notification_template of this FirebaseConfigFields.
        :type notification_template: str
        """
        if notification_template is None:
            raise ValueError("Invalid value for `notification_template`, must not be `None`")

        self._notification_template = notification_template

    @property
    def server_key(self):
        """Gets the server_key of this FirebaseConfigFields.


        :return: The server_key of this FirebaseConfigFields.
        :rtype: str
        """
        return self._server_key

    @server_key.setter
    def server_key(self, server_key):
        """Sets the server_key of this FirebaseConfigFields.


        :param server_key: The server_key of this FirebaseConfigFields.
        :type server_key: str
        """

        self._server_key = server_key
