# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_object import UserObject
from openapi_server import util


class Read(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_read: datetime=None, last_read_message_id: str=None, unread_messages: int=None, user: UserObject=None):
        """Read - a model defined in OpenAPI

        :param last_read: The last_read of this Read.
        :param last_read_message_id: The last_read_message_id of this Read.
        :param unread_messages: The unread_messages of this Read.
        :param user: The user of this Read.
        """
        self.openapi_types = {
            'last_read': datetime,
            'last_read_message_id': str,
            'unread_messages': int,
            'user': UserObject
        }

        self.attribute_map = {
            'last_read': 'last_read',
            'last_read_message_id': 'last_read_message_id',
            'unread_messages': 'unread_messages',
            'user': 'user'
        }

        self._last_read = last_read
        self._last_read_message_id = last_read_message_id
        self._unread_messages = unread_messages
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Read':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Read of this Read.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_read(self):
        """Gets the last_read of this Read.


        :return: The last_read of this Read.
        :rtype: datetime
        """
        return self._last_read

    @last_read.setter
    def last_read(self, last_read):
        """Sets the last_read of this Read.


        :param last_read: The last_read of this Read.
        :type last_read: datetime
        """
        if last_read is None:
            raise ValueError("Invalid value for `last_read`, must not be `None`")

        self._last_read = last_read

    @property
    def last_read_message_id(self):
        """Gets the last_read_message_id of this Read.


        :return: The last_read_message_id of this Read.
        :rtype: str
        """
        return self._last_read_message_id

    @last_read_message_id.setter
    def last_read_message_id(self, last_read_message_id):
        """Sets the last_read_message_id of this Read.


        :param last_read_message_id: The last_read_message_id of this Read.
        :type last_read_message_id: str
        """
        if last_read_message_id is None:
            raise ValueError("Invalid value for `last_read_message_id`, must not be `None`")

        self._last_read_message_id = last_read_message_id

    @property
    def unread_messages(self):
        """Gets the unread_messages of this Read.


        :return: The unread_messages of this Read.
        :rtype: int
        """
        return self._unread_messages

    @unread_messages.setter
    def unread_messages(self, unread_messages):
        """Sets the unread_messages of this Read.


        :param unread_messages: The unread_messages of this Read.
        :type unread_messages: int
        """
        if unread_messages is None:
            raise ValueError("Invalid value for `unread_messages`, must not be `None`")

        self._unread_messages = unread_messages

    @property
    def user(self):
        """Gets the user of this Read.


        :return: The user of this Read.
        :rtype: UserObject
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Read.


        :param user: The user of this Read.
        :type user: UserObject
        """

        self._user = user
