# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Role(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, custom: bool=None, name: str=None, scopes: List[str]=None, updated_at: datetime=None):
        """Role - a model defined in OpenAPI

        :param created_at: The created_at of this Role.
        :param custom: The custom of this Role.
        :param name: The name of this Role.
        :param scopes: The scopes of this Role.
        :param updated_at: The updated_at of this Role.
        """
        self.openapi_types = {
            'created_at': datetime,
            'custom': bool,
            'name': str,
            'scopes': List[str],
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'custom': 'custom',
            'name': 'name',
            'scopes': 'scopes',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._custom = custom
        self._name = name
        self._scopes = scopes
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Role':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Role of this Role.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Role.

        Date/time of creation

        :return: The created_at of this Role.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Role.

        Date/time of creation

        :param created_at: The created_at of this Role.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def custom(self):
        """Gets the custom of this Role.

        Whether this is a custom role or built-in

        :return: The custom of this Role.
        :rtype: bool
        """
        return self._custom

    @custom.setter
    def custom(self, custom):
        """Sets the custom of this Role.

        Whether this is a custom role or built-in

        :param custom: The custom of this Role.
        :type custom: bool
        """
        if custom is None:
            raise ValueError("Invalid value for `custom`, must not be `None`")

        self._custom = custom

    @property
    def name(self):
        """Gets the name of this Role.

        Unique role name

        :return: The name of this Role.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Role.

        Unique role name

        :param name: The name of this Role.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def scopes(self):
        """Gets the scopes of this Role.

        List of scopes where this role is currently present. `.app` means that role is present in app-level grants

        :return: The scopes of this Role.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this Role.

        List of scopes where this role is currently present. `.app` means that role is present in app-level grants

        :param scopes: The scopes of this Role.
        :type scopes: List[str]
        """
        if scopes is None:
            raise ValueError("Invalid value for `scopes`, must not be `None`")

        self._scopes = scopes

    @property
    def updated_at(self):
        """Gets the updated_at of this Role.

        Date/time of the last update

        :return: The updated_at of this Role.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Role.

        Date/time of the last update

        :param updated_at: The updated_at of this Role.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
