# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckSQSResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: Dict[str, object]=None, duration: str=None, error: str=None, status: str=None):
        """CheckSQSResponse - a model defined in OpenAPI

        :param data: The data of this CheckSQSResponse.
        :param duration: The duration of this CheckSQSResponse.
        :param error: The error of this CheckSQSResponse.
        :param status: The status of this CheckSQSResponse.
        """
        self.openapi_types = {
            'data': Dict[str, object],
            'duration': str,
            'error': str,
            'status': str
        }

        self.attribute_map = {
            'data': 'data',
            'duration': 'duration',
            'error': 'error',
            'status': 'status'
        }

        self._data = data
        self._duration = duration
        self._error = error
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckSQSResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckSQSResponse of this CheckSQSResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this CheckSQSResponse.

        Error data

        :return: The data of this CheckSQSResponse.
        :rtype: Dict[str, object]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CheckSQSResponse.

        Error data

        :param data: The data of this CheckSQSResponse.
        :type data: Dict[str, object]
        """

        self._data = data

    @property
    def duration(self):
        """Gets the duration of this CheckSQSResponse.


        :return: The duration of this CheckSQSResponse.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CheckSQSResponse.


        :param duration: The duration of this CheckSQSResponse.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def error(self):
        """Gets the error of this CheckSQSResponse.

        Error text

        :return: The error of this CheckSQSResponse.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this CheckSQSResponse.

        Error text

        :param error: The error of this CheckSQSResponse.
        :type error: str
        """

        self._error = error

    @property
    def status(self):
        """Gets the status of this CheckSQSResponse.

        Validation result

        :return: The status of this CheckSQSResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CheckSQSResponse.

        Validation result

        :param status: The status of this CheckSQSResponse.
        :type status: str
        """
        allowed_values = ["ok", "error"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
