# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AudioSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_request_enabled: bool=None, opus_dtx_enabled: bool=None, redundant_coding_enabled: bool=None):
        """AudioSettings - a model defined in OpenAPI

        :param access_request_enabled: The access_request_enabled of this AudioSettings.
        :param opus_dtx_enabled: The opus_dtx_enabled of this AudioSettings.
        :param redundant_coding_enabled: The redundant_coding_enabled of this AudioSettings.
        """
        self.openapi_types = {
            'access_request_enabled': bool,
            'opus_dtx_enabled': bool,
            'redundant_coding_enabled': bool
        }

        self.attribute_map = {
            'access_request_enabled': 'access_request_enabled',
            'opus_dtx_enabled': 'opus_dtx_enabled',
            'redundant_coding_enabled': 'redundant_coding_enabled'
        }

        self._access_request_enabled = access_request_enabled
        self._opus_dtx_enabled = opus_dtx_enabled
        self._redundant_coding_enabled = redundant_coding_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioSettings of this AudioSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_request_enabled(self):
        """Gets the access_request_enabled of this AudioSettings.


        :return: The access_request_enabled of this AudioSettings.
        :rtype: bool
        """
        return self._access_request_enabled

    @access_request_enabled.setter
    def access_request_enabled(self, access_request_enabled):
        """Sets the access_request_enabled of this AudioSettings.


        :param access_request_enabled: The access_request_enabled of this AudioSettings.
        :type access_request_enabled: bool
        """
        if access_request_enabled is None:
            raise ValueError("Invalid value for `access_request_enabled`, must not be `None`")

        self._access_request_enabled = access_request_enabled

    @property
    def opus_dtx_enabled(self):
        """Gets the opus_dtx_enabled of this AudioSettings.


        :return: The opus_dtx_enabled of this AudioSettings.
        :rtype: bool
        """
        return self._opus_dtx_enabled

    @opus_dtx_enabled.setter
    def opus_dtx_enabled(self, opus_dtx_enabled):
        """Sets the opus_dtx_enabled of this AudioSettings.


        :param opus_dtx_enabled: The opus_dtx_enabled of this AudioSettings.
        :type opus_dtx_enabled: bool
        """
        if opus_dtx_enabled is None:
            raise ValueError("Invalid value for `opus_dtx_enabled`, must not be `None`")

        self._opus_dtx_enabled = opus_dtx_enabled

    @property
    def redundant_coding_enabled(self):
        """Gets the redundant_coding_enabled of this AudioSettings.


        :return: The redundant_coding_enabled of this AudioSettings.
        :rtype: bool
        """
        return self._redundant_coding_enabled

    @redundant_coding_enabled.setter
    def redundant_coding_enabled(self, redundant_coding_enabled):
        """Sets the redundant_coding_enabled of this AudioSettings.


        :param redundant_coding_enabled: The redundant_coding_enabled of this AudioSettings.
        :type redundant_coding_enabled: bool
        """
        if redundant_coding_enabled is None:
            raise ValueError("Invalid value for `redundant_coding_enabled`, must not be `None`")

        self._redundant_coding_enabled = redundant_coding_enabled
