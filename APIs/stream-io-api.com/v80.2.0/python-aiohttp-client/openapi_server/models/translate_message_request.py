# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TranslateMessageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language: str=None):
        """TranslateMessageRequest - a model defined in OpenAPI

        :param language: The language of this TranslateMessageRequest.
        """
        self.openapi_types = {
            'language': str
        }

        self.attribute_map = {
            'language': 'language'
        }

        self._language = language

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TranslateMessageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TranslateMessageRequest of this TranslateMessageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language(self):
        """Gets the language of this TranslateMessageRequest.

        Language to translate message to

        :return: The language of this TranslateMessageRequest.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this TranslateMessageRequest.

        Language to translate message to

        :param language: The language of this TranslateMessageRequest.
        :type language: str
        """
        allowed_values = ["af", "sq", "am", "ar", "az", "bn", "bs", "bg", "zh", "zh-TW", "hr", "cs", "da", "fa-AF", "nl", "en", "et", "fi", "fr", "fr-CA", "ka", "de", "el", "ha", "he", "hi", "hu", "id", "it", "ja", "ko", "lv", "ms", "false", "fa", "ps", "pl", "pt", "ro", "ru", "sr", "sk", "sl", "so", "es", "es-MX", "sw", "sv", "tl", "ta", "th", "tr", "uk", "ur", "vi"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"
                .format(language, allowed_values)
            )

        self._language = language
