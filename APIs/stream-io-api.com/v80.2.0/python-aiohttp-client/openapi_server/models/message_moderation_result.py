# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.moderation_response import ModerationResponse
from openapi_server.models.thresholds import Thresholds
from openapi_server import util


class MessageModerationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, ai_moderation_response: ModerationResponse=None, blocked_word: str=None, blocklist_name: str=None, created_at: datetime=None, message_id: str=None, moderated_by: str=None, moderation_thresholds: Thresholds=None, updated_at: datetime=None, user_bad_karma: bool=None, user_karma: float=None):
        """MessageModerationResult - a model defined in OpenAPI

        :param action: The action of this MessageModerationResult.
        :param ai_moderation_response: The ai_moderation_response of this MessageModerationResult.
        :param blocked_word: The blocked_word of this MessageModerationResult.
        :param blocklist_name: The blocklist_name of this MessageModerationResult.
        :param created_at: The created_at of this MessageModerationResult.
        :param message_id: The message_id of this MessageModerationResult.
        :param moderated_by: The moderated_by of this MessageModerationResult.
        :param moderation_thresholds: The moderation_thresholds of this MessageModerationResult.
        :param updated_at: The updated_at of this MessageModerationResult.
        :param user_bad_karma: The user_bad_karma of this MessageModerationResult.
        :param user_karma: The user_karma of this MessageModerationResult.
        """
        self.openapi_types = {
            'action': str,
            'ai_moderation_response': ModerationResponse,
            'blocked_word': str,
            'blocklist_name': str,
            'created_at': datetime,
            'message_id': str,
            'moderated_by': str,
            'moderation_thresholds': Thresholds,
            'updated_at': datetime,
            'user_bad_karma': bool,
            'user_karma': float
        }

        self.attribute_map = {
            'action': 'action',
            'ai_moderation_response': 'ai_moderation_response',
            'blocked_word': 'blocked_word',
            'blocklist_name': 'blocklist_name',
            'created_at': 'created_at',
            'message_id': 'message_id',
            'moderated_by': 'moderated_by',
            'moderation_thresholds': 'moderation_thresholds',
            'updated_at': 'updated_at',
            'user_bad_karma': 'user_bad_karma',
            'user_karma': 'user_karma'
        }

        self._action = action
        self._ai_moderation_response = ai_moderation_response
        self._blocked_word = blocked_word
        self._blocklist_name = blocklist_name
        self._created_at = created_at
        self._message_id = message_id
        self._moderated_by = moderated_by
        self._moderation_thresholds = moderation_thresholds
        self._updated_at = updated_at
        self._user_bad_karma = user_bad_karma
        self._user_karma = user_karma

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageModerationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageModerationResult of this MessageModerationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this MessageModerationResult.


        :return: The action of this MessageModerationResult.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this MessageModerationResult.


        :param action: The action of this MessageModerationResult.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def ai_moderation_response(self):
        """Gets the ai_moderation_response of this MessageModerationResult.


        :return: The ai_moderation_response of this MessageModerationResult.
        :rtype: ModerationResponse
        """
        return self._ai_moderation_response

    @ai_moderation_response.setter
    def ai_moderation_response(self, ai_moderation_response):
        """Sets the ai_moderation_response of this MessageModerationResult.


        :param ai_moderation_response: The ai_moderation_response of this MessageModerationResult.
        :type ai_moderation_response: ModerationResponse
        """

        self._ai_moderation_response = ai_moderation_response

    @property
    def blocked_word(self):
        """Gets the blocked_word of this MessageModerationResult.


        :return: The blocked_word of this MessageModerationResult.
        :rtype: str
        """
        return self._blocked_word

    @blocked_word.setter
    def blocked_word(self, blocked_word):
        """Sets the blocked_word of this MessageModerationResult.


        :param blocked_word: The blocked_word of this MessageModerationResult.
        :type blocked_word: str
        """

        self._blocked_word = blocked_word

    @property
    def blocklist_name(self):
        """Gets the blocklist_name of this MessageModerationResult.


        :return: The blocklist_name of this MessageModerationResult.
        :rtype: str
        """
        return self._blocklist_name

    @blocklist_name.setter
    def blocklist_name(self, blocklist_name):
        """Sets the blocklist_name of this MessageModerationResult.


        :param blocklist_name: The blocklist_name of this MessageModerationResult.
        :type blocklist_name: str
        """

        self._blocklist_name = blocklist_name

    @property
    def created_at(self):
        """Gets the created_at of this MessageModerationResult.


        :return: The created_at of this MessageModerationResult.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MessageModerationResult.


        :param created_at: The created_at of this MessageModerationResult.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def message_id(self):
        """Gets the message_id of this MessageModerationResult.


        :return: The message_id of this MessageModerationResult.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this MessageModerationResult.


        :param message_id: The message_id of this MessageModerationResult.
        :type message_id: str
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")

        self._message_id = message_id

    @property
    def moderated_by(self):
        """Gets the moderated_by of this MessageModerationResult.


        :return: The moderated_by of this MessageModerationResult.
        :rtype: str
        """
        return self._moderated_by

    @moderated_by.setter
    def moderated_by(self, moderated_by):
        """Sets the moderated_by of this MessageModerationResult.


        :param moderated_by: The moderated_by of this MessageModerationResult.
        :type moderated_by: str
        """

        self._moderated_by = moderated_by

    @property
    def moderation_thresholds(self):
        """Gets the moderation_thresholds of this MessageModerationResult.


        :return: The moderation_thresholds of this MessageModerationResult.
        :rtype: Thresholds
        """
        return self._moderation_thresholds

    @moderation_thresholds.setter
    def moderation_thresholds(self, moderation_thresholds):
        """Sets the moderation_thresholds of this MessageModerationResult.


        :param moderation_thresholds: The moderation_thresholds of this MessageModerationResult.
        :type moderation_thresholds: Thresholds
        """

        self._moderation_thresholds = moderation_thresholds

    @property
    def updated_at(self):
        """Gets the updated_at of this MessageModerationResult.


        :return: The updated_at of this MessageModerationResult.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MessageModerationResult.


        :param updated_at: The updated_at of this MessageModerationResult.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def user_bad_karma(self):
        """Gets the user_bad_karma of this MessageModerationResult.


        :return: The user_bad_karma of this MessageModerationResult.
        :rtype: bool
        """
        return self._user_bad_karma

    @user_bad_karma.setter
    def user_bad_karma(self, user_bad_karma):
        """Sets the user_bad_karma of this MessageModerationResult.


        :param user_bad_karma: The user_bad_karma of this MessageModerationResult.
        :type user_bad_karma: bool
        """
        if user_bad_karma is None:
            raise ValueError("Invalid value for `user_bad_karma`, must not be `None`")

        self._user_bad_karma = user_bad_karma

    @property
    def user_karma(self):
        """Gets the user_karma of this MessageModerationResult.


        :return: The user_karma of this MessageModerationResult.
        :rtype: float
        """
        return self._user_karma

    @user_karma.setter
    def user_karma(self, user_karma):
        """Sets the user_karma of this MessageModerationResult.


        :param user_karma: The user_karma of this MessageModerationResult.
        :type user_karma: float
        """
        if user_karma is None:
            raise ValueError("Invalid value for `user_karma`, must not be `None`")

        self._user_karma = user_karma
