# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_object_request import UserObjectRequest
from openapi_server import util


class UpdateChannelPartialRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, set: Dict[str, object]=None, unset: List[str]=None, user: UserObjectRequest=None, user_id: str=None):
        """UpdateChannelPartialRequest - a model defined in OpenAPI

        :param set: The set of this UpdateChannelPartialRequest.
        :param unset: The unset of this UpdateChannelPartialRequest.
        :param user: The user of this UpdateChannelPartialRequest.
        :param user_id: The user_id of this UpdateChannelPartialRequest.
        """
        self.openapi_types = {
            'set': Dict[str, object],
            'unset': List[str],
            'user': UserObjectRequest,
            'user_id': str
        }

        self.attribute_map = {
            'set': 'set',
            'unset': 'unset',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._set = set
        self._unset = unset
        self._user = user
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateChannelPartialRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateChannelPartialRequest of this UpdateChannelPartialRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def set(self):
        """Gets the set of this UpdateChannelPartialRequest.


        :return: The set of this UpdateChannelPartialRequest.
        :rtype: Dict[str, object]
        """
        return self._set

    @set.setter
    def set(self, set):
        """Sets the set of this UpdateChannelPartialRequest.


        :param set: The set of this UpdateChannelPartialRequest.
        :type set: Dict[str, object]
        """
        if set is None:
            raise ValueError("Invalid value for `set`, must not be `None`")

        self._set = set

    @property
    def unset(self):
        """Gets the unset of this UpdateChannelPartialRequest.


        :return: The unset of this UpdateChannelPartialRequest.
        :rtype: List[str]
        """
        return self._unset

    @unset.setter
    def unset(self, unset):
        """Sets the unset of this UpdateChannelPartialRequest.


        :param unset: The unset of this UpdateChannelPartialRequest.
        :type unset: List[str]
        """
        if unset is None:
            raise ValueError("Invalid value for `unset`, must not be `None`")

        self._unset = unset

    @property
    def user(self):
        """Gets the user of this UpdateChannelPartialRequest.


        :return: The user of this UpdateChannelPartialRequest.
        :rtype: UserObjectRequest
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UpdateChannelPartialRequest.


        :param user: The user of this UpdateChannelPartialRequest.
        :type user: UserObjectRequest
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this UpdateChannelPartialRequest.


        :return: The user_id of this UpdateChannelPartialRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UpdateChannelPartialRequest.


        :param user_id: The user_id of this UpdateChannelPartialRequest.
        :type user_id: str
        """

        self._user_id = user_id
