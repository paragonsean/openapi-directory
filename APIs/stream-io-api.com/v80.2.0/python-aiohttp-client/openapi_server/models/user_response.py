# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.push_notification_settings import PushNotificationSettings
from openapi_server import util


class UserResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ban_expires: datetime=None, banned: bool=None, created_at: datetime=None, deactivated_at: datetime=None, deleted_at: datetime=None, id: str=None, invisible: bool=None, language: str=None, last_active: datetime=None, online: bool=None, push_notifications: PushNotificationSettings=None, revoke_tokens_issued_before: datetime=None, role: str=None, shadow_banned: bool=None, teams: List[str]=None, updated_at: datetime=None):
        """UserResponse - a model defined in OpenAPI

        :param ban_expires: The ban_expires of this UserResponse.
        :param banned: The banned of this UserResponse.
        :param created_at: The created_at of this UserResponse.
        :param deactivated_at: The deactivated_at of this UserResponse.
        :param deleted_at: The deleted_at of this UserResponse.
        :param id: The id of this UserResponse.
        :param invisible: The invisible of this UserResponse.
        :param language: The language of this UserResponse.
        :param last_active: The last_active of this UserResponse.
        :param online: The online of this UserResponse.
        :param push_notifications: The push_notifications of this UserResponse.
        :param revoke_tokens_issued_before: The revoke_tokens_issued_before of this UserResponse.
        :param role: The role of this UserResponse.
        :param shadow_banned: The shadow_banned of this UserResponse.
        :param teams: The teams of this UserResponse.
        :param updated_at: The updated_at of this UserResponse.
        """
        self.openapi_types = {
            'ban_expires': datetime,
            'banned': bool,
            'created_at': datetime,
            'deactivated_at': datetime,
            'deleted_at': datetime,
            'id': str,
            'invisible': bool,
            'language': str,
            'last_active': datetime,
            'online': bool,
            'push_notifications': PushNotificationSettings,
            'revoke_tokens_issued_before': datetime,
            'role': str,
            'shadow_banned': bool,
            'teams': List[str],
            'updated_at': datetime
        }

        self.attribute_map = {
            'ban_expires': 'ban_expires',
            'banned': 'banned',
            'created_at': 'created_at',
            'deactivated_at': 'deactivated_at',
            'deleted_at': 'deleted_at',
            'id': 'id',
            'invisible': 'invisible',
            'language': 'language',
            'last_active': 'last_active',
            'online': 'online',
            'push_notifications': 'push_notifications',
            'revoke_tokens_issued_before': 'revoke_tokens_issued_before',
            'role': 'role',
            'shadow_banned': 'shadow_banned',
            'teams': 'teams',
            'updated_at': 'updated_at'
        }

        self._ban_expires = ban_expires
        self._banned = banned
        self._created_at = created_at
        self._deactivated_at = deactivated_at
        self._deleted_at = deleted_at
        self._id = id
        self._invisible = invisible
        self._language = language
        self._last_active = last_active
        self._online = online
        self._push_notifications = push_notifications
        self._revoke_tokens_issued_before = revoke_tokens_issued_before
        self._role = role
        self._shadow_banned = shadow_banned
        self._teams = teams
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserResponse of this UserResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ban_expires(self):
        """Gets the ban_expires of this UserResponse.


        :return: The ban_expires of this UserResponse.
        :rtype: datetime
        """
        return self._ban_expires

    @ban_expires.setter
    def ban_expires(self, ban_expires):
        """Sets the ban_expires of this UserResponse.


        :param ban_expires: The ban_expires of this UserResponse.
        :type ban_expires: datetime
        """

        self._ban_expires = ban_expires

    @property
    def banned(self):
        """Gets the banned of this UserResponse.


        :return: The banned of this UserResponse.
        :rtype: bool
        """
        return self._banned

    @banned.setter
    def banned(self, banned):
        """Sets the banned of this UserResponse.


        :param banned: The banned of this UserResponse.
        :type banned: bool
        """
        if banned is None:
            raise ValueError("Invalid value for `banned`, must not be `None`")

        self._banned = banned

    @property
    def created_at(self):
        """Gets the created_at of this UserResponse.


        :return: The created_at of this UserResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserResponse.


        :param created_at: The created_at of this UserResponse.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def deactivated_at(self):
        """Gets the deactivated_at of this UserResponse.


        :return: The deactivated_at of this UserResponse.
        :rtype: datetime
        """
        return self._deactivated_at

    @deactivated_at.setter
    def deactivated_at(self, deactivated_at):
        """Sets the deactivated_at of this UserResponse.


        :param deactivated_at: The deactivated_at of this UserResponse.
        :type deactivated_at: datetime
        """

        self._deactivated_at = deactivated_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this UserResponse.


        :return: The deleted_at of this UserResponse.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this UserResponse.


        :param deleted_at: The deleted_at of this UserResponse.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def id(self):
        """Gets the id of this UserResponse.


        :return: The id of this UserResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserResponse.


        :param id: The id of this UserResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def invisible(self):
        """Gets the invisible of this UserResponse.


        :return: The invisible of this UserResponse.
        :rtype: bool
        """
        return self._invisible

    @invisible.setter
    def invisible(self, invisible):
        """Sets the invisible of this UserResponse.


        :param invisible: The invisible of this UserResponse.
        :type invisible: bool
        """

        self._invisible = invisible

    @property
    def language(self):
        """Gets the language of this UserResponse.


        :return: The language of this UserResponse.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this UserResponse.


        :param language: The language of this UserResponse.
        :type language: str
        """

        self._language = language

    @property
    def last_active(self):
        """Gets the last_active of this UserResponse.


        :return: The last_active of this UserResponse.
        :rtype: datetime
        """
        return self._last_active

    @last_active.setter
    def last_active(self, last_active):
        """Sets the last_active of this UserResponse.


        :param last_active: The last_active of this UserResponse.
        :type last_active: datetime
        """

        self._last_active = last_active

    @property
    def online(self):
        """Gets the online of this UserResponse.


        :return: The online of this UserResponse.
        :rtype: bool
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this UserResponse.


        :param online: The online of this UserResponse.
        :type online: bool
        """
        if online is None:
            raise ValueError("Invalid value for `online`, must not be `None`")

        self._online = online

    @property
    def push_notifications(self):
        """Gets the push_notifications of this UserResponse.


        :return: The push_notifications of this UserResponse.
        :rtype: PushNotificationSettings
        """
        return self._push_notifications

    @push_notifications.setter
    def push_notifications(self, push_notifications):
        """Sets the push_notifications of this UserResponse.


        :param push_notifications: The push_notifications of this UserResponse.
        :type push_notifications: PushNotificationSettings
        """

        self._push_notifications = push_notifications

    @property
    def revoke_tokens_issued_before(self):
        """Gets the revoke_tokens_issued_before of this UserResponse.


        :return: The revoke_tokens_issued_before of this UserResponse.
        :rtype: datetime
        """
        return self._revoke_tokens_issued_before

    @revoke_tokens_issued_before.setter
    def revoke_tokens_issued_before(self, revoke_tokens_issued_before):
        """Sets the revoke_tokens_issued_before of this UserResponse.


        :param revoke_tokens_issued_before: The revoke_tokens_issued_before of this UserResponse.
        :type revoke_tokens_issued_before: datetime
        """

        self._revoke_tokens_issued_before = revoke_tokens_issued_before

    @property
    def role(self):
        """Gets the role of this UserResponse.


        :return: The role of this UserResponse.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserResponse.


        :param role: The role of this UserResponse.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role

    @property
    def shadow_banned(self):
        """Gets the shadow_banned of this UserResponse.

        Whether user is shadow banned or not

        :return: The shadow_banned of this UserResponse.
        :rtype: bool
        """
        return self._shadow_banned

    @shadow_banned.setter
    def shadow_banned(self, shadow_banned):
        """Sets the shadow_banned of this UserResponse.

        Whether user is shadow banned or not

        :param shadow_banned: The shadow_banned of this UserResponse.
        :type shadow_banned: bool
        """
        if shadow_banned is None:
            raise ValueError("Invalid value for `shadow_banned`, must not be `None`")

        self._shadow_banned = shadow_banned

    @property
    def teams(self):
        """Gets the teams of this UserResponse.


        :return: The teams of this UserResponse.
        :rtype: List[str]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this UserResponse.


        :param teams: The teams of this UserResponse.
        :type teams: List[str]
        """

        self._teams = teams

    @property
    def updated_at(self):
        """Gets the updated_at of this UserResponse.


        :return: The updated_at of this UserResponse.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this UserResponse.


        :param updated_at: The updated_at of this UserResponse.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
