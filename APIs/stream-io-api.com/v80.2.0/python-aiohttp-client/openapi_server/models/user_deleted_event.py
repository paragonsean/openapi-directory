# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_object import UserObject
from openapi_server import util


class UserDeletedEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, delete_conversation_channels: bool=None, hard_delete: bool=None, mark_messages_deleted: bool=None, type: str='user.deleted', user: UserObject=None):
        """UserDeletedEvent - a model defined in OpenAPI

        :param created_at: The created_at of this UserDeletedEvent.
        :param delete_conversation_channels: The delete_conversation_channels of this UserDeletedEvent.
        :param hard_delete: The hard_delete of this UserDeletedEvent.
        :param mark_messages_deleted: The mark_messages_deleted of this UserDeletedEvent.
        :param type: The type of this UserDeletedEvent.
        :param user: The user of this UserDeletedEvent.
        """
        self.openapi_types = {
            'created_at': datetime,
            'delete_conversation_channels': bool,
            'hard_delete': bool,
            'mark_messages_deleted': bool,
            'type': str,
            'user': UserObject
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'delete_conversation_channels': 'delete_conversation_channels',
            'hard_delete': 'hard_delete',
            'mark_messages_deleted': 'mark_messages_deleted',
            'type': 'type',
            'user': 'user'
        }

        self._created_at = created_at
        self._delete_conversation_channels = delete_conversation_channels
        self._hard_delete = hard_delete
        self._mark_messages_deleted = mark_messages_deleted
        self._type = type
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserDeletedEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserDeletedEvent of this UserDeletedEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this UserDeletedEvent.


        :return: The created_at of this UserDeletedEvent.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UserDeletedEvent.


        :param created_at: The created_at of this UserDeletedEvent.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def delete_conversation_channels(self):
        """Gets the delete_conversation_channels of this UserDeletedEvent.


        :return: The delete_conversation_channels of this UserDeletedEvent.
        :rtype: bool
        """
        return self._delete_conversation_channels

    @delete_conversation_channels.setter
    def delete_conversation_channels(self, delete_conversation_channels):
        """Sets the delete_conversation_channels of this UserDeletedEvent.


        :param delete_conversation_channels: The delete_conversation_channels of this UserDeletedEvent.
        :type delete_conversation_channels: bool
        """
        if delete_conversation_channels is None:
            raise ValueError("Invalid value for `delete_conversation_channels`, must not be `None`")

        self._delete_conversation_channels = delete_conversation_channels

    @property
    def hard_delete(self):
        """Gets the hard_delete of this UserDeletedEvent.


        :return: The hard_delete of this UserDeletedEvent.
        :rtype: bool
        """
        return self._hard_delete

    @hard_delete.setter
    def hard_delete(self, hard_delete):
        """Sets the hard_delete of this UserDeletedEvent.


        :param hard_delete: The hard_delete of this UserDeletedEvent.
        :type hard_delete: bool
        """
        if hard_delete is None:
            raise ValueError("Invalid value for `hard_delete`, must not be `None`")

        self._hard_delete = hard_delete

    @property
    def mark_messages_deleted(self):
        """Gets the mark_messages_deleted of this UserDeletedEvent.


        :return: The mark_messages_deleted of this UserDeletedEvent.
        :rtype: bool
        """
        return self._mark_messages_deleted

    @mark_messages_deleted.setter
    def mark_messages_deleted(self, mark_messages_deleted):
        """Sets the mark_messages_deleted of this UserDeletedEvent.


        :param mark_messages_deleted: The mark_messages_deleted of this UserDeletedEvent.
        :type mark_messages_deleted: bool
        """
        if mark_messages_deleted is None:
            raise ValueError("Invalid value for `mark_messages_deleted`, must not be `None`")

        self._mark_messages_deleted = mark_messages_deleted

    @property
    def type(self):
        """Gets the type of this UserDeletedEvent.


        :return: The type of this UserDeletedEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UserDeletedEvent.


        :param type: The type of this UserDeletedEvent.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def user(self):
        """Gets the user of this UserDeletedEvent.


        :return: The user of this UserDeletedEvent.
        :rtype: UserObject
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UserDeletedEvent.


        :param user: The user of this UserDeletedEvent.
        :type user: UserObject
        """

        self._user = user
