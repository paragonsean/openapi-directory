# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceErrorInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_message: str=None, provider: str=None, provider_name: str=None):
        """DeviceErrorInfo - a model defined in OpenAPI

        :param error_message: The error_message of this DeviceErrorInfo.
        :param provider: The provider of this DeviceErrorInfo.
        :param provider_name: The provider_name of this DeviceErrorInfo.
        """
        self.openapi_types = {
            'error_message': str,
            'provider': str,
            'provider_name': str
        }

        self.attribute_map = {
            'error_message': 'error_message',
            'provider': 'provider',
            'provider_name': 'provider_name'
        }

        self._error_message = error_message
        self._provider = provider
        self._provider_name = provider_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceErrorInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceErrorInfo of this DeviceErrorInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_message(self):
        """Gets the error_message of this DeviceErrorInfo.


        :return: The error_message of this DeviceErrorInfo.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this DeviceErrorInfo.


        :param error_message: The error_message of this DeviceErrorInfo.
        :type error_message: str
        """
        if error_message is None:
            raise ValueError("Invalid value for `error_message`, must not be `None`")

        self._error_message = error_message

    @property
    def provider(self):
        """Gets the provider of this DeviceErrorInfo.


        :return: The provider of this DeviceErrorInfo.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this DeviceErrorInfo.


        :param provider: The provider of this DeviceErrorInfo.
        :type provider: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def provider_name(self):
        """Gets the provider_name of this DeviceErrorInfo.


        :return: The provider_name of this DeviceErrorInfo.
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this DeviceErrorInfo.


        :param provider_name: The provider_name of this DeviceErrorInfo.
        :type provider_name: str
        """
        if provider_name is None:
            raise ValueError("Invalid value for `provider_name`, must not be `None`")

        self._provider_name = provider_name
