# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChannelConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blocklist: str=None, blocklist_behavior: str=None, commands: List[str]=None, grants: Dict[str, List[str]]=None, max_message_length: int=None, quotes: bool=None, reactions: bool=None, replies: bool=None, typing_events: bool=None, uploads: bool=None, url_enrichment: bool=None):
        """ChannelConfigRequest - a model defined in OpenAPI

        :param blocklist: The blocklist of this ChannelConfigRequest.
        :param blocklist_behavior: The blocklist_behavior of this ChannelConfigRequest.
        :param commands: The commands of this ChannelConfigRequest.
        :param grants: The grants of this ChannelConfigRequest.
        :param max_message_length: The max_message_length of this ChannelConfigRequest.
        :param quotes: The quotes of this ChannelConfigRequest.
        :param reactions: The reactions of this ChannelConfigRequest.
        :param replies: The replies of this ChannelConfigRequest.
        :param typing_events: The typing_events of this ChannelConfigRequest.
        :param uploads: The uploads of this ChannelConfigRequest.
        :param url_enrichment: The url_enrichment of this ChannelConfigRequest.
        """
        self.openapi_types = {
            'blocklist': str,
            'blocklist_behavior': str,
            'commands': List[str],
            'grants': Dict[str, List[str]],
            'max_message_length': int,
            'quotes': bool,
            'reactions': bool,
            'replies': bool,
            'typing_events': bool,
            'uploads': bool,
            'url_enrichment': bool
        }

        self.attribute_map = {
            'blocklist': 'blocklist',
            'blocklist_behavior': 'blocklist_behavior',
            'commands': 'commands',
            'grants': 'grants',
            'max_message_length': 'max_message_length',
            'quotes': 'quotes',
            'reactions': 'reactions',
            'replies': 'replies',
            'typing_events': 'typing_events',
            'uploads': 'uploads',
            'url_enrichment': 'url_enrichment'
        }

        self._blocklist = blocklist
        self._blocklist_behavior = blocklist_behavior
        self._commands = commands
        self._grants = grants
        self._max_message_length = max_message_length
        self._quotes = quotes
        self._reactions = reactions
        self._replies = replies
        self._typing_events = typing_events
        self._uploads = uploads
        self._url_enrichment = url_enrichment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelConfigRequest of this ChannelConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blocklist(self):
        """Gets the blocklist of this ChannelConfigRequest.


        :return: The blocklist of this ChannelConfigRequest.
        :rtype: str
        """
        return self._blocklist

    @blocklist.setter
    def blocklist(self, blocklist):
        """Sets the blocklist of this ChannelConfigRequest.


        :param blocklist: The blocklist of this ChannelConfigRequest.
        :type blocklist: str
        """

        self._blocklist = blocklist

    @property
    def blocklist_behavior(self):
        """Gets the blocklist_behavior of this ChannelConfigRequest.


        :return: The blocklist_behavior of this ChannelConfigRequest.
        :rtype: str
        """
        return self._blocklist_behavior

    @blocklist_behavior.setter
    def blocklist_behavior(self, blocklist_behavior):
        """Sets the blocklist_behavior of this ChannelConfigRequest.


        :param blocklist_behavior: The blocklist_behavior of this ChannelConfigRequest.
        :type blocklist_behavior: str
        """
        allowed_values = ["flag", "block"]  # noqa: E501
        if blocklist_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `blocklist_behavior` ({0}), must be one of {1}"
                .format(blocklist_behavior, allowed_values)
            )

        self._blocklist_behavior = blocklist_behavior

    @property
    def commands(self):
        """Gets the commands of this ChannelConfigRequest.


        :return: The commands of this ChannelConfigRequest.
        :rtype: List[str]
        """
        return self._commands

    @commands.setter
    def commands(self, commands):
        """Sets the commands of this ChannelConfigRequest.


        :param commands: The commands of this ChannelConfigRequest.
        :type commands: List[str]
        """

        self._commands = commands

    @property
    def grants(self):
        """Gets the grants of this ChannelConfigRequest.


        :return: The grants of this ChannelConfigRequest.
        :rtype: Dict[str, List[str]]
        """
        return self._grants

    @grants.setter
    def grants(self, grants):
        """Sets the grants of this ChannelConfigRequest.


        :param grants: The grants of this ChannelConfigRequest.
        :type grants: Dict[str, List[str]]
        """

        self._grants = grants

    @property
    def max_message_length(self):
        """Gets the max_message_length of this ChannelConfigRequest.

        Overrides max message length

        :return: The max_message_length of this ChannelConfigRequest.
        :rtype: int
        """
        return self._max_message_length

    @max_message_length.setter
    def max_message_length(self, max_message_length):
        """Sets the max_message_length of this ChannelConfigRequest.

        Overrides max message length

        :param max_message_length: The max_message_length of this ChannelConfigRequest.
        :type max_message_length: int
        """
        if max_message_length is not None and max_message_length > 20000:
            raise ValueError("Invalid value for `max_message_length`, must be a value less than or equal to `20000`")

        self._max_message_length = max_message_length

    @property
    def quotes(self):
        """Gets the quotes of this ChannelConfigRequest.

        Enables message quotes

        :return: The quotes of this ChannelConfigRequest.
        :rtype: bool
        """
        return self._quotes

    @quotes.setter
    def quotes(self, quotes):
        """Sets the quotes of this ChannelConfigRequest.

        Enables message quotes

        :param quotes: The quotes of this ChannelConfigRequest.
        :type quotes: bool
        """

        self._quotes = quotes

    @property
    def reactions(self):
        """Gets the reactions of this ChannelConfigRequest.

        Enables or disables reactions

        :return: The reactions of this ChannelConfigRequest.
        :rtype: bool
        """
        return self._reactions

    @reactions.setter
    def reactions(self, reactions):
        """Sets the reactions of this ChannelConfigRequest.

        Enables or disables reactions

        :param reactions: The reactions of this ChannelConfigRequest.
        :type reactions: bool
        """

        self._reactions = reactions

    @property
    def replies(self):
        """Gets the replies of this ChannelConfigRequest.

        Enables message replies (threads)

        :return: The replies of this ChannelConfigRequest.
        :rtype: bool
        """
        return self._replies

    @replies.setter
    def replies(self, replies):
        """Sets the replies of this ChannelConfigRequest.

        Enables message replies (threads)

        :param replies: The replies of this ChannelConfigRequest.
        :type replies: bool
        """

        self._replies = replies

    @property
    def typing_events(self):
        """Gets the typing_events of this ChannelConfigRequest.

        Enables or disables typing events

        :return: The typing_events of this ChannelConfigRequest.
        :rtype: bool
        """
        return self._typing_events

    @typing_events.setter
    def typing_events(self, typing_events):
        """Sets the typing_events of this ChannelConfigRequest.

        Enables or disables typing events

        :param typing_events: The typing_events of this ChannelConfigRequest.
        :type typing_events: bool
        """

        self._typing_events = typing_events

    @property
    def uploads(self):
        """Gets the uploads of this ChannelConfigRequest.

        Enables or disables file uploads

        :return: The uploads of this ChannelConfigRequest.
        :rtype: bool
        """
        return self._uploads

    @uploads.setter
    def uploads(self, uploads):
        """Sets the uploads of this ChannelConfigRequest.

        Enables or disables file uploads

        :param uploads: The uploads of this ChannelConfigRequest.
        :type uploads: bool
        """

        self._uploads = uploads

    @property
    def url_enrichment(self):
        """Gets the url_enrichment of this ChannelConfigRequest.

        Enables or disables URL enrichment

        :return: The url_enrichment of this ChannelConfigRequest.
        :rtype: bool
        """
        return self._url_enrichment

    @url_enrichment.setter
    def url_enrichment(self, url_enrichment):
        """Sets the url_enrichment of this ChannelConfigRequest.

        Enables or disables URL enrichment

        :param url_enrichment: The url_enrichment of this ChannelConfigRequest.
        :type url_enrichment: bool
        """

        self._url_enrichment = url_enrichment
