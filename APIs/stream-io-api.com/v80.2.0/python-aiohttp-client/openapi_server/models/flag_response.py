# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flag import Flag
from openapi_server import util


class FlagResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: str=None, flag: Flag=None):
        """FlagResponse - a model defined in OpenAPI

        :param duration: The duration of this FlagResponse.
        :param flag: The flag of this FlagResponse.
        """
        self.openapi_types = {
            'duration': str,
            'flag': Flag
        }

        self.attribute_map = {
            'duration': 'duration',
            'flag': 'flag'
        }

        self._duration = duration
        self._flag = flag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FlagResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FlagResponse of this FlagResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this FlagResponse.

        Duration of the request in human-readable format

        :return: The duration of this FlagResponse.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this FlagResponse.

        Duration of the request in human-readable format

        :param duration: The duration of this FlagResponse.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def flag(self):
        """Gets the flag of this FlagResponse.


        :return: The flag of this FlagResponse.
        :rtype: Flag
        """
        return self._flag

    @flag.setter
    def flag(self, flag):
        """Sets the flag of this FlagResponse.


        :param flag: The flag of this FlagResponse.
        :type flag: Flag
        """

        self._flag = flag
