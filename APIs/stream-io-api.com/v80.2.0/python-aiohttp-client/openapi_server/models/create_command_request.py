# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateCommandRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, args: str=None, description: str=None, name: str=None, set: str=None):
        """CreateCommandRequest - a model defined in OpenAPI

        :param args: The args of this CreateCommandRequest.
        :param description: The description of this CreateCommandRequest.
        :param name: The name of this CreateCommandRequest.
        :param set: The set of this CreateCommandRequest.
        """
        self.openapi_types = {
            'args': str,
            'description': str,
            'name': str,
            'set': str
        }

        self.attribute_map = {
            'args': 'args',
            'description': 'description',
            'name': 'name',
            'set': 'set'
        }

        self._args = args
        self._description = description
        self._name = name
        self._set = set

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCommandRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCommandRequest of this CreateCommandRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def args(self):
        """Gets the args of this CreateCommandRequest.

        Arguments help text, shown in commands auto-completion

        :return: The args of this CreateCommandRequest.
        :rtype: str
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this CreateCommandRequest.

        Arguments help text, shown in commands auto-completion

        :param args: The args of this CreateCommandRequest.
        :type args: str
        """
        if args is not None and len(args) > 255:
            raise ValueError("Invalid value for `args`, length must be less than or equal to `255`")

        self._args = args

    @property
    def description(self):
        """Gets the description of this CreateCommandRequest.

        Description, shown in commands auto-completion

        :return: The description of this CreateCommandRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateCommandRequest.

        Description, shown in commands auto-completion

        :param description: The description of this CreateCommandRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateCommandRequest.

        Unique command name

        :return: The name of this CreateCommandRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateCommandRequest.

        Unique command name

        :param name: The name of this CreateCommandRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def set(self):
        """Gets the set of this CreateCommandRequest.

        Set name used for grouping commands

        :return: The set of this CreateCommandRequest.
        :rtype: str
        """
        return self._set

    @set.setter
    def set(self, set):
        """Sets the set of this CreateCommandRequest.

        Set name used for grouping commands

        :param set: The set of this CreateCommandRequest.
        :type set: str
        """
        if set is not None and len(set) > 255:
            raise ValueError("Invalid value for `set`, length must be less than or equal to `255`")

        self._set = set
