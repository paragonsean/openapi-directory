# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_request import MessageRequest
from openapi_server.models.user_object_request import UserObjectRequest
from openapi_server import util


class TruncateChannelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hard_delete: bool=None, message: MessageRequest=None, skip_push: bool=None, truncated_at: datetime=None, user: UserObjectRequest=None, user_id: str=None):
        """TruncateChannelRequest - a model defined in OpenAPI

        :param hard_delete: The hard_delete of this TruncateChannelRequest.
        :param message: The message of this TruncateChannelRequest.
        :param skip_push: The skip_push of this TruncateChannelRequest.
        :param truncated_at: The truncated_at of this TruncateChannelRequest.
        :param user: The user of this TruncateChannelRequest.
        :param user_id: The user_id of this TruncateChannelRequest.
        """
        self.openapi_types = {
            'hard_delete': bool,
            'message': MessageRequest,
            'skip_push': bool,
            'truncated_at': datetime,
            'user': UserObjectRequest,
            'user_id': str
        }

        self.attribute_map = {
            'hard_delete': 'hard_delete',
            'message': 'message',
            'skip_push': 'skip_push',
            'truncated_at': 'truncated_at',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._hard_delete = hard_delete
        self._message = message
        self._skip_push = skip_push
        self._truncated_at = truncated_at
        self._user = user
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TruncateChannelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TruncateChannelRequest of this TruncateChannelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hard_delete(self):
        """Gets the hard_delete of this TruncateChannelRequest.

        Permanently delete channel data (messages, reactions, etc.)

        :return: The hard_delete of this TruncateChannelRequest.
        :rtype: bool
        """
        return self._hard_delete

    @hard_delete.setter
    def hard_delete(self, hard_delete):
        """Sets the hard_delete of this TruncateChannelRequest.

        Permanently delete channel data (messages, reactions, etc.)

        :param hard_delete: The hard_delete of this TruncateChannelRequest.
        :type hard_delete: bool
        """

        self._hard_delete = hard_delete

    @property
    def message(self):
        """Gets the message of this TruncateChannelRequest.


        :return: The message of this TruncateChannelRequest.
        :rtype: MessageRequest
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TruncateChannelRequest.


        :param message: The message of this TruncateChannelRequest.
        :type message: MessageRequest
        """

        self._message = message

    @property
    def skip_push(self):
        """Gets the skip_push of this TruncateChannelRequest.

        When `message` is set disables all push notifications for it

        :return: The skip_push of this TruncateChannelRequest.
        :rtype: bool
        """
        return self._skip_push

    @skip_push.setter
    def skip_push(self, skip_push):
        """Sets the skip_push of this TruncateChannelRequest.

        When `message` is set disables all push notifications for it

        :param skip_push: The skip_push of this TruncateChannelRequest.
        :type skip_push: bool
        """

        self._skip_push = skip_push

    @property
    def truncated_at(self):
        """Gets the truncated_at of this TruncateChannelRequest.

        Truncate channel data up to `truncated_at`. The system message (if provided) creation time is always greater than `truncated_at`

        :return: The truncated_at of this TruncateChannelRequest.
        :rtype: datetime
        """
        return self._truncated_at

    @truncated_at.setter
    def truncated_at(self, truncated_at):
        """Sets the truncated_at of this TruncateChannelRequest.

        Truncate channel data up to `truncated_at`. The system message (if provided) creation time is always greater than `truncated_at`

        :param truncated_at: The truncated_at of this TruncateChannelRequest.
        :type truncated_at: datetime
        """

        self._truncated_at = truncated_at

    @property
    def user(self):
        """Gets the user of this TruncateChannelRequest.


        :return: The user of this TruncateChannelRequest.
        :rtype: UserObjectRequest
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this TruncateChannelRequest.


        :param user: The user of this TruncateChannelRequest.
        :type user: UserObjectRequest
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this TruncateChannelRequest.


        :return: The user_id of this TruncateChannelRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TruncateChannelRequest.


        :param user_id: The user_id of this TruncateChannelRequest.
        :type user_id: str
        """

        self._user_id = user_id
