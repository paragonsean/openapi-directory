# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment import Attachment
from openapi_server import util


class Campaign(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[Attachment]=None, channel_type: str=None, completed_at: datetime=None, created_at: datetime=None, defaults: Dict[str, str]=None, description: str=None, details: str=None, errored_messages: int=None, failed_at: datetime=None, id: str=None, name: str=None, resumed_at: datetime=None, scheduled_at: datetime=None, scheduled_for: datetime=None, segment_id: str=None, sender_id: str=None, sent_messages: int=None, status: str=None, stopped_at: datetime=None, task_id: str=None, text: str=None, updated_at: datetime=None):
        """Campaign - a model defined in OpenAPI

        :param attachments: The attachments of this Campaign.
        :param channel_type: The channel_type of this Campaign.
        :param completed_at: The completed_at of this Campaign.
        :param created_at: The created_at of this Campaign.
        :param defaults: The defaults of this Campaign.
        :param description: The description of this Campaign.
        :param details: The details of this Campaign.
        :param errored_messages: The errored_messages of this Campaign.
        :param failed_at: The failed_at of this Campaign.
        :param id: The id of this Campaign.
        :param name: The name of this Campaign.
        :param resumed_at: The resumed_at of this Campaign.
        :param scheduled_at: The scheduled_at of this Campaign.
        :param scheduled_for: The scheduled_for of this Campaign.
        :param segment_id: The segment_id of this Campaign.
        :param sender_id: The sender_id of this Campaign.
        :param sent_messages: The sent_messages of this Campaign.
        :param status: The status of this Campaign.
        :param stopped_at: The stopped_at of this Campaign.
        :param task_id: The task_id of this Campaign.
        :param text: The text of this Campaign.
        :param updated_at: The updated_at of this Campaign.
        """
        self.openapi_types = {
            'attachments': List[Attachment],
            'channel_type': str,
            'completed_at': datetime,
            'created_at': datetime,
            'defaults': Dict[str, str],
            'description': str,
            'details': str,
            'errored_messages': int,
            'failed_at': datetime,
            'id': str,
            'name': str,
            'resumed_at': datetime,
            'scheduled_at': datetime,
            'scheduled_for': datetime,
            'segment_id': str,
            'sender_id': str,
            'sent_messages': int,
            'status': str,
            'stopped_at': datetime,
            'task_id': str,
            'text': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'channel_type': 'channel_type',
            'completed_at': 'completed_at',
            'created_at': 'created_at',
            'defaults': 'defaults',
            'description': 'description',
            'details': 'details',
            'errored_messages': 'errored_messages',
            'failed_at': 'failed_at',
            'id': 'id',
            'name': 'name',
            'resumed_at': 'resumed_at',
            'scheduled_at': 'scheduled_at',
            'scheduled_for': 'scheduled_for',
            'segment_id': 'segment_id',
            'sender_id': 'sender_id',
            'sent_messages': 'sent_messages',
            'status': 'status',
            'stopped_at': 'stopped_at',
            'task_id': 'task_id',
            'text': 'text',
            'updated_at': 'updated_at'
        }

        self._attachments = attachments
        self._channel_type = channel_type
        self._completed_at = completed_at
        self._created_at = created_at
        self._defaults = defaults
        self._description = description
        self._details = details
        self._errored_messages = errored_messages
        self._failed_at = failed_at
        self._id = id
        self._name = name
        self._resumed_at = resumed_at
        self._scheduled_at = scheduled_at
        self._scheduled_for = scheduled_for
        self._segment_id = segment_id
        self._sender_id = sender_id
        self._sent_messages = sent_messages
        self._status = status
        self._stopped_at = stopped_at
        self._task_id = task_id
        self._text = text
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Campaign':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Campaign of this Campaign.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this Campaign.


        :return: The attachments of this Campaign.
        :rtype: List[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Campaign.


        :param attachments: The attachments of this Campaign.
        :type attachments: List[Attachment]
        """
        if attachments is None:
            raise ValueError("Invalid value for `attachments`, must not be `None`")

        self._attachments = attachments

    @property
    def channel_type(self):
        """Gets the channel_type of this Campaign.


        :return: The channel_type of this Campaign.
        :rtype: str
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this Campaign.


        :param channel_type: The channel_type of this Campaign.
        :type channel_type: str
        """
        if channel_type is None:
            raise ValueError("Invalid value for `channel_type`, must not be `None`")
        if channel_type is not None and len(channel_type) > 64:
            raise ValueError("Invalid value for `channel_type`, length must be less than or equal to `64`")

        self._channel_type = channel_type

    @property
    def completed_at(self):
        """Gets the completed_at of this Campaign.


        :return: The completed_at of this Campaign.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this Campaign.


        :param completed_at: The completed_at of this Campaign.
        :type completed_at: datetime
        """

        self._completed_at = completed_at

    @property
    def created_at(self):
        """Gets the created_at of this Campaign.


        :return: The created_at of this Campaign.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Campaign.


        :param created_at: The created_at of this Campaign.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def defaults(self):
        """Gets the defaults of this Campaign.


        :return: The defaults of this Campaign.
        :rtype: Dict[str, str]
        """
        return self._defaults

    @defaults.setter
    def defaults(self, defaults):
        """Sets the defaults of this Campaign.


        :param defaults: The defaults of this Campaign.
        :type defaults: Dict[str, str]
        """
        if defaults is None:
            raise ValueError("Invalid value for `defaults`, must not be `None`")

        self._defaults = defaults

    @property
    def description(self):
        """Gets the description of this Campaign.


        :return: The description of this Campaign.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Campaign.


        :param description: The description of this Campaign.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")

        self._description = description

    @property
    def details(self):
        """Gets the details of this Campaign.


        :return: The details of this Campaign.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Campaign.


        :param details: The details of this Campaign.
        :type details: str
        """

        self._details = details

    @property
    def errored_messages(self):
        """Gets the errored_messages of this Campaign.


        :return: The errored_messages of this Campaign.
        :rtype: int
        """
        return self._errored_messages

    @errored_messages.setter
    def errored_messages(self, errored_messages):
        """Sets the errored_messages of this Campaign.


        :param errored_messages: The errored_messages of this Campaign.
        :type errored_messages: int
        """

        self._errored_messages = errored_messages

    @property
    def failed_at(self):
        """Gets the failed_at of this Campaign.


        :return: The failed_at of this Campaign.
        :rtype: datetime
        """
        return self._failed_at

    @failed_at.setter
    def failed_at(self, failed_at):
        """Sets the failed_at of this Campaign.


        :param failed_at: The failed_at of this Campaign.
        :type failed_at: datetime
        """

        self._failed_at = failed_at

    @property
    def id(self):
        """Gets the id of this Campaign.


        :return: The id of this Campaign.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Campaign.


        :param id: The id of this Campaign.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Campaign.


        :return: The name of this Campaign.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Campaign.


        :param name: The name of this Campaign.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")

        self._name = name

    @property
    def resumed_at(self):
        """Gets the resumed_at of this Campaign.


        :return: The resumed_at of this Campaign.
        :rtype: datetime
        """
        return self._resumed_at

    @resumed_at.setter
    def resumed_at(self, resumed_at):
        """Sets the resumed_at of this Campaign.


        :param resumed_at: The resumed_at of this Campaign.
        :type resumed_at: datetime
        """

        self._resumed_at = resumed_at

    @property
    def scheduled_at(self):
        """Gets the scheduled_at of this Campaign.


        :return: The scheduled_at of this Campaign.
        :rtype: datetime
        """
        return self._scheduled_at

    @scheduled_at.setter
    def scheduled_at(self, scheduled_at):
        """Sets the scheduled_at of this Campaign.


        :param scheduled_at: The scheduled_at of this Campaign.
        :type scheduled_at: datetime
        """

        self._scheduled_at = scheduled_at

    @property
    def scheduled_for(self):
        """Gets the scheduled_for of this Campaign.


        :return: The scheduled_for of this Campaign.
        :rtype: datetime
        """
        return self._scheduled_for

    @scheduled_for.setter
    def scheduled_for(self, scheduled_for):
        """Sets the scheduled_for of this Campaign.


        :param scheduled_for: The scheduled_for of this Campaign.
        :type scheduled_for: datetime
        """

        self._scheduled_for = scheduled_for

    @property
    def segment_id(self):
        """Gets the segment_id of this Campaign.


        :return: The segment_id of this Campaign.
        :rtype: str
        """
        return self._segment_id

    @segment_id.setter
    def segment_id(self, segment_id):
        """Sets the segment_id of this Campaign.


        :param segment_id: The segment_id of this Campaign.
        :type segment_id: str
        """
        if segment_id is None:
            raise ValueError("Invalid value for `segment_id`, must not be `None`")

        self._segment_id = segment_id

    @property
    def sender_id(self):
        """Gets the sender_id of this Campaign.


        :return: The sender_id of this Campaign.
        :rtype: str
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id):
        """Sets the sender_id of this Campaign.


        :param sender_id: The sender_id of this Campaign.
        :type sender_id: str
        """
        if sender_id is None:
            raise ValueError("Invalid value for `sender_id`, must not be `None`")

        self._sender_id = sender_id

    @property
    def sent_messages(self):
        """Gets the sent_messages of this Campaign.


        :return: The sent_messages of this Campaign.
        :rtype: int
        """
        return self._sent_messages

    @sent_messages.setter
    def sent_messages(self, sent_messages):
        """Sets the sent_messages of this Campaign.


        :param sent_messages: The sent_messages of this Campaign.
        :type sent_messages: int
        """

        self._sent_messages = sent_messages

    @property
    def status(self):
        """Gets the status of this Campaign.


        :return: The status of this Campaign.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Campaign.


        :param status: The status of this Campaign.
        :type status: str
        """

        self._status = status

    @property
    def stopped_at(self):
        """Gets the stopped_at of this Campaign.


        :return: The stopped_at of this Campaign.
        :rtype: datetime
        """
        return self._stopped_at

    @stopped_at.setter
    def stopped_at(self, stopped_at):
        """Sets the stopped_at of this Campaign.


        :param stopped_at: The stopped_at of this Campaign.
        :type stopped_at: datetime
        """

        self._stopped_at = stopped_at

    @property
    def task_id(self):
        """Gets the task_id of this Campaign.


        :return: The task_id of this Campaign.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this Campaign.


        :param task_id: The task_id of this Campaign.
        :type task_id: str
        """

        self._task_id = task_id

    @property
    def text(self):
        """Gets the text of this Campaign.


        :return: The text of this Campaign.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Campaign.


        :param text: The text of this Campaign.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def updated_at(self):
        """Gets the updated_at of this Campaign.


        :return: The updated_at of this Campaign.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Campaign.


        :param updated_at: The updated_at of this Campaign.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
