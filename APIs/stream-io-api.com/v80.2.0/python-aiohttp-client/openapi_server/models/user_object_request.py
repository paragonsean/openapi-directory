# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.push_notification_settings_request import PushNotificationSettingsRequest
from openapi_server import util


class UserObjectRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ban_expires: datetime=None, banned: bool=None, id: str=None, invisible: bool=None, language: str=None, push_notifications: PushNotificationSettingsRequest=None, revoke_tokens_issued_before: datetime=None, role: str=None, teams: List[str]=None):
        """UserObjectRequest - a model defined in OpenAPI

        :param ban_expires: The ban_expires of this UserObjectRequest.
        :param banned: The banned of this UserObjectRequest.
        :param id: The id of this UserObjectRequest.
        :param invisible: The invisible of this UserObjectRequest.
        :param language: The language of this UserObjectRequest.
        :param push_notifications: The push_notifications of this UserObjectRequest.
        :param revoke_tokens_issued_before: The revoke_tokens_issued_before of this UserObjectRequest.
        :param role: The role of this UserObjectRequest.
        :param teams: The teams of this UserObjectRequest.
        """
        self.openapi_types = {
            'ban_expires': datetime,
            'banned': bool,
            'id': str,
            'invisible': bool,
            'language': str,
            'push_notifications': PushNotificationSettingsRequest,
            'revoke_tokens_issued_before': datetime,
            'role': str,
            'teams': List[str]
        }

        self.attribute_map = {
            'ban_expires': 'ban_expires',
            'banned': 'banned',
            'id': 'id',
            'invisible': 'invisible',
            'language': 'language',
            'push_notifications': 'push_notifications',
            'revoke_tokens_issued_before': 'revoke_tokens_issued_before',
            'role': 'role',
            'teams': 'teams'
        }

        self._ban_expires = ban_expires
        self._banned = banned
        self._id = id
        self._invisible = invisible
        self._language = language
        self._push_notifications = push_notifications
        self._revoke_tokens_issued_before = revoke_tokens_issued_before
        self._role = role
        self._teams = teams

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserObjectRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserObjectRequest of this UserObjectRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ban_expires(self):
        """Gets the ban_expires of this UserObjectRequest.

        Expiration date of the ban

        :return: The ban_expires of this UserObjectRequest.
        :rtype: datetime
        """
        return self._ban_expires

    @ban_expires.setter
    def ban_expires(self, ban_expires):
        """Sets the ban_expires of this UserObjectRequest.

        Expiration date of the ban

        :param ban_expires: The ban_expires of this UserObjectRequest.
        :type ban_expires: datetime
        """

        self._ban_expires = ban_expires

    @property
    def banned(self):
        """Gets the banned of this UserObjectRequest.

        Whether a user is banned or not

        :return: The banned of this UserObjectRequest.
        :rtype: bool
        """
        return self._banned

    @banned.setter
    def banned(self, banned):
        """Sets the banned of this UserObjectRequest.

        Whether a user is banned or not

        :param banned: The banned of this UserObjectRequest.
        :type banned: bool
        """

        self._banned = banned

    @property
    def id(self):
        """Gets the id of this UserObjectRequest.

        Unique user identifier

        :return: The id of this UserObjectRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserObjectRequest.

        Unique user identifier

        :param id: The id of this UserObjectRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def invisible(self):
        """Gets the invisible of this UserObjectRequest.


        :return: The invisible of this UserObjectRequest.
        :rtype: bool
        """
        return self._invisible

    @invisible.setter
    def invisible(self, invisible):
        """Sets the invisible of this UserObjectRequest.


        :param invisible: The invisible of this UserObjectRequest.
        :type invisible: bool
        """

        self._invisible = invisible

    @property
    def language(self):
        """Gets the language of this UserObjectRequest.

        Preferred language of a user

        :return: The language of this UserObjectRequest.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this UserObjectRequest.

        Preferred language of a user

        :param language: The language of this UserObjectRequest.
        :type language: str
        """

        self._language = language

    @property
    def push_notifications(self):
        """Gets the push_notifications of this UserObjectRequest.


        :return: The push_notifications of this UserObjectRequest.
        :rtype: PushNotificationSettingsRequest
        """
        return self._push_notifications

    @push_notifications.setter
    def push_notifications(self, push_notifications):
        """Sets the push_notifications of this UserObjectRequest.


        :param push_notifications: The push_notifications of this UserObjectRequest.
        :type push_notifications: PushNotificationSettingsRequest
        """

        self._push_notifications = push_notifications

    @property
    def revoke_tokens_issued_before(self):
        """Gets the revoke_tokens_issued_before of this UserObjectRequest.

        Revocation date for tokens

        :return: The revoke_tokens_issued_before of this UserObjectRequest.
        :rtype: datetime
        """
        return self._revoke_tokens_issued_before

    @revoke_tokens_issued_before.setter
    def revoke_tokens_issued_before(self, revoke_tokens_issued_before):
        """Sets the revoke_tokens_issued_before of this UserObjectRequest.

        Revocation date for tokens

        :param revoke_tokens_issued_before: The revoke_tokens_issued_before of this UserObjectRequest.
        :type revoke_tokens_issued_before: datetime
        """

        self._revoke_tokens_issued_before = revoke_tokens_issued_before

    @property
    def role(self):
        """Gets the role of this UserObjectRequest.

        Determines the set of user permissions

        :return: The role of this UserObjectRequest.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this UserObjectRequest.

        Determines the set of user permissions

        :param role: The role of this UserObjectRequest.
        :type role: str
        """

        self._role = role

    @property
    def teams(self):
        """Gets the teams of this UserObjectRequest.

        List of teams user is a part of

        :return: The teams of this UserObjectRequest.
        :rtype: List[str]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this UserObjectRequest.

        List of teams user is a part of

        :param teams: The teams of this UserObjectRequest.
        :type teams: List[str]
        """

        self._teams = teams
