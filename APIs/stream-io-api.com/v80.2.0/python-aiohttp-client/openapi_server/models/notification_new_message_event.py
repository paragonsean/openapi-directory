# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_response import ChannelResponse
from openapi_server.models.message import Message
from openapi_server import util


class NotificationNewMessageEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: ChannelResponse=None, channel_id: str=None, channel_type: str=None, cid: str=None, created_at: datetime=None, message: Message=None, team: str=None, type: str='notification.message_new'):
        """NotificationNewMessageEvent - a model defined in OpenAPI

        :param channel: The channel of this NotificationNewMessageEvent.
        :param channel_id: The channel_id of this NotificationNewMessageEvent.
        :param channel_type: The channel_type of this NotificationNewMessageEvent.
        :param cid: The cid of this NotificationNewMessageEvent.
        :param created_at: The created_at of this NotificationNewMessageEvent.
        :param message: The message of this NotificationNewMessageEvent.
        :param team: The team of this NotificationNewMessageEvent.
        :param type: The type of this NotificationNewMessageEvent.
        """
        self.openapi_types = {
            'channel': ChannelResponse,
            'channel_id': str,
            'channel_type': str,
            'cid': str,
            'created_at': datetime,
            'message': Message,
            'team': str,
            'type': str
        }

        self.attribute_map = {
            'channel': 'channel',
            'channel_id': 'channel_id',
            'channel_type': 'channel_type',
            'cid': 'cid',
            'created_at': 'created_at',
            'message': 'message',
            'team': 'team',
            'type': 'type'
        }

        self._channel = channel
        self._channel_id = channel_id
        self._channel_type = channel_type
        self._cid = cid
        self._created_at = created_at
        self._message = message
        self._team = team
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationNewMessageEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationNewMessageEvent of this NotificationNewMessageEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this NotificationNewMessageEvent.


        :return: The channel of this NotificationNewMessageEvent.
        :rtype: ChannelResponse
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this NotificationNewMessageEvent.


        :param channel: The channel of this NotificationNewMessageEvent.
        :type channel: ChannelResponse
        """

        self._channel = channel

    @property
    def channel_id(self):
        """Gets the channel_id of this NotificationNewMessageEvent.


        :return: The channel_id of this NotificationNewMessageEvent.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this NotificationNewMessageEvent.


        :param channel_id: The channel_id of this NotificationNewMessageEvent.
        :type channel_id: str
        """
        if channel_id is None:
            raise ValueError("Invalid value for `channel_id`, must not be `None`")

        self._channel_id = channel_id

    @property
    def channel_type(self):
        """Gets the channel_type of this NotificationNewMessageEvent.


        :return: The channel_type of this NotificationNewMessageEvent.
        :rtype: str
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this NotificationNewMessageEvent.


        :param channel_type: The channel_type of this NotificationNewMessageEvent.
        :type channel_type: str
        """
        if channel_type is None:
            raise ValueError("Invalid value for `channel_type`, must not be `None`")

        self._channel_type = channel_type

    @property
    def cid(self):
        """Gets the cid of this NotificationNewMessageEvent.


        :return: The cid of this NotificationNewMessageEvent.
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this NotificationNewMessageEvent.


        :param cid: The cid of this NotificationNewMessageEvent.
        :type cid: str
        """
        if cid is None:
            raise ValueError("Invalid value for `cid`, must not be `None`")

        self._cid = cid

    @property
    def created_at(self):
        """Gets the created_at of this NotificationNewMessageEvent.


        :return: The created_at of this NotificationNewMessageEvent.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this NotificationNewMessageEvent.


        :param created_at: The created_at of this NotificationNewMessageEvent.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def message(self):
        """Gets the message of this NotificationNewMessageEvent.


        :return: The message of this NotificationNewMessageEvent.
        :rtype: Message
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this NotificationNewMessageEvent.


        :param message: The message of this NotificationNewMessageEvent.
        :type message: Message
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def team(self):
        """Gets the team of this NotificationNewMessageEvent.


        :return: The team of this NotificationNewMessageEvent.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this NotificationNewMessageEvent.


        :param team: The team of this NotificationNewMessageEvent.
        :type team: str
        """

        self._team = team

    @property
    def type(self):
        """Gets the type of this NotificationNewMessageEvent.


        :return: The type of this NotificationNewMessageEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NotificationNewMessageEvent.


        :param type: The type of this NotificationNewMessageEvent.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
