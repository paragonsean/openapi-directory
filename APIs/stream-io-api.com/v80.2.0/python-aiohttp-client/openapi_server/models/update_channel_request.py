# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_member_request import ChannelMemberRequest
from openapi_server.models.channel_request import ChannelRequest
from openapi_server.models.message_request import MessageRequest
from openapi_server.models.user_object_request import UserObjectRequest
from openapi_server import util


class UpdateChannelRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_invite: bool=None, add_members: List[ChannelMemberRequest]=None, add_moderators: List[str]=None, assign_roles: List[ChannelMemberRequest]=None, cooldown: int=None, data: ChannelRequest=None, demote_moderators: List[str]=None, hide_history: bool=None, invites: List[ChannelMemberRequest]=None, message: MessageRequest=None, reject_invite: bool=None, remove_members: List[str]=None, skip_push: bool=None, user: UserObjectRequest=None, user_id: str=None):
        """UpdateChannelRequest - a model defined in OpenAPI

        :param accept_invite: The accept_invite of this UpdateChannelRequest.
        :param add_members: The add_members of this UpdateChannelRequest.
        :param add_moderators: The add_moderators of this UpdateChannelRequest.
        :param assign_roles: The assign_roles of this UpdateChannelRequest.
        :param cooldown: The cooldown of this UpdateChannelRequest.
        :param data: The data of this UpdateChannelRequest.
        :param demote_moderators: The demote_moderators of this UpdateChannelRequest.
        :param hide_history: The hide_history of this UpdateChannelRequest.
        :param invites: The invites of this UpdateChannelRequest.
        :param message: The message of this UpdateChannelRequest.
        :param reject_invite: The reject_invite of this UpdateChannelRequest.
        :param remove_members: The remove_members of this UpdateChannelRequest.
        :param skip_push: The skip_push of this UpdateChannelRequest.
        :param user: The user of this UpdateChannelRequest.
        :param user_id: The user_id of this UpdateChannelRequest.
        """
        self.openapi_types = {
            'accept_invite': bool,
            'add_members': List[ChannelMemberRequest],
            'add_moderators': List[str],
            'assign_roles': List[ChannelMemberRequest],
            'cooldown': int,
            'data': ChannelRequest,
            'demote_moderators': List[str],
            'hide_history': bool,
            'invites': List[ChannelMemberRequest],
            'message': MessageRequest,
            'reject_invite': bool,
            'remove_members': List[str],
            'skip_push': bool,
            'user': UserObjectRequest,
            'user_id': str
        }

        self.attribute_map = {
            'accept_invite': 'accept_invite',
            'add_members': 'add_members',
            'add_moderators': 'add_moderators',
            'assign_roles': 'assign_roles',
            'cooldown': 'cooldown',
            'data': 'data',
            'demote_moderators': 'demote_moderators',
            'hide_history': 'hide_history',
            'invites': 'invites',
            'message': 'message',
            'reject_invite': 'reject_invite',
            'remove_members': 'remove_members',
            'skip_push': 'skip_push',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._accept_invite = accept_invite
        self._add_members = add_members
        self._add_moderators = add_moderators
        self._assign_roles = assign_roles
        self._cooldown = cooldown
        self._data = data
        self._demote_moderators = demote_moderators
        self._hide_history = hide_history
        self._invites = invites
        self._message = message
        self._reject_invite = reject_invite
        self._remove_members = remove_members
        self._skip_push = skip_push
        self._user = user
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateChannelRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateChannelRequest of this UpdateChannelRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_invite(self):
        """Gets the accept_invite of this UpdateChannelRequest.

        Set to `true` to accept the invite

        :return: The accept_invite of this UpdateChannelRequest.
        :rtype: bool
        """
        return self._accept_invite

    @accept_invite.setter
    def accept_invite(self, accept_invite):
        """Sets the accept_invite of this UpdateChannelRequest.

        Set to `true` to accept the invite

        :param accept_invite: The accept_invite of this UpdateChannelRequest.
        :type accept_invite: bool
        """

        self._accept_invite = accept_invite

    @property
    def add_members(self):
        """Gets the add_members of this UpdateChannelRequest.

        List of user IDs to add to the channel

        :return: The add_members of this UpdateChannelRequest.
        :rtype: List[ChannelMemberRequest]
        """
        return self._add_members

    @add_members.setter
    def add_members(self, add_members):
        """Sets the add_members of this UpdateChannelRequest.

        List of user IDs to add to the channel

        :param add_members: The add_members of this UpdateChannelRequest.
        :type add_members: List[ChannelMemberRequest]
        """

        self._add_members = add_members

    @property
    def add_moderators(self):
        """Gets the add_moderators of this UpdateChannelRequest.

        List of user IDs to make channel moderators

        :return: The add_moderators of this UpdateChannelRequest.
        :rtype: List[str]
        """
        return self._add_moderators

    @add_moderators.setter
    def add_moderators(self, add_moderators):
        """Sets the add_moderators of this UpdateChannelRequest.

        List of user IDs to make channel moderators

        :param add_moderators: The add_moderators of this UpdateChannelRequest.
        :type add_moderators: List[str]
        """
        if add_moderators is None:
            raise ValueError("Invalid value for `add_moderators`, must not be `None`")

        self._add_moderators = add_moderators

    @property
    def assign_roles(self):
        """Gets the assign_roles of this UpdateChannelRequest.

        List of channel member role assignments. If any specified user is not part of the channel, the request will fail

        :return: The assign_roles of this UpdateChannelRequest.
        :rtype: List[ChannelMemberRequest]
        """
        return self._assign_roles

    @assign_roles.setter
    def assign_roles(self, assign_roles):
        """Sets the assign_roles of this UpdateChannelRequest.

        List of channel member role assignments. If any specified user is not part of the channel, the request will fail

        :param assign_roles: The assign_roles of this UpdateChannelRequest.
        :type assign_roles: List[ChannelMemberRequest]
        """

        self._assign_roles = assign_roles

    @property
    def cooldown(self):
        """Gets the cooldown of this UpdateChannelRequest.

        Sets cool down period for the channel in seconds

        :return: The cooldown of this UpdateChannelRequest.
        :rtype: int
        """
        return self._cooldown

    @cooldown.setter
    def cooldown(self, cooldown):
        """Sets the cooldown of this UpdateChannelRequest.

        Sets cool down period for the channel in seconds

        :param cooldown: The cooldown of this UpdateChannelRequest.
        :type cooldown: int
        """
        if cooldown is not None and cooldown > 120:
            raise ValueError("Invalid value for `cooldown`, must be a value less than or equal to `120`")
        if cooldown is not None and cooldown < 0:
            raise ValueError("Invalid value for `cooldown`, must be a value greater than or equal to `0`")

        self._cooldown = cooldown

    @property
    def data(self):
        """Gets the data of this UpdateChannelRequest.


        :return: The data of this UpdateChannelRequest.
        :rtype: ChannelRequest
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this UpdateChannelRequest.


        :param data: The data of this UpdateChannelRequest.
        :type data: ChannelRequest
        """

        self._data = data

    @property
    def demote_moderators(self):
        """Gets the demote_moderators of this UpdateChannelRequest.

        List of user IDs to take away moderators status from

        :return: The demote_moderators of this UpdateChannelRequest.
        :rtype: List[str]
        """
        return self._demote_moderators

    @demote_moderators.setter
    def demote_moderators(self, demote_moderators):
        """Sets the demote_moderators of this UpdateChannelRequest.

        List of user IDs to take away moderators status from

        :param demote_moderators: The demote_moderators of this UpdateChannelRequest.
        :type demote_moderators: List[str]
        """
        if demote_moderators is None:
            raise ValueError("Invalid value for `demote_moderators`, must not be `None`")

        self._demote_moderators = demote_moderators

    @property
    def hide_history(self):
        """Gets the hide_history of this UpdateChannelRequest.

        Set to `true` to hide channel's history when adding new members

        :return: The hide_history of this UpdateChannelRequest.
        :rtype: bool
        """
        return self._hide_history

    @hide_history.setter
    def hide_history(self, hide_history):
        """Sets the hide_history of this UpdateChannelRequest.

        Set to `true` to hide channel's history when adding new members

        :param hide_history: The hide_history of this UpdateChannelRequest.
        :type hide_history: bool
        """

        self._hide_history = hide_history

    @property
    def invites(self):
        """Gets the invites of this UpdateChannelRequest.

        List of user IDs to invite to the channel

        :return: The invites of this UpdateChannelRequest.
        :rtype: List[ChannelMemberRequest]
        """
        return self._invites

    @invites.setter
    def invites(self, invites):
        """Sets the invites of this UpdateChannelRequest.

        List of user IDs to invite to the channel

        :param invites: The invites of this UpdateChannelRequest.
        :type invites: List[ChannelMemberRequest]
        """

        self._invites = invites

    @property
    def message(self):
        """Gets the message of this UpdateChannelRequest.


        :return: The message of this UpdateChannelRequest.
        :rtype: MessageRequest
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this UpdateChannelRequest.


        :param message: The message of this UpdateChannelRequest.
        :type message: MessageRequest
        """

        self._message = message

    @property
    def reject_invite(self):
        """Gets the reject_invite of this UpdateChannelRequest.

        Set to `true` to reject the invite

        :return: The reject_invite of this UpdateChannelRequest.
        :rtype: bool
        """
        return self._reject_invite

    @reject_invite.setter
    def reject_invite(self, reject_invite):
        """Sets the reject_invite of this UpdateChannelRequest.

        Set to `true` to reject the invite

        :param reject_invite: The reject_invite of this UpdateChannelRequest.
        :type reject_invite: bool
        """

        self._reject_invite = reject_invite

    @property
    def remove_members(self):
        """Gets the remove_members of this UpdateChannelRequest.

        List of user IDs to remove from the channel

        :return: The remove_members of this UpdateChannelRequest.
        :rtype: List[str]
        """
        return self._remove_members

    @remove_members.setter
    def remove_members(self, remove_members):
        """Sets the remove_members of this UpdateChannelRequest.

        List of user IDs to remove from the channel

        :param remove_members: The remove_members of this UpdateChannelRequest.
        :type remove_members: List[str]
        """
        if remove_members is None:
            raise ValueError("Invalid value for `remove_members`, must not be `None`")

        self._remove_members = remove_members

    @property
    def skip_push(self):
        """Gets the skip_push of this UpdateChannelRequest.

        When `message` is set disables all push notifications for it

        :return: The skip_push of this UpdateChannelRequest.
        :rtype: bool
        """
        return self._skip_push

    @skip_push.setter
    def skip_push(self, skip_push):
        """Sets the skip_push of this UpdateChannelRequest.

        When `message` is set disables all push notifications for it

        :param skip_push: The skip_push of this UpdateChannelRequest.
        :type skip_push: bool
        """

        self._skip_push = skip_push

    @property
    def user(self):
        """Gets the user of this UpdateChannelRequest.


        :return: The user of this UpdateChannelRequest.
        :rtype: UserObjectRequest
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UpdateChannelRequest.


        :param user: The user of this UpdateChannelRequest.
        :type user: UserObjectRequest
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this UpdateChannelRequest.


        :return: The user_id of this UpdateChannelRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UpdateChannelRequest.


        :param user_id: The user_id of this UpdateChannelRequest.
        :type user_id: str
        """

        self._user_id = user_id
