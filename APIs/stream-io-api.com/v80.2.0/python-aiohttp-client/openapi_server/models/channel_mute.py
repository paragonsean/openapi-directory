# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_response import ChannelResponse
from openapi_server.models.user_object import UserObject
from openapi_server import util


class ChannelMute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: ChannelResponse=None, created_at: datetime=None, expires: datetime=None, updated_at: datetime=None, user: UserObject=None):
        """ChannelMute - a model defined in OpenAPI

        :param channel: The channel of this ChannelMute.
        :param created_at: The created_at of this ChannelMute.
        :param expires: The expires of this ChannelMute.
        :param updated_at: The updated_at of this ChannelMute.
        :param user: The user of this ChannelMute.
        """
        self.openapi_types = {
            'channel': ChannelResponse,
            'created_at': datetime,
            'expires': datetime,
            'updated_at': datetime,
            'user': UserObject
        }

        self.attribute_map = {
            'channel': 'channel',
            'created_at': 'created_at',
            'expires': 'expires',
            'updated_at': 'updated_at',
            'user': 'user'
        }

        self._channel = channel
        self._created_at = created_at
        self._expires = expires
        self._updated_at = updated_at
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelMute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelMute of this ChannelMute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this ChannelMute.


        :return: The channel of this ChannelMute.
        :rtype: ChannelResponse
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this ChannelMute.


        :param channel: The channel of this ChannelMute.
        :type channel: ChannelResponse
        """

        self._channel = channel

    @property
    def created_at(self):
        """Gets the created_at of this ChannelMute.

        Date/time of creation

        :return: The created_at of this ChannelMute.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ChannelMute.

        Date/time of creation

        :param created_at: The created_at of this ChannelMute.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def expires(self):
        """Gets the expires of this ChannelMute.

        Date/time of mute expiration

        :return: The expires of this ChannelMute.
        :rtype: datetime
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this ChannelMute.

        Date/time of mute expiration

        :param expires: The expires of this ChannelMute.
        :type expires: datetime
        """

        self._expires = expires

    @property
    def updated_at(self):
        """Gets the updated_at of this ChannelMute.

        Date/time of the last update

        :return: The updated_at of this ChannelMute.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ChannelMute.

        Date/time of the last update

        :param updated_at: The updated_at of this ChannelMute.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this ChannelMute.


        :return: The user of this ChannelMute.
        :rtype: UserObject
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ChannelMute.


        :param user: The user of this ChannelMute.
        :type user: UserObject
        """

        self._user = user
