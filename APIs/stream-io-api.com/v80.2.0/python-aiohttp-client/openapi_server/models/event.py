# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_member import ChannelMember
from openapi_server.models.channel_response import ChannelResponse
from openapi_server.models.message import Message
from openapi_server.models.moderation_response import ModerationResponse
from openapi_server.models.own_user import OwnUser
from openapi_server.models.reaction import Reaction
from openapi_server.models.user_object import UserObject
from openapi_server import util


class Event(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automoderation: bool=None, automoderation_scores: ModerationResponse=None, channel: ChannelResponse=None, channel_id: str=None, channel_type: str=None, cid: str=None, connection_id: str=None, created_at: datetime=None, created_by: UserObject=None, me: OwnUser=None, member: ChannelMember=None, message: Message=None, parent_id: str=None, reaction: Reaction=None, reason: str=None, team: str=None, type: str=None, user: UserObject=None, user_id: str=None, watcher_count: int=None):
        """Event - a model defined in OpenAPI

        :param automoderation: The automoderation of this Event.
        :param automoderation_scores: The automoderation_scores of this Event.
        :param channel: The channel of this Event.
        :param channel_id: The channel_id of this Event.
        :param channel_type: The channel_type of this Event.
        :param cid: The cid of this Event.
        :param connection_id: The connection_id of this Event.
        :param created_at: The created_at of this Event.
        :param created_by: The created_by of this Event.
        :param me: The me of this Event.
        :param member: The member of this Event.
        :param message: The message of this Event.
        :param parent_id: The parent_id of this Event.
        :param reaction: The reaction of this Event.
        :param reason: The reason of this Event.
        :param team: The team of this Event.
        :param type: The type of this Event.
        :param user: The user of this Event.
        :param user_id: The user_id of this Event.
        :param watcher_count: The watcher_count of this Event.
        """
        self.openapi_types = {
            'automoderation': bool,
            'automoderation_scores': ModerationResponse,
            'channel': ChannelResponse,
            'channel_id': str,
            'channel_type': str,
            'cid': str,
            'connection_id': str,
            'created_at': datetime,
            'created_by': UserObject,
            'me': OwnUser,
            'member': ChannelMember,
            'message': Message,
            'parent_id': str,
            'reaction': Reaction,
            'reason': str,
            'team': str,
            'type': str,
            'user': UserObject,
            'user_id': str,
            'watcher_count': int
        }

        self.attribute_map = {
            'automoderation': 'automoderation',
            'automoderation_scores': 'automoderation_scores',
            'channel': 'channel',
            'channel_id': 'channel_id',
            'channel_type': 'channel_type',
            'cid': 'cid',
            'connection_id': 'connection_id',
            'created_at': 'created_at',
            'created_by': 'created_by',
            'me': 'me',
            'member': 'member',
            'message': 'message',
            'parent_id': 'parent_id',
            'reaction': 'reaction',
            'reason': 'reason',
            'team': 'team',
            'type': 'type',
            'user': 'user',
            'user_id': 'user_id',
            'watcher_count': 'watcher_count'
        }

        self._automoderation = automoderation
        self._automoderation_scores = automoderation_scores
        self._channel = channel
        self._channel_id = channel_id
        self._channel_type = channel_type
        self._cid = cid
        self._connection_id = connection_id
        self._created_at = created_at
        self._created_by = created_by
        self._me = me
        self._member = member
        self._message = message
        self._parent_id = parent_id
        self._reaction = reaction
        self._reason = reason
        self._team = team
        self._type = type
        self._user = user
        self._user_id = user_id
        self._watcher_count = watcher_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Event of this Event.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automoderation(self):
        """Gets the automoderation of this Event.

        Only applicable to `message.flagged` BaseEvent.

        :return: The automoderation of this Event.
        :rtype: bool
        """
        return self._automoderation

    @automoderation.setter
    def automoderation(self, automoderation):
        """Sets the automoderation of this Event.

        Only applicable to `message.flagged` BaseEvent.

        :param automoderation: The automoderation of this Event.
        :type automoderation: bool
        """

        self._automoderation = automoderation

    @property
    def automoderation_scores(self):
        """Gets the automoderation_scores of this Event.


        :return: The automoderation_scores of this Event.
        :rtype: ModerationResponse
        """
        return self._automoderation_scores

    @automoderation_scores.setter
    def automoderation_scores(self, automoderation_scores):
        """Sets the automoderation_scores of this Event.


        :param automoderation_scores: The automoderation_scores of this Event.
        :type automoderation_scores: ModerationResponse
        """

        self._automoderation_scores = automoderation_scores

    @property
    def channel(self):
        """Gets the channel of this Event.


        :return: The channel of this Event.
        :rtype: ChannelResponse
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this Event.


        :param channel: The channel of this Event.
        :type channel: ChannelResponse
        """

        self._channel = channel

    @property
    def channel_id(self):
        """Gets the channel_id of this Event.


        :return: The channel_id of this Event.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id):
        """Sets the channel_id of this Event.


        :param channel_id: The channel_id of this Event.
        :type channel_id: str
        """

        self._channel_id = channel_id

    @property
    def channel_type(self):
        """Gets the channel_type of this Event.


        :return: The channel_type of this Event.
        :rtype: str
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this Event.


        :param channel_type: The channel_type of this Event.
        :type channel_type: str
        """

        self._channel_type = channel_type

    @property
    def cid(self):
        """Gets the cid of this Event.

        Channel CID (<type>:<id>)

        :return: The cid of this Event.
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this Event.

        Channel CID (<type>:<id>)

        :param cid: The cid of this Event.
        :type cid: str
        """

        self._cid = cid

    @property
    def connection_id(self):
        """Gets the connection_id of this Event.

        Only applicable to `health.check` BaseEvent

        :return: The connection_id of this Event.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this Event.

        Only applicable to `health.check` BaseEvent

        :param connection_id: The connection_id of this Event.
        :type connection_id: str
        """

        self._connection_id = connection_id

    @property
    def created_at(self):
        """Gets the created_at of this Event.

        Date/time of creation

        :return: The created_at of this Event.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Event.

        Date/time of creation

        :param created_at: The created_at of this Event.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this Event.


        :return: The created_by of this Event.
        :rtype: UserObject
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Event.


        :param created_by: The created_by of this Event.
        :type created_by: UserObject
        """

        self._created_by = created_by

    @property
    def me(self):
        """Gets the me of this Event.


        :return: The me of this Event.
        :rtype: OwnUser
        """
        return self._me

    @me.setter
    def me(self, me):
        """Sets the me of this Event.


        :param me: The me of this Event.
        :type me: OwnUser
        """

        self._me = me

    @property
    def member(self):
        """Gets the member of this Event.


        :return: The member of this Event.
        :rtype: ChannelMember
        """
        return self._member

    @member.setter
    def member(self, member):
        """Sets the member of this Event.


        :param member: The member of this Event.
        :type member: ChannelMember
        """

        self._member = member

    @property
    def message(self):
        """Gets the message of this Event.


        :return: The message of this Event.
        :rtype: Message
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Event.


        :param message: The message of this Event.
        :type message: Message
        """

        self._message = message

    @property
    def parent_id(self):
        """Gets the parent_id of this Event.

        ID of thread. Used in typing events

        :return: The parent_id of this Event.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Event.

        ID of thread. Used in typing events

        :param parent_id: The parent_id of this Event.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def reaction(self):
        """Gets the reaction of this Event.


        :return: The reaction of this Event.
        :rtype: Reaction
        """
        return self._reaction

    @reaction.setter
    def reaction(self, reaction):
        """Sets the reaction of this Event.


        :param reaction: The reaction of this Event.
        :type reaction: Reaction
        """

        self._reaction = reaction

    @property
    def reason(self):
        """Gets the reason of this Event.

        Ban reason. Only applicable to `user.banned` BaseEvent

        :return: The reason of this Event.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Event.

        Ban reason. Only applicable to `user.banned` BaseEvent

        :param reason: The reason of this Event.
        :type reason: str
        """

        self._reason = reason

    @property
    def team(self):
        """Gets the team of this Event.


        :return: The team of this Event.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Event.


        :param team: The team of this Event.
        :type team: str
        """

        self._team = team

    @property
    def type(self):
        """Gets the type of this Event.

        Event type. To use custom BaseEvent types see Custom Events documentation

        :return: The type of this Event.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Event.

        Event type. To use custom BaseEvent types see Custom Events documentation

        :param type: The type of this Event.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def user(self):
        """Gets the user of this Event.


        :return: The user of this Event.
        :rtype: UserObject
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Event.


        :param user: The user of this Event.
        :type user: UserObject
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this Event.


        :return: The user_id of this Event.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Event.


        :param user_id: The user_id of this Event.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def watcher_count(self):
        """Gets the watcher_count of this Event.

        Number of watchers who received this BaseEvent

        :return: The watcher_count of this Event.
        :rtype: int
        """
        return self._watcher_count

    @watcher_count.setter
    def watcher_count(self, watcher_count):
        """Sets the watcher_count of this Event.

        Number of watchers who received this BaseEvent

        :param watcher_count: The watcher_count of this Event.
        :type watcher_count: int
        """

        self._watcher_count = watcher_count
