# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event import Event
from openapi_server import util


class SyncResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: str=None, events: List[Event]=None, inaccessible_cids: List[str]=None):
        """SyncResponse - a model defined in OpenAPI

        :param duration: The duration of this SyncResponse.
        :param events: The events of this SyncResponse.
        :param inaccessible_cids: The inaccessible_cids of this SyncResponse.
        """
        self.openapi_types = {
            'duration': str,
            'events': List[Event],
            'inaccessible_cids': List[str]
        }

        self.attribute_map = {
            'duration': 'duration',
            'events': 'events',
            'inaccessible_cids': 'inaccessible_cids'
        }

        self._duration = duration
        self._events = events
        self._inaccessible_cids = inaccessible_cids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SyncResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SyncResponse of this SyncResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this SyncResponse.


        :return: The duration of this SyncResponse.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SyncResponse.


        :param duration: The duration of this SyncResponse.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def events(self):
        """Gets the events of this SyncResponse.

        List of events

        :return: The events of this SyncResponse.
        :rtype: List[Event]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this SyncResponse.

        List of events

        :param events: The events of this SyncResponse.
        :type events: List[Event]
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")

        self._events = events

    @property
    def inaccessible_cids(self):
        """Gets the inaccessible_cids of this SyncResponse.

        List of CIDs that user can't access

        :return: The inaccessible_cids of this SyncResponse.
        :rtype: List[str]
        """
        return self._inaccessible_cids

    @inaccessible_cids.setter
    def inaccessible_cids(self, inaccessible_cids):
        """Sets the inaccessible_cids of this SyncResponse.

        List of CIDs that user can't access

        :param inaccessible_cids: The inaccessible_cids of this SyncResponse.
        :type inaccessible_cids: List[str]
        """

        self._inaccessible_cids = inaccessible_cids
