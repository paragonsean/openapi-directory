# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FirebaseConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disabled: bool=None, apn_template: str=None, credentials_json: str=None, data_template: str=None, notification_template: str=None, server_key: str=None):
        """FirebaseConfigRequest - a model defined in OpenAPI

        :param disabled: The disabled of this FirebaseConfigRequest.
        :param apn_template: The apn_template of this FirebaseConfigRequest.
        :param credentials_json: The credentials_json of this FirebaseConfigRequest.
        :param data_template: The data_template of this FirebaseConfigRequest.
        :param notification_template: The notification_template of this FirebaseConfigRequest.
        :param server_key: The server_key of this FirebaseConfigRequest.
        """
        self.openapi_types = {
            'disabled': bool,
            'apn_template': str,
            'credentials_json': str,
            'data_template': str,
            'notification_template': str,
            'server_key': str
        }

        self.attribute_map = {
            'disabled': 'Disabled',
            'apn_template': 'apn_template',
            'credentials_json': 'credentials_json',
            'data_template': 'data_template',
            'notification_template': 'notification_template',
            'server_key': 'server_key'
        }

        self._disabled = disabled
        self._apn_template = apn_template
        self._credentials_json = credentials_json
        self._data_template = data_template
        self._notification_template = notification_template
        self._server_key = server_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FirebaseConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FirebaseConfigRequest of this FirebaseConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disabled(self):
        """Gets the disabled of this FirebaseConfigRequest.


        :return: The disabled of this FirebaseConfigRequest.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this FirebaseConfigRequest.


        :param disabled: The disabled of this FirebaseConfigRequest.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def apn_template(self):
        """Gets the apn_template of this FirebaseConfigRequest.


        :return: The apn_template of this FirebaseConfigRequest.
        :rtype: str
        """
        return self._apn_template

    @apn_template.setter
    def apn_template(self, apn_template):
        """Sets the apn_template of this FirebaseConfigRequest.


        :param apn_template: The apn_template of this FirebaseConfigRequest.
        :type apn_template: str
        """

        self._apn_template = apn_template

    @property
    def credentials_json(self):
        """Gets the credentials_json of this FirebaseConfigRequest.


        :return: The credentials_json of this FirebaseConfigRequest.
        :rtype: str
        """
        return self._credentials_json

    @credentials_json.setter
    def credentials_json(self, credentials_json):
        """Sets the credentials_json of this FirebaseConfigRequest.


        :param credentials_json: The credentials_json of this FirebaseConfigRequest.
        :type credentials_json: str
        """

        self._credentials_json = credentials_json

    @property
    def data_template(self):
        """Gets the data_template of this FirebaseConfigRequest.


        :return: The data_template of this FirebaseConfigRequest.
        :rtype: str
        """
        return self._data_template

    @data_template.setter
    def data_template(self, data_template):
        """Sets the data_template of this FirebaseConfigRequest.


        :param data_template: The data_template of this FirebaseConfigRequest.
        :type data_template: str
        """

        self._data_template = data_template

    @property
    def notification_template(self):
        """Gets the notification_template of this FirebaseConfigRequest.


        :return: The notification_template of this FirebaseConfigRequest.
        :rtype: str
        """
        return self._notification_template

    @notification_template.setter
    def notification_template(self, notification_template):
        """Sets the notification_template of this FirebaseConfigRequest.


        :param notification_template: The notification_template of this FirebaseConfigRequest.
        :type notification_template: str
        """

        self._notification_template = notification_template

    @property
    def server_key(self):
        """Gets the server_key of this FirebaseConfigRequest.


        :return: The server_key of this FirebaseConfigRequest.
        :rtype: str
        """
        return self._server_key

    @server_key.setter
    def server_key(self, server_key):
        """Sets the server_key of this FirebaseConfigRequest.


        :param server_key: The server_key of this FirebaseConfigRequest.
        :type server_key: str
        """

        self._server_key = server_key
