# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AsyncModerationCallbackConfigRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mode: str=None, server_url: str=None):
        """AsyncModerationCallbackConfigRequest - a model defined in OpenAPI

        :param mode: The mode of this AsyncModerationCallbackConfigRequest.
        :param server_url: The server_url of this AsyncModerationCallbackConfigRequest.
        """
        self.openapi_types = {
            'mode': str,
            'server_url': str
        }

        self.attribute_map = {
            'mode': 'mode',
            'server_url': 'server_url'
        }

        self._mode = mode
        self._server_url = server_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AsyncModerationCallbackConfigRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AsyncModerationCallbackConfigRequest of this AsyncModerationCallbackConfigRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mode(self):
        """Gets the mode of this AsyncModerationCallbackConfigRequest.


        :return: The mode of this AsyncModerationCallbackConfigRequest.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this AsyncModerationCallbackConfigRequest.


        :param mode: The mode of this AsyncModerationCallbackConfigRequest.
        :type mode: str
        """
        allowed_values = ["CALLBACK_MODE_NONE", "CALLBACK_MODE_REST", "CALLBACK_MODE_TWIRP"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def server_url(self):
        """Gets the server_url of this AsyncModerationCallbackConfigRequest.


        :return: The server_url of this AsyncModerationCallbackConfigRequest.
        :rtype: str
        """
        return self._server_url

    @server_url.setter
    def server_url(self, server_url):
        """Sets the server_url of this AsyncModerationCallbackConfigRequest.


        :param server_url: The server_url of this AsyncModerationCallbackConfigRequest.
        :type server_url: str
        """

        self._server_url = server_url
