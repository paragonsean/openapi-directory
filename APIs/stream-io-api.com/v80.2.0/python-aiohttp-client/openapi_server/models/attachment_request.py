# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_request import ActionRequest
from openapi_server.models.field_request import FieldRequest
from openapi_server.models.images_request import ImagesRequest
from openapi_server import util


class AttachmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[ActionRequest]=None, asset_url: str=None, author_icon: str=None, author_link: str=None, author_name: str=None, color: str=None, fallback: str=None, fields: List[FieldRequest]=None, footer: str=None, footer_icon: str=None, giphy: ImagesRequest=None, image_url: str=None, og_scrape_url: str=None, original_height: int=None, original_width: int=None, pretext: str=None, text: str=None, thumb_url: str=None, title: str=None, title_link: str=None, type: str=None):
        """AttachmentRequest - a model defined in OpenAPI

        :param actions: The actions of this AttachmentRequest.
        :param asset_url: The asset_url of this AttachmentRequest.
        :param author_icon: The author_icon of this AttachmentRequest.
        :param author_link: The author_link of this AttachmentRequest.
        :param author_name: The author_name of this AttachmentRequest.
        :param color: The color of this AttachmentRequest.
        :param fallback: The fallback of this AttachmentRequest.
        :param fields: The fields of this AttachmentRequest.
        :param footer: The footer of this AttachmentRequest.
        :param footer_icon: The footer_icon of this AttachmentRequest.
        :param giphy: The giphy of this AttachmentRequest.
        :param image_url: The image_url of this AttachmentRequest.
        :param og_scrape_url: The og_scrape_url of this AttachmentRequest.
        :param original_height: The original_height of this AttachmentRequest.
        :param original_width: The original_width of this AttachmentRequest.
        :param pretext: The pretext of this AttachmentRequest.
        :param text: The text of this AttachmentRequest.
        :param thumb_url: The thumb_url of this AttachmentRequest.
        :param title: The title of this AttachmentRequest.
        :param title_link: The title_link of this AttachmentRequest.
        :param type: The type of this AttachmentRequest.
        """
        self.openapi_types = {
            'actions': List[ActionRequest],
            'asset_url': str,
            'author_icon': str,
            'author_link': str,
            'author_name': str,
            'color': str,
            'fallback': str,
            'fields': List[FieldRequest],
            'footer': str,
            'footer_icon': str,
            'giphy': ImagesRequest,
            'image_url': str,
            'og_scrape_url': str,
            'original_height': int,
            'original_width': int,
            'pretext': str,
            'text': str,
            'thumb_url': str,
            'title': str,
            'title_link': str,
            'type': str
        }

        self.attribute_map = {
            'actions': 'actions',
            'asset_url': 'asset_url',
            'author_icon': 'author_icon',
            'author_link': 'author_link',
            'author_name': 'author_name',
            'color': 'color',
            'fallback': 'fallback',
            'fields': 'fields',
            'footer': 'footer',
            'footer_icon': 'footer_icon',
            'giphy': 'giphy',
            'image_url': 'image_url',
            'og_scrape_url': 'og_scrape_url',
            'original_height': 'original_height',
            'original_width': 'original_width',
            'pretext': 'pretext',
            'text': 'text',
            'thumb_url': 'thumb_url',
            'title': 'title',
            'title_link': 'title_link',
            'type': 'type'
        }

        self._actions = actions
        self._asset_url = asset_url
        self._author_icon = author_icon
        self._author_link = author_link
        self._author_name = author_name
        self._color = color
        self._fallback = fallback
        self._fields = fields
        self._footer = footer
        self._footer_icon = footer_icon
        self._giphy = giphy
        self._image_url = image_url
        self._og_scrape_url = og_scrape_url
        self._original_height = original_height
        self._original_width = original_width
        self._pretext = pretext
        self._text = text
        self._thumb_url = thumb_url
        self._title = title
        self._title_link = title_link
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttachmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttachmentRequest of this AttachmentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this AttachmentRequest.


        :return: The actions of this AttachmentRequest.
        :rtype: List[ActionRequest]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this AttachmentRequest.


        :param actions: The actions of this AttachmentRequest.
        :type actions: List[ActionRequest]
        """

        self._actions = actions

    @property
    def asset_url(self):
        """Gets the asset_url of this AttachmentRequest.


        :return: The asset_url of this AttachmentRequest.
        :rtype: str
        """
        return self._asset_url

    @asset_url.setter
    def asset_url(self, asset_url):
        """Sets the asset_url of this AttachmentRequest.


        :param asset_url: The asset_url of this AttachmentRequest.
        :type asset_url: str
        """

        self._asset_url = asset_url

    @property
    def author_icon(self):
        """Gets the author_icon of this AttachmentRequest.


        :return: The author_icon of this AttachmentRequest.
        :rtype: str
        """
        return self._author_icon

    @author_icon.setter
    def author_icon(self, author_icon):
        """Sets the author_icon of this AttachmentRequest.


        :param author_icon: The author_icon of this AttachmentRequest.
        :type author_icon: str
        """

        self._author_icon = author_icon

    @property
    def author_link(self):
        """Gets the author_link of this AttachmentRequest.


        :return: The author_link of this AttachmentRequest.
        :rtype: str
        """
        return self._author_link

    @author_link.setter
    def author_link(self, author_link):
        """Sets the author_link of this AttachmentRequest.


        :param author_link: The author_link of this AttachmentRequest.
        :type author_link: str
        """

        self._author_link = author_link

    @property
    def author_name(self):
        """Gets the author_name of this AttachmentRequest.


        :return: The author_name of this AttachmentRequest.
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this AttachmentRequest.


        :param author_name: The author_name of this AttachmentRequest.
        :type author_name: str
        """

        self._author_name = author_name

    @property
    def color(self):
        """Gets the color of this AttachmentRequest.


        :return: The color of this AttachmentRequest.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this AttachmentRequest.


        :param color: The color of this AttachmentRequest.
        :type color: str
        """

        self._color = color

    @property
    def fallback(self):
        """Gets the fallback of this AttachmentRequest.


        :return: The fallback of this AttachmentRequest.
        :rtype: str
        """
        return self._fallback

    @fallback.setter
    def fallback(self, fallback):
        """Sets the fallback of this AttachmentRequest.


        :param fallback: The fallback of this AttachmentRequest.
        :type fallback: str
        """

        self._fallback = fallback

    @property
    def fields(self):
        """Gets the fields of this AttachmentRequest.


        :return: The fields of this AttachmentRequest.
        :rtype: List[FieldRequest]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this AttachmentRequest.


        :param fields: The fields of this AttachmentRequest.
        :type fields: List[FieldRequest]
        """

        self._fields = fields

    @property
    def footer(self):
        """Gets the footer of this AttachmentRequest.


        :return: The footer of this AttachmentRequest.
        :rtype: str
        """
        return self._footer

    @footer.setter
    def footer(self, footer):
        """Sets the footer of this AttachmentRequest.


        :param footer: The footer of this AttachmentRequest.
        :type footer: str
        """

        self._footer = footer

    @property
    def footer_icon(self):
        """Gets the footer_icon of this AttachmentRequest.


        :return: The footer_icon of this AttachmentRequest.
        :rtype: str
        """
        return self._footer_icon

    @footer_icon.setter
    def footer_icon(self, footer_icon):
        """Sets the footer_icon of this AttachmentRequest.


        :param footer_icon: The footer_icon of this AttachmentRequest.
        :type footer_icon: str
        """

        self._footer_icon = footer_icon

    @property
    def giphy(self):
        """Gets the giphy of this AttachmentRequest.


        :return: The giphy of this AttachmentRequest.
        :rtype: ImagesRequest
        """
        return self._giphy

    @giphy.setter
    def giphy(self, giphy):
        """Sets the giphy of this AttachmentRequest.


        :param giphy: The giphy of this AttachmentRequest.
        :type giphy: ImagesRequest
        """

        self._giphy = giphy

    @property
    def image_url(self):
        """Gets the image_url of this AttachmentRequest.


        :return: The image_url of this AttachmentRequest.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this AttachmentRequest.


        :param image_url: The image_url of this AttachmentRequest.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def og_scrape_url(self):
        """Gets the og_scrape_url of this AttachmentRequest.


        :return: The og_scrape_url of this AttachmentRequest.
        :rtype: str
        """
        return self._og_scrape_url

    @og_scrape_url.setter
    def og_scrape_url(self, og_scrape_url):
        """Sets the og_scrape_url of this AttachmentRequest.


        :param og_scrape_url: The og_scrape_url of this AttachmentRequest.
        :type og_scrape_url: str
        """

        self._og_scrape_url = og_scrape_url

    @property
    def original_height(self):
        """Gets the original_height of this AttachmentRequest.


        :return: The original_height of this AttachmentRequest.
        :rtype: int
        """
        return self._original_height

    @original_height.setter
    def original_height(self, original_height):
        """Sets the original_height of this AttachmentRequest.


        :param original_height: The original_height of this AttachmentRequest.
        :type original_height: int
        """

        self._original_height = original_height

    @property
    def original_width(self):
        """Gets the original_width of this AttachmentRequest.


        :return: The original_width of this AttachmentRequest.
        :rtype: int
        """
        return self._original_width

    @original_width.setter
    def original_width(self, original_width):
        """Sets the original_width of this AttachmentRequest.


        :param original_width: The original_width of this AttachmentRequest.
        :type original_width: int
        """

        self._original_width = original_width

    @property
    def pretext(self):
        """Gets the pretext of this AttachmentRequest.


        :return: The pretext of this AttachmentRequest.
        :rtype: str
        """
        return self._pretext

    @pretext.setter
    def pretext(self, pretext):
        """Sets the pretext of this AttachmentRequest.


        :param pretext: The pretext of this AttachmentRequest.
        :type pretext: str
        """

        self._pretext = pretext

    @property
    def text(self):
        """Gets the text of this AttachmentRequest.


        :return: The text of this AttachmentRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this AttachmentRequest.


        :param text: The text of this AttachmentRequest.
        :type text: str
        """

        self._text = text

    @property
    def thumb_url(self):
        """Gets the thumb_url of this AttachmentRequest.


        :return: The thumb_url of this AttachmentRequest.
        :rtype: str
        """
        return self._thumb_url

    @thumb_url.setter
    def thumb_url(self, thumb_url):
        """Sets the thumb_url of this AttachmentRequest.


        :param thumb_url: The thumb_url of this AttachmentRequest.
        :type thumb_url: str
        """

        self._thumb_url = thumb_url

    @property
    def title(self):
        """Gets the title of this AttachmentRequest.


        :return: The title of this AttachmentRequest.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AttachmentRequest.


        :param title: The title of this AttachmentRequest.
        :type title: str
        """

        self._title = title

    @property
    def title_link(self):
        """Gets the title_link of this AttachmentRequest.


        :return: The title_link of this AttachmentRequest.
        :rtype: str
        """
        return self._title_link

    @title_link.setter
    def title_link(self, title_link):
        """Sets the title_link of this AttachmentRequest.


        :param title_link: The title_link of this AttachmentRequest.
        :type title_link: str
        """

        self._title_link = title_link

    @property
    def type(self):
        """Gets the type of this AttachmentRequest.

        Attachment type (e.g. image, video, url)

        :return: The type of this AttachmentRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AttachmentRequest.

        Attachment type (e.g. image, video, url)

        :param type: The type of this AttachmentRequest.
        :type type: str
        """

        self._type = type
