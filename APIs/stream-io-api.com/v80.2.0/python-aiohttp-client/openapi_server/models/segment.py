# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Segment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, description: str=None, filter: Dict[str, object]=None, id: str=None, in_use: bool=None, name: str=None, size: int=None, status: str=None, type: str=None, updated_at: datetime=None):
        """Segment - a model defined in OpenAPI

        :param created_at: The created_at of this Segment.
        :param description: The description of this Segment.
        :param filter: The filter of this Segment.
        :param id: The id of this Segment.
        :param in_use: The in_use of this Segment.
        :param name: The name of this Segment.
        :param size: The size of this Segment.
        :param status: The status of this Segment.
        :param type: The type of this Segment.
        :param updated_at: The updated_at of this Segment.
        """
        self.openapi_types = {
            'created_at': datetime,
            'description': str,
            'filter': Dict[str, object],
            'id': str,
            'in_use': bool,
            'name': str,
            'size': int,
            'status': str,
            'type': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'description': 'description',
            'filter': 'filter',
            'id': 'id',
            'in_use': 'in_use',
            'name': 'name',
            'size': 'size',
            'status': 'status',
            'type': 'type',
            'updated_at': 'updated_at'
        }

        self._created_at = created_at
        self._description = description
        self._filter = filter
        self._id = id
        self._in_use = in_use
        self._name = name
        self._size = size
        self._status = status
        self._type = type
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Segment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Segment of this Segment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Segment.


        :return: The created_at of this Segment.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Segment.


        :param created_at: The created_at of this Segment.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Segment.


        :return: The description of this Segment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Segment.


        :param description: The description of this Segment.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")

        self._description = description

    @property
    def filter(self):
        """Gets the filter of this Segment.


        :return: The filter of this Segment.
        :rtype: Dict[str, object]
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this Segment.


        :param filter: The filter of this Segment.
        :type filter: Dict[str, object]
        """
        if filter is None:
            raise ValueError("Invalid value for `filter`, must not be `None`")

        self._filter = filter

    @property
    def id(self):
        """Gets the id of this Segment.


        :return: The id of this Segment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Segment.


        :param id: The id of this Segment.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def in_use(self):
        """Gets the in_use of this Segment.


        :return: The in_use of this Segment.
        :rtype: bool
        """
        return self._in_use

    @in_use.setter
    def in_use(self, in_use):
        """Sets the in_use of this Segment.


        :param in_use: The in_use of this Segment.
        :type in_use: bool
        """
        if in_use is None:
            raise ValueError("Invalid value for `in_use`, must not be `None`")

        self._in_use = in_use

    @property
    def name(self):
        """Gets the name of this Segment.


        :return: The name of this Segment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Segment.


        :param name: The name of this Segment.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")

        self._name = name

    @property
    def size(self):
        """Gets the size of this Segment.


        :return: The size of this Segment.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Segment.


        :param size: The size of this Segment.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def status(self):
        """Gets the status of this Segment.


        :return: The status of this Segment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Segment.


        :param status: The status of this Segment.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def type(self):
        """Gets the type of this Segment.


        :return: The type of this Segment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Segment.


        :param type: The type of this Segment.
        :type type: str
        """
        allowed_values = ["user", "channel"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Segment.


        :return: The updated_at of this Segment.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Segment.


        :param updated_at: The updated_at of this Segment.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
