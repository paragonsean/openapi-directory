# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.apn_config_fields import APNConfigFields
from openapi_server.models.firebase_config_fields import FirebaseConfigFields
from openapi_server.models.huawei_config_fields import HuaweiConfigFields
from openapi_server.models.push_provider import PushProvider
from openapi_server.models.xiaomi_config_fields import XiaomiConfigFields
from openapi_server import util


class PushNotificationFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apn: APNConfigFields=None, firebase: FirebaseConfigFields=None, huawei: HuaweiConfigFields=None, offline_only: bool=None, providers: List[PushProvider]=None, version: str=None, xiaomi: XiaomiConfigFields=None):
        """PushNotificationFields - a model defined in OpenAPI

        :param apn: The apn of this PushNotificationFields.
        :param firebase: The firebase of this PushNotificationFields.
        :param huawei: The huawei of this PushNotificationFields.
        :param offline_only: The offline_only of this PushNotificationFields.
        :param providers: The providers of this PushNotificationFields.
        :param version: The version of this PushNotificationFields.
        :param xiaomi: The xiaomi of this PushNotificationFields.
        """
        self.openapi_types = {
            'apn': APNConfigFields,
            'firebase': FirebaseConfigFields,
            'huawei': HuaweiConfigFields,
            'offline_only': bool,
            'providers': List[PushProvider],
            'version': str,
            'xiaomi': XiaomiConfigFields
        }

        self.attribute_map = {
            'apn': 'apn',
            'firebase': 'firebase',
            'huawei': 'huawei',
            'offline_only': 'offline_only',
            'providers': 'providers',
            'version': 'version',
            'xiaomi': 'xiaomi'
        }

        self._apn = apn
        self._firebase = firebase
        self._huawei = huawei
        self._offline_only = offline_only
        self._providers = providers
        self._version = version
        self._xiaomi = xiaomi

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PushNotificationFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PushNotificationFields of this PushNotificationFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apn(self):
        """Gets the apn of this PushNotificationFields.


        :return: The apn of this PushNotificationFields.
        :rtype: APNConfigFields
        """
        return self._apn

    @apn.setter
    def apn(self, apn):
        """Sets the apn of this PushNotificationFields.


        :param apn: The apn of this PushNotificationFields.
        :type apn: APNConfigFields
        """
        if apn is None:
            raise ValueError("Invalid value for `apn`, must not be `None`")

        self._apn = apn

    @property
    def firebase(self):
        """Gets the firebase of this PushNotificationFields.


        :return: The firebase of this PushNotificationFields.
        :rtype: FirebaseConfigFields
        """
        return self._firebase

    @firebase.setter
    def firebase(self, firebase):
        """Sets the firebase of this PushNotificationFields.


        :param firebase: The firebase of this PushNotificationFields.
        :type firebase: FirebaseConfigFields
        """
        if firebase is None:
            raise ValueError("Invalid value for `firebase`, must not be `None`")

        self._firebase = firebase

    @property
    def huawei(self):
        """Gets the huawei of this PushNotificationFields.


        :return: The huawei of this PushNotificationFields.
        :rtype: HuaweiConfigFields
        """
        return self._huawei

    @huawei.setter
    def huawei(self, huawei):
        """Sets the huawei of this PushNotificationFields.


        :param huawei: The huawei of this PushNotificationFields.
        :type huawei: HuaweiConfigFields
        """
        if huawei is None:
            raise ValueError("Invalid value for `huawei`, must not be `None`")

        self._huawei = huawei

    @property
    def offline_only(self):
        """Gets the offline_only of this PushNotificationFields.


        :return: The offline_only of this PushNotificationFields.
        :rtype: bool
        """
        return self._offline_only

    @offline_only.setter
    def offline_only(self, offline_only):
        """Sets the offline_only of this PushNotificationFields.


        :param offline_only: The offline_only of this PushNotificationFields.
        :type offline_only: bool
        """
        if offline_only is None:
            raise ValueError("Invalid value for `offline_only`, must not be `None`")

        self._offline_only = offline_only

    @property
    def providers(self):
        """Gets the providers of this PushNotificationFields.


        :return: The providers of this PushNotificationFields.
        :rtype: List[PushProvider]
        """
        return self._providers

    @providers.setter
    def providers(self, providers):
        """Sets the providers of this PushNotificationFields.


        :param providers: The providers of this PushNotificationFields.
        :type providers: List[PushProvider]
        """

        self._providers = providers

    @property
    def version(self):
        """Gets the version of this PushNotificationFields.


        :return: The version of this PushNotificationFields.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this PushNotificationFields.


        :param version: The version of this PushNotificationFields.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def xiaomi(self):
        """Gets the xiaomi of this PushNotificationFields.


        :return: The xiaomi of this PushNotificationFields.
        :rtype: XiaomiConfigFields
        """
        return self._xiaomi

    @xiaomi.setter
    def xiaomi(self, xiaomi):
        """Sets the xiaomi of this PushNotificationFields.


        :param xiaomi: The xiaomi of this PushNotificationFields.
        :type xiaomi: XiaomiConfigFields
        """
        if xiaomi is None:
            raise ValueError("Invalid value for `xiaomi`, must not be `None`")

        self._xiaomi = xiaomi
