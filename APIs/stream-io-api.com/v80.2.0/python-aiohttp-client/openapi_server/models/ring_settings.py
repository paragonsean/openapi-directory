# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RingSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_cancel_timeout_ms: int=None, auto_reject_timeout_ms: int=None):
        """RingSettings - a model defined in OpenAPI

        :param auto_cancel_timeout_ms: The auto_cancel_timeout_ms of this RingSettings.
        :param auto_reject_timeout_ms: The auto_reject_timeout_ms of this RingSettings.
        """
        self.openapi_types = {
            'auto_cancel_timeout_ms': int,
            'auto_reject_timeout_ms': int
        }

        self.attribute_map = {
            'auto_cancel_timeout_ms': 'auto_cancel_timeout_ms',
            'auto_reject_timeout_ms': 'auto_reject_timeout_ms'
        }

        self._auto_cancel_timeout_ms = auto_cancel_timeout_ms
        self._auto_reject_timeout_ms = auto_reject_timeout_ms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RingSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RingSettings of this RingSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_cancel_timeout_ms(self):
        """Gets the auto_cancel_timeout_ms of this RingSettings.


        :return: The auto_cancel_timeout_ms of this RingSettings.
        :rtype: int
        """
        return self._auto_cancel_timeout_ms

    @auto_cancel_timeout_ms.setter
    def auto_cancel_timeout_ms(self, auto_cancel_timeout_ms):
        """Sets the auto_cancel_timeout_ms of this RingSettings.


        :param auto_cancel_timeout_ms: The auto_cancel_timeout_ms of this RingSettings.
        :type auto_cancel_timeout_ms: int
        """
        if auto_cancel_timeout_ms is None:
            raise ValueError("Invalid value for `auto_cancel_timeout_ms`, must not be `None`")

        self._auto_cancel_timeout_ms = auto_cancel_timeout_ms

    @property
    def auto_reject_timeout_ms(self):
        """Gets the auto_reject_timeout_ms of this RingSettings.


        :return: The auto_reject_timeout_ms of this RingSettings.
        :rtype: int
        """
        return self._auto_reject_timeout_ms

    @auto_reject_timeout_ms.setter
    def auto_reject_timeout_ms(self, auto_reject_timeout_ms):
        """Sets the auto_reject_timeout_ms of this RingSettings.


        :param auto_reject_timeout_ms: The auto_reject_timeout_ms of this RingSettings.
        :type auto_reject_timeout_ms: int
        """
        if auto_reject_timeout_ms is None:
            raise ValueError("Invalid value for `auto_reject_timeout_ms`, must not be `None`")

        self._auto_reject_timeout_ms = auto_reject_timeout_ms
