# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_export_request import ChannelExportRequest
from openapi_server import util


class ExportChannelsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channels: List[ChannelExportRequest]=None, clear_deleted_message_text: bool=None, export_users: bool=None, include_truncated_messages: bool=None, version: str=None):
        """ExportChannelsRequest - a model defined in OpenAPI

        :param channels: The channels of this ExportChannelsRequest.
        :param clear_deleted_message_text: The clear_deleted_message_text of this ExportChannelsRequest.
        :param export_users: The export_users of this ExportChannelsRequest.
        :param include_truncated_messages: The include_truncated_messages of this ExportChannelsRequest.
        :param version: The version of this ExportChannelsRequest.
        """
        self.openapi_types = {
            'channels': List[ChannelExportRequest],
            'clear_deleted_message_text': bool,
            'export_users': bool,
            'include_truncated_messages': bool,
            'version': str
        }

        self.attribute_map = {
            'channels': 'channels',
            'clear_deleted_message_text': 'clear_deleted_message_text',
            'export_users': 'export_users',
            'include_truncated_messages': 'include_truncated_messages',
            'version': 'version'
        }

        self._channels = channels
        self._clear_deleted_message_text = clear_deleted_message_text
        self._export_users = export_users
        self._include_truncated_messages = include_truncated_messages
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportChannelsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportChannelsRequest of this ExportChannelsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channels(self):
        """Gets the channels of this ExportChannelsRequest.

        Export options for channels

        :return: The channels of this ExportChannelsRequest.
        :rtype: List[ChannelExportRequest]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this ExportChannelsRequest.

        Export options for channels

        :param channels: The channels of this ExportChannelsRequest.
        :type channels: List[ChannelExportRequest]
        """

        self._channels = channels

    @property
    def clear_deleted_message_text(self):
        """Gets the clear_deleted_message_text of this ExportChannelsRequest.

        Set if deleted message text should be cleared

        :return: The clear_deleted_message_text of this ExportChannelsRequest.
        :rtype: bool
        """
        return self._clear_deleted_message_text

    @clear_deleted_message_text.setter
    def clear_deleted_message_text(self, clear_deleted_message_text):
        """Sets the clear_deleted_message_text of this ExportChannelsRequest.

        Set if deleted message text should be cleared

        :param clear_deleted_message_text: The clear_deleted_message_text of this ExportChannelsRequest.
        :type clear_deleted_message_text: bool
        """

        self._clear_deleted_message_text = clear_deleted_message_text

    @property
    def export_users(self):
        """Gets the export_users of this ExportChannelsRequest.


        :return: The export_users of this ExportChannelsRequest.
        :rtype: bool
        """
        return self._export_users

    @export_users.setter
    def export_users(self, export_users):
        """Sets the export_users of this ExportChannelsRequest.


        :param export_users: The export_users of this ExportChannelsRequest.
        :type export_users: bool
        """

        self._export_users = export_users

    @property
    def include_truncated_messages(self):
        """Gets the include_truncated_messages of this ExportChannelsRequest.

        Set if you want to include truncated messages

        :return: The include_truncated_messages of this ExportChannelsRequest.
        :rtype: bool
        """
        return self._include_truncated_messages

    @include_truncated_messages.setter
    def include_truncated_messages(self, include_truncated_messages):
        """Sets the include_truncated_messages of this ExportChannelsRequest.

        Set if you want to include truncated messages

        :param include_truncated_messages: The include_truncated_messages of this ExportChannelsRequest.
        :type include_truncated_messages: bool
        """

        self._include_truncated_messages = include_truncated_messages

    @property
    def version(self):
        """Gets the version of this ExportChannelsRequest.


        :return: The version of this ExportChannelsRequest.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ExportChannelsRequest.


        :param version: The version of this ExportChannelsRequest.
        :type version: str
        """

        self._version = version
