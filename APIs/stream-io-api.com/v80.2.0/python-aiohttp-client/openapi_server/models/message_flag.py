# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message import Message
from openapi_server.models.message_moderation_result import MessageModerationResult
from openapi_server.models.user_object import UserObject
from openapi_server import util


class MessageFlag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approved_at: datetime=None, created_at: datetime=None, created_by_automod: bool=None, message: Message=None, moderation_result: MessageModerationResult=None, rejected_at: datetime=None, reviewed_at: datetime=None, reviewed_by: UserObject=None, updated_at: datetime=None, user: UserObject=None):
        """MessageFlag - a model defined in OpenAPI

        :param approved_at: The approved_at of this MessageFlag.
        :param created_at: The created_at of this MessageFlag.
        :param created_by_automod: The created_by_automod of this MessageFlag.
        :param message: The message of this MessageFlag.
        :param moderation_result: The moderation_result of this MessageFlag.
        :param rejected_at: The rejected_at of this MessageFlag.
        :param reviewed_at: The reviewed_at of this MessageFlag.
        :param reviewed_by: The reviewed_by of this MessageFlag.
        :param updated_at: The updated_at of this MessageFlag.
        :param user: The user of this MessageFlag.
        """
        self.openapi_types = {
            'approved_at': datetime,
            'created_at': datetime,
            'created_by_automod': bool,
            'message': Message,
            'moderation_result': MessageModerationResult,
            'rejected_at': datetime,
            'reviewed_at': datetime,
            'reviewed_by': UserObject,
            'updated_at': datetime,
            'user': UserObject
        }

        self.attribute_map = {
            'approved_at': 'approved_at',
            'created_at': 'created_at',
            'created_by_automod': 'created_by_automod',
            'message': 'message',
            'moderation_result': 'moderation_result',
            'rejected_at': 'rejected_at',
            'reviewed_at': 'reviewed_at',
            'reviewed_by': 'reviewed_by',
            'updated_at': 'updated_at',
            'user': 'user'
        }

        self._approved_at = approved_at
        self._created_at = created_at
        self._created_by_automod = created_by_automod
        self._message = message
        self._moderation_result = moderation_result
        self._rejected_at = rejected_at
        self._reviewed_at = reviewed_at
        self._reviewed_by = reviewed_by
        self._updated_at = updated_at
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageFlag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageFlag of this MessageFlag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approved_at(self):
        """Gets the approved_at of this MessageFlag.


        :return: The approved_at of this MessageFlag.
        :rtype: datetime
        """
        return self._approved_at

    @approved_at.setter
    def approved_at(self, approved_at):
        """Sets the approved_at of this MessageFlag.


        :param approved_at: The approved_at of this MessageFlag.
        :type approved_at: datetime
        """

        self._approved_at = approved_at

    @property
    def created_at(self):
        """Gets the created_at of this MessageFlag.


        :return: The created_at of this MessageFlag.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this MessageFlag.


        :param created_at: The created_at of this MessageFlag.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def created_by_automod(self):
        """Gets the created_by_automod of this MessageFlag.


        :return: The created_by_automod of this MessageFlag.
        :rtype: bool
        """
        return self._created_by_automod

    @created_by_automod.setter
    def created_by_automod(self, created_by_automod):
        """Sets the created_by_automod of this MessageFlag.


        :param created_by_automod: The created_by_automod of this MessageFlag.
        :type created_by_automod: bool
        """
        if created_by_automod is None:
            raise ValueError("Invalid value for `created_by_automod`, must not be `None`")

        self._created_by_automod = created_by_automod

    @property
    def message(self):
        """Gets the message of this MessageFlag.


        :return: The message of this MessageFlag.
        :rtype: Message
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this MessageFlag.


        :param message: The message of this MessageFlag.
        :type message: Message
        """

        self._message = message

    @property
    def moderation_result(self):
        """Gets the moderation_result of this MessageFlag.


        :return: The moderation_result of this MessageFlag.
        :rtype: MessageModerationResult
        """
        return self._moderation_result

    @moderation_result.setter
    def moderation_result(self, moderation_result):
        """Sets the moderation_result of this MessageFlag.


        :param moderation_result: The moderation_result of this MessageFlag.
        :type moderation_result: MessageModerationResult
        """

        self._moderation_result = moderation_result

    @property
    def rejected_at(self):
        """Gets the rejected_at of this MessageFlag.


        :return: The rejected_at of this MessageFlag.
        :rtype: datetime
        """
        return self._rejected_at

    @rejected_at.setter
    def rejected_at(self, rejected_at):
        """Sets the rejected_at of this MessageFlag.


        :param rejected_at: The rejected_at of this MessageFlag.
        :type rejected_at: datetime
        """

        self._rejected_at = rejected_at

    @property
    def reviewed_at(self):
        """Gets the reviewed_at of this MessageFlag.


        :return: The reviewed_at of this MessageFlag.
        :rtype: datetime
        """
        return self._reviewed_at

    @reviewed_at.setter
    def reviewed_at(self, reviewed_at):
        """Sets the reviewed_at of this MessageFlag.


        :param reviewed_at: The reviewed_at of this MessageFlag.
        :type reviewed_at: datetime
        """

        self._reviewed_at = reviewed_at

    @property
    def reviewed_by(self):
        """Gets the reviewed_by of this MessageFlag.


        :return: The reviewed_by of this MessageFlag.
        :rtype: UserObject
        """
        return self._reviewed_by

    @reviewed_by.setter
    def reviewed_by(self, reviewed_by):
        """Sets the reviewed_by of this MessageFlag.


        :param reviewed_by: The reviewed_by of this MessageFlag.
        :type reviewed_by: UserObject
        """

        self._reviewed_by = reviewed_by

    @property
    def updated_at(self):
        """Gets the updated_at of this MessageFlag.


        :return: The updated_at of this MessageFlag.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this MessageFlag.


        :param updated_at: The updated_at of this MessageFlag.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this MessageFlag.


        :return: The user of this MessageFlag.
        :rtype: UserObject
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this MessageFlag.


        :param user: The user of this MessageFlag.
        :type user: UserObject
        """

        self._user = user
