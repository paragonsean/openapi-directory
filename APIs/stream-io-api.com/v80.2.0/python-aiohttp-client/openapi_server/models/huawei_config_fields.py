# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HuaweiConfigFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, id: str=None, secret: str=None):
        """HuaweiConfigFields - a model defined in OpenAPI

        :param enabled: The enabled of this HuaweiConfigFields.
        :param id: The id of this HuaweiConfigFields.
        :param secret: The secret of this HuaweiConfigFields.
        """
        self.openapi_types = {
            'enabled': bool,
            'id': str,
            'secret': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'id': 'id',
            'secret': 'secret'
        }

        self._enabled = enabled
        self._id = id
        self._secret = secret

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HuaweiConfigFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HuaweiConfigFields of this HuaweiConfigFields.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this HuaweiConfigFields.


        :return: The enabled of this HuaweiConfigFields.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this HuaweiConfigFields.


        :param enabled: The enabled of this HuaweiConfigFields.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this HuaweiConfigFields.


        :return: The id of this HuaweiConfigFields.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HuaweiConfigFields.


        :param id: The id of this HuaweiConfigFields.
        :type id: str
        """

        self._id = id

    @property
    def secret(self):
        """Gets the secret of this HuaweiConfigFields.


        :return: The secret of this HuaweiConfigFields.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this HuaweiConfigFields.


        :param secret: The secret of this HuaweiConfigFields.
        :type secret: str
        """

        self._secret = secret
