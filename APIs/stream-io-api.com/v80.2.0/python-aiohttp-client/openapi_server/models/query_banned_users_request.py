# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sort_param import SortParam
from openapi_server.models.user_object import UserObject
from openapi_server import util


class QueryBannedUsersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at_after: datetime=None, created_at_after_or_equal: datetime=None, created_at_before: datetime=None, created_at_before_or_equal: datetime=None, filter_conditions: Dict[str, object]=None, limit: int=None, offset: int=None, sort: List[SortParam]=None, user: UserObject=None, user_id: str=None):
        """QueryBannedUsersRequest - a model defined in OpenAPI

        :param created_at_after: The created_at_after of this QueryBannedUsersRequest.
        :param created_at_after_or_equal: The created_at_after_or_equal of this QueryBannedUsersRequest.
        :param created_at_before: The created_at_before of this QueryBannedUsersRequest.
        :param created_at_before_or_equal: The created_at_before_or_equal of this QueryBannedUsersRequest.
        :param filter_conditions: The filter_conditions of this QueryBannedUsersRequest.
        :param limit: The limit of this QueryBannedUsersRequest.
        :param offset: The offset of this QueryBannedUsersRequest.
        :param sort: The sort of this QueryBannedUsersRequest.
        :param user: The user of this QueryBannedUsersRequest.
        :param user_id: The user_id of this QueryBannedUsersRequest.
        """
        self.openapi_types = {
            'created_at_after': datetime,
            'created_at_after_or_equal': datetime,
            'created_at_before': datetime,
            'created_at_before_or_equal': datetime,
            'filter_conditions': Dict[str, object],
            'limit': int,
            'offset': int,
            'sort': List[SortParam],
            'user': UserObject,
            'user_id': str
        }

        self.attribute_map = {
            'created_at_after': 'created_at_after',
            'created_at_after_or_equal': 'created_at_after_or_equal',
            'created_at_before': 'created_at_before',
            'created_at_before_or_equal': 'created_at_before_or_equal',
            'filter_conditions': 'filter_conditions',
            'limit': 'limit',
            'offset': 'offset',
            'sort': 'sort',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._created_at_after = created_at_after
        self._created_at_after_or_equal = created_at_after_or_equal
        self._created_at_before = created_at_before
        self._created_at_before_or_equal = created_at_before_or_equal
        self._filter_conditions = filter_conditions
        self._limit = limit
        self._offset = offset
        self._sort = sort
        self._user = user
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryBannedUsersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryBannedUsersRequest of this QueryBannedUsersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at_after(self):
        """Gets the created_at_after of this QueryBannedUsersRequest.


        :return: The created_at_after of this QueryBannedUsersRequest.
        :rtype: datetime
        """
        return self._created_at_after

    @created_at_after.setter
    def created_at_after(self, created_at_after):
        """Sets the created_at_after of this QueryBannedUsersRequest.


        :param created_at_after: The created_at_after of this QueryBannedUsersRequest.
        :type created_at_after: datetime
        """

        self._created_at_after = created_at_after

    @property
    def created_at_after_or_equal(self):
        """Gets the created_at_after_or_equal of this QueryBannedUsersRequest.


        :return: The created_at_after_or_equal of this QueryBannedUsersRequest.
        :rtype: datetime
        """
        return self._created_at_after_or_equal

    @created_at_after_or_equal.setter
    def created_at_after_or_equal(self, created_at_after_or_equal):
        """Sets the created_at_after_or_equal of this QueryBannedUsersRequest.


        :param created_at_after_or_equal: The created_at_after_or_equal of this QueryBannedUsersRequest.
        :type created_at_after_or_equal: datetime
        """

        self._created_at_after_or_equal = created_at_after_or_equal

    @property
    def created_at_before(self):
        """Gets the created_at_before of this QueryBannedUsersRequest.


        :return: The created_at_before of this QueryBannedUsersRequest.
        :rtype: datetime
        """
        return self._created_at_before

    @created_at_before.setter
    def created_at_before(self, created_at_before):
        """Sets the created_at_before of this QueryBannedUsersRequest.


        :param created_at_before: The created_at_before of this QueryBannedUsersRequest.
        :type created_at_before: datetime
        """

        self._created_at_before = created_at_before

    @property
    def created_at_before_or_equal(self):
        """Gets the created_at_before_or_equal of this QueryBannedUsersRequest.


        :return: The created_at_before_or_equal of this QueryBannedUsersRequest.
        :rtype: datetime
        """
        return self._created_at_before_or_equal

    @created_at_before_or_equal.setter
    def created_at_before_or_equal(self, created_at_before_or_equal):
        """Sets the created_at_before_or_equal of this QueryBannedUsersRequest.


        :param created_at_before_or_equal: The created_at_before_or_equal of this QueryBannedUsersRequest.
        :type created_at_before_or_equal: datetime
        """

        self._created_at_before_or_equal = created_at_before_or_equal

    @property
    def filter_conditions(self):
        """Gets the filter_conditions of this QueryBannedUsersRequest.


        :return: The filter_conditions of this QueryBannedUsersRequest.
        :rtype: Dict[str, object]
        """
        return self._filter_conditions

    @filter_conditions.setter
    def filter_conditions(self, filter_conditions):
        """Sets the filter_conditions of this QueryBannedUsersRequest.


        :param filter_conditions: The filter_conditions of this QueryBannedUsersRequest.
        :type filter_conditions: Dict[str, object]
        """
        if filter_conditions is None:
            raise ValueError("Invalid value for `filter_conditions`, must not be `None`")

        self._filter_conditions = filter_conditions

    @property
    def limit(self):
        """Gets the limit of this QueryBannedUsersRequest.


        :return: The limit of this QueryBannedUsersRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this QueryBannedUsersRequest.


        :param limit: The limit of this QueryBannedUsersRequest.
        :type limit: int
        """
        if limit is not None and limit > 300:
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `300`")

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this QueryBannedUsersRequest.


        :return: The offset of this QueryBannedUsersRequest.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this QueryBannedUsersRequest.


        :param offset: The offset of this QueryBannedUsersRequest.
        :type offset: int
        """
        if offset is not None and offset > 10000:
            raise ValueError("Invalid value for `offset`, must be a value less than or equal to `10000`")

        self._offset = offset

    @property
    def sort(self):
        """Gets the sort of this QueryBannedUsersRequest.


        :return: The sort of this QueryBannedUsersRequest.
        :rtype: List[SortParam]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this QueryBannedUsersRequest.


        :param sort: The sort of this QueryBannedUsersRequest.
        :type sort: List[SortParam]
        """

        self._sort = sort

    @property
    def user(self):
        """Gets the user of this QueryBannedUsersRequest.


        :return: The user of this QueryBannedUsersRequest.
        :rtype: UserObject
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this QueryBannedUsersRequest.


        :param user: The user of this QueryBannedUsersRequest.
        :type user: UserObject
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this QueryBannedUsersRequest.

        **Server-side only**. User ID which server acts upon

        :return: The user_id of this QueryBannedUsersRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this QueryBannedUsersRequest.

        **Server-side only**. User ID which server acts upon

        :param user_id: The user_id of this QueryBannedUsersRequest.
        :type user_id: str
        """

        self._user_id = user_id
