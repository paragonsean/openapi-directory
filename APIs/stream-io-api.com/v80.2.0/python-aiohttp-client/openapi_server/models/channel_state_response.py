# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_member import ChannelMember
from openapi_server.models.channel_response import ChannelResponse
from openapi_server.models.message import Message
from openapi_server.models.pending_message import PendingMessage
from openapi_server.models.read import Read
from openapi_server.models.user_object import UserObject
from openapi_server import util


class ChannelStateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel: ChannelResponse=None, duration: str=None, hidden: bool=None, hide_messages_before: datetime=None, members: List[ChannelMember]=None, membership: ChannelMember=None, messages: List[Message]=None, pending_messages: List[PendingMessage]=None, pinned_messages: List[Message]=None, read: List[Read]=None, watcher_count: int=None, watchers: List[UserObject]=None):
        """ChannelStateResponse - a model defined in OpenAPI

        :param channel: The channel of this ChannelStateResponse.
        :param duration: The duration of this ChannelStateResponse.
        :param hidden: The hidden of this ChannelStateResponse.
        :param hide_messages_before: The hide_messages_before of this ChannelStateResponse.
        :param members: The members of this ChannelStateResponse.
        :param membership: The membership of this ChannelStateResponse.
        :param messages: The messages of this ChannelStateResponse.
        :param pending_messages: The pending_messages of this ChannelStateResponse.
        :param pinned_messages: The pinned_messages of this ChannelStateResponse.
        :param read: The read of this ChannelStateResponse.
        :param watcher_count: The watcher_count of this ChannelStateResponse.
        :param watchers: The watchers of this ChannelStateResponse.
        """
        self.openapi_types = {
            'channel': ChannelResponse,
            'duration': str,
            'hidden': bool,
            'hide_messages_before': datetime,
            'members': List[ChannelMember],
            'membership': ChannelMember,
            'messages': List[Message],
            'pending_messages': List[PendingMessage],
            'pinned_messages': List[Message],
            'read': List[Read],
            'watcher_count': int,
            'watchers': List[UserObject]
        }

        self.attribute_map = {
            'channel': 'channel',
            'duration': 'duration',
            'hidden': 'hidden',
            'hide_messages_before': 'hide_messages_before',
            'members': 'members',
            'membership': 'membership',
            'messages': 'messages',
            'pending_messages': 'pending_messages',
            'pinned_messages': 'pinned_messages',
            'read': 'read',
            'watcher_count': 'watcher_count',
            'watchers': 'watchers'
        }

        self._channel = channel
        self._duration = duration
        self._hidden = hidden
        self._hide_messages_before = hide_messages_before
        self._members = members
        self._membership = membership
        self._messages = messages
        self._pending_messages = pending_messages
        self._pinned_messages = pinned_messages
        self._read = read
        self._watcher_count = watcher_count
        self._watchers = watchers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelStateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelStateResponse of this ChannelStateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel(self):
        """Gets the channel of this ChannelStateResponse.


        :return: The channel of this ChannelStateResponse.
        :rtype: ChannelResponse
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this ChannelStateResponse.


        :param channel: The channel of this ChannelStateResponse.
        :type channel: ChannelResponse
        """

        self._channel = channel

    @property
    def duration(self):
        """Gets the duration of this ChannelStateResponse.


        :return: The duration of this ChannelStateResponse.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ChannelStateResponse.


        :param duration: The duration of this ChannelStateResponse.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def hidden(self):
        """Gets the hidden of this ChannelStateResponse.


        :return: The hidden of this ChannelStateResponse.
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this ChannelStateResponse.


        :param hidden: The hidden of this ChannelStateResponse.
        :type hidden: bool
        """

        self._hidden = hidden

    @property
    def hide_messages_before(self):
        """Gets the hide_messages_before of this ChannelStateResponse.


        :return: The hide_messages_before of this ChannelStateResponse.
        :rtype: datetime
        """
        return self._hide_messages_before

    @hide_messages_before.setter
    def hide_messages_before(self, hide_messages_before):
        """Sets the hide_messages_before of this ChannelStateResponse.


        :param hide_messages_before: The hide_messages_before of this ChannelStateResponse.
        :type hide_messages_before: datetime
        """

        self._hide_messages_before = hide_messages_before

    @property
    def members(self):
        """Gets the members of this ChannelStateResponse.


        :return: The members of this ChannelStateResponse.
        :rtype: List[ChannelMember]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this ChannelStateResponse.


        :param members: The members of this ChannelStateResponse.
        :type members: List[ChannelMember]
        """
        if members is None:
            raise ValueError("Invalid value for `members`, must not be `None`")

        self._members = members

    @property
    def membership(self):
        """Gets the membership of this ChannelStateResponse.


        :return: The membership of this ChannelStateResponse.
        :rtype: ChannelMember
        """
        return self._membership

    @membership.setter
    def membership(self, membership):
        """Sets the membership of this ChannelStateResponse.


        :param membership: The membership of this ChannelStateResponse.
        :type membership: ChannelMember
        """

        self._membership = membership

    @property
    def messages(self):
        """Gets the messages of this ChannelStateResponse.


        :return: The messages of this ChannelStateResponse.
        :rtype: List[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this ChannelStateResponse.


        :param messages: The messages of this ChannelStateResponse.
        :type messages: List[Message]
        """
        if messages is None:
            raise ValueError("Invalid value for `messages`, must not be `None`")

        self._messages = messages

    @property
    def pending_messages(self):
        """Gets the pending_messages of this ChannelStateResponse.


        :return: The pending_messages of this ChannelStateResponse.
        :rtype: List[PendingMessage]
        """
        return self._pending_messages

    @pending_messages.setter
    def pending_messages(self, pending_messages):
        """Sets the pending_messages of this ChannelStateResponse.


        :param pending_messages: The pending_messages of this ChannelStateResponse.
        :type pending_messages: List[PendingMessage]
        """

        self._pending_messages = pending_messages

    @property
    def pinned_messages(self):
        """Gets the pinned_messages of this ChannelStateResponse.


        :return: The pinned_messages of this ChannelStateResponse.
        :rtype: List[Message]
        """
        return self._pinned_messages

    @pinned_messages.setter
    def pinned_messages(self, pinned_messages):
        """Sets the pinned_messages of this ChannelStateResponse.


        :param pinned_messages: The pinned_messages of this ChannelStateResponse.
        :type pinned_messages: List[Message]
        """
        if pinned_messages is None:
            raise ValueError("Invalid value for `pinned_messages`, must not be `None`")

        self._pinned_messages = pinned_messages

    @property
    def read(self):
        """Gets the read of this ChannelStateResponse.


        :return: The read of this ChannelStateResponse.
        :rtype: List[Read]
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this ChannelStateResponse.


        :param read: The read of this ChannelStateResponse.
        :type read: List[Read]
        """

        self._read = read

    @property
    def watcher_count(self):
        """Gets the watcher_count of this ChannelStateResponse.


        :return: The watcher_count of this ChannelStateResponse.
        :rtype: int
        """
        return self._watcher_count

    @watcher_count.setter
    def watcher_count(self, watcher_count):
        """Sets the watcher_count of this ChannelStateResponse.


        :param watcher_count: The watcher_count of this ChannelStateResponse.
        :type watcher_count: int
        """

        self._watcher_count = watcher_count

    @property
    def watchers(self):
        """Gets the watchers of this ChannelStateResponse.


        :return: The watchers of this ChannelStateResponse.
        :rtype: List[UserObject]
        """
        return self._watchers

    @watchers.setter
    def watchers(self, watchers):
        """Sets the watchers of this ChannelStateResponse.


        :param watchers: The watchers of this ChannelStateResponse.
        :type watchers: List[UserObject]
        """

        self._watchers = watchers
