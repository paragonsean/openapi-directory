# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ErrorResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: object=None, stacktrace: str=None, type: str=None, version: str=None):
        """ErrorResult - a model defined in OpenAPI

        :param description: The description of this ErrorResult.
        :param stacktrace: The stacktrace of this ErrorResult.
        :param type: The type of this ErrorResult.
        :param version: The version of this ErrorResult.
        """
        self.openapi_types = {
            'description': object,
            'stacktrace': str,
            'type': str,
            'version': str
        }

        self.attribute_map = {
            'description': 'description',
            'stacktrace': 'stacktrace',
            'type': 'type',
            'version': 'version'
        }

        self._description = description
        self._stacktrace = stacktrace
        self._type = type
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ErrorResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ErrorResult of this ErrorResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ErrorResult.


        :return: The description of this ErrorResult.
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ErrorResult.


        :param description: The description of this ErrorResult.
        :type description: object
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def stacktrace(self):
        """Gets the stacktrace of this ErrorResult.


        :return: The stacktrace of this ErrorResult.
        :rtype: str
        """
        return self._stacktrace

    @stacktrace.setter
    def stacktrace(self, stacktrace):
        """Sets the stacktrace of this ErrorResult.


        :param stacktrace: The stacktrace of this ErrorResult.
        :type stacktrace: str
        """

        self._stacktrace = stacktrace

    @property
    def type(self):
        """Gets the type of this ErrorResult.


        :return: The type of this ErrorResult.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ErrorResult.


        :param type: The type of this ErrorResult.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def version(self):
        """Gets the version of this ErrorResult.


        :return: The version of this ErrorResult.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ErrorResult.


        :param version: The version of this ErrorResult.
        :type version: str
        """

        self._version = version
