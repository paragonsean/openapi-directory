# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageSize(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crop: str=None, height: int=None, resize: str=None, width: int=None):
        """ImageSize - a model defined in OpenAPI

        :param crop: The crop of this ImageSize.
        :param height: The height of this ImageSize.
        :param resize: The resize of this ImageSize.
        :param width: The width of this ImageSize.
        """
        self.openapi_types = {
            'crop': str,
            'height': int,
            'resize': str,
            'width': int
        }

        self.attribute_map = {
            'crop': 'crop',
            'height': 'height',
            'resize': 'resize',
            'width': 'width'
        }

        self._crop = crop
        self._height = height
        self._resize = resize
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageSize':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageSize of this ImageSize.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crop(self):
        """Gets the crop of this ImageSize.

        Crop mode

        :return: The crop of this ImageSize.
        :rtype: str
        """
        return self._crop

    @crop.setter
    def crop(self, crop):
        """Sets the crop of this ImageSize.

        Crop mode

        :param crop: The crop of this ImageSize.
        :type crop: str
        """
        allowed_values = ["top", "bottom", "left", "right", "center"]  # noqa: E501
        if crop not in allowed_values:
            raise ValueError(
                "Invalid value for `crop` ({0}), must be one of {1}"
                .format(crop, allowed_values)
            )

        self._crop = crop

    @property
    def height(self):
        """Gets the height of this ImageSize.

        Target image height

        :return: The height of this ImageSize.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ImageSize.

        Target image height

        :param height: The height of this ImageSize.
        :type height: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")

        self._height = height

    @property
    def resize(self):
        """Gets the resize of this ImageSize.

        Resize method

        :return: The resize of this ImageSize.
        :rtype: str
        """
        return self._resize

    @resize.setter
    def resize(self, resize):
        """Sets the resize of this ImageSize.

        Resize method

        :param resize: The resize of this ImageSize.
        :type resize: str
        """
        allowed_values = ["clip", "crop", "scale", "fill"]  # noqa: E501
        if resize not in allowed_values:
            raise ValueError(
                "Invalid value for `resize` ({0}), must be one of {1}"
                .format(resize, allowed_values)
            )

        self._resize = resize

    @property
    def width(self):
        """Gets the width of this ImageSize.

        Target image width

        :return: The width of this ImageSize.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ImageSize.

        Target image width

        :param width: The width of this ImageSize.
        :type width: int
        """
        if width is None:
            raise ValueError("Invalid value for `width`, must not be `None`")

        self._width = width
