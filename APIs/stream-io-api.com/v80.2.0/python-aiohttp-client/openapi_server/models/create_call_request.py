# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_object_request import UserObjectRequest
from openapi_server import util


class CreateCallRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, options: Dict[str, object]=None, type: str=None, user: UserObjectRequest=None, user_id: str=None):
        """CreateCallRequest - a model defined in OpenAPI

        :param id: The id of this CreateCallRequest.
        :param options: The options of this CreateCallRequest.
        :param type: The type of this CreateCallRequest.
        :param user: The user of this CreateCallRequest.
        :param user_id: The user_id of this CreateCallRequest.
        """
        self.openapi_types = {
            'id': str,
            'options': Dict[str, object],
            'type': str,
            'user': UserObjectRequest,
            'user_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'options': 'options',
            'type': 'type',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._id = id
        self._options = options
        self._type = type
        self._user = user
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCallRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCallRequest of this CreateCallRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this CreateCallRequest.


        :return: The id of this CreateCallRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateCallRequest.


        :param id: The id of this CreateCallRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def options(self):
        """Gets the options of this CreateCallRequest.


        :return: The options of this CreateCallRequest.
        :rtype: Dict[str, object]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this CreateCallRequest.


        :param options: The options of this CreateCallRequest.
        :type options: Dict[str, object]
        """

        self._options = options

    @property
    def type(self):
        """Gets the type of this CreateCallRequest.


        :return: The type of this CreateCallRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateCallRequest.


        :param type: The type of this CreateCallRequest.
        :type type: str
        """
        allowed_values = ["audio", "video"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user(self):
        """Gets the user of this CreateCallRequest.


        :return: The user of this CreateCallRequest.
        :rtype: UserObjectRequest
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CreateCallRequest.


        :param user: The user of this CreateCallRequest.
        :type user: UserObjectRequest
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this CreateCallRequest.

        **Server-side only**. User ID which server acts upon

        :return: The user_id of this CreateCallRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CreateCallRequest.

        **Server-side only**. User ID which server acts upon

        :param user_id: The user_id of this CreateCallRequest.
        :type user_id: str
        """

        self._user_id = user_id
