# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.channel_type_config import ChannelTypeConfig
from openapi_server import util


class ListChannelTypesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, channel_types: Dict[str, ChannelTypeConfig]=None, duration: str=None):
        """ListChannelTypesResponse - a model defined in OpenAPI

        :param channel_types: The channel_types of this ListChannelTypesResponse.
        :param duration: The duration of this ListChannelTypesResponse.
        """
        self.openapi_types = {
            'channel_types': Dict[str, ChannelTypeConfig],
            'duration': str
        }

        self.attribute_map = {
            'channel_types': 'channel_types',
            'duration': 'duration'
        }

        self._channel_types = channel_types
        self._duration = duration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListChannelTypesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListChannelTypesResponse of this ListChannelTypesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def channel_types(self):
        """Gets the channel_types of this ListChannelTypesResponse.

        Object with all channel types

        :return: The channel_types of this ListChannelTypesResponse.
        :rtype: Dict[str, ChannelTypeConfig]
        """
        return self._channel_types

    @channel_types.setter
    def channel_types(self, channel_types):
        """Sets the channel_types of this ListChannelTypesResponse.

        Object with all channel types

        :param channel_types: The channel_types of this ListChannelTypesResponse.
        :type channel_types: Dict[str, ChannelTypeConfig]
        """
        if channel_types is None:
            raise ValueError("Invalid value for `channel_types`, must not be `None`")

        self._channel_types = channel_types

    @property
    def duration(self):
        """Gets the duration of this ListChannelTypesResponse.


        :return: The duration of this ListChannelTypesResponse.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ListChannelTypesResponse.


        :param duration: The duration of this ListChannelTypesResponse.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration
