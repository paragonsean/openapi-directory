# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment_request import AttachmentRequest
from openapi_server import util


class CampaignDataRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[AttachmentRequest]=None, channel_type: str=None, defaults: Dict[str, str]=None, description: str=None, name: str=None, segment_id: str=None, sender_id: str=None, text: str=None):
        """CampaignDataRequest - a model defined in OpenAPI

        :param attachments: The attachments of this CampaignDataRequest.
        :param channel_type: The channel_type of this CampaignDataRequest.
        :param defaults: The defaults of this CampaignDataRequest.
        :param description: The description of this CampaignDataRequest.
        :param name: The name of this CampaignDataRequest.
        :param segment_id: The segment_id of this CampaignDataRequest.
        :param sender_id: The sender_id of this CampaignDataRequest.
        :param text: The text of this CampaignDataRequest.
        """
        self.openapi_types = {
            'attachments': List[AttachmentRequest],
            'channel_type': str,
            'defaults': Dict[str, str],
            'description': str,
            'name': str,
            'segment_id': str,
            'sender_id': str,
            'text': str
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'channel_type': 'channel_type',
            'defaults': 'defaults',
            'description': 'description',
            'name': 'name',
            'segment_id': 'segment_id',
            'sender_id': 'sender_id',
            'text': 'text'
        }

        self._attachments = attachments
        self._channel_type = channel_type
        self._defaults = defaults
        self._description = description
        self._name = name
        self._segment_id = segment_id
        self._sender_id = sender_id
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CampaignDataRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CampaignDataRequest of this CampaignDataRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this CampaignDataRequest.


        :return: The attachments of this CampaignDataRequest.
        :rtype: List[AttachmentRequest]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this CampaignDataRequest.


        :param attachments: The attachments of this CampaignDataRequest.
        :type attachments: List[AttachmentRequest]
        """

        self._attachments = attachments

    @property
    def channel_type(self):
        """Gets the channel_type of this CampaignDataRequest.


        :return: The channel_type of this CampaignDataRequest.
        :rtype: str
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this CampaignDataRequest.


        :param channel_type: The channel_type of this CampaignDataRequest.
        :type channel_type: str
        """
        if channel_type is not None and len(channel_type) > 64:
            raise ValueError("Invalid value for `channel_type`, length must be less than or equal to `64`")

        self._channel_type = channel_type

    @property
    def defaults(self):
        """Gets the defaults of this CampaignDataRequest.


        :return: The defaults of this CampaignDataRequest.
        :rtype: Dict[str, str]
        """
        return self._defaults

    @defaults.setter
    def defaults(self, defaults):
        """Sets the defaults of this CampaignDataRequest.


        :param defaults: The defaults of this CampaignDataRequest.
        :type defaults: Dict[str, str]
        """

        self._defaults = defaults

    @property
    def description(self):
        """Gets the description of this CampaignDataRequest.


        :return: The description of this CampaignDataRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CampaignDataRequest.


        :param description: The description of this CampaignDataRequest.
        :type description: str
        """
        if description is not None and len(description) > 1024:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this CampaignDataRequest.


        :return: The name of this CampaignDataRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CampaignDataRequest.


        :param name: The name of this CampaignDataRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")

        self._name = name

    @property
    def segment_id(self):
        """Gets the segment_id of this CampaignDataRequest.


        :return: The segment_id of this CampaignDataRequest.
        :rtype: str
        """
        return self._segment_id

    @segment_id.setter
    def segment_id(self, segment_id):
        """Sets the segment_id of this CampaignDataRequest.


        :param segment_id: The segment_id of this CampaignDataRequest.
        :type segment_id: str
        """
        if segment_id is None:
            raise ValueError("Invalid value for `segment_id`, must not be `None`")

        self._segment_id = segment_id

    @property
    def sender_id(self):
        """Gets the sender_id of this CampaignDataRequest.


        :return: The sender_id of this CampaignDataRequest.
        :rtype: str
        """
        return self._sender_id

    @sender_id.setter
    def sender_id(self, sender_id):
        """Sets the sender_id of this CampaignDataRequest.


        :param sender_id: The sender_id of this CampaignDataRequest.
        :type sender_id: str
        """
        if sender_id is None:
            raise ValueError("Invalid value for `sender_id`, must not be `None`")

        self._sender_id = sender_id

    @property
    def text(self):
        """Gets the text of this CampaignDataRequest.


        :return: The text of this CampaignDataRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this CampaignDataRequest.


        :param text: The text of this CampaignDataRequest.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text
