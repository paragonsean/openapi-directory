# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Recipient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, campaign_id: str=None, channel_cid: str=None, created_at: datetime=None, details: str=None, message_id: str=None, receiver_id: str=None, status: str=None, updated_at: datetime=None):
        """Recipient - a model defined in OpenAPI

        :param campaign_id: The campaign_id of this Recipient.
        :param channel_cid: The channel_cid of this Recipient.
        :param created_at: The created_at of this Recipient.
        :param details: The details of this Recipient.
        :param message_id: The message_id of this Recipient.
        :param receiver_id: The receiver_id of this Recipient.
        :param status: The status of this Recipient.
        :param updated_at: The updated_at of this Recipient.
        """
        self.openapi_types = {
            'campaign_id': str,
            'channel_cid': str,
            'created_at': datetime,
            'details': str,
            'message_id': str,
            'receiver_id': str,
            'status': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'campaign_id': 'campaign_id',
            'channel_cid': 'channel_cid',
            'created_at': 'created_at',
            'details': 'details',
            'message_id': 'message_id',
            'receiver_id': 'receiver_id',
            'status': 'status',
            'updated_at': 'updated_at'
        }

        self._campaign_id = campaign_id
        self._channel_cid = channel_cid
        self._created_at = created_at
        self._details = details
        self._message_id = message_id
        self._receiver_id = receiver_id
        self._status = status
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Recipient':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Recipient of this Recipient.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def campaign_id(self):
        """Gets the campaign_id of this Recipient.


        :return: The campaign_id of this Recipient.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this Recipient.


        :param campaign_id: The campaign_id of this Recipient.
        :type campaign_id: str
        """
        if campaign_id is None:
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")

        self._campaign_id = campaign_id

    @property
    def channel_cid(self):
        """Gets the channel_cid of this Recipient.


        :return: The channel_cid of this Recipient.
        :rtype: str
        """
        return self._channel_cid

    @channel_cid.setter
    def channel_cid(self, channel_cid):
        """Sets the channel_cid of this Recipient.


        :param channel_cid: The channel_cid of this Recipient.
        :type channel_cid: str
        """
        if channel_cid is None:
            raise ValueError("Invalid value for `channel_cid`, must not be `None`")

        self._channel_cid = channel_cid

    @property
    def created_at(self):
        """Gets the created_at of this Recipient.


        :return: The created_at of this Recipient.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Recipient.


        :param created_at: The created_at of this Recipient.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def details(self):
        """Gets the details of this Recipient.


        :return: The details of this Recipient.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Recipient.


        :param details: The details of this Recipient.
        :type details: str
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")

        self._details = details

    @property
    def message_id(self):
        """Gets the message_id of this Recipient.


        :return: The message_id of this Recipient.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this Recipient.


        :param message_id: The message_id of this Recipient.
        :type message_id: str
        """
        if message_id is None:
            raise ValueError("Invalid value for `message_id`, must not be `None`")

        self._message_id = message_id

    @property
    def receiver_id(self):
        """Gets the receiver_id of this Recipient.


        :return: The receiver_id of this Recipient.
        :rtype: str
        """
        return self._receiver_id

    @receiver_id.setter
    def receiver_id(self, receiver_id):
        """Sets the receiver_id of this Recipient.


        :param receiver_id: The receiver_id of this Recipient.
        :type receiver_id: str
        """
        if receiver_id is None:
            raise ValueError("Invalid value for `receiver_id`, must not be `None`")

        self._receiver_id = receiver_id

    @property
    def status(self):
        """Gets the status of this Recipient.


        :return: The status of this Recipient.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Recipient.


        :param status: The status of this Recipient.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this Recipient.


        :return: The updated_at of this Recipient.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Recipient.


        :param updated_at: The updated_at of this Recipient.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
