# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CampaignSortField(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field: str=None, value: object=None):
        """CampaignSortField - a model defined in OpenAPI

        :param _field: The _field of this CampaignSortField.
        :param value: The value of this CampaignSortField.
        """
        self.openapi_types = {
            '_field': str,
            'value': object
        }

        self.attribute_map = {
            '_field': 'field',
            'value': 'value'
        }

        self.__field = _field
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CampaignSortField':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CampaignSortField of this CampaignSortField.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self):
        """Gets the _field of this CampaignSortField.


        :return: The _field of this CampaignSortField.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this CampaignSortField.


        :param _field: The _field of this CampaignSortField.
        :type _field: str
        """
        if _field is None:
            raise ValueError("Invalid value for `_field`, must not be `None`")

        self.__field = _field

    @property
    def value(self):
        """Gets the value of this CampaignSortField.


        :return: The value of this CampaignSortField.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CampaignSortField.


        :param value: The value of this CampaignSortField.
        :type value: object
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
