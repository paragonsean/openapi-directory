# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment import Attachment
from openapi_server.models.reaction import Reaction
from openapi_server.models.user_object import UserObject
from openapi_server import util


class Message(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[Attachment]=None, before_message_send_failed: bool=None, cid: str=None, command: str=None, created_at: datetime=None, deleted_at: datetime=None, html: str=None, i18n: Dict[str, str]=None, id: str=None, image_labels: Dict[str, List[str]]=None, latest_reactions: List[Reaction]=None, mentioned_users: List[UserObject]=None, mml: str=None, own_reactions: List[Reaction]=None, parent_id: str=None, pin_expires: datetime=None, pinned: bool=None, pinned_at: datetime=None, pinned_by: UserObject=None, quoted_message: Message=None, quoted_message_id: str=None, reaction_counts: Dict[str, int]=None, reaction_scores: Dict[str, int]=None, reply_count: int=None, shadowed: bool=None, show_in_channel: bool=None, silent: bool=None, text: str=None, thread_participants: List[UserObject]=None, type: str=None, updated_at: datetime=None, user: UserObject=None):
        """Message - a model defined in OpenAPI

        :param attachments: The attachments of this Message.
        :param before_message_send_failed: The before_message_send_failed of this Message.
        :param cid: The cid of this Message.
        :param command: The command of this Message.
        :param created_at: The created_at of this Message.
        :param deleted_at: The deleted_at of this Message.
        :param html: The html of this Message.
        :param i18n: The i18n of this Message.
        :param id: The id of this Message.
        :param image_labels: The image_labels of this Message.
        :param latest_reactions: The latest_reactions of this Message.
        :param mentioned_users: The mentioned_users of this Message.
        :param mml: The mml of this Message.
        :param own_reactions: The own_reactions of this Message.
        :param parent_id: The parent_id of this Message.
        :param pin_expires: The pin_expires of this Message.
        :param pinned: The pinned of this Message.
        :param pinned_at: The pinned_at of this Message.
        :param pinned_by: The pinned_by of this Message.
        :param quoted_message: The quoted_message of this Message.
        :param quoted_message_id: The quoted_message_id of this Message.
        :param reaction_counts: The reaction_counts of this Message.
        :param reaction_scores: The reaction_scores of this Message.
        :param reply_count: The reply_count of this Message.
        :param shadowed: The shadowed of this Message.
        :param show_in_channel: The show_in_channel of this Message.
        :param silent: The silent of this Message.
        :param text: The text of this Message.
        :param thread_participants: The thread_participants of this Message.
        :param type: The type of this Message.
        :param updated_at: The updated_at of this Message.
        :param user: The user of this Message.
        """
        self.openapi_types = {
            'attachments': List[Attachment],
            'before_message_send_failed': bool,
            'cid': str,
            'command': str,
            'created_at': datetime,
            'deleted_at': datetime,
            'html': str,
            'i18n': Dict[str, str],
            'id': str,
            'image_labels': Dict[str, List[str]],
            'latest_reactions': List[Reaction],
            'mentioned_users': List[UserObject],
            'mml': str,
            'own_reactions': List[Reaction],
            'parent_id': str,
            'pin_expires': datetime,
            'pinned': bool,
            'pinned_at': datetime,
            'pinned_by': UserObject,
            'quoted_message': Message,
            'quoted_message_id': str,
            'reaction_counts': Dict[str, int],
            'reaction_scores': Dict[str, int],
            'reply_count': int,
            'shadowed': bool,
            'show_in_channel': bool,
            'silent': bool,
            'text': str,
            'thread_participants': List[UserObject],
            'type': str,
            'updated_at': datetime,
            'user': UserObject
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'before_message_send_failed': 'before_message_send_failed',
            'cid': 'cid',
            'command': 'command',
            'created_at': 'created_at',
            'deleted_at': 'deleted_at',
            'html': 'html',
            'i18n': 'i18n',
            'id': 'id',
            'image_labels': 'image_labels',
            'latest_reactions': 'latest_reactions',
            'mentioned_users': 'mentioned_users',
            'mml': 'mml',
            'own_reactions': 'own_reactions',
            'parent_id': 'parent_id',
            'pin_expires': 'pin_expires',
            'pinned': 'pinned',
            'pinned_at': 'pinned_at',
            'pinned_by': 'pinned_by',
            'quoted_message': 'quoted_message',
            'quoted_message_id': 'quoted_message_id',
            'reaction_counts': 'reaction_counts',
            'reaction_scores': 'reaction_scores',
            'reply_count': 'reply_count',
            'shadowed': 'shadowed',
            'show_in_channel': 'show_in_channel',
            'silent': 'silent',
            'text': 'text',
            'thread_participants': 'thread_participants',
            'type': 'type',
            'updated_at': 'updated_at',
            'user': 'user'
        }

        self._attachments = attachments
        self._before_message_send_failed = before_message_send_failed
        self._cid = cid
        self._command = command
        self._created_at = created_at
        self._deleted_at = deleted_at
        self._html = html
        self._i18n = i18n
        self._id = id
        self._image_labels = image_labels
        self._latest_reactions = latest_reactions
        self._mentioned_users = mentioned_users
        self._mml = mml
        self._own_reactions = own_reactions
        self._parent_id = parent_id
        self._pin_expires = pin_expires
        self._pinned = pinned
        self._pinned_at = pinned_at
        self._pinned_by = pinned_by
        self._quoted_message = quoted_message
        self._quoted_message_id = quoted_message_id
        self._reaction_counts = reaction_counts
        self._reaction_scores = reaction_scores
        self._reply_count = reply_count
        self._shadowed = shadowed
        self._show_in_channel = show_in_channel
        self._silent = silent
        self._text = text
        self._thread_participants = thread_participants
        self._type = type
        self._updated_at = updated_at
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Message':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Message of this Message.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this Message.

        Array of message attachments

        :return: The attachments of this Message.
        :rtype: List[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Message.

        Array of message attachments

        :param attachments: The attachments of this Message.
        :type attachments: List[Attachment]
        """
        if attachments is None:
            raise ValueError("Invalid value for `attachments`, must not be `None`")

        self._attachments = attachments

    @property
    def before_message_send_failed(self):
        """Gets the before_message_send_failed of this Message.

        Whether `before_message_send webhook` failed or not. Field is only accessible in push webhook

        :return: The before_message_send_failed of this Message.
        :rtype: bool
        """
        return self._before_message_send_failed

    @before_message_send_failed.setter
    def before_message_send_failed(self, before_message_send_failed):
        """Sets the before_message_send_failed of this Message.

        Whether `before_message_send webhook` failed or not. Field is only accessible in push webhook

        :param before_message_send_failed: The before_message_send_failed of this Message.
        :type before_message_send_failed: bool
        """

        self._before_message_send_failed = before_message_send_failed

    @property
    def cid(self):
        """Gets the cid of this Message.

        Channel unique identifier in <type>:<id> format

        :return: The cid of this Message.
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this Message.

        Channel unique identifier in <type>:<id> format

        :param cid: The cid of this Message.
        :type cid: str
        """
        if cid is None:
            raise ValueError("Invalid value for `cid`, must not be `None`")

        self._cid = cid

    @property
    def command(self):
        """Gets the command of this Message.

        Contains provided slash command

        :return: The command of this Message.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this Message.

        Contains provided slash command

        :param command: The command of this Message.
        :type command: str
        """

        self._command = command

    @property
    def created_at(self):
        """Gets the created_at of this Message.

        Date/time of creation

        :return: The created_at of this Message.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Message.

        Date/time of creation

        :param created_at: The created_at of this Message.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this Message.

        Date/time of deletion

        :return: The deleted_at of this Message.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this Message.

        Date/time of deletion

        :param deleted_at: The deleted_at of this Message.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def html(self):
        """Gets the html of this Message.

        Contains HTML markup of the message. Can only be set when using server-side API

        :return: The html of this Message.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this Message.

        Contains HTML markup of the message. Can only be set when using server-side API

        :param html: The html of this Message.
        :type html: str
        """
        if html is None:
            raise ValueError("Invalid value for `html`, must not be `None`")

        self._html = html

    @property
    def i18n(self):
        """Gets the i18n of this Message.

        Object with translations. Key `language` contains the original language key. Other keys contain translations

        :return: The i18n of this Message.
        :rtype: Dict[str, str]
        """
        return self._i18n

    @i18n.setter
    def i18n(self, i18n):
        """Sets the i18n of this Message.

        Object with translations. Key `language` contains the original language key. Other keys contain translations

        :param i18n: The i18n of this Message.
        :type i18n: Dict[str, str]
        """

        self._i18n = i18n

    @property
    def id(self):
        """Gets the id of this Message.

        Message ID is unique string identifier of the message

        :return: The id of this Message.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Message.

        Message ID is unique string identifier of the message

        :param id: The id of this Message.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image_labels(self):
        """Gets the image_labels of this Message.

        Contains image moderation information

        :return: The image_labels of this Message.
        :rtype: Dict[str, List[str]]
        """
        return self._image_labels

    @image_labels.setter
    def image_labels(self, image_labels):
        """Sets the image_labels of this Message.

        Contains image moderation information

        :param image_labels: The image_labels of this Message.
        :type image_labels: Dict[str, List[str]]
        """

        self._image_labels = image_labels

    @property
    def latest_reactions(self):
        """Gets the latest_reactions of this Message.

        List of 10 latest reactions to this message

        :return: The latest_reactions of this Message.
        :rtype: List[Reaction]
        """
        return self._latest_reactions

    @latest_reactions.setter
    def latest_reactions(self, latest_reactions):
        """Sets the latest_reactions of this Message.

        List of 10 latest reactions to this message

        :param latest_reactions: The latest_reactions of this Message.
        :type latest_reactions: List[Reaction]
        """
        if latest_reactions is None:
            raise ValueError("Invalid value for `latest_reactions`, must not be `None`")

        self._latest_reactions = latest_reactions

    @property
    def mentioned_users(self):
        """Gets the mentioned_users of this Message.

        List of mentioned users

        :return: The mentioned_users of this Message.
        :rtype: List[UserObject]
        """
        return self._mentioned_users

    @mentioned_users.setter
    def mentioned_users(self, mentioned_users):
        """Sets the mentioned_users of this Message.

        List of mentioned users

        :param mentioned_users: The mentioned_users of this Message.
        :type mentioned_users: List[UserObject]
        """
        if mentioned_users is None:
            raise ValueError("Invalid value for `mentioned_users`, must not be `None`")

        self._mentioned_users = mentioned_users

    @property
    def mml(self):
        """Gets the mml of this Message.

        Should be empty if `text` is provided. Can only be set when using server-side API

        :return: The mml of this Message.
        :rtype: str
        """
        return self._mml

    @mml.setter
    def mml(self, mml):
        """Sets the mml of this Message.

        Should be empty if `text` is provided. Can only be set when using server-side API

        :param mml: The mml of this Message.
        :type mml: str
        """

        self._mml = mml

    @property
    def own_reactions(self):
        """Gets the own_reactions of this Message.

        List of 10 latest reactions of authenticated user to this message

        :return: The own_reactions of this Message.
        :rtype: List[Reaction]
        """
        return self._own_reactions

    @own_reactions.setter
    def own_reactions(self, own_reactions):
        """Sets the own_reactions of this Message.

        List of 10 latest reactions of authenticated user to this message

        :param own_reactions: The own_reactions of this Message.
        :type own_reactions: List[Reaction]
        """
        if own_reactions is None:
            raise ValueError("Invalid value for `own_reactions`, must not be `None`")

        self._own_reactions = own_reactions

    @property
    def parent_id(self):
        """Gets the parent_id of this Message.

        ID of parent message (thread)

        :return: The parent_id of this Message.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this Message.

        ID of parent message (thread)

        :param parent_id: The parent_id of this Message.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def pin_expires(self):
        """Gets the pin_expires of this Message.

        Date when pinned message expires

        :return: The pin_expires of this Message.
        :rtype: datetime
        """
        return self._pin_expires

    @pin_expires.setter
    def pin_expires(self, pin_expires):
        """Sets the pin_expires of this Message.

        Date when pinned message expires

        :param pin_expires: The pin_expires of this Message.
        :type pin_expires: datetime
        """

        self._pin_expires = pin_expires

    @property
    def pinned(self):
        """Gets the pinned of this Message.

        Whether message is pinned or not

        :return: The pinned of this Message.
        :rtype: bool
        """
        return self._pinned

    @pinned.setter
    def pinned(self, pinned):
        """Sets the pinned of this Message.

        Whether message is pinned or not

        :param pinned: The pinned of this Message.
        :type pinned: bool
        """
        if pinned is None:
            raise ValueError("Invalid value for `pinned`, must not be `None`")

        self._pinned = pinned

    @property
    def pinned_at(self):
        """Gets the pinned_at of this Message.

        Date when message got pinned

        :return: The pinned_at of this Message.
        :rtype: datetime
        """
        return self._pinned_at

    @pinned_at.setter
    def pinned_at(self, pinned_at):
        """Sets the pinned_at of this Message.

        Date when message got pinned

        :param pinned_at: The pinned_at of this Message.
        :type pinned_at: datetime
        """

        self._pinned_at = pinned_at

    @property
    def pinned_by(self):
        """Gets the pinned_by of this Message.


        :return: The pinned_by of this Message.
        :rtype: UserObject
        """
        return self._pinned_by

    @pinned_by.setter
    def pinned_by(self, pinned_by):
        """Sets the pinned_by of this Message.


        :param pinned_by: The pinned_by of this Message.
        :type pinned_by: UserObject
        """

        self._pinned_by = pinned_by

    @property
    def quoted_message(self):
        """Gets the quoted_message of this Message.


        :return: The quoted_message of this Message.
        :rtype: Message
        """
        return self._quoted_message

    @quoted_message.setter
    def quoted_message(self, quoted_message):
        """Sets the quoted_message of this Message.


        :param quoted_message: The quoted_message of this Message.
        :type quoted_message: Message
        """

        self._quoted_message = quoted_message

    @property
    def quoted_message_id(self):
        """Gets the quoted_message_id of this Message.


        :return: The quoted_message_id of this Message.
        :rtype: str
        """
        return self._quoted_message_id

    @quoted_message_id.setter
    def quoted_message_id(self, quoted_message_id):
        """Sets the quoted_message_id of this Message.


        :param quoted_message_id: The quoted_message_id of this Message.
        :type quoted_message_id: str
        """

        self._quoted_message_id = quoted_message_id

    @property
    def reaction_counts(self):
        """Gets the reaction_counts of this Message.

        An object containing number of reactions of each type. Key: reaction type (string), value: number of reactions (int)

        :return: The reaction_counts of this Message.
        :rtype: Dict[str, int]
        """
        return self._reaction_counts

    @reaction_counts.setter
    def reaction_counts(self, reaction_counts):
        """Sets the reaction_counts of this Message.

        An object containing number of reactions of each type. Key: reaction type (string), value: number of reactions (int)

        :param reaction_counts: The reaction_counts of this Message.
        :type reaction_counts: Dict[str, int]
        """
        if reaction_counts is None:
            raise ValueError("Invalid value for `reaction_counts`, must not be `None`")

        self._reaction_counts = reaction_counts

    @property
    def reaction_scores(self):
        """Gets the reaction_scores of this Message.

        An object containing scores of reactions of each type. Key: reaction type (string), value: total score of reactions (int)

        :return: The reaction_scores of this Message.
        :rtype: Dict[str, int]
        """
        return self._reaction_scores

    @reaction_scores.setter
    def reaction_scores(self, reaction_scores):
        """Sets the reaction_scores of this Message.

        An object containing scores of reactions of each type. Key: reaction type (string), value: total score of reactions (int)

        :param reaction_scores: The reaction_scores of this Message.
        :type reaction_scores: Dict[str, int]
        """
        if reaction_scores is None:
            raise ValueError("Invalid value for `reaction_scores`, must not be `None`")

        self._reaction_scores = reaction_scores

    @property
    def reply_count(self):
        """Gets the reply_count of this Message.

        Number of replies to this message

        :return: The reply_count of this Message.
        :rtype: int
        """
        return self._reply_count

    @reply_count.setter
    def reply_count(self, reply_count):
        """Sets the reply_count of this Message.

        Number of replies to this message

        :param reply_count: The reply_count of this Message.
        :type reply_count: int
        """
        if reply_count is None:
            raise ValueError("Invalid value for `reply_count`, must not be `None`")

        self._reply_count = reply_count

    @property
    def shadowed(self):
        """Gets the shadowed of this Message.

        Whether the message was shadowed or not

        :return: The shadowed of this Message.
        :rtype: bool
        """
        return self._shadowed

    @shadowed.setter
    def shadowed(self, shadowed):
        """Sets the shadowed of this Message.

        Whether the message was shadowed or not

        :param shadowed: The shadowed of this Message.
        :type shadowed: bool
        """
        if shadowed is None:
            raise ValueError("Invalid value for `shadowed`, must not be `None`")

        self._shadowed = shadowed

    @property
    def show_in_channel(self):
        """Gets the show_in_channel of this Message.

        Whether thread reply should be shown in the channel as well

        :return: The show_in_channel of this Message.
        :rtype: bool
        """
        return self._show_in_channel

    @show_in_channel.setter
    def show_in_channel(self, show_in_channel):
        """Sets the show_in_channel of this Message.

        Whether thread reply should be shown in the channel as well

        :param show_in_channel: The show_in_channel of this Message.
        :type show_in_channel: bool
        """

        self._show_in_channel = show_in_channel

    @property
    def silent(self):
        """Gets the silent of this Message.

        Whether message is silent or not

        :return: The silent of this Message.
        :rtype: bool
        """
        return self._silent

    @silent.setter
    def silent(self, silent):
        """Sets the silent of this Message.

        Whether message is silent or not

        :param silent: The silent of this Message.
        :type silent: bool
        """
        if silent is None:
            raise ValueError("Invalid value for `silent`, must not be `None`")

        self._silent = silent

    @property
    def text(self):
        """Gets the text of this Message.

        Text of the message. Should be empty if `mml` is provided

        :return: The text of this Message.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Message.

        Text of the message. Should be empty if `mml` is provided

        :param text: The text of this Message.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text

    @property
    def thread_participants(self):
        """Gets the thread_participants of this Message.

        List of users who participate in thread

        :return: The thread_participants of this Message.
        :rtype: List[UserObject]
        """
        return self._thread_participants

    @thread_participants.setter
    def thread_participants(self, thread_participants):
        """Sets the thread_participants of this Message.

        List of users who participate in thread

        :param thread_participants: The thread_participants of this Message.
        :type thread_participants: List[UserObject]
        """

        self._thread_participants = thread_participants

    @property
    def type(self):
        """Gets the type of this Message.

        Contains type of the message

        :return: The type of this Message.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Message.

        Contains type of the message

        :param type: The type of this Message.
        :type type: str
        """
        allowed_values = ["regular", "ephemeral", "error", "reply", "system", "deleted"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Message.

        Date/time of the last update

        :return: The updated_at of this Message.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Message.

        Date/time of the last update

        :param updated_at: The updated_at of this Message.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this Message.


        :return: The user of this Message.
        :rtype: UserObject
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Message.


        :param user: The user of this Message.
        :type user: UserObject
        """

        self._user = user
