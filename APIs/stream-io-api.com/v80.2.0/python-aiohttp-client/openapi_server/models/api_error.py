# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class APIError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status_code: int=None, code: int=None, details: List[int]=None, duration: str=None, exception_fields: Dict[str, str]=None, message: str=None, more_info: str=None):
        """APIError - a model defined in OpenAPI

        :param status_code: The status_code of this APIError.
        :param code: The code of this APIError.
        :param details: The details of this APIError.
        :param duration: The duration of this APIError.
        :param exception_fields: The exception_fields of this APIError.
        :param message: The message of this APIError.
        :param more_info: The more_info of this APIError.
        """
        self.openapi_types = {
            'status_code': int,
            'code': int,
            'details': List[int],
            'duration': str,
            'exception_fields': Dict[str, str],
            'message': str,
            'more_info': str
        }

        self.attribute_map = {
            'status_code': 'StatusCode',
            'code': 'code',
            'details': 'details',
            'duration': 'duration',
            'exception_fields': 'exception_fields',
            'message': 'message',
            'more_info': 'more_info'
        }

        self._status_code = status_code
        self._code = code
        self._details = details
        self._duration = duration
        self._exception_fields = exception_fields
        self._message = message
        self._more_info = more_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'APIError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The APIError of this APIError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status_code(self):
        """Gets the status_code of this APIError.

        Response HTTP status code

        :return: The status_code of this APIError.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this APIError.

        Response HTTP status code

        :param status_code: The status_code of this APIError.
        :type status_code: int
        """
        if status_code is None:
            raise ValueError("Invalid value for `status_code`, must not be `None`")

        self._status_code = status_code

    @property
    def code(self):
        """Gets the code of this APIError.

        API error code

        :return: The code of this APIError.
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this APIError.

        API error code

        :param code: The code of this APIError.
        :type code: int
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def details(self):
        """Gets the details of this APIError.

        Additional error-specific information

        :return: The details of this APIError.
        :rtype: List[int]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this APIError.

        Additional error-specific information

        :param details: The details of this APIError.
        :type details: List[int]
        """
        if details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")

        self._details = details

    @property
    def duration(self):
        """Gets the duration of this APIError.

        Request duration

        :return: The duration of this APIError.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this APIError.

        Request duration

        :param duration: The duration of this APIError.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def exception_fields(self):
        """Gets the exception_fields of this APIError.

        Additional error info

        :return: The exception_fields of this APIError.
        :rtype: Dict[str, str]
        """
        return self._exception_fields

    @exception_fields.setter
    def exception_fields(self, exception_fields):
        """Sets the exception_fields of this APIError.

        Additional error info

        :param exception_fields: The exception_fields of this APIError.
        :type exception_fields: Dict[str, str]
        """

        self._exception_fields = exception_fields

    @property
    def message(self):
        """Gets the message of this APIError.

        Message describing an error

        :return: The message of this APIError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this APIError.

        Message describing an error

        :param message: The message of this APIError.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def more_info(self):
        """Gets the more_info of this APIError.

        URL with additional information

        :return: The more_info of this APIError.
        :rtype: str
        """
        return self._more_info

    @more_info.setter
    def more_info(self, more_info):
        """Sets the more_info of this APIError.

        URL with additional information

        :param more_info: The more_info of this APIError.
        :type more_info: str
        """
        if more_info is None:
            raise ValueError("Invalid value for `more_info`, must not be `None`")

        self._more_info = more_info
