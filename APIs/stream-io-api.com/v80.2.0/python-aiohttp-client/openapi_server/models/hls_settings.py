# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HLSSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_on: bool=None, enabled: bool=None, quality_tracks: List[str]=None):
        """HLSSettings - a model defined in OpenAPI

        :param auto_on: The auto_on of this HLSSettings.
        :param enabled: The enabled of this HLSSettings.
        :param quality_tracks: The quality_tracks of this HLSSettings.
        """
        self.openapi_types = {
            'auto_on': bool,
            'enabled': bool,
            'quality_tracks': List[str]
        }

        self.attribute_map = {
            'auto_on': 'auto_on',
            'enabled': 'enabled',
            'quality_tracks': 'quality_tracks'
        }

        self._auto_on = auto_on
        self._enabled = enabled
        self._quality_tracks = quality_tracks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HLSSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HLSSettings of this HLSSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_on(self):
        """Gets the auto_on of this HLSSettings.


        :return: The auto_on of this HLSSettings.
        :rtype: bool
        """
        return self._auto_on

    @auto_on.setter
    def auto_on(self, auto_on):
        """Sets the auto_on of this HLSSettings.


        :param auto_on: The auto_on of this HLSSettings.
        :type auto_on: bool
        """
        if auto_on is None:
            raise ValueError("Invalid value for `auto_on`, must not be `None`")

        self._auto_on = auto_on

    @property
    def enabled(self):
        """Gets the enabled of this HLSSettings.


        :return: The enabled of this HLSSettings.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this HLSSettings.


        :param enabled: The enabled of this HLSSettings.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled

    @property
    def quality_tracks(self):
        """Gets the quality_tracks of this HLSSettings.


        :return: The quality_tracks of this HLSSettings.
        :rtype: List[str]
        """
        return self._quality_tracks

    @quality_tracks.setter
    def quality_tracks(self, quality_tracks):
        """Sets the quality_tracks of this HLSSettings.


        :param quality_tracks: The quality_tracks of this HLSSettings.
        :type quality_tracks: List[str]
        """
        if quality_tracks is None:
            raise ValueError("Invalid value for `quality_tracks`, must not be `None`")

        self._quality_tracks = quality_tracks
