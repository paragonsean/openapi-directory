# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, name: str=None, owner: bool=None, priority: int=None, resources: List[str]=None, roles: List[str]=None):
        """PolicyRequest - a model defined in OpenAPI

        :param action: The action of this PolicyRequest.
        :param name: The name of this PolicyRequest.
        :param owner: The owner of this PolicyRequest.
        :param priority: The priority of this PolicyRequest.
        :param resources: The resources of this PolicyRequest.
        :param roles: The roles of this PolicyRequest.
        """
        self.openapi_types = {
            'action': str,
            'name': str,
            'owner': bool,
            'priority': int,
            'resources': List[str],
            'roles': List[str]
        }

        self.attribute_map = {
            'action': 'action',
            'name': 'name',
            'owner': 'owner',
            'priority': 'priority',
            'resources': 'resources',
            'roles': 'roles'
        }

        self._action = action
        self._name = name
        self._owner = owner
        self._priority = priority
        self._resources = resources
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyRequest of this PolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this PolicyRequest.


        :return: The action of this PolicyRequest.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PolicyRequest.


        :param action: The action of this PolicyRequest.
        :type action: str
        """
        allowed_values = ["Deny", "Allow"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def name(self):
        """Gets the name of this PolicyRequest.

        User-friendly policy name

        :return: The name of this PolicyRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PolicyRequest.

        User-friendly policy name

        :param name: The name of this PolicyRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this PolicyRequest.

        Whether policy applies to resource owner or not

        :return: The owner of this PolicyRequest.
        :rtype: bool
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this PolicyRequest.

        Whether policy applies to resource owner or not

        :param owner: The owner of this PolicyRequest.
        :type owner: bool
        """

        self._owner = owner

    @property
    def priority(self):
        """Gets the priority of this PolicyRequest.

        Policy priority

        :return: The priority of this PolicyRequest.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this PolicyRequest.

        Policy priority

        :param priority: The priority of this PolicyRequest.
        :type priority: int
        """
        if priority is None:
            raise ValueError("Invalid value for `priority`, must not be `None`")
        if priority is not None and priority > 999:
            raise ValueError("Invalid value for `priority`, must be a value less than or equal to `999`")
        if priority is not None and priority < 1:
            raise ValueError("Invalid value for `priority`, must be a value greater than or equal to `1`")

        self._priority = priority

    @property
    def resources(self):
        """Gets the resources of this PolicyRequest.

        List of resources to apply policy to

        :return: The resources of this PolicyRequest.
        :rtype: List[str]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this PolicyRequest.

        List of resources to apply policy to

        :param resources: The resources of this PolicyRequest.
        :type resources: List[str]
        """

        self._resources = resources

    @property
    def roles(self):
        """Gets the roles of this PolicyRequest.

        List of roles to apply policy to

        :return: The roles of this PolicyRequest.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this PolicyRequest.

        List of roles to apply policy to

        :param roles: The roles of this PolicyRequest.
        :type roles: List[str]
        """

        self._roles = roles
