# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.search_result import SearchResult
from openapi_server.models.search_warning import SearchWarning
from openapi_server import util


class SearchResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: str=None, next: str=None, previous: str=None, results: List[SearchResult]=None, results_warning: SearchWarning=None):
        """SearchResponse - a model defined in OpenAPI

        :param duration: The duration of this SearchResponse.
        :param next: The next of this SearchResponse.
        :param previous: The previous of this SearchResponse.
        :param results: The results of this SearchResponse.
        :param results_warning: The results_warning of this SearchResponse.
        """
        self.openapi_types = {
            'duration': str,
            'next': str,
            'previous': str,
            'results': List[SearchResult],
            'results_warning': SearchWarning
        }

        self.attribute_map = {
            'duration': 'duration',
            'next': 'next',
            'previous': 'previous',
            'results': 'results',
            'results_warning': 'results_warning'
        }

        self._duration = duration
        self._next = next
        self._previous = previous
        self._results = results
        self._results_warning = results_warning

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchResponse of this SearchResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this SearchResponse.


        :return: The duration of this SearchResponse.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SearchResponse.


        :param duration: The duration of this SearchResponse.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def next(self):
        """Gets the next of this SearchResponse.

        Value to pass to the next search query in order to paginate

        :return: The next of this SearchResponse.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this SearchResponse.

        Value to pass to the next search query in order to paginate

        :param next: The next of this SearchResponse.
        :type next: str
        """

        self._next = next

    @property
    def previous(self):
        """Gets the previous of this SearchResponse.

        Value that points to the previous page. Pass as the next value in a search query to paginate backwards

        :return: The previous of this SearchResponse.
        :rtype: str
        """
        return self._previous

    @previous.setter
    def previous(self, previous):
        """Sets the previous of this SearchResponse.

        Value that points to the previous page. Pass as the next value in a search query to paginate backwards

        :param previous: The previous of this SearchResponse.
        :type previous: str
        """

        self._previous = previous

    @property
    def results(self):
        """Gets the results of this SearchResponse.

        Search results

        :return: The results of this SearchResponse.
        :rtype: List[SearchResult]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this SearchResponse.

        Search results

        :param results: The results of this SearchResponse.
        :type results: List[SearchResult]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")

        self._results = results

    @property
    def results_warning(self):
        """Gets the results_warning of this SearchResponse.


        :return: The results_warning of this SearchResponse.
        :rtype: SearchWarning
        """
        return self._results_warning

    @results_warning.setter
    def results_warning(self, results_warning):
        """Sets the results_warning of this SearchResponse.


        :param results_warning: The results_warning of this SearchResponse.
        :type results_warning: SearchWarning
        """

        self._results_warning = results_warning
