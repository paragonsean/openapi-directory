# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateUserPartialRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, set: Dict[str, object]=None, unset: List[str]=None):
        """UpdateUserPartialRequest - a model defined in OpenAPI

        :param id: The id of this UpdateUserPartialRequest.
        :param set: The set of this UpdateUserPartialRequest.
        :param unset: The unset of this UpdateUserPartialRequest.
        """
        self.openapi_types = {
            'id': str,
            'set': Dict[str, object],
            'unset': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'set': 'set',
            'unset': 'unset'
        }

        self._id = id
        self._set = set
        self._unset = unset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateUserPartialRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateUserPartialRequest of this UpdateUserPartialRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UpdateUserPartialRequest.

        User ID to update

        :return: The id of this UpdateUserPartialRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateUserPartialRequest.

        User ID to update

        :param id: The id of this UpdateUserPartialRequest.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def set(self):
        """Gets the set of this UpdateUserPartialRequest.


        :return: The set of this UpdateUserPartialRequest.
        :rtype: Dict[str, object]
        """
        return self._set

    @set.setter
    def set(self, set):
        """Sets the set of this UpdateUserPartialRequest.


        :param set: The set of this UpdateUserPartialRequest.
        :type set: Dict[str, object]
        """
        if set is None:
            raise ValueError("Invalid value for `set`, must not be `None`")

        self._set = set

    @property
    def unset(self):
        """Gets the unset of this UpdateUserPartialRequest.


        :return: The unset of this UpdateUserPartialRequest.
        :rtype: List[str]
        """
        return self._unset

    @unset.setter
    def unset(self, unset):
        """Sets the unset of this UpdateUserPartialRequest.


        :param unset: The unset of this UpdateUserPartialRequest.
        :type unset: List[str]
        """
        if unset is None:
            raise ValueError("Invalid value for `unset`, must not be `None`")

        self._unset = unset
