# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.campaign_sort import CampaignSort
from openapi_server import util


class QueryRecipientsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter_conditions: Dict[str, object]=None, limit: int=None, sort: CampaignSort=None):
        """QueryRecipientsRequest - a model defined in OpenAPI

        :param filter_conditions: The filter_conditions of this QueryRecipientsRequest.
        :param limit: The limit of this QueryRecipientsRequest.
        :param sort: The sort of this QueryRecipientsRequest.
        """
        self.openapi_types = {
            'filter_conditions': Dict[str, object],
            'limit': int,
            'sort': CampaignSort
        }

        self.attribute_map = {
            'filter_conditions': 'filter_conditions',
            'limit': 'limit',
            'sort': 'sort'
        }

        self._filter_conditions = filter_conditions
        self._limit = limit
        self._sort = sort

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryRecipientsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryRecipientsRequest of this QueryRecipientsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_conditions(self):
        """Gets the filter_conditions of this QueryRecipientsRequest.


        :return: The filter_conditions of this QueryRecipientsRequest.
        :rtype: Dict[str, object]
        """
        return self._filter_conditions

    @filter_conditions.setter
    def filter_conditions(self, filter_conditions):
        """Sets the filter_conditions of this QueryRecipientsRequest.


        :param filter_conditions: The filter_conditions of this QueryRecipientsRequest.
        :type filter_conditions: Dict[str, object]
        """
        if filter_conditions is None:
            raise ValueError("Invalid value for `filter_conditions`, must not be `None`")

        self._filter_conditions = filter_conditions

    @property
    def limit(self):
        """Gets the limit of this QueryRecipientsRequest.


        :return: The limit of this QueryRecipientsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this QueryRecipientsRequest.


        :param limit: The limit of this QueryRecipientsRequest.
        :type limit: int
        """
        if limit is not None and limit > 20:
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `20`")
        if limit is not None and limit < 1:
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `1`")

        self._limit = limit

    @property
    def sort(self):
        """Gets the sort of this QueryRecipientsRequest.


        :return: The sort of this QueryRecipientsRequest.
        :rtype: CampaignSort
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this QueryRecipientsRequest.


        :param sort: The sort of this QueryRecipientsRequest.
        :type sort: CampaignSort
        """

        self._sort = sort
