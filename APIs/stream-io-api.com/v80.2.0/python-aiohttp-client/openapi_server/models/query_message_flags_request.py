# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_object import UserObject
from openapi_server import util


class QueryMessageFlagsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter_conditions: Dict[str, object]=None, limit: int=None, offset: int=None, user: UserObject=None, user_id: str=None):
        """QueryMessageFlagsRequest - a model defined in OpenAPI

        :param filter_conditions: The filter_conditions of this QueryMessageFlagsRequest.
        :param limit: The limit of this QueryMessageFlagsRequest.
        :param offset: The offset of this QueryMessageFlagsRequest.
        :param user: The user of this QueryMessageFlagsRequest.
        :param user_id: The user_id of this QueryMessageFlagsRequest.
        """
        self.openapi_types = {
            'filter_conditions': Dict[str, object],
            'limit': int,
            'offset': int,
            'user': UserObject,
            'user_id': str
        }

        self.attribute_map = {
            'filter_conditions': 'filter_conditions',
            'limit': 'limit',
            'offset': 'offset',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._filter_conditions = filter_conditions
        self._limit = limit
        self._offset = offset
        self._user = user
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryMessageFlagsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryMessageFlagsRequest of this QueryMessageFlagsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_conditions(self):
        """Gets the filter_conditions of this QueryMessageFlagsRequest.


        :return: The filter_conditions of this QueryMessageFlagsRequest.
        :rtype: Dict[str, object]
        """
        return self._filter_conditions

    @filter_conditions.setter
    def filter_conditions(self, filter_conditions):
        """Sets the filter_conditions of this QueryMessageFlagsRequest.


        :param filter_conditions: The filter_conditions of this QueryMessageFlagsRequest.
        :type filter_conditions: Dict[str, object]
        """

        self._filter_conditions = filter_conditions

    @property
    def limit(self):
        """Gets the limit of this QueryMessageFlagsRequest.


        :return: The limit of this QueryMessageFlagsRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this QueryMessageFlagsRequest.


        :param limit: The limit of this QueryMessageFlagsRequest.
        :type limit: int
        """
        if limit is not None and limit > 300:
            raise ValueError("Invalid value for `limit`, must be a value less than or equal to `300`")
        if limit is not None and limit < 0:
            raise ValueError("Invalid value for `limit`, must be a value greater than or equal to `0`")

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this QueryMessageFlagsRequest.


        :return: The offset of this QueryMessageFlagsRequest.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this QueryMessageFlagsRequest.


        :param offset: The offset of this QueryMessageFlagsRequest.
        :type offset: int
        """
        if offset is not None and offset > 10000:
            raise ValueError("Invalid value for `offset`, must be a value less than or equal to `10000`")

        self._offset = offset

    @property
    def user(self):
        """Gets the user of this QueryMessageFlagsRequest.


        :return: The user of this QueryMessageFlagsRequest.
        :rtype: UserObject
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this QueryMessageFlagsRequest.


        :param user: The user of this QueryMessageFlagsRequest.
        :type user: UserObject
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this QueryMessageFlagsRequest.

        **Server-side only**. User ID which server acts upon

        :return: The user_id of this QueryMessageFlagsRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this QueryMessageFlagsRequest.

        **Server-side only**. User ID which server acts upon

        :param user_id: The user_id of this QueryMessageFlagsRequest.
        :type user_id: str
        """

        self._user_id = user_id
