# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment_request import AttachmentRequest
from openapi_server.models.user_object_request import UserObjectRequest
from openapi_server import util


class MessageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[AttachmentRequest]=None, cid: List[int]=None, html: str=None, id: str=None, mentioned_users: List[str]=None, mml: str=None, parent: List[int]=None, parent_id: str=None, pin_expires: datetime=None, pinned: bool=None, pinned_at: datetime=None, pinned_by: List[int]=None, quoted_message_id: str=None, reaction_scores: List[int]=None, show_in_channel: bool=None, silent: bool=None, text: str=None, type: str=None, user: UserObjectRequest=None, user_id: str=None):
        """MessageRequest - a model defined in OpenAPI

        :param attachments: The attachments of this MessageRequest.
        :param cid: The cid of this MessageRequest.
        :param html: The html of this MessageRequest.
        :param id: The id of this MessageRequest.
        :param mentioned_users: The mentioned_users of this MessageRequest.
        :param mml: The mml of this MessageRequest.
        :param parent: The parent of this MessageRequest.
        :param parent_id: The parent_id of this MessageRequest.
        :param pin_expires: The pin_expires of this MessageRequest.
        :param pinned: The pinned of this MessageRequest.
        :param pinned_at: The pinned_at of this MessageRequest.
        :param pinned_by: The pinned_by of this MessageRequest.
        :param quoted_message_id: The quoted_message_id of this MessageRequest.
        :param reaction_scores: The reaction_scores of this MessageRequest.
        :param show_in_channel: The show_in_channel of this MessageRequest.
        :param silent: The silent of this MessageRequest.
        :param text: The text of this MessageRequest.
        :param type: The type of this MessageRequest.
        :param user: The user of this MessageRequest.
        :param user_id: The user_id of this MessageRequest.
        """
        self.openapi_types = {
            'attachments': List[AttachmentRequest],
            'cid': List[int],
            'html': str,
            'id': str,
            'mentioned_users': List[str],
            'mml': str,
            'parent': List[int],
            'parent_id': str,
            'pin_expires': datetime,
            'pinned': bool,
            'pinned_at': datetime,
            'pinned_by': List[int],
            'quoted_message_id': str,
            'reaction_scores': List[int],
            'show_in_channel': bool,
            'silent': bool,
            'text': str,
            'type': str,
            'user': UserObjectRequest,
            'user_id': str
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'cid': 'cid',
            'html': 'html',
            'id': 'id',
            'mentioned_users': 'mentioned_users',
            'mml': 'mml',
            'parent': 'parent',
            'parent_id': 'parent_id',
            'pin_expires': 'pin_expires',
            'pinned': 'pinned',
            'pinned_at': 'pinned_at',
            'pinned_by': 'pinned_by',
            'quoted_message_id': 'quoted_message_id',
            'reaction_scores': 'reaction_scores',
            'show_in_channel': 'show_in_channel',
            'silent': 'silent',
            'text': 'text',
            'type': 'type',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._attachments = attachments
        self._cid = cid
        self._html = html
        self._id = id
        self._mentioned_users = mentioned_users
        self._mml = mml
        self._parent = parent
        self._parent_id = parent_id
        self._pin_expires = pin_expires
        self._pinned = pinned
        self._pinned_at = pinned_at
        self._pinned_by = pinned_by
        self._quoted_message_id = quoted_message_id
        self._reaction_scores = reaction_scores
        self._show_in_channel = show_in_channel
        self._silent = silent
        self._text = text
        self._type = type
        self._user = user
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageRequest of this MessageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this MessageRequest.

        Array of message attachments

        :return: The attachments of this MessageRequest.
        :rtype: List[AttachmentRequest]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this MessageRequest.

        Array of message attachments

        :param attachments: The attachments of this MessageRequest.
        :type attachments: List[AttachmentRequest]
        """
        if attachments is None:
            raise ValueError("Invalid value for `attachments`, must not be `None`")

        self._attachments = attachments

    @property
    def cid(self):
        """Gets the cid of this MessageRequest.

        Channel unique identifier in <type>:<id> format

        :return: The cid of this MessageRequest.
        :rtype: List[int]
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this MessageRequest.

        Channel unique identifier in <type>:<id> format

        :param cid: The cid of this MessageRequest.
        :type cid: List[int]
        """

        self._cid = cid

    @property
    def html(self):
        """Gets the html of this MessageRequest.

        Contains HTML markup of the message. Can only be set when using server-side API

        :return: The html of this MessageRequest.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this MessageRequest.

        Contains HTML markup of the message. Can only be set when using server-side API

        :param html: The html of this MessageRequest.
        :type html: str
        """

        self._html = html

    @property
    def id(self):
        """Gets the id of this MessageRequest.

        Message ID is unique string identifier of the message

        :return: The id of this MessageRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MessageRequest.

        Message ID is unique string identifier of the message

        :param id: The id of this MessageRequest.
        :type id: str
        """
        if id is not None and len(id) > 255:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `255`")

        self._id = id

    @property
    def mentioned_users(self):
        """Gets the mentioned_users of this MessageRequest.

        List of mentioned users

        :return: The mentioned_users of this MessageRequest.
        :rtype: List[str]
        """
        return self._mentioned_users

    @mentioned_users.setter
    def mentioned_users(self, mentioned_users):
        """Sets the mentioned_users of this MessageRequest.

        List of mentioned users

        :param mentioned_users: The mentioned_users of this MessageRequest.
        :type mentioned_users: List[str]
        """

        self._mentioned_users = mentioned_users

    @property
    def mml(self):
        """Gets the mml of this MessageRequest.

        Should be empty if `text` is provided. Can only be set when using server-side API

        :return: The mml of this MessageRequest.
        :rtype: str
        """
        return self._mml

    @mml.setter
    def mml(self, mml):
        """Sets the mml of this MessageRequest.

        Should be empty if `text` is provided. Can only be set when using server-side API

        :param mml: The mml of this MessageRequest.
        :type mml: str
        """

        self._mml = mml

    @property
    def parent(self):
        """Gets the parent of this MessageRequest.


        :return: The parent of this MessageRequest.
        :rtype: List[int]
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this MessageRequest.


        :param parent: The parent of this MessageRequest.
        :type parent: List[int]
        """

        self._parent = parent

    @property
    def parent_id(self):
        """Gets the parent_id of this MessageRequest.

        ID of parent message (thread)

        :return: The parent_id of this MessageRequest.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this MessageRequest.

        ID of parent message (thread)

        :param parent_id: The parent_id of this MessageRequest.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def pin_expires(self):
        """Gets the pin_expires of this MessageRequest.

        Date when pinned message expires

        :return: The pin_expires of this MessageRequest.
        :rtype: datetime
        """
        return self._pin_expires

    @pin_expires.setter
    def pin_expires(self, pin_expires):
        """Sets the pin_expires of this MessageRequest.

        Date when pinned message expires

        :param pin_expires: The pin_expires of this MessageRequest.
        :type pin_expires: datetime
        """

        self._pin_expires = pin_expires

    @property
    def pinned(self):
        """Gets the pinned of this MessageRequest.

        Whether message is pinned or not

        :return: The pinned of this MessageRequest.
        :rtype: bool
        """
        return self._pinned

    @pinned.setter
    def pinned(self, pinned):
        """Sets the pinned of this MessageRequest.

        Whether message is pinned or not

        :param pinned: The pinned of this MessageRequest.
        :type pinned: bool
        """

        self._pinned = pinned

    @property
    def pinned_at(self):
        """Gets the pinned_at of this MessageRequest.

        Date when message got pinned

        :return: The pinned_at of this MessageRequest.
        :rtype: datetime
        """
        return self._pinned_at

    @pinned_at.setter
    def pinned_at(self, pinned_at):
        """Sets the pinned_at of this MessageRequest.

        Date when message got pinned

        :param pinned_at: The pinned_at of this MessageRequest.
        :type pinned_at: datetime
        """

        self._pinned_at = pinned_at

    @property
    def pinned_by(self):
        """Gets the pinned_by of this MessageRequest.

        Contains user who pinned the message

        :return: The pinned_by of this MessageRequest.
        :rtype: List[int]
        """
        return self._pinned_by

    @pinned_by.setter
    def pinned_by(self, pinned_by):
        """Sets the pinned_by of this MessageRequest.

        Contains user who pinned the message

        :param pinned_by: The pinned_by of this MessageRequest.
        :type pinned_by: List[int]
        """

        self._pinned_by = pinned_by

    @property
    def quoted_message_id(self):
        """Gets the quoted_message_id of this MessageRequest.


        :return: The quoted_message_id of this MessageRequest.
        :rtype: str
        """
        return self._quoted_message_id

    @quoted_message_id.setter
    def quoted_message_id(self, quoted_message_id):
        """Sets the quoted_message_id of this MessageRequest.


        :param quoted_message_id: The quoted_message_id of this MessageRequest.
        :type quoted_message_id: str
        """

        self._quoted_message_id = quoted_message_id

    @property
    def reaction_scores(self):
        """Gets the reaction_scores of this MessageRequest.

        An object containing scores of reactions of each type. Key: reaction type (string), value: total score of reactions (int)

        :return: The reaction_scores of this MessageRequest.
        :rtype: List[int]
        """
        return self._reaction_scores

    @reaction_scores.setter
    def reaction_scores(self, reaction_scores):
        """Sets the reaction_scores of this MessageRequest.

        An object containing scores of reactions of each type. Key: reaction type (string), value: total score of reactions (int)

        :param reaction_scores: The reaction_scores of this MessageRequest.
        :type reaction_scores: List[int]
        """

        self._reaction_scores = reaction_scores

    @property
    def show_in_channel(self):
        """Gets the show_in_channel of this MessageRequest.

        Whether thread reply should be shown in the channel as well

        :return: The show_in_channel of this MessageRequest.
        :rtype: bool
        """
        return self._show_in_channel

    @show_in_channel.setter
    def show_in_channel(self, show_in_channel):
        """Sets the show_in_channel of this MessageRequest.

        Whether thread reply should be shown in the channel as well

        :param show_in_channel: The show_in_channel of this MessageRequest.
        :type show_in_channel: bool
        """

        self._show_in_channel = show_in_channel

    @property
    def silent(self):
        """Gets the silent of this MessageRequest.

        Whether message is silent or not

        :return: The silent of this MessageRequest.
        :rtype: bool
        """
        return self._silent

    @silent.setter
    def silent(self, silent):
        """Sets the silent of this MessageRequest.

        Whether message is silent or not

        :param silent: The silent of this MessageRequest.
        :type silent: bool
        """

        self._silent = silent

    @property
    def text(self):
        """Gets the text of this MessageRequest.

        Text of the message. Should be empty if `mml` is provided

        :return: The text of this MessageRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this MessageRequest.

        Text of the message. Should be empty if `mml` is provided

        :param text: The text of this MessageRequest.
        :type text: str
        """

        self._text = text

    @property
    def type(self):
        """Gets the type of this MessageRequest.

        Contains type of the message

        :return: The type of this MessageRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MessageRequest.

        Contains type of the message

        :param type: The type of this MessageRequest.
        :type type: str
        """
        allowed_values = ["regular", "ephemeral", "error", "reply", "system", "deleted"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user(self):
        """Gets the user of this MessageRequest.


        :return: The user of this MessageRequest.
        :rtype: UserObjectRequest
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this MessageRequest.


        :param user: The user of this MessageRequest.
        :type user: UserObjectRequest
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this MessageRequest.


        :return: The user_id of this MessageRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this MessageRequest.


        :param user_id: The user_id of this MessageRequest.
        :type user_id: str
        """

        self._user_id = user_id
