# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Config(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_certificate: str=None, app_id: str=None, default_role: str=None, role_map: Dict[str, str]=None):
        """Config - a model defined in OpenAPI

        :param app_certificate: The app_certificate of this Config.
        :param app_id: The app_id of this Config.
        :param default_role: The default_role of this Config.
        :param role_map: The role_map of this Config.
        """
        self.openapi_types = {
            'app_certificate': str,
            'app_id': str,
            'default_role': str,
            'role_map': Dict[str, str]
        }

        self.attribute_map = {
            'app_certificate': 'app_certificate',
            'app_id': 'app_id',
            'default_role': 'default_role',
            'role_map': 'role_map'
        }

        self._app_certificate = app_certificate
        self._app_id = app_id
        self._default_role = default_role
        self._role_map = role_map

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Config':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Config of this Config.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_certificate(self):
        """Gets the app_certificate of this Config.


        :return: The app_certificate of this Config.
        :rtype: str
        """
        return self._app_certificate

    @app_certificate.setter
    def app_certificate(self, app_certificate):
        """Sets the app_certificate of this Config.


        :param app_certificate: The app_certificate of this Config.
        :type app_certificate: str
        """
        if app_certificate is None:
            raise ValueError("Invalid value for `app_certificate`, must not be `None`")

        self._app_certificate = app_certificate

    @property
    def app_id(self):
        """Gets the app_id of this Config.


        :return: The app_id of this Config.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this Config.


        :param app_id: The app_id of this Config.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def default_role(self):
        """Gets the default_role of this Config.


        :return: The default_role of this Config.
        :rtype: str
        """
        return self._default_role

    @default_role.setter
    def default_role(self, default_role):
        """Sets the default_role of this Config.


        :param default_role: The default_role of this Config.
        :type default_role: str
        """
        allowed_values = ["attendee", "publisher", "subscriber", "admin"]  # noqa: E501
        if default_role not in allowed_values:
            raise ValueError(
                "Invalid value for `default_role` ({0}), must be one of {1}"
                .format(default_role, allowed_values)
            )

        self._default_role = default_role

    @property
    def role_map(self):
        """Gets the role_map of this Config.


        :return: The role_map of this Config.
        :rtype: Dict[str, str]
        """
        return self._role_map

    @role_map.setter
    def role_map(self, role_map):
        """Sets the role_map of this Config.


        :param role_map: The role_map of this Config.
        :type role_map: Dict[str, str]
        """

        self._role_map = role_map
