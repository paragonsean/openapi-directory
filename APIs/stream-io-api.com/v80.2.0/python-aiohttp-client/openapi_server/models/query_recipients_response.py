# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.campaign import Campaign
from openapi_server.models.channel import Channel
from openapi_server.models.recipient import Recipient
from openapi_server.models.segment import Segment
from openapi_server.models.user_object import UserObject
from openapi_server import util


class QueryRecipientsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, campaigns: Dict[str, Campaign]=None, channels: Dict[str, Channel]=None, duration: str=None, recipients: List[Recipient]=None, segments: Dict[str, Segment]=None, users: Dict[str, UserObject]=None):
        """QueryRecipientsResponse - a model defined in OpenAPI

        :param campaigns: The campaigns of this QueryRecipientsResponse.
        :param channels: The channels of this QueryRecipientsResponse.
        :param duration: The duration of this QueryRecipientsResponse.
        :param recipients: The recipients of this QueryRecipientsResponse.
        :param segments: The segments of this QueryRecipientsResponse.
        :param users: The users of this QueryRecipientsResponse.
        """
        self.openapi_types = {
            'campaigns': Dict[str, Campaign],
            'channels': Dict[str, Channel],
            'duration': str,
            'recipients': List[Recipient],
            'segments': Dict[str, Segment],
            'users': Dict[str, UserObject]
        }

        self.attribute_map = {
            'campaigns': 'campaigns',
            'channels': 'channels',
            'duration': 'duration',
            'recipients': 'recipients',
            'segments': 'segments',
            'users': 'users'
        }

        self._campaigns = campaigns
        self._channels = channels
        self._duration = duration
        self._recipients = recipients
        self._segments = segments
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryRecipientsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryRecipientsResponse of this QueryRecipientsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def campaigns(self):
        """Gets the campaigns of this QueryRecipientsResponse.


        :return: The campaigns of this QueryRecipientsResponse.
        :rtype: Dict[str, Campaign]
        """
        return self._campaigns

    @campaigns.setter
    def campaigns(self, campaigns):
        """Sets the campaigns of this QueryRecipientsResponse.


        :param campaigns: The campaigns of this QueryRecipientsResponse.
        :type campaigns: Dict[str, Campaign]
        """
        if campaigns is None:
            raise ValueError("Invalid value for `campaigns`, must not be `None`")

        self._campaigns = campaigns

    @property
    def channels(self):
        """Gets the channels of this QueryRecipientsResponse.


        :return: The channels of this QueryRecipientsResponse.
        :rtype: Dict[str, Channel]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this QueryRecipientsResponse.


        :param channels: The channels of this QueryRecipientsResponse.
        :type channels: Dict[str, Channel]
        """
        if channels is None:
            raise ValueError("Invalid value for `channels`, must not be `None`")

        self._channels = channels

    @property
    def duration(self):
        """Gets the duration of this QueryRecipientsResponse.

        Duration of the request in human-readable format

        :return: The duration of this QueryRecipientsResponse.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this QueryRecipientsResponse.

        Duration of the request in human-readable format

        :param duration: The duration of this QueryRecipientsResponse.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def recipients(self):
        """Gets the recipients of this QueryRecipientsResponse.


        :return: The recipients of this QueryRecipientsResponse.
        :rtype: List[Recipient]
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this QueryRecipientsResponse.


        :param recipients: The recipients of this QueryRecipientsResponse.
        :type recipients: List[Recipient]
        """
        if recipients is None:
            raise ValueError("Invalid value for `recipients`, must not be `None`")

        self._recipients = recipients

    @property
    def segments(self):
        """Gets the segments of this QueryRecipientsResponse.


        :return: The segments of this QueryRecipientsResponse.
        :rtype: Dict[str, Segment]
        """
        return self._segments

    @segments.setter
    def segments(self, segments):
        """Sets the segments of this QueryRecipientsResponse.


        :param segments: The segments of this QueryRecipientsResponse.
        :type segments: Dict[str, Segment]
        """
        if segments is None:
            raise ValueError("Invalid value for `segments`, must not be `None`")

        self._segments = segments

    @property
    def users(self):
        """Gets the users of this QueryRecipientsResponse.


        :return: The users of this QueryRecipientsResponse.
        :rtype: Dict[str, UserObject]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this QueryRecipientsResponse.


        :param users: The users of this QueryRecipientsResponse.
        :type users: Dict[str, UserObject]
        """
        if users is None:
            raise ValueError("Invalid value for `users`, must not be `None`")

        self._users = users
