# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_object_request import UserObjectRequest
from openapi_server import util


class CheckPushRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apn_template: str=None, firebase_data_template: str=None, firebase_template: str=None, message_id: str=None, push_provider_name: str=None, push_provider_type: str=None, skip_devices: bool=None, user: UserObjectRequest=None, user_id: str=None):
        """CheckPushRequest - a model defined in OpenAPI

        :param apn_template: The apn_template of this CheckPushRequest.
        :param firebase_data_template: The firebase_data_template of this CheckPushRequest.
        :param firebase_template: The firebase_template of this CheckPushRequest.
        :param message_id: The message_id of this CheckPushRequest.
        :param push_provider_name: The push_provider_name of this CheckPushRequest.
        :param push_provider_type: The push_provider_type of this CheckPushRequest.
        :param skip_devices: The skip_devices of this CheckPushRequest.
        :param user: The user of this CheckPushRequest.
        :param user_id: The user_id of this CheckPushRequest.
        """
        self.openapi_types = {
            'apn_template': str,
            'firebase_data_template': str,
            'firebase_template': str,
            'message_id': str,
            'push_provider_name': str,
            'push_provider_type': str,
            'skip_devices': bool,
            'user': UserObjectRequest,
            'user_id': str
        }

        self.attribute_map = {
            'apn_template': 'apn_template',
            'firebase_data_template': 'firebase_data_template',
            'firebase_template': 'firebase_template',
            'message_id': 'message_id',
            'push_provider_name': 'push_provider_name',
            'push_provider_type': 'push_provider_type',
            'skip_devices': 'skip_devices',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._apn_template = apn_template
        self._firebase_data_template = firebase_data_template
        self._firebase_template = firebase_template
        self._message_id = message_id
        self._push_provider_name = push_provider_name
        self._push_provider_type = push_provider_type
        self._skip_devices = skip_devices
        self._user = user
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckPushRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckPushRequest of this CheckPushRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apn_template(self):
        """Gets the apn_template of this CheckPushRequest.

        Push message template for APN

        :return: The apn_template of this CheckPushRequest.
        :rtype: str
        """
        return self._apn_template

    @apn_template.setter
    def apn_template(self, apn_template):
        """Sets the apn_template of this CheckPushRequest.

        Push message template for APN

        :param apn_template: The apn_template of this CheckPushRequest.
        :type apn_template: str
        """

        self._apn_template = apn_template

    @property
    def firebase_data_template(self):
        """Gets the firebase_data_template of this CheckPushRequest.

        Push message data template for Firebase

        :return: The firebase_data_template of this CheckPushRequest.
        :rtype: str
        """
        return self._firebase_data_template

    @firebase_data_template.setter
    def firebase_data_template(self, firebase_data_template):
        """Sets the firebase_data_template of this CheckPushRequest.

        Push message data template for Firebase

        :param firebase_data_template: The firebase_data_template of this CheckPushRequest.
        :type firebase_data_template: str
        """

        self._firebase_data_template = firebase_data_template

    @property
    def firebase_template(self):
        """Gets the firebase_template of this CheckPushRequest.

        Push message template for Firebase

        :return: The firebase_template of this CheckPushRequest.
        :rtype: str
        """
        return self._firebase_template

    @firebase_template.setter
    def firebase_template(self, firebase_template):
        """Sets the firebase_template of this CheckPushRequest.

        Push message template for Firebase

        :param firebase_template: The firebase_template of this CheckPushRequest.
        :type firebase_template: str
        """

        self._firebase_template = firebase_template

    @property
    def message_id(self):
        """Gets the message_id of this CheckPushRequest.

        Message ID to send push notification for

        :return: The message_id of this CheckPushRequest.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this CheckPushRequest.

        Message ID to send push notification for

        :param message_id: The message_id of this CheckPushRequest.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def push_provider_name(self):
        """Gets the push_provider_name of this CheckPushRequest.

        Name of push provider

        :return: The push_provider_name of this CheckPushRequest.
        :rtype: str
        """
        return self._push_provider_name

    @push_provider_name.setter
    def push_provider_name(self, push_provider_name):
        """Sets the push_provider_name of this CheckPushRequest.

        Name of push provider

        :param push_provider_name: The push_provider_name of this CheckPushRequest.
        :type push_provider_name: str
        """

        self._push_provider_name = push_provider_name

    @property
    def push_provider_type(self):
        """Gets the push_provider_type of this CheckPushRequest.

        Push provider type

        :return: The push_provider_type of this CheckPushRequest.
        :rtype: str
        """
        return self._push_provider_type

    @push_provider_type.setter
    def push_provider_type(self, push_provider_type):
        """Sets the push_provider_type of this CheckPushRequest.

        Push provider type

        :param push_provider_type: The push_provider_type of this CheckPushRequest.
        :type push_provider_type: str
        """
        allowed_values = ["firebase", "apn", "huawei", "xiaomi"]  # noqa: E501
        if push_provider_type not in allowed_values:
            raise ValueError(
                "Invalid value for `push_provider_type` ({0}), must be one of {1}"
                .format(push_provider_type, allowed_values)
            )

        self._push_provider_type = push_provider_type

    @property
    def skip_devices(self):
        """Gets the skip_devices of this CheckPushRequest.

        Don't require existing devices to render templates

        :return: The skip_devices of this CheckPushRequest.
        :rtype: bool
        """
        return self._skip_devices

    @skip_devices.setter
    def skip_devices(self, skip_devices):
        """Sets the skip_devices of this CheckPushRequest.

        Don't require existing devices to render templates

        :param skip_devices: The skip_devices of this CheckPushRequest.
        :type skip_devices: bool
        """

        self._skip_devices = skip_devices

    @property
    def user(self):
        """Gets the user of this CheckPushRequest.


        :return: The user of this CheckPushRequest.
        :rtype: UserObjectRequest
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this CheckPushRequest.


        :param user: The user of this CheckPushRequest.
        :type user: UserObjectRequest
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this CheckPushRequest.


        :return: The user_id of this CheckPushRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CheckPushRequest.


        :param user_id: The user_id of this CheckPushRequest.
        :type user_id: str
        """

        self._user_id = user_id
