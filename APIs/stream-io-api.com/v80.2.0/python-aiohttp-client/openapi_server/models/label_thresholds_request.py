# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LabelThresholdsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, block: float=None, flag: float=None):
        """LabelThresholdsRequest - a model defined in OpenAPI

        :param block: The block of this LabelThresholdsRequest.
        :param flag: The flag of this LabelThresholdsRequest.
        """
        self.openapi_types = {
            'block': float,
            'flag': float
        }

        self.attribute_map = {
            'block': 'block',
            'flag': 'flag'
        }

        self._block = block
        self._flag = flag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LabelThresholdsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LabelThresholdsRequest of this LabelThresholdsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def block(self):
        """Gets the block of this LabelThresholdsRequest.

        Threshold for automatic message block

        :return: The block of this LabelThresholdsRequest.
        :rtype: float
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this LabelThresholdsRequest.

        Threshold for automatic message block

        :param block: The block of this LabelThresholdsRequest.
        :type block: float
        """
        if block is not None and block > 1:
            raise ValueError("Invalid value for `block`, must be a value less than or equal to `1`")
        if block is not None and block < 0:
            raise ValueError("Invalid value for `block`, must be a value greater than or equal to `0`")

        self._block = block

    @property
    def flag(self):
        """Gets the flag of this LabelThresholdsRequest.

        Threshold for automatic message flag

        :return: The flag of this LabelThresholdsRequest.
        :rtype: float
        """
        return self._flag

    @flag.setter
    def flag(self, flag):
        """Sets the flag of this LabelThresholdsRequest.

        Threshold for automatic message flag

        :param flag: The flag of this LabelThresholdsRequest.
        :type flag: float
        """
        if flag is not None and flag > 1:
            raise ValueError("Invalid value for `flag`, must be a value less than or equal to `1`")
        if flag is not None and flag < 0:
            raise ValueError("Invalid value for `flag`, must be a value greater than or equal to `0`")

        self._flag = flag
