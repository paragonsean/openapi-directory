# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_settings import AudioSettings
from openapi_server.models.backstage_settings import BackstageSettings
from openapi_server.models.broadcast_settings import BroadcastSettings
from openapi_server.models.geofence_settings import GeofenceSettings
from openapi_server.models.record_settings import RecordSettings
from openapi_server.models.ring_settings import RingSettings
from openapi_server.models.screensharing_settings import ScreensharingSettings
from openapi_server.models.transcription_settings import TranscriptionSettings
from openapi_server.models.video_settings import VideoSettings
from openapi_server import util


class CallSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio: AudioSettings=None, backstage: BackstageSettings=None, broadcasting: BroadcastSettings=None, geofencing: GeofenceSettings=None, recording: RecordSettings=None, ring: RingSettings=None, screensharing: ScreensharingSettings=None, transcription: TranscriptionSettings=None, video: VideoSettings=None):
        """CallSettings - a model defined in OpenAPI

        :param audio: The audio of this CallSettings.
        :param backstage: The backstage of this CallSettings.
        :param broadcasting: The broadcasting of this CallSettings.
        :param geofencing: The geofencing of this CallSettings.
        :param recording: The recording of this CallSettings.
        :param ring: The ring of this CallSettings.
        :param screensharing: The screensharing of this CallSettings.
        :param transcription: The transcription of this CallSettings.
        :param video: The video of this CallSettings.
        """
        self.openapi_types = {
            'audio': AudioSettings,
            'backstage': BackstageSettings,
            'broadcasting': BroadcastSettings,
            'geofencing': GeofenceSettings,
            'recording': RecordSettings,
            'ring': RingSettings,
            'screensharing': ScreensharingSettings,
            'transcription': TranscriptionSettings,
            'video': VideoSettings
        }

        self.attribute_map = {
            'audio': 'audio',
            'backstage': 'backstage',
            'broadcasting': 'broadcasting',
            'geofencing': 'geofencing',
            'recording': 'recording',
            'ring': 'ring',
            'screensharing': 'screensharing',
            'transcription': 'transcription',
            'video': 'video'
        }

        self._audio = audio
        self._backstage = backstage
        self._broadcasting = broadcasting
        self._geofencing = geofencing
        self._recording = recording
        self._ring = ring
        self._screensharing = screensharing
        self._transcription = transcription
        self._video = video

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CallSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CallSettings of this CallSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio(self):
        """Gets the audio of this CallSettings.


        :return: The audio of this CallSettings.
        :rtype: AudioSettings
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this CallSettings.


        :param audio: The audio of this CallSettings.
        :type audio: AudioSettings
        """

        self._audio = audio

    @property
    def backstage(self):
        """Gets the backstage of this CallSettings.


        :return: The backstage of this CallSettings.
        :rtype: BackstageSettings
        """
        return self._backstage

    @backstage.setter
    def backstage(self, backstage):
        """Sets the backstage of this CallSettings.


        :param backstage: The backstage of this CallSettings.
        :type backstage: BackstageSettings
        """

        self._backstage = backstage

    @property
    def broadcasting(self):
        """Gets the broadcasting of this CallSettings.


        :return: The broadcasting of this CallSettings.
        :rtype: BroadcastSettings
        """
        return self._broadcasting

    @broadcasting.setter
    def broadcasting(self, broadcasting):
        """Sets the broadcasting of this CallSettings.


        :param broadcasting: The broadcasting of this CallSettings.
        :type broadcasting: BroadcastSettings
        """

        self._broadcasting = broadcasting

    @property
    def geofencing(self):
        """Gets the geofencing of this CallSettings.


        :return: The geofencing of this CallSettings.
        :rtype: GeofenceSettings
        """
        return self._geofencing

    @geofencing.setter
    def geofencing(self, geofencing):
        """Sets the geofencing of this CallSettings.


        :param geofencing: The geofencing of this CallSettings.
        :type geofencing: GeofenceSettings
        """

        self._geofencing = geofencing

    @property
    def recording(self):
        """Gets the recording of this CallSettings.


        :return: The recording of this CallSettings.
        :rtype: RecordSettings
        """
        return self._recording

    @recording.setter
    def recording(self, recording):
        """Sets the recording of this CallSettings.


        :param recording: The recording of this CallSettings.
        :type recording: RecordSettings
        """

        self._recording = recording

    @property
    def ring(self):
        """Gets the ring of this CallSettings.


        :return: The ring of this CallSettings.
        :rtype: RingSettings
        """
        return self._ring

    @ring.setter
    def ring(self, ring):
        """Sets the ring of this CallSettings.


        :param ring: The ring of this CallSettings.
        :type ring: RingSettings
        """

        self._ring = ring

    @property
    def screensharing(self):
        """Gets the screensharing of this CallSettings.


        :return: The screensharing of this CallSettings.
        :rtype: ScreensharingSettings
        """
        return self._screensharing

    @screensharing.setter
    def screensharing(self, screensharing):
        """Sets the screensharing of this CallSettings.


        :param screensharing: The screensharing of this CallSettings.
        :type screensharing: ScreensharingSettings
        """

        self._screensharing = screensharing

    @property
    def transcription(self):
        """Gets the transcription of this CallSettings.


        :return: The transcription of this CallSettings.
        :rtype: TranscriptionSettings
        """
        return self._transcription

    @transcription.setter
    def transcription(self, transcription):
        """Sets the transcription of this CallSettings.


        :param transcription: The transcription of this CallSettings.
        :type transcription: TranscriptionSettings
        """

        self._transcription = transcription

    @property
    def video(self):
        """Gets the video of this CallSettings.


        :return: The video of this CallSettings.
        :rtype: VideoSettings
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this CallSettings.


        :param video: The video of this CallSettings.
        :type video: VideoSettings
        """

        self._video = video
