# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.call_settings import CallSettings
from openapi_server import util


class CallType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_pk: int=None, created_at: datetime=None, name: str=None, pk: int=None, settings: CallSettings=None, updated_at: datetime=None):
        """CallType - a model defined in OpenAPI

        :param app_pk: The app_pk of this CallType.
        :param created_at: The created_at of this CallType.
        :param name: The name of this CallType.
        :param pk: The pk of this CallType.
        :param settings: The settings of this CallType.
        :param updated_at: The updated_at of this CallType.
        """
        self.openapi_types = {
            'app_pk': int,
            'created_at': datetime,
            'name': str,
            'pk': int,
            'settings': CallSettings,
            'updated_at': datetime
        }

        self.attribute_map = {
            'app_pk': 'AppPK',
            'created_at': 'CreatedAt',
            'name': 'Name',
            'pk': 'PK',
            'settings': 'Settings',
            'updated_at': 'UpdatedAt'
        }

        self._app_pk = app_pk
        self._created_at = created_at
        self._name = name
        self._pk = pk
        self._settings = settings
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CallType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CallType of this CallType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_pk(self):
        """Gets the app_pk of this CallType.


        :return: The app_pk of this CallType.
        :rtype: int
        """
        return self._app_pk

    @app_pk.setter
    def app_pk(self, app_pk):
        """Sets the app_pk of this CallType.


        :param app_pk: The app_pk of this CallType.
        :type app_pk: int
        """
        if app_pk is None:
            raise ValueError("Invalid value for `app_pk`, must not be `None`")

        self._app_pk = app_pk

    @property
    def created_at(self):
        """Gets the created_at of this CallType.


        :return: The created_at of this CallType.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CallType.


        :param created_at: The created_at of this CallType.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def name(self):
        """Gets the name of this CallType.


        :return: The name of this CallType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CallType.


        :param name: The name of this CallType.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def pk(self):
        """Gets the pk of this CallType.


        :return: The pk of this CallType.
        :rtype: int
        """
        return self._pk

    @pk.setter
    def pk(self, pk):
        """Sets the pk of this CallType.


        :param pk: The pk of this CallType.
        :type pk: int
        """
        if pk is None:
            raise ValueError("Invalid value for `pk`, must not be `None`")

        self._pk = pk

    @property
    def settings(self):
        """Gets the settings of this CallType.


        :return: The settings of this CallType.
        :rtype: CallSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CallType.


        :param settings: The settings of this CallType.
        :type settings: CallSettings
        """

        self._settings = settings

    @property
    def updated_at(self):
        """Gets the updated_at of this CallType.


        :return: The updated_at of this CallType.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CallType.


        :param updated_at: The updated_at of this CallType.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at
