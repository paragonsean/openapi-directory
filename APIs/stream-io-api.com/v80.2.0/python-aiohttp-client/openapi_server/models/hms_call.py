# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HMSCall(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, room_id: str=None, room_name: str=None):
        """HMSCall - a model defined in OpenAPI

        :param room_id: The room_id of this HMSCall.
        :param room_name: The room_name of this HMSCall.
        """
        self.openapi_types = {
            'room_id': str,
            'room_name': str
        }

        self.attribute_map = {
            'room_id': 'room_id',
            'room_name': 'room_name'
        }

        self._room_id = room_id
        self._room_name = room_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HMSCall':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HMSCall of this HMSCall.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def room_id(self):
        """Gets the room_id of this HMSCall.


        :return: The room_id of this HMSCall.
        :rtype: str
        """
        return self._room_id

    @room_id.setter
    def room_id(self, room_id):
        """Sets the room_id of this HMSCall.


        :param room_id: The room_id of this HMSCall.
        :type room_id: str
        """
        if room_id is None:
            raise ValueError("Invalid value for `room_id`, must not be `None`")

        self._room_id = room_id

    @property
    def room_name(self):
        """Gets the room_name of this HMSCall.


        :return: The room_name of this HMSCall.
        :rtype: str
        """
        return self._room_name

    @room_name.setter
    def room_name(self, room_name):
        """Sets the room_name of this HMSCall.


        :param room_name: The room_name of this HMSCall.
        :type room_name: str
        """
        if room_name is None:
            raise ValueError("Invalid value for `room_name`, must not be `None`")

        self._room_name = room_name
