# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.own_user import OwnUser
from openapi_server import util


class HealthCheckEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cid: str=None, created_at: datetime=None, me: OwnUser=None, type: str='health.check'):
        """HealthCheckEvent - a model defined in OpenAPI

        :param cid: The cid of this HealthCheckEvent.
        :param created_at: The created_at of this HealthCheckEvent.
        :param me: The me of this HealthCheckEvent.
        :param type: The type of this HealthCheckEvent.
        """
        self.openapi_types = {
            'cid': str,
            'created_at': datetime,
            'me': OwnUser,
            'type': str
        }

        self.attribute_map = {
            'cid': 'cid',
            'created_at': 'created_at',
            'me': 'me',
            'type': 'type'
        }

        self._cid = cid
        self._created_at = created_at
        self._me = me
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HealthCheckEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HealthCheckEvent of this HealthCheckEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cid(self):
        """Gets the cid of this HealthCheckEvent.


        :return: The cid of this HealthCheckEvent.
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this HealthCheckEvent.


        :param cid: The cid of this HealthCheckEvent.
        :type cid: str
        """
        if cid is None:
            raise ValueError("Invalid value for `cid`, must not be `None`")

        self._cid = cid

    @property
    def created_at(self):
        """Gets the created_at of this HealthCheckEvent.


        :return: The created_at of this HealthCheckEvent.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this HealthCheckEvent.


        :param created_at: The created_at of this HealthCheckEvent.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def me(self):
        """Gets the me of this HealthCheckEvent.


        :return: The me of this HealthCheckEvent.
        :rtype: OwnUser
        """
        return self._me

    @me.setter
    def me(self, me):
        """Sets the me of this HealthCheckEvent.


        :param me: The me of this HealthCheckEvent.
        :type me: OwnUser
        """

        self._me = me

    @property
    def type(self):
        """Gets the type of this HealthCheckEvent.


        :return: The type of this HealthCheckEvent.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HealthCheckEvent.


        :param type: The type of this HealthCheckEvent.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
