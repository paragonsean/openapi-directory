# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RecordSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_only: bool=None, mode: str=None, quality: str=None):
        """RecordSettings - a model defined in OpenAPI

        :param audio_only: The audio_only of this RecordSettings.
        :param mode: The mode of this RecordSettings.
        :param quality: The quality of this RecordSettings.
        """
        self.openapi_types = {
            'audio_only': bool,
            'mode': str,
            'quality': str
        }

        self.attribute_map = {
            'audio_only': 'audio_only',
            'mode': 'mode',
            'quality': 'quality'
        }

        self._audio_only = audio_only
        self._mode = mode
        self._quality = quality

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecordSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecordSettings of this RecordSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_only(self):
        """Gets the audio_only of this RecordSettings.


        :return: The audio_only of this RecordSettings.
        :rtype: bool
        """
        return self._audio_only

    @audio_only.setter
    def audio_only(self, audio_only):
        """Sets the audio_only of this RecordSettings.


        :param audio_only: The audio_only of this RecordSettings.
        :type audio_only: bool
        """
        if audio_only is None:
            raise ValueError("Invalid value for `audio_only`, must not be `None`")

        self._audio_only = audio_only

    @property
    def mode(self):
        """Gets the mode of this RecordSettings.


        :return: The mode of this RecordSettings.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this RecordSettings.


        :param mode: The mode of this RecordSettings.
        :type mode: str
        """
        allowed_values = ["available", "disabled", "auto-on"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def quality(self):
        """Gets the quality of this RecordSettings.


        :return: The quality of this RecordSettings.
        :rtype: str
        """
        return self._quality

    @quality.setter
    def quality(self, quality):
        """Sets the quality of this RecordSettings.


        :param quality: The quality of this RecordSettings.
        :type quality: str
        """
        allowed_values = ["audio-only", "360p", "480p", "720p", "1080p", "1440p"]  # noqa: E501
        if quality not in allowed_values:
            raise ValueError(
                "Invalid value for `quality` ({0}), must be one of {1}"
                .format(quality, allowed_values)
            )

        self._quality = quality
