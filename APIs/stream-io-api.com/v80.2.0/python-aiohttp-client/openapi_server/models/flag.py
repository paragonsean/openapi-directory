# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flag_details import FlagDetails
from openapi_server.models.message import Message
from openapi_server.models.user_object import UserObject
from openapi_server import util


class Flag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approved_at: datetime=None, created_at: datetime=None, created_by_automod: bool=None, details: FlagDetails=None, rejected_at: datetime=None, reviewed_at: datetime=None, target_message: Message=None, target_message_id: str=None, target_user: UserObject=None, updated_at: datetime=None, user: UserObject=None):
        """Flag - a model defined in OpenAPI

        :param approved_at: The approved_at of this Flag.
        :param created_at: The created_at of this Flag.
        :param created_by_automod: The created_by_automod of this Flag.
        :param details: The details of this Flag.
        :param rejected_at: The rejected_at of this Flag.
        :param reviewed_at: The reviewed_at of this Flag.
        :param target_message: The target_message of this Flag.
        :param target_message_id: The target_message_id of this Flag.
        :param target_user: The target_user of this Flag.
        :param updated_at: The updated_at of this Flag.
        :param user: The user of this Flag.
        """
        self.openapi_types = {
            'approved_at': datetime,
            'created_at': datetime,
            'created_by_automod': bool,
            'details': FlagDetails,
            'rejected_at': datetime,
            'reviewed_at': datetime,
            'target_message': Message,
            'target_message_id': str,
            'target_user': UserObject,
            'updated_at': datetime,
            'user': UserObject
        }

        self.attribute_map = {
            'approved_at': 'approved_at',
            'created_at': 'created_at',
            'created_by_automod': 'created_by_automod',
            'details': 'details',
            'rejected_at': 'rejected_at',
            'reviewed_at': 'reviewed_at',
            'target_message': 'target_message',
            'target_message_id': 'target_message_id',
            'target_user': 'target_user',
            'updated_at': 'updated_at',
            'user': 'user'
        }

        self._approved_at = approved_at
        self._created_at = created_at
        self._created_by_automod = created_by_automod
        self._details = details
        self._rejected_at = rejected_at
        self._reviewed_at = reviewed_at
        self._target_message = target_message
        self._target_message_id = target_message_id
        self._target_user = target_user
        self._updated_at = updated_at
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Flag':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Flag of this Flag.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approved_at(self):
        """Gets the approved_at of this Flag.

        Date of the approval

        :return: The approved_at of this Flag.
        :rtype: datetime
        """
        return self._approved_at

    @approved_at.setter
    def approved_at(self, approved_at):
        """Sets the approved_at of this Flag.

        Date of the approval

        :param approved_at: The approved_at of this Flag.
        :type approved_at: datetime
        """

        self._approved_at = approved_at

    @property
    def created_at(self):
        """Gets the created_at of this Flag.

        Date/time of creation

        :return: The created_at of this Flag.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Flag.

        Date/time of creation

        :param created_at: The created_at of this Flag.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def created_by_automod(self):
        """Gets the created_by_automod of this Flag.


        :return: The created_by_automod of this Flag.
        :rtype: bool
        """
        return self._created_by_automod

    @created_by_automod.setter
    def created_by_automod(self, created_by_automod):
        """Sets the created_by_automod of this Flag.


        :param created_by_automod: The created_by_automod of this Flag.
        :type created_by_automod: bool
        """
        if created_by_automod is None:
            raise ValueError("Invalid value for `created_by_automod`, must not be `None`")

        self._created_by_automod = created_by_automod

    @property
    def details(self):
        """Gets the details of this Flag.


        :return: The details of this Flag.
        :rtype: FlagDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Flag.


        :param details: The details of this Flag.
        :type details: FlagDetails
        """

        self._details = details

    @property
    def rejected_at(self):
        """Gets the rejected_at of this Flag.

        Date of the rejection

        :return: The rejected_at of this Flag.
        :rtype: datetime
        """
        return self._rejected_at

    @rejected_at.setter
    def rejected_at(self, rejected_at):
        """Sets the rejected_at of this Flag.

        Date of the rejection

        :param rejected_at: The rejected_at of this Flag.
        :type rejected_at: datetime
        """

        self._rejected_at = rejected_at

    @property
    def reviewed_at(self):
        """Gets the reviewed_at of this Flag.

        Date of the review

        :return: The reviewed_at of this Flag.
        :rtype: datetime
        """
        return self._reviewed_at

    @reviewed_at.setter
    def reviewed_at(self, reviewed_at):
        """Sets the reviewed_at of this Flag.

        Date of the review

        :param reviewed_at: The reviewed_at of this Flag.
        :type reviewed_at: datetime
        """

        self._reviewed_at = reviewed_at

    @property
    def target_message(self):
        """Gets the target_message of this Flag.


        :return: The target_message of this Flag.
        :rtype: Message
        """
        return self._target_message

    @target_message.setter
    def target_message(self, target_message):
        """Sets the target_message of this Flag.


        :param target_message: The target_message of this Flag.
        :type target_message: Message
        """

        self._target_message = target_message

    @property
    def target_message_id(self):
        """Gets the target_message_id of this Flag.

        ID of flagged message

        :return: The target_message_id of this Flag.
        :rtype: str
        """
        return self._target_message_id

    @target_message_id.setter
    def target_message_id(self, target_message_id):
        """Sets the target_message_id of this Flag.

        ID of flagged message

        :param target_message_id: The target_message_id of this Flag.
        :type target_message_id: str
        """

        self._target_message_id = target_message_id

    @property
    def target_user(self):
        """Gets the target_user of this Flag.


        :return: The target_user of this Flag.
        :rtype: UserObject
        """
        return self._target_user

    @target_user.setter
    def target_user(self, target_user):
        """Sets the target_user of this Flag.


        :param target_user: The target_user of this Flag.
        :type target_user: UserObject
        """

        self._target_user = target_user

    @property
    def updated_at(self):
        """Gets the updated_at of this Flag.

        Date/time of the last update

        :return: The updated_at of this Flag.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Flag.

        Date/time of the last update

        :param updated_at: The updated_at of this Flag.
        :type updated_at: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this Flag.


        :return: The user of this Flag.
        :rtype: UserObject
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Flag.


        :param user: The user of this Flag.
        :type user: UserObject
        """

        self._user = user
