# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.own_user import OwnUser
from openapi_server.models.user_mute import UserMute
from openapi_server import util


class MuteUserResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: str=None, mute: UserMute=None, mutes: List[UserMute]=None, own_user: OwnUser=None):
        """MuteUserResponse - a model defined in OpenAPI

        :param duration: The duration of this MuteUserResponse.
        :param mute: The mute of this MuteUserResponse.
        :param mutes: The mutes of this MuteUserResponse.
        :param own_user: The own_user of this MuteUserResponse.
        """
        self.openapi_types = {
            'duration': str,
            'mute': UserMute,
            'mutes': List[UserMute],
            'own_user': OwnUser
        }

        self.attribute_map = {
            'duration': 'duration',
            'mute': 'mute',
            'mutes': 'mutes',
            'own_user': 'own_user'
        }

        self._duration = duration
        self._mute = mute
        self._mutes = mutes
        self._own_user = own_user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MuteUserResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MuteUserResponse of this MuteUserResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this MuteUserResponse.


        :return: The duration of this MuteUserResponse.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this MuteUserResponse.


        :param duration: The duration of this MuteUserResponse.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def mute(self):
        """Gets the mute of this MuteUserResponse.


        :return: The mute of this MuteUserResponse.
        :rtype: UserMute
        """
        return self._mute

    @mute.setter
    def mute(self, mute):
        """Sets the mute of this MuteUserResponse.


        :param mute: The mute of this MuteUserResponse.
        :type mute: UserMute
        """

        self._mute = mute

    @property
    def mutes(self):
        """Gets the mutes of this MuteUserResponse.

        Object with mutes (if multiple users were muted)

        :return: The mutes of this MuteUserResponse.
        :rtype: List[UserMute]
        """
        return self._mutes

    @mutes.setter
    def mutes(self, mutes):
        """Sets the mutes of this MuteUserResponse.

        Object with mutes (if multiple users were muted)

        :param mutes: The mutes of this MuteUserResponse.
        :type mutes: List[UserMute]
        """

        self._mutes = mutes

    @property
    def own_user(self):
        """Gets the own_user of this MuteUserResponse.


        :return: The own_user of this MuteUserResponse.
        :rtype: OwnUser
        """
        return self._own_user

    @own_user.setter
    def own_user(self, own_user):
        """Sets the own_user of this MuteUserResponse.


        :param own_user: The own_user of this MuteUserResponse.
        :type own_user: OwnUser
        """

        self._own_user = own_user
