# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_object_request import UserObjectRequest
from openapi_server import util


class ChannelMemberRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ban_expires: datetime=None, banned: bool=None, channel_role: str=None, created_at: datetime=None, deleted_at: datetime=None, invite_accepted_at: datetime=None, invite_rejected_at: datetime=None, invited: bool=None, is_moderator: bool=None, role: str=None, shadow_banned: bool=None, updated_at: datetime=None, user: UserObjectRequest=None, user_id: str=None):
        """ChannelMemberRequest - a model defined in OpenAPI

        :param ban_expires: The ban_expires of this ChannelMemberRequest.
        :param banned: The banned of this ChannelMemberRequest.
        :param channel_role: The channel_role of this ChannelMemberRequest.
        :param created_at: The created_at of this ChannelMemberRequest.
        :param deleted_at: The deleted_at of this ChannelMemberRequest.
        :param invite_accepted_at: The invite_accepted_at of this ChannelMemberRequest.
        :param invite_rejected_at: The invite_rejected_at of this ChannelMemberRequest.
        :param invited: The invited of this ChannelMemberRequest.
        :param is_moderator: The is_moderator of this ChannelMemberRequest.
        :param role: The role of this ChannelMemberRequest.
        :param shadow_banned: The shadow_banned of this ChannelMemberRequest.
        :param updated_at: The updated_at of this ChannelMemberRequest.
        :param user: The user of this ChannelMemberRequest.
        :param user_id: The user_id of this ChannelMemberRequest.
        """
        self.openapi_types = {
            'ban_expires': datetime,
            'banned': bool,
            'channel_role': str,
            'created_at': datetime,
            'deleted_at': datetime,
            'invite_accepted_at': datetime,
            'invite_rejected_at': datetime,
            'invited': bool,
            'is_moderator': bool,
            'role': str,
            'shadow_banned': bool,
            'updated_at': datetime,
            'user': UserObjectRequest,
            'user_id': str
        }

        self.attribute_map = {
            'ban_expires': 'ban_expires',
            'banned': 'banned',
            'channel_role': 'channel_role',
            'created_at': 'created_at',
            'deleted_at': 'deleted_at',
            'invite_accepted_at': 'invite_accepted_at',
            'invite_rejected_at': 'invite_rejected_at',
            'invited': 'invited',
            'is_moderator': 'is_moderator',
            'role': 'role',
            'shadow_banned': 'shadow_banned',
            'updated_at': 'updated_at',
            'user': 'user',
            'user_id': 'user_id'
        }

        self._ban_expires = ban_expires
        self._banned = banned
        self._channel_role = channel_role
        self._created_at = created_at
        self._deleted_at = deleted_at
        self._invite_accepted_at = invite_accepted_at
        self._invite_rejected_at = invite_rejected_at
        self._invited = invited
        self._is_moderator = is_moderator
        self._role = role
        self._shadow_banned = shadow_banned
        self._updated_at = updated_at
        self._user = user
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChannelMemberRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChannelMemberRequest of this ChannelMemberRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ban_expires(self):
        """Gets the ban_expires of this ChannelMemberRequest.

        Expiration date of the ban

        :return: The ban_expires of this ChannelMemberRequest.
        :rtype: datetime
        """
        return self._ban_expires

    @ban_expires.setter
    def ban_expires(self, ban_expires):
        """Sets the ban_expires of this ChannelMemberRequest.

        Expiration date of the ban

        :param ban_expires: The ban_expires of this ChannelMemberRequest.
        :type ban_expires: datetime
        """

        self._ban_expires = ban_expires

    @property
    def banned(self):
        """Gets the banned of this ChannelMemberRequest.

        Whether member is banned this channel or not

        :return: The banned of this ChannelMemberRequest.
        :rtype: bool
        """
        return self._banned

    @banned.setter
    def banned(self, banned):
        """Sets the banned of this ChannelMemberRequest.

        Whether member is banned this channel or not

        :param banned: The banned of this ChannelMemberRequest.
        :type banned: bool
        """

        self._banned = banned

    @property
    def channel_role(self):
        """Gets the channel_role of this ChannelMemberRequest.

        Role of the member in the channel

        :return: The channel_role of this ChannelMemberRequest.
        :rtype: str
        """
        return self._channel_role

    @channel_role.setter
    def channel_role(self, channel_role):
        """Sets the channel_role of this ChannelMemberRequest.

        Role of the member in the channel

        :param channel_role: The channel_role of this ChannelMemberRequest.
        :type channel_role: str
        """

        self._channel_role = channel_role

    @property
    def created_at(self):
        """Gets the created_at of this ChannelMemberRequest.

        Date/time of creation

        :return: The created_at of this ChannelMemberRequest.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ChannelMemberRequest.

        Date/time of creation

        :param created_at: The created_at of this ChannelMemberRequest.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this ChannelMemberRequest.


        :return: The deleted_at of this ChannelMemberRequest.
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this ChannelMemberRequest.


        :param deleted_at: The deleted_at of this ChannelMemberRequest.
        :type deleted_at: datetime
        """

        self._deleted_at = deleted_at

    @property
    def invite_accepted_at(self):
        """Gets the invite_accepted_at of this ChannelMemberRequest.

        Date when invite was accepted

        :return: The invite_accepted_at of this ChannelMemberRequest.
        :rtype: datetime
        """
        return self._invite_accepted_at

    @invite_accepted_at.setter
    def invite_accepted_at(self, invite_accepted_at):
        """Sets the invite_accepted_at of this ChannelMemberRequest.

        Date when invite was accepted

        :param invite_accepted_at: The invite_accepted_at of this ChannelMemberRequest.
        :type invite_accepted_at: datetime
        """

        self._invite_accepted_at = invite_accepted_at

    @property
    def invite_rejected_at(self):
        """Gets the invite_rejected_at of this ChannelMemberRequest.

        Date when invite was rejected

        :return: The invite_rejected_at of this ChannelMemberRequest.
        :rtype: datetime
        """
        return self._invite_rejected_at

    @invite_rejected_at.setter
    def invite_rejected_at(self, invite_rejected_at):
        """Sets the invite_rejected_at of this ChannelMemberRequest.

        Date when invite was rejected

        :param invite_rejected_at: The invite_rejected_at of this ChannelMemberRequest.
        :type invite_rejected_at: datetime
        """

        self._invite_rejected_at = invite_rejected_at

    @property
    def invited(self):
        """Gets the invited of this ChannelMemberRequest.

        Whether member was invited or not

        :return: The invited of this ChannelMemberRequest.
        :rtype: bool
        """
        return self._invited

    @invited.setter
    def invited(self, invited):
        """Sets the invited of this ChannelMemberRequest.

        Whether member was invited or not

        :param invited: The invited of this ChannelMemberRequest.
        :type invited: bool
        """

        self._invited = invited

    @property
    def is_moderator(self):
        """Gets the is_moderator of this ChannelMemberRequest.

        Whether member is channel moderator or not

        :return: The is_moderator of this ChannelMemberRequest.
        :rtype: bool
        """
        return self._is_moderator

    @is_moderator.setter
    def is_moderator(self, is_moderator):
        """Sets the is_moderator of this ChannelMemberRequest.

        Whether member is channel moderator or not

        :param is_moderator: The is_moderator of this ChannelMemberRequest.
        :type is_moderator: bool
        """

        self._is_moderator = is_moderator

    @property
    def role(self):
        """Gets the role of this ChannelMemberRequest.

        Permission level of the member in the channel (DEPRECATED: use channel_role instead)

        :return: The role of this ChannelMemberRequest.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ChannelMemberRequest.

        Permission level of the member in the channel (DEPRECATED: use channel_role instead)

        :param role: The role of this ChannelMemberRequest.
        :type role: str
        """
        allowed_values = ["member", "moderator", "admin", "owner"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def shadow_banned(self):
        """Gets the shadow_banned of this ChannelMemberRequest.

        Whether member is shadow banned in this channel or not

        :return: The shadow_banned of this ChannelMemberRequest.
        :rtype: bool
        """
        return self._shadow_banned

    @shadow_banned.setter
    def shadow_banned(self, shadow_banned):
        """Sets the shadow_banned of this ChannelMemberRequest.

        Whether member is shadow banned in this channel or not

        :param shadow_banned: The shadow_banned of this ChannelMemberRequest.
        :type shadow_banned: bool
        """

        self._shadow_banned = shadow_banned

    @property
    def updated_at(self):
        """Gets the updated_at of this ChannelMemberRequest.

        Date/time of the last update

        :return: The updated_at of this ChannelMemberRequest.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ChannelMemberRequest.

        Date/time of the last update

        :param updated_at: The updated_at of this ChannelMemberRequest.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user(self):
        """Gets the user of this ChannelMemberRequest.


        :return: The user of this ChannelMemberRequest.
        :rtype: UserObjectRequest
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this ChannelMemberRequest.


        :param user: The user of this ChannelMemberRequest.
        :type user: UserObjectRequest
        """

        self._user = user

    @property
    def user_id(self):
        """Gets the user_id of this ChannelMemberRequest.


        :return: The user_id of this ChannelMemberRequest.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ChannelMemberRequest.


        :param user_id: The user_id of this ChannelMemberRequest.
        :type user_id: str
        """

        self._user_id = user_id
