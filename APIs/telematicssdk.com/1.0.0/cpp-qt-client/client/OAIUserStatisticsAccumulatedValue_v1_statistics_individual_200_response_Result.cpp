/**
 * Quick start - Telematics SDK
 * # Introduction We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.  * [CONTACT US](https://telematicssdk.com) * [SANDBOX](https://userdatahub.com) * [DEV.PORTAL](https://docs.telematicssdk.com) * [DEMO APP](https://raxeltelematics.com/telematics-app)   # Overview Datamotion provides telematics infrastructure for mobile applications.   Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application  There are 3 groups of methods: * 1 - user management * 2 - statistics for mobile app * 3 - statistics for back-end(s)  in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns) # Possible architecture  There are three common schemes that are used by our clients. These schemes can be combined * Collect, Process, Store (required: 1&2) * Collect, Process (required: 1& sns) * Collect (required 1&sns)   ## Collect, Process, Store ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)  ## Collect, Process ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)  ## Collect ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)  *** ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)  # Common use-cases: * Safe and efficient driving * Usage-based insurance * Safe driving assessment * Driver assessment * Trip log * Geo-analysis * Accident monitoring * Driving engagements * Location based services * Realtime Tracking and beyond  # How to start * Register a [SANDBOX ACCOUNT](https://userdatahub.com) * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials)  * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)  # Authentication To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials  Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result() {
    this->initializeModel();
}

OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::~OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result() {}

void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::initializeModel() {

    m_acceleration_count_isSet = false;
    m_acceleration_count_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_average_speed_kmh_isSet = false;
    m_average_speed_kmh_isValid = false;

    m_average_speed_mileh_isSet = false;
    m_average_speed_mileh_isValid = false;

    m_breaking_count_isSet = false;
    m_breaking_count_isValid = false;

    m_company_id_isSet = false;
    m_company_id_isValid = false;

    m_cornering_count_isSet = false;
    m_cornering_count_isValid = false;

    m_day_driving_time_isSet = false;
    m_day_driving_time_isValid = false;

    m_device_token_isSet = false;
    m_device_token_isValid = false;

    m_driver_trips_count_isSet = false;
    m_driver_trips_count_isValid = false;

    m_driving_time_isSet = false;
    m_driving_time_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_max_speed_kmh_isSet = false;
    m_max_speed_kmh_isValid = false;

    m_max_speed_mileh_isSet = false;
    m_max_speed_mileh_isValid = false;

    m_mileage_km_isSet = false;
    m_mileage_km_isValid = false;

    m_mileage_mile_isSet = false;
    m_mileage_mile_isValid = false;

    m_night_driving_time_isSet = false;
    m_night_driving_time_isValid = false;

    m_other_trips_count_isSet = false;
    m_other_trips_count_isValid = false;

    m_phone_usage_distance_km_isSet = false;
    m_phone_usage_distance_km_isValid = false;

    m_phone_usage_distance_mile_isSet = false;
    m_phone_usage_distance_mile_isValid = false;

    m_phone_usage_duration_min_isSet = false;
    m_phone_usage_duration_min_isValid = false;

    m_phone_usage_over_speed_distance_km_isSet = false;
    m_phone_usage_over_speed_distance_km_isValid = false;

    m_phone_usage_over_speed_distance_mile_isSet = false;
    m_phone_usage_over_speed_distance_mile_isValid = false;

    m_phone_usage_over_speed_duration_min_isSet = false;
    m_phone_usage_over_speed_duration_min_isValid = false;

    m_rush_hours_driving_time_isSet = false;
    m_rush_hours_driving_time_isValid = false;

    m_total_speeding_km_isSet = false;
    m_total_speeding_km_isValid = false;

    m_total_speeding_mile_isSet = false;
    m_total_speeding_mile_isValid = false;

    m_trips_count_isSet = false;
    m_trips_count_isValid = false;
}

void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::fromJsonObject(QJsonObject json) {

    m_acceleration_count_isValid = ::OpenAPI::fromJsonValue(m_acceleration_count, json[QString("AccelerationCount")]);
    m_acceleration_count_isSet = !json[QString("AccelerationCount")].isNull() && m_acceleration_count_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("AppId")]);
    m_app_id_isSet = !json[QString("AppId")].isNull() && m_app_id_isValid;

    m_average_speed_kmh_isValid = ::OpenAPI::fromJsonValue(m_average_speed_kmh, json[QString("AverageSpeedKmh")]);
    m_average_speed_kmh_isSet = !json[QString("AverageSpeedKmh")].isNull() && m_average_speed_kmh_isValid;

    m_average_speed_mileh_isValid = ::OpenAPI::fromJsonValue(m_average_speed_mileh, json[QString("AverageSpeedMileh")]);
    m_average_speed_mileh_isSet = !json[QString("AverageSpeedMileh")].isNull() && m_average_speed_mileh_isValid;

    m_breaking_count_isValid = ::OpenAPI::fromJsonValue(m_breaking_count, json[QString("BreakingCount")]);
    m_breaking_count_isSet = !json[QString("BreakingCount")].isNull() && m_breaking_count_isValid;

    m_company_id_isValid = ::OpenAPI::fromJsonValue(m_company_id, json[QString("CompanyId")]);
    m_company_id_isSet = !json[QString("CompanyId")].isNull() && m_company_id_isValid;

    m_cornering_count_isValid = ::OpenAPI::fromJsonValue(m_cornering_count, json[QString("CorneringCount")]);
    m_cornering_count_isSet = !json[QString("CorneringCount")].isNull() && m_cornering_count_isValid;

    m_day_driving_time_isValid = ::OpenAPI::fromJsonValue(m_day_driving_time, json[QString("DayDrivingTime")]);
    m_day_driving_time_isSet = !json[QString("DayDrivingTime")].isNull() && m_day_driving_time_isValid;

    m_device_token_isValid = ::OpenAPI::fromJsonValue(m_device_token, json[QString("DeviceToken")]);
    m_device_token_isSet = !json[QString("DeviceToken")].isNull() && m_device_token_isValid;

    m_driver_trips_count_isValid = ::OpenAPI::fromJsonValue(m_driver_trips_count, json[QString("DriverTripsCount")]);
    m_driver_trips_count_isSet = !json[QString("DriverTripsCount")].isNull() && m_driver_trips_count_isValid;

    m_driving_time_isValid = ::OpenAPI::fromJsonValue(m_driving_time, json[QString("DrivingTime")]);
    m_driving_time_isSet = !json[QString("DrivingTime")].isNull() && m_driving_time_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("InstanceId")]);
    m_instance_id_isSet = !json[QString("InstanceId")].isNull() && m_instance_id_isValid;

    m_max_speed_kmh_isValid = ::OpenAPI::fromJsonValue(m_max_speed_kmh, json[QString("MaxSpeedKmh")]);
    m_max_speed_kmh_isSet = !json[QString("MaxSpeedKmh")].isNull() && m_max_speed_kmh_isValid;

    m_max_speed_mileh_isValid = ::OpenAPI::fromJsonValue(m_max_speed_mileh, json[QString("MaxSpeedMileh")]);
    m_max_speed_mileh_isSet = !json[QString("MaxSpeedMileh")].isNull() && m_max_speed_mileh_isValid;

    m_mileage_km_isValid = ::OpenAPI::fromJsonValue(m_mileage_km, json[QString("MileageKm")]);
    m_mileage_km_isSet = !json[QString("MileageKm")].isNull() && m_mileage_km_isValid;

    m_mileage_mile_isValid = ::OpenAPI::fromJsonValue(m_mileage_mile, json[QString("MileageMile")]);
    m_mileage_mile_isSet = !json[QString("MileageMile")].isNull() && m_mileage_mile_isValid;

    m_night_driving_time_isValid = ::OpenAPI::fromJsonValue(m_night_driving_time, json[QString("NightDrivingTime")]);
    m_night_driving_time_isSet = !json[QString("NightDrivingTime")].isNull() && m_night_driving_time_isValid;

    m_other_trips_count_isValid = ::OpenAPI::fromJsonValue(m_other_trips_count, json[QString("OtherTripsCount")]);
    m_other_trips_count_isSet = !json[QString("OtherTripsCount")].isNull() && m_other_trips_count_isValid;

    m_phone_usage_distance_km_isValid = ::OpenAPI::fromJsonValue(m_phone_usage_distance_km, json[QString("PhoneUsageDistanceKm")]);
    m_phone_usage_distance_km_isSet = !json[QString("PhoneUsageDistanceKm")].isNull() && m_phone_usage_distance_km_isValid;

    m_phone_usage_distance_mile_isValid = ::OpenAPI::fromJsonValue(m_phone_usage_distance_mile, json[QString("PhoneUsageDistanceMile")]);
    m_phone_usage_distance_mile_isSet = !json[QString("PhoneUsageDistanceMile")].isNull() && m_phone_usage_distance_mile_isValid;

    m_phone_usage_duration_min_isValid = ::OpenAPI::fromJsonValue(m_phone_usage_duration_min, json[QString("PhoneUsageDurationMin")]);
    m_phone_usage_duration_min_isSet = !json[QString("PhoneUsageDurationMin")].isNull() && m_phone_usage_duration_min_isValid;

    m_phone_usage_over_speed_distance_km_isValid = ::OpenAPI::fromJsonValue(m_phone_usage_over_speed_distance_km, json[QString("PhoneUsageOverSpeedDistanceKm")]);
    m_phone_usage_over_speed_distance_km_isSet = !json[QString("PhoneUsageOverSpeedDistanceKm")].isNull() && m_phone_usage_over_speed_distance_km_isValid;

    m_phone_usage_over_speed_distance_mile_isValid = ::OpenAPI::fromJsonValue(m_phone_usage_over_speed_distance_mile, json[QString("PhoneUsageOverSpeedDistanceMile")]);
    m_phone_usage_over_speed_distance_mile_isSet = !json[QString("PhoneUsageOverSpeedDistanceMile")].isNull() && m_phone_usage_over_speed_distance_mile_isValid;

    m_phone_usage_over_speed_duration_min_isValid = ::OpenAPI::fromJsonValue(m_phone_usage_over_speed_duration_min, json[QString("PhoneUsageOverSpeedDurationMin")]);
    m_phone_usage_over_speed_duration_min_isSet = !json[QString("PhoneUsageOverSpeedDurationMin")].isNull() && m_phone_usage_over_speed_duration_min_isValid;

    m_rush_hours_driving_time_isValid = ::OpenAPI::fromJsonValue(m_rush_hours_driving_time, json[QString("RushHoursDrivingTime")]);
    m_rush_hours_driving_time_isSet = !json[QString("RushHoursDrivingTime")].isNull() && m_rush_hours_driving_time_isValid;

    m_total_speeding_km_isValid = ::OpenAPI::fromJsonValue(m_total_speeding_km, json[QString("TotalSpeedingKm")]);
    m_total_speeding_km_isSet = !json[QString("TotalSpeedingKm")].isNull() && m_total_speeding_km_isValid;

    m_total_speeding_mile_isValid = ::OpenAPI::fromJsonValue(m_total_speeding_mile, json[QString("TotalSpeedingMile")]);
    m_total_speeding_mile_isSet = !json[QString("TotalSpeedingMile")].isNull() && m_total_speeding_mile_isValid;

    m_trips_count_isValid = ::OpenAPI::fromJsonValue(m_trips_count, json[QString("TripsCount")]);
    m_trips_count_isSet = !json[QString("TripsCount")].isNull() && m_trips_count_isValid;
}

QString OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::asJsonObject() const {
    QJsonObject obj;
    if (m_acceleration_count_isSet) {
        obj.insert(QString("AccelerationCount"), ::OpenAPI::toJsonValue(m_acceleration_count));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("AppId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_average_speed_kmh_isSet) {
        obj.insert(QString("AverageSpeedKmh"), ::OpenAPI::toJsonValue(m_average_speed_kmh));
    }
    if (m_average_speed_mileh_isSet) {
        obj.insert(QString("AverageSpeedMileh"), ::OpenAPI::toJsonValue(m_average_speed_mileh));
    }
    if (m_breaking_count_isSet) {
        obj.insert(QString("BreakingCount"), ::OpenAPI::toJsonValue(m_breaking_count));
    }
    if (m_company_id_isSet) {
        obj.insert(QString("CompanyId"), ::OpenAPI::toJsonValue(m_company_id));
    }
    if (m_cornering_count_isSet) {
        obj.insert(QString("CorneringCount"), ::OpenAPI::toJsonValue(m_cornering_count));
    }
    if (m_day_driving_time_isSet) {
        obj.insert(QString("DayDrivingTime"), ::OpenAPI::toJsonValue(m_day_driving_time));
    }
    if (m_device_token_isSet) {
        obj.insert(QString("DeviceToken"), ::OpenAPI::toJsonValue(m_device_token));
    }
    if (m_driver_trips_count_isSet) {
        obj.insert(QString("DriverTripsCount"), ::OpenAPI::toJsonValue(m_driver_trips_count));
    }
    if (m_driving_time_isSet) {
        obj.insert(QString("DrivingTime"), ::OpenAPI::toJsonValue(m_driving_time));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("InstanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_max_speed_kmh_isSet) {
        obj.insert(QString("MaxSpeedKmh"), ::OpenAPI::toJsonValue(m_max_speed_kmh));
    }
    if (m_max_speed_mileh_isSet) {
        obj.insert(QString("MaxSpeedMileh"), ::OpenAPI::toJsonValue(m_max_speed_mileh));
    }
    if (m_mileage_km_isSet) {
        obj.insert(QString("MileageKm"), ::OpenAPI::toJsonValue(m_mileage_km));
    }
    if (m_mileage_mile_isSet) {
        obj.insert(QString("MileageMile"), ::OpenAPI::toJsonValue(m_mileage_mile));
    }
    if (m_night_driving_time_isSet) {
        obj.insert(QString("NightDrivingTime"), ::OpenAPI::toJsonValue(m_night_driving_time));
    }
    if (m_other_trips_count_isSet) {
        obj.insert(QString("OtherTripsCount"), ::OpenAPI::toJsonValue(m_other_trips_count));
    }
    if (m_phone_usage_distance_km_isSet) {
        obj.insert(QString("PhoneUsageDistanceKm"), ::OpenAPI::toJsonValue(m_phone_usage_distance_km));
    }
    if (m_phone_usage_distance_mile_isSet) {
        obj.insert(QString("PhoneUsageDistanceMile"), ::OpenAPI::toJsonValue(m_phone_usage_distance_mile));
    }
    if (m_phone_usage_duration_min_isSet) {
        obj.insert(QString("PhoneUsageDurationMin"), ::OpenAPI::toJsonValue(m_phone_usage_duration_min));
    }
    if (m_phone_usage_over_speed_distance_km_isSet) {
        obj.insert(QString("PhoneUsageOverSpeedDistanceKm"), ::OpenAPI::toJsonValue(m_phone_usage_over_speed_distance_km));
    }
    if (m_phone_usage_over_speed_distance_mile_isSet) {
        obj.insert(QString("PhoneUsageOverSpeedDistanceMile"), ::OpenAPI::toJsonValue(m_phone_usage_over_speed_distance_mile));
    }
    if (m_phone_usage_over_speed_duration_min_isSet) {
        obj.insert(QString("PhoneUsageOverSpeedDurationMin"), ::OpenAPI::toJsonValue(m_phone_usage_over_speed_duration_min));
    }
    if (m_rush_hours_driving_time_isSet) {
        obj.insert(QString("RushHoursDrivingTime"), ::OpenAPI::toJsonValue(m_rush_hours_driving_time));
    }
    if (m_total_speeding_km_isSet) {
        obj.insert(QString("TotalSpeedingKm"), ::OpenAPI::toJsonValue(m_total_speeding_km));
    }
    if (m_total_speeding_mile_isSet) {
        obj.insert(QString("TotalSpeedingMile"), ::OpenAPI::toJsonValue(m_total_speeding_mile));
    }
    if (m_trips_count_isSet) {
        obj.insert(QString("TripsCount"), ::OpenAPI::toJsonValue(m_trips_count));
    }
    return obj;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getAccelerationCount() const {
    return m_acceleration_count;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setAccelerationCount(const double &acceleration_count) {
    m_acceleration_count = acceleration_count;
    m_acceleration_count_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_acceleration_count_Set() const{
    return m_acceleration_count_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_acceleration_count_Valid() const{
    return m_acceleration_count_isValid;
}

QString OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getAppId() const {
    return m_app_id;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_app_id_Valid() const{
    return m_app_id_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getAverageSpeedKmh() const {
    return m_average_speed_kmh;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setAverageSpeedKmh(const double &average_speed_kmh) {
    m_average_speed_kmh = average_speed_kmh;
    m_average_speed_kmh_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_average_speed_kmh_Set() const{
    return m_average_speed_kmh_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_average_speed_kmh_Valid() const{
    return m_average_speed_kmh_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getAverageSpeedMileh() const {
    return m_average_speed_mileh;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setAverageSpeedMileh(const double &average_speed_mileh) {
    m_average_speed_mileh = average_speed_mileh;
    m_average_speed_mileh_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_average_speed_mileh_Set() const{
    return m_average_speed_mileh_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_average_speed_mileh_Valid() const{
    return m_average_speed_mileh_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getBreakingCount() const {
    return m_breaking_count;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setBreakingCount(const double &breaking_count) {
    m_breaking_count = breaking_count;
    m_breaking_count_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_breaking_count_Set() const{
    return m_breaking_count_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_breaking_count_Valid() const{
    return m_breaking_count_isValid;
}

QString OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getCompanyId() const {
    return m_company_id;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setCompanyId(const QString &company_id) {
    m_company_id = company_id;
    m_company_id_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_company_id_Set() const{
    return m_company_id_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_company_id_Valid() const{
    return m_company_id_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getCorneringCount() const {
    return m_cornering_count;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setCorneringCount(const double &cornering_count) {
    m_cornering_count = cornering_count;
    m_cornering_count_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_cornering_count_Set() const{
    return m_cornering_count_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_cornering_count_Valid() const{
    return m_cornering_count_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getDayDrivingTime() const {
    return m_day_driving_time;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setDayDrivingTime(const double &day_driving_time) {
    m_day_driving_time = day_driving_time;
    m_day_driving_time_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_day_driving_time_Set() const{
    return m_day_driving_time_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_day_driving_time_Valid() const{
    return m_day_driving_time_isValid;
}

QString OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getDeviceToken() const {
    return m_device_token;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setDeviceToken(const QString &device_token) {
    m_device_token = device_token;
    m_device_token_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_device_token_Set() const{
    return m_device_token_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_device_token_Valid() const{
    return m_device_token_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getDriverTripsCount() const {
    return m_driver_trips_count;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setDriverTripsCount(const double &driver_trips_count) {
    m_driver_trips_count = driver_trips_count;
    m_driver_trips_count_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_driver_trips_count_Set() const{
    return m_driver_trips_count_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_driver_trips_count_Valid() const{
    return m_driver_trips_count_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getDrivingTime() const {
    return m_driving_time;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setDrivingTime(const double &driving_time) {
    m_driving_time = driving_time;
    m_driving_time_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_driving_time_Set() const{
    return m_driving_time_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_driving_time_Valid() const{
    return m_driving_time_isValid;
}

QString OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getInstanceId() const {
    return m_instance_id;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getMaxSpeedKmh() const {
    return m_max_speed_kmh;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setMaxSpeedKmh(const double &max_speed_kmh) {
    m_max_speed_kmh = max_speed_kmh;
    m_max_speed_kmh_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_max_speed_kmh_Set() const{
    return m_max_speed_kmh_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_max_speed_kmh_Valid() const{
    return m_max_speed_kmh_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getMaxSpeedMileh() const {
    return m_max_speed_mileh;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setMaxSpeedMileh(const double &max_speed_mileh) {
    m_max_speed_mileh = max_speed_mileh;
    m_max_speed_mileh_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_max_speed_mileh_Set() const{
    return m_max_speed_mileh_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_max_speed_mileh_Valid() const{
    return m_max_speed_mileh_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getMileageKm() const {
    return m_mileage_km;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setMileageKm(const double &mileage_km) {
    m_mileage_km = mileage_km;
    m_mileage_km_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_mileage_km_Set() const{
    return m_mileage_km_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_mileage_km_Valid() const{
    return m_mileage_km_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getMileageMile() const {
    return m_mileage_mile;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setMileageMile(const double &mileage_mile) {
    m_mileage_mile = mileage_mile;
    m_mileage_mile_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_mileage_mile_Set() const{
    return m_mileage_mile_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_mileage_mile_Valid() const{
    return m_mileage_mile_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getNightDrivingTime() const {
    return m_night_driving_time;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setNightDrivingTime(const double &night_driving_time) {
    m_night_driving_time = night_driving_time;
    m_night_driving_time_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_night_driving_time_Set() const{
    return m_night_driving_time_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_night_driving_time_Valid() const{
    return m_night_driving_time_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getOtherTripsCount() const {
    return m_other_trips_count;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setOtherTripsCount(const double &other_trips_count) {
    m_other_trips_count = other_trips_count;
    m_other_trips_count_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_other_trips_count_Set() const{
    return m_other_trips_count_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_other_trips_count_Valid() const{
    return m_other_trips_count_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getPhoneUsageDistanceKm() const {
    return m_phone_usage_distance_km;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setPhoneUsageDistanceKm(const double &phone_usage_distance_km) {
    m_phone_usage_distance_km = phone_usage_distance_km;
    m_phone_usage_distance_km_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_phone_usage_distance_km_Set() const{
    return m_phone_usage_distance_km_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_phone_usage_distance_km_Valid() const{
    return m_phone_usage_distance_km_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getPhoneUsageDistanceMile() const {
    return m_phone_usage_distance_mile;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setPhoneUsageDistanceMile(const double &phone_usage_distance_mile) {
    m_phone_usage_distance_mile = phone_usage_distance_mile;
    m_phone_usage_distance_mile_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_phone_usage_distance_mile_Set() const{
    return m_phone_usage_distance_mile_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_phone_usage_distance_mile_Valid() const{
    return m_phone_usage_distance_mile_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getPhoneUsageDurationMin() const {
    return m_phone_usage_duration_min;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setPhoneUsageDurationMin(const double &phone_usage_duration_min) {
    m_phone_usage_duration_min = phone_usage_duration_min;
    m_phone_usage_duration_min_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_phone_usage_duration_min_Set() const{
    return m_phone_usage_duration_min_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_phone_usage_duration_min_Valid() const{
    return m_phone_usage_duration_min_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getPhoneUsageOverSpeedDistanceKm() const {
    return m_phone_usage_over_speed_distance_km;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setPhoneUsageOverSpeedDistanceKm(const double &phone_usage_over_speed_distance_km) {
    m_phone_usage_over_speed_distance_km = phone_usage_over_speed_distance_km;
    m_phone_usage_over_speed_distance_km_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_phone_usage_over_speed_distance_km_Set() const{
    return m_phone_usage_over_speed_distance_km_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_phone_usage_over_speed_distance_km_Valid() const{
    return m_phone_usage_over_speed_distance_km_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getPhoneUsageOverSpeedDistanceMile() const {
    return m_phone_usage_over_speed_distance_mile;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setPhoneUsageOverSpeedDistanceMile(const double &phone_usage_over_speed_distance_mile) {
    m_phone_usage_over_speed_distance_mile = phone_usage_over_speed_distance_mile;
    m_phone_usage_over_speed_distance_mile_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_phone_usage_over_speed_distance_mile_Set() const{
    return m_phone_usage_over_speed_distance_mile_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_phone_usage_over_speed_distance_mile_Valid() const{
    return m_phone_usage_over_speed_distance_mile_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getPhoneUsageOverSpeedDurationMin() const {
    return m_phone_usage_over_speed_duration_min;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setPhoneUsageOverSpeedDurationMin(const double &phone_usage_over_speed_duration_min) {
    m_phone_usage_over_speed_duration_min = phone_usage_over_speed_duration_min;
    m_phone_usage_over_speed_duration_min_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_phone_usage_over_speed_duration_min_Set() const{
    return m_phone_usage_over_speed_duration_min_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_phone_usage_over_speed_duration_min_Valid() const{
    return m_phone_usage_over_speed_duration_min_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getRushHoursDrivingTime() const {
    return m_rush_hours_driving_time;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setRushHoursDrivingTime(const double &rush_hours_driving_time) {
    m_rush_hours_driving_time = rush_hours_driving_time;
    m_rush_hours_driving_time_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_rush_hours_driving_time_Set() const{
    return m_rush_hours_driving_time_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_rush_hours_driving_time_Valid() const{
    return m_rush_hours_driving_time_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getTotalSpeedingKm() const {
    return m_total_speeding_km;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setTotalSpeedingKm(const double &total_speeding_km) {
    m_total_speeding_km = total_speeding_km;
    m_total_speeding_km_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_total_speeding_km_Set() const{
    return m_total_speeding_km_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_total_speeding_km_Valid() const{
    return m_total_speeding_km_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getTotalSpeedingMile() const {
    return m_total_speeding_mile;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setTotalSpeedingMile(const double &total_speeding_mile) {
    m_total_speeding_mile = total_speeding_mile;
    m_total_speeding_mile_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_total_speeding_mile_Set() const{
    return m_total_speeding_mile_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_total_speeding_mile_Valid() const{
    return m_total_speeding_mile_isValid;
}

double OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::getTripsCount() const {
    return m_trips_count;
}
void OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::setTripsCount(const double &trips_count) {
    m_trips_count = trips_count;
    m_trips_count_isSet = true;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_trips_count_Set() const{
    return m_trips_count_isSet;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::is_trips_count_Valid() const{
    return m_trips_count_isValid;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acceleration_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_speed_kmh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_average_speed_mileh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_breaking_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cornering_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_driving_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_driver_trips_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_driving_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_speed_kmh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_speed_mileh_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mileage_km_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mileage_mile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_night_driving_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_trips_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_usage_distance_km_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_usage_distance_mile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_usage_duration_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_usage_over_speed_distance_km_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_usage_over_speed_distance_mile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_usage_over_speed_duration_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rush_hours_driving_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_speeding_km_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_speeding_mile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trips_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
