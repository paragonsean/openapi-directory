/**
 * Quick start - Telematics SDK
 * # Introduction We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.  * [CONTACT US](https://telematicssdk.com) * [SANDBOX](https://userdatahub.com) * [DEV.PORTAL](https://docs.telematicssdk.com) * [DEMO APP](https://raxeltelematics.com/telematics-app)   # Overview Datamotion provides telematics infrastructure for mobile applications.   Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application  There are 3 groups of methods: * 1 - user management * 2 - statistics for mobile app * 3 - statistics for back-end(s)  in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns) # Possible architecture  There are three common schemes that are used by our clients. These schemes can be combined * Collect, Process, Store (required: 1&2) * Collect, Process (required: 1& sns) * Collect (required 1&sns)   ## Collect, Process, Store ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)  ## Collect, Process ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)  ## Collect ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)  *** ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)  # Common use-cases: * Safe and efficient driving * Usage-based insurance * Safe driving assessment * Driver assessment * Trip log * Geo-analysis * Accident monitoring * Driving engagements * Location based services * Realtime Tracking and beyond  # How to start * Register a [SANDBOX ACCOUNT](https://userdatahub.com) * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials)  * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)  # Authentication To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials  Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITripsTripDetails_200_response_Result_Track_Points_inner.h
 *
 * 
 */

#ifndef OAITripsTripDetails_200_response_Result_Track_Points_inner_H
#define OAITripsTripDetails_200_response_Result_Track_Points_inner_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITripsTripDetails_200_response_Result_Track_Points_inner : public OAIObject {
public:
    OAITripsTripDetails_200_response_Result_Track_Points_inner();
    OAITripsTripDetails_200_response_Result_Track_Points_inner(QString json);
    ~OAITripsTripDetails_200_response_Result_Track_Points_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAlertType() const;
    void setAlertType(const QString &alert_type);
    bool is_alert_type_Set() const;
    bool is_alert_type_Valid() const;

    double getAlertValue() const;
    void setAlertValue(const double &alert_value);
    bool is_alert_value_Set() const;
    bool is_alert_value_Valid() const;

    bool isCornering() const;
    void setCornering(const bool &cornering);
    bool is_cornering_Set() const;
    bool is_cornering_Valid() const;

    double getCourse() const;
    void setCourse(const double &course);
    bool is_course_Set() const;
    bool is_course_Valid() const;

    double getHeight() const;
    void setHeight(const double &height);
    bool is_height_Set() const;
    bool is_height_Valid() const;

    double getId() const;
    void setId(const double &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    double getLateral() const;
    void setLateral(const double &lateral);
    bool is_lateral_Set() const;
    bool is_lateral_Valid() const;

    double getLatitude() const;
    void setLatitude(const double &latitude);
    bool is_latitude_Set() const;
    bool is_latitude_Valid() const;

    double getLongitude() const;
    void setLongitude(const double &longitude);
    bool is_longitude_Set() const;
    bool is_longitude_Valid() const;

    double getMidSpeed() const;
    void setMidSpeed(const double &mid_speed);
    bool is_mid_speed_Set() const;
    bool is_mid_speed_Valid() const;

    double getNumber() const;
    void setNumber(const double &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    bool isPhoneUsage() const;
    void setPhoneUsage(const bool &phone_usage);
    bool is_phone_usage_Set() const;
    bool is_phone_usage_Valid() const;

    QString getPointDate() const;
    void setPointDate(const QString &point_date);
    bool is_point_date_Set() const;
    bool is_point_date_Valid() const;

    double getSpeed() const;
    void setSpeed(const double &speed);
    bool is_speed_Set() const;
    bool is_speed_Valid() const;

    double getSpeedLimit() const;
    void setSpeedLimit(const double &speed_limit);
    bool is_speed_limit_Set() const;
    bool is_speed_limit_Valid() const;

    QString getSpeedType() const;
    void setSpeedType(const QString &speed_type);
    bool is_speed_type_Set() const;
    bool is_speed_type_Valid() const;

    double getTotalMeters() const;
    void setTotalMeters(const double &total_meters);
    bool is_total_meters_Set() const;
    bool is_total_meters_Valid() const;

    double getYaw() const;
    void setYaw(const double &yaw);
    bool is_yaw_Set() const;
    bool is_yaw_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_alert_type;
    bool m_alert_type_isSet;
    bool m_alert_type_isValid;

    double m_alert_value;
    bool m_alert_value_isSet;
    bool m_alert_value_isValid;

    bool m_cornering;
    bool m_cornering_isSet;
    bool m_cornering_isValid;

    double m_course;
    bool m_course_isSet;
    bool m_course_isValid;

    double m_height;
    bool m_height_isSet;
    bool m_height_isValid;

    double m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    double m_lateral;
    bool m_lateral_isSet;
    bool m_lateral_isValid;

    double m_latitude;
    bool m_latitude_isSet;
    bool m_latitude_isValid;

    double m_longitude;
    bool m_longitude_isSet;
    bool m_longitude_isValid;

    double m_mid_speed;
    bool m_mid_speed_isSet;
    bool m_mid_speed_isValid;

    double m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    bool m_phone_usage;
    bool m_phone_usage_isSet;
    bool m_phone_usage_isValid;

    QString m_point_date;
    bool m_point_date_isSet;
    bool m_point_date_isValid;

    double m_speed;
    bool m_speed_isSet;
    bool m_speed_isValid;

    double m_speed_limit;
    bool m_speed_limit_isSet;
    bool m_speed_limit_isValid;

    QString m_speed_type;
    bool m_speed_type_isSet;
    bool m_speed_type_isValid;

    double m_total_meters;
    bool m_total_meters_isSet;
    bool m_total_meters_isValid;

    double m_yaw;
    bool m_yaw_isSet;
    bool m_yaw_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITripsTripDetails_200_response_Result_Track_Points_inner)

#endif // OAITripsTripDetails_200_response_Result_Track_Points_inner_H
