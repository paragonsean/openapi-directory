/**
 * Quick start - Telematics SDK
 * # Introduction We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.  * [CONTACT US](https://telematicssdk.com) * [SANDBOX](https://userdatahub.com) * [DEV.PORTAL](https://docs.telematicssdk.com) * [DEMO APP](https://raxeltelematics.com/telematics-app)   # Overview Datamotion provides telematics infrastructure for mobile applications.   Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application  There are 3 groups of methods: * 1 - user management * 2 - statistics for mobile app * 3 - statistics for back-end(s)  in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns) # Possible architecture  There are three common schemes that are used by our clients. These schemes can be combined * Collect, Process, Store (required: 1&2) * Collect, Process (required: 1& sns) * Collect (required 1&sns)   ## Collect, Process, Store ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)  ## Collect, Process ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)  ## Collect ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)  *** ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)  # Common use-cases: * Safe and efficient driving * Usage-based insurance * Safe driving assessment * Driver assessment * Trip log * Geo-analysis * Accident monitoring * Driving engagements * Location based services * Realtime Tracking and beyond  # How to start * Register a [SANDBOX ACCOUNT](https://userdatahub.com) * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials)  * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)  # Authentication To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials  Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result.h
 *
 * 
 */

#ifndef OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result_H
#define OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result : public OAIObject {
public:
    OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result();
    OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result(QString json);
    ~OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAccelerationCount() const;
    void setAccelerationCount(const double &acceleration_count);
    bool is_acceleration_count_Set() const;
    bool is_acceleration_count_Valid() const;

    QString getAppId() const;
    void setAppId(const QString &app_id);
    bool is_app_id_Set() const;
    bool is_app_id_Valid() const;

    double getAverageSpeedKmh() const;
    void setAverageSpeedKmh(const double &average_speed_kmh);
    bool is_average_speed_kmh_Set() const;
    bool is_average_speed_kmh_Valid() const;

    double getAverageSpeedMileh() const;
    void setAverageSpeedMileh(const double &average_speed_mileh);
    bool is_average_speed_mileh_Set() const;
    bool is_average_speed_mileh_Valid() const;

    double getBreakingCount() const;
    void setBreakingCount(const double &breaking_count);
    bool is_breaking_count_Set() const;
    bool is_breaking_count_Valid() const;

    QString getCompanyId() const;
    void setCompanyId(const QString &company_id);
    bool is_company_id_Set() const;
    bool is_company_id_Valid() const;

    double getCorneringCount() const;
    void setCorneringCount(const double &cornering_count);
    bool is_cornering_count_Set() const;
    bool is_cornering_count_Valid() const;

    double getDayDrivingTime() const;
    void setDayDrivingTime(const double &day_driving_time);
    bool is_day_driving_time_Set() const;
    bool is_day_driving_time_Valid() const;

    QString getDeviceToken() const;
    void setDeviceToken(const QString &device_token);
    bool is_device_token_Set() const;
    bool is_device_token_Valid() const;

    double getDriverTripsCount() const;
    void setDriverTripsCount(const double &driver_trips_count);
    bool is_driver_trips_count_Set() const;
    bool is_driver_trips_count_Valid() const;

    double getDrivingTime() const;
    void setDrivingTime(const double &driving_time);
    bool is_driving_time_Set() const;
    bool is_driving_time_Valid() const;

    QString getInstanceId() const;
    void setInstanceId(const QString &instance_id);
    bool is_instance_id_Set() const;
    bool is_instance_id_Valid() const;

    double getMaxSpeedKmh() const;
    void setMaxSpeedKmh(const double &max_speed_kmh);
    bool is_max_speed_kmh_Set() const;
    bool is_max_speed_kmh_Valid() const;

    double getMaxSpeedMileh() const;
    void setMaxSpeedMileh(const double &max_speed_mileh);
    bool is_max_speed_mileh_Set() const;
    bool is_max_speed_mileh_Valid() const;

    double getMileageKm() const;
    void setMileageKm(const double &mileage_km);
    bool is_mileage_km_Set() const;
    bool is_mileage_km_Valid() const;

    double getMileageMile() const;
    void setMileageMile(const double &mileage_mile);
    bool is_mileage_mile_Set() const;
    bool is_mileage_mile_Valid() const;

    double getNightDrivingTime() const;
    void setNightDrivingTime(const double &night_driving_time);
    bool is_night_driving_time_Set() const;
    bool is_night_driving_time_Valid() const;

    double getOtherTripsCount() const;
    void setOtherTripsCount(const double &other_trips_count);
    bool is_other_trips_count_Set() const;
    bool is_other_trips_count_Valid() const;

    double getPhoneUsageDistanceKm() const;
    void setPhoneUsageDistanceKm(const double &phone_usage_distance_km);
    bool is_phone_usage_distance_km_Set() const;
    bool is_phone_usage_distance_km_Valid() const;

    double getPhoneUsageDistanceMile() const;
    void setPhoneUsageDistanceMile(const double &phone_usage_distance_mile);
    bool is_phone_usage_distance_mile_Set() const;
    bool is_phone_usage_distance_mile_Valid() const;

    double getPhoneUsageDurationMin() const;
    void setPhoneUsageDurationMin(const double &phone_usage_duration_min);
    bool is_phone_usage_duration_min_Set() const;
    bool is_phone_usage_duration_min_Valid() const;

    double getPhoneUsageOverSpeedDistanceKm() const;
    void setPhoneUsageOverSpeedDistanceKm(const double &phone_usage_over_speed_distance_km);
    bool is_phone_usage_over_speed_distance_km_Set() const;
    bool is_phone_usage_over_speed_distance_km_Valid() const;

    double getPhoneUsageOverSpeedDistanceMile() const;
    void setPhoneUsageOverSpeedDistanceMile(const double &phone_usage_over_speed_distance_mile);
    bool is_phone_usage_over_speed_distance_mile_Set() const;
    bool is_phone_usage_over_speed_distance_mile_Valid() const;

    double getPhoneUsageOverSpeedDurationMin() const;
    void setPhoneUsageOverSpeedDurationMin(const double &phone_usage_over_speed_duration_min);
    bool is_phone_usage_over_speed_duration_min_Set() const;
    bool is_phone_usage_over_speed_duration_min_Valid() const;

    double getRushHoursDrivingTime() const;
    void setRushHoursDrivingTime(const double &rush_hours_driving_time);
    bool is_rush_hours_driving_time_Set() const;
    bool is_rush_hours_driving_time_Valid() const;

    double getTotalSpeedingKm() const;
    void setTotalSpeedingKm(const double &total_speeding_km);
    bool is_total_speeding_km_Set() const;
    bool is_total_speeding_km_Valid() const;

    double getTotalSpeedingMile() const;
    void setTotalSpeedingMile(const double &total_speeding_mile);
    bool is_total_speeding_mile_Set() const;
    bool is_total_speeding_mile_Valid() const;

    double getTripsCount() const;
    void setTripsCount(const double &trips_count);
    bool is_trips_count_Set() const;
    bool is_trips_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_acceleration_count;
    bool m_acceleration_count_isSet;
    bool m_acceleration_count_isValid;

    QString m_app_id;
    bool m_app_id_isSet;
    bool m_app_id_isValid;

    double m_average_speed_kmh;
    bool m_average_speed_kmh_isSet;
    bool m_average_speed_kmh_isValid;

    double m_average_speed_mileh;
    bool m_average_speed_mileh_isSet;
    bool m_average_speed_mileh_isValid;

    double m_breaking_count;
    bool m_breaking_count_isSet;
    bool m_breaking_count_isValid;

    QString m_company_id;
    bool m_company_id_isSet;
    bool m_company_id_isValid;

    double m_cornering_count;
    bool m_cornering_count_isSet;
    bool m_cornering_count_isValid;

    double m_day_driving_time;
    bool m_day_driving_time_isSet;
    bool m_day_driving_time_isValid;

    QString m_device_token;
    bool m_device_token_isSet;
    bool m_device_token_isValid;

    double m_driver_trips_count;
    bool m_driver_trips_count_isSet;
    bool m_driver_trips_count_isValid;

    double m_driving_time;
    bool m_driving_time_isSet;
    bool m_driving_time_isValid;

    QString m_instance_id;
    bool m_instance_id_isSet;
    bool m_instance_id_isValid;

    double m_max_speed_kmh;
    bool m_max_speed_kmh_isSet;
    bool m_max_speed_kmh_isValid;

    double m_max_speed_mileh;
    bool m_max_speed_mileh_isSet;
    bool m_max_speed_mileh_isValid;

    double m_mileage_km;
    bool m_mileage_km_isSet;
    bool m_mileage_km_isValid;

    double m_mileage_mile;
    bool m_mileage_mile_isSet;
    bool m_mileage_mile_isValid;

    double m_night_driving_time;
    bool m_night_driving_time_isSet;
    bool m_night_driving_time_isValid;

    double m_other_trips_count;
    bool m_other_trips_count_isSet;
    bool m_other_trips_count_isValid;

    double m_phone_usage_distance_km;
    bool m_phone_usage_distance_km_isSet;
    bool m_phone_usage_distance_km_isValid;

    double m_phone_usage_distance_mile;
    bool m_phone_usage_distance_mile_isSet;
    bool m_phone_usage_distance_mile_isValid;

    double m_phone_usage_duration_min;
    bool m_phone_usage_duration_min_isSet;
    bool m_phone_usage_duration_min_isValid;

    double m_phone_usage_over_speed_distance_km;
    bool m_phone_usage_over_speed_distance_km_isSet;
    bool m_phone_usage_over_speed_distance_km_isValid;

    double m_phone_usage_over_speed_distance_mile;
    bool m_phone_usage_over_speed_distance_mile_isSet;
    bool m_phone_usage_over_speed_distance_mile_isValid;

    double m_phone_usage_over_speed_duration_min;
    bool m_phone_usage_over_speed_duration_min_isSet;
    bool m_phone_usage_over_speed_duration_min_isValid;

    double m_rush_hours_driving_time;
    bool m_rush_hours_driving_time_isSet;
    bool m_rush_hours_driving_time_isValid;

    double m_total_speeding_km;
    bool m_total_speeding_km_isSet;
    bool m_total_speeding_km_isValid;

    double m_total_speeding_mile;
    bool m_total_speeding_mile_isSet;
    bool m_total_speeding_mile_isValid;

    double m_trips_count;
    bool m_trips_count_isSet;
    bool m_trips_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result)

#endif // OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response_Result_H
