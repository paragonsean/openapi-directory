/**
 * Quick start - Telematics SDK
 * # Introduction We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.  * [CONTACT US](https://telematicssdk.com) * [SANDBOX](https://userdatahub.com) * [DEV.PORTAL](https://docs.telematicssdk.com) * [DEMO APP](https://raxeltelematics.com/telematics-app)   # Overview Datamotion provides telematics infrastructure for mobile applications.   Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application  There are 3 groups of methods: * 1 - user management * 2 - statistics for mobile app * 3 - statistics for back-end(s)  in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns) # Possible architecture  There are three common schemes that are used by our clients. These schemes can be combined * Collect, Process, Store (required: 1&2) * Collect, Process (required: 1& sns) * Collect (required 1&sns)   ## Collect, Process, Store ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)  ## Collect, Process ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)  ## Collect ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)  *** ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)  # Common use-cases: * Safe and efficient driving * Usage-based insurance * Safe driving assessment * Driver assessment * Trip log * Geo-analysis * Accident monitoring * Driving engagements * Location based services * Realtime Tracking and beyond  # How to start * Register a [SANDBOX ACCOUNT](https://userdatahub.com) * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials)  * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)  # Authentication To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials  Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITripsTripDetails_200_response_Result_Track_AddressFinishParts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::OAITripsTripDetails_200_response_Result_Track_AddressFinishParts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::OAITripsTripDetails_200_response_Result_Track_AddressFinishParts() {
    this->initializeModel();
}

OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::~OAITripsTripDetails_200_response_Result_Track_AddressFinishParts() {}

void OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_district_isSet = false;
    m_district_isValid = false;

    m_house_isSet = false;
    m_house_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;
}

void OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("City")]);
    m_city_isSet = !json[QString("City")].isNull() && m_city_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("CountryCode")]);
    m_country_code_isSet = !json[QString("CountryCode")].isNull() && m_country_code_isValid;

    m_district_isValid = ::OpenAPI::fromJsonValue(m_district, json[QString("District")]);
    m_district_isSet = !json[QString("District")].isNull() && m_district_isValid;

    m_house_isValid = ::OpenAPI::fromJsonValue(m_house, json[QString("House")]);
    m_house_isSet = !json[QString("House")].isNull() && m_house_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("PostalCode")]);
    m_postal_code_isSet = !json[QString("PostalCode")].isNull() && m_postal_code_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("Street")]);
    m_street_isSet = !json[QString("Street")].isNull() && m_street_isValid;
}

QString OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("City"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("CountryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_district_isSet) {
        obj.insert(QString("District"), ::OpenAPI::toJsonValue(m_district));
    }
    if (m_house_isSet) {
        obj.insert(QString("House"), ::OpenAPI::toJsonValue(m_house));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("PostalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_street_isSet) {
        obj.insert(QString("Street"), ::OpenAPI::toJsonValue(m_street));
    }
    return obj;
}

QString OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::getCity() const {
    return m_city;
}
void OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::is_city_Set() const{
    return m_city_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::is_city_Valid() const{
    return m_city_isValid;
}

QString OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::getCountryCode() const {
    return m_country_code;
}
void OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::getDistrict() const {
    return m_district;
}
void OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::setDistrict(const QString &district) {
    m_district = district;
    m_district_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::is_district_Set() const{
    return m_district_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::is_district_Valid() const{
    return m_district_isValid;
}

QString OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::getHouse() const {
    return m_house;
}
void OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::setHouse(const QString &house) {
    m_house = house;
    m_house_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::is_house_Set() const{
    return m_house_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::is_house_Valid() const{
    return m_house_isValid;
}

QString OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::getPostalCode() const {
    return m_postal_code;
}
void OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::getStreet() const {
    return m_street;
}
void OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::is_street_Set() const{
    return m_street_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::is_street_Valid() const{
    return m_street_isValid;
}

bool OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITripsTripDetails_200_response_Result_Track_AddressFinishParts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
