/**
 * Quick start - Telematics SDK
 * # Introduction We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.  * [CONTACT US](https://telematicssdk.com) * [SANDBOX](https://userdatahub.com) * [DEV.PORTAL](https://docs.telematicssdk.com) * [DEMO APP](https://raxeltelematics.com/telematics-app)   # Overview Datamotion provides telematics infrastructure for mobile applications.   Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application  There are 3 groups of methods: * 1 - user management * 2 - statistics for mobile app * 3 - statistics for back-end(s)  in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns) # Possible architecture  There are three common schemes that are used by our clients. These schemes can be combined * Collect, Process, Store (required: 1&2) * Collect, Process (required: 1& sns) * Collect (required 1&sns)   ## Collect, Process, Store ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)  ## Collect, Process ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)  ## Collect ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)  *** ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)  # Common use-cases: * Safe and efficient driving * Usage-based insurance * Safe driving assessment * Driver assessment * Trip log * Geo-analysis * Accident monitoring * Driving engagements * Location based services * Realtime Tracking and beyond  # How to start * Register a [SANDBOX ACCOUNT](https://userdatahub.com) * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials)  * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)  # Authentication To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials  Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITripsTripDetails_200_response_Result_Track.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITripsTripDetails_200_response_Result_Track::OAITripsTripDetails_200_response_Result_Track(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITripsTripDetails_200_response_Result_Track::OAITripsTripDetails_200_response_Result_Track() {
    this->initializeModel();
}

OAITripsTripDetails_200_response_Result_Track::~OAITripsTripDetails_200_response_Result_Track() {}

void OAITripsTripDetails_200_response_Result_Track::initializeModel() {

    m_acceleration_count_isSet = false;
    m_acceleration_count_isValid = false;

    m_address_end_isSet = false;
    m_address_end_isValid = false;

    m_address_finish_parts_isSet = false;
    m_address_finish_parts_isValid = false;

    m_address_start_isSet = false;
    m_address_start_isValid = false;

    m_address_start_parts_isSet = false;
    m_address_start_parts_isValid = false;

    m_beacon_id_isSet = false;
    m_beacon_id_isValid = false;

    m_city_finish_isSet = false;
    m_city_finish_isValid = false;

    m_city_start_isSet = false;
    m_city_start_isValid = false;

    m_deceleration_count_isSet = false;
    m_deceleration_count_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_driving_tips_isSet = false;
    m_driving_tips_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_eco_score_isSet = false;
    m_eco_score_isValid = false;

    m_eco_score_brakes_isSet = false;
    m_eco_score_brakes_isValid = false;

    m_eco_score_depreciation_isSet = false;
    m_eco_score_depreciation_isValid = false;

    m_eco_score_fuel_isSet = false;
    m_eco_score_fuel_isValid = false;

    m_eco_score_tyres_isSet = false;
    m_eco_score_tyres_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_high_over_speed_mileage_isSet = false;
    m_high_over_speed_mileage_isValid = false;

    m_mid_over_speed_mileage_isSet = false;
    m_mid_over_speed_mileage_isValid = false;

    m_origin_changed_isSet = false;
    m_origin_changed_isValid = false;

    m_phone_usage_isSet = false;
    m_phone_usage_isValid = false;

    m_points_isSet = false;
    m_points_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_rating100_isSet = false;
    m_rating100_isValid = false;

    m_rating_acceleration_isSet = false;
    m_rating_acceleration_isValid = false;

    m_rating_acceleration100_isSet = false;
    m_rating_acceleration100_isValid = false;

    m_rating_braking_isSet = false;
    m_rating_braking_isValid = false;

    m_rating_braking100_isSet = false;
    m_rating_braking100_isValid = false;

    m_rating_cornering_isSet = false;
    m_rating_cornering_isValid = false;

    m_rating_cornering100_isSet = false;
    m_rating_cornering100_isValid = false;

    m_rating_phone_distraction100_isSet = false;
    m_rating_phone_distraction100_isValid = false;

    m_rating_phone_usage_isSet = false;
    m_rating_phone_usage_isValid = false;

    m_rating_speeding_isSet = false;
    m_rating_speeding_isValid = false;

    m_rating_speeding100_isSet = false;
    m_rating_speeding100_isValid = false;

    m_rating_time_of_day_isSet = false;
    m_rating_time_of_day_isValid = false;

    m_share_type_isSet = false;
    m_share_type_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_track_origin_code_isSet = false;
    m_track_origin_code_isValid = false;
}

void OAITripsTripDetails_200_response_Result_Track::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITripsTripDetails_200_response_Result_Track::fromJsonObject(QJsonObject json) {

    m_acceleration_count_isValid = ::OpenAPI::fromJsonValue(m_acceleration_count, json[QString("AccelerationCount")]);
    m_acceleration_count_isSet = !json[QString("AccelerationCount")].isNull() && m_acceleration_count_isValid;

    m_address_end_isValid = ::OpenAPI::fromJsonValue(m_address_end, json[QString("AddressEnd")]);
    m_address_end_isSet = !json[QString("AddressEnd")].isNull() && m_address_end_isValid;

    m_address_finish_parts_isValid = ::OpenAPI::fromJsonValue(m_address_finish_parts, json[QString("AddressFinishParts")]);
    m_address_finish_parts_isSet = !json[QString("AddressFinishParts")].isNull() && m_address_finish_parts_isValid;

    m_address_start_isValid = ::OpenAPI::fromJsonValue(m_address_start, json[QString("AddressStart")]);
    m_address_start_isSet = !json[QString("AddressStart")].isNull() && m_address_start_isValid;

    m_address_start_parts_isValid = ::OpenAPI::fromJsonValue(m_address_start_parts, json[QString("AddressStartParts")]);
    m_address_start_parts_isSet = !json[QString("AddressStartParts")].isNull() && m_address_start_parts_isValid;

    m_beacon_id_isValid = ::OpenAPI::fromJsonValue(m_beacon_id, json[QString("BeaconId")]);
    m_beacon_id_isSet = !json[QString("BeaconId")].isNull() && m_beacon_id_isValid;

    m_city_finish_isValid = ::OpenAPI::fromJsonValue(m_city_finish, json[QString("CityFinish")]);
    m_city_finish_isSet = !json[QString("CityFinish")].isNull() && m_city_finish_isValid;

    m_city_start_isValid = ::OpenAPI::fromJsonValue(m_city_start, json[QString("CityStart")]);
    m_city_start_isSet = !json[QString("CityStart")].isNull() && m_city_start_isValid;

    m_deceleration_count_isValid = ::OpenAPI::fromJsonValue(m_deceleration_count, json[QString("DecelerationCount")]);
    m_deceleration_count_isSet = !json[QString("DecelerationCount")].isNull() && m_deceleration_count_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("Distance")]);
    m_distance_isSet = !json[QString("Distance")].isNull() && m_distance_isValid;

    m_driving_tips_isValid = ::OpenAPI::fromJsonValue(m_driving_tips, json[QString("DrivingTips")]);
    m_driving_tips_isSet = !json[QString("DrivingTips")].isNull() && m_driving_tips_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("Duration")]);
    m_duration_isSet = !json[QString("Duration")].isNull() && m_duration_isValid;

    m_eco_score_isValid = ::OpenAPI::fromJsonValue(m_eco_score, json[QString("EcoScore")]);
    m_eco_score_isSet = !json[QString("EcoScore")].isNull() && m_eco_score_isValid;

    m_eco_score_brakes_isValid = ::OpenAPI::fromJsonValue(m_eco_score_brakes, json[QString("EcoScoreBrakes")]);
    m_eco_score_brakes_isSet = !json[QString("EcoScoreBrakes")].isNull() && m_eco_score_brakes_isValid;

    m_eco_score_depreciation_isValid = ::OpenAPI::fromJsonValue(m_eco_score_depreciation, json[QString("EcoScoreDepreciation")]);
    m_eco_score_depreciation_isSet = !json[QString("EcoScoreDepreciation")].isNull() && m_eco_score_depreciation_isValid;

    m_eco_score_fuel_isValid = ::OpenAPI::fromJsonValue(m_eco_score_fuel, json[QString("EcoScoreFuel")]);
    m_eco_score_fuel_isSet = !json[QString("EcoScoreFuel")].isNull() && m_eco_score_fuel_isValid;

    m_eco_score_tyres_isValid = ::OpenAPI::fromJsonValue(m_eco_score_tyres, json[QString("EcoScoreTyres")]);
    m_eco_score_tyres_isSet = !json[QString("EcoScoreTyres")].isNull() && m_eco_score_tyres_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_high_over_speed_mileage_isValid = ::OpenAPI::fromJsonValue(m_high_over_speed_mileage, json[QString("HighOverSpeedMileage")]);
    m_high_over_speed_mileage_isSet = !json[QString("HighOverSpeedMileage")].isNull() && m_high_over_speed_mileage_isValid;

    m_mid_over_speed_mileage_isValid = ::OpenAPI::fromJsonValue(m_mid_over_speed_mileage, json[QString("MidOverSpeedMileage")]);
    m_mid_over_speed_mileage_isSet = !json[QString("MidOverSpeedMileage")].isNull() && m_mid_over_speed_mileage_isValid;

    m_origin_changed_isValid = ::OpenAPI::fromJsonValue(m_origin_changed, json[QString("OriginChanged")]);
    m_origin_changed_isSet = !json[QString("OriginChanged")].isNull() && m_origin_changed_isValid;

    m_phone_usage_isValid = ::OpenAPI::fromJsonValue(m_phone_usage, json[QString("PhoneUsage")]);
    m_phone_usage_isSet = !json[QString("PhoneUsage")].isNull() && m_phone_usage_isValid;

    m_points_isValid = ::OpenAPI::fromJsonValue(m_points, json[QString("Points")]);
    m_points_isSet = !json[QString("Points")].isNull() && m_points_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("Rating")]);
    m_rating_isSet = !json[QString("Rating")].isNull() && m_rating_isValid;

    m_rating100_isValid = ::OpenAPI::fromJsonValue(m_rating100, json[QString("Rating100")]);
    m_rating100_isSet = !json[QString("Rating100")].isNull() && m_rating100_isValid;

    m_rating_acceleration_isValid = ::OpenAPI::fromJsonValue(m_rating_acceleration, json[QString("RatingAcceleration")]);
    m_rating_acceleration_isSet = !json[QString("RatingAcceleration")].isNull() && m_rating_acceleration_isValid;

    m_rating_acceleration100_isValid = ::OpenAPI::fromJsonValue(m_rating_acceleration100, json[QString("RatingAcceleration100")]);
    m_rating_acceleration100_isSet = !json[QString("RatingAcceleration100")].isNull() && m_rating_acceleration100_isValid;

    m_rating_braking_isValid = ::OpenAPI::fromJsonValue(m_rating_braking, json[QString("RatingBraking")]);
    m_rating_braking_isSet = !json[QString("RatingBraking")].isNull() && m_rating_braking_isValid;

    m_rating_braking100_isValid = ::OpenAPI::fromJsonValue(m_rating_braking100, json[QString("RatingBraking100")]);
    m_rating_braking100_isSet = !json[QString("RatingBraking100")].isNull() && m_rating_braking100_isValid;

    m_rating_cornering_isValid = ::OpenAPI::fromJsonValue(m_rating_cornering, json[QString("RatingCornering")]);
    m_rating_cornering_isSet = !json[QString("RatingCornering")].isNull() && m_rating_cornering_isValid;

    m_rating_cornering100_isValid = ::OpenAPI::fromJsonValue(m_rating_cornering100, json[QString("RatingCornering100")]);
    m_rating_cornering100_isSet = !json[QString("RatingCornering100")].isNull() && m_rating_cornering100_isValid;

    m_rating_phone_distraction100_isValid = ::OpenAPI::fromJsonValue(m_rating_phone_distraction100, json[QString("RatingPhoneDistraction100")]);
    m_rating_phone_distraction100_isSet = !json[QString("RatingPhoneDistraction100")].isNull() && m_rating_phone_distraction100_isValid;

    m_rating_phone_usage_isValid = ::OpenAPI::fromJsonValue(m_rating_phone_usage, json[QString("RatingPhoneUsage")]);
    m_rating_phone_usage_isSet = !json[QString("RatingPhoneUsage")].isNull() && m_rating_phone_usage_isValid;

    m_rating_speeding_isValid = ::OpenAPI::fromJsonValue(m_rating_speeding, json[QString("RatingSpeeding")]);
    m_rating_speeding_isSet = !json[QString("RatingSpeeding")].isNull() && m_rating_speeding_isValid;

    m_rating_speeding100_isValid = ::OpenAPI::fromJsonValue(m_rating_speeding100, json[QString("RatingSpeeding100")]);
    m_rating_speeding100_isSet = !json[QString("RatingSpeeding100")].isNull() && m_rating_speeding100_isValid;

    m_rating_time_of_day_isValid = ::OpenAPI::fromJsonValue(m_rating_time_of_day, json[QString("RatingTimeOfDay")]);
    m_rating_time_of_day_isSet = !json[QString("RatingTimeOfDay")].isNull() && m_rating_time_of_day_isValid;

    m_share_type_isValid = ::OpenAPI::fromJsonValue(m_share_type, json[QString("ShareType")]);
    m_share_type_isSet = !json[QString("ShareType")].isNull() && m_share_type_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_track_origin_code_isValid = ::OpenAPI::fromJsonValue(m_track_origin_code, json[QString("TrackOriginCode")]);
    m_track_origin_code_isSet = !json[QString("TrackOriginCode")].isNull() && m_track_origin_code_isValid;
}

QString OAITripsTripDetails_200_response_Result_Track::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITripsTripDetails_200_response_Result_Track::asJsonObject() const {
    QJsonObject obj;
    if (m_acceleration_count_isSet) {
        obj.insert(QString("AccelerationCount"), ::OpenAPI::toJsonValue(m_acceleration_count));
    }
    if (m_address_end_isSet) {
        obj.insert(QString("AddressEnd"), ::OpenAPI::toJsonValue(m_address_end));
    }
    if (m_address_finish_parts.isSet()) {
        obj.insert(QString("AddressFinishParts"), ::OpenAPI::toJsonValue(m_address_finish_parts));
    }
    if (m_address_start_isSet) {
        obj.insert(QString("AddressStart"), ::OpenAPI::toJsonValue(m_address_start));
    }
    if (m_address_start_parts.isSet()) {
        obj.insert(QString("AddressStartParts"), ::OpenAPI::toJsonValue(m_address_start_parts));
    }
    if (m_beacon_id_isSet) {
        obj.insert(QString("BeaconId"), ::OpenAPI::toJsonValue(m_beacon_id));
    }
    if (m_city_finish_isSet) {
        obj.insert(QString("CityFinish"), ::OpenAPI::toJsonValue(m_city_finish));
    }
    if (m_city_start_isSet) {
        obj.insert(QString("CityStart"), ::OpenAPI::toJsonValue(m_city_start));
    }
    if (m_deceleration_count_isSet) {
        obj.insert(QString("DecelerationCount"), ::OpenAPI::toJsonValue(m_deceleration_count));
    }
    if (m_distance_isSet) {
        obj.insert(QString("Distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_driving_tips_isSet) {
        obj.insert(QString("DrivingTips"), ::OpenAPI::toJsonValue(m_driving_tips));
    }
    if (m_duration_isSet) {
        obj.insert(QString("Duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_eco_score_isSet) {
        obj.insert(QString("EcoScore"), ::OpenAPI::toJsonValue(m_eco_score));
    }
    if (m_eco_score_brakes_isSet) {
        obj.insert(QString("EcoScoreBrakes"), ::OpenAPI::toJsonValue(m_eco_score_brakes));
    }
    if (m_eco_score_depreciation_isSet) {
        obj.insert(QString("EcoScoreDepreciation"), ::OpenAPI::toJsonValue(m_eco_score_depreciation));
    }
    if (m_eco_score_fuel_isSet) {
        obj.insert(QString("EcoScoreFuel"), ::OpenAPI::toJsonValue(m_eco_score_fuel));
    }
    if (m_eco_score_tyres_isSet) {
        obj.insert(QString("EcoScoreTyres"), ::OpenAPI::toJsonValue(m_eco_score_tyres));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_high_over_speed_mileage_isSet) {
        obj.insert(QString("HighOverSpeedMileage"), ::OpenAPI::toJsonValue(m_high_over_speed_mileage));
    }
    if (m_mid_over_speed_mileage_isSet) {
        obj.insert(QString("MidOverSpeedMileage"), ::OpenAPI::toJsonValue(m_mid_over_speed_mileage));
    }
    if (m_origin_changed_isSet) {
        obj.insert(QString("OriginChanged"), ::OpenAPI::toJsonValue(m_origin_changed));
    }
    if (m_phone_usage_isSet) {
        obj.insert(QString("PhoneUsage"), ::OpenAPI::toJsonValue(m_phone_usage));
    }
    if (m_points.size() > 0) {
        obj.insert(QString("Points"), ::OpenAPI::toJsonValue(m_points));
    }
    if (m_rating_isSet) {
        obj.insert(QString("Rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_rating100_isSet) {
        obj.insert(QString("Rating100"), ::OpenAPI::toJsonValue(m_rating100));
    }
    if (m_rating_acceleration_isSet) {
        obj.insert(QString("RatingAcceleration"), ::OpenAPI::toJsonValue(m_rating_acceleration));
    }
    if (m_rating_acceleration100_isSet) {
        obj.insert(QString("RatingAcceleration100"), ::OpenAPI::toJsonValue(m_rating_acceleration100));
    }
    if (m_rating_braking_isSet) {
        obj.insert(QString("RatingBraking"), ::OpenAPI::toJsonValue(m_rating_braking));
    }
    if (m_rating_braking100_isSet) {
        obj.insert(QString("RatingBraking100"), ::OpenAPI::toJsonValue(m_rating_braking100));
    }
    if (m_rating_cornering_isSet) {
        obj.insert(QString("RatingCornering"), ::OpenAPI::toJsonValue(m_rating_cornering));
    }
    if (m_rating_cornering100_isSet) {
        obj.insert(QString("RatingCornering100"), ::OpenAPI::toJsonValue(m_rating_cornering100));
    }
    if (m_rating_phone_distraction100_isSet) {
        obj.insert(QString("RatingPhoneDistraction100"), ::OpenAPI::toJsonValue(m_rating_phone_distraction100));
    }
    if (m_rating_phone_usage_isSet) {
        obj.insert(QString("RatingPhoneUsage"), ::OpenAPI::toJsonValue(m_rating_phone_usage));
    }
    if (m_rating_speeding_isSet) {
        obj.insert(QString("RatingSpeeding"), ::OpenAPI::toJsonValue(m_rating_speeding));
    }
    if (m_rating_speeding100_isSet) {
        obj.insert(QString("RatingSpeeding100"), ::OpenAPI::toJsonValue(m_rating_speeding100));
    }
    if (m_rating_time_of_day_isSet) {
        obj.insert(QString("RatingTimeOfDay"), ::OpenAPI::toJsonValue(m_rating_time_of_day));
    }
    if (m_share_type_isSet) {
        obj.insert(QString("ShareType"), ::OpenAPI::toJsonValue(m_share_type));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_track_origin_code_isSet) {
        obj.insert(QString("TrackOriginCode"), ::OpenAPI::toJsonValue(m_track_origin_code));
    }
    return obj;
}

double OAITripsTripDetails_200_response_Result_Track::getAccelerationCount() const {
    return m_acceleration_count;
}
void OAITripsTripDetails_200_response_Result_Track::setAccelerationCount(const double &acceleration_count) {
    m_acceleration_count = acceleration_count;
    m_acceleration_count_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_acceleration_count_Set() const{
    return m_acceleration_count_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_acceleration_count_Valid() const{
    return m_acceleration_count_isValid;
}

QString OAITripsTripDetails_200_response_Result_Track::getAddressEnd() const {
    return m_address_end;
}
void OAITripsTripDetails_200_response_Result_Track::setAddressEnd(const QString &address_end) {
    m_address_end = address_end;
    m_address_end_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_address_end_Set() const{
    return m_address_end_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_address_end_Valid() const{
    return m_address_end_isValid;
}

OAITripsTripDetails_200_response_Result_Track_AddressFinishParts OAITripsTripDetails_200_response_Result_Track::getAddressFinishParts() const {
    return m_address_finish_parts;
}
void OAITripsTripDetails_200_response_Result_Track::setAddressFinishParts(const OAITripsTripDetails_200_response_Result_Track_AddressFinishParts &address_finish_parts) {
    m_address_finish_parts = address_finish_parts;
    m_address_finish_parts_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_address_finish_parts_Set() const{
    return m_address_finish_parts_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_address_finish_parts_Valid() const{
    return m_address_finish_parts_isValid;
}

QString OAITripsTripDetails_200_response_Result_Track::getAddressStart() const {
    return m_address_start;
}
void OAITripsTripDetails_200_response_Result_Track::setAddressStart(const QString &address_start) {
    m_address_start = address_start;
    m_address_start_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_address_start_Set() const{
    return m_address_start_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_address_start_Valid() const{
    return m_address_start_isValid;
}

OAITripsTripDetails_200_response_Result_Track_AddressFinishParts OAITripsTripDetails_200_response_Result_Track::getAddressStartParts() const {
    return m_address_start_parts;
}
void OAITripsTripDetails_200_response_Result_Track::setAddressStartParts(const OAITripsTripDetails_200_response_Result_Track_AddressFinishParts &address_start_parts) {
    m_address_start_parts = address_start_parts;
    m_address_start_parts_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_address_start_parts_Set() const{
    return m_address_start_parts_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_address_start_parts_Valid() const{
    return m_address_start_parts_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getBeaconId() const {
    return m_beacon_id;
}
void OAITripsTripDetails_200_response_Result_Track::setBeaconId(const double &beacon_id) {
    m_beacon_id = beacon_id;
    m_beacon_id_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_beacon_id_Set() const{
    return m_beacon_id_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_beacon_id_Valid() const{
    return m_beacon_id_isValid;
}

QString OAITripsTripDetails_200_response_Result_Track::getCityFinish() const {
    return m_city_finish;
}
void OAITripsTripDetails_200_response_Result_Track::setCityFinish(const QString &city_finish) {
    m_city_finish = city_finish;
    m_city_finish_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_city_finish_Set() const{
    return m_city_finish_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_city_finish_Valid() const{
    return m_city_finish_isValid;
}

QString OAITripsTripDetails_200_response_Result_Track::getCityStart() const {
    return m_city_start;
}
void OAITripsTripDetails_200_response_Result_Track::setCityStart(const QString &city_start) {
    m_city_start = city_start;
    m_city_start_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_city_start_Set() const{
    return m_city_start_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_city_start_Valid() const{
    return m_city_start_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getDecelerationCount() const {
    return m_deceleration_count;
}
void OAITripsTripDetails_200_response_Result_Track::setDecelerationCount(const double &deceleration_count) {
    m_deceleration_count = deceleration_count;
    m_deceleration_count_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_deceleration_count_Set() const{
    return m_deceleration_count_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_deceleration_count_Valid() const{
    return m_deceleration_count_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getDistance() const {
    return m_distance;
}
void OAITripsTripDetails_200_response_Result_Track::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_distance_Valid() const{
    return m_distance_isValid;
}

QString OAITripsTripDetails_200_response_Result_Track::getDrivingTips() const {
    return m_driving_tips;
}
void OAITripsTripDetails_200_response_Result_Track::setDrivingTips(const QString &driving_tips) {
    m_driving_tips = driving_tips;
    m_driving_tips_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_driving_tips_Set() const{
    return m_driving_tips_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_driving_tips_Valid() const{
    return m_driving_tips_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getDuration() const {
    return m_duration;
}
void OAITripsTripDetails_200_response_Result_Track::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_duration_Valid() const{
    return m_duration_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getEcoScore() const {
    return m_eco_score;
}
void OAITripsTripDetails_200_response_Result_Track::setEcoScore(const double &eco_score) {
    m_eco_score = eco_score;
    m_eco_score_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_eco_score_Set() const{
    return m_eco_score_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_eco_score_Valid() const{
    return m_eco_score_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getEcoScoreBrakes() const {
    return m_eco_score_brakes;
}
void OAITripsTripDetails_200_response_Result_Track::setEcoScoreBrakes(const double &eco_score_brakes) {
    m_eco_score_brakes = eco_score_brakes;
    m_eco_score_brakes_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_eco_score_brakes_Set() const{
    return m_eco_score_brakes_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_eco_score_brakes_Valid() const{
    return m_eco_score_brakes_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getEcoScoreDepreciation() const {
    return m_eco_score_depreciation;
}
void OAITripsTripDetails_200_response_Result_Track::setEcoScoreDepreciation(const double &eco_score_depreciation) {
    m_eco_score_depreciation = eco_score_depreciation;
    m_eco_score_depreciation_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_eco_score_depreciation_Set() const{
    return m_eco_score_depreciation_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_eco_score_depreciation_Valid() const{
    return m_eco_score_depreciation_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getEcoScoreFuel() const {
    return m_eco_score_fuel;
}
void OAITripsTripDetails_200_response_Result_Track::setEcoScoreFuel(const double &eco_score_fuel) {
    m_eco_score_fuel = eco_score_fuel;
    m_eco_score_fuel_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_eco_score_fuel_Set() const{
    return m_eco_score_fuel_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_eco_score_fuel_Valid() const{
    return m_eco_score_fuel_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getEcoScoreTyres() const {
    return m_eco_score_tyres;
}
void OAITripsTripDetails_200_response_Result_Track::setEcoScoreTyres(const double &eco_score_tyres) {
    m_eco_score_tyres = eco_score_tyres;
    m_eco_score_tyres_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_eco_score_tyres_Set() const{
    return m_eco_score_tyres_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_eco_score_tyres_Valid() const{
    return m_eco_score_tyres_isValid;
}

QString OAITripsTripDetails_200_response_Result_Track::getEndDate() const {
    return m_end_date;
}
void OAITripsTripDetails_200_response_Result_Track::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_end_date_Valid() const{
    return m_end_date_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getHighOverSpeedMileage() const {
    return m_high_over_speed_mileage;
}
void OAITripsTripDetails_200_response_Result_Track::setHighOverSpeedMileage(const double &high_over_speed_mileage) {
    m_high_over_speed_mileage = high_over_speed_mileage;
    m_high_over_speed_mileage_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_high_over_speed_mileage_Set() const{
    return m_high_over_speed_mileage_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_high_over_speed_mileage_Valid() const{
    return m_high_over_speed_mileage_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getMidOverSpeedMileage() const {
    return m_mid_over_speed_mileage;
}
void OAITripsTripDetails_200_response_Result_Track::setMidOverSpeedMileage(const double &mid_over_speed_mileage) {
    m_mid_over_speed_mileage = mid_over_speed_mileage;
    m_mid_over_speed_mileage_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_mid_over_speed_mileage_Set() const{
    return m_mid_over_speed_mileage_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_mid_over_speed_mileage_Valid() const{
    return m_mid_over_speed_mileage_isValid;
}

bool OAITripsTripDetails_200_response_Result_Track::isOriginChanged() const {
    return m_origin_changed;
}
void OAITripsTripDetails_200_response_Result_Track::setOriginChanged(const bool &origin_changed) {
    m_origin_changed = origin_changed;
    m_origin_changed_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_origin_changed_Set() const{
    return m_origin_changed_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_origin_changed_Valid() const{
    return m_origin_changed_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getPhoneUsage() const {
    return m_phone_usage;
}
void OAITripsTripDetails_200_response_Result_Track::setPhoneUsage(const double &phone_usage) {
    m_phone_usage = phone_usage;
    m_phone_usage_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_phone_usage_Set() const{
    return m_phone_usage_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_phone_usage_Valid() const{
    return m_phone_usage_isValid;
}

QList<OAITripsTripDetails_200_response_Result_Track_Points_inner> OAITripsTripDetails_200_response_Result_Track::getPoints() const {
    return m_points;
}
void OAITripsTripDetails_200_response_Result_Track::setPoints(const QList<OAITripsTripDetails_200_response_Result_Track_Points_inner> &points) {
    m_points = points;
    m_points_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_points_Set() const{
    return m_points_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_points_Valid() const{
    return m_points_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getRating() const {
    return m_rating;
}
void OAITripsTripDetails_200_response_Result_Track::setRating(const double &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_Valid() const{
    return m_rating_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getRating100() const {
    return m_rating100;
}
void OAITripsTripDetails_200_response_Result_Track::setRating100(const double &rating100) {
    m_rating100 = rating100;
    m_rating100_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating100_Set() const{
    return m_rating100_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating100_Valid() const{
    return m_rating100_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getRatingAcceleration() const {
    return m_rating_acceleration;
}
void OAITripsTripDetails_200_response_Result_Track::setRatingAcceleration(const double &rating_acceleration) {
    m_rating_acceleration = rating_acceleration;
    m_rating_acceleration_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_acceleration_Set() const{
    return m_rating_acceleration_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_acceleration_Valid() const{
    return m_rating_acceleration_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getRatingAcceleration100() const {
    return m_rating_acceleration100;
}
void OAITripsTripDetails_200_response_Result_Track::setRatingAcceleration100(const double &rating_acceleration100) {
    m_rating_acceleration100 = rating_acceleration100;
    m_rating_acceleration100_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_acceleration100_Set() const{
    return m_rating_acceleration100_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_acceleration100_Valid() const{
    return m_rating_acceleration100_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getRatingBraking() const {
    return m_rating_braking;
}
void OAITripsTripDetails_200_response_Result_Track::setRatingBraking(const double &rating_braking) {
    m_rating_braking = rating_braking;
    m_rating_braking_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_braking_Set() const{
    return m_rating_braking_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_braking_Valid() const{
    return m_rating_braking_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getRatingBraking100() const {
    return m_rating_braking100;
}
void OAITripsTripDetails_200_response_Result_Track::setRatingBraking100(const double &rating_braking100) {
    m_rating_braking100 = rating_braking100;
    m_rating_braking100_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_braking100_Set() const{
    return m_rating_braking100_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_braking100_Valid() const{
    return m_rating_braking100_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getRatingCornering() const {
    return m_rating_cornering;
}
void OAITripsTripDetails_200_response_Result_Track::setRatingCornering(const double &rating_cornering) {
    m_rating_cornering = rating_cornering;
    m_rating_cornering_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_cornering_Set() const{
    return m_rating_cornering_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_cornering_Valid() const{
    return m_rating_cornering_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getRatingCornering100() const {
    return m_rating_cornering100;
}
void OAITripsTripDetails_200_response_Result_Track::setRatingCornering100(const double &rating_cornering100) {
    m_rating_cornering100 = rating_cornering100;
    m_rating_cornering100_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_cornering100_Set() const{
    return m_rating_cornering100_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_cornering100_Valid() const{
    return m_rating_cornering100_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getRatingPhoneDistraction100() const {
    return m_rating_phone_distraction100;
}
void OAITripsTripDetails_200_response_Result_Track::setRatingPhoneDistraction100(const double &rating_phone_distraction100) {
    m_rating_phone_distraction100 = rating_phone_distraction100;
    m_rating_phone_distraction100_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_phone_distraction100_Set() const{
    return m_rating_phone_distraction100_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_phone_distraction100_Valid() const{
    return m_rating_phone_distraction100_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getRatingPhoneUsage() const {
    return m_rating_phone_usage;
}
void OAITripsTripDetails_200_response_Result_Track::setRatingPhoneUsage(const double &rating_phone_usage) {
    m_rating_phone_usage = rating_phone_usage;
    m_rating_phone_usage_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_phone_usage_Set() const{
    return m_rating_phone_usage_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_phone_usage_Valid() const{
    return m_rating_phone_usage_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getRatingSpeeding() const {
    return m_rating_speeding;
}
void OAITripsTripDetails_200_response_Result_Track::setRatingSpeeding(const double &rating_speeding) {
    m_rating_speeding = rating_speeding;
    m_rating_speeding_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_speeding_Set() const{
    return m_rating_speeding_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_speeding_Valid() const{
    return m_rating_speeding_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getRatingSpeeding100() const {
    return m_rating_speeding100;
}
void OAITripsTripDetails_200_response_Result_Track::setRatingSpeeding100(const double &rating_speeding100) {
    m_rating_speeding100 = rating_speeding100;
    m_rating_speeding100_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_speeding100_Set() const{
    return m_rating_speeding100_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_speeding100_Valid() const{
    return m_rating_speeding100_isValid;
}

double OAITripsTripDetails_200_response_Result_Track::getRatingTimeOfDay() const {
    return m_rating_time_of_day;
}
void OAITripsTripDetails_200_response_Result_Track::setRatingTimeOfDay(const double &rating_time_of_day) {
    m_rating_time_of_day = rating_time_of_day;
    m_rating_time_of_day_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_time_of_day_Set() const{
    return m_rating_time_of_day_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_rating_time_of_day_Valid() const{
    return m_rating_time_of_day_isValid;
}

QString OAITripsTripDetails_200_response_Result_Track::getShareType() const {
    return m_share_type;
}
void OAITripsTripDetails_200_response_Result_Track::setShareType(const QString &share_type) {
    m_share_type = share_type;
    m_share_type_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_share_type_Set() const{
    return m_share_type_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_share_type_Valid() const{
    return m_share_type_isValid;
}

QString OAITripsTripDetails_200_response_Result_Track::getStartDate() const {
    return m_start_date;
}
void OAITripsTripDetails_200_response_Result_Track::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAITripsTripDetails_200_response_Result_Track::getStatus() const {
    return m_status;
}
void OAITripsTripDetails_200_response_Result_Track::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_status_Set() const{
    return m_status_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITripsTripDetails_200_response_Result_Track::getTrackOriginCode() const {
    return m_track_origin_code;
}
void OAITripsTripDetails_200_response_Result_Track::setTrackOriginCode(const QString &track_origin_code) {
    m_track_origin_code = track_origin_code;
    m_track_origin_code_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track::is_track_origin_code_Set() const{
    return m_track_origin_code_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track::is_track_origin_code_Valid() const{
    return m_track_origin_code_isValid;
}

bool OAITripsTripDetails_200_response_Result_Track::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acceleration_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_finish_parts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_start_parts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_beacon_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_finish_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deceleration_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_driving_tips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eco_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eco_score_brakes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eco_score_depreciation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eco_score_fuel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eco_score_tyres_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_over_speed_mileage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mid_over_speed_mileage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_changed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating100_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_acceleration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_acceleration100_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_braking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_braking100_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_cornering_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_cornering100_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_phone_distraction100_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_phone_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_speeding_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_speeding100_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating_time_of_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_origin_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITripsTripDetails_200_response_Result_Track::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
