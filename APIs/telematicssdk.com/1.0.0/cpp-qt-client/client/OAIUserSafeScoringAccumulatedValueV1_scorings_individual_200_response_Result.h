/**
 * Quick start - Telematics SDK
 * # Introduction We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.  * [CONTACT US](https://telematicssdk.com) * [SANDBOX](https://userdatahub.com) * [DEV.PORTAL](https://docs.telematicssdk.com) * [DEMO APP](https://raxeltelematics.com/telematics-app)   # Overview Datamotion provides telematics infrastructure for mobile applications.   Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application  There are 3 groups of methods: * 1 - user management * 2 - statistics for mobile app * 3 - statistics for back-end(s)  in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns) # Possible architecture  There are three common schemes that are used by our clients. These schemes can be combined * Collect, Process, Store (required: 1&2) * Collect, Process (required: 1& sns) * Collect (required 1&sns)   ## Collect, Process, Store ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)  ## Collect, Process ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)  ## Collect ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)  *** ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)  # Common use-cases: * Safe and efficient driving * Usage-based insurance * Safe driving assessment * Driver assessment * Trip log * Geo-analysis * Accident monitoring * Driving engagements * Location based services * Realtime Tracking and beyond  # How to start * Register a [SANDBOX ACCOUNT](https://userdatahub.com) * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials)  * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)  # Authentication To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials  Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUserSafeScoringAccumulatedValueV1_scorings_individual_200_response_Result.h
 *
 * 
 */

#ifndef OAIUserSafeScoringAccumulatedValueV1_scorings_individual_200_response_Result_H
#define OAIUserSafeScoringAccumulatedValueV1_scorings_individual_200_response_Result_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIUserSafeScoringAccumulatedValueV1_scorings_individual_200_response_Result : public OAIObject {
public:
    OAIUserSafeScoringAccumulatedValueV1_scorings_individual_200_response_Result();
    OAIUserSafeScoringAccumulatedValueV1_scorings_individual_200_response_Result(QString json);
    ~OAIUserSafeScoringAccumulatedValueV1_scorings_individual_200_response_Result() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAccelerationScore() const;
    void setAccelerationScore(const double &acceleration_score);
    bool is_acceleration_score_Set() const;
    bool is_acceleration_score_Valid() const;

    QString getAppId() const;
    void setAppId(const QString &app_id);
    bool is_app_id_Set() const;
    bool is_app_id_Valid() const;

    double getBrakingScore() const;
    void setBrakingScore(const double &braking_score);
    bool is_braking_score_Set() const;
    bool is_braking_score_Valid() const;

    QString getCompanyId() const;
    void setCompanyId(const QString &company_id);
    bool is_company_id_Set() const;
    bool is_company_id_Valid() const;

    double getCorneringScore() const;
    void setCorneringScore(const double &cornering_score);
    bool is_cornering_score_Set() const;
    bool is_cornering_score_Valid() const;

    QString getDeviceToken() const;
    void setDeviceToken(const QString &device_token);
    bool is_device_token_Set() const;
    bool is_device_token_Valid() const;

    double getDistractedScore() const;
    void setDistractedScore(const double &distracted_score);
    bool is_distracted_score_Set() const;
    bool is_distracted_score_Valid() const;

    QString getInstanceId() const;
    void setInstanceId(const QString &instance_id);
    bool is_instance_id_Set() const;
    bool is_instance_id_Valid() const;

    double getOverallScore() const;
    void setOverallScore(const double &overall_score);
    bool is_overall_score_Set() const;
    bool is_overall_score_Valid() const;

    double getSpeedingScore() const;
    void setSpeedingScore(const double &speeding_score);
    bool is_speeding_score_Set() const;
    bool is_speeding_score_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_acceleration_score;
    bool m_acceleration_score_isSet;
    bool m_acceleration_score_isValid;

    QString m_app_id;
    bool m_app_id_isSet;
    bool m_app_id_isValid;

    double m_braking_score;
    bool m_braking_score_isSet;
    bool m_braking_score_isValid;

    QString m_company_id;
    bool m_company_id_isSet;
    bool m_company_id_isValid;

    double m_cornering_score;
    bool m_cornering_score_isSet;
    bool m_cornering_score_isValid;

    QString m_device_token;
    bool m_device_token_isSet;
    bool m_device_token_isValid;

    double m_distracted_score;
    bool m_distracted_score_isSet;
    bool m_distracted_score_isValid;

    QString m_instance_id;
    bool m_instance_id_isSet;
    bool m_instance_id_isValid;

    double m_overall_score;
    bool m_overall_score_isSet;
    bool m_overall_score_isValid;

    double m_speeding_score;
    bool m_speeding_score_isSet;
    bool m_speeding_score_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUserSafeScoringAccumulatedValueV1_scorings_individual_200_response_Result)

#endif // OAIUserSafeScoringAccumulatedValueV1_scorings_individual_200_response_Result_H
