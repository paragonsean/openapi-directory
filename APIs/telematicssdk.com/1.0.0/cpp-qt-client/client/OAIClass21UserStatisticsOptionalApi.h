/**
 * Quick start - Telematics SDK
 * # Introduction We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.  * [CONTACT US](https://telematicssdk.com) * [SANDBOX](https://userdatahub.com) * [DEV.PORTAL](https://docs.telematicssdk.com) * [DEMO APP](https://raxeltelematics.com/telematics-app)   # Overview Datamotion provides telematics infrastructure for mobile applications.   Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application  There are 3 groups of methods: * 1 - user management * 2 - statistics for mobile app * 3 - statistics for back-end(s)  in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns) # Possible architecture  There are three common schemes that are used by our clients. These schemes can be combined * Collect, Process, Store (required: 1&2) * Collect, Process (required: 1& sns) * Collect (required 1&sns)   ## Collect, Process, Store ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)  ## Collect, Process ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)  ## Collect ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)  *** ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)  # Common use-cases: * Safe and efficient driving * Usage-based insurance * Safe driving assessment * Driver assessment * Trip log * Geo-analysis * Accident monitoring * Driving engagements * Location based services * Realtime Tracking and beyond  # How to start * Register a [SANDBOX ACCOUNT](https://userdatahub.com) * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials)  * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)  # Authentication To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials  Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClass21UserStatisticsOptionalApi_H
#define OAI_OAIClass21UserStatisticsOptionalApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIUserStatisticeDailyValueV1_statistics_individual_daily_200_response.h"
#include "OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClass21UserStatisticsOptionalApi : public QObject {
    Q_OBJECT

public:
    OAIClass21UserStatisticsOptionalApi(const int timeOut = 0);
    ~OAIClass21UserStatisticsOptionalApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    */
    virtual void userStatisticeDailyValueV1_statistics_individual_daily(const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start_date QString [optional]
    * @param[in]  end_date QString [optional]
    */
    virtual void userStatisticsAccumulatedValue_v1_statistics_individual(const ::OpenAPI::OptionalParam<QString> &start_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_date = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void userStatisticeDailyValueV1_statistics_individual_dailyCallback(OAIHttpRequestWorker *worker);
    void userStatisticsAccumulatedValue_v1_statistics_individualCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void userStatisticeDailyValueV1_statistics_individual_dailySignal(OAIUserStatisticeDailyValueV1_statistics_individual_daily_200_response summary);
    void userStatisticsAccumulatedValue_v1_statistics_individualSignal(OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response summary);


    void userStatisticeDailyValueV1_statistics_individual_dailySignalFull(OAIHttpRequestWorker *worker, OAIUserStatisticeDailyValueV1_statistics_individual_daily_200_response summary);
    void userStatisticsAccumulatedValue_v1_statistics_individualSignalFull(OAIHttpRequestWorker *worker, OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response summary);

    Q_DECL_DEPRECATED_X("Use userStatisticeDailyValueV1_statistics_individual_dailySignalError() instead")
    void userStatisticeDailyValueV1_statistics_individual_dailySignalE(OAIUserStatisticeDailyValueV1_statistics_individual_daily_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userStatisticeDailyValueV1_statistics_individual_dailySignalError(OAIUserStatisticeDailyValueV1_statistics_individual_daily_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userStatisticsAccumulatedValue_v1_statistics_individualSignalError() instead")
    void userStatisticsAccumulatedValue_v1_statistics_individualSignalE(OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void userStatisticsAccumulatedValue_v1_statistics_individualSignalError(OAIUserStatisticsAccumulatedValue_v1_statistics_individual_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use userStatisticeDailyValueV1_statistics_individual_dailySignalErrorFull() instead")
    void userStatisticeDailyValueV1_statistics_individual_dailySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userStatisticeDailyValueV1_statistics_individual_dailySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use userStatisticsAccumulatedValue_v1_statistics_individualSignalErrorFull() instead")
    void userStatisticsAccumulatedValue_v1_statistics_individualSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void userStatisticsAccumulatedValue_v1_statistics_individualSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
