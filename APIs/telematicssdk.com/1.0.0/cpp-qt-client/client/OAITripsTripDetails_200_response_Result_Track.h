/**
 * Quick start - Telematics SDK
 * # Introduction We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.  * [CONTACT US](https://telematicssdk.com) * [SANDBOX](https://userdatahub.com) * [DEV.PORTAL](https://docs.telematicssdk.com) * [DEMO APP](https://raxeltelematics.com/telematics-app)   # Overview Datamotion provides telematics infrastructure for mobile applications.   Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application  There are 3 groups of methods: * 1 - user management * 2 - statistics for mobile app * 3 - statistics for back-end(s)  in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns) # Possible architecture  There are three common schemes that are used by our clients. These schemes can be combined * Collect, Process, Store (required: 1&2) * Collect, Process (required: 1& sns) * Collect (required 1&sns)   ## Collect, Process, Store ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)  ## Collect, Process ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)  ## Collect ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)  *** ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)  # Common use-cases: * Safe and efficient driving * Usage-based insurance * Safe driving assessment * Driver assessment * Trip log * Geo-analysis * Accident monitoring * Driving engagements * Location based services * Realtime Tracking and beyond  # How to start * Register a [SANDBOX ACCOUNT](https://userdatahub.com) * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials)  * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)  # Authentication To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials  Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITripsTripDetails_200_response_Result_Track.h
 *
 * 
 */

#ifndef OAITripsTripDetails_200_response_Result_Track_H
#define OAITripsTripDetails_200_response_Result_Track_H

#include <QJsonObject>

#include "OAITripsTripDetails_200_response_Result_Track_AddressFinishParts.h"
#include "OAITripsTripDetails_200_response_Result_Track_Points_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITripsTripDetails_200_response_Result_Track_AddressFinishParts;
class OAITripsTripDetails_200_response_Result_Track_Points_inner;

class OAITripsTripDetails_200_response_Result_Track : public OAIObject {
public:
    OAITripsTripDetails_200_response_Result_Track();
    OAITripsTripDetails_200_response_Result_Track(QString json);
    ~OAITripsTripDetails_200_response_Result_Track() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAccelerationCount() const;
    void setAccelerationCount(const double &acceleration_count);
    bool is_acceleration_count_Set() const;
    bool is_acceleration_count_Valid() const;

    QString getAddressEnd() const;
    void setAddressEnd(const QString &address_end);
    bool is_address_end_Set() const;
    bool is_address_end_Valid() const;

    OAITripsTripDetails_200_response_Result_Track_AddressFinishParts getAddressFinishParts() const;
    void setAddressFinishParts(const OAITripsTripDetails_200_response_Result_Track_AddressFinishParts &address_finish_parts);
    bool is_address_finish_parts_Set() const;
    bool is_address_finish_parts_Valid() const;

    QString getAddressStart() const;
    void setAddressStart(const QString &address_start);
    bool is_address_start_Set() const;
    bool is_address_start_Valid() const;

    OAITripsTripDetails_200_response_Result_Track_AddressFinishParts getAddressStartParts() const;
    void setAddressStartParts(const OAITripsTripDetails_200_response_Result_Track_AddressFinishParts &address_start_parts);
    bool is_address_start_parts_Set() const;
    bool is_address_start_parts_Valid() const;

    double getBeaconId() const;
    void setBeaconId(const double &beacon_id);
    bool is_beacon_id_Set() const;
    bool is_beacon_id_Valid() const;

    QString getCityFinish() const;
    void setCityFinish(const QString &city_finish);
    bool is_city_finish_Set() const;
    bool is_city_finish_Valid() const;

    QString getCityStart() const;
    void setCityStart(const QString &city_start);
    bool is_city_start_Set() const;
    bool is_city_start_Valid() const;

    double getDecelerationCount() const;
    void setDecelerationCount(const double &deceleration_count);
    bool is_deceleration_count_Set() const;
    bool is_deceleration_count_Valid() const;

    double getDistance() const;
    void setDistance(const double &distance);
    bool is_distance_Set() const;
    bool is_distance_Valid() const;

    QString getDrivingTips() const;
    void setDrivingTips(const QString &driving_tips);
    bool is_driving_tips_Set() const;
    bool is_driving_tips_Valid() const;

    double getDuration() const;
    void setDuration(const double &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    double getEcoScore() const;
    void setEcoScore(const double &eco_score);
    bool is_eco_score_Set() const;
    bool is_eco_score_Valid() const;

    double getEcoScoreBrakes() const;
    void setEcoScoreBrakes(const double &eco_score_brakes);
    bool is_eco_score_brakes_Set() const;
    bool is_eco_score_brakes_Valid() const;

    double getEcoScoreDepreciation() const;
    void setEcoScoreDepreciation(const double &eco_score_depreciation);
    bool is_eco_score_depreciation_Set() const;
    bool is_eco_score_depreciation_Valid() const;

    double getEcoScoreFuel() const;
    void setEcoScoreFuel(const double &eco_score_fuel);
    bool is_eco_score_fuel_Set() const;
    bool is_eco_score_fuel_Valid() const;

    double getEcoScoreTyres() const;
    void setEcoScoreTyres(const double &eco_score_tyres);
    bool is_eco_score_tyres_Set() const;
    bool is_eco_score_tyres_Valid() const;

    QString getEndDate() const;
    void setEndDate(const QString &end_date);
    bool is_end_date_Set() const;
    bool is_end_date_Valid() const;

    double getHighOverSpeedMileage() const;
    void setHighOverSpeedMileage(const double &high_over_speed_mileage);
    bool is_high_over_speed_mileage_Set() const;
    bool is_high_over_speed_mileage_Valid() const;

    double getMidOverSpeedMileage() const;
    void setMidOverSpeedMileage(const double &mid_over_speed_mileage);
    bool is_mid_over_speed_mileage_Set() const;
    bool is_mid_over_speed_mileage_Valid() const;

    bool isOriginChanged() const;
    void setOriginChanged(const bool &origin_changed);
    bool is_origin_changed_Set() const;
    bool is_origin_changed_Valid() const;

    double getPhoneUsage() const;
    void setPhoneUsage(const double &phone_usage);
    bool is_phone_usage_Set() const;
    bool is_phone_usage_Valid() const;

    QList<OAITripsTripDetails_200_response_Result_Track_Points_inner> getPoints() const;
    void setPoints(const QList<OAITripsTripDetails_200_response_Result_Track_Points_inner> &points);
    bool is_points_Set() const;
    bool is_points_Valid() const;

    double getRating() const;
    void setRating(const double &rating);
    bool is_rating_Set() const;
    bool is_rating_Valid() const;

    double getRating100() const;
    void setRating100(const double &rating100);
    bool is_rating100_Set() const;
    bool is_rating100_Valid() const;

    double getRatingAcceleration() const;
    void setRatingAcceleration(const double &rating_acceleration);
    bool is_rating_acceleration_Set() const;
    bool is_rating_acceleration_Valid() const;

    double getRatingAcceleration100() const;
    void setRatingAcceleration100(const double &rating_acceleration100);
    bool is_rating_acceleration100_Set() const;
    bool is_rating_acceleration100_Valid() const;

    double getRatingBraking() const;
    void setRatingBraking(const double &rating_braking);
    bool is_rating_braking_Set() const;
    bool is_rating_braking_Valid() const;

    double getRatingBraking100() const;
    void setRatingBraking100(const double &rating_braking100);
    bool is_rating_braking100_Set() const;
    bool is_rating_braking100_Valid() const;

    double getRatingCornering() const;
    void setRatingCornering(const double &rating_cornering);
    bool is_rating_cornering_Set() const;
    bool is_rating_cornering_Valid() const;

    double getRatingCornering100() const;
    void setRatingCornering100(const double &rating_cornering100);
    bool is_rating_cornering100_Set() const;
    bool is_rating_cornering100_Valid() const;

    double getRatingPhoneDistraction100() const;
    void setRatingPhoneDistraction100(const double &rating_phone_distraction100);
    bool is_rating_phone_distraction100_Set() const;
    bool is_rating_phone_distraction100_Valid() const;

    double getRatingPhoneUsage() const;
    void setRatingPhoneUsage(const double &rating_phone_usage);
    bool is_rating_phone_usage_Set() const;
    bool is_rating_phone_usage_Valid() const;

    double getRatingSpeeding() const;
    void setRatingSpeeding(const double &rating_speeding);
    bool is_rating_speeding_Set() const;
    bool is_rating_speeding_Valid() const;

    double getRatingSpeeding100() const;
    void setRatingSpeeding100(const double &rating_speeding100);
    bool is_rating_speeding100_Set() const;
    bool is_rating_speeding100_Valid() const;

    double getRatingTimeOfDay() const;
    void setRatingTimeOfDay(const double &rating_time_of_day);
    bool is_rating_time_of_day_Set() const;
    bool is_rating_time_of_day_Valid() const;

    QString getShareType() const;
    void setShareType(const QString &share_type);
    bool is_share_type_Set() const;
    bool is_share_type_Valid() const;

    QString getStartDate() const;
    void setStartDate(const QString &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTrackOriginCode() const;
    void setTrackOriginCode(const QString &track_origin_code);
    bool is_track_origin_code_Set() const;
    bool is_track_origin_code_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_acceleration_count;
    bool m_acceleration_count_isSet;
    bool m_acceleration_count_isValid;

    QString m_address_end;
    bool m_address_end_isSet;
    bool m_address_end_isValid;

    OAITripsTripDetails_200_response_Result_Track_AddressFinishParts m_address_finish_parts;
    bool m_address_finish_parts_isSet;
    bool m_address_finish_parts_isValid;

    QString m_address_start;
    bool m_address_start_isSet;
    bool m_address_start_isValid;

    OAITripsTripDetails_200_response_Result_Track_AddressFinishParts m_address_start_parts;
    bool m_address_start_parts_isSet;
    bool m_address_start_parts_isValid;

    double m_beacon_id;
    bool m_beacon_id_isSet;
    bool m_beacon_id_isValid;

    QString m_city_finish;
    bool m_city_finish_isSet;
    bool m_city_finish_isValid;

    QString m_city_start;
    bool m_city_start_isSet;
    bool m_city_start_isValid;

    double m_deceleration_count;
    bool m_deceleration_count_isSet;
    bool m_deceleration_count_isValid;

    double m_distance;
    bool m_distance_isSet;
    bool m_distance_isValid;

    QString m_driving_tips;
    bool m_driving_tips_isSet;
    bool m_driving_tips_isValid;

    double m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    double m_eco_score;
    bool m_eco_score_isSet;
    bool m_eco_score_isValid;

    double m_eco_score_brakes;
    bool m_eco_score_brakes_isSet;
    bool m_eco_score_brakes_isValid;

    double m_eco_score_depreciation;
    bool m_eco_score_depreciation_isSet;
    bool m_eco_score_depreciation_isValid;

    double m_eco_score_fuel;
    bool m_eco_score_fuel_isSet;
    bool m_eco_score_fuel_isValid;

    double m_eco_score_tyres;
    bool m_eco_score_tyres_isSet;
    bool m_eco_score_tyres_isValid;

    QString m_end_date;
    bool m_end_date_isSet;
    bool m_end_date_isValid;

    double m_high_over_speed_mileage;
    bool m_high_over_speed_mileage_isSet;
    bool m_high_over_speed_mileage_isValid;

    double m_mid_over_speed_mileage;
    bool m_mid_over_speed_mileage_isSet;
    bool m_mid_over_speed_mileage_isValid;

    bool m_origin_changed;
    bool m_origin_changed_isSet;
    bool m_origin_changed_isValid;

    double m_phone_usage;
    bool m_phone_usage_isSet;
    bool m_phone_usage_isValid;

    QList<OAITripsTripDetails_200_response_Result_Track_Points_inner> m_points;
    bool m_points_isSet;
    bool m_points_isValid;

    double m_rating;
    bool m_rating_isSet;
    bool m_rating_isValid;

    double m_rating100;
    bool m_rating100_isSet;
    bool m_rating100_isValid;

    double m_rating_acceleration;
    bool m_rating_acceleration_isSet;
    bool m_rating_acceleration_isValid;

    double m_rating_acceleration100;
    bool m_rating_acceleration100_isSet;
    bool m_rating_acceleration100_isValid;

    double m_rating_braking;
    bool m_rating_braking_isSet;
    bool m_rating_braking_isValid;

    double m_rating_braking100;
    bool m_rating_braking100_isSet;
    bool m_rating_braking100_isValid;

    double m_rating_cornering;
    bool m_rating_cornering_isSet;
    bool m_rating_cornering_isValid;

    double m_rating_cornering100;
    bool m_rating_cornering100_isSet;
    bool m_rating_cornering100_isValid;

    double m_rating_phone_distraction100;
    bool m_rating_phone_distraction100_isSet;
    bool m_rating_phone_distraction100_isValid;

    double m_rating_phone_usage;
    bool m_rating_phone_usage_isSet;
    bool m_rating_phone_usage_isValid;

    double m_rating_speeding;
    bool m_rating_speeding_isSet;
    bool m_rating_speeding_isValid;

    double m_rating_speeding100;
    bool m_rating_speeding100_isSet;
    bool m_rating_speeding100_isValid;

    double m_rating_time_of_day;
    bool m_rating_time_of_day_isSet;
    bool m_rating_time_of_day_isValid;

    QString m_share_type;
    bool m_share_type_isSet;
    bool m_share_type_isValid;

    QString m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_track_origin_code;
    bool m_track_origin_code_isSet;
    bool m_track_origin_code_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITripsTripDetails_200_response_Result_Track)

#endif // OAITripsTripDetails_200_response_Result_Track_H
