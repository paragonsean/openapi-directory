/**
 * Quick start - Telematics SDK
 * # Introduction We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.  * [CONTACT US](https://telematicssdk.com) * [SANDBOX](https://userdatahub.com) * [DEV.PORTAL](https://docs.telematicssdk.com) * [DEMO APP](https://raxeltelematics.com/telematics-app)   # Overview Datamotion provides telematics infrastructure for mobile applications.   Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application  There are 3 groups of methods: * 1 - user management * 2 - statistics for mobile app * 3 - statistics for back-end(s)  in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns) # Possible architecture  There are three common schemes that are used by our clients. These schemes can be combined * Collect, Process, Store (required: 1&2) * Collect, Process (required: 1& sns) * Collect (required 1&sns)   ## Collect, Process, Store ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)  ## Collect, Process ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)  ## Collect ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)  *** ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)  # Common use-cases: * Safe and efficient driving * Usage-based insurance * Safe driving assessment * Driver assessment * Trip log * Geo-analysis * Accident monitoring * Driving engagements * Location based services * Realtime Tracking and beyond  # How to start * Register a [SANDBOX ACCOUNT](https://userdatahub.com) * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials)  * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)  # Authentication To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials  Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITripsTripDetails_200_response_Result_Track_Points_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITripsTripDetails_200_response_Result_Track_Points_inner::OAITripsTripDetails_200_response_Result_Track_Points_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITripsTripDetails_200_response_Result_Track_Points_inner::OAITripsTripDetails_200_response_Result_Track_Points_inner() {
    this->initializeModel();
}

OAITripsTripDetails_200_response_Result_Track_Points_inner::~OAITripsTripDetails_200_response_Result_Track_Points_inner() {}

void OAITripsTripDetails_200_response_Result_Track_Points_inner::initializeModel() {

    m_alert_type_isSet = false;
    m_alert_type_isValid = false;

    m_alert_value_isSet = false;
    m_alert_value_isValid = false;

    m_cornering_isSet = false;
    m_cornering_isValid = false;

    m_course_isSet = false;
    m_course_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lateral_isSet = false;
    m_lateral_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_mid_speed_isSet = false;
    m_mid_speed_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_phone_usage_isSet = false;
    m_phone_usage_isValid = false;

    m_point_date_isSet = false;
    m_point_date_isValid = false;

    m_speed_isSet = false;
    m_speed_isValid = false;

    m_speed_limit_isSet = false;
    m_speed_limit_isValid = false;

    m_speed_type_isSet = false;
    m_speed_type_isValid = false;

    m_total_meters_isSet = false;
    m_total_meters_isValid = false;

    m_yaw_isSet = false;
    m_yaw_isValid = false;
}

void OAITripsTripDetails_200_response_Result_Track_Points_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITripsTripDetails_200_response_Result_Track_Points_inner::fromJsonObject(QJsonObject json) {

    m_alert_type_isValid = ::OpenAPI::fromJsonValue(m_alert_type, json[QString("AlertType")]);
    m_alert_type_isSet = !json[QString("AlertType")].isNull() && m_alert_type_isValid;

    m_alert_value_isValid = ::OpenAPI::fromJsonValue(m_alert_value, json[QString("AlertValue")]);
    m_alert_value_isSet = !json[QString("AlertValue")].isNull() && m_alert_value_isValid;

    m_cornering_isValid = ::OpenAPI::fromJsonValue(m_cornering, json[QString("Cornering")]);
    m_cornering_isSet = !json[QString("Cornering")].isNull() && m_cornering_isValid;

    m_course_isValid = ::OpenAPI::fromJsonValue(m_course, json[QString("Course")]);
    m_course_isSet = !json[QString("Course")].isNull() && m_course_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_lateral_isValid = ::OpenAPI::fromJsonValue(m_lateral, json[QString("Lateral")]);
    m_lateral_isSet = !json[QString("Lateral")].isNull() && m_lateral_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("Latitude")]);
    m_latitude_isSet = !json[QString("Latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("Longitude")]);
    m_longitude_isSet = !json[QString("Longitude")].isNull() && m_longitude_isValid;

    m_mid_speed_isValid = ::OpenAPI::fromJsonValue(m_mid_speed, json[QString("MidSpeed")]);
    m_mid_speed_isSet = !json[QString("MidSpeed")].isNull() && m_mid_speed_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_phone_usage_isValid = ::OpenAPI::fromJsonValue(m_phone_usage, json[QString("PhoneUsage")]);
    m_phone_usage_isSet = !json[QString("PhoneUsage")].isNull() && m_phone_usage_isValid;

    m_point_date_isValid = ::OpenAPI::fromJsonValue(m_point_date, json[QString("PointDate")]);
    m_point_date_isSet = !json[QString("PointDate")].isNull() && m_point_date_isValid;

    m_speed_isValid = ::OpenAPI::fromJsonValue(m_speed, json[QString("Speed")]);
    m_speed_isSet = !json[QString("Speed")].isNull() && m_speed_isValid;

    m_speed_limit_isValid = ::OpenAPI::fromJsonValue(m_speed_limit, json[QString("SpeedLimit")]);
    m_speed_limit_isSet = !json[QString("SpeedLimit")].isNull() && m_speed_limit_isValid;

    m_speed_type_isValid = ::OpenAPI::fromJsonValue(m_speed_type, json[QString("SpeedType")]);
    m_speed_type_isSet = !json[QString("SpeedType")].isNull() && m_speed_type_isValid;

    m_total_meters_isValid = ::OpenAPI::fromJsonValue(m_total_meters, json[QString("TotalMeters")]);
    m_total_meters_isSet = !json[QString("TotalMeters")].isNull() && m_total_meters_isValid;

    m_yaw_isValid = ::OpenAPI::fromJsonValue(m_yaw, json[QString("Yaw")]);
    m_yaw_isSet = !json[QString("Yaw")].isNull() && m_yaw_isValid;
}

QString OAITripsTripDetails_200_response_Result_Track_Points_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITripsTripDetails_200_response_Result_Track_Points_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_type_isSet) {
        obj.insert(QString("AlertType"), ::OpenAPI::toJsonValue(m_alert_type));
    }
    if (m_alert_value_isSet) {
        obj.insert(QString("AlertValue"), ::OpenAPI::toJsonValue(m_alert_value));
    }
    if (m_cornering_isSet) {
        obj.insert(QString("Cornering"), ::OpenAPI::toJsonValue(m_cornering));
    }
    if (m_course_isSet) {
        obj.insert(QString("Course"), ::OpenAPI::toJsonValue(m_course));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lateral_isSet) {
        obj.insert(QString("Lateral"), ::OpenAPI::toJsonValue(m_lateral));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("Latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("Longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_mid_speed_isSet) {
        obj.insert(QString("MidSpeed"), ::OpenAPI::toJsonValue(m_mid_speed));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_phone_usage_isSet) {
        obj.insert(QString("PhoneUsage"), ::OpenAPI::toJsonValue(m_phone_usage));
    }
    if (m_point_date_isSet) {
        obj.insert(QString("PointDate"), ::OpenAPI::toJsonValue(m_point_date));
    }
    if (m_speed_isSet) {
        obj.insert(QString("Speed"), ::OpenAPI::toJsonValue(m_speed));
    }
    if (m_speed_limit_isSet) {
        obj.insert(QString("SpeedLimit"), ::OpenAPI::toJsonValue(m_speed_limit));
    }
    if (m_speed_type_isSet) {
        obj.insert(QString("SpeedType"), ::OpenAPI::toJsonValue(m_speed_type));
    }
    if (m_total_meters_isSet) {
        obj.insert(QString("TotalMeters"), ::OpenAPI::toJsonValue(m_total_meters));
    }
    if (m_yaw_isSet) {
        obj.insert(QString("Yaw"), ::OpenAPI::toJsonValue(m_yaw));
    }
    return obj;
}

QString OAITripsTripDetails_200_response_Result_Track_Points_inner::getAlertType() const {
    return m_alert_type;
}
void OAITripsTripDetails_200_response_Result_Track_Points_inner::setAlertType(const QString &alert_type) {
    m_alert_type = alert_type;
    m_alert_type_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_alert_type_Set() const{
    return m_alert_type_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_alert_type_Valid() const{
    return m_alert_type_isValid;
}

double OAITripsTripDetails_200_response_Result_Track_Points_inner::getAlertValue() const {
    return m_alert_value;
}
void OAITripsTripDetails_200_response_Result_Track_Points_inner::setAlertValue(const double &alert_value) {
    m_alert_value = alert_value;
    m_alert_value_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_alert_value_Set() const{
    return m_alert_value_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_alert_value_Valid() const{
    return m_alert_value_isValid;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::isCornering() const {
    return m_cornering;
}
void OAITripsTripDetails_200_response_Result_Track_Points_inner::setCornering(const bool &cornering) {
    m_cornering = cornering;
    m_cornering_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_cornering_Set() const{
    return m_cornering_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_cornering_Valid() const{
    return m_cornering_isValid;
}

double OAITripsTripDetails_200_response_Result_Track_Points_inner::getCourse() const {
    return m_course;
}
void OAITripsTripDetails_200_response_Result_Track_Points_inner::setCourse(const double &course) {
    m_course = course;
    m_course_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_course_Set() const{
    return m_course_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_course_Valid() const{
    return m_course_isValid;
}

double OAITripsTripDetails_200_response_Result_Track_Points_inner::getHeight() const {
    return m_height;
}
void OAITripsTripDetails_200_response_Result_Track_Points_inner::setHeight(const double &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_height_Set() const{
    return m_height_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_height_Valid() const{
    return m_height_isValid;
}

double OAITripsTripDetails_200_response_Result_Track_Points_inner::getId() const {
    return m_id;
}
void OAITripsTripDetails_200_response_Result_Track_Points_inner::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_id_Valid() const{
    return m_id_isValid;
}

double OAITripsTripDetails_200_response_Result_Track_Points_inner::getLateral() const {
    return m_lateral;
}
void OAITripsTripDetails_200_response_Result_Track_Points_inner::setLateral(const double &lateral) {
    m_lateral = lateral;
    m_lateral_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_lateral_Set() const{
    return m_lateral_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_lateral_Valid() const{
    return m_lateral_isValid;
}

double OAITripsTripDetails_200_response_Result_Track_Points_inner::getLatitude() const {
    return m_latitude;
}
void OAITripsTripDetails_200_response_Result_Track_Points_inner::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAITripsTripDetails_200_response_Result_Track_Points_inner::getLongitude() const {
    return m_longitude;
}
void OAITripsTripDetails_200_response_Result_Track_Points_inner::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_longitude_Valid() const{
    return m_longitude_isValid;
}

double OAITripsTripDetails_200_response_Result_Track_Points_inner::getMidSpeed() const {
    return m_mid_speed;
}
void OAITripsTripDetails_200_response_Result_Track_Points_inner::setMidSpeed(const double &mid_speed) {
    m_mid_speed = mid_speed;
    m_mid_speed_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_mid_speed_Set() const{
    return m_mid_speed_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_mid_speed_Valid() const{
    return m_mid_speed_isValid;
}

double OAITripsTripDetails_200_response_Result_Track_Points_inner::getNumber() const {
    return m_number;
}
void OAITripsTripDetails_200_response_Result_Track_Points_inner::setNumber(const double &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_number_Set() const{
    return m_number_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_number_Valid() const{
    return m_number_isValid;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::isPhoneUsage() const {
    return m_phone_usage;
}
void OAITripsTripDetails_200_response_Result_Track_Points_inner::setPhoneUsage(const bool &phone_usage) {
    m_phone_usage = phone_usage;
    m_phone_usage_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_phone_usage_Set() const{
    return m_phone_usage_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_phone_usage_Valid() const{
    return m_phone_usage_isValid;
}

QString OAITripsTripDetails_200_response_Result_Track_Points_inner::getPointDate() const {
    return m_point_date;
}
void OAITripsTripDetails_200_response_Result_Track_Points_inner::setPointDate(const QString &point_date) {
    m_point_date = point_date;
    m_point_date_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_point_date_Set() const{
    return m_point_date_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_point_date_Valid() const{
    return m_point_date_isValid;
}

double OAITripsTripDetails_200_response_Result_Track_Points_inner::getSpeed() const {
    return m_speed;
}
void OAITripsTripDetails_200_response_Result_Track_Points_inner::setSpeed(const double &speed) {
    m_speed = speed;
    m_speed_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_speed_Set() const{
    return m_speed_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_speed_Valid() const{
    return m_speed_isValid;
}

double OAITripsTripDetails_200_response_Result_Track_Points_inner::getSpeedLimit() const {
    return m_speed_limit;
}
void OAITripsTripDetails_200_response_Result_Track_Points_inner::setSpeedLimit(const double &speed_limit) {
    m_speed_limit = speed_limit;
    m_speed_limit_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_speed_limit_Set() const{
    return m_speed_limit_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_speed_limit_Valid() const{
    return m_speed_limit_isValid;
}

QString OAITripsTripDetails_200_response_Result_Track_Points_inner::getSpeedType() const {
    return m_speed_type;
}
void OAITripsTripDetails_200_response_Result_Track_Points_inner::setSpeedType(const QString &speed_type) {
    m_speed_type = speed_type;
    m_speed_type_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_speed_type_Set() const{
    return m_speed_type_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_speed_type_Valid() const{
    return m_speed_type_isValid;
}

double OAITripsTripDetails_200_response_Result_Track_Points_inner::getTotalMeters() const {
    return m_total_meters;
}
void OAITripsTripDetails_200_response_Result_Track_Points_inner::setTotalMeters(const double &total_meters) {
    m_total_meters = total_meters;
    m_total_meters_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_total_meters_Set() const{
    return m_total_meters_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_total_meters_Valid() const{
    return m_total_meters_isValid;
}

double OAITripsTripDetails_200_response_Result_Track_Points_inner::getYaw() const {
    return m_yaw;
}
void OAITripsTripDetails_200_response_Result_Track_Points_inner::setYaw(const double &yaw) {
    m_yaw = yaw;
    m_yaw_isSet = true;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_yaw_Set() const{
    return m_yaw_isSet;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::is_yaw_Valid() const{
    return m_yaw_isValid;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cornering_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_course_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lateral_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mid_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speed_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_speed_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_meters_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_yaw_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITripsTripDetails_200_response_Result_Track_Points_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
