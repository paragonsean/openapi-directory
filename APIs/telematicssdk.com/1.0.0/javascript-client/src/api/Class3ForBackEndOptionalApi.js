/**
 * Quick start - Telematics SDK
 * # Introduction We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.  * [CONTACT US](https://telematicssdk.com) * [SANDBOX](https://userdatahub.com) * [DEV.PORTAL](https://docs.telematicssdk.com) * [DEMO APP](https://raxeltelematics.com/telematics-app)   # Overview Datamotion provides telematics infrastructure for mobile applications.   Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application  There are 3 groups of methods: * 1 - user management * 2 - statistics for mobile app * 3 - statistics for back-end(s)  in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns) # Possible architecture  There are three common schemes that are used by our clients. These schemes can be combined * Collect, Process, Store (required: 1&2) * Collect, Process (required: 1& sns) * Collect (required 1&sns)   ## Collect, Process, Store ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)  ## Collect, Process ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)  ## Collect ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)  *** ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)  # Common use-cases: * Safe and efficient driving * Usage-based insurance * Safe driving assessment * Driver assessment * Trip log * Geo-analysis * Accident monitoring * Driving engagements * Location based services * Realtime Tracking and beyond  # How to start * Register a [SANDBOX ACCOUNT](https://userdatahub.com) * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials)  * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)  # Authentication To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials  Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import V1ScoringsConsolidatedDaily200Response from '../model/V1ScoringsConsolidatedDaily200Response';

/**
* Class3ForBackEndOptional service.
* @module api/Class3ForBackEndOptionalApi
* @version 1.0.0
*/
export default class Class3ForBackEndOptionalApi {

    /**
    * Constructs a new Class3ForBackEndOptionalApi. 
    * @alias module:api/Class3ForBackEndOptionalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the v1ScoringsConsolidated operation.
     * @callback module:api/Class3ForBackEndOptionalApi~v1ScoringsConsolidatedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v1/Scorings/consolidated
     * /v1/Scorings/consolidated
     * @param {Object} opts Optional parameters
     * @param {String} [deviceToken] 
     * @param {String} [startDate] 
     * @param {String} [endDate] 
     * @param {String} [tag] 
     * @param {String} [instanceId] 
     * @param {String} [appId] 
     * @param {String} [companyId] 
     * @param {module:api/Class3ForBackEndOptionalApi~v1ScoringsConsolidatedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1ScoringsConsolidated(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'DeviceToken': opts['deviceToken'],
        'StartDate': opts['startDate'],
        'EndDate': opts['endDate'],
        'Tag': opts['tag'],
        'InstanceId': opts['instanceId'],
        'AppId': opts['appId'],
        'CompanyId': opts['companyId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/statistics/v1/Scorings/consolidated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1ScoringsConsolidatedDaily operation.
     * @callback module:api/Class3ForBackEndOptionalApi~v1ScoringsConsolidatedDailyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1ScoringsConsolidatedDaily200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v1/Scorings/consolidated/daily
     * /v1/Scorings/consolidated/daily
     * @param {Object} opts Optional parameters
     * @param {String} [deviceToken] 
     * @param {String} [startDate] 
     * @param {String} [endDate] 
     * @param {String} [tag] 
     * @param {String} [instanceId] 
     * @param {String} [appId] 
     * @param {String} [companyId] 
     * @param {module:api/Class3ForBackEndOptionalApi~v1ScoringsConsolidatedDailyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1ScoringsConsolidatedDaily200Response}
     */
    v1ScoringsConsolidatedDaily(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'DeviceToken': opts['deviceToken'],
        'StartDate': opts['startDate'],
        'EndDate': opts['endDate'],
        'Tag': opts['tag'],
        'InstanceId': opts['instanceId'],
        'AppId': opts['appId'],
        'CompanyId': opts['companyId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = V1ScoringsConsolidatedDaily200Response;
      return this.apiClient.callApi(
        '/statistics/v1/Scorings/consolidated/daily', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1StatisticsConsolidated operation.
     * @callback module:api/Class3ForBackEndOptionalApi~v1StatisticsConsolidatedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v1/Statistics/consolidated
     * /v1/Statistics/consolidated
     * @param {Object} opts Optional parameters
     * @param {String} [deviceToken] 
     * @param {String} [startDate] 
     * @param {String} [endDate] 
     * @param {String} [tag] 
     * @param {String} [instanceId] 
     * @param {String} [appId] 
     * @param {String} [companyId] 
     * @param {module:api/Class3ForBackEndOptionalApi~v1StatisticsConsolidatedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1StatisticsConsolidated(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'DeviceToken': opts['deviceToken'],
        'StartDate': opts['startDate'],
        'EndDate': opts['endDate'],
        'Tag': opts['tag'],
        'InstanceId': opts['instanceId'],
        'AppId': opts['appId'],
        'CompanyId': opts['companyId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/statistics/v1/Statistics/consolidated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1StatisticsConsolidatedDaily operation.
     * @callback module:api/Class3ForBackEndOptionalApi~v1StatisticsConsolidatedDailyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * /v1/Statistics/consolidated/daily
     * /v1/Statistics/consolidated/daily
     * @param {Object} opts Optional parameters
     * @param {String} [deviceToken] 
     * @param {String} [startDate] 
     * @param {String} [endDate] 
     * @param {String} [tag] 
     * @param {String} [instanceId] 
     * @param {String} [appId] 
     * @param {String} [companyId] 
     * @param {module:api/Class3ForBackEndOptionalApi~v1StatisticsConsolidatedDailyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v1StatisticsConsolidatedDaily(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'DeviceToken': opts['deviceToken'],
        'StartDate': opts['startDate'],
        'EndDate': opts['endDate'],
        'Tag': opts['tag'],
        'InstanceId': opts['instanceId'],
        'AppId': opts['appId'],
        'CompanyId': opts['companyId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/statistics/v1/Statistics/consolidated/daily', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
