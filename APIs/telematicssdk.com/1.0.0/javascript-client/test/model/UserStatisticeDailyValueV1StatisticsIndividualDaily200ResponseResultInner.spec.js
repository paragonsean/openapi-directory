/**
 * Quick start - Telematics SDK
 * # Introduction We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.  * [CONTACT US](https://telematicssdk.com) * [SANDBOX](https://userdatahub.com) * [DEV.PORTAL](https://docs.telematicssdk.com) * [DEMO APP](https://raxeltelematics.com/telematics-app)   # Overview Datamotion provides telematics infrastructure for mobile applications.   Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application  There are 3 groups of methods: * 1 - user management * 2 - statistics for mobile app * 3 - statistics for back-end(s)  in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns) # Possible architecture  There are three common schemes that are used by our clients. These schemes can be combined * Collect, Process, Store (required: 1&2) * Collect, Process (required: 1& sns) * Collect (required 1&sns)   ## Collect, Process, Store ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)  ## Collect, Process ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)  ## Collect ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)  *** ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)  # Common use-cases: * Safe and efficient driving * Usage-based insurance * Safe driving assessment * Driver assessment * Trip log * Geo-analysis * Accident monitoring * Driving engagements * Location based services * Realtime Tracking and beyond  # How to start * Register a [SANDBOX ACCOUNT](https://userdatahub.com) * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials)  * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)  # Authentication To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials  Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.QuickStartTelematicsSdk);
  }
}(this, function(expect, QuickStartTelematicsSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner', function() {
    it('should create an instance of UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner', function() {
      // uncomment below and update the code to test UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be.a(QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner);
    });

    it('should have the property accelerationCount (base name: "AccelerationCount")', function() {
      // uncomment below and update the code to test the property accelerationCount
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property appId (base name: "AppId")', function() {
      // uncomment below and update the code to test the property appId
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property averageSpeedKmh (base name: "AverageSpeedKmh")', function() {
      // uncomment below and update the code to test the property averageSpeedKmh
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property averageSpeedMileh (base name: "AverageSpeedMileh")', function() {
      // uncomment below and update the code to test the property averageSpeedMileh
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property breakingCount (base name: "BreakingCount")', function() {
      // uncomment below and update the code to test the property breakingCount
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property companyId (base name: "CompanyId")', function() {
      // uncomment below and update the code to test the property companyId
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property corneringCount (base name: "CorneringCount")', function() {
      // uncomment below and update the code to test the property corneringCount
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property dayDrivingTime (base name: "DayDrivingTime")', function() {
      // uncomment below and update the code to test the property dayDrivingTime
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property deviceToken (base name: "DeviceToken")', function() {
      // uncomment below and update the code to test the property deviceToken
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property driverTripsCount (base name: "DriverTripsCount")', function() {
      // uncomment below and update the code to test the property driverTripsCount
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property drivingTime (base name: "DrivingTime")', function() {
      // uncomment below and update the code to test the property drivingTime
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property instanceId (base name: "InstanceId")', function() {
      // uncomment below and update the code to test the property instanceId
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property maxSpeedKmh (base name: "MaxSpeedKmh")', function() {
      // uncomment below and update the code to test the property maxSpeedKmh
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property maxSpeedMileh (base name: "MaxSpeedMileh")', function() {
      // uncomment below and update the code to test the property maxSpeedMileh
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property mileageKm (base name: "MileageKm")', function() {
      // uncomment below and update the code to test the property mileageKm
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property mileageMile (base name: "MileageMile")', function() {
      // uncomment below and update the code to test the property mileageMile
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property nightDrivingTime (base name: "NightDrivingTime")', function() {
      // uncomment below and update the code to test the property nightDrivingTime
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property otherTripsCount (base name: "OtherTripsCount")', function() {
      // uncomment below and update the code to test the property otherTripsCount
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property phoneUsageDistanceKm (base name: "PhoneUsageDistanceKm")', function() {
      // uncomment below and update the code to test the property phoneUsageDistanceKm
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property phoneUsageDistanceMile (base name: "PhoneUsageDistanceMile")', function() {
      // uncomment below and update the code to test the property phoneUsageDistanceMile
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property phoneUsageDurationMin (base name: "PhoneUsageDurationMin")', function() {
      // uncomment below and update the code to test the property phoneUsageDurationMin
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property phoneUsageOverSpeedDistanceKm (base name: "PhoneUsageOverSpeedDistanceKm")', function() {
      // uncomment below and update the code to test the property phoneUsageOverSpeedDistanceKm
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property phoneUsageOverSpeedDistanceMile (base name: "PhoneUsageOverSpeedDistanceMile")', function() {
      // uncomment below and update the code to test the property phoneUsageOverSpeedDistanceMile
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property phoneUsageOverSpeedDurationMin (base name: "PhoneUsageOverSpeedDurationMin")', function() {
      // uncomment below and update the code to test the property phoneUsageOverSpeedDurationMin
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property reportDate (base name: "ReportDate")', function() {
      // uncomment below and update the code to test the property reportDate
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property rushHoursDrivingTime (base name: "RushHoursDrivingTime")', function() {
      // uncomment below and update the code to test the property rushHoursDrivingTime
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property totalSpeedingKm (base name: "TotalSpeedingKm")', function() {
      // uncomment below and update the code to test the property totalSpeedingKm
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property totalSpeedingMile (base name: "TotalSpeedingMile")', function() {
      // uncomment below and update the code to test the property totalSpeedingMile
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

    it('should have the property tripsCount (base name: "TripsCount")', function() {
      // uncomment below and update the code to test the property tripsCount
      //var instance = new QuickStartTelematicsSdk.UserStatisticeDailyValueV1StatisticsIndividualDaily200ResponseResultInner();
      //expect(instance).to.be();
    });

  });

}));
