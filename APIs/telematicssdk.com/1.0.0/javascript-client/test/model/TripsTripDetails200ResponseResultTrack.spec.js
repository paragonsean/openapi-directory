/**
 * Quick start - Telematics SDK
 * # Introduction We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.  * [CONTACT US](https://telematicssdk.com) * [SANDBOX](https://userdatahub.com) * [DEV.PORTAL](https://docs.telematicssdk.com) * [DEMO APP](https://raxeltelematics.com/telematics-app)   # Overview Datamotion provides telematics infrastructure for mobile applications.   Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application  There are 3 groups of methods: * 1 - user management * 2 - statistics for mobile app * 3 - statistics for back-end(s)  in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns) # Possible architecture  There are three common schemes that are used by our clients. These schemes can be combined * Collect, Process, Store (required: 1&2) * Collect, Process (required: 1& sns) * Collect (required 1&sns)   ## Collect, Process, Store ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)  ## Collect, Process ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)  ## Collect ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)  *** ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)  # Common use-cases: * Safe and efficient driving * Usage-based insurance * Safe driving assessment * Driver assessment * Trip log * Geo-analysis * Accident monitoring * Driving engagements * Location based services * Realtime Tracking and beyond  # How to start * Register a [SANDBOX ACCOUNT](https://userdatahub.com) * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials)  * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)  # Authentication To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials  Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.QuickStartTelematicsSdk);
  }
}(this, function(expect, QuickStartTelematicsSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TripsTripDetails200ResponseResultTrack', function() {
    it('should create an instance of TripsTripDetails200ResponseResultTrack', function() {
      // uncomment below and update the code to test TripsTripDetails200ResponseResultTrack
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be.a(QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack);
    });

    it('should have the property accelerationCount (base name: "AccelerationCount")', function() {
      // uncomment below and update the code to test the property accelerationCount
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property addressEnd (base name: "AddressEnd")', function() {
      // uncomment below and update the code to test the property addressEnd
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property addressFinishParts (base name: "AddressFinishParts")', function() {
      // uncomment below and update the code to test the property addressFinishParts
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property addressStart (base name: "AddressStart")', function() {
      // uncomment below and update the code to test the property addressStart
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property addressStartParts (base name: "AddressStartParts")', function() {
      // uncomment below and update the code to test the property addressStartParts
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property beaconId (base name: "BeaconId")', function() {
      // uncomment below and update the code to test the property beaconId
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property cityFinish (base name: "CityFinish")', function() {
      // uncomment below and update the code to test the property cityFinish
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property cityStart (base name: "CityStart")', function() {
      // uncomment below and update the code to test the property cityStart
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property decelerationCount (base name: "DecelerationCount")', function() {
      // uncomment below and update the code to test the property decelerationCount
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property distance (base name: "Distance")', function() {
      // uncomment below and update the code to test the property distance
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property drivingTips (base name: "DrivingTips")', function() {
      // uncomment below and update the code to test the property drivingTips
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property duration (base name: "Duration")', function() {
      // uncomment below and update the code to test the property duration
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property ecoScore (base name: "EcoScore")', function() {
      // uncomment below and update the code to test the property ecoScore
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property ecoScoreBrakes (base name: "EcoScoreBrakes")', function() {
      // uncomment below and update the code to test the property ecoScoreBrakes
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property ecoScoreDepreciation (base name: "EcoScoreDepreciation")', function() {
      // uncomment below and update the code to test the property ecoScoreDepreciation
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property ecoScoreFuel (base name: "EcoScoreFuel")', function() {
      // uncomment below and update the code to test the property ecoScoreFuel
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property ecoScoreTyres (base name: "EcoScoreTyres")', function() {
      // uncomment below and update the code to test the property ecoScoreTyres
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property endDate (base name: "EndDate")', function() {
      // uncomment below and update the code to test the property endDate
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property highOverSpeedMileage (base name: "HighOverSpeedMileage")', function() {
      // uncomment below and update the code to test the property highOverSpeedMileage
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property midOverSpeedMileage (base name: "MidOverSpeedMileage")', function() {
      // uncomment below and update the code to test the property midOverSpeedMileage
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property originChanged (base name: "OriginChanged")', function() {
      // uncomment below and update the code to test the property originChanged
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property phoneUsage (base name: "PhoneUsage")', function() {
      // uncomment below and update the code to test the property phoneUsage
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property points (base name: "Points")', function() {
      // uncomment below and update the code to test the property points
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property rating (base name: "Rating")', function() {
      // uncomment below and update the code to test the property rating
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property rating100 (base name: "Rating100")', function() {
      // uncomment below and update the code to test the property rating100
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property ratingAcceleration (base name: "RatingAcceleration")', function() {
      // uncomment below and update the code to test the property ratingAcceleration
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property ratingAcceleration100 (base name: "RatingAcceleration100")', function() {
      // uncomment below and update the code to test the property ratingAcceleration100
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property ratingBraking (base name: "RatingBraking")', function() {
      // uncomment below and update the code to test the property ratingBraking
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property ratingBraking100 (base name: "RatingBraking100")', function() {
      // uncomment below and update the code to test the property ratingBraking100
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property ratingCornering (base name: "RatingCornering")', function() {
      // uncomment below and update the code to test the property ratingCornering
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property ratingCornering100 (base name: "RatingCornering100")', function() {
      // uncomment below and update the code to test the property ratingCornering100
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property ratingPhoneDistraction100 (base name: "RatingPhoneDistraction100")', function() {
      // uncomment below and update the code to test the property ratingPhoneDistraction100
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property ratingPhoneUsage (base name: "RatingPhoneUsage")', function() {
      // uncomment below and update the code to test the property ratingPhoneUsage
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property ratingSpeeding (base name: "RatingSpeeding")', function() {
      // uncomment below and update the code to test the property ratingSpeeding
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property ratingSpeeding100 (base name: "RatingSpeeding100")', function() {
      // uncomment below and update the code to test the property ratingSpeeding100
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property ratingTimeOfDay (base name: "RatingTimeOfDay")', function() {
      // uncomment below and update the code to test the property ratingTimeOfDay
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property shareType (base name: "ShareType")', function() {
      // uncomment below and update the code to test the property shareType
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property startDate (base name: "StartDate")', function() {
      // uncomment below and update the code to test the property startDate
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

    it('should have the property trackOriginCode (base name: "TrackOriginCode")', function() {
      // uncomment below and update the code to test the property trackOriginCode
      //var instance = new QuickStartTelematicsSdk.TripsTripDetails200ResponseResultTrack();
      //expect(instance).to.be();
    });

  });

}));
