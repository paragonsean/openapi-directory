/*
 * Quick start - Telematics SDK
 * # Introduction We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.  * [CONTACT US](https://telematicssdk.com) * [SANDBOX](https://userdatahub.com) * [DEV.PORTAL](https://docs.telematicssdk.com) * [DEMO APP](https://raxeltelematics.com/telematics-app)   # Overview Datamotion provides telematics infrastructure for mobile applications.   Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application  There are 3 groups of methods: * 1 - user management * 2 - statistics for mobile app * 3 - statistics for back-end(s)  in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns) # Possible architecture  There are three common schemes that are used by our clients. These schemes can be combined * Collect, Process, Store (required: 1&2) * Collect, Process (required: 1& sns) * Collect (required 1&sns)   ## Collect, Process, Store ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)  ## Collect, Process ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)  ## Collect ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)  *** ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)  # Common use-cases: * Safe and efficient driving * Usage-based insurance * Safe driving assessment * Driver assessment * Trip log * Geo-analysis * Accident monitoring * Driving engagements * Location based services * Realtime Tracking and beyond  # How to start * Register a [SANDBOX ACCOUNT](https://userdatahub.com) * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials)  * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)  # Authentication To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials  Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for UserStatisticsAccumulatedValueV1StatisticsIndividual200ResponseResult
 */
public class UserStatisticsAccumulatedValueV1StatisticsIndividual200ResponseResultTest {
    private final UserStatisticsAccumulatedValueV1StatisticsIndividual200ResponseResult model = new UserStatisticsAccumulatedValueV1StatisticsIndividual200ResponseResult();

    /**
     * Model tests for UserStatisticsAccumulatedValueV1StatisticsIndividual200ResponseResult
     */
    @Test
    public void testUserStatisticsAccumulatedValueV1StatisticsIndividual200ResponseResult() {
        // TODO: test UserStatisticsAccumulatedValueV1StatisticsIndividual200ResponseResult
    }

    /**
     * Test the property 'accelerationCount'
     */
    @Test
    public void accelerationCountTest() {
        // TODO: test accelerationCount
    }

    /**
     * Test the property 'appId'
     */
    @Test
    public void appIdTest() {
        // TODO: test appId
    }

    /**
     * Test the property 'averageSpeedKmh'
     */
    @Test
    public void averageSpeedKmhTest() {
        // TODO: test averageSpeedKmh
    }

    /**
     * Test the property 'averageSpeedMileh'
     */
    @Test
    public void averageSpeedMilehTest() {
        // TODO: test averageSpeedMileh
    }

    /**
     * Test the property 'breakingCount'
     */
    @Test
    public void breakingCountTest() {
        // TODO: test breakingCount
    }

    /**
     * Test the property 'companyId'
     */
    @Test
    public void companyIdTest() {
        // TODO: test companyId
    }

    /**
     * Test the property 'corneringCount'
     */
    @Test
    public void corneringCountTest() {
        // TODO: test corneringCount
    }

    /**
     * Test the property 'dayDrivingTime'
     */
    @Test
    public void dayDrivingTimeTest() {
        // TODO: test dayDrivingTime
    }

    /**
     * Test the property 'deviceToken'
     */
    @Test
    public void deviceTokenTest() {
        // TODO: test deviceToken
    }

    /**
     * Test the property 'driverTripsCount'
     */
    @Test
    public void driverTripsCountTest() {
        // TODO: test driverTripsCount
    }

    /**
     * Test the property 'drivingTime'
     */
    @Test
    public void drivingTimeTest() {
        // TODO: test drivingTime
    }

    /**
     * Test the property 'instanceId'
     */
    @Test
    public void instanceIdTest() {
        // TODO: test instanceId
    }

    /**
     * Test the property 'maxSpeedKmh'
     */
    @Test
    public void maxSpeedKmhTest() {
        // TODO: test maxSpeedKmh
    }

    /**
     * Test the property 'maxSpeedMileh'
     */
    @Test
    public void maxSpeedMilehTest() {
        // TODO: test maxSpeedMileh
    }

    /**
     * Test the property 'mileageKm'
     */
    @Test
    public void mileageKmTest() {
        // TODO: test mileageKm
    }

    /**
     * Test the property 'mileageMile'
     */
    @Test
    public void mileageMileTest() {
        // TODO: test mileageMile
    }

    /**
     * Test the property 'nightDrivingTime'
     */
    @Test
    public void nightDrivingTimeTest() {
        // TODO: test nightDrivingTime
    }

    /**
     * Test the property 'otherTripsCount'
     */
    @Test
    public void otherTripsCountTest() {
        // TODO: test otherTripsCount
    }

    /**
     * Test the property 'phoneUsageDistanceKm'
     */
    @Test
    public void phoneUsageDistanceKmTest() {
        // TODO: test phoneUsageDistanceKm
    }

    /**
     * Test the property 'phoneUsageDistanceMile'
     */
    @Test
    public void phoneUsageDistanceMileTest() {
        // TODO: test phoneUsageDistanceMile
    }

    /**
     * Test the property 'phoneUsageDurationMin'
     */
    @Test
    public void phoneUsageDurationMinTest() {
        // TODO: test phoneUsageDurationMin
    }

    /**
     * Test the property 'phoneUsageOverSpeedDistanceKm'
     */
    @Test
    public void phoneUsageOverSpeedDistanceKmTest() {
        // TODO: test phoneUsageOverSpeedDistanceKm
    }

    /**
     * Test the property 'phoneUsageOverSpeedDistanceMile'
     */
    @Test
    public void phoneUsageOverSpeedDistanceMileTest() {
        // TODO: test phoneUsageOverSpeedDistanceMile
    }

    /**
     * Test the property 'phoneUsageOverSpeedDurationMin'
     */
    @Test
    public void phoneUsageOverSpeedDurationMinTest() {
        // TODO: test phoneUsageOverSpeedDurationMin
    }

    /**
     * Test the property 'rushHoursDrivingTime'
     */
    @Test
    public void rushHoursDrivingTimeTest() {
        // TODO: test rushHoursDrivingTime
    }

    /**
     * Test the property 'totalSpeedingKm'
     */
    @Test
    public void totalSpeedingKmTest() {
        // TODO: test totalSpeedingKm
    }

    /**
     * Test the property 'totalSpeedingMile'
     */
    @Test
    public void totalSpeedingMileTest() {
        // TODO: test totalSpeedingMile
    }

    /**
     * Test the property 'tripsCount'
     */
    @Test
    public void tripsCountTest() {
        // TODO: test tripsCount
    }

}
