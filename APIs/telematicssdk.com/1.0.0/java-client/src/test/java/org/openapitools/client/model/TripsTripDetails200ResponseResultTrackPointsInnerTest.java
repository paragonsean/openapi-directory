/*
 * Quick start - Telematics SDK
 * # Introduction We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.  * [CONTACT US](https://telematicssdk.com) * [SANDBOX](https://userdatahub.com) * [DEV.PORTAL](https://docs.telematicssdk.com) * [DEMO APP](https://raxeltelematics.com/telematics-app)   # Overview Datamotion provides telematics infrastructure for mobile applications.   Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application  There are 3 groups of methods: * 1 - user management * 2 - statistics for mobile app * 3 - statistics for back-end(s)  in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns) # Possible architecture  There are three common schemes that are used by our clients. These schemes can be combined * Collect, Process, Store (required: 1&2) * Collect, Process (required: 1& sns) * Collect (required 1&sns)   ## Collect, Process, Store ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)  ## Collect, Process ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)  ## Collect ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)  *** ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)  # Common use-cases: * Safe and efficient driving * Usage-based insurance * Safe driving assessment * Driver assessment * Trip log * Geo-analysis * Accident monitoring * Driving engagements * Location based services * Realtime Tracking and beyond  # How to start * Register a [SANDBOX ACCOUNT](https://userdatahub.com) * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials)  * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)  # Authentication To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials  Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for TripsTripDetails200ResponseResultTrackPointsInner
 */
public class TripsTripDetails200ResponseResultTrackPointsInnerTest {
    private final TripsTripDetails200ResponseResultTrackPointsInner model = new TripsTripDetails200ResponseResultTrackPointsInner();

    /**
     * Model tests for TripsTripDetails200ResponseResultTrackPointsInner
     */
    @Test
    public void testTripsTripDetails200ResponseResultTrackPointsInner() {
        // TODO: test TripsTripDetails200ResponseResultTrackPointsInner
    }

    /**
     * Test the property 'alertType'
     */
    @Test
    public void alertTypeTest() {
        // TODO: test alertType
    }

    /**
     * Test the property 'alertValue'
     */
    @Test
    public void alertValueTest() {
        // TODO: test alertValue
    }

    /**
     * Test the property 'cornering'
     */
    @Test
    public void corneringTest() {
        // TODO: test cornering
    }

    /**
     * Test the property 'course'
     */
    @Test
    public void courseTest() {
        // TODO: test course
    }

    /**
     * Test the property 'height'
     */
    @Test
    public void heightTest() {
        // TODO: test height
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'lateral'
     */
    @Test
    public void lateralTest() {
        // TODO: test lateral
    }

    /**
     * Test the property 'latitude'
     */
    @Test
    public void latitudeTest() {
        // TODO: test latitude
    }

    /**
     * Test the property 'longitude'
     */
    @Test
    public void longitudeTest() {
        // TODO: test longitude
    }

    /**
     * Test the property 'midSpeed'
     */
    @Test
    public void midSpeedTest() {
        // TODO: test midSpeed
    }

    /**
     * Test the property 'number'
     */
    @Test
    public void numberTest() {
        // TODO: test number
    }

    /**
     * Test the property 'phoneUsage'
     */
    @Test
    public void phoneUsageTest() {
        // TODO: test phoneUsage
    }

    /**
     * Test the property 'pointDate'
     */
    @Test
    public void pointDateTest() {
        // TODO: test pointDate
    }

    /**
     * Test the property 'speed'
     */
    @Test
    public void speedTest() {
        // TODO: test speed
    }

    /**
     * Test the property 'speedLimit'
     */
    @Test
    public void speedLimitTest() {
        // TODO: test speedLimit
    }

    /**
     * Test the property 'speedType'
     */
    @Test
    public void speedTypeTest() {
        // TODO: test speedType
    }

    /**
     * Test the property 'totalMeters'
     */
    @Test
    public void totalMetersTest() {
        // TODO: test totalMeters
    }

    /**
     * Test the property 'yaw'
     */
    @Test
    public void yawTest() {
        // TODO: test yaw
    }

}
