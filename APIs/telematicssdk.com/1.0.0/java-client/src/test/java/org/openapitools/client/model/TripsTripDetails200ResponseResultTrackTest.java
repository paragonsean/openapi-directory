/*
 * Quick start - Telematics SDK
 * # Introduction We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.  * [CONTACT US](https://telematicssdk.com) * [SANDBOX](https://userdatahub.com) * [DEV.PORTAL](https://docs.telematicssdk.com) * [DEMO APP](https://raxeltelematics.com/telematics-app)   # Overview Datamotion provides telematics infrastructure for mobile applications.   Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application  There are 3 groups of methods: * 1 - user management * 2 - statistics for mobile app * 3 - statistics for back-end(s)  in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns) # Possible architecture  There are three common schemes that are used by our clients. These schemes can be combined * Collect, Process, Store (required: 1&2) * Collect, Process (required: 1& sns) * Collect (required 1&sns)   ## Collect, Process, Store ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)  ## Collect, Process ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)  ## Collect ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)  *** ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)  # Common use-cases: * Safe and efficient driving * Usage-based insurance * Safe driving assessment * Driver assessment * Trip log * Geo-analysis * Accident monitoring * Driving engagements * Location based services * Realtime Tracking and beyond  # How to start * Register a [SANDBOX ACCOUNT](https://userdatahub.com) * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials)  * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)  # Authentication To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials  Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TripsTripDetails200ResponseResultTrackAddressFinishParts;
import org.openapitools.client.model.TripsTripDetails200ResponseResultTrackPointsInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for TripsTripDetails200ResponseResultTrack
 */
public class TripsTripDetails200ResponseResultTrackTest {
    private final TripsTripDetails200ResponseResultTrack model = new TripsTripDetails200ResponseResultTrack();

    /**
     * Model tests for TripsTripDetails200ResponseResultTrack
     */
    @Test
    public void testTripsTripDetails200ResponseResultTrack() {
        // TODO: test TripsTripDetails200ResponseResultTrack
    }

    /**
     * Test the property 'accelerationCount'
     */
    @Test
    public void accelerationCountTest() {
        // TODO: test accelerationCount
    }

    /**
     * Test the property 'addressEnd'
     */
    @Test
    public void addressEndTest() {
        // TODO: test addressEnd
    }

    /**
     * Test the property 'addressFinishParts'
     */
    @Test
    public void addressFinishPartsTest() {
        // TODO: test addressFinishParts
    }

    /**
     * Test the property 'addressStart'
     */
    @Test
    public void addressStartTest() {
        // TODO: test addressStart
    }

    /**
     * Test the property 'addressStartParts'
     */
    @Test
    public void addressStartPartsTest() {
        // TODO: test addressStartParts
    }

    /**
     * Test the property 'beaconId'
     */
    @Test
    public void beaconIdTest() {
        // TODO: test beaconId
    }

    /**
     * Test the property 'cityFinish'
     */
    @Test
    public void cityFinishTest() {
        // TODO: test cityFinish
    }

    /**
     * Test the property 'cityStart'
     */
    @Test
    public void cityStartTest() {
        // TODO: test cityStart
    }

    /**
     * Test the property 'decelerationCount'
     */
    @Test
    public void decelerationCountTest() {
        // TODO: test decelerationCount
    }

    /**
     * Test the property 'distance'
     */
    @Test
    public void distanceTest() {
        // TODO: test distance
    }

    /**
     * Test the property 'drivingTips'
     */
    @Test
    public void drivingTipsTest() {
        // TODO: test drivingTips
    }

    /**
     * Test the property 'duration'
     */
    @Test
    public void durationTest() {
        // TODO: test duration
    }

    /**
     * Test the property 'ecoScore'
     */
    @Test
    public void ecoScoreTest() {
        // TODO: test ecoScore
    }

    /**
     * Test the property 'ecoScoreBrakes'
     */
    @Test
    public void ecoScoreBrakesTest() {
        // TODO: test ecoScoreBrakes
    }

    /**
     * Test the property 'ecoScoreDepreciation'
     */
    @Test
    public void ecoScoreDepreciationTest() {
        // TODO: test ecoScoreDepreciation
    }

    /**
     * Test the property 'ecoScoreFuel'
     */
    @Test
    public void ecoScoreFuelTest() {
        // TODO: test ecoScoreFuel
    }

    /**
     * Test the property 'ecoScoreTyres'
     */
    @Test
    public void ecoScoreTyresTest() {
        // TODO: test ecoScoreTyres
    }

    /**
     * Test the property 'endDate'
     */
    @Test
    public void endDateTest() {
        // TODO: test endDate
    }

    /**
     * Test the property 'highOverSpeedMileage'
     */
    @Test
    public void highOverSpeedMileageTest() {
        // TODO: test highOverSpeedMileage
    }

    /**
     * Test the property 'midOverSpeedMileage'
     */
    @Test
    public void midOverSpeedMileageTest() {
        // TODO: test midOverSpeedMileage
    }

    /**
     * Test the property 'originChanged'
     */
    @Test
    public void originChangedTest() {
        // TODO: test originChanged
    }

    /**
     * Test the property 'phoneUsage'
     */
    @Test
    public void phoneUsageTest() {
        // TODO: test phoneUsage
    }

    /**
     * Test the property 'points'
     */
    @Test
    public void pointsTest() {
        // TODO: test points
    }

    /**
     * Test the property 'rating'
     */
    @Test
    public void ratingTest() {
        // TODO: test rating
    }

    /**
     * Test the property 'rating100'
     */
    @Test
    public void rating100Test() {
        // TODO: test rating100
    }

    /**
     * Test the property 'ratingAcceleration'
     */
    @Test
    public void ratingAccelerationTest() {
        // TODO: test ratingAcceleration
    }

    /**
     * Test the property 'ratingAcceleration100'
     */
    @Test
    public void ratingAcceleration100Test() {
        // TODO: test ratingAcceleration100
    }

    /**
     * Test the property 'ratingBraking'
     */
    @Test
    public void ratingBrakingTest() {
        // TODO: test ratingBraking
    }

    /**
     * Test the property 'ratingBraking100'
     */
    @Test
    public void ratingBraking100Test() {
        // TODO: test ratingBraking100
    }

    /**
     * Test the property 'ratingCornering'
     */
    @Test
    public void ratingCorneringTest() {
        // TODO: test ratingCornering
    }

    /**
     * Test the property 'ratingCornering100'
     */
    @Test
    public void ratingCornering100Test() {
        // TODO: test ratingCornering100
    }

    /**
     * Test the property 'ratingPhoneDistraction100'
     */
    @Test
    public void ratingPhoneDistraction100Test() {
        // TODO: test ratingPhoneDistraction100
    }

    /**
     * Test the property 'ratingPhoneUsage'
     */
    @Test
    public void ratingPhoneUsageTest() {
        // TODO: test ratingPhoneUsage
    }

    /**
     * Test the property 'ratingSpeeding'
     */
    @Test
    public void ratingSpeedingTest() {
        // TODO: test ratingSpeeding
    }

    /**
     * Test the property 'ratingSpeeding100'
     */
    @Test
    public void ratingSpeeding100Test() {
        // TODO: test ratingSpeeding100
    }

    /**
     * Test the property 'ratingTimeOfDay'
     */
    @Test
    public void ratingTimeOfDayTest() {
        // TODO: test ratingTimeOfDay
    }

    /**
     * Test the property 'shareType'
     */
    @Test
    public void shareTypeTest() {
        // TODO: test shareType
    }

    /**
     * Test the property 'startDate'
     */
    @Test
    public void startDateTest() {
        // TODO: test startDate
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'trackOriginCode'
     */
    @Test
    public void trackOriginCodeTest() {
        // TODO: test trackOriginCode
    }

}
