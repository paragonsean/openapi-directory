/*
 * Quick start - Telematics SDK
 * # Introduction We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.  * [CONTACT US](https://telematicssdk.com) * [SANDBOX](https://userdatahub.com) * [DEV.PORTAL](https://docs.telematicssdk.com) * [DEMO APP](https://raxeltelematics.com/telematics-app)   # Overview Datamotion provides telematics infrastructure for mobile applications.   Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application  There are 3 groups of methods: * 1 - user management * 2 - statistics for mobile app * 3 - statistics for back-end(s)  in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns) # Possible architecture  There are three common schemes that are used by our clients. These schemes can be combined * Collect, Process, Store (required: 1&2) * Collect, Process (required: 1& sns) * Collect (required 1&sns)   ## Collect, Process, Store ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)  ## Collect, Process ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)  ## Collect ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)  *** ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)  # Common use-cases: * Safe and efficient driving * Usage-based insurance * Safe driving assessment * Driver assessment * Trip log * Geo-analysis * Accident monitoring * Driving engagements * Location based services * Realtime Tracking and beyond  # How to start * Register a [SANDBOX ACCOUNT](https://userdatahub.com) * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials)  * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)  # Authentication To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials  Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.TripsTripDetails200Response;
import org.openapitools.client.model.UserSafeScoringAccumulatedValueV1ScoringsIndividual200Response;
import org.openapitools.client.model.UserSafeScoringDailyValueV1ScoringsIndividualDaily200Response;
import org.openapitools.client.model.UserStatisticeDailyValueV1StatisticsIndividualDaily200Response;
import org.openapitools.client.model.UserStatisticsAccumulatedValueV1StatisticsIndividual200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Class2ForMobileAppOptionalApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Class2ForMobileAppOptionalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Class2ForMobileAppOptionalApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tripsTripDetails
     * @param trackToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * CF-Cache-Status -  <br>  * CF-Ray -  <br>  * Code -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * EnableLogging -  <br>  * EnableRealTimeLocation -  <br>  * EnableTracking -  <br>  * Expect-CT -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Set-Cookie -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  * cf-apo-via -  <br>  * cf-request-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call tripsTripDetailsCall(String trackToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mobilesdk/stage/track/get_track/v1";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (trackToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("trackToken", trackToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tripsTripDetailsValidateBeforeCall(String trackToken, final ApiCallback _callback) throws ApiException {
        return tripsTripDetailsCall(trackToken, _callback);

    }

    /**
     * Trips - trip details
     * Trips - trip details
     * @param trackToken  (optional)
     * @return TripsTripDetails200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * CF-Cache-Status -  <br>  * CF-Ray -  <br>  * Code -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * EnableLogging -  <br>  * EnableRealTimeLocation -  <br>  * EnableTracking -  <br>  * Expect-CT -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Set-Cookie -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  * cf-apo-via -  <br>  * cf-request-id -  <br>  </td></tr>
     </table>
     */
    public TripsTripDetails200Response tripsTripDetails(String trackToken) throws ApiException {
        ApiResponse<TripsTripDetails200Response> localVarResp = tripsTripDetailsWithHttpInfo(trackToken);
        return localVarResp.getData();
    }

    /**
     * Trips - trip details
     * Trips - trip details
     * @param trackToken  (optional)
     * @return ApiResponse&lt;TripsTripDetails200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * CF-Cache-Status -  <br>  * CF-Ray -  <br>  * Code -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * EnableLogging -  <br>  * EnableRealTimeLocation -  <br>  * EnableTracking -  <br>  * Expect-CT -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Set-Cookie -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  * cf-apo-via -  <br>  * cf-request-id -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<TripsTripDetails200Response> tripsTripDetailsWithHttpInfo(String trackToken) throws ApiException {
        okhttp3.Call localVarCall = tripsTripDetailsValidateBeforeCall(trackToken, null);
        Type localVarReturnType = new TypeToken<TripsTripDetails200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Trips - trip details (asynchronously)
     * Trips - trip details
     * @param trackToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * CF-Cache-Status -  <br>  * CF-Ray -  <br>  * Code -  <br>  * Connection -  <br>  * Content-Encoding -  <br>  * Date -  <br>  * EnableLogging -  <br>  * EnableRealTimeLocation -  <br>  * EnableTracking -  <br>  * Expect-CT -  <br>  * NEL -  <br>  * Report-To -  <br>  * Server -  <br>  * Set-Cookie -  <br>  * Transfer-Encoding -  <br>  * Vary -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  * cf-apo-via -  <br>  * cf-request-id -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call tripsTripDetailsAsync(String trackToken, final ApiCallback<TripsTripDetails200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tripsTripDetailsValidateBeforeCall(trackToken, _callback);
        Type localVarReturnType = new TypeToken<TripsTripDetails200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userSafeScoringAccumulatedValueV1ScoringsIndividual
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userSafeScoringAccumulatedValueV1ScoringsIndividualCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statistics/v1/Scorings/individual/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userSafeScoringAccumulatedValueV1ScoringsIndividualValidateBeforeCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        return userSafeScoringAccumulatedValueV1ScoringsIndividualCall(startDate, endDate, _callback);

    }

    /**
     * User safe scoring - Accumulated value - v1/Scorings/individual
     * Safe driving score API. This API is a part of Telematics API that we provide to our clients.  Rating description presents the universal approach, developed by our company on the basis of many years of experience; most of the input variables presented in this document could be adopted depending on the needs of the company and the focus on the specific characteristics of clients&#39; driving style. Since 2019 we have moved to the 3rd Generation of the scoring model which allows distinguishing a context of events and add penalty points in accordance with a level of risk generated by an event  [More details](https://docs.telematicssdk.com)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @return UserSafeScoringAccumulatedValueV1ScoringsIndividual200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public UserSafeScoringAccumulatedValueV1ScoringsIndividual200Response userSafeScoringAccumulatedValueV1ScoringsIndividual(String startDate, String endDate) throws ApiException {
        ApiResponse<UserSafeScoringAccumulatedValueV1ScoringsIndividual200Response> localVarResp = userSafeScoringAccumulatedValueV1ScoringsIndividualWithHttpInfo(startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * User safe scoring - Accumulated value - v1/Scorings/individual
     * Safe driving score API. This API is a part of Telematics API that we provide to our clients.  Rating description presents the universal approach, developed by our company on the basis of many years of experience; most of the input variables presented in this document could be adopted depending on the needs of the company and the focus on the specific characteristics of clients&#39; driving style. Since 2019 we have moved to the 3rd Generation of the scoring model which allows distinguishing a context of events and add penalty points in accordance with a level of risk generated by an event  [More details](https://docs.telematicssdk.com)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @return ApiResponse&lt;UserSafeScoringAccumulatedValueV1ScoringsIndividual200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<UserSafeScoringAccumulatedValueV1ScoringsIndividual200Response> userSafeScoringAccumulatedValueV1ScoringsIndividualWithHttpInfo(String startDate, String endDate) throws ApiException {
        okhttp3.Call localVarCall = userSafeScoringAccumulatedValueV1ScoringsIndividualValidateBeforeCall(startDate, endDate, null);
        Type localVarReturnType = new TypeToken<UserSafeScoringAccumulatedValueV1ScoringsIndividual200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * User safe scoring - Accumulated value - v1/Scorings/individual (asynchronously)
     * Safe driving score API. This API is a part of Telematics API that we provide to our clients.  Rating description presents the universal approach, developed by our company on the basis of many years of experience; most of the input variables presented in this document could be adopted depending on the needs of the company and the focus on the specific characteristics of clients&#39; driving style. Since 2019 we have moved to the 3rd Generation of the scoring model which allows distinguishing a context of events and add penalty points in accordance with a level of risk generated by an event  [More details](https://docs.telematicssdk.com)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userSafeScoringAccumulatedValueV1ScoringsIndividualAsync(String startDate, String endDate, final ApiCallback<UserSafeScoringAccumulatedValueV1ScoringsIndividual200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = userSafeScoringAccumulatedValueV1ScoringsIndividualValidateBeforeCall(startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<UserSafeScoringAccumulatedValueV1ScoringsIndividual200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userSafeScoringDailyValueV1ScoringsIndividualDaily
     * @param tag Optional (optional)
     * @param startDate (Required)  (optional)
     * @param endDate (Required)  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userSafeScoringDailyValueV1ScoringsIndividualDailyCall(String tag, String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statistics/v1/Scorings/individual/daily";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Tag", tag));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userSafeScoringDailyValueV1ScoringsIndividualDailyValidateBeforeCall(String tag, String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        return userSafeScoringDailyValueV1ScoringsIndividualDailyCall(tag, startDate, endDate, _callback);

    }

    /**
     * User safe scoring - daily value - /v1/Scorings/individual/daily
     * User safe scoring - daily value - /v1/Scorings/individual/daily
     * @param tag Optional (optional)
     * @param startDate (Required)  (optional)
     * @param endDate (Required)  (optional)
     * @return UserSafeScoringDailyValueV1ScoringsIndividualDaily200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public UserSafeScoringDailyValueV1ScoringsIndividualDaily200Response userSafeScoringDailyValueV1ScoringsIndividualDaily(String tag, String startDate, String endDate) throws ApiException {
        ApiResponse<UserSafeScoringDailyValueV1ScoringsIndividualDaily200Response> localVarResp = userSafeScoringDailyValueV1ScoringsIndividualDailyWithHttpInfo(tag, startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * User safe scoring - daily value - /v1/Scorings/individual/daily
     * User safe scoring - daily value - /v1/Scorings/individual/daily
     * @param tag Optional (optional)
     * @param startDate (Required)  (optional)
     * @param endDate (Required)  (optional)
     * @return ApiResponse&lt;UserSafeScoringDailyValueV1ScoringsIndividualDaily200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<UserSafeScoringDailyValueV1ScoringsIndividualDaily200Response> userSafeScoringDailyValueV1ScoringsIndividualDailyWithHttpInfo(String tag, String startDate, String endDate) throws ApiException {
        okhttp3.Call localVarCall = userSafeScoringDailyValueV1ScoringsIndividualDailyValidateBeforeCall(tag, startDate, endDate, null);
        Type localVarReturnType = new TypeToken<UserSafeScoringDailyValueV1ScoringsIndividualDaily200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * User safe scoring - daily value - /v1/Scorings/individual/daily (asynchronously)
     * User safe scoring - daily value - /v1/Scorings/individual/daily
     * @param tag Optional (optional)
     * @param startDate (Required)  (optional)
     * @param endDate (Required)  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userSafeScoringDailyValueV1ScoringsIndividualDailyAsync(String tag, String startDate, String endDate, final ApiCallback<UserSafeScoringDailyValueV1ScoringsIndividualDaily200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = userSafeScoringDailyValueV1ScoringsIndividualDailyValidateBeforeCall(tag, startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<UserSafeScoringDailyValueV1ScoringsIndividualDaily200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userStatisticeDailyValueV1StatisticsIndividualDaily
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userStatisticeDailyValueV1StatisticsIndividualDailyCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statistics/v1/Statistics/individual/daily/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userStatisticeDailyValueV1StatisticsIndividualDailyValidateBeforeCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        return userStatisticeDailyValueV1StatisticsIndividualDailyCall(startDate, endDate, _callback);

    }

    /**
     * User statistice - Daily value - v1/Statistics/individual/daily
     * User statistice - Daily value - v1/Statistics/individual/daily
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @return UserStatisticeDailyValueV1StatisticsIndividualDaily200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public UserStatisticeDailyValueV1StatisticsIndividualDaily200Response userStatisticeDailyValueV1StatisticsIndividualDaily(String startDate, String endDate) throws ApiException {
        ApiResponse<UserStatisticeDailyValueV1StatisticsIndividualDaily200Response> localVarResp = userStatisticeDailyValueV1StatisticsIndividualDailyWithHttpInfo(startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * User statistice - Daily value - v1/Statistics/individual/daily
     * User statistice - Daily value - v1/Statistics/individual/daily
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @return ApiResponse&lt;UserStatisticeDailyValueV1StatisticsIndividualDaily200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<UserStatisticeDailyValueV1StatisticsIndividualDaily200Response> userStatisticeDailyValueV1StatisticsIndividualDailyWithHttpInfo(String startDate, String endDate) throws ApiException {
        okhttp3.Call localVarCall = userStatisticeDailyValueV1StatisticsIndividualDailyValidateBeforeCall(startDate, endDate, null);
        Type localVarReturnType = new TypeToken<UserStatisticeDailyValueV1StatisticsIndividualDaily200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * User statistice - Daily value - v1/Statistics/individual/daily (asynchronously)
     * User statistice - Daily value - v1/Statistics/individual/daily
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userStatisticeDailyValueV1StatisticsIndividualDailyAsync(String startDate, String endDate, final ApiCallback<UserStatisticeDailyValueV1StatisticsIndividualDaily200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = userStatisticeDailyValueV1StatisticsIndividualDailyValidateBeforeCall(startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<UserStatisticeDailyValueV1StatisticsIndividualDaily200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userStatisticsAccumulatedValueV1StatisticsIndividual
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userStatisticsAccumulatedValueV1StatisticsIndividualCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statistics/v1/Statistics/individual/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userStatisticsAccumulatedValueV1StatisticsIndividualValidateBeforeCall(String startDate, String endDate, final ApiCallback _callback) throws ApiException {
        return userStatisticsAccumulatedValueV1StatisticsIndividualCall(startDate, endDate, _callback);

    }

    /**
     * User statistics - Accumulated value - /v1/Statistics/individual
     * User statistics - Accumulated value - /v1/Statistics/individual
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @return UserStatisticsAccumulatedValueV1StatisticsIndividual200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public UserStatisticsAccumulatedValueV1StatisticsIndividual200Response userStatisticsAccumulatedValueV1StatisticsIndividual(String startDate, String endDate) throws ApiException {
        ApiResponse<UserStatisticsAccumulatedValueV1StatisticsIndividual200Response> localVarResp = userStatisticsAccumulatedValueV1StatisticsIndividualWithHttpInfo(startDate, endDate);
        return localVarResp.getData();
    }

    /**
     * User statistics - Accumulated value - /v1/Statistics/individual
     * User statistics - Accumulated value - /v1/Statistics/individual
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @return ApiResponse&lt;UserStatisticsAccumulatedValueV1StatisticsIndividual200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<UserStatisticsAccumulatedValueV1StatisticsIndividual200Response> userStatisticsAccumulatedValueV1StatisticsIndividualWithHttpInfo(String startDate, String endDate) throws ApiException {
        okhttp3.Call localVarCall = userStatisticsAccumulatedValueV1StatisticsIndividualValidateBeforeCall(startDate, endDate, null);
        Type localVarReturnType = new TypeToken<UserStatisticsAccumulatedValueV1StatisticsIndividual200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * User statistics - Accumulated value - /v1/Statistics/individual (asynchronously)
     * User statistics - Accumulated value - /v1/Statistics/individual
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call userStatisticsAccumulatedValueV1StatisticsIndividualAsync(String startDate, String endDate, final ApiCallback<UserStatisticsAccumulatedValueV1StatisticsIndividual200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = userStatisticsAccumulatedValueV1StatisticsIndividualValidateBeforeCall(startDate, endDate, _callback);
        Type localVarReturnType = new TypeToken<UserStatisticsAccumulatedValueV1StatisticsIndividual200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
