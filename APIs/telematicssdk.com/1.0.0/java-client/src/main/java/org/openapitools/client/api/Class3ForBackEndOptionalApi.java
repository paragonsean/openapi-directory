/*
 * Quick start - Telematics SDK
 * # Introduction We have prepared a set of APIs for quick start to integrate telematics SDK that powers mobile telematics inside 3rd party mobile applications.  * [CONTACT US](https://telematicssdk.com) * [SANDBOX](https://userdatahub.com) * [DEV.PORTAL](https://docs.telematicssdk.com) * [DEMO APP](https://raxeltelematics.com/telematics-app)   # Overview Datamotion provides telematics infrastructure for mobile applications.   Telematics SDK turns any smartphone into telematics data gathering device to collect Location, driving and behavior data. API services unlocks power of your mobile application  There are 3 groups of methods: * 1 - user management * 2 - statistics for mobile app * 3 - statistics for back-end(s)  in certain cases you will need SNS or any other notification services. read more [here](https://docs.telematicssdk.com/platform-features/sns) # Possible architecture  There are three common schemes that are used by our clients. These schemes can be combined * Collect, Process, Store (required: 1&2) * Collect, Process (required: 1& sns) * Collect (required 1&sns)   ## Collect, Process, Store ![Collect, Process, Store](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection%2C+processing%2C+storage)  ## Collect, Process ![Collect, Process](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+and+processing)  ## Collect ![Collect](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Dev.portal/Architecture+-+Collection+only)  *** ![Telematic sdk](https://website-cliparts-datamotion.s3.us-east-2.amazonaws.com/Github/transportation_small.png)  # Common use-cases: * Safe and efficient driving * Usage-based insurance * Safe driving assessment * Driver assessment * Trip log * Geo-analysis * Accident monitoring * Driving engagements * Location based services * Realtime Tracking and beyond  # How to start * Register a [SANDBOX ACCOUNT](https://userdatahub.com) * Get [CREDENTIALS](https://docs.userdatahub.com/sandbox/credentials)  * Follow the guide from [DEVELOPER POERTAL](https://docs.telematicssdk.com)  # Authentication To create a user on datamotion platform, you require to use InstanceID and InstanceKEY. You can get it in Datahub -> management -> user-service credentials  Once you create a user, you will get Device token, JWT token and refresh token. then, you will use it for APIs
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.V1ScoringsConsolidatedDaily200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Class3ForBackEndOptionalApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Class3ForBackEndOptionalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public Class3ForBackEndOptionalApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1ScoringsConsolidated
     * @param deviceToken  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param tag  (optional)
     * @param instanceId  (optional)
     * @param appId  (optional)
     * @param companyId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call v1ScoringsConsolidatedCall(String deviceToken, String startDate, String endDate, String tag, String instanceId, String appId, String companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statistics/v1/Scorings/consolidated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeviceToken", deviceToken));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Tag", tag));
        }

        if (instanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InstanceId", instanceId));
        }

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AppId", appId));
        }

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CompanyId", companyId));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ScoringsConsolidatedValidateBeforeCall(String deviceToken, String startDate, String endDate, String tag, String instanceId, String appId, String companyId, final ApiCallback _callback) throws ApiException {
        return v1ScoringsConsolidatedCall(deviceToken, startDate, endDate, tag, instanceId, appId, companyId, _callback);

    }

    /**
     * /v1/Scorings/consolidated
     * /v1/Scorings/consolidated
     * @param deviceToken  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param tag  (optional)
     * @param instanceId  (optional)
     * @param appId  (optional)
     * @param companyId  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public void v1ScoringsConsolidated(String deviceToken, String startDate, String endDate, String tag, String instanceId, String appId, String companyId) throws ApiException {
        v1ScoringsConsolidatedWithHttpInfo(deviceToken, startDate, endDate, tag, instanceId, appId, companyId);
    }

    /**
     * /v1/Scorings/consolidated
     * /v1/Scorings/consolidated
     * @param deviceToken  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param tag  (optional)
     * @param instanceId  (optional)
     * @param appId  (optional)
     * @param companyId  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1ScoringsConsolidatedWithHttpInfo(String deviceToken, String startDate, String endDate, String tag, String instanceId, String appId, String companyId) throws ApiException {
        okhttp3.Call localVarCall = v1ScoringsConsolidatedValidateBeforeCall(deviceToken, startDate, endDate, tag, instanceId, appId, companyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * /v1/Scorings/consolidated (asynchronously)
     * /v1/Scorings/consolidated
     * @param deviceToken  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param tag  (optional)
     * @param instanceId  (optional)
     * @param appId  (optional)
     * @param companyId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call v1ScoringsConsolidatedAsync(String deviceToken, String startDate, String endDate, String tag, String instanceId, String appId, String companyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ScoringsConsolidatedValidateBeforeCall(deviceToken, startDate, endDate, tag, instanceId, appId, companyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1ScoringsConsolidatedDaily
     * @param deviceToken  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param tag  (optional)
     * @param instanceId  (optional)
     * @param appId  (optional)
     * @param companyId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call v1ScoringsConsolidatedDailyCall(String deviceToken, String startDate, String endDate, String tag, String instanceId, String appId, String companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statistics/v1/Scorings/consolidated/daily";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeviceToken", deviceToken));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Tag", tag));
        }

        if (instanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InstanceId", instanceId));
        }

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AppId", appId));
        }

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CompanyId", companyId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1ScoringsConsolidatedDailyValidateBeforeCall(String deviceToken, String startDate, String endDate, String tag, String instanceId, String appId, String companyId, final ApiCallback _callback) throws ApiException {
        return v1ScoringsConsolidatedDailyCall(deviceToken, startDate, endDate, tag, instanceId, appId, companyId, _callback);

    }

    /**
     * /v1/Scorings/consolidated/daily
     * /v1/Scorings/consolidated/daily
     * @param deviceToken  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param tag  (optional)
     * @param instanceId  (optional)
     * @param appId  (optional)
     * @param companyId  (optional)
     * @return V1ScoringsConsolidatedDaily200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public V1ScoringsConsolidatedDaily200Response v1ScoringsConsolidatedDaily(String deviceToken, String startDate, String endDate, String tag, String instanceId, String appId, String companyId) throws ApiException {
        ApiResponse<V1ScoringsConsolidatedDaily200Response> localVarResp = v1ScoringsConsolidatedDailyWithHttpInfo(deviceToken, startDate, endDate, tag, instanceId, appId, companyId);
        return localVarResp.getData();
    }

    /**
     * /v1/Scorings/consolidated/daily
     * /v1/Scorings/consolidated/daily
     * @param deviceToken  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param tag  (optional)
     * @param instanceId  (optional)
     * @param appId  (optional)
     * @param companyId  (optional)
     * @return ApiResponse&lt;V1ScoringsConsolidatedDaily200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<V1ScoringsConsolidatedDaily200Response> v1ScoringsConsolidatedDailyWithHttpInfo(String deviceToken, String startDate, String endDate, String tag, String instanceId, String appId, String companyId) throws ApiException {
        okhttp3.Call localVarCall = v1ScoringsConsolidatedDailyValidateBeforeCall(deviceToken, startDate, endDate, tag, instanceId, appId, companyId, null);
        Type localVarReturnType = new TypeToken<V1ScoringsConsolidatedDaily200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * /v1/Scorings/consolidated/daily (asynchronously)
     * /v1/Scorings/consolidated/daily
     * @param deviceToken  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param tag  (optional)
     * @param instanceId  (optional)
     * @param appId  (optional)
     * @param companyId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call v1ScoringsConsolidatedDailyAsync(String deviceToken, String startDate, String endDate, String tag, String instanceId, String appId, String companyId, final ApiCallback<V1ScoringsConsolidatedDaily200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1ScoringsConsolidatedDailyValidateBeforeCall(deviceToken, startDate, endDate, tag, instanceId, appId, companyId, _callback);
        Type localVarReturnType = new TypeToken<V1ScoringsConsolidatedDaily200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1StatisticsConsolidated
     * @param deviceToken  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param tag  (optional)
     * @param instanceId  (optional)
     * @param appId  (optional)
     * @param companyId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call v1StatisticsConsolidatedCall(String deviceToken, String startDate, String endDate, String tag, String instanceId, String appId, String companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statistics/v1/Statistics/consolidated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeviceToken", deviceToken));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Tag", tag));
        }

        if (instanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InstanceId", instanceId));
        }

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AppId", appId));
        }

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CompanyId", companyId));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1StatisticsConsolidatedValidateBeforeCall(String deviceToken, String startDate, String endDate, String tag, String instanceId, String appId, String companyId, final ApiCallback _callback) throws ApiException {
        return v1StatisticsConsolidatedCall(deviceToken, startDate, endDate, tag, instanceId, appId, companyId, _callback);

    }

    /**
     * /v1/Statistics/consolidated
     * /v1/Statistics/consolidated
     * @param deviceToken  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param tag  (optional)
     * @param instanceId  (optional)
     * @param appId  (optional)
     * @param companyId  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public void v1StatisticsConsolidated(String deviceToken, String startDate, String endDate, String tag, String instanceId, String appId, String companyId) throws ApiException {
        v1StatisticsConsolidatedWithHttpInfo(deviceToken, startDate, endDate, tag, instanceId, appId, companyId);
    }

    /**
     * /v1/Statistics/consolidated
     * /v1/Statistics/consolidated
     * @param deviceToken  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param tag  (optional)
     * @param instanceId  (optional)
     * @param appId  (optional)
     * @param companyId  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1StatisticsConsolidatedWithHttpInfo(String deviceToken, String startDate, String endDate, String tag, String instanceId, String appId, String companyId) throws ApiException {
        okhttp3.Call localVarCall = v1StatisticsConsolidatedValidateBeforeCall(deviceToken, startDate, endDate, tag, instanceId, appId, companyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * /v1/Statistics/consolidated (asynchronously)
     * /v1/Statistics/consolidated
     * @param deviceToken  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param tag  (optional)
     * @param instanceId  (optional)
     * @param appId  (optional)
     * @param companyId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call v1StatisticsConsolidatedAsync(String deviceToken, String startDate, String endDate, String tag, String instanceId, String appId, String companyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1StatisticsConsolidatedValidateBeforeCall(deviceToken, startDate, endDate, tag, instanceId, appId, companyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1StatisticsConsolidatedDaily
     * @param deviceToken  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param tag  (optional)
     * @param instanceId  (optional)
     * @param appId  (optional)
     * @param companyId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call v1StatisticsConsolidatedDailyCall(String deviceToken, String startDate, String endDate, String tag, String instanceId, String appId, String companyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/statistics/v1/Statistics/consolidated/daily";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (deviceToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("DeviceToken", deviceToken));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("StartDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("EndDate", endDate));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Tag", tag));
        }

        if (instanceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("InstanceId", instanceId));
        }

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("AppId", appId));
        }

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CompanyId", companyId));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1StatisticsConsolidatedDailyValidateBeforeCall(String deviceToken, String startDate, String endDate, String tag, String instanceId, String appId, String companyId, final ApiCallback _callback) throws ApiException {
        return v1StatisticsConsolidatedDailyCall(deviceToken, startDate, endDate, tag, instanceId, appId, companyId, _callback);

    }

    /**
     * /v1/Statistics/consolidated/daily
     * /v1/Statistics/consolidated/daily
     * @param deviceToken  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param tag  (optional)
     * @param instanceId  (optional)
     * @param appId  (optional)
     * @param companyId  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public void v1StatisticsConsolidatedDaily(String deviceToken, String startDate, String endDate, String tag, String instanceId, String appId, String companyId) throws ApiException {
        v1StatisticsConsolidatedDailyWithHttpInfo(deviceToken, startDate, endDate, tag, instanceId, appId, companyId);
    }

    /**
     * /v1/Statistics/consolidated/daily
     * /v1/Statistics/consolidated/daily
     * @param deviceToken  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param tag  (optional)
     * @param instanceId  (optional)
     * @param appId  (optional)
     * @param companyId  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1StatisticsConsolidatedDailyWithHttpInfo(String deviceToken, String startDate, String endDate, String tag, String instanceId, String appId, String companyId) throws ApiException {
        okhttp3.Call localVarCall = v1StatisticsConsolidatedDailyValidateBeforeCall(deviceToken, startDate, endDate, tag, instanceId, appId, companyId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * /v1/Statistics/consolidated/daily (asynchronously)
     * /v1/Statistics/consolidated/daily
     * @param deviceToken  (optional)
     * @param startDate  (optional)
     * @param endDate  (optional)
     * @param tag  (optional)
     * @param instanceId  (optional)
     * @param appId  (optional)
     * @param companyId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  * Content-Length -  <br>  * Date -  <br>  * Server -  <br>  * Strict-Transport-Security -  <br>  * X-Powered-By -  <br>  * X-StackifyID -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call v1StatisticsConsolidatedDailyAsync(String deviceToken, String startDate, String endDate, String tag, String instanceId, String appId, String companyId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1StatisticsConsolidatedDailyValidateBeforeCall(deviceToken, startDate, endDate, tag, instanceId, appId, companyId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
