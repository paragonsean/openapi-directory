# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SendDatasetFeedbackRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment: str=None, new_values: object=None, recordid: str=None, _schema: object=None):
        """SendDatasetFeedbackRequest - a model defined in OpenAPI

        :param comment: The comment of this SendDatasetFeedbackRequest.
        :param new_values: The new_values of this SendDatasetFeedbackRequest.
        :param recordid: The recordid of this SendDatasetFeedbackRequest.
        :param _schema: The _schema of this SendDatasetFeedbackRequest.
        """
        self.openapi_types = {
            'comment': str,
            'new_values': object,
            'recordid': str,
            '_schema': object
        }

        self.attribute_map = {
            'comment': 'comment',
            'new_values': 'newValues',
            'recordid': 'recordid',
            '_schema': 'schema'
        }

        self._comment = comment
        self._new_values = new_values
        self._recordid = recordid
        self.__schema = _schema

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendDatasetFeedbackRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The sendDatasetFeedback_request of this SendDatasetFeedbackRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self):
        """Gets the comment of this SendDatasetFeedbackRequest.


        :return: The comment of this SendDatasetFeedbackRequest.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this SendDatasetFeedbackRequest.


        :param comment: The comment of this SendDatasetFeedbackRequest.
        :type comment: str
        """

        self._comment = comment

    @property
    def new_values(self):
        """Gets the new_values of this SendDatasetFeedbackRequest.

        New record value

        :return: The new_values of this SendDatasetFeedbackRequest.
        :rtype: object
        """
        return self._new_values

    @new_values.setter
    def new_values(self, new_values):
        """Sets the new_values of this SendDatasetFeedbackRequest.

        New record value

        :param new_values: The new_values of this SendDatasetFeedbackRequest.
        :type new_values: object
        """

        self._new_values = new_values

    @property
    def recordid(self):
        """Gets the recordid of this SendDatasetFeedbackRequest.

        Feedback entry's recordid

        :return: The recordid of this SendDatasetFeedbackRequest.
        :rtype: str
        """
        return self._recordid

    @recordid.setter
    def recordid(self, recordid):
        """Sets the recordid of this SendDatasetFeedbackRequest.

        Feedback entry's recordid

        :param recordid: The recordid of this SendDatasetFeedbackRequest.
        :type recordid: str
        """

        self._recordid = recordid

    @property
    def _schema(self):
        """Gets the _schema of this SendDatasetFeedbackRequest.

        Record schema

        :return: The _schema of this SendDatasetFeedbackRequest.
        :rtype: object
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema):
        """Sets the _schema of this SendDatasetFeedbackRequest.

        Record schema

        :param _schema: The _schema of this SendDatasetFeedbackRequest.
        :type _schema: object
        """

        self.__schema = _schema
