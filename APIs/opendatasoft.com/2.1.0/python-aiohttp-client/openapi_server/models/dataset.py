# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dataset_fields_inner import DatasetFieldsInner
from openapi_server import util


class Dataset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[object]=None, data_visible: bool=None, dataset_id: str=None, features: List[str]=None, fields: List[DatasetFieldsInner]=None, has_records: bool=None, metas: object=None):
        """Dataset - a model defined in OpenAPI

        :param attachments: The attachments of this Dataset.
        :param data_visible: The data_visible of this Dataset.
        :param dataset_id: The dataset_id of this Dataset.
        :param features: The features of this Dataset.
        :param fields: The fields of this Dataset.
        :param has_records: The has_records of this Dataset.
        :param metas: The metas of this Dataset.
        """
        self.openapi_types = {
            'attachments': List[object],
            'data_visible': bool,
            'dataset_id': str,
            'features': List[str],
            'fields': List[DatasetFieldsInner],
            'has_records': bool,
            'metas': object
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'data_visible': 'data_visible',
            'dataset_id': 'dataset_id',
            'features': 'features',
            'fields': 'fields',
            'has_records': 'has_records',
            'metas': 'metas'
        }

        self._attachments = attachments
        self._data_visible = data_visible
        self._dataset_id = dataset_id
        self._features = features
        self._fields = fields
        self._has_records = has_records
        self._metas = metas

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dataset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dataset of this Dataset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this Dataset.


        :return: The attachments of this Dataset.
        :rtype: List[object]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this Dataset.


        :param attachments: The attachments of this Dataset.
        :type attachments: List[object]
        """

        self._attachments = attachments

    @property
    def data_visible(self):
        """Gets the data_visible of this Dataset.


        :return: The data_visible of this Dataset.
        :rtype: bool
        """
        return self._data_visible

    @data_visible.setter
    def data_visible(self, data_visible):
        """Sets the data_visible of this Dataset.


        :param data_visible: The data_visible of this Dataset.
        :type data_visible: bool
        """

        self._data_visible = data_visible

    @property
    def dataset_id(self):
        """Gets the dataset_id of this Dataset.


        :return: The dataset_id of this Dataset.
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this Dataset.


        :param dataset_id: The dataset_id of this Dataset.
        :type dataset_id: str
        """

        self._dataset_id = dataset_id

    @property
    def features(self):
        """Gets the features of this Dataset.

        A map of available features for a dataset, with the fields they apply to. 

        :return: The features of this Dataset.
        :rtype: List[str]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this Dataset.

        A map of available features for a dataset, with the fields they apply to. 

        :param features: The features of this Dataset.
        :type features: List[str]
        """

        self._features = features

    @property
    def fields(self):
        """Gets the fields of this Dataset.


        :return: The fields of this Dataset.
        :rtype: List[DatasetFieldsInner]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this Dataset.


        :param fields: The fields of this Dataset.
        :type fields: List[DatasetFieldsInner]
        """

        self._fields = fields

    @property
    def has_records(self):
        """Gets the has_records of this Dataset.


        :return: The has_records of this Dataset.
        :rtype: bool
        """
        return self._has_records

    @has_records.setter
    def has_records(self, has_records):
        """Sets the has_records of this Dataset.


        :param has_records: The has_records of this Dataset.
        :type has_records: bool
        """

        self._has_records = has_records

    @property
    def metas(self):
        """Gets the metas of this Dataset.


        :return: The metas of this Dataset.
        :rtype: object
        """
        return self._metas

    @metas.setter
    def metas(self, metas):
        """Sets the metas of this Dataset.


        :param metas: The metas of this Dataset.
        :type metas: object
        """

        self._metas = metas
