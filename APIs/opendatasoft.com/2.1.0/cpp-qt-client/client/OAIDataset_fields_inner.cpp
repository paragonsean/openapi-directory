/**
 * opendatasoft
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataset_fields_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataset_fields_inner::OAIDataset_fields_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataset_fields_inner::OAIDataset_fields_inner() {
    this->initializeModel();
}

OAIDataset_fields_inner::~OAIDataset_fields_inner() {}

void OAIDataset_fields_inner::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIDataset_fields_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataset_fields_inner::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIDataset_fields_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataset_fields_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations_isSet) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIObject OAIDataset_fields_inner::getAnnotations() const {
    return m_annotations;
}
void OAIDataset_fields_inner::setAnnotations(const OAIObject &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIDataset_fields_inner::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIDataset_fields_inner::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QString OAIDataset_fields_inner::getDescription() const {
    return m_description;
}
void OAIDataset_fields_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDataset_fields_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDataset_fields_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDataset_fields_inner::getLabel() const {
    return m_label;
}
void OAIDataset_fields_inner::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIDataset_fields_inner::is_label_Set() const{
    return m_label_isSet;
}

bool OAIDataset_fields_inner::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIDataset_fields_inner::getName() const {
    return m_name;
}
void OAIDataset_fields_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataset_fields_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataset_fields_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDataset_fields_inner::getType() const {
    return m_type;
}
void OAIDataset_fields_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIDataset_fields_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIDataset_fields_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIDataset_fields_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataset_fields_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
