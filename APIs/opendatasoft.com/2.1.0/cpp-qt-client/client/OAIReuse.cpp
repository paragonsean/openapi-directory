/**
 * opendatasoft
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReuse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReuse::OAIReuse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReuse::OAIReuse() {
    this->initializeModel();
}

OAIReuse::~OAIReuse() {}

void OAIReuse::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_thumbnail_isSet = false;
    m_thumbnail_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIReuse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReuse::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_thumbnail_isValid = ::OpenAPI::fromJsonValue(m_thumbnail, json[QString("thumbnail")]);
    m_thumbnail_isSet = !json[QString("thumbnail")].isNull() && m_thumbnail_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIReuse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReuse::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_thumbnail_isSet) {
        obj.insert(QString("thumbnail"), ::OpenAPI::toJsonValue(m_thumbnail));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIReuse::getCreatedAt() const {
    return m_created_at;
}
void OAIReuse::setCreatedAt(const QString &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIReuse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIReuse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIObject OAIReuse::getDescription() const {
    return m_description;
}
void OAIReuse::setDescription(const OAIObject &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIReuse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIReuse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIReuse::getId() const {
    return m_id;
}
void OAIReuse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIReuse::is_id_Set() const{
    return m_id_isSet;
}

bool OAIReuse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIReuse::getThumbnail() const {
    return m_thumbnail;
}
void OAIReuse::setThumbnail(const QString &thumbnail) {
    m_thumbnail = thumbnail;
    m_thumbnail_isSet = true;
}

bool OAIReuse::is_thumbnail_Set() const{
    return m_thumbnail_isSet;
}

bool OAIReuse::is_thumbnail_Valid() const{
    return m_thumbnail_isValid;
}

QString OAIReuse::getTitle() const {
    return m_title;
}
void OAIReuse::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIReuse::is_title_Set() const{
    return m_title_isSet;
}

bool OAIReuse::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIReuse::getUrl() const {
    return m_url;
}
void OAIReuse::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIReuse::is_url_Set() const{
    return m_url_isSet;
}

bool OAIReuse::is_url_Valid() const{
    return m_url_isValid;
}

OAIReuse_user OAIReuse::getUser() const {
    return m_user;
}
void OAIReuse::setUser(const OAIReuse_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIReuse::is_user_Set() const{
    return m_user_isSet;
}

bool OAIReuse::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIReuse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReuse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
