/**
 * opendatasoft
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDatasetReuse_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDatasetReuse_200_response::OAIGetDatasetReuse_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDatasetReuse_200_response::OAIGetDatasetReuse_200_response() {
    this->initializeModel();
}

OAIGetDatasetReuse_200_response::~OAIGetDatasetReuse_200_response() {}

void OAIGetDatasetReuse_200_response::initializeModel() {

    m_links_isSet = false;
    m_links_isValid = false;

    m_reuse_isSet = false;
    m_reuse_isValid = false;
}

void OAIGetDatasetReuse_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDatasetReuse_200_response::fromJsonObject(QJsonObject json) {

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_reuse_isValid = ::OpenAPI::fromJsonValue(m_reuse, json[QString("reuse")]);
    m_reuse_isSet = !json[QString("reuse")].isNull() && m_reuse_isValid;
}

QString OAIGetDatasetReuse_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDatasetReuse_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_reuse.isSet()) {
        obj.insert(QString("reuse"), ::OpenAPI::toJsonValue(m_reuse));
    }
    return obj;
}

QList<OAILink> OAIGetDatasetReuse_200_response::getLinks() const {
    return m_links;
}
void OAIGetDatasetReuse_200_response::setLinks(const QList<OAILink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIGetDatasetReuse_200_response::is_links_Set() const{
    return m_links_isSet;
}

bool OAIGetDatasetReuse_200_response::is_links_Valid() const{
    return m_links_isValid;
}

OAIReuse OAIGetDatasetReuse_200_response::getReuse() const {
    return m_reuse;
}
void OAIGetDatasetReuse_200_response::setReuse(const OAIReuse &reuse) {
    m_reuse = reuse;
    m_reuse_isSet = true;
}

bool OAIGetDatasetReuse_200_response::is_reuse_Set() const{
    return m_reuse_isSet;
}

bool OAIGetDatasetReuse_200_response::is_reuse_Valid() const{
    return m_reuse_isValid;
}

bool OAIGetDatasetReuse_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reuse.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDatasetReuse_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
