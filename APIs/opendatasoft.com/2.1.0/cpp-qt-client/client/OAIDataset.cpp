/**
 * opendatasoft
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataset::OAIDataset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataset::OAIDataset() {
    this->initializeModel();
}

OAIDataset::~OAIDataset() {}

void OAIDataset::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_data_visible_isSet = false;
    m_data_visible_isValid = false;

    m_dataset_id_isSet = false;
    m_dataset_id_isValid = false;

    m_features_isSet = false;
    m_features_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_has_records_isSet = false;
    m_has_records_isValid = false;

    m_metas_isSet = false;
    m_metas_isValid = false;
}

void OAIDataset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataset::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_data_visible_isValid = ::OpenAPI::fromJsonValue(m_data_visible, json[QString("data_visible")]);
    m_data_visible_isSet = !json[QString("data_visible")].isNull() && m_data_visible_isValid;

    m_dataset_id_isValid = ::OpenAPI::fromJsonValue(m_dataset_id, json[QString("dataset_id")]);
    m_dataset_id_isSet = !json[QString("dataset_id")].isNull() && m_dataset_id_isValid;

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_has_records_isValid = ::OpenAPI::fromJsonValue(m_has_records, json[QString("has_records")]);
    m_has_records_isSet = !json[QString("has_records")].isNull() && m_has_records_isValid;

    m_metas_isValid = ::OpenAPI::fromJsonValue(m_metas, json[QString("metas")]);
    m_metas_isSet = !json[QString("metas")].isNull() && m_metas_isValid;
}

QString OAIDataset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataset::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_data_visible_isSet) {
        obj.insert(QString("data_visible"), ::OpenAPI::toJsonValue(m_data_visible));
    }
    if (m_dataset_id_isSet) {
        obj.insert(QString("dataset_id"), ::OpenAPI::toJsonValue(m_dataset_id));
    }
    if (m_features.size() > 0) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_fields.size() > 0) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_has_records_isSet) {
        obj.insert(QString("has_records"), ::OpenAPI::toJsonValue(m_has_records));
    }
    if (m_metas_isSet) {
        obj.insert(QString("metas"), ::OpenAPI::toJsonValue(m_metas));
    }
    return obj;
}

QList<OAIObject> OAIDataset::getAttachments() const {
    return m_attachments;
}
void OAIDataset::setAttachments(const QList<OAIObject> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIDataset::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIDataset::is_attachments_Valid() const{
    return m_attachments_isValid;
}

bool OAIDataset::isDataVisible() const {
    return m_data_visible;
}
void OAIDataset::setDataVisible(const bool &data_visible) {
    m_data_visible = data_visible;
    m_data_visible_isSet = true;
}

bool OAIDataset::is_data_visible_Set() const{
    return m_data_visible_isSet;
}

bool OAIDataset::is_data_visible_Valid() const{
    return m_data_visible_isValid;
}

QString OAIDataset::getDatasetId() const {
    return m_dataset_id;
}
void OAIDataset::setDatasetId(const QString &dataset_id) {
    m_dataset_id = dataset_id;
    m_dataset_id_isSet = true;
}

bool OAIDataset::is_dataset_id_Set() const{
    return m_dataset_id_isSet;
}

bool OAIDataset::is_dataset_id_Valid() const{
    return m_dataset_id_isValid;
}

QList<QString> OAIDataset::getFeatures() const {
    return m_features;
}
void OAIDataset::setFeatures(const QList<QString> &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIDataset::is_features_Set() const{
    return m_features_isSet;
}

bool OAIDataset::is_features_Valid() const{
    return m_features_isValid;
}

QList<OAIDataset_fields_inner> OAIDataset::getFields() const {
    return m_fields;
}
void OAIDataset::setFields(const QList<OAIDataset_fields_inner> &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIDataset::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIDataset::is_fields_Valid() const{
    return m_fields_isValid;
}

bool OAIDataset::isHasRecords() const {
    return m_has_records;
}
void OAIDataset::setHasRecords(const bool &has_records) {
    m_has_records = has_records;
    m_has_records_isSet = true;
}

bool OAIDataset::is_has_records_Set() const{
    return m_has_records_isSet;
}

bool OAIDataset::is_has_records_Valid() const{
    return m_has_records_isValid;
}

OAIObject OAIDataset::getMetas() const {
    return m_metas;
}
void OAIDataset::setMetas(const OAIObject &metas) {
    m_metas = metas;
    m_metas_isSet = true;
}

bool OAIDataset::is_metas_Set() const{
    return m_metas_isSet;
}

bool OAIDataset::is_metas_Valid() const{
    return m_metas_isValid;
}

bool OAIDataset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_visible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metas_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
