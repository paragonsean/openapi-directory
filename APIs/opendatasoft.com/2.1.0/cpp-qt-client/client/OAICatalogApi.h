/**
 * opendatasoft
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICatalogApi_H
#define OAI_OAICatalogApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAggregateDatasets_200_response.h"
#include "OAIGetDatasets_200_response.h"
#include "OAIGetRecordsFacets_200_response.h"
#include "OAIGetRoot_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICatalogApi : public QObject {
    Q_OBJECT

public:
    OAICatalogApi(const int timeOut = 0);
    ~OAICatalogApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  source QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  group_by QString [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    */
    virtual void aggregateDatasets(const QString &source, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &group_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  group_by QString [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  pretty bool [optional]
    * @param[in]  timezone QString [optional]
    * @param[in]  include_app_metas bool [optional]
    */
    virtual void getDatasets(const QString &source, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &group_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_app_metas = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    */
    virtual void getDatasetsFacets(const QString &source, const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    */
    virtual void getSource(const QString &source);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void aggregateDatasetsCallback(OAIHttpRequestWorker *worker);
    void getDatasetsCallback(OAIHttpRequestWorker *worker);
    void getDatasetsFacetsCallback(OAIHttpRequestWorker *worker);
    void getSourceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void aggregateDatasetsSignal(OAIAggregateDatasets_200_response summary);
    void getDatasetsSignal(OAIGetDatasets_200_response summary);
    void getDatasetsFacetsSignal(OAIGetRecordsFacets_200_response summary);
    void getSourceSignal(OAIGetRoot_200_response summary);


    void aggregateDatasetsSignalFull(OAIHttpRequestWorker *worker, OAIAggregateDatasets_200_response summary);
    void getDatasetsSignalFull(OAIHttpRequestWorker *worker, OAIGetDatasets_200_response summary);
    void getDatasetsFacetsSignalFull(OAIHttpRequestWorker *worker, OAIGetRecordsFacets_200_response summary);
    void getSourceSignalFull(OAIHttpRequestWorker *worker, OAIGetRoot_200_response summary);

    Q_DECL_DEPRECATED_X("Use aggregateDatasetsSignalError() instead")
    void aggregateDatasetsSignalE(OAIAggregateDatasets_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregateDatasetsSignalError(OAIAggregateDatasets_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetsSignalError() instead")
    void getDatasetsSignalE(OAIGetDatasets_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetsSignalError(OAIGetDatasets_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetsFacetsSignalError() instead")
    void getDatasetsFacetsSignalE(OAIGetRecordsFacets_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetsFacetsSignalError(OAIGetRecordsFacets_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourceSignalError() instead")
    void getSourceSignalE(OAIGetRoot_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceSignalError(OAIGetRoot_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use aggregateDatasetsSignalErrorFull() instead")
    void aggregateDatasetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregateDatasetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetsSignalErrorFull() instead")
    void getDatasetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetsFacetsSignalErrorFull() instead")
    void getDatasetsFacetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetsFacetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourceSignalErrorFull() instead")
    void getSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
