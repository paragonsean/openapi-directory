/**
 * opendatasoft
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOdsApi_H
#define OAI_OAIOdsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAggregateDatasets_200_response.h"
#include "OAIGetDatasetAttachements_200_response.h"
#include "OAIGetDatasetReuse_200_response.h"
#include "OAIGetDatasetReuses_200_response.h"
#include "OAIGetDatasetSnapshots_200_response.h"
#include "OAIGetDatasets_200_response.h"
#include "OAIGetDatasets_200_response_datasets_inner.h"
#include "OAIGetMetadataTemplatesType_200_response.h"
#include "OAIGetMetadataTemplatesType_200_response_metadata_templates_inner.h"
#include "OAIGetPages_200_response.h"
#include "OAIGetPages_200_response_pages_inner.h"
#include "OAIGetRecordsFacets_200_response.h"
#include "OAIGetRecords_200_response.h"
#include "OAIGetRecords_200_response_records_inner.h"
#include "OAIGetRoot_200_response.h"
#include "OAIHttpFileElement.h"
#include "OAISendDatasetFeedback_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOdsApi : public QObject {
    Q_OBJECT

public:
    OAIOdsApi(const int timeOut = 0);
    ~OAIOdsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  source QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  group_by QString [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    */
    virtual void aggregateDatasets(const QString &source, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &group_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  group_by QString [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    */
    virtual void aggregateRecords(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &group_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  attachment_id QString [required]
    */
    virtual void downloadDatasetAttachement(const QString &source, const QString &dataset_id, const QString &attachment_id);

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  snapshot_id QString [required]
    * @param[in]  timezone QString [optional]
    */
    virtual void downloadDatasetSnapshot(const QString &source, const QString &dataset_id, const QString &snapshot_id, const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    * @param[in]  include_app_metas bool [optional]
    * @param[in]  delimiter QString [optional]
    */
    virtual void exportDatasetsCSV(const QString &source, const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_app_metas = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &delimiter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  pretty bool [optional]
    * @param[in]  timezone QString [optional]
    * @param[in]  include_app_metas bool [optional]
    */
    virtual void exportDatasetsJson(const QString &source, const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_app_metas = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    * @param[in]  include_app_metas bool [optional]
    */
    virtual void exportDatasetsRDF(const QString &source, const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_app_metas = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    * @param[in]  include_app_metas bool [optional]
    */
    virtual void exportDatasetsRSS(const QString &source, const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_app_metas = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    * @param[in]  include_app_metas bool [optional]
    */
    virtual void exportDatasetsTTL(const QString &source, const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_app_metas = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    * @param[in]  include_app_metas bool [optional]
    */
    virtual void exportDatasetsXLS(const QString &source, const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_app_metas = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    * @param[in]  delimiter QString [optional]
    */
    virtual void exportRecordsCSV(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &delimiter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    * @param[in]  pretty bool [optional]
    */
    virtual void exportRecordsGEOJSON(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    */
    virtual void exportRecordsICAL(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  pretty bool [optional]
    * @param[in]  timezone QString [optional]
    */
    virtual void exportRecordsJSON(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    */
    virtual void exportRecordsOV2(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    */
    virtual void exportRecordsSHP(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    */
    virtual void exportRecordsXLS(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    */
    virtual void getDatasetAttachements(const QString &source, const QString &dataset_id);

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  file_id QString [required]
    * @param[in]  thumbnail_size QString [optional]
    */
    virtual void getDatasetFile(const QString &source, const QString &dataset_id, const QString &file_id, const ::OpenAPI::OptionalParam<QString> &thumbnail_size = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  reuse_id QString [required]
    * @param[in]  timezone QString [optional]
    */
    virtual void getDatasetReuse(const QString &source, const QString &dataset_id, const QString &reuse_id, const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  timezone QString [optional]
    */
    virtual void getDatasetReuses(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  timezone QString [optional]
    */
    virtual void getDatasetSnapshots(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  pretty bool [optional]
    * @param[in]  timezone QString [optional]
    * @param[in]  include_app_metas bool [optional]
    */
    virtual void getDataset(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_app_metas = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    */
    virtual void getDatasetsFacets(const QString &source, const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  group_by QString [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  pretty bool [optional]
    * @param[in]  timezone QString [optional]
    * @param[in]  include_app_metas bool [optional]
    */
    virtual void getDatasets(const QString &source, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &group_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_app_metas = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  metadata_template_type QString [required]
    * @param[in]  metadata_template_name QString [required]
    */
    virtual void getMetadataTemplate(const QString &source, const QString &metadata_template_type, const QString &metadata_template_name);

    /**
    * @param[in]  source QString [required]
    * @param[in]  metadata_template_type QString [required]
    */
    virtual void getMetadataTemplatesType(const QString &source, const QString &metadata_template_type);

    /**
    * @param[in]  source QString [required]
    */
    virtual void getMetadataTemplatesTypes(const QString &source);

    /**
    * @param[in]  slug QString [required]
    */
    virtual void getPage(const QString &slug);


    virtual void getPages();

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  record_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  pretty bool [optional]
    * @param[in]  timezone QString [optional]
    */
    virtual void getRecord(const QString &source, const QString &dataset_id, const QString &record_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    */
    virtual void getRecordsFacets(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  group_by QString [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  pretty bool [optional]
    * @param[in]  timezone QString [optional]
    */
    virtual void getRecords(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &group_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());


    virtual void getRoot();

    /**
    * @param[in]  source QString [required]
    */
    virtual void getSource(const QString &source);

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  feedback OAISendDatasetFeedback_request [required]
    */
    virtual void sendDatasetFeedback(const QString &source, const QString &dataset_id, const OAISendDatasetFeedback_request &feedback);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void aggregateDatasetsCallback(OAIHttpRequestWorker *worker);
    void aggregateRecordsCallback(OAIHttpRequestWorker *worker);
    void downloadDatasetAttachementCallback(OAIHttpRequestWorker *worker);
    void downloadDatasetSnapshotCallback(OAIHttpRequestWorker *worker);
    void exportDatasetsCSVCallback(OAIHttpRequestWorker *worker);
    void exportDatasetsJsonCallback(OAIHttpRequestWorker *worker);
    void exportDatasetsRDFCallback(OAIHttpRequestWorker *worker);
    void exportDatasetsRSSCallback(OAIHttpRequestWorker *worker);
    void exportDatasetsTTLCallback(OAIHttpRequestWorker *worker);
    void exportDatasetsXLSCallback(OAIHttpRequestWorker *worker);
    void exportRecordsCSVCallback(OAIHttpRequestWorker *worker);
    void exportRecordsGEOJSONCallback(OAIHttpRequestWorker *worker);
    void exportRecordsICALCallback(OAIHttpRequestWorker *worker);
    void exportRecordsJSONCallback(OAIHttpRequestWorker *worker);
    void exportRecordsOV2Callback(OAIHttpRequestWorker *worker);
    void exportRecordsSHPCallback(OAIHttpRequestWorker *worker);
    void exportRecordsXLSCallback(OAIHttpRequestWorker *worker);
    void getDatasetAttachementsCallback(OAIHttpRequestWorker *worker);
    void getDatasetFileCallback(OAIHttpRequestWorker *worker);
    void getDatasetReuseCallback(OAIHttpRequestWorker *worker);
    void getDatasetReusesCallback(OAIHttpRequestWorker *worker);
    void getDatasetSnapshotsCallback(OAIHttpRequestWorker *worker);
    void getDatasetCallback(OAIHttpRequestWorker *worker);
    void getDatasetsFacetsCallback(OAIHttpRequestWorker *worker);
    void getDatasetsCallback(OAIHttpRequestWorker *worker);
    void getMetadataTemplateCallback(OAIHttpRequestWorker *worker);
    void getMetadataTemplatesTypeCallback(OAIHttpRequestWorker *worker);
    void getMetadataTemplatesTypesCallback(OAIHttpRequestWorker *worker);
    void getPageCallback(OAIHttpRequestWorker *worker);
    void getPagesCallback(OAIHttpRequestWorker *worker);
    void getRecordCallback(OAIHttpRequestWorker *worker);
    void getRecordsFacetsCallback(OAIHttpRequestWorker *worker);
    void getRecordsCallback(OAIHttpRequestWorker *worker);
    void getRootCallback(OAIHttpRequestWorker *worker);
    void getSourceCallback(OAIHttpRequestWorker *worker);
    void sendDatasetFeedbackCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void aggregateDatasetsSignal(OAIAggregateDatasets_200_response summary);
    void aggregateRecordsSignal(OAIAggregateDatasets_200_response summary);
    void downloadDatasetAttachementSignal();
    void downloadDatasetSnapshotSignal();
    void exportDatasetsCSVSignal(OAIHttpFileElement summary);
    void exportDatasetsJsonSignal(OAIHttpFileElement summary);
    void exportDatasetsRDFSignal(OAIHttpFileElement summary);
    void exportDatasetsRSSSignal(OAIHttpFileElement summary);
    void exportDatasetsTTLSignal(OAIHttpFileElement summary);
    void exportDatasetsXLSSignal(OAIHttpFileElement summary);
    void exportRecordsCSVSignal(OAIHttpFileElement summary);
    void exportRecordsGEOJSONSignal(OAIHttpFileElement summary);
    void exportRecordsICALSignal(OAIHttpFileElement summary);
    void exportRecordsJSONSignal(OAIHttpFileElement summary);
    void exportRecordsOV2Signal(OAIHttpFileElement summary);
    void exportRecordsSHPSignal(OAIHttpFileElement summary);
    void exportRecordsXLSSignal(OAIHttpFileElement summary);
    void getDatasetAttachementsSignal(OAIGetDatasetAttachements_200_response summary);
    void getDatasetFileSignal();
    void getDatasetReuseSignal(OAIGetDatasetReuse_200_response summary);
    void getDatasetReusesSignal(OAIGetDatasetReuses_200_response summary);
    void getDatasetSnapshotsSignal(OAIGetDatasetSnapshots_200_response summary);
    void getDatasetSignal(OAIGetDatasets_200_response_datasets_inner summary);
    void getDatasetsFacetsSignal(OAIGetRecordsFacets_200_response summary);
    void getDatasetsSignal(OAIGetDatasets_200_response summary);
    void getMetadataTemplateSignal(OAIGetMetadataTemplatesType_200_response_metadata_templates_inner summary);
    void getMetadataTemplatesTypeSignal(OAIGetMetadataTemplatesType_200_response summary);
    void getMetadataTemplatesTypesSignal(OAIGetRoot_200_response summary);
    void getPageSignal(OAIGetPages_200_response_pages_inner summary);
    void getPagesSignal(OAIGetPages_200_response summary);
    void getRecordSignal(OAIGetRecords_200_response_records_inner summary);
    void getRecordsFacetsSignal(OAIGetRecordsFacets_200_response summary);
    void getRecordsSignal(OAIGetRecords_200_response summary);
    void getRootSignal(OAIGetRoot_200_response summary);
    void getSourceSignal(OAIGetRoot_200_response summary);
    void sendDatasetFeedbackSignal();


    void aggregateDatasetsSignalFull(OAIHttpRequestWorker *worker, OAIAggregateDatasets_200_response summary);
    void aggregateRecordsSignalFull(OAIHttpRequestWorker *worker, OAIAggregateDatasets_200_response summary);
    void downloadDatasetAttachementSignalFull(OAIHttpRequestWorker *worker);
    void downloadDatasetSnapshotSignalFull(OAIHttpRequestWorker *worker);
    void exportDatasetsCSVSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void exportDatasetsJsonSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void exportDatasetsRDFSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void exportDatasetsRSSSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void exportDatasetsTTLSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void exportDatasetsXLSSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void exportRecordsCSVSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void exportRecordsGEOJSONSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void exportRecordsICALSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void exportRecordsJSONSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void exportRecordsOV2SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void exportRecordsSHPSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void exportRecordsXLSSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getDatasetAttachementsSignalFull(OAIHttpRequestWorker *worker, OAIGetDatasetAttachements_200_response summary);
    void getDatasetFileSignalFull(OAIHttpRequestWorker *worker);
    void getDatasetReuseSignalFull(OAIHttpRequestWorker *worker, OAIGetDatasetReuse_200_response summary);
    void getDatasetReusesSignalFull(OAIHttpRequestWorker *worker, OAIGetDatasetReuses_200_response summary);
    void getDatasetSnapshotsSignalFull(OAIHttpRequestWorker *worker, OAIGetDatasetSnapshots_200_response summary);
    void getDatasetSignalFull(OAIHttpRequestWorker *worker, OAIGetDatasets_200_response_datasets_inner summary);
    void getDatasetsFacetsSignalFull(OAIHttpRequestWorker *worker, OAIGetRecordsFacets_200_response summary);
    void getDatasetsSignalFull(OAIHttpRequestWorker *worker, OAIGetDatasets_200_response summary);
    void getMetadataTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetMetadataTemplatesType_200_response_metadata_templates_inner summary);
    void getMetadataTemplatesTypeSignalFull(OAIHttpRequestWorker *worker, OAIGetMetadataTemplatesType_200_response summary);
    void getMetadataTemplatesTypesSignalFull(OAIHttpRequestWorker *worker, OAIGetRoot_200_response summary);
    void getPageSignalFull(OAIHttpRequestWorker *worker, OAIGetPages_200_response_pages_inner summary);
    void getPagesSignalFull(OAIHttpRequestWorker *worker, OAIGetPages_200_response summary);
    void getRecordSignalFull(OAIHttpRequestWorker *worker, OAIGetRecords_200_response_records_inner summary);
    void getRecordsFacetsSignalFull(OAIHttpRequestWorker *worker, OAIGetRecordsFacets_200_response summary);
    void getRecordsSignalFull(OAIHttpRequestWorker *worker, OAIGetRecords_200_response summary);
    void getRootSignalFull(OAIHttpRequestWorker *worker, OAIGetRoot_200_response summary);
    void getSourceSignalFull(OAIHttpRequestWorker *worker, OAIGetRoot_200_response summary);
    void sendDatasetFeedbackSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use aggregateDatasetsSignalError() instead")
    void aggregateDatasetsSignalE(OAIAggregateDatasets_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregateDatasetsSignalError(OAIAggregateDatasets_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aggregateRecordsSignalError() instead")
    void aggregateRecordsSignalE(OAIAggregateDatasets_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregateRecordsSignalError(OAIAggregateDatasets_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadDatasetAttachementSignalError() instead")
    void downloadDatasetAttachementSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void downloadDatasetAttachementSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadDatasetSnapshotSignalError() instead")
    void downloadDatasetSnapshotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void downloadDatasetSnapshotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportDatasetsCSVSignalError() instead")
    void exportDatasetsCSVSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportDatasetsCSVSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportDatasetsJsonSignalError() instead")
    void exportDatasetsJsonSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportDatasetsJsonSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportDatasetsRDFSignalError() instead")
    void exportDatasetsRDFSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportDatasetsRDFSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportDatasetsRSSSignalError() instead")
    void exportDatasetsRSSSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportDatasetsRSSSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportDatasetsTTLSignalError() instead")
    void exportDatasetsTTLSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportDatasetsTTLSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportDatasetsXLSSignalError() instead")
    void exportDatasetsXLSSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportDatasetsXLSSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsCSVSignalError() instead")
    void exportRecordsCSVSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsCSVSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsGEOJSONSignalError() instead")
    void exportRecordsGEOJSONSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsGEOJSONSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsICALSignalError() instead")
    void exportRecordsICALSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsICALSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsJSONSignalError() instead")
    void exportRecordsJSONSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsJSONSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsOV2SignalError() instead")
    void exportRecordsOV2SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsOV2SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsSHPSignalError() instead")
    void exportRecordsSHPSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsSHPSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsXLSSignalError() instead")
    void exportRecordsXLSSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsXLSSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetAttachementsSignalError() instead")
    void getDatasetAttachementsSignalE(OAIGetDatasetAttachements_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetAttachementsSignalError(OAIGetDatasetAttachements_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetFileSignalError() instead")
    void getDatasetFileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetFileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetReuseSignalError() instead")
    void getDatasetReuseSignalE(OAIGetDatasetReuse_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetReuseSignalError(OAIGetDatasetReuse_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetReusesSignalError() instead")
    void getDatasetReusesSignalE(OAIGetDatasetReuses_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetReusesSignalError(OAIGetDatasetReuses_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetSnapshotsSignalError() instead")
    void getDatasetSnapshotsSignalE(OAIGetDatasetSnapshots_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetSnapshotsSignalError(OAIGetDatasetSnapshots_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetSignalError() instead")
    void getDatasetSignalE(OAIGetDatasets_200_response_datasets_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetSignalError(OAIGetDatasets_200_response_datasets_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetsFacetsSignalError() instead")
    void getDatasetsFacetsSignalE(OAIGetRecordsFacets_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetsFacetsSignalError(OAIGetRecordsFacets_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetsSignalError() instead")
    void getDatasetsSignalE(OAIGetDatasets_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetsSignalError(OAIGetDatasets_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMetadataTemplateSignalError() instead")
    void getMetadataTemplateSignalE(OAIGetMetadataTemplatesType_200_response_metadata_templates_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMetadataTemplateSignalError(OAIGetMetadataTemplatesType_200_response_metadata_templates_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMetadataTemplatesTypeSignalError() instead")
    void getMetadataTemplatesTypeSignalE(OAIGetMetadataTemplatesType_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMetadataTemplatesTypeSignalError(OAIGetMetadataTemplatesType_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMetadataTemplatesTypesSignalError() instead")
    void getMetadataTemplatesTypesSignalE(OAIGetRoot_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMetadataTemplatesTypesSignalError(OAIGetRoot_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPageSignalError() instead")
    void getPageSignalE(OAIGetPages_200_response_pages_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPageSignalError(OAIGetPages_200_response_pages_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPagesSignalError() instead")
    void getPagesSignalE(OAIGetPages_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPagesSignalError(OAIGetPages_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordSignalError() instead")
    void getRecordSignalE(OAIGetRecords_200_response_records_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordSignalError(OAIGetRecords_200_response_records_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordsFacetsSignalError() instead")
    void getRecordsFacetsSignalE(OAIGetRecordsFacets_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordsFacetsSignalError(OAIGetRecordsFacets_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordsSignalError() instead")
    void getRecordsSignalE(OAIGetRecords_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordsSignalError(OAIGetRecords_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRootSignalError() instead")
    void getRootSignalE(OAIGetRoot_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRootSignalError(OAIGetRoot_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourceSignalError() instead")
    void getSourceSignalE(OAIGetRoot_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceSignalError(OAIGetRoot_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendDatasetFeedbackSignalError() instead")
    void sendDatasetFeedbackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sendDatasetFeedbackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use aggregateDatasetsSignalErrorFull() instead")
    void aggregateDatasetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregateDatasetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use aggregateRecordsSignalErrorFull() instead")
    void aggregateRecordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregateRecordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadDatasetAttachementSignalErrorFull() instead")
    void downloadDatasetAttachementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadDatasetAttachementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadDatasetSnapshotSignalErrorFull() instead")
    void downloadDatasetSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadDatasetSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportDatasetsCSVSignalErrorFull() instead")
    void exportDatasetsCSVSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportDatasetsCSVSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportDatasetsJsonSignalErrorFull() instead")
    void exportDatasetsJsonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportDatasetsJsonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportDatasetsRDFSignalErrorFull() instead")
    void exportDatasetsRDFSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportDatasetsRDFSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportDatasetsRSSSignalErrorFull() instead")
    void exportDatasetsRSSSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportDatasetsRSSSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportDatasetsTTLSignalErrorFull() instead")
    void exportDatasetsTTLSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportDatasetsTTLSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportDatasetsXLSSignalErrorFull() instead")
    void exportDatasetsXLSSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportDatasetsXLSSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsCSVSignalErrorFull() instead")
    void exportRecordsCSVSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsCSVSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsGEOJSONSignalErrorFull() instead")
    void exportRecordsGEOJSONSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsGEOJSONSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsICALSignalErrorFull() instead")
    void exportRecordsICALSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsICALSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsJSONSignalErrorFull() instead")
    void exportRecordsJSONSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsJSONSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsOV2SignalErrorFull() instead")
    void exportRecordsOV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsOV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsSHPSignalErrorFull() instead")
    void exportRecordsSHPSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsSHPSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsXLSSignalErrorFull() instead")
    void exportRecordsXLSSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsXLSSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetAttachementsSignalErrorFull() instead")
    void getDatasetAttachementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetAttachementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetFileSignalErrorFull() instead")
    void getDatasetFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetReuseSignalErrorFull() instead")
    void getDatasetReuseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetReuseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetReusesSignalErrorFull() instead")
    void getDatasetReusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetReusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetSnapshotsSignalErrorFull() instead")
    void getDatasetSnapshotsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetSnapshotsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetSignalErrorFull() instead")
    void getDatasetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetsFacetsSignalErrorFull() instead")
    void getDatasetsFacetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetsFacetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetsSignalErrorFull() instead")
    void getDatasetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMetadataTemplateSignalErrorFull() instead")
    void getMetadataTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMetadataTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMetadataTemplatesTypeSignalErrorFull() instead")
    void getMetadataTemplatesTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMetadataTemplatesTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMetadataTemplatesTypesSignalErrorFull() instead")
    void getMetadataTemplatesTypesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMetadataTemplatesTypesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPageSignalErrorFull() instead")
    void getPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPagesSignalErrorFull() instead")
    void getPagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordSignalErrorFull() instead")
    void getRecordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordsFacetsSignalErrorFull() instead")
    void getRecordsFacetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordsFacetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordsSignalErrorFull() instead")
    void getRecordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRootSignalErrorFull() instead")
    void getRootSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRootSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSourceSignalErrorFull() instead")
    void getSourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendDatasetFeedbackSignalErrorFull() instead")
    void sendDatasetFeedbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendDatasetFeedbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
