/**
 * opendatasoft
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecord::OAIRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecord::OAIRecord() {
    this->initializeModel();
}

OAIRecord::~OAIRecord() {}

void OAIRecord::initializeModel() {

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;
}

void OAIRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecord::fromJsonObject(QJsonObject json) {

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;
}

QString OAIRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_fields_isSet) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    return obj;
}

OAIObject OAIRecord::getFields() const {
    return m_fields;
}
void OAIRecord::setFields(const OAIObject &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAIRecord::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAIRecord::is_fields_Valid() const{
    return m_fields_isValid;
}

QString OAIRecord::getId() const {
    return m_id;
}
void OAIRecord::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRecord::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRecord::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIRecord::getSize() const {
    return m_size;
}
void OAIRecord::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIRecord::is_size_Set() const{
    return m_size_isSet;
}

bool OAIRecord::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIRecord::getTimestamp() const {
    return m_timestamp;
}
void OAIRecord::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIRecord::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIRecord::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

bool OAIRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
