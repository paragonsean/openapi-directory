/**
 * opendatasoft
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendDatasetFeedback_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendDatasetFeedback_request::OAISendDatasetFeedback_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendDatasetFeedback_request::OAISendDatasetFeedback_request() {
    this->initializeModel();
}

OAISendDatasetFeedback_request::~OAISendDatasetFeedback_request() {}

void OAISendDatasetFeedback_request::initializeModel() {

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_new_values_isSet = false;
    m_new_values_isValid = false;

    m_recordid_isSet = false;
    m_recordid_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;
}

void OAISendDatasetFeedback_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendDatasetFeedback_request::fromJsonObject(QJsonObject json) {

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_new_values_isValid = ::OpenAPI::fromJsonValue(m_new_values, json[QString("newValues")]);
    m_new_values_isSet = !json[QString("newValues")].isNull() && m_new_values_isValid;

    m_recordid_isValid = ::OpenAPI::fromJsonValue(m_recordid, json[QString("recordid")]);
    m_recordid_isSet = !json[QString("recordid")].isNull() && m_recordid_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("schema")]);
    m_schema_isSet = !json[QString("schema")].isNull() && m_schema_isValid;
}

QString OAISendDatasetFeedback_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendDatasetFeedback_request::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_new_values_isSet) {
        obj.insert(QString("newValues"), ::OpenAPI::toJsonValue(m_new_values));
    }
    if (m_recordid_isSet) {
        obj.insert(QString("recordid"), ::OpenAPI::toJsonValue(m_recordid));
    }
    if (m_schema_isSet) {
        obj.insert(QString("schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    return obj;
}

QString OAISendDatasetFeedback_request::getComment() const {
    return m_comment;
}
void OAISendDatasetFeedback_request::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAISendDatasetFeedback_request::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAISendDatasetFeedback_request::is_comment_Valid() const{
    return m_comment_isValid;
}

OAIObject OAISendDatasetFeedback_request::getNewValues() const {
    return m_new_values;
}
void OAISendDatasetFeedback_request::setNewValues(const OAIObject &new_values) {
    m_new_values = new_values;
    m_new_values_isSet = true;
}

bool OAISendDatasetFeedback_request::is_new_values_Set() const{
    return m_new_values_isSet;
}

bool OAISendDatasetFeedback_request::is_new_values_Valid() const{
    return m_new_values_isValid;
}

QString OAISendDatasetFeedback_request::getRecordid() const {
    return m_recordid;
}
void OAISendDatasetFeedback_request::setRecordid(const QString &recordid) {
    m_recordid = recordid;
    m_recordid_isSet = true;
}

bool OAISendDatasetFeedback_request::is_recordid_Set() const{
    return m_recordid_isSet;
}

bool OAISendDatasetFeedback_request::is_recordid_Valid() const{
    return m_recordid_isValid;
}

OAIObject OAISendDatasetFeedback_request::getSchema() const {
    return m_schema;
}
void OAISendDatasetFeedback_request::setSchema(const OAIObject &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAISendDatasetFeedback_request::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAISendDatasetFeedback_request::is_schema_Valid() const{
    return m_schema_isValid;
}

bool OAISendDatasetFeedback_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_values_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recordid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendDatasetFeedback_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
