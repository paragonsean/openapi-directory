/**
 * opendatasoft
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExportDatasetApi_H
#define OAI_OAIExportDatasetApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExportDatasetApi : public QObject {
    Q_OBJECT

public:
    OAIExportDatasetApi(const int timeOut = 0);
    ~OAIExportDatasetApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    * @param[in]  delimiter QString [optional]
    */
    virtual void exportRecordsCSV(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &delimiter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    * @param[in]  pretty bool [optional]
    */
    virtual void exportRecordsGEOJSON(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    */
    virtual void exportRecordsICAL(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  pretty bool [optional]
    * @param[in]  timezone QString [optional]
    */
    virtual void exportRecordsJSON(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    */
    virtual void exportRecordsOV2(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    */
    virtual void exportRecordsSHP(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    */
    virtual void exportRecordsXLS(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void exportRecordsCSVCallback(OAIHttpRequestWorker *worker);
    void exportRecordsGEOJSONCallback(OAIHttpRequestWorker *worker);
    void exportRecordsICALCallback(OAIHttpRequestWorker *worker);
    void exportRecordsJSONCallback(OAIHttpRequestWorker *worker);
    void exportRecordsOV2Callback(OAIHttpRequestWorker *worker);
    void exportRecordsSHPCallback(OAIHttpRequestWorker *worker);
    void exportRecordsXLSCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void exportRecordsCSVSignal(OAIHttpFileElement summary);
    void exportRecordsGEOJSONSignal(OAIHttpFileElement summary);
    void exportRecordsICALSignal(OAIHttpFileElement summary);
    void exportRecordsJSONSignal(OAIHttpFileElement summary);
    void exportRecordsOV2Signal(OAIHttpFileElement summary);
    void exportRecordsSHPSignal(OAIHttpFileElement summary);
    void exportRecordsXLSSignal(OAIHttpFileElement summary);


    void exportRecordsCSVSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void exportRecordsGEOJSONSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void exportRecordsICALSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void exportRecordsJSONSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void exportRecordsOV2SignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void exportRecordsSHPSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void exportRecordsXLSSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);

    Q_DECL_DEPRECATED_X("Use exportRecordsCSVSignalError() instead")
    void exportRecordsCSVSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsCSVSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsGEOJSONSignalError() instead")
    void exportRecordsGEOJSONSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsGEOJSONSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsICALSignalError() instead")
    void exportRecordsICALSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsICALSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsJSONSignalError() instead")
    void exportRecordsJSONSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsJSONSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsOV2SignalError() instead")
    void exportRecordsOV2SignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsOV2SignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsSHPSignalError() instead")
    void exportRecordsSHPSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsSHPSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsXLSSignalError() instead")
    void exportRecordsXLSSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsXLSSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use exportRecordsCSVSignalErrorFull() instead")
    void exportRecordsCSVSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsCSVSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsGEOJSONSignalErrorFull() instead")
    void exportRecordsGEOJSONSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsGEOJSONSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsICALSignalErrorFull() instead")
    void exportRecordsICALSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsICALSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsJSONSignalErrorFull() instead")
    void exportRecordsJSONSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsJSONSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsOV2SignalErrorFull() instead")
    void exportRecordsOV2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsOV2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsSHPSignalErrorFull() instead")
    void exportRecordsSHPSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsSHPSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRecordsXLSSignalErrorFull() instead")
    void exportRecordsXLSSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRecordsXLSSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
