/**
 * opendatasoft
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDatasetApi_H
#define OAI_OAIDatasetApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAggregateDatasets_200_response.h"
#include "OAIGetDatasetAttachements_200_response.h"
#include "OAIGetDatasetReuse_200_response.h"
#include "OAIGetDatasetReuses_200_response.h"
#include "OAIGetDatasetSnapshots_200_response.h"
#include "OAIGetDatasets_200_response_datasets_inner.h"
#include "OAIGetRecordsFacets_200_response.h"
#include "OAIGetRecords_200_response.h"
#include "OAIGetRecords_200_response_records_inner.h"
#include "OAISendDatasetFeedback_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDatasetApi : public QObject {
    Q_OBJECT

public:
    OAIDatasetApi(const int timeOut = 0);
    ~OAIDatasetApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  group_by QString [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    */
    virtual void aggregateRecords(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &group_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  attachment_id QString [required]
    */
    virtual void downloadDatasetAttachement(const QString &source, const QString &dataset_id, const QString &attachment_id);

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  snapshot_id QString [required]
    * @param[in]  timezone QString [optional]
    */
    virtual void downloadDatasetSnapshot(const QString &source, const QString &dataset_id, const QString &snapshot_id, const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  pretty bool [optional]
    * @param[in]  timezone QString [optional]
    * @param[in]  include_app_metas bool [optional]
    */
    virtual void getDataset(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_app_metas = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    */
    virtual void getDatasetAttachements(const QString &source, const QString &dataset_id);

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  file_id QString [required]
    * @param[in]  thumbnail_size QString [optional]
    */
    virtual void getDatasetFile(const QString &source, const QString &dataset_id, const QString &file_id, const ::OpenAPI::OptionalParam<QString> &thumbnail_size = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  reuse_id QString [required]
    * @param[in]  timezone QString [optional]
    */
    virtual void getDatasetReuse(const QString &source, const QString &dataset_id, const QString &reuse_id, const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  timezone QString [optional]
    */
    virtual void getDatasetReuses(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  timezone QString [optional]
    */
    virtual void getDatasetSnapshots(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  record_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  pretty bool [optional]
    * @param[in]  timezone QString [optional]
    */
    virtual void getRecord(const QString &source, const QString &dataset_id, const QString &record_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  select QString [optional]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  group_by QString [optional]
    * @param[in]  sort QList<QString> [optional]
    * @param[in]  order_by QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  pretty bool [optional]
    * @param[in]  timezone QString [optional]
    */
    virtual void getRecords(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &group_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &sort = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &order_by = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &pretty = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  where QList<QString> [optional]
    * @param[in]  facet QList<QString> [optional]
    * @param[in]  refine QList<QString> [optional]
    * @param[in]  exclude QList<QString> [optional]
    * @param[in]  search QList<QString> [optional]
    * @param[in]  timezone QString [optional]
    */
    virtual void getRecordsFacets(const QString &source, const QString &dataset_id, const ::OpenAPI::OptionalParam<QList<QString>> &where = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &facet = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &refine = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &exclude = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &search = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &timezone = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  dataset_id QString [required]
    * @param[in]  feedback OAISendDatasetFeedback_request [required]
    */
    virtual void sendDatasetFeedback(const QString &source, const QString &dataset_id, const OAISendDatasetFeedback_request &feedback);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void aggregateRecordsCallback(OAIHttpRequestWorker *worker);
    void downloadDatasetAttachementCallback(OAIHttpRequestWorker *worker);
    void downloadDatasetSnapshotCallback(OAIHttpRequestWorker *worker);
    void getDatasetCallback(OAIHttpRequestWorker *worker);
    void getDatasetAttachementsCallback(OAIHttpRequestWorker *worker);
    void getDatasetFileCallback(OAIHttpRequestWorker *worker);
    void getDatasetReuseCallback(OAIHttpRequestWorker *worker);
    void getDatasetReusesCallback(OAIHttpRequestWorker *worker);
    void getDatasetSnapshotsCallback(OAIHttpRequestWorker *worker);
    void getRecordCallback(OAIHttpRequestWorker *worker);
    void getRecordsCallback(OAIHttpRequestWorker *worker);
    void getRecordsFacetsCallback(OAIHttpRequestWorker *worker);
    void sendDatasetFeedbackCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void aggregateRecordsSignal(OAIAggregateDatasets_200_response summary);
    void downloadDatasetAttachementSignal();
    void downloadDatasetSnapshotSignal();
    void getDatasetSignal(OAIGetDatasets_200_response_datasets_inner summary);
    void getDatasetAttachementsSignal(OAIGetDatasetAttachements_200_response summary);
    void getDatasetFileSignal();
    void getDatasetReuseSignal(OAIGetDatasetReuse_200_response summary);
    void getDatasetReusesSignal(OAIGetDatasetReuses_200_response summary);
    void getDatasetSnapshotsSignal(OAIGetDatasetSnapshots_200_response summary);
    void getRecordSignal(OAIGetRecords_200_response_records_inner summary);
    void getRecordsSignal(OAIGetRecords_200_response summary);
    void getRecordsFacetsSignal(OAIGetRecordsFacets_200_response summary);
    void sendDatasetFeedbackSignal();


    void aggregateRecordsSignalFull(OAIHttpRequestWorker *worker, OAIAggregateDatasets_200_response summary);
    void downloadDatasetAttachementSignalFull(OAIHttpRequestWorker *worker);
    void downloadDatasetSnapshotSignalFull(OAIHttpRequestWorker *worker);
    void getDatasetSignalFull(OAIHttpRequestWorker *worker, OAIGetDatasets_200_response_datasets_inner summary);
    void getDatasetAttachementsSignalFull(OAIHttpRequestWorker *worker, OAIGetDatasetAttachements_200_response summary);
    void getDatasetFileSignalFull(OAIHttpRequestWorker *worker);
    void getDatasetReuseSignalFull(OAIHttpRequestWorker *worker, OAIGetDatasetReuse_200_response summary);
    void getDatasetReusesSignalFull(OAIHttpRequestWorker *worker, OAIGetDatasetReuses_200_response summary);
    void getDatasetSnapshotsSignalFull(OAIHttpRequestWorker *worker, OAIGetDatasetSnapshots_200_response summary);
    void getRecordSignalFull(OAIHttpRequestWorker *worker, OAIGetRecords_200_response_records_inner summary);
    void getRecordsSignalFull(OAIHttpRequestWorker *worker, OAIGetRecords_200_response summary);
    void getRecordsFacetsSignalFull(OAIHttpRequestWorker *worker, OAIGetRecordsFacets_200_response summary);
    void sendDatasetFeedbackSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use aggregateRecordsSignalError() instead")
    void aggregateRecordsSignalE(OAIAggregateDatasets_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregateRecordsSignalError(OAIAggregateDatasets_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadDatasetAttachementSignalError() instead")
    void downloadDatasetAttachementSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void downloadDatasetAttachementSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadDatasetSnapshotSignalError() instead")
    void downloadDatasetSnapshotSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void downloadDatasetSnapshotSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetSignalError() instead")
    void getDatasetSignalE(OAIGetDatasets_200_response_datasets_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetSignalError(OAIGetDatasets_200_response_datasets_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetAttachementsSignalError() instead")
    void getDatasetAttachementsSignalE(OAIGetDatasetAttachements_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetAttachementsSignalError(OAIGetDatasetAttachements_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetFileSignalError() instead")
    void getDatasetFileSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetFileSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetReuseSignalError() instead")
    void getDatasetReuseSignalE(OAIGetDatasetReuse_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetReuseSignalError(OAIGetDatasetReuse_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetReusesSignalError() instead")
    void getDatasetReusesSignalE(OAIGetDatasetReuses_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetReusesSignalError(OAIGetDatasetReuses_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetSnapshotsSignalError() instead")
    void getDatasetSnapshotsSignalE(OAIGetDatasetSnapshots_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetSnapshotsSignalError(OAIGetDatasetSnapshots_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordSignalError() instead")
    void getRecordSignalE(OAIGetRecords_200_response_records_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordSignalError(OAIGetRecords_200_response_records_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordsSignalError() instead")
    void getRecordsSignalE(OAIGetRecords_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordsSignalError(OAIGetRecords_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordsFacetsSignalError() instead")
    void getRecordsFacetsSignalE(OAIGetRecordsFacets_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordsFacetsSignalError(OAIGetRecordsFacets_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendDatasetFeedbackSignalError() instead")
    void sendDatasetFeedbackSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sendDatasetFeedbackSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use aggregateRecordsSignalErrorFull() instead")
    void aggregateRecordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void aggregateRecordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadDatasetAttachementSignalErrorFull() instead")
    void downloadDatasetAttachementSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadDatasetAttachementSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadDatasetSnapshotSignalErrorFull() instead")
    void downloadDatasetSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadDatasetSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetSignalErrorFull() instead")
    void getDatasetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetAttachementsSignalErrorFull() instead")
    void getDatasetAttachementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetAttachementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetFileSignalErrorFull() instead")
    void getDatasetFileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetFileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetReuseSignalErrorFull() instead")
    void getDatasetReuseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetReuseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetReusesSignalErrorFull() instead")
    void getDatasetReusesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetReusesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDatasetSnapshotsSignalErrorFull() instead")
    void getDatasetSnapshotsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDatasetSnapshotsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordSignalErrorFull() instead")
    void getRecordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordsSignalErrorFull() instead")
    void getRecordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecordsFacetsSignalErrorFull() instead")
    void getRecordsFacetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecordsFacetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendDatasetFeedbackSignalErrorFull() instead")
    void sendDatasetFeedbackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendDatasetFeedbackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
