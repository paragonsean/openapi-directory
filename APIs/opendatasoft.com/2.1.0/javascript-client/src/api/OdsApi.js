/**
 * opendatasoft
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AggregateDatasets200Response from '../model/AggregateDatasets200Response';
import GetDatasetAttachements200Response from '../model/GetDatasetAttachements200Response';
import GetDatasetReuse200Response from '../model/GetDatasetReuse200Response';
import GetDatasetReuses200Response from '../model/GetDatasetReuses200Response';
import GetDatasetSnapshots200Response from '../model/GetDatasetSnapshots200Response';
import GetDatasets200Response from '../model/GetDatasets200Response';
import GetDatasets200ResponseDatasetsInner from '../model/GetDatasets200ResponseDatasetsInner';
import GetMetadataTemplatesType200Response from '../model/GetMetadataTemplatesType200Response';
import GetMetadataTemplatesType200ResponseMetadataTemplatesInner from '../model/GetMetadataTemplatesType200ResponseMetadataTemplatesInner';
import GetPages200Response from '../model/GetPages200Response';
import GetPages200ResponsePagesInner from '../model/GetPages200ResponsePagesInner';
import GetRecords200Response from '../model/GetRecords200Response';
import GetRecords200ResponseRecordsInner from '../model/GetRecords200ResponseRecordsInner';
import GetRecordsFacets200Response from '../model/GetRecordsFacets200Response';
import GetRoot200Response from '../model/GetRoot200Response';
import SendDatasetFeedbackRequest from '../model/SendDatasetFeedbackRequest';

/**
* Ods service.
* @module api/OdsApi
* @version 2.1.0
*/
export default class OdsApi {

    /**
    * Constructs a new OdsApi. 
    * @alias module:api/OdsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the aggregateDatasets_1 operation.
     * @callback module:api/OdsApi~aggregateDatasets_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AggregateDatasets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * **Deprecated, use `/datasets` instead.** 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {Object} opts Optional parameters
     * @param {String} [select] A select expression can be used to add, remove or change fields to return. An expression can be:   - a wildcard ('*'): return all fields   - a field name: return only this field   - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'   - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value. 
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {String} [groupBy] A group by expression defines a grouping function for an aggregation. It can be:  - a field name: group result by each value of this field  - a range function: group result by range  - a date function: group result by date It is possible to specify a custom name with the 'as name' notation. For instance: group_by='city_field as city'. 
     * @param {Array.<String>} [orderBy] A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).  Sorts results according to the specified fields' values in ascending order by default. To sort results in descending order, use the `desc` keyword.  Example: `sum(age) desc, name asc` 
     * @param {Number} [limit = 10)] Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10. 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {module:api/OdsApi~aggregateDatasets_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AggregateDatasets200Response}
     */
    aggregateDatasets_1(source, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling aggregateDatasets_1");
      }

      let pathParams = {
        'source': source
      };
      let queryParams = {
        'select': opts['select'],
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'group_by': opts['groupBy'],
        'order_by': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AggregateDatasets200Response;
      return this.apiClient.callApi(
        '/{source}/aggregates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the aggregateRecords_1 operation.
     * @callback module:api/OdsApi~aggregateRecords_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AggregateDatasets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * **Deprecated, use `/records` instead.** 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {String} [select] A select expression can be used to add, remove or change fields to return. An expression can be:   - a wildcard ('*'): return all fields   - a field name: return only this field   - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'   - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value. 
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {String} [groupBy] A group by expression defines a grouping function for an aggregation. It can be:  - a field name: group result by each value of this field  - a range function: group result by range  - a date function: group result by date It is possible to specify a custom name with the 'as name' notation. For instance: group_by='city_field as city'. 
     * @param {Array.<String>} [orderBy] A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).  Sorts results according to the specified fields' values in ascending order by default. To sort results in descending order, use the `desc` keyword.  Example: `sum(age) desc, name asc` 
     * @param {Number} [limit = 10)] Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10. 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {module:api/OdsApi~aggregateRecords_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AggregateDatasets200Response}
     */
    aggregateRecords_1(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling aggregateRecords_1");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling aggregateRecords_1");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'select': opts['select'],
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'group_by': opts['groupBy'],
        'order_by': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AggregateDatasets200Response;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/aggregates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadDatasetAttachement_0 operation.
     * @callback module:api/OdsApi~downloadDatasetAttachement_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download attachment 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {String} attachmentId 
     * @param {module:api/OdsApi~downloadDatasetAttachement_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadDatasetAttachement_0(source, datasetId, attachmentId, callback) {
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling downloadDatasetAttachement_0");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling downloadDatasetAttachement_0");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling downloadDatasetAttachement_0");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/attachments/{attachment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadDatasetSnapshot_0 operation.
     * @callback module:api/OdsApi~downloadDatasetSnapshot_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of all snapshots for this dataset. 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {String} snapshotId 
     * @param {Object} opts Optional parameters
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:api/OdsApi~downloadDatasetSnapshot_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    downloadDatasetSnapshot_0(source, datasetId, snapshotId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling downloadDatasetSnapshot_0");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling downloadDatasetSnapshot_0");
      }
      // verify the required parameter 'snapshotId' is set
      if (snapshotId === undefined || snapshotId === null) {
        throw new Error("Missing the required parameter 'snapshotId' when calling downloadDatasetSnapshot_0");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId,
        'snapshot_id': snapshotId
      };
      let queryParams = {
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/snapshots/{snapshot_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportDatasetsCSV_0 operation.
     * @callback module:api/OdsApi~exportDatasetsCSV_0Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export catalog (source) in CSV format 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Number} [limit = 10)] Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10. 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {Boolean} [includeAppMetas = false)] Explicitely request application metas for each datasets. 
     * @param {module:model/String} [delimiter = ';')] Provide a different delimiter (default ',').
     * @param {module:api/OdsApi~exportDatasetsCSV_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportDatasetsCSV_0(source, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling exportDatasetsCSV_0");
      }

      let pathParams = {
        'source': source
      };
      let queryParams = {
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'timezone': opts['timezone'],
        'include_app_metas': opts['includeAppMetas'],
        'delimiter': opts['delimiter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['text/csv'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{source}/exports/csv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportDatasetsJson_0 operation.
     * @callback module:api/OdsApi~exportDatasetsJson_0Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export catalog (source) in JSON format 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Number} [limit = 10)] Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10. 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {Boolean} [pretty = false)] Activate pretty print
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {Boolean} [includeAppMetas = false)] Explicitely request application metas for each datasets. 
     * @param {module:api/OdsApi~exportDatasetsJson_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportDatasetsJson_0(source, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling exportDatasetsJson_0");
      }

      let pathParams = {
        'source': source
      };
      let queryParams = {
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'pretty': opts['pretty'],
        'timezone': opts['timezone'],
        'include_app_metas': opts['includeAppMetas']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{source}/exports/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportDatasetsRDF_0 operation.
     * @callback module:api/OdsApi~exportDatasetsRDF_0Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export catalog (source) in RDF/XML format 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Number} [limit = 10)] Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10. 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {Boolean} [includeAppMetas = false)] Explicitely request application metas for each datasets. 
     * @param {module:api/OdsApi~exportDatasetsRDF_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportDatasetsRDF_0(source, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling exportDatasetsRDF_0");
      }

      let pathParams = {
        'source': source
      };
      let queryParams = {
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'timezone': opts['timezone'],
        'include_app_metas': opts['includeAppMetas']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/rdf+xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{source}/exports/rdf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportDatasetsRSS_0 operation.
     * @callback module:api/OdsApi~exportDatasetsRSS_0Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export catalog (source) in RSS format 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Number} [limit = 10)] Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10. 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {Boolean} [includeAppMetas = false)] Explicitely request application metas for each datasets. 
     * @param {module:api/OdsApi~exportDatasetsRSS_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportDatasetsRSS_0(source, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling exportDatasetsRSS_0");
      }

      let pathParams = {
        'source': source
      };
      let queryParams = {
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'timezone': opts['timezone'],
        'include_app_metas': opts['includeAppMetas']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['text/xml'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{source}/exports/rss', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportDatasetsTTL_0 operation.
     * @callback module:api/OdsApi~exportDatasetsTTL_0Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export catalog (source) in TTL (turtle/rdf) format 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Number} [limit = 10)] Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10. 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {Boolean} [includeAppMetas = false)] Explicitely request application metas for each datasets. 
     * @param {module:api/OdsApi~exportDatasetsTTL_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportDatasetsTTL_0(source, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling exportDatasetsTTL_0");
      }

      let pathParams = {
        'source': source
      };
      let queryParams = {
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'timezone': opts['timezone'],
        'include_app_metas': opts['includeAppMetas']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['text/turtle'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{source}/exports/ttl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportDatasetsXLS_0 operation.
     * @callback module:api/OdsApi~exportDatasetsXLS_0Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export catalog (source) in XLS (Excel) format 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Number} [limit = 10)] Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10. 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {Boolean} [includeAppMetas = false)] Explicitely request application metas for each datasets. 
     * @param {module:api/OdsApi~exportDatasetsXLS_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportDatasetsXLS_0(source, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling exportDatasetsXLS_0");
      }

      let pathParams = {
        'source': source
      };
      let queryParams = {
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'timezone': opts['timezone'],
        'include_app_metas': opts['includeAppMetas']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['xls'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{source}/exports/xls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportRecordsCSV_0 operation.
     * @callback module:api/OdsApi~exportRecordsCSV_0Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export dataset in CSV format 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {String} [select] A select expression can be used to add, remove or change fields to return. An expression can be:   - a wildcard ('*'): return all fields   - a field name: return only this field   - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'   - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value. 
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Array.<String>} [sort] **Deprecated, use `order_by` instead.**  A list of field names, each possibly prefixed with a minus (-).  Sorts results according to the specified fields' values. By default, the sort is ascending (from the smallest value to the biggest value). A minus sign (‘-‘) may be used to perform a descending sort. Sorting is only available on numeric fields (int, double, date and datetime) and on text fields which have the sortable annotation. 
     * @param {Array.<String>} [orderBy] A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).  Sorts results according to the specified fields' values in ascending order by default. To sort results in descending order, use the `desc` keyword.  Example: `sum(age) desc, name asc` 
     * @param {Number} [limit = -1)] Number of items to return in export.  Use -1 (default) to retrieve all records 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:model/String} [delimiter = ';')] Provide a different delimiter (default ',').
     * @param {module:api/OdsApi~exportRecordsCSV_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportRecordsCSV_0(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling exportRecordsCSV_0");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling exportRecordsCSV_0");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'select': opts['select'],
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'order_by': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'timezone': opts['timezone'],
        'delimiter': opts['delimiter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['text/csv'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/exports/csv', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportRecordsGEOJSON_0 operation.
     * @callback module:api/OdsApi~exportRecordsGEOJSON_0Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export dataset in GEOJSON format 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {String} [select] A select expression can be used to add, remove or change fields to return. An expression can be:   - a wildcard ('*'): return all fields   - a field name: return only this field   - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'   - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value. 
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Array.<String>} [sort] **Deprecated, use `order_by` instead.**  A list of field names, each possibly prefixed with a minus (-).  Sorts results according to the specified fields' values. By default, the sort is ascending (from the smallest value to the biggest value). A minus sign (‘-‘) may be used to perform a descending sort. Sorting is only available on numeric fields (int, double, date and datetime) and on text fields which have the sortable annotation. 
     * @param {Array.<String>} [orderBy] A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).  Sorts results according to the specified fields' values in ascending order by default. To sort results in descending order, use the `desc` keyword.  Example: `sum(age) desc, name asc` 
     * @param {Number} [limit = -1)] Number of items to return in export.  Use -1 (default) to retrieve all records 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {Boolean} [pretty = false)] Activate pretty print
     * @param {module:api/OdsApi~exportRecordsGEOJSON_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportRecordsGEOJSON_0(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling exportRecordsGEOJSON_0");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling exportRecordsGEOJSON_0");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'select': opts['select'],
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'order_by': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'timezone': opts['timezone'],
        'pretty': opts['pretty']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/exports/geojson', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportRecordsICAL_0 operation.
     * @callback module:api/OdsApi~exportRecordsICAL_0Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export dataset in ICAL format 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {String} [select] A select expression can be used to add, remove or change fields to return. An expression can be:   - a wildcard ('*'): return all fields   - a field name: return only this field   - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'   - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value. 
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Array.<String>} [sort] **Deprecated, use `order_by` instead.**  A list of field names, each possibly prefixed with a minus (-).  Sorts results according to the specified fields' values. By default, the sort is ascending (from the smallest value to the biggest value). A minus sign (‘-‘) may be used to perform a descending sort. Sorting is only available on numeric fields (int, double, date and datetime) and on text fields which have the sortable annotation. 
     * @param {Array.<String>} [orderBy] A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).  Sorts results according to the specified fields' values in ascending order by default. To sort results in descending order, use the `desc` keyword.  Example: `sum(age) desc, name asc` 
     * @param {Number} [limit = -1)] Number of items to return in export.  Use -1 (default) to retrieve all records 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:api/OdsApi~exportRecordsICAL_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportRecordsICAL_0(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling exportRecordsICAL_0");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling exportRecordsICAL_0");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'select': opts['select'],
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'order_by': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/exports/ical', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportRecordsJSON_0 operation.
     * @callback module:api/OdsApi~exportRecordsJSON_0Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export dataset in JSON format 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {String} [select] A select expression can be used to add, remove or change fields to return. An expression can be:   - a wildcard ('*'): return all fields   - a field name: return only this field   - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'   - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value. 
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Array.<String>} [sort] **Deprecated, use `order_by` instead.**  A list of field names, each possibly prefixed with a minus (-).  Sorts results according to the specified fields' values. By default, the sort is ascending (from the smallest value to the biggest value). A minus sign (‘-‘) may be used to perform a descending sort. Sorting is only available on numeric fields (int, double, date and datetime) and on text fields which have the sortable annotation. 
     * @param {Array.<String>} [orderBy] A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).  Sorts results according to the specified fields' values in ascending order by default. To sort results in descending order, use the `desc` keyword.  Example: `sum(age) desc, name asc` 
     * @param {Number} [limit = -1)] Number of items to return in export.  Use -1 (default) to retrieve all records 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {Boolean} [pretty = false)] Activate pretty print
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:api/OdsApi~exportRecordsJSON_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportRecordsJSON_0(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling exportRecordsJSON_0");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling exportRecordsJSON_0");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'select': opts['select'],
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'order_by': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'pretty': opts['pretty'],
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/exports/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportRecordsOV2_0 operation.
     * @callback module:api/OdsApi~exportRecordsOV2_0Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export dataset in OV2 format 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {String} [select] A select expression can be used to add, remove or change fields to return. An expression can be:   - a wildcard ('*'): return all fields   - a field name: return only this field   - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'   - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value. 
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Array.<String>} [sort] **Deprecated, use `order_by` instead.**  A list of field names, each possibly prefixed with a minus (-).  Sorts results according to the specified fields' values. By default, the sort is ascending (from the smallest value to the biggest value). A minus sign (‘-‘) may be used to perform a descending sort. Sorting is only available on numeric fields (int, double, date and datetime) and on text fields which have the sortable annotation. 
     * @param {Array.<String>} [orderBy] A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).  Sorts results according to the specified fields' values in ascending order by default. To sort results in descending order, use the `desc` keyword.  Example: `sum(age) desc, name asc` 
     * @param {Number} [limit = -1)] Number of items to return in export.  Use -1 (default) to retrieve all records 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:api/OdsApi~exportRecordsOV2_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportRecordsOV2_0(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling exportRecordsOV2_0");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling exportRecordsOV2_0");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'select': opts['select'],
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'order_by': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/exports/ov2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportRecordsSHP_0 operation.
     * @callback module:api/OdsApi~exportRecordsSHP_0Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export dataset in Esri shapefile (shp) format 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {String} [select] A select expression can be used to add, remove or change fields to return. An expression can be:   - a wildcard ('*'): return all fields   - a field name: return only this field   - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'   - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value. 
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Array.<String>} [sort] **Deprecated, use `order_by` instead.**  A list of field names, each possibly prefixed with a minus (-).  Sorts results according to the specified fields' values. By default, the sort is ascending (from the smallest value to the biggest value). A minus sign (‘-‘) may be used to perform a descending sort. Sorting is only available on numeric fields (int, double, date and datetime) and on text fields which have the sortable annotation. 
     * @param {Array.<String>} [orderBy] A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).  Sorts results according to the specified fields' values in ascending order by default. To sort results in descending order, use the `desc` keyword.  Example: `sum(age) desc, name asc` 
     * @param {Number} [limit = -1)] Number of items to return in export.  Use -1 (default) to retrieve all records 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:api/OdsApi~exportRecordsSHP_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportRecordsSHP_0(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling exportRecordsSHP_0");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling exportRecordsSHP_0");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'select': opts['select'],
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'order_by': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/zip'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/exports/shp', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportRecordsXLS_0 operation.
     * @callback module:api/OdsApi~exportRecordsXLS_0Callback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export dataset in XLS (Excel) format 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {String} [select] A select expression can be used to add, remove or change fields to return. An expression can be:   - a wildcard ('*'): return all fields   - a field name: return only this field   - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'   - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value. 
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Array.<String>} [sort] **Deprecated, use `order_by` instead.**  A list of field names, each possibly prefixed with a minus (-).  Sorts results according to the specified fields' values. By default, the sort is ascending (from the smallest value to the biggest value). A minus sign (‘-‘) may be used to perform a descending sort. Sorting is only available on numeric fields (int, double, date and datetime) and on text fields which have the sortable annotation. 
     * @param {Array.<String>} [orderBy] A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).  Sorts results according to the specified fields' values in ascending order by default. To sort results in descending order, use the `desc` keyword.  Example: `sum(age) desc, name asc` 
     * @param {Number} [limit = -1)] Number of items to return in export.  Use -1 (default) to retrieve all records 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:api/OdsApi~exportRecordsXLS_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    exportRecordsXLS_0(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling exportRecordsXLS_0");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling exportRecordsXLS_0");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'select': opts['select'],
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'order_by': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['xls'];
      let returnType = File;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/exports/xls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatasetAttachements_0 operation.
     * @callback module:api/OdsApi~getDatasetAttachements_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDatasetAttachements200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of all available attachments 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {module:api/OdsApi~getDatasetAttachements_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDatasetAttachements200Response}
     */
    getDatasetAttachements_0(source, datasetId, callback) {
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getDatasetAttachements_0");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getDatasetAttachements_0");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDatasetAttachements200Response;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatasetFile_0 operation.
     * @callback module:api/OdsApi~getDatasetFile_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download file 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {String} fileId 
     * @param {Object} opts Optional parameters
     * @param {String} [thumbnailSize] Set the size of the thumbnail representing the resource (attachment, image or file)
     * @param {module:api/OdsApi~getDatasetFile_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    getDatasetFile_0(source, datasetId, fileId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getDatasetFile_0");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getDatasetFile_0");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getDatasetFile_0");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId,
        'file_id': fileId
      };
      let queryParams = {
        'thumbnail_size': opts['thumbnailSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatasetReuse_0 operation.
     * @callback module:api/OdsApi~getDatasetReuse_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDatasetReuse200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single reuse based on its ID. 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {String} reuseId 
     * @param {Object} opts Optional parameters
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:api/OdsApi~getDatasetReuse_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDatasetReuse200Response}
     */
    getDatasetReuse_0(source, datasetId, reuseId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getDatasetReuse_0");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getDatasetReuse_0");
      }
      // verify the required parameter 'reuseId' is set
      if (reuseId === undefined || reuseId === null) {
        throw new Error("Missing the required parameter 'reuseId' when calling getDatasetReuse_0");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId,
        'reuse_id': reuseId
      };
      let queryParams = {
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDatasetReuse200Response;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/reuses/{reuse_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatasetReuses_0 operation.
     * @callback module:api/OdsApi~getDatasetReuses_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDatasetReuses200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of reuses 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10. 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:api/OdsApi~getDatasetReuses_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDatasetReuses200Response}
     */
    getDatasetReuses_0(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getDatasetReuses_0");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getDatasetReuses_0");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDatasetReuses200Response;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/reuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatasetSnapshots_0 operation.
     * @callback module:api/OdsApi~getDatasetSnapshots_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDatasetSnapshots200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of all snapshots for this dataset. 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:api/OdsApi~getDatasetSnapshots_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDatasetSnapshots200Response}
     */
    getDatasetSnapshots_0(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getDatasetSnapshots_0");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getDatasetSnapshots_0");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDatasetSnapshots200Response;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/snapshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataset_0 operation.
     * @callback module:api/OdsApi~getDataset_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDatasets200ResponseDatasetsInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of available endpoints for the specified dataset, with metadata and endpoints.  Will provide links for: * the attachments endpoint * the files endpoint * the records endpoint * the catalog endpoint 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {String} [select] A select expression can be used to add, remove or change fields to return. An expression can be:   - a wildcard ('*'): return all fields   - a field name: return only this field   - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'   - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value. 
     * @param {Boolean} [pretty = false)] Activate pretty print
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {Boolean} [includeAppMetas = false)] Explicitely request application metas for each datasets. 
     * @param {module:api/OdsApi~getDataset_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDatasets200ResponseDatasetsInner}
     */
    getDataset_0(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getDataset_0");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getDataset_0");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'select': opts['select'],
        'pretty': opts['pretty'],
        'timezone': opts['timezone'],
        'include_app_metas': opts['includeAppMetas']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDatasets200ResponseDatasetsInner;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatasetsFacets_1 operation.
     * @callback module:api/OdsApi~getDatasetsFacets_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecordsFacets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enumerate facets values for datasets and return a list of values for each facet. Can be used to implement guided navigation in large result sets.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#enumerating-facets-values) for more details. 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:api/OdsApi~getDatasetsFacets_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecordsFacets200Response}
     */
    getDatasetsFacets_1(source, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getDatasetsFacets_1");
      }

      let pathParams = {
        'source': source
      };
      let queryParams = {
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRecordsFacets200Response;
      return this.apiClient.callApi(
        '/{source}/facets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDatasets_0 operation.
     * @callback module:api/OdsApi~getDatasets_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDatasets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of available datasets, each with their endpoints, paginated.  Links provided: * previous page * next page * last page * first page 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {Object} opts Optional parameters
     * @param {String} [select] A select expression can be used to add, remove or change fields to return. An expression can be:   - a wildcard ('*'): return all fields   - a field name: return only this field   - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'   - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value. 
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {String} [groupBy] A group by expression defines a grouping function for an aggregation. It can be:  - a field name: group result by each value of this field  - a range function: group result by range  - a date function: group result by date It is possible to specify a custom name with the 'as name' notation. For instance: group_by='city_field as city'. 
     * @param {Array.<String>} [sort] **Deprecated, use `order_by` instead.**  A list of field names, each possibly prefixed with a minus (-).  Sorts results according to the specified fields' values. By default, the sort is ascending (from the smallest value to the biggest value). A minus sign (‘-‘) may be used to perform a descending sort. Sorting is only available on numeric fields (int, double, date and datetime) and on text fields which have the sortable annotation. 
     * @param {Array.<String>} [orderBy] A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).  Sorts results according to the specified fields' values in ascending order by default. To sort results in descending order, use the `desc` keyword.  Example: `sum(age) desc, name asc` 
     * @param {Number} [limit = 10)] Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10. 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {Boolean} [pretty = false)] Activate pretty print
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {Boolean} [includeAppMetas = false)] Explicitely request application metas for each datasets. 
     * @param {module:api/OdsApi~getDatasets_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDatasets200Response}
     */
    getDatasets_0(source, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getDatasets_0");
      }

      let pathParams = {
        'source': source
      };
      let queryParams = {
        'select': opts['select'],
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'group_by': opts['groupBy'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'order_by': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'pretty': opts['pretty'],
        'timezone': opts['timezone'],
        'include_app_metas': opts['includeAppMetas']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDatasets200Response;
      return this.apiClient.callApi(
        '/{source}/datasets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetadataTemplate_0 operation.
     * @callback module:api/OdsApi~getMetadataTemplate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMetadataTemplatesType200ResponseMetadataTemplatesInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A single metadata_template 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {module:model/String} metadataTemplateType 
     * @param {String} metadataTemplateName 
     * @param {module:api/OdsApi~getMetadataTemplate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMetadataTemplatesType200ResponseMetadataTemplatesInner}
     */
    getMetadataTemplate_0(source, metadataTemplateType, metadataTemplateName, callback) {
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getMetadataTemplate_0");
      }
      // verify the required parameter 'metadataTemplateType' is set
      if (metadataTemplateType === undefined || metadataTemplateType === null) {
        throw new Error("Missing the required parameter 'metadataTemplateType' when calling getMetadataTemplate_0");
      }
      // verify the required parameter 'metadataTemplateName' is set
      if (metadataTemplateName === undefined || metadataTemplateName === null) {
        throw new Error("Missing the required parameter 'metadataTemplateName' when calling getMetadataTemplate_0");
      }

      let pathParams = {
        'source': source,
        'metadata_template_type': metadataTemplateType,
        'metadata_template_name': metadataTemplateName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMetadataTemplatesType200ResponseMetadataTemplatesInner;
      return this.apiClient.callApi(
        '/{source}/metadata_templates/{metadata_template_type}/{metadata_template_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetadataTemplatesType_0 operation.
     * @callback module:api/OdsApi~getMetadataTemplatesType_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMetadataTemplatesType200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of metadata templates available for this type. 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {module:model/String} metadataTemplateType 
     * @param {module:api/OdsApi~getMetadataTemplatesType_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMetadataTemplatesType200Response}
     */
    getMetadataTemplatesType_0(source, metadataTemplateType, callback) {
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getMetadataTemplatesType_0");
      }
      // verify the required parameter 'metadataTemplateType' is set
      if (metadataTemplateType === undefined || metadataTemplateType === null) {
        throw new Error("Missing the required parameter 'metadataTemplateType' when calling getMetadataTemplatesType_0");
      }

      let pathParams = {
        'source': source,
        'metadata_template_type': metadataTemplateType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetMetadataTemplatesType200Response;
      return this.apiClient.callApi(
        '/{source}/metadata_templates/{metadata_template_type}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMetadataTemplatesTypes_0 operation.
     * @callback module:api/OdsApi~getMetadataTemplatesTypes_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRoot200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of available metadata templates types, each with their endpoints. 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {module:api/OdsApi~getMetadataTemplatesTypes_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRoot200Response}
     */
    getMetadataTemplatesTypes_0(source, callback) {
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getMetadataTemplatesTypes_0");
      }

      let pathParams = {
        'source': source
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRoot200Response;
      return this.apiClient.callApi(
        '/{source}/metadata_templates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPage_0 operation.
     * @callback module:api/OdsApi~getPage_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPages200ResponsePagesInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A single page's metadata from this portal 
     * @param {String} slug Page slug. 
     * @param {module:api/OdsApi~getPage_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPages200ResponsePagesInner}
     */
    getPage_0(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling getPage_0");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPages200ResponsePagesInner;
      return this.apiClient.callApi(
        '/pages/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPages_0 operation.
     * @callback module:api/OdsApi~getPages_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPages200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of all pages from this portal. 
     * @param {module:api/OdsApi~getPages_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPages200Response}
     */
    getPages_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetPages200Response;
      return this.apiClient.callApi(
        '/pages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecord_0 operation.
     * @callback module:api/OdsApi~getRecord_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecords200ResponseRecordsInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a single record based on its ID. 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {String} recordId 
     * @param {Object} opts Optional parameters
     * @param {String} [select] A select expression can be used to add, remove or change fields to return. An expression can be:   - a wildcard ('*'): return all fields   - a field name: return only this field   - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'   - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value. 
     * @param {Boolean} [pretty = false)] Activate pretty print
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:api/OdsApi~getRecord_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecords200ResponseRecordsInner}
     */
    getRecord_0(source, datasetId, recordId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getRecord_0");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getRecord_0");
      }
      // verify the required parameter 'recordId' is set
      if (recordId === undefined || recordId === null) {
        throw new Error("Missing the required parameter 'recordId' when calling getRecord_0");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId,
        'record_id': recordId
      };
      let queryParams = {
        'select': opts['select'],
        'pretty': opts['pretty'],
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRecords200ResponseRecordsInner;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/records/{record_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecordsFacets_1 operation.
     * @callback module:api/OdsApi~getRecordsFacets_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecordsFacets200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enumerate facets values for records and return a list of values for each facet. Can be used to implement guided navigation in large result sets.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#enumerating-facets-values) for more details. 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:api/OdsApi~getRecordsFacets_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecordsFacets200Response}
     */
    getRecordsFacets_1(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getRecordsFacets_1");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getRecordsFacets_1");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRecordsFacets200Response;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/facets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecords_0 operation.
     * @callback module:api/OdsApi~getRecords_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecords200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search dataset's records. 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {Object} opts Optional parameters
     * @param {String} [select] A select expression can be used to add, remove or change fields to return. An expression can be:   - a wildcard ('*'): return all fields   - a field name: return only this field   - an include/exclude function. Include (resp exclude) all field matching include/exclude expression. This expression can contain wildcard. For example: include(spa*) will return all fields begining with 'spa'   - a complex expression: return the result of this expression. A label can be set for this expression, in that case, field will be named with this label. For instance: 'size * 2 as bigger_size' will return a new field named bigger_size and containing the double of size field value. 
     * @param {Array.<String>} [where] An array of filters.  A filter is a text expression performing a simple full-text search that can also include logical operations (NOT, AND, OR...) as well as lots of other functions, thus performing more complex and more precise searches.  Read [the query language reference](https://docs.opendatasoft.com/api/explore/v2.html#where-clause) for more details. 
     * @param {String} [groupBy] A group by expression defines a grouping function for an aggregation. It can be:  - a field name: group result by each value of this field  - a range function: group result by range  - a date function: group result by date It is possible to specify a custom name with the 'as name' notation. For instance: group_by='city_field as city'. 
     * @param {Array.<String>} [sort] **Deprecated, use `order_by` instead.**  A list of field names, each possibly prefixed with a minus (-).  Sorts results according to the specified fields' values. By default, the sort is ascending (from the smallest value to the biggest value). A minus sign (‘-‘) may be used to perform a descending sort. Sorting is only available on numeric fields (int, double, date and datetime) and on text fields which have the sortable annotation. 
     * @param {Array.<String>} [orderBy] A comma-separated list of field names or aggregations to sort on, followed by an order (`asc` or `desc`).  Sorts results according to the specified fields' values in ascending order by default. To sort results in descending order, use the `desc` keyword.  Example: `sum(age) desc, name asc` 
     * @param {Number} [limit = 10)] Number of items to return.  To use in conjonction with offset to implement pagination.  Limit maximum value is 100. To retrive more data use export entry points. The default value is 10. 
     * @param {Number} [offset = 0)] Index of the first item to return (starting at 0).  To use in conjonction with limit to implement pagination. 
     * @param {Array.<String>} [search] An array of full text search.  A full text search performs a prefixed text search for each provided terms in all visible fields of a catalog/dataset. 
     * @param {Array.<String>} [facet] A facet is a field used for simple filtering (through the parameters refine and exclude) or exploration (with the endpoint `/facets`).  Facets can be configured in the back-office or with this parameter.  Read [the facets documentation](https://help.opendatasoft.com/apis/ods-search-v2/#facets) for more details. 
     * @param {Array.<String>} [refine] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will only include the selected facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Refining with a facet is equivalent to selecting an entry in the left navigation panel.*  *refine is not available for monitoring sources* 
     * @param {Array.<String>} [exclude] An array of facet filters. For example **city:Paris** or **modified:2019/12**. The request will exclude the defined facet value.  Read [filtering with facets value](https://help.opendatasoft.com/apis/ods-search-v2/#filtering-with-facets-values) for more details.  *Not to be confused with a where filter. Excluding a facet value is equivalent to removing an entry in the left navigation panel.*  *exclude is not available for monitoring sources* 
     * @param {Boolean} [pretty = false)] Activate pretty print
     * @param {String} [timezone = 'UTC')] Set timezone for datetime fields
     * @param {module:api/OdsApi~getRecords_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecords200Response}
     */
    getRecords_0(source, datasetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getRecords_0");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling getRecords_0");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
        'select': opts['select'],
        'where': this.apiClient.buildCollectionParam(opts['where'], 'multi'),
        'group_by': opts['groupBy'],
        'sort': this.apiClient.buildCollectionParam(opts['sort'], 'csv'),
        'order_by': this.apiClient.buildCollectionParam(opts['orderBy'], 'csv'),
        'limit': opts['limit'],
        'offset': opts['offset'],
        'search': this.apiClient.buildCollectionParam(opts['search'], 'multi'),
        'facet': this.apiClient.buildCollectionParam(opts['facet'], 'multi'),
        'refine': this.apiClient.buildCollectionParam(opts['refine'], 'multi'),
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'pretty': opts['pretty'],
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRecords200Response;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/records', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoot_0 operation.
     * @callback module:api/OdsApi~getRoot_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRoot200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API entry point  Provides links for: * catalog, your domain's list of datasets * opendatasoft, all datasets on the Opendatasoft network 
     * @param {module:api/OdsApi~getRoot_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRoot200Response}
     */
    getRoot_0(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRoot200Response;
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSource_0 operation.
     * @callback module:api/OdsApi~getSource_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRoot200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Source entry points  Provides links for the source's datasets and metadata. 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {module:api/OdsApi~getSource_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRoot200Response}
     */
    getSource_0(source, callback) {
      let postBody = null;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling getSource_0");
      }

      let pathParams = {
        'source': source
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRoot200Response;
      return this.apiClient.callApi(
        '/{source}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendDatasetFeedback_0 operation.
     * @callback module:api/OdsApi~sendDatasetFeedback_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create new feedback entry. 
     * @param {module:model/String} source Each source represents a different catalog of datasets you'll be able to query.  There are 2 sources available:  * catalog: the catalog of datasets on your portal * opendatasoft: Opendatasoft's repository of public datasets, also available at   [data.opendatasoft.com](https://data.opendatasoft.com/page/home/) 
     * @param {String} datasetId Dataset identifier.  Can be found in the \"information\" tab of the dataset page. 
     * @param {module:model/SendDatasetFeedbackRequest} feedback Feedback entry
     * @param {module:api/OdsApi~sendDatasetFeedback_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    sendDatasetFeedback_0(source, datasetId, feedback, callback) {
      let postBody = feedback;
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling sendDatasetFeedback_0");
      }
      // verify the required parameter 'datasetId' is set
      if (datasetId === undefined || datasetId === null) {
        throw new Error("Missing the required parameter 'datasetId' when calling sendDatasetFeedback_0");
      }
      // verify the required parameter 'feedback' is set
      if (feedback === undefined || feedback === null) {
        throw new Error("Missing the required parameter 'feedback' when calling sendDatasetFeedback_0");
      }

      let pathParams = {
        'source': source,
        'dataset_id': datasetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{source}/datasets/{dataset_id}/feedback', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
